{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MarketV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\n\\n///@author Dualmint\\n///@title MarketV1\\n///@notice This is the declaration of the NFTMarket Contract for the Dualmint Markeplace that facilitates creation, buying, selling and auctions of tokenized versions of luxury items. \\n///@dev This contract is upgradable to allow for expansion of the use cases and the features offered by the Dualmint Markeplace.\\ncontract MarketV1 is Initializable, UUPSUpgradeable, ReentrancyGuardUpgradeable, OwnableUpgradeable, ERC1155HolderUpgradeable, ERC721Holder{\\n  using CountersUpgradeable for CountersUpgradeable.Counter;\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n\\n  // The MarketItem helps store each item on the Marketplace along with the relevant details of the asset and its current state. \\n  struct MarketItem {\\n    bool isOnMarket;        // true if the item is currently on sale or auction in the Marketplace.\\n    bool isOnAuction;       // true if an item is currently on auction in the Marketplace.\\n    uint itemId;            // the id of the item in the Marketplace\\n    address nftContract;    // the address of the ERC1155 contract where the item was minted.\\n    uint256 tokenId;        // the tokenId of the asset in the ERC1155 contract where the item was minted\\n    address owner;          // the address of the current owner of the asset in the Marketplace.\\n    uint price;             // the listing price of the item in the Marketplace (NOTE: This is the base price if the item is on auction).       \\n    uint256 saleCount;      // the number of times the item has been traded on the Marketplace.\\n    bool pendingClaim;      // this variable is only true when someone wins an auction but has not claimed the item yet.\\n  }\\n  \\n  //The Auction struct helps store the relevant information about any ongoing auction of an item.\\n  struct Auction {\\n    uint  endAt;                        // the timestamp at which the auction ends\\n    bool started;                       // true if the auction has started\\n    bool ended;                         // true if the auction has ended\\n    address highestBidder;              // stores the address of the current highest bidder\\n    uint highestBid;                    // stores the current highest bid made by the highest bidder\\n    uint bidCount;                      // stores the number of bids for the current auction of an item\\n  }\\n\\n  // The BidStruct helps store the details linked with each bid.\\n  struct BidStruct {\\n      address bidder;         // stores the address of the user who has bid on an item\\n      uint256 bid;            // stores the value of the bid\\n  }\\n\\n  // The IncompleteRoyalties struct helps store the snapshot of the sale information in case of insufficient gas while executing the royalty loop.\\n  struct IncompleteRoyalties {\\n    uint itemId;                      // the item id of the asset\\n    uint royaltyOwnerIndexReached;    // the index of the last owner who was given royalty as a part of the royalty loop\\n    uint saleCount;                   // the number of times the asset was sold when the execution of the royalty loop was incomplete\\n    uint intermediaryBalance;         // the royalty to be assigned to each intermediary owner as per the royalty structure\\n    bool isComplete;                  // true when the incomplete execution has been completed \\n  }\\n\\n  // Struct for processing signatures which are splitted into v, r, s values (helps reduce number of arguments passed into function)\\n  struct Signature {\\n    uint8 v; \\n    bytes32 r; \\n    bytes32 s;\\n  }\\n\\n  IERC20Upgradeable public tokenAddress; // The address of the ERC20 stablecoin contract on the ethereum blockchain network.\\n  CountersUpgradeable.Counter private _itemIds;// The number of items in the marketplace.\\n  CountersUpgradeable.Counter private _itemsOffMarket; // The number of items not currently on sale or auction.\\n  CountersUpgradeable.Counter public _incompleteRoyaltyIds; // This helps complete the unbounded royalty loop in case the user runs out of gas before the execution is completed. These IDs help store the snapshot of those sales to enable us to assign the promised royalties.\\n\\n  ///  NOTE: The following royalty percentages are defined to be 10 * actual percentage to facilitate calculations with better precision and allowing definition of a wider range of values since floating point numbers are not supported.\\n  ///  This means that 10% is represented as 100 and the same has been accounted for when calculations are being made as the value is divided by 1000 instead of 100.\\n \\n  uint256 public royaltiesPrecision;  // Precision value for calculating royalty.\\n  uint256 public royalties ;          // Percentage of sale amount distributed as royalties.\\n  uint256 public royaltyFirstOwner;   // Percentage of the the total royalty that is assigned to the first owner.\\n  uint256 public royaltyLastOwner;    // Percentage of the the total royalty that is assigned to the previous seller (NOTE: The last seller is the user who owned the asset before the current owner/seller, who has put it on sale). \\n  //implicit royalty_intermediaries = 1 - percentage(royaltyFirstOwner) - percentage(royaltyLastOwner)// Percentage of the total royalty going to the the intermediaries*/\\n  address private deployer ;          // The address of the deployer of the marketplace (NOTE: Dualmint's wallet address, also referred to as admin). \\n  uint256 public commissionPercent;   //  The percentage of commission received by Dualmint on each successful sale transaction.\\n  uint256 public gasThresholdForUserLoop; // Threshold of minimum gas required for the unbounded royalty loop when the user buys an asset to prevent DOS. \\n  uint256 public gasThresholdForAdminLoop; // Threshold of minimum gas required for the unbounded royalty loop when the admin tries to complete the loop (to prevent DOS ).\\n\\n  mapping (uint256 => IncompleteRoyalties) private incompleteRoyalties;   // stores the details of the incomplete royalty loops\\n  mapping (uint256 => Auction) private idToAuctionItem;                   // maps the item to its Auction Details\\n  mapping (uint256 => mapping(uint=>BidStruct)) public bids;              // maps the item to all its bids stored as BidStruct\\n  mapping(uint256 => MarketItem) private idToMarketItem;                  // maps each item in the MarketPlace to its details\\n  mapping (uint256 => mapping(uint256=>address)) public owners;           // stores all the owners of each item in the MarketPlace\\n  \\n  mapping (address => uint256) private pullableAmount;                    //deprecated (still exists because of original storage declaration before upgrade): maps the amount that can be withdrawn by the associated user (NOTE: PULL PAYMENT TO PREVENT SECURITY VULNERABILITIES)\\n  mapping (address => mapping(uint256=>bool)) public assets;              // mapping of already existing assets to prevent previously exsiting items to be introduced as new ones\\n\\n  mapping (address => mapping(address => uint256)) public newPullableAmount;    // stores the mapping of user address -> currency address -> balance\\n  mapping (uint256 => address) idToCurrencyAddress;                             // stores the current currency address for a market item\\n  mapping (uint256 => address) incompleteRoyaltyIdtoCurrencyAddress;            // stores the currency address for incompleteRoyalty (in case the item is put on sale again before completion is executed)\\n  \\n  mapping(uint256 => bytes4) idToInterfaceId;                                   // stores the interface id for market item\\n  bytes4 private constant ERC1155InterfaceId = 0xd9b67a26;                      // ERC1155 interface id\\n  bytes4 private constant ERC721InterfaceId = 0x80ac58cd;                       // ERC721 interface id\\n\\n\\n  ///@notice An event that is triggered when a market item is created\\n  event MarketItemCreated ( \\n    uint indexed itemId, \\n    address nftContract, \\n    uint256 tokenId, \\n    address indexed seller, \\n    uint256 price, \\n    address currencyAddress,\\n    bool indexed isOnAuction\\n  );\\n\\n  ///@notice An event that is triggered when a bid is received\\n  event Bid (\\n    uint indexed itemId, \\n    address indexed sender, \\n    uint amount,\\n    address currencyAddress\\n  );\\n\\n\\n  ///@notice An event that is triggered when an auction ends \\n  event End(\\n    uint indexed itemId, \\n    address indexed highestBidder, \\n    uint highestBid,\\n    address currencyAddress\\n  );\\n\\n  ///@notice An event that is triggered when a user balance is updated\\n  event Balances(\\n    uint indexed itemId, \\n    address indexed puller, \\n    uint indexed transactionType, //In event Balance transaction type// 0 is for withdrawing event // 1 is for direct sale // 2 is for royalty distribution\\n    uint256 amount,\\n    address currencyAddress\\n  ); \\n  \\n  ///@notice An event that is triggered when a royalty distribution loop is not completed due to insufficient gas\\n  event IncompleteRoyalty(\\n    uint indexed royaltyId, \\n    uint indexed itemId, \\n    uint ownerReached, \\n    uint lastOwnerForRoyaltyLoopIndex\\n  );\\n\\n  ///@notice An event that is triggered when a previously incomplete royalty loop is run to completion by deployer\\n  event CompletedRoyalty(uint indexed royaltyId, uint indexed itemId);\\n\\n  ///@notice An event that is triggered when a royalty percentage is changed\\n  event RoyaltiesReset(\\n    uint overallRoyalties, \\n    uint firstOwnerRoyalty, \\n    uint lastOwnerRoyalty\\n  );\\n\\n  ///@notice An event that is triggered when an item is sold\\n  event CommissionsReset(uint commissionPercent);\\n\\n  ///@notice An event that is triggered when a direct sale occurs\\n  event DirectSale(\\n    uint indexed itemId, \\n    address indexed buyer, \\n    address indexed seller, \\n    uint price,\\n    address currencyAddress\\n  );\\n\\n  ///@notice An event that is triggered when the auction winning user withdraws the item\\n  event WithdrawItem(uint indexed itemId, address indexed buyer);\\n\\n  ///@notice An event that is triggered when an item is put on resale\\n  event ResellItem(\\n    uint indexed itemId, \\n    address indexed seller, \\n    uint price, \\n    address currencyAddress,\\n    bool indexed isOnAuction\\n  );\\n\\n  ///@notice An event that is triggered when user loop gas threshold is updated\\n  event UserGasThresholdChanged(uint newThreshold);\\n\\n  ///@notice An event that is triggered when admin loop gas threshold is updated\\n  event AdminGasThresholdChanged(uint newThreshold);\\n\\n  ///@notice An event that is triggered when the price is changed for an item that is on sale\\n  event PriceUpdated(uint256 itemId, uint256 newPrice, address newCurrencyAddress);\\n\\n  ///@notice An event that is triggered when an item is taken off sale\\n  event CancelSale(uint256 itemId);\\n\\n  ///@notice Initializing the upgradable contract in the required format\\n  // /// @custom:oz-upgrades-unsafe-allow constructor\\n  // constructor() {_disableInitializers();}\\n  // function initialize (address _tokenAddress) external initializer{\\n  //     royaltiesPrecision = 1000;\\n  //     royalties = 100;\\n  //     royaltyFirstOwner = 500;\\n  //     royaltyLastOwner = 200;\\n  //     commissionPercent = 25;\\n  //     gasThresholdForUserLoop = 250000;\\n  //     gasThresholdForAdminLoop = 200000;\\n  //     deployer = _msgSender();\\n  //     __Ownable_init();      \\n  //     __UUPSUpgradeable_init();\\n  //     __ReentrancyGuard_init();\\n  //     __ERC1155Holder_init();\\n  //     tokenAddress = IERC20Upgradeable(_tokenAddress);\\n  // }\\n\\n  ///@notice  This function is used to set the threshold of minimum gas required for the unbounded royalty loop when the user buys an asset to prevent DOS. \\n  ///@dev This function can only be called by the owner of the marketplace contract.\\n  ///@param newThreshold The threshold value to be set by the owner.\\n  function setGasThresholdForUserLoop (\\n    uint256 newThreshold\\n  ) \\n    external \\n    onlyOwner \\n  {\\n    require(newThreshold > 0,\\\"value too low\\\");\\n    gasThresholdForUserLoop = newThreshold;\\n    emit UserGasThresholdChanged(newThreshold);\\n  }\\n\\n  ///@notice  This function is used to set the threshold of minimum gas required for the unbounded royalty loop when the admin tries to complete the loop (to prevent DOS).\\n  ///@dev This function can only be called by the owner of the marketplace contract.\\n  ///@param newThreshold The threshold value to be set by the owner.\\n  function setGasThresholdForAdminLoop (\\n    uint256 newThreshold\\n  ) \\n    external \\n    onlyOwner \\n  {\\n    require(newThreshold > 0,\\\"value too low\\\");\\n    gasThresholdForAdminLoop = newThreshold;\\n    emit AdminGasThresholdChanged(newThreshold);\\n  }\\n\\n  \\n  ///@notice This function can be used to change the percentages of royalties\\n  ///@dev The function allows multiple or only one value to be changed. If a previous value of the variable is to be maintained, instead of passing the same value as an argument again, a value higher than 1000 can be passed as the case handling accounts for that\\n  ///@param _royalties The overall royalty percentage associated with the sale value.\\n  ///@param _royaltyFirstOwner The royalty of the first owner.\\n  ///@param _royaltyLastOwner  The royalty of the previous seller. \\n  function setRoyalties(\\n    uint _royalties, \\n    uint _royaltyFirstOwner, \\n    uint _royaltyLastOwner\\n  ) \\n    external \\n    onlyOwner\\n  {\\n    require(_royalties+commissionPercent<royaltiesPrecision, \\\"overall royalties too high\\\");\\n    require(_royaltyFirstOwner+_royaltyLastOwner<royaltiesPrecision,\\\"owner percentages too high\\\");\\n    royalties = _royalties;\\n    royaltyFirstOwner = _royaltyFirstOwner;\\n    royaltyLastOwner = _royaltyLastOwner;\\n    emit RoyaltiesReset(royalties,royaltyFirstOwner,royaltyLastOwner);\\n  }\\n\\n  \\n  ///@notice This function can be used to change the commision percentage of the Marketplace\\n  ///@param _commissionPercent  The new commision percentage \\n  function setCommissionPercent(uint256 _commissionPercent) external onlyOwner {\\n    require(royalties+_commissionPercent<royaltiesPrecision, \\\"commissionPercent too high\\\");\\n    commissionPercent = _commissionPercent;\\n    emit CommissionsReset(commissionPercent);\\n  }\\n  \\n  ///@notice This function is used to add the new variables associated with the market items which were not a part of the previous logic\\n  function upgradeRestructure() external onlyOwner {\\n    uint itemCount = _itemIds.current();\\n    for (uint i = 1; i <= itemCount; i++) {\\n      idToCurrencyAddress[i] = address(tokenAddress);\\n      idToInterfaceId[i] = ERC1155InterfaceId;\\n    }\\n  }\\n  \\n  ///@notice This function can be used to update the price of an item that has been put on sale\\n  ///@dev if bids are already placed for an auction type sale, the price cannot be updated\\n  ///@param itemId The id of the item whose price needs to be updated\\n  ///@param newPrice The updated price value\\n  ///@param currencyAddress The updated currency address\\n  function updatePrice(uint256 itemId, uint256 newPrice, address currencyAddress) external {\\n    require(idToMarketItem[itemId].owner == _msgSender(), \\\"You are not the owner\\\");\\n    require(idToMarketItem[itemId].isOnMarket, \\\"Currently not on sale\\\");\\n    if (idToMarketItem[itemId].isOnAuction){\\n      require(idToAuctionItem[itemId].bidCount == 0, \\\"Bids already placed\\\");\\n      idToAuctionItem[itemId].highestBid = newPrice;\\n    }\\n    idToMarketItem[itemId].price = newPrice;\\n    idToCurrencyAddress[itemId] = currencyAddress;\\n    emit PriceUpdated(itemId, newPrice, currencyAddress);\\n  }\\n\\n  ///@notice This function can be used to take an item off the marketplace\\n  ///@dev if bids are already placed for an auction type sale, this cannot be called\\n  ///@param itemId The id of the item whose sale needs to be cancelled\\n  function cancelSale(uint256 itemId) external {\\n    require(idToMarketItem[itemId].owner == _msgSender(), \\\"You are not the owner\\\");\\n    require(idToMarketItem[itemId].isOnMarket, \\\"Currently not on sale\\\");\\n    if (idToMarketItem[itemId].isOnAuction){\\n      require(idToAuctionItem[itemId].bidCount == 0, \\\"Bids already placed\\\");\\n      idToAuctionItem[itemId] = Auction(// solhint-disable-next-line not-rely-on-time\\n        block.timestamp,\\n        false,\\n        true,\\n        address(0),\\n        idToMarketItem[itemId].price,\\n        0\\n      );\\n      idToMarketItem[itemId].isOnAuction = false;\\n    } \\n    safeTransferItemFrom(address(this), idToMarketItem[itemId].owner, itemId, \\\"Cancel Sale\\\");\\n    idToMarketItem[itemId].isOnMarket = false;\\n    _itemsOffMarket.increment();\\n    emit CancelSale(itemId);\\n  }\\n\\n  ///@notice This function is called to put an asset on sale (or auction) on the Dualmint Marketplace\\n  ///@dev Approval from the nftContract is required before executing this function. Only ERC721 and ERC1155 are supported (along with their extensions)\\n  ///@param nftContract  The address of the ERC1155 contract where the item was minted\\n  ///@param tokenId The tokenId of the asset in the ERC1155 contract where the item was minted\\n  ///@param price The price at which the item is listed on the marketplace (NOTE: In case of auction, this is the base price)\\n  ///@param isAuctionItem  True if item has been put on auction\\n  ///@param numDays The number of seconds for which the item is on auction\\n  ///@param _hash The hash created for the creation of market item\\n  ///@param signature The signature of approval from Dualmint for creating this market item\\n  ///@param interfaceId The interface of the current token (i.e. ERC721 or ERC1155)\\n  function createMarketItem(\\n    address nftContract, \\n    uint256 tokenId, \\n    uint256 price, \\n    address currencyAddress,\\n    bool isAuctionItem, \\n    uint256 numDays,\\n    bytes32 _hash, \\n    Signature calldata signature,\\n    bytes4 interfaceId\\n  ) \\n    external \\n    nonReentrant \\n  {\\n    creationOfMarketItem(\\n      nftContract, \\n      tokenId, \\n      price, \\n      currencyAddress,\\n      isAuctionItem, \\n      numDays, \\n      _msgSender(),\\n      _hash,\\n      signature,\\n      interfaceId\\n    );\\n  }\\n\\n  ///@notice This function is called by Dualmint to put an asset on sale (or auction) on behalf of a customer\\n  ///@dev Approval from the nftContract is required before executing this function\\n  ///@param nftContract  The address of the ERC1155 contract where the item was minted.\\n  ///@param tokenId The tokenId of the asset in the ERC1155 contract where the item was minted\\n  ///@param price The price at which the item is listed on the marketplace (NOTE: In case of auction, this is the base price).\\n  ///@param isAuctionItem  True if item has been put on auction.\\n  ///@param numDays The number of seconds for which the item is on auction.\\n  ///@param assetOwner The desired owner of the item.\\n  ///@param _hash The hash created for the creation of market item\\n  ///@param signature The signature of approval from Dualmint for creating this market item\\n  ///@param interfaceId The interface of the current token (i.e. ERC721 or ERC1155)\\n  function assistedCreateMarketItem(\\n    address nftContract, \\n    uint256 tokenId, \\n    uint256 price, \\n    address currencyAddress,\\n    bool isAuctionItem, \\n    uint256 numDays, \\n    address assetOwner,\\n    bytes32 _hash, \\n    //bytes memory signature,\\n    Signature calldata signature,\\n    bytes4 interfaceId\\n  ) \\n    external \\n    onlyOwner\\n  {\\n    creationOfMarketItem(\\n      nftContract, \\n      tokenId, \\n      price, \\n      currencyAddress,\\n      isAuctionItem, \\n      numDays,\\n      assetOwner,\\n      _hash,\\n      signature,\\n      interfaceId\\n    );\\n  }\\n\\n  ///@notice The function to place a bid on an item that is currently on auction\\n  ///@dev Approval for the Marketplace is required from the bidder on the ERC20 contract stored at tokenAddress to transfer amount\\n  ///@param itemId The id of the item on which the bid is to be placed\\n  ///@param amount The bid amount.\\n  function createBid(uint256 itemId, uint256 amount) external payable nonReentrant{\\n    require(idToMarketItem[itemId].isOnMarket, \\\"Currently not on sale\\\");\\n    require(idToMarketItem[itemId].isOnAuction, \\\"Currently not on auction\\\");\\n    require(amount>idToAuctionItem[itemId].highestBid, \\\"Lower bid than acceptable\\\");\\n    // solhint-disable-next-line not-rely-on-time\\n    require(block.timestamp < idToAuctionItem[itemId].endAt, \\\"ended\\\"); // this condition ensures that the item is currently on auction and the bid is being made is the specified period\\n    address currencyAddress = idToCurrencyAddress[itemId];\\n    currencySafeTransferFrom(_msgSender(), address(this), amount, currencyAddress);    \\n    if (idToAuctionItem[itemId].highestBidder != address(0)) {  // if this is not the first bid, then the previous bid is saved and the previous bidder can withdraw their funds\\n      bids[itemId][idToAuctionItem[itemId].bidCount] = BidStruct(\\n        idToAuctionItem[itemId].highestBidder,\\n        idToAuctionItem[itemId].highestBid\\n      );//mapping (uint256 => mapping(uint=>BidStruct)) public bids;  \\n      newPullableAmount[idToAuctionItem[itemId].highestBidder][currencyAddress] += idToAuctionItem[itemId].highestBid;\\n    }\\n    idToAuctionItem[itemId].bidCount += 1;\\n    idToAuctionItem[itemId].highestBidder = _msgSender();\\n    idToAuctionItem[itemId].highestBid = amount;\\n    emit Bid(itemId,_msgSender(),amount, currencyAddress);\\n  }\\n\\n  \\n  ///@notice This is called once the auction period is over\\n  ///@dev For the auction to be completed and the funds and asset to be distributed, an external call is required\\n  ///@param itemId The itemId whose auction is over\\n  function endAuction(uint256 itemId) external nonReentrant {\\n        require(idToMarketItem[itemId].isOnAuction, \\\"Currently not on auction\\\");\\n        // solhint-disable-next-line not-rely-on-time\\n        require(block.timestamp >= idToAuctionItem[itemId].endAt, \\\"not ended\\\");\\n        require(!idToAuctionItem[itemId].ended, \\\"ended\\\");\\n        address currencyAddress = idToCurrencyAddress[itemId];\\n        if (idToAuctionItem[itemId].highestBidder == address(0)) {  //in case there are no bids for the item the ownership is transferred back to the user who listed\\n            safeTransferItemFrom(address(this), idToMarketItem[itemId].owner, itemId, \\\"No Bids\\\");\\n            idToMarketItem[itemId].isOnMarket = false;\\n            _itemsOffMarket.increment();\\n        } else {  // if bids were made successfully, the normal distribution of royalty and transfer of assets and assignment of balances shall take place\\n            distributionOfFundsAndAssets(\\n              idToAuctionItem[itemId].highestBid,\\n              idToAuctionItem[itemId].highestBidder, \\n              itemId,\\n              currencyAddress\\n            );\\n            idToMarketItem[itemId].pendingClaim = true;\\n        }\\n        idToMarketItem[itemId].price = idToAuctionItem[itemId].highestBid;\\n        //resetting state variables to default values\\n        idToAuctionItem[itemId] = Auction(// solhint-disable-next-line not-rely-on-time\\n          block.timestamp,\\n          false,\\n          true,\\n          address(0),\\n          idToMarketItem[itemId].price,\\n          0\\n        );\\n        idToMarketItem[itemId].isOnAuction = false;\\n        emit End(itemId, idToAuctionItem[itemId].highestBidder, idToAuctionItem[itemId].highestBid, currencyAddress);\\n  }\\n\\n  ///@notice This function executes the direct sale of an asset \\n  ///@dev This can only be called for an item that is not on auction\\n  ///@param itemId The itemId of the asset to be on sold\\n  function directMarketSale(uint256 itemId) external payable nonReentrant {\\n    require(!idToMarketItem[itemId].isOnAuction,\\\"Sale type is auction\\\");  \\n    require(idToMarketItem[itemId].isOnMarket, \\\"Currently not on sale\\\");\\n    address currencyAddress = idToCurrencyAddress[itemId];\\n    uint currentPrice = idToMarketItem[itemId].price;\\n    currencySafeTransferFrom(_msgSender(), address(this), currentPrice, currencyAddress);\\n    distributionOfFundsAndAssets(idToMarketItem[itemId].price, _msgSender(), itemId, currencyAddress);   // distribution of royalties and transfer of assets and assignment of balances shall take place\\n    safeTransferItemFrom(address(this), _msgSender(), itemId, \\\"DirectSale\\\");\\n    emit DirectSale(\\n      itemId, \\n      _msgSender(), \\n      owners[itemId][idToMarketItem[itemId].saleCount-1], \\n      currentPrice,\\n      currencyAddress\\n    );\\n  }\\n  \\n  ///@notice This function is called by the user to withdraw the asset purchased on the Marketplace.\\n  ///@dev This function is called to implement the pull payment mechanism for ERC1155 assets to avoid DOS.\\n  ///@param itemId The itemId of the asset purchased by the user on the Marketplace.\\n  function withdrawItem(uint256 itemId) external nonReentrant{\\n    require(idToMarketItem[itemId].pendingClaim==true,\\\"cannot withdraw\\\");\\n    require(idToMarketItem[itemId].owner==_msgSender(), \\\"not your asset\\\");\\n    idToMarketItem[itemId].pendingClaim=false;\\n    safeTransferItemFrom(address(this), _msgSender(), itemId, \\\"AuctionWinner\\\");\\n    emit WithdrawItem(itemId, _msgSender());\\n  }\\n\\n  ///@notice This function executes the listing for sale of an asset previously purchased on the marketplace.\\n  ///@dev The approval from the nftContract is required for transferring the ownership of the asset to the marketplace contract.\\n  ///@param itemId The itemId of the asset to be resold\\n  ///@param price The price at which the item is listed for resale on the marketplace (NOTE: In case of auction, this is the base price).\\n  ///@param isAuctionItem  True if item has been put on auction.\\n  ///@param numDays The number of seconds for which the item is on auction.\\n  function resellItem(uint256 itemId, uint256 price, address currencyAddress, bool isAuctionItem, uint256 numDays) external {\\n    require(!idToMarketItem[itemId].isOnMarket,\\\"The Item is already on sale\\\");\\n    safeTransferItemFrom(_msgSender(), address(this), itemId, \\\"ResellItem\\\");\\n    if (_msgSender()!=idToMarketItem[itemId].owner){\\n      idToMarketItem[itemId].owner = _msgSender();\\n      owners[itemId][idToMarketItem[itemId].saleCount] = _msgSender();\\n    }// TODO: NOTE: questionable\\n    idToMarketItem[itemId].isOnMarket = true;\\n    idToMarketItem[itemId].isOnAuction = isAuctionItem;\\n    idToMarketItem[itemId].price = price;\\n    idToCurrencyAddress[itemId] = currencyAddress;\\n    _itemsOffMarket.decrement();\\n    if(isAuctionItem){\\n      // solhint-disable-next-line not-rely-on-time\\n      idToAuctionItem[itemId] = Auction(block.timestamp+numDays, true, false, address(0), price, 0);\\n    }\\n    emit ResellItem(itemId, _msgSender(), price, currencyAddress, isAuctionItem);\\n  }\\n\\n  ///@notice This function is used to complete any incomplete royalty loops that had insufficient gas for execution\\n  ///@dev This function can only be called by the deployer and in case the gas is still not sufficient, this can be recalled and acounts for the stated condition by saving the state of its last execution.\\n  ///@param incompleteRoyaltyId The ID of the incomplete royalty event\\n  function completeRoyaltyLoop(uint incompleteRoyaltyId) external onlyOwner{\\n    require(!incompleteRoyalties[incompleteRoyaltyId].isComplete,\\\"already completed\\\");\\n    address currencyAddress = incompleteRoyaltyIdtoCurrencyAddress[incompleteRoyaltyId];\\n    uint i = incompleteRoyalties[incompleteRoyaltyId].royaltyOwnerIndexReached+1;\\n    for (\\n      i; \\n      i < incompleteRoyalties[incompleteRoyaltyId].saleCount - 2  && gasleft()>gasThresholdForAdminLoop;\\n      i++\\n    )\\n    { //royalty for intermediary owners who have not been assigned the royalty yet\\n      newPullableAmount[owners[incompleteRoyalties[incompleteRoyaltyId].itemId][i]][currencyAddress]+=\\n        incompleteRoyalties[incompleteRoyaltyId].intermediaryBalance;\\n      emit Balances(\\n        incompleteRoyalties[incompleteRoyaltyId].itemId, \\n        owners[incompleteRoyalties[incompleteRoyaltyId].itemId][i], \\n        2, \\n        incompleteRoyalties[incompleteRoyaltyId].intermediaryBalance,\\n        currencyAddress\\n      );\\n    }\\n    if(i!=incompleteRoyalties[incompleteRoyaltyId].saleCount-2){  // the case where there is not enough gas to complete the royalty loop, state of last execution is saved, event is emitted and can be called again\\n      emit IncompleteRoyalty(\\n        incompleteRoyaltyId, \\n        incompleteRoyalties[incompleteRoyaltyId].itemId, \\n        i-1, \\n        incompleteRoyalties[incompleteRoyaltyId].saleCount\\n      );\\n      incompleteRoyalties[incompleteRoyaltyId].royaltyOwnerIndexReached = i;\\n    } else {  // in case the loop has reached the end\\n      incompleteRoyalties[incompleteRoyaltyId].royaltyOwnerIndexReached = i;// optional\\n      incompleteRoyalties[incompleteRoyaltyId].isComplete = true;\\n      emit CompletedRoyalty(incompleteRoyaltyId, incompleteRoyalties[incompleteRoyaltyId].itemId);\\n    }\\n  }\\n\\n  ///@notice This function enables the user to withdraw the balances assigned to them\\n  ///@dev This function can be called by anyone on behalf of the user in case they do not have enough gas to execute it. Further, reentrancy has been secured against by changing the state variable before the execution of transfer.\\n  ///@param payee The address of the user whose balance is to be withdrawn\\n  function withdrawFundsForCurrency(address payee, address currencyAddress) external nonReentrant{\\n    require(newPullableAmount[payee][currencyAddress]>0,\\\"No balance to withdraw\\\");\\n    uint256 currentBalance = newPullableAmount[payee][currencyAddress];\\n    newPullableAmount[payee][currencyAddress]=0;\\n    // bool transferSuccessful = tokenAddress.transfer(payee,currentBalance);\\n    // require(transferSuccessful,\\\"transfer of tokens unsuccessful\\\");\\n    currencySafeTransfer(payee, currentBalance, currencyAddress);\\n    emit Balances(0, payee, 0, currentBalance, currencyAddress);\\n  }  \\n  \\n  ///@notice This function is used to handle safeTransferFrom as well as with native currency\\n  ///@dev If currencyAddress is address(0), native currency is processed\\n  ///@param from The address from which the currency needs to be transferred\\n  ///@param to The address to which the currency needs to be transferred\\n  ///@param amount The amount which needs to be transferred\\n  ///@param currencyAddress The address of the ERC20 token that needs to be transferred (See @dev)\\n  function currencySafeTransferFrom(address from, address to, uint amount, address currencyAddress) internal {\\n    if(currencyAddress==address(0)){\\n        require(msg.value==amount,\\\"Send exact native currency\\\");\\n    } else {\\n        IERC20Upgradeable currentTokenAddress = IERC20Upgradeable(currencyAddress);\\n        require(currentTokenAddress.allowance(from, to)>=amount,\\\"insufficient allowance\\\");\\n        IERC20Upgradeable(currentTokenAddress).safeTransferFrom(from, to, amount);\\n    }\\n  }\\n  \\n  ///@notice This function is used to handle safeTransfer of ERC20 tokens as well as with native currency\\n  ///@dev If currencyAddress is address(0), native currency is processed\\n  ///@param to The address to which the currency needs to be transferred\\n  ///@param amount The amount which needs to be transferred\\n  ///@param currencyAddress The address of the ERC20 token that needs to be transferred (See @dev)\\n  function currencySafeTransfer(address to, uint amount, address currencyAddress) internal {\\n    if(currencyAddress==address(0)) {\\n        (bool sent, bytes memory data) = to.call{value: amount}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n    } else {\\n        IERC20Upgradeable currentTokenAddress = IERC20Upgradeable(currencyAddress);\\n        IERC20Upgradeable(currentTokenAddress).safeTransfer(to, amount);\\n    }\\n  }\\n\\n  ///@notice This function is used to get the items currently on sale or auction in the marketplace.\\n  ///@return MarketItems currently on sale or auction in the marketplace (i.e. items with isOnMarket value stored as true).\\n  function fetchMarketItems() external view returns (MarketItem[] memory, address[] memory) {\\n    uint itemCount = _itemIds.current();\\n    uint unsoldItemCount = _itemIds.current() - _itemsOffMarket.current();\\n    uint currentIndex = 0;\\n    MarketItem[] memory items = new MarketItem[](unsoldItemCount);\\n    address[] memory currencyAddresses = new address[](unsoldItemCount);\\n    for (uint i = 1; i <= itemCount; i++) {\\n      if(idToMarketItem[i].isOnMarket){\\n        uint currentId = i;\\n        MarketItem storage currentItem = idToMarketItem[currentId];\\n        items[currentIndex] = currentItem;\\n        currencyAddresses[currentIndex] = idToCurrencyAddress[currentId];\\n        currentIndex += 1;\\n      } \\n    }\\n    return (items, currencyAddresses);\\n  }\\n\\n  ///@notice This function is used to get all the items in the marketplace irrespective of whether they are on sale or not.\\n  ///@return MarketItems in the Marketplace (irrespective of whether they are on sale or not) along with address array with their corresponding currencyAddress\\n  function fetchAllItems() external view returns (MarketItem[] memory, address[] memory) {\\n    MarketItem[] memory items = new MarketItem[](_itemIds.current());\\n    address[] memory currencyAddresses = new address[](_itemIds.current());\\n    for (uint i = 0; i < _itemIds.current(); ++i){\\n        MarketItem storage currentItem = idToMarketItem[i+1];\\n        items[i] = currentItem;\\n        currencyAddresses[i] = idToCurrencyAddress[i+1];\\n    }\\n    return (items, currencyAddresses);\\n  }\\n  \\n  ///@notice This function is used to get all the items currently owned by the msg.sender\\n  ///@dev This includes the items put on sale by the msg.sender too which are not currently sold\\n  ///@return MarketItems currently owned by the msg.sender along with their corresponding currencyAddresses in a separate array\\n  function fetchMyNFTs() external view returns (MarketItem[] memory, address[] memory) {\\n    uint totalItemCount = _itemIds.current();\\n    uint itemCount = 0;\\n    uint currentIndex = 0;\\n    for (uint i = 0; i < totalItemCount; i++) {\\n      if (idToMarketItem[i + 1].owner == _msgSender()) {\\n        itemCount += 1;\\n      }\\n    }\\n    MarketItem[] memory items = new MarketItem[](itemCount);\\n    address[] memory currencyAddresses = new address[](itemCount);\\n    for (uint i = 0; i < totalItemCount; i++) {\\n      if (idToMarketItem[i + 1].owner == _msgSender()) {\\n        uint currentId = i + 1;\\n        MarketItem storage currentItem = idToMarketItem[currentId];\\n        items[currentIndex] = currentItem;\\n        currencyAddresses[currentIndex] = idToCurrencyAddress[currentId];\\n        currentIndex += 1;\\n      }\\n    }\\n    return (items,currencyAddresses);\\n  }\\n\\n\\n  ///@notice This function is used to get all the items created by the msg.sender\\n  ///@return MarketItems created by the msg.sender along with their corresponding currencyAddresses in a separate array\\n  function fetchItemsCreated() external view returns (MarketItem[] memory, address[] memory) {\\n    uint totalItemCount = _itemIds.current();\\n    uint itemCount = 0;\\n    uint currentIndex = 0;\\n    for (uint i = 0; i < totalItemCount; i++) {\\n      if (owners[i+1][0] == _msgSender()) {\\n        itemCount += 1;\\n      }\\n    }\\n    MarketItem[] memory items = new MarketItem[](itemCount);\\n    address[] memory currencyAddresses = new address[](itemCount);\\n    for (uint i = 0; i < totalItemCount; i++) {\\n      if (owners[i+1][0] == _msgSender()) {\\n        uint currentId = i + 1;\\n        MarketItem storage currentItem = idToMarketItem[currentId];\\n        items[currentIndex] = currentItem;\\n        currencyAddresses[currentIndex] = idToCurrencyAddress[currentId];\\n        currentIndex += 1;\\n      }\\n    }\\n    return (items, currencyAddresses) ;\\n  }\\n  \\n  ///@notice This function is used to get auction details of an item\\n  ///@param itemId The item id whose auction details are to be retrieved\\n  ///@return AuctionDetails of the itemId\\n  function fetchAuctionItemsDetails(uint256 itemId) external view returns (Auction memory) {\\n    return idToAuctionItem[itemId];\\n  }\\n\\n  ///@notice This function is used to check the withdrawable balance of the user for a particular currencyAddress\\n  ///@param payee The address of the user\\n  ///@param currencyAddress The address of the currency whose balance needs to be fetched\\n  ///@dev The balance is returned with the precision of the ERC20 currency\\n  ///@return Balance of the user\\n  function checkBalanceForCurrency(address payee, address currencyAddress) external view returns(uint256){\\n    return newPullableAmount[payee][currencyAddress];\\n  }\\n\\n  ///@notice This function returns the signer for the hash\\n  ///@dev This is needed to verify Dualmint's approval for listing assets\\n  function recoverSigner(bytes32 _hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n    bytes32 messageDigest = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", _hash));\\n    return ECDSAUpgradeable.recover(messageDigest, v, r, s);\\n  }\\n  \\n  ///@notice This function is called by both createMarketItem and assistedCreateMarketItem to put an asset on sale(or auction) on the Dualmint Marketplace, avoiding the duplication of code.\\n  ///@dev This function is an internal function.\\n  ///@param nftContract  The address of the ERC1155 contract where the item was minted.\\n  ///@param tokenId The tokenId of the asset in the ERC1155 contract where the item was minted\\n  ///@param price The price at which the item is listed on the marketplace (NOTE: In case of auction, this is the base price).\\n  ///@param isAuctionItem  True if item has been put on auction.\\n  ///@param numDays The number of seconds for which the item is on auction.\\n  ///@param assetOwner The desired owner of the item.\\n  ///@param _hash The hash created for the creation of market item\\n  ///@param signature The signature of approval from Dualmint for creating this market item\\n  ///@param interfaceId The interface of the current token (i.e. ERC721 or ERC1155)\\n  function creationOfMarketItem(\\n    address nftContract, \\n    uint256 tokenId, \\n    uint256 price, \\n    address currencyAddress,\\n    bool isAuctionItem, \\n    uint256 numDays, \\n    address assetOwner,\\n    bytes32 _hash, \\n    Signature calldata signature,\\n    bytes4 interfaceId\\n  ) \\n    internal\\n  {\\n    require(price > 0, \\\"Price must be at least 1\\\");\\n    require(assets[nftContract][tokenId]==false,\\\"asset already exists\\\");\\n    require(keccak256(abi.encodePacked(DOMAIN_SEPARATOR(), nftContract, tokenId))==_hash,\\\"Incorrect details passed\\\"); //TODO: ENCODE PACKED MAY BE UNSAFE?\\n    require(recoverSigner(_hash, signature.v, signature.r, signature.s)==owner(), \\\"Signature invalid\\\");\\n    assets[nftContract][tokenId] = true;\\n    _itemIds.increment();\\n    uint256 itemId = _itemIds.current();\\n    idToMarketItem[itemId] = MarketItem(\\n      true, \\n      isAuctionItem, \\n      itemId, \\n      nftContract, \\n      tokenId, \\n      assetOwner, \\n      price, \\n      0,\\n      false\\n    ); \\n    idToInterfaceId[itemId] = interfaceId;\\n    owners[itemId][0] = assetOwner;\\n    safeTransferItemFrom(_msgSender(),address(this), itemId, \\\"MarketItemCreated\\\");\\n    if(isAuctionItem){\\n      // solhint-disable-next-line not-rely-on-time\\n      idToAuctionItem[itemId] = Auction(block.timestamp+numDays, true, false, address(0), price, 0);//NOTE BREAKING PRICE - 1 change?\\n    }\\n    idToCurrencyAddress[itemId] = currencyAddress;\\n    emit MarketItemCreated(itemId, nftContract, tokenId, assetOwner, price, currencyAddress, isAuctionItem);\\n  }\\n\\n  ///@notice This function executes the royalty loop, transfer of assets, and assignment of balances\\n  ///@dev The unbounded loop condition is handled by storing the current state of the execution in case the gas is insufficient and can be completed by calling completeRoyaltyLoop\\n  ///@param price The final price at which the asset is purchased\\n  ///@param buyer The user about to receive the asset\\n  ///@param itemId The asset associated with the sale\\n  ///@param currencyAddress The currencyAddress associated with the current sale\\n  function distributionOfFundsAndAssets(uint price, address buyer, uint itemId, address currencyAddress) internal {\\n    idToMarketItem[itemId].saleCount+=1;\\n    uint saleCount = idToMarketItem[itemId].saleCount;\\n    uint256 marketplaceCommission = ((price * commissionPercent)/royaltiesPrecision);\\n    newPullableAmount[deployer][currencyAddress]+= marketplaceCommission; // assigning commission to the marketplace\\n    emit Balances(itemId, deployer, 1, marketplaceCommission, currencyAddress);\\n    //allocation of sale price and royalties\\n    if(saleCount==1){\\n      // a -> b\\n      //if it is the first sale, the seller gets all the money\\n      uint256 sellerBalance = (((royaltiesPrecision-commissionPercent)*price)/royaltiesPrecision);\\n      newPullableAmount[idToMarketItem[itemId].owner][currencyAddress]+=sellerBalance;\\n      emit Balances(itemId, idToMarketItem[itemId].owner, 1, sellerBalance, currencyAddress);\\n    } else if (saleCount==2){\\n      // a -> b -> c\\n      //if it is the second sale\\n      //first owner gets royalty\\n      uint256 firstOwnerBalance = ((price*royalties)/royaltiesPrecision);\\n      newPullableAmount[owners[itemId][0]][currencyAddress]+= firstOwnerBalance;\\n      emit Balances(itemId, owners[itemId][0], 2, firstOwnerBalance, currencyAddress);\\n      //seller gets the sale price ( - royalty - commission)\\n      uint256 sellerBalance = ((price*(royaltiesPrecision-royalties-commissionPercent))\\n        /royaltiesPrecision);\\n      newPullableAmount[owners[itemId][idToMarketItem[itemId].saleCount-1]][currencyAddress]+=sellerBalance;\\n      emit Balances(itemId, owners[itemId][idToMarketItem[itemId].saleCount-1], 1 ,sellerBalance, currencyAddress);\\n    } else if (saleCount==3){\\n      // a-> b -> c -> d\\n      //first owner gets royalty\\n      uint256 firstOwnerBalance = ((price*royalties*royaltyFirstOwner)\\n        /(royaltiesPrecision*royaltiesPrecision));\\n      newPullableAmount[owners[itemId][0]][currencyAddress]+=firstOwnerBalance;\\n      emit Balances(itemId, owners[itemId][0], 2, firstOwnerBalance, currencyAddress);\\n      // royalty to last seller\\n      uint256 lastOwnerBalance = ((price*royalties*(royaltiesPrecision-royaltyFirstOwner))\\n        /(royaltiesPrecision*royaltiesPrecision));\\n      newPullableAmount[owners[itemId][idToMarketItem[itemId].saleCount-2]][currencyAddress]+=lastOwnerBalance;\\n      emit Balances(itemId,owners[itemId][idToMarketItem[itemId].saleCount-2] , 2, lastOwnerBalance, currencyAddress);\\n      //seller gets the sale price ( - royalty - commission)\\n      uint256 sellerBalance = ((price*(royaltiesPrecision-royalties-commissionPercent))\\n        /royaltiesPrecision);\\n      newPullableAmount[owners[itemId][idToMarketItem[itemId].saleCount-1]][currencyAddress]+=sellerBalance;\\n      emit Balances(itemId, owners[itemId][idToMarketItem[itemId].saleCount-1], 1 ,sellerBalance, currencyAddress);\\n    } else { // this condition is hit when saleCount>3\\n      // a->b->c->.....->w->x->y->z\\n      //first owner gets royalty\\n      uint256 firstOwnerBalance = ((price*royalties*royaltyFirstOwner)\\n        /(royaltiesPrecision*royaltiesPrecision));\\n      newPullableAmount[owners[itemId][0]][currencyAddress]+= firstOwnerBalance;\\n      emit Balances(itemId, owners[itemId][0], 2, firstOwnerBalance, currencyAddress);\\n      // royalty to last seller\\n      uint256 lastOwnerBalance = ((price*royalties*royaltyLastOwner)\\n        /(royaltiesPrecision*royaltiesPrecision));\\n      newPullableAmount[owners[itemId][idToMarketItem[itemId].saleCount-2]][currencyAddress]+=lastOwnerBalance;\\n      emit Balances(itemId,owners[itemId][idToMarketItem[itemId].saleCount-2] , 2, lastOwnerBalance, currencyAddress);\\n      // selling price - commission given to seller\\n      uint256 sellerBalance = ((price*(royaltiesPrecision - royalties - commissionPercent))\\n        /royaltiesPrecision);\\n      newPullableAmount[owners[itemId][idToMarketItem[itemId].saleCount-1]][currencyAddress]+=sellerBalance;\\n      emit Balances(itemId,owners[itemId][idToMarketItem[itemId].saleCount-1], 1,  sellerBalance, currencyAddress);\\n      // intermediaries get royalty\\n      uint256 intermediaryBalance = ((price*royalties\\n        *(royaltiesPrecision-royaltyFirstOwner-royaltyLastOwner))\\n        /(royaltiesPrecision*royaltiesPrecision))\\n        /(idToMarketItem[itemId].saleCount-3);\\n      uint i=1;\\n      for (i;i< idToMarketItem[itemId].saleCount-2 && gasleft()>gasThresholdForUserLoop; i++){ //royalty distributed among intermediary owners\\n        newPullableAmount[owners[itemId][i]][currencyAddress] += intermediaryBalance;\\n        emit Balances(itemId, owners[itemId][i], 2, intermediaryBalance, currencyAddress);\\n      }\\n      if(i!=idToMarketItem[itemId].saleCount-2){ // in case the gas is insufficient to complete the royalty loop, then the state is stored\\n        _incompleteRoyaltyIds.increment();\\n        uint royaltyId = _incompleteRoyaltyIds.current();\\n        incompleteRoyalties[royaltyId] = IncompleteRoyalties(\\n          itemId, \\n          i-1, \\n          idToMarketItem[itemId].saleCount, \\n          intermediaryBalance, \\n          false\\n        );\\n        incompleteRoyaltyIdtoCurrencyAddress[royaltyId] = currencyAddress;\\n        emit IncompleteRoyalty(royaltyId, itemId, i, idToMarketItem[itemId].saleCount);\\n      }\\n    }\\n    owners[itemId][idToMarketItem[itemId].saleCount]= buyer; // the new owner is _msgSender()\\n    idToMarketItem[itemId].isOnMarket = false;  // resetting\\n    idToMarketItem[itemId].owner = buyer;\\n    _itemsOffMarket.increment();\\n  }\\n  ///@notice This function is used to handle safeTransferFrom for ERC721 and ERC1155 tokens\\n  ///@dev The marketplace address needs to be approved for this\\n  ///@param from The address from which the token needs to be transferred\\n  ///@param to The address to which the token needs to be transferred\\n  ///@param itemId The id of the item which needs to be transferred\\n  ///@param data The data associated with this transfer\\n  function safeTransferItemFrom(address from, address to, uint itemId, bytes memory data) internal {\\n    if(idToInterfaceId[itemId] == ERC1155InterfaceId){\\n      IERC1155Upgradeable(idToMarketItem[itemId].nftContract).safeTransferFrom(\\n        from,\\n        to,\\n        idToMarketItem[itemId].tokenId,\\n        1,\\n        data\\n      );\\n    } else if ( idToInterfaceId[itemId] == ERC721InterfaceId) {\\n      IERC721Upgradeable(idToMarketItem[itemId].nftContract).safeTransferFrom(\\n        from,\\n        to,\\n        idToMarketItem[itemId].tokenId,\\n        data\\n      );\\n    } else {\\n      require(false,\\\"Unknown InterfaceId\\\");\\n    }\\n  }\\n\\n  ///@notice The Domain separator associated with this particular chain\\n  ///@dev This helps misuse of signatures across domains\\n  function DOMAIN_SEPARATOR()\\n    public\\n    view\\n    virtual\\n    returns (\\n        bytes32 _hash\\n    )\\n  {\\n    return keccak256(\\n        abi.encode(\\n          \\\"Dualmint Marketplace\\\", //name\\n          \\\"1.0\\\",                  //version\\n          block.chainid,          //chainid\\n          address(this),          \\n          bytes32(0x9653e33700788b1a9c321411f1573f08b17cdf6bf8a24e3f2f9245def8d47497)              //salt\\n        )\\n    );\\n  }\\n\\n  // solhint-disable-next-line no-empty-blocks\\n  function _authorizeUpgrade(address newImplementation) internal override onlyOwner{}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {\\n    function __ERC1155Holder_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Holder_init_unchained() internal onlyInitializing {\\n    }\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\\n    function __ERC1155Receiver_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Receiver_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"AdminGasThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"puller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"}],\"name\":\"Balances\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"}],\"name\":\"Bid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"CancelSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commissionPercent\",\"type\":\"uint256\"}],\"name\":\"CommissionsReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"royaltyId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"CompletedRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"}],\"name\":\"DirectSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"}],\"name\":\"End\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"royaltyId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ownerReached\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastOwnerForRoyaltyLoopIndex\",\"type\":\"uint256\"}],\"name\":\"IncompleteRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isOnAuction\",\"type\":\"bool\"}],\"name\":\"MarketItemCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCurrencyAddress\",\"type\":\"address\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isOnAuction\",\"type\":\"bool\"}],\"name\":\"ResellItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"overallRoyalties\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"firstOwnerRoyalty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastOwnerRoyalty\",\"type\":\"uint256\"}],\"name\":\"RoyaltiesReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"UserGasThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"WithdrawItem\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_incompleteRoyaltyIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAuctionItem\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"numDays\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetOwner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct MarketV1.Signature\",\"name\":\"signature\",\"type\":\"tuple\"},{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"assistedCreateMarketItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bids\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"cancelSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"}],\"name\":\"checkBalanceForCurrency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commissionPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"incompleteRoyaltyId\",\"type\":\"uint256\"}],\"name\":\"completeRoyaltyLoop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"createBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAuctionItem\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"numDays\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct MarketV1.Signature\",\"name\":\"signature\",\"type\":\"tuple\"},{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"createMarketItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"directMarketSale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"endAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchAllItems\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOnMarket\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isOnAuction\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pendingClaim\",\"type\":\"bool\"}],\"internalType\":\"struct MarketV1.MarketItem[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"fetchAuctionItemsDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"endAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"started\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"ended\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidCount\",\"type\":\"uint256\"}],\"internalType\":\"struct MarketV1.Auction\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchItemsCreated\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOnMarket\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isOnAuction\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pendingClaim\",\"type\":\"bool\"}],\"internalType\":\"struct MarketV1.MarketItem[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchMarketItems\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOnMarket\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isOnAuction\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pendingClaim\",\"type\":\"bool\"}],\"internalType\":\"struct MarketV1.MarketItem[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchMyNFTs\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOnMarket\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isOnAuction\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pendingClaim\",\"type\":\"bool\"}],\"internalType\":\"struct MarketV1.MarketItem[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasThresholdForAdminLoop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasThresholdForUserLoop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"newPullableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAuctionItem\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"numDays\",\"type\":\"uint256\"}],\"name\":\"resellItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royalties\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltiesPrecision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyFirstOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyLastOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commissionPercent\",\"type\":\"uint256\"}],\"name\":\"setCommissionPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"setGasThresholdForAdminLoop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"setGasThresholdForUserLoop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_royalties\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyFirstOwner\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyLastOwner\",\"type\":\"uint256\"}],\"name\":\"setRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"}],\"name\":\"updatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeRestructure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"}],\"name\":\"withdrawFundsForCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"withdrawItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MarketV1", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}