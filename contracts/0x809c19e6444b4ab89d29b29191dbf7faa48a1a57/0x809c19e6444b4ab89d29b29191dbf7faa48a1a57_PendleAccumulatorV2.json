{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/pendle/accumulator/PendleAccumulatorV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"src/base/interfaces/ILiquidityGauge.sol\\\";\\nimport \\\"openzeppelin-contracts/token/ERC20/IERC20.sol\\\";\\nimport {ILocker} from \\\"src/base/interfaces/ILocker.sol\\\";\\nimport {PendleLocker} from \\\"src/pendle/locker/PendleLocker.sol\\\";\\nimport {SafeTransferLib} from \\\"solady/src/utils/SafeTransferLib.sol\\\";\\nimport {ISDTDistributor} from \\\"src/base/interfaces/ISDTDistributor.sol\\\";\\nimport {IPendleFeeDistributor} from \\\"src/base/interfaces/IPendleFeeDistributor.sol\\\";\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n}\\n\\n/// @title A contract that accumulates ETH rewards and notifies them to the LGV4\\n/// @author StakeDAO\\ncontract PendleAccumulatorV2 {\\n    using SafeTransferLib for IERC20;\\n\\n    // Errors\\n    error DIFFERENT_LENGTH();\\n    error FEE_TOO_HIGH();\\n    error NO_BALANCE();\\n    error NO_REWARD();\\n    error NOT_ALLOWED();\\n    error NOT_ALLOWED_TO_PULL();\\n    error NOT_CLAIMED_ALL();\\n    error ONGOING_REWARD();\\n    error WRONG_CLAIM();\\n    error ZERO_ADDRESS();\\n\\n    address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address public constant VE_PENDLE = 0x4f30A9D41B80ecC5B94306AB4364951AE3170210;\\n    address public constant PENDLE_FEE_D = 0x8C237520a8E14D658170A633D96F8e80764433b9;\\n\\n    // fee recipients\\n    address public bountyRecipient;\\n    address public daoRecipient;\\n    address public veSdtFeeProxy;\\n    address public votesRewardRecipient;\\n    uint256 public bountyFee;\\n    uint256 public daoFee;\\n    uint256 public veSdtFeeProxyFee;\\n    uint256 public claimerFee;\\n\\n    address public governance;\\n    address public locker = 0xD8fa8dC5aDeC503AcC5e026a98F32Ca5C1Fa289A;\\n    address public gauge = 0x50DC9aE51f78C593d4138263da7088A973b8184E;\\n    address public sdtDistributor;\\n\\n    uint256 public periodsToAdd = 4;\\n    /// @notice weth rewards period to notify\\n    uint256 public periodsToNotify;\\n\\n    mapping(uint256 => uint256) public rewards; // period -> reward amount\\n    mapping(address => uint256) public canPullTokens;\\n\\n    /// @notice If set, the voters rewards will be distributed to the gauge\\n    bool public distributeVotersRewards;\\n\\n    // Events\\n    event BountyFeeSet(uint256 _old, uint256 _new);\\n    event BountyRecipientSet(address _old, address _new);\\n    event ClaimerFeeSet(uint256 _old, uint256 _new);\\n    event DaoFeeSet(uint256 _old, uint256 _new);\\n    event DaoRecipientSet(address _old, address _new);\\n    event DistributeVotersRewardsSet(bool _distributeAllRewards);\\n    event ERC20Rescued(address _token, uint256 _amount);\\n    event GaugeSet(address _old, address _new);\\n    event GovernanceSet(address _old, address _new);\\n    event LockerSet(address _old, address _new);\\n    event PeriodsToAddSet(uint256 _old, uint256 _new);\\n    event RewardNotified(address _gauge, address _tokenReward, uint256 _amountNotified);\\n    event SdtDistributorUpdated(address _old, address _new);\\n    event VeSdtFeeProxyFeeSet(uint256 _old, uint256 _new);\\n    event VeSdtFeeProxySet(address _old, address _new);\\n\\n    /* ========== CONSTRUCTOR ========== */\\n    constructor(\\n        address _governance,\\n        address _daoRecipient,\\n        address _bountyRecipient,\\n        address _veSdtFeeProxy,\\n        address _votesRewardRecipient\\n    ) {\\n        governance = _governance;\\n        daoRecipient = _daoRecipient;\\n        bountyRecipient = _bountyRecipient;\\n        veSdtFeeProxy = _veSdtFeeProxy;\\n        votesRewardRecipient = _votesRewardRecipient;\\n        daoFee = 500; // 5%\\n        bountyFee = 1000; // 10%\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n    /// @notice Claims Eth rewards via the locker, wrap to WETH and notify it to the LGV4\\n    function claimForVePendle() external {\\n        address[] memory pools = new address[](1);\\n        pools[0] = VE_PENDLE;\\n        uint256[] memory rewardsClaimable =\\n            IPendleFeeDistributor(PENDLE_FEE_D).getProtocolClaimables(address(locker), pools);\\n        /// check if there is any eth to claim for the vePENDLe pool\\n        if (rewardsClaimable[0] == 0) revert NO_REWARD();\\n        // reward for 1 months, split the reward in periodsToAdd\\n        // charge fees once for the entire month\\n        _chargeFee(_claimReward(pools));\\n        periodsToNotify += periodsToAdd;\\n    }\\n\\n    /// @notice Claims rewards for the voters and send to a recipient\\n    /// @param _pools pools to claim for\\n    function claimForVoters(address[] calldata _pools) external {\\n        // VE_PENDLE pool can't be present\\n        for (uint256 i; i < _pools.length;) {\\n            if (_pools[i] == VE_PENDLE) revert WRONG_CLAIM();\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        address[] memory vePendlePool = new address[](1);\\n        vePendlePool[0] = VE_PENDLE;\\n        uint256 vePendleRewardClaimable =\\n            IPendleFeeDistributor(PENDLE_FEE_D).getProtocolClaimables(address(locker), vePendlePool)[0];\\n        uint256 totalAccrued = IPendleFeeDistributor(PENDLE_FEE_D).getProtocolTotalAccrued(address(locker));\\n        uint256 claimed = IPendleFeeDistributor(PENDLE_FEE_D).claimed(address(locker));\\n        uint256 totalReward = _claimReward(_pools);\\n\\n        if (totalReward + _pools.length != totalAccrued - claimed - vePendleRewardClaimable) revert NOT_CLAIMED_ALL();\\n\\n        // send the reward to the recipient if it is not to distribute\\n        // and not charge fees on this\\n        if (!distributeVotersRewards) {\\n            IERC20(WETH).transfer(votesRewardRecipient, totalReward);\\n        } else {\\n            _chargeFee(totalReward);\\n        }\\n    }\\n\\n    /// @notice Claims rewards for voters and vePendle (all rewarded pools need to be included)\\n    /// @param _pools pools to claim for\\n    function claimForAll(address[] memory _pools) external {\\n        uint256 totalAccrued = IPendleFeeDistributor(PENDLE_FEE_D).getProtocolTotalAccrued(address(locker));\\n        uint256 claimed = IPendleFeeDistributor(PENDLE_FEE_D).claimed(address(locker));\\n\\n        uint256 totalReward = _claimReward(_pools);\\n        if (totalReward + _pools.length != totalAccrued - claimed) revert NOT_CLAIMED_ALL();\\n        periodsToNotify += periodsToAdd;\\n\\n        if (!distributeVotersRewards) {\\n            address[] memory vePendlePool = new address[](1);\\n            vePendlePool[0] = VE_PENDLE;\\n            uint256 vePendleRewardClaimable =\\n                IPendleFeeDistributor(PENDLE_FEE_D).getProtocolClaimables(address(locker), vePendlePool)[0];\\n            uint256 votersTotalReward = totalReward - vePendleRewardClaimable;\\n            // transfer the amount without charging fees\\n            IERC20(WETH).transfer(votesRewardRecipient, votersTotalReward);\\n            totalReward -= votersTotalReward;\\n        }\\n        if (totalReward != 0) {\\n            _chargeFee(totalReward);\\n        }\\n        _notifyReward(WETH);\\n\\n        _distributeSDT();\\n    }\\n\\n    /// @notice Notify the reward already claimed for the current period\\n    /// @param _token token to notify as reward\\n    function notifyReward(address _token) external {\\n        _notifyReward(_token);\\n        _distributeSDT();\\n    }\\n\\n    /// @notice Notify the rewards already claimed for the current period\\n    /// @param _tokens tokens to notify as reward\\n    function notifyRewards(address[] memory _tokens) external {\\n        uint256 tokensLength = _tokens.length;\\n        for (uint256 i; i < tokensLength;) {\\n            _notifyReward(_tokens[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        _distributeSDT();\\n    }\\n\\n    /// @notice Pull tokens\\n    /// @param _tokens tokens to pulls\\n    /// @param _amounts amounts to transfer to the caller\\n    function pullTokens(address[] calldata _tokens, uint256[] calldata _amounts) external {\\n        if (canPullTokens[msg.sender] == 0) revert NOT_ALLOWED_TO_PULL();\\n\\n        if (_tokens.length != _amounts.length) revert DIFFERENT_LENGTH();\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            if (_tokens[i] == address(0)) {\\n                SafeTransferLib.safeTransferETH(msg.sender, _amounts[i]);\\n            } else {\\n                SafeTransferLib.safeTransfer(_tokens[i], msg.sender, _amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Claim reward for the pools\\n    /// @param _pools pools to claim the rewards\\n    function _claimReward(address[] memory _pools) internal returns(uint256 claimed) {\\n        uint256 balanceBefore = address(this).balance;\\n        PendleLocker(locker).claimRewards(address(this), _pools);\\n        // Wrap Eth to WETH\\n        claimed = address(this).balance - balanceBefore;\\n        if (claimed == 0) revert NO_BALANCE();\\n        IWETH(WETH).deposit{value: address(this).balance}();\\n    }\\n\\n    /// @notice Reserve fees for dao, bounty and veSdtFeeProxy\\n    /// @param _amount amount to charge fees\\n    function _chargeFee(uint256 _amount) internal {\\n        // dao part\\n        if (daoFee > 0) {\\n            uint256 daoAmount = (_amount * daoFee) / 10_000;\\n            SafeTransferLib.safeTransfer(WETH, daoRecipient, daoAmount);\\n        }\\n\\n        // bounty part\\n        if (bountyFee > 0) {\\n            uint256 bountyAmount = (_amount * bountyFee) / 10_000;\\n            SafeTransferLib.safeTransfer(WETH, bountyRecipient, bountyAmount);\\n        }\\n\\n        // veSDTFeeProxy part\\n        if (veSdtFeeProxyFee > 0) {\\n            uint256 veSdtFeeProxyAmount = (_amount * veSdtFeeProxyFee) / 10_000;\\n            SafeTransferLib.safeTransfer(WETH, veSdtFeeProxy, veSdtFeeProxyAmount);\\n        }\\n    }\\n\\n    /// @notice Distribute SDT if there is any\\n    function _distributeSDT() internal {\\n        if (sdtDistributor != address(0)) {\\n            ISDTDistributor(sdtDistributor).distribute(gauge);\\n        }\\n    }\\n\\n    /// @notice Notify the new reward to the LGV4\\n    /// @param _tokenReward token to notify\\n    function _notifyReward(address _tokenReward) internal {\\n        uint256 amountToNotify;\\n        if (_tokenReward == WETH && periodsToNotify != 0) {\\n            uint256 currentWeek = block.timestamp * 1 weeks / 1 weeks;\\n            if (rewards[currentWeek] != 0) revert ONGOING_REWARD();\\n            amountToNotify = IERC20(WETH).balanceOf(address(this)) / periodsToNotify;\\n            rewards[currentWeek] = amountToNotify;\\n            periodsToNotify -= 1;\\n        } else {\\n            amountToNotify = IERC20(_tokenReward).balanceOf(address(this));\\n        }\\n\\n        if (amountToNotify != 0) {\\n            if (claimerFee > 0) {\\n                uint256 claimerReward = (amountToNotify * claimerFee) / 10_000;\\n                SafeTransferLib.safeTransfer(_tokenReward, msg.sender, claimerReward);\\n                amountToNotify -= claimerReward;\\n            }\\n\\n            IERC20(_tokenReward).approve(gauge, amountToNotify);\\n            ILiquidityGauge(gauge).deposit_reward_token(_tokenReward, amountToNotify);\\n\\n            emit RewardNotified(gauge, _tokenReward, amountToNotify);\\n        }\\n    }\\n\\n    /// @notice Set DAO recipient\\n    /// @param _daoRecipient recipient address\\n    function setDaoRecipient(address _daoRecipient) external {\\n        if (msg.sender != governance) revert NOT_ALLOWED();\\n        if (_daoRecipient == address(0)) revert ZERO_ADDRESS();\\n        emit DaoRecipientSet(daoRecipient, _daoRecipient);\\n        daoRecipient = _daoRecipient;\\n    }\\n\\n    /// @notice Set Bounty recipient\\n    /// @param _bountyRecipient recipient address\\n    function setBountyRecipient(address _bountyRecipient) external {\\n        if (msg.sender != governance) revert NOT_ALLOWED();\\n        if (_bountyRecipient == address(0)) revert ZERO_ADDRESS();\\n        emit BountyRecipientSet(bountyRecipient, _bountyRecipient);\\n        bountyRecipient = _bountyRecipient;\\n    }\\n\\n    /// @notice Set VeSdtFeeProxy\\n    /// @param _veSdtFeeProxy proxy address\\n    function setVeSdtFeeProxy(address _veSdtFeeProxy) external {\\n        if (msg.sender != governance) revert NOT_ALLOWED();\\n        if (_veSdtFeeProxy == address(0)) revert ZERO_ADDRESS();\\n        emit VeSdtFeeProxySet(veSdtFeeProxy, _veSdtFeeProxy);\\n        veSdtFeeProxy = _veSdtFeeProxy;\\n    }\\n\\n    /// @notice Set fees reserved to the DAO at every claim\\n    /// @param _daoFee fee (100 = 1%)\\n    function setDaoFee(uint256 _daoFee) external {\\n        if (msg.sender != governance) revert NOT_ALLOWED();\\n        if (_daoFee > 10_000 || _daoFee + bountyFee + veSdtFeeProxyFee + claimerFee > 10_000) {\\n            revert FEE_TOO_HIGH();\\n        }\\n        emit DaoFeeSet(daoFee, _daoFee);\\n        daoFee = _daoFee;\\n    }\\n\\n    /// @notice Set fees reserved to bounty at every claim\\n    /// @param _bountyFee fee (100 = 1%)\\n    function setBountyFee(uint256 _bountyFee) external {\\n        if (msg.sender != governance) revert NOT_ALLOWED();\\n        if (_bountyFee > 10_000 || _bountyFee + daoFee + veSdtFeeProxyFee + claimerFee > 10_000) revert FEE_TOO_HIGH();\\n        emit BountyFeeSet(bountyFee, _bountyFee);\\n        bountyFee = _bountyFee;\\n    }\\n\\n    /// @notice Set fees reserved to VeSdtFeeProxy at every claim\\n    /// @param _veSdtFeeProxyFee fee (100 = 1%)\\n    function setVeSdtFeeProxyFee(uint256 _veSdtFeeProxyFee) external {\\n        if (msg.sender != governance) revert NOT_ALLOWED();\\n        if (_veSdtFeeProxyFee > 10_000 || _veSdtFeeProxyFee + daoFee + bountyFee + claimerFee > 10_000) {\\n            revert FEE_TOO_HIGH();\\n        }\\n        emit VeSdtFeeProxyFeeSet(veSdtFeeProxyFee, _veSdtFeeProxyFee);\\n        veSdtFeeProxyFee = _veSdtFeeProxyFee;\\n    }\\n\\n    /// @notice Set fees reserved to claimer at every claim\\n    /// @param _claimerFee (100 = 1%)\\n    function setClaimerFee(uint256 _claimerFee) external {\\n        if (msg.sender != governance) revert NOT_ALLOWED();\\n        if (_claimerFee > 10_000) revert FEE_TOO_HIGH();\\n        emit ClaimerFeeSet(claimerFee, _claimerFee);\\n        claimerFee = _claimerFee;\\n    }\\n\\n    /// @notice Sets gauge for the accumulator which will receive and distribute the rewards\\n    /// @dev Can be called only by the governance\\n    /// @param _gauge gauge address\\n    function setGauge(address _gauge) external {\\n        if (msg.sender != governance) revert NOT_ALLOWED();\\n        if (_gauge == address(0)) revert ZERO_ADDRESS();\\n        emit GaugeSet(gauge, _gauge);\\n        gauge = _gauge;\\n    }\\n\\n    /// @notice Sets SdtDistributor to distribute from the Accumulator SDT Rewards to Gauge.\\n    /// @dev Can be called only by the governance\\n    /// @param _sdtDistributor gauge address\\n    function setSdtDistributor(address _sdtDistributor) external {\\n        if (msg.sender != governance) revert NOT_ALLOWED();\\n        if (_sdtDistributor == address(0)) revert ZERO_ADDRESS();\\n\\n        emit SdtDistributorUpdated(sdtDistributor, _sdtDistributor);\\n        sdtDistributor = _sdtDistributor;\\n    }\\n\\n    /// @notice Set distribute voter rewards to true/false\\n    /// @dev Can be called only by the governance\\n    /// @param _distributeVotersRewards enable/disable reward distribution\\n    function setDistributeVotersRewards(bool _distributeVotersRewards) external {\\n        if (msg.sender != governance) revert NOT_ALLOWED();\\n        emit DistributeVotersRewardsSet(distributeVotersRewards = _distributeVotersRewards);\\n    }\\n\\n    /// @notice Allows the governance to set the new governance\\n    /// @dev Can be called only by the governance\\n    /// @param _governance governance address\\n    function setGovernance(address _governance) external {\\n        if (msg.sender != governance) revert NOT_ALLOWED();\\n        if (_governance == address(0)) revert ZERO_ADDRESS();\\n        emit GovernanceSet(governance, _governance);\\n        governance = _governance;\\n    }\\n\\n    /// @notice Allows the governance to set the locker\\n    /// @dev Can be called only by the governance\\n    /// @param _locker locker address\\n    function setLocker(address _locker) external {\\n        if (msg.sender != governance) revert NOT_ALLOWED();\\n        if (_locker == address(0)) revert ZERO_ADDRESS();\\n        emit LockerSet(locker, _locker);\\n        locker = _locker;\\n    }\\n\\n    /// @notice Allows the governance to set rewards periods to add\\n    /// @dev Can be called only by the governance\\n    /// @param _periodsToAdd reward period to add at every ve_pendle claim\\n    function setPeriodsToAdd(uint256 _periodsToAdd) external {\\n        if (msg.sender != governance) revert NOT_ALLOWED();\\n        emit PeriodsToAddSet(periodsToAdd, _periodsToAdd);\\n        periodsToAdd = _periodsToAdd;\\n    }\\n\\n    /// @notice Toggle the allowance to pull tokens from the contract\\n    /// @dev Can be called only by the governance\\n    /// @param _user user to toggle\\n    function togglePullAllowance(address _user) external {\\n        if (msg.sender != governance) revert NOT_ALLOWED();\\n        canPullTokens[_user] = canPullTokens[_user] == 0 ? 1 : 0;\\n    }\\n\\n    /// @notice A function that rescue any ERC20 token\\n    /// @param _token token address\\n    /// @param _amount amount to rescue\\n    /// @param _recipient address to send token rescued\\n    function rescueToken(address _token, uint256 _amount, address _recipient) external {\\n        if (msg.sender != governance) revert NOT_ALLOWED();\\n        if (_recipient == address(0)) revert ZERO_ADDRESS();\\n\\n        if (_token == address(0)) {\\n            SafeTransferLib.safeTransferETH(msg.sender, _amount);\\n        } else {\\n            SafeTransferLib.safeTransfer(_token, msg.sender, _amount);\\n        }\\n\\n        emit ERC20Rescued(_token, _amount);\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"src/base/interfaces/ILiquidityGauge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.7;\\n\\ninterface ILiquidityGauge {\\n    struct Reward {\\n        address token;\\n        address distributor;\\n        uint256 period_finish;\\n        uint256 rate;\\n        uint256 last_update;\\n        uint256 integral;\\n    }\\n\\n    // solhint-disable-next-line\\n    function deposit_reward_token(address _rewardToken, uint256 _amount) external;\\n\\n    // solhint-disable-next-line\\n    function claim_rewards_for(address _user, address _recipient) external;\\n\\n    function working_balances(address _address) external view returns (uint256);\\n\\n    // // solhint-disable-next-line\\n    // function claim_rewards_for(address _user) external;\\n\\n    // solhint-disable-next-line\\n    function deposit(uint256 _value, address _addr) external;\\n\\n    // solhint-disable-next-line\\n    function reward_tokens(uint256 _i) external view returns (address);\\n\\n    // solhint-disable-next-line\\n    function reward_data(address _tokenReward) external view returns (Reward memory);\\n\\n    function balanceOf(address) external returns (uint256);\\n\\n    function claimable_reward(address _user, address _reward_token) external view returns (uint256);\\n\\n    function claimable_tokens(address _user) external returns (uint256);\\n\\n    function user_checkpoint(address _user) external returns (bool);\\n\\n    function commit_transfer_ownership(address) external;\\n\\n    function claim_rewards(address) external;\\n\\n    function add_reward(address, address) external;\\n\\n    function set_claimer(address) external;\\n\\n    function admin() external view returns (address);\\n\\n    function set_reward_distributor(address _rewardToken, address _newDistrib) external;\\n\\n    function initialize(\\n        address staking_token,\\n        address admin,\\n        address SDT,\\n        address voting_escrow,\\n        address veBoost_proxy,\\n        address distributor\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/base/interfaces/ILocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface ILocker {\\n    function createLock(uint256, uint256) external;\\n\\n    function claimAllRewards(address[] calldata _tokens, address _recipient) external;\\n\\n    function increaseAmount(uint256) external;\\n\\n    function increaseAmount(uint128) external;\\n\\n    function increaseUnlockTime(uint256) external;\\n\\n    function release() external;\\n\\n    function claimRewards(address, address) external;\\n\\n    function claimFXSRewards(address) external;\\n\\n    function claimFPISRewards(address) external;\\n\\n    function execute(address, uint256, bytes calldata) external returns (bool, bytes memory);\\n\\n    function setGovernance(address) external;\\n\\n    function voteGaugeWeight(address, uint256) external;\\n\\n    function setAngleDepositor(address) external;\\n\\n    function setFxsDepositor(address) external;\\n\\n    function setYieldDistributor(address) external;\\n\\n    function setGaugeController(address) external;\\n\\n    function setAccumulator(address _accumulator) external;\\n\\n    function governance() external view returns (address);\\n\\n    function increaseLock(uint256 _value, uint256 _duration) external;\\n\\n    function release(address _recipient) external;\\n}\\n\"\r\n    },\r\n    \"src/pendle/locker/PendleLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"openzeppelin-contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"openzeppelin-contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"src/base/interfaces/IVePendle.sol\\\";\\nimport \\\"src/base/interfaces/IPendleFeeDistributor.sol\\\";\\n\\n/// @title Pendle Locker\\n/// @author StakeDAO\\n/// @notice Locks the PENDLE tokens to vePENDLE contract\\ncontract PendleLocker {\\n    using SafeERC20 for IERC20;\\n\\n    /* ========== STATE VARIABLES ========== */\\n    address public governance;\\n    address public pendleDepositor;\\n    address public accumulator;\\n\\n    address public constant TOKEN = 0x808507121B80c02388fAd14726482e061B8da827;\\n    address public constant VOTING_ESCROW = 0x4f30A9D41B80ecC5B94306AB4364951AE3170210;\\n    address public feeDistributor = 0x8C237520a8E14D658170A633D96F8e80764433b9;\\n\\n    /* ========== EVENTS ========== */\\n    event LockCreated(address indexed user, uint256 value, uint256 duration);\\n    event TokenClaimed(address indexed user, uint256 value);\\n    event VotedOnGaugeWeight(address indexed _gauge, uint256 _weight);\\n    event Released(address indexed user, uint256 value);\\n    event GovernanceChanged(address indexed newGovernance);\\n    event PendleDepositorChanged(address indexed newApwDepositor);\\n    event AccumulatorChanged(address indexed newAccumulator);\\n    event FeeDistributorChanged(address indexed newFeeDistributor);\\n\\n    /* ========== CONSTRUCTOR ========== */\\n    constructor(address _governance, address _accumulator) {\\n        governance = _governance;\\n        accumulator = _accumulator;\\n        IERC20(TOKEN).approve(VOTING_ESCROW, type(uint256).max);\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n    modifier onlyGovernance() {\\n        require(msg.sender == governance, \\\"!gov\\\");\\n        _;\\n    }\\n\\n    modifier onlyGovernanceOrAcc() {\\n        require(msg.sender == governance || msg.sender == accumulator, \\\"!(gov||acc)\\\");\\n        _;\\n    }\\n\\n    modifier onlyGovernanceOrDepositor() {\\n        require(msg.sender == governance || msg.sender == pendleDepositor, \\\"!(gov||PendleDepositor)\\\");\\n        _;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n    /// @notice Creates a lock by locking PENDLE token in the VEPENDLE contract for the specified time\\n    /// @dev Can only be called by governance or proxy\\n    /// @param _value The amount of token to be locked\\n    /// @param _unlockTime The duration for which the token is to be locked\\n    function createLock(uint128 _value, uint128 _unlockTime) external onlyGovernance {\\n        IVePendle(VOTING_ESCROW).increaseLockPosition(_value, _unlockTime);\\n        emit LockCreated(msg.sender, _value, _unlockTime);\\n    }\\n\\n    /// @notice Increases the amount of PENDLE locked in VEPENDLE\\n    /// @dev The PENDLE needs to be transferred to this contract before calling\\n    /// @param _value The amount by which the lock amount is to be increased\\n    function increaseAmount(uint128 _value) external onlyGovernanceOrDepositor {\\n        (, uint128 expiry) = IVePendle(VOTING_ESCROW).positionData(address(this));\\n        IVePendle(VOTING_ESCROW).increaseLockPosition(_value, expiry);\\n    }\\n\\n    /// @notice Increases the duration for which PENDLE is locked in VEPENDLE for the user calling the function\\n    /// @param _unlockTime The duration in seconds for which the token is to be locked\\n    function increaseUnlockTime(uint128 _unlockTime) external onlyGovernanceOrDepositor {\\n        IVePendle(VOTING_ESCROW).increaseLockPosition(0, _unlockTime);\\n    }\\n\\n    /// @notice Claim the token reward from the PENDLE fee Distributor passing the tokens as input parameter\\n    /// @param _recipient The address which will receive the claimed token reward\\n    function claimRewards(address _recipient, address[] calldata _pools) external onlyGovernanceOrAcc {\\n        (uint256 totalAmount,) = IPendleFeeDistributor(feeDistributor).claimProtocol(_recipient, _pools);\\n        emit TokenClaimed(_recipient, totalAmount);\\n    }\\n\\n    /// @notice Withdraw the PENDLE from VEPENDLE\\n    /// @dev call only after lock time expires\\n    /// @param _recipient The address which will receive the released PENDLE\\n    function release(address _recipient) external onlyGovernance {\\n        IVePendle(VOTING_ESCROW).withdraw();\\n        uint256 balance = IERC20(TOKEN).balanceOf(address(this));\\n\\n        IERC20(TOKEN).safeTransfer(_recipient, balance);\\n        emit Released(_recipient, balance);\\n    }\\n\\n    /// @notice Set new governance address\\n    /// @param _governance governance address\\n    function setGovernance(address _governance) external onlyGovernance {\\n        governance = _governance;\\n        emit GovernanceChanged(_governance);\\n    }\\n\\n    /// @notice Set the PENDLE Depositor\\n    /// @param _pendleDepositor PENDLE deppositor address\\n    function setPendleDepositor(address _pendleDepositor) external onlyGovernance {\\n        pendleDepositor = _pendleDepositor;\\n        emit PendleDepositorChanged(_pendleDepositor);\\n    }\\n\\n    /// @notice Set the fee distributor\\n    /// @param _newFD fee distributor address\\n    function setFeeDistributor(address _newFD) external onlyGovernance {\\n        feeDistributor = _newFD;\\n        emit FeeDistributorChanged(_newFD);\\n    }\\n\\n    /// @notice Set the accumulator\\n    /// @param _accumulator accumulator address\\n    function setAccumulator(address _accumulator) external onlyGovernance {\\n        accumulator = _accumulator;\\n        emit AccumulatorChanged(_accumulator);\\n    }\\n\\n    /// @notice execute a function\\n    /// @param to Address to sent the value to\\n    /// @param value Value to be sent\\n    /// @param data Call function data\\n    function execute(address to, uint256 value, bytes calldata data)\\n        external\\n        onlyGovernance\\n        returns (bool, bytes memory)\\n    {\\n        (bool success, bytes memory result) = to.call{value: value}(data);\\n        return (success, result);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solady/src/utils/SafeTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/SafeTransferLib.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n///\\n/// @dev Note:\\n/// - For ETH transfers, please use `forceSafeTransferETH` for gas griefing protection.\\n/// - For ERC20s, this implementation won't check that a token has code,\\n/// responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev The ETH transfer has failed.\\n    error ETHTransferFailed();\\n\\n    /// @dev The ERC20 `transferFrom` has failed.\\n    error TransferFromFailed();\\n\\n    /// @dev The ERC20 `transfer` has failed.\\n    error TransferFailed();\\n\\n    /// @dev The ERC20 `approve` has failed.\\n    error ApproveFailed();\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Suggested gas stipend for contract receiving ETH\\n    /// that disallows any storage writes.\\n    uint256 internal constant _GAS_STIPEND_NO_STORAGE_WRITES = 2300;\\n\\n    /// @dev Suggested gas stipend for contract receiving ETH to perform a few\\n    /// storage reads and writes, but low enough to prevent griefing.\\n    /// Multiply by a small constant (e.g. 2), if needed.\\n    uint256 internal constant _GAS_STIPEND_NO_GRIEF = 100000;\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                       ETH OPERATIONS                       */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Sends `amount` (in wei) ETH to `to`.\\n    /// Reverts upon failure.\\n    ///\\n    /// Note: This implementation does NOT protect against gas griefing.\\n    /// Please use `forceSafeTransferETH` for gas griefing protection.\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and check if it succeeded or not.\\n            if iszero(call(gas(), to, amount, 0, 0, 0, 0)) {\\n                // Store the function selector of `ETHTransferFailed()`.\\n                mstore(0x00, 0xb12d13eb)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\\n    /// The `gasStipend` can be set to a low enough value to prevent\\n    /// storage writes or gas griefing.\\n    ///\\n    /// If sending via the normal procedure fails, force sends the ETH by\\n    /// creating a temporary contract which uses `SELFDESTRUCT` to force send the ETH.\\n    ///\\n    /// Reverts if the current contract has insufficient balance.\\n    function forceSafeTransferETH(address to, uint256 amount, uint256 gasStipend) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // If insufficient balance, revert.\\n            if lt(selfbalance(), amount) {\\n                // Store the function selector of `ETHTransferFailed()`.\\n                mstore(0x00, 0xb12d13eb)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Transfer the ETH and check if it succeeded or not.\\n            if iszero(call(gasStipend, to, amount, 0, 0, 0, 0)) {\\n                mstore(0x00, to) // Store the address in scratch space.\\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\\n                // We can directly use `SELFDESTRUCT` in the contract creation.\\n                // Compatible with `SENDALL`: https://eips.ethereum.org/EIPS/eip-4758\\n                if iszero(create(amount, 0x0b, 0x16)) {\\n                    // To coerce gas estimation to provide enough gas for the `create` above.\\n                    if iszero(gt(gas(), 1000000)) { revert(0, 0) }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with a gas stipend\\n    /// equal to `_GAS_STIPEND_NO_GRIEF`. This gas stipend is a reasonable default\\n    /// for 99% of cases and can be overridden with the three-argument version of this\\n    /// function if necessary.\\n    ///\\n    /// If sending via the normal procedure fails, force sends the ETH by\\n    /// creating a temporary contract which uses `SELFDESTRUCT` to force send the ETH.\\n    ///\\n    /// Reverts if the current contract has insufficient balance.\\n    function forceSafeTransferETH(address to, uint256 amount) internal {\\n        // Manually inlined because the compiler doesn't inline functions with branches.\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // If insufficient balance, revert.\\n            if lt(selfbalance(), amount) {\\n                // Store the function selector of `ETHTransferFailed()`.\\n                mstore(0x00, 0xb12d13eb)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Transfer the ETH and check if it succeeded or not.\\n            if iszero(call(_GAS_STIPEND_NO_GRIEF, to, amount, 0, 0, 0, 0)) {\\n                mstore(0x00, to) // Store the address in scratch space.\\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\\n                // We can directly use `SELFDESTRUCT` in the contract creation.\\n                // Compatible with `SENDALL`: https://eips.ethereum.org/EIPS/eip-4758\\n                if iszero(create(amount, 0x0b, 0x16)) {\\n                    // To coerce gas estimation to provide enough gas for the `create` above.\\n                    if iszero(gt(gas(), 1000000)) { revert(0, 0) }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\\n    /// The `gasStipend` can be set to a low enough value to prevent\\n    /// storage writes or gas griefing.\\n    ///\\n    /// Simply use `gasleft()` for `gasStipend` if you don't need a gas stipend.\\n    ///\\n    /// Note: Does NOT revert upon failure.\\n    /// Returns whether the transfer of ETH is successful instead.\\n    function trySafeTransferETH(address to, uint256 amount, uint256 gasStipend)\\n        internal\\n        returns (bool success)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and check if it succeeded or not.\\n            success := call(gasStipend, to, amount, 0, 0, 0, 0)\\n        }\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                      ERC20 OPERATIONS                      */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Sends `amount` of ERC20 `token` from `from` to `to`.\\n    /// Reverts upon failure.\\n    ///\\n    /// The `from` account must have at least `amount` approved for\\n    /// the current contract to manage.\\n    function safeTransferFrom(address token, address from, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40) // Cache the free memory pointer.\\n\\n            mstore(0x60, amount) // Store the `amount` argument.\\n            mstore(0x40, to) // Store the `to` argument.\\n            mstore(0x2c, shl(96, from)) // Store the `from` argument.\\n            // Store the function selector of `transferFrom(address,address,uint256)`.\\n            mstore(0x0c, 0x23b872dd000000000000000000000000)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFromFailed()`.\\n                mstore(0x00, 0x7939f424)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, m) // Restore the free memory pointer.\\n        }\\n    }\\n\\n    /// @dev Sends all of ERC20 `token` from `from` to `to`.\\n    /// Reverts upon failure.\\n    ///\\n    /// The `from` account must have their entire balance approved for\\n    /// the current contract to manage.\\n    function safeTransferAllFrom(address token, address from, address to)\\n        internal\\n        returns (uint256 amount)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40) // Cache the free memory pointer.\\n\\n            mstore(0x40, to) // Store the `to` argument.\\n            mstore(0x2c, shl(96, from)) // Store the `from` argument.\\n            // Store the function selector of `balanceOf(address)`.\\n            mstore(0x0c, 0x70a08231000000000000000000000000)\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                    staticcall(gas(), token, 0x1c, 0x24, 0x60, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFromFailed()`.\\n                mstore(0x00, 0x7939f424)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            // Store the function selector of `transferFrom(address,address,uint256)`.\\n            mstore(0x00, 0x23b872dd)\\n            // The `amount` argument is already written to the memory word at 0x60.\\n            amount := mload(0x60)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFromFailed()`.\\n                mstore(0x00, 0x7939f424)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, m) // Restore the free memory pointer.\\n        }\\n    }\\n\\n    /// @dev Sends `amount` of ERC20 `token` from the current contract to `to`.\\n    /// Reverts upon failure.\\n    function safeTransfer(address token, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x14, to) // Store the `to` argument.\\n            mstore(0x34, amount) // Store the `amount` argument.\\n            // Store the function selector of `transfer(address,uint256)`.\\n            mstore(0x00, 0xa9059cbb000000000000000000000000)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFailed()`.\\n                mstore(0x00, 0x90b8ec18)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Restore the part of the free memory pointer that was overwritten.\\n            mstore(0x34, 0)\\n        }\\n    }\\n\\n    /// @dev Sends all of ERC20 `token` from the current contract to `to`.\\n    /// Reverts upon failure.\\n    function safeTransferAll(address token, address to) internal returns (uint256 amount) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, 0x70a08231) // Store the function selector of `balanceOf(address)`.\\n            mstore(0x20, address()) // Store the address of the current contract.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                    staticcall(gas(), token, 0x1c, 0x24, 0x34, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFailed()`.\\n                mstore(0x00, 0x90b8ec18)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            mstore(0x14, to) // Store the `to` argument.\\n            // The `amount` argument is already written to the memory word at 0x34.\\n            amount := mload(0x34)\\n            // Store the function selector of `transfer(address,uint256)`.\\n            mstore(0x00, 0xa9059cbb000000000000000000000000)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFailed()`.\\n                mstore(0x00, 0x90b8ec18)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Restore the part of the free memory pointer that was overwritten.\\n            mstore(0x34, 0)\\n        }\\n    }\\n\\n    /// @dev Sets `amount` of ERC20 `token` for `to` to manage on behalf of the current contract.\\n    /// Reverts upon failure.\\n    function safeApprove(address token, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x14, to) // Store the `to` argument.\\n            mstore(0x34, amount) // Store the `amount` argument.\\n            // Store the function selector of `approve(address,uint256)`.\\n            mstore(0x00, 0x095ea7b3000000000000000000000000)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `ApproveFailed()`.\\n                mstore(0x00, 0x3e3f8f73)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Restore the part of the free memory pointer that was overwritten.\\n            mstore(0x34, 0)\\n        }\\n    }\\n\\n    /// @dev Returns the amount of ERC20 `token` owned by `account`.\\n    /// Returns zero if the `token` does not exist.\\n    function balanceOf(address token, address account) internal view returns (uint256 amount) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x14, account) // Store the `account` argument.\\n            // Store the function selector of `balanceOf(address)`.\\n            mstore(0x00, 0x70a08231000000000000000000000000)\\n            amount :=\\n                mul(\\n                    mload(0x20),\\n                    and( // The arguments of `and` are evaluated from right to left.\\n                        gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                        staticcall(gas(), token, 0x10, 0x24, 0x20, 0x20)\\n                    )\\n                )\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/base/interfaces/ISDTDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.7;\\n\\ninterface ISDTDistributor {\\n    function distribute(address gaugeAddr) external;\\n}\\n\"\r\n    },\r\n    \"src/base/interfaces/IPendleFeeDistributor.sol\": {\r\n      \"content\": \"pragma solidity 0.8.7;\\n\\ninterface IPendleFeeDistributor {\\n    // ========================= STRUCT =========================\\n    struct UpdateProtocolStruct {\\n        address user;\\n        bytes32[] proof;\\n        address[] pools;\\n        uint256[] topUps;\\n    }\\n\\n    // ========================= EVENTS =========================\\n    /// @notice Emit when a new merkleRoot is set & the fee is funded by the governance\\n    event SetMerkleRootAndFund(bytes32 indexed merkleRoot, uint256 amountFunded);\\n\\n    /// @notice Emit when an user claims their fees\\n    event Claimed(address indexed user, uint256 amountOut);\\n\\n    /// @notice Emit when the Pendle team populates data for a protocol\\n    event UpdateProtocolClaimable(address indexed user, uint256 sumTopUp);\\n\\n    // ========================= FUNCTIONS =========================\\n    /**\\n     * @notice Submit total fee and proof to claim outstanding amount. Fee will be sent as raw ETH,\\n     *  so receiver should be an EOA or have receive() function.\\n     */\\n    function claimRetail(address receiver, uint256 totalAccrued, bytes32[] calldata proof)\\n        external\\n        returns (uint256 amountOut);\\n\\n    /**\\n     * @notice Claim all outstanding fees for the specified pools. This function is intended for use\\n     * by protocols that have contacted the Pendle team. Note that the fee will be sent in raw ETH,\\n     * so the receiver should be an EOA or have a receive() function.\\n     * @notice Protocols should not use claimRetail, as it can make getProtocolFeeData unreliable.\\n     */\\n    function claimProtocol(address receiver, address[] calldata pools)\\n        external\\n        returns (uint256 totalAmountOut, uint256[] memory amountsOut);\\n\\n    ///@notice Returns the claimable fees per pool. This function is only available if the Pendle\\n    ///team has specifically set up the data.\\n    function getProtocolClaimables(address user, address[] calldata pools)\\n        external\\n        view\\n        returns (uint256[] memory claimables);\\n\\n    ///@notice Returns the lifetime totalAccrued fees for protocols. This function is only available\\n    ///if the Pendle team has specifically set up the data.\\n    function getProtocolTotalAccrued(address user) external view returns (uint256);\\n\\n    function claimed(address user) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/base/interfaces/IVePendle.sol\": {\r\n      \"content\": \"pragma solidity 0.8.7;\\n\\ninterface IVePendle {\\n    event BroadcastTotalSupply(VeBalance newTotalSupply, uint256[] chainIds);\\n    event BroadcastUserPosition(address indexed user, uint256[] chainIds);\\n    event Initialized(uint8 version);\\n    event NewLockPosition(address indexed user, uint128 amount, uint128 expiry);\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event Withdraw(address indexed user, uint128 amount);\\n\\n    struct Checkpoint {\\n        uint128 timestamp;\\n        VeBalance value;\\n    }\\n\\n    struct VeBalance {\\n        uint128 bias;\\n        uint128 slope;\\n    }\\n\\n    function MAX_LOCK_TIME() external view returns (uint128);\\n\\n    function MIN_LOCK_TIME() external view returns (uint128);\\n\\n    function WEEK() external view returns (uint128);\\n\\n    function addDestinationContract(address _address, uint256 _chainId) external payable;\\n\\n    function approxDstExecutionGas() external view returns (uint256);\\n\\n    function balanceOf(address user) external view returns (uint128);\\n\\n    function broadcastTotalSupply(uint256[] memory chainIds) external payable;\\n\\n    function broadcastUserPosition(address user, uint256[] memory chainIds) external payable;\\n\\n    function claimOwnership() external;\\n\\n    function getAllDestinationContracts() external view returns (uint256[] memory chainIds, address[] memory addrs);\\n\\n    function getBroadcastPositionFee(uint256[] memory chainIds) external view returns (uint256 fee);\\n\\n    function getBroadcastSupplyFee(uint256[] memory chainIds) external view returns (uint256 fee);\\n\\n    function getUserHistoryAt(address user, uint256 index) external view returns (Checkpoint memory);\\n\\n    function getUserHistoryLength(address user) external view returns (uint256);\\n\\n    function increaseLockPosition(uint128 additionalAmountToLock, uint128 newExpiry)\\n        external\\n        returns (uint128 newVeBalance);\\n\\n    function increaseLockPositionAndBroadcast(\\n        uint128 additionalAmountToLock,\\n        uint128 newExpiry,\\n        uint256[] memory chainIds\\n    ) external payable returns (uint128 newVeBalance);\\n\\n    function lastSlopeChangeAppliedAt() external view returns (uint128);\\n\\n    function owner() external view returns (address);\\n\\n    function pendingOwner() external view returns (address);\\n\\n    function pendle() external view returns (address);\\n\\n    function pendleMsgSendEndpoint() external view returns (address);\\n\\n    function positionData(address) external view returns (uint128 amount, uint128 expiry);\\n\\n    function setApproxDstExecutionGas(uint256 gas) external;\\n\\n    function slopeChanges(uint128) external view returns (uint128);\\n\\n    function totalSupplyAndBalanceCurrent(address user) external returns (uint128, uint128);\\n\\n    function totalSupplyAt(uint128) external view returns (uint128);\\n\\n    function totalSupplyCurrent() external returns (uint128);\\n\\n    function totalSupplyStored() external view returns (uint128);\\n\\n    function transferOwnership(address newOwner, bool direct, bool renounce) external;\\n\\n    function withdraw() external returns (uint128 amount);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"utils/=lib/utils/\",\r\n      \"solady/=lib/solady/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"@addressBook/=lib/AddressBook/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"AddressBook/=lib/AddressBook/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"solady/=lib/solady/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"utils/=lib/utils/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_daoRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bountyRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_veSdtFeeProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_votesRewardRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DIFFERENT_LENGTH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FEE_TOO_HIGH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_ALLOWED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_ALLOWED_TO_PULL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_CLAIMED_ALL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NO_BALANCE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NO_REWARD\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ONGOING_REWARD\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WRONG_CLAIM\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZERO_ADDRESS\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_old\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"BountyFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_old\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"BountyRecipientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_old\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"ClaimerFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_old\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"DaoFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_old\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"DaoRecipientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_distributeAllRewards\",\"type\":\"bool\"}],\"name\":\"DistributeVotersRewardsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Rescued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_old\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"GaugeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_old\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"GovernanceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_old\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"LockerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_old\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"PeriodsToAddSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenReward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountNotified\",\"type\":\"uint256\"}],\"name\":\"RewardNotified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_old\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"SdtDistributorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_old\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"VeSdtFeeProxyFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_old\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"VeSdtFeeProxySet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PENDLE_FEE_D\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VE_PENDLE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bountyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bountyRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"canPullTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"}],\"name\":\"claimForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimForVePendle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"}],\"name\":\"claimForVoters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeVotersRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"notifyReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"notifyRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodsToAdd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodsToNotify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"pullTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"rescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sdtDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bountyFee\",\"type\":\"uint256\"}],\"name\":\"setBountyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bountyRecipient\",\"type\":\"address\"}],\"name\":\"setBountyRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimerFee\",\"type\":\"uint256\"}],\"name\":\"setClaimerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_daoFee\",\"type\":\"uint256\"}],\"name\":\"setDaoFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_daoRecipient\",\"type\":\"address\"}],\"name\":\"setDaoRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_distributeVotersRewards\",\"type\":\"bool\"}],\"name\":\"setDistributeVotersRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"setGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_locker\",\"type\":\"address\"}],\"name\":\"setLocker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_periodsToAdd\",\"type\":\"uint256\"}],\"name\":\"setPeriodsToAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sdtDistributor\",\"type\":\"address\"}],\"name\":\"setSdtDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_veSdtFeeProxy\",\"type\":\"address\"}],\"name\":\"setVeSdtFeeProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_veSdtFeeProxyFee\",\"type\":\"uint256\"}],\"name\":\"setVeSdtFeeProxyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"togglePullAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veSdtFeeProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veSdtFeeProxyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votesRewardRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PendleAccumulatorV2", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000755fbe4a24d7478bfcfc1e561afce82d1ff62000000000000000000000000f930ebbd05ef8b25b1797b9b2109ddc9b0d43063000000000000000000000000f930ebbd05ef8b25b1797b9b2109ddc9b0d4306300000000000000000000000012992595328e52267c95e45b1a97014d6ddf8683000000000000000000000000f930ebbd05ef8b25b1797b9b2109ddc9b0d43063", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}