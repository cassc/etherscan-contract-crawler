{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/lib/BallotsBox.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\n/* *\\n * Copyright 2021-2023 LI LI @ JINGTIAN & GONGCHENG.\\n * All Rights Reserved.\\n * */\\n\\npragma solidity ^0.8.8;\\n\\nlibrary BallotsBox {\\n\\n    enum AttitudeOfVote {\\n        All,\\n        Support,\\n        Against,\\n        Abstain\\n    }\\n\\n    struct Ballot {\\n        uint40 acct;\\n        uint8 attitude;\\n        uint32 head;\\n        uint64 weight;\\n        uint48 sigDate;\\n        uint64 blocknumber;\\n        bytes32 sigHash;\\n        uint[] principals;\\n    }\\n\\n    struct Case {\\n        uint32 sumOfHead;\\n        uint64 sumOfWeight;\\n        uint256[] voters;\\n        uint256[] principals;\\n    }\\n\\n    struct Box {\\n        mapping(uint256 => Case) cases;\\n        mapping(uint256 => Ballot) ballots;\\n    }\\n\\n    // #################\\n    // ##    Write    ##\\n    // #################\\n\\n    function castVote(\\n        Box storage box,\\n        uint acct,\\n        uint attitude,\\n        uint head,\\n        uint weight,\\n        bytes32 sigHash,\\n        uint[] memory principals\\n    ) public returns (bool flag) {\\n        // uint40 voter = uint40(acct);        \\n        require(\\n            attitude == uint8(AttitudeOfVote.Support) ||\\n                attitude == uint8(AttitudeOfVote.Against) ||\\n                attitude == uint8(AttitudeOfVote.Abstain),\\n            \\\"BB.CV: attitude overflow\\\"\\n        );\\n\\n        Ballot storage b = box.ballots[acct];\\n\\n        if (b.sigDate == 0) {\\n            box.ballots[acct] = Ballot({\\n                acct: uint40(acct),\\n                attitude: uint8(attitude),\\n                head: uint32(head),\\n                weight: uint64(weight),\\n                sigDate: uint48(block.timestamp),\\n                blocknumber: uint64(block.number),\\n                sigHash: sigHash,\\n                principals: principals\\n            });\\n\\n            // Case storage c = box.cases[attitude];\\n\\n            // c.sumOfHead += b.head;\\n            // c.sumOfWeight += b.weight;\\n            // c.voters.push(acct);\\n\\n            // c = box.cases[uint8(AttitudeOfVote.All)];\\n\\n            // c.sumOfHead += b.head;\\n            // c.sumOfWeight += b.weight;\\n            // c.voters.push(acct);\\n\\n            _pushToCase(box.cases[attitude], b);\\n            _pushToCase(box.cases[uint8(AttitudeOfVote.All)], b);\\n\\n            flag = true;\\n        }\\n    }\\n\\n    function _pushToCase(Case storage c, Ballot memory b) private {\\n            c.sumOfHead += b.head;\\n            c.sumOfWeight += b.weight;\\n            c.voters.push(b.acct);\\n            \\n            uint len = b.principals.length;\\n            while (len > 0) {\\n                c.principals.push(b.principals[len - 1]);\\n                len--;\\n            }\\n    }\\n\\n\\n    // #################\\n    // ##    Read     ##\\n    // #################\\n\\n    function isVoted(Box storage box, uint256 acct) \\n        public view returns (bool) \\n    {\\n        return box.ballots[acct].sigDate > 0;\\n    }\\n\\n    function isVotedFor(\\n        Box storage box,\\n        uint256 acct,\\n        uint256 atti\\n    ) public view returns (bool) {\\n        return box.ballots[acct].attitude == atti;\\n    }\\n\\n    function getCaseOfAttitude(Box storage box, uint256 atti)\\n        public view returns (Case memory )\\n    {\\n        return box.cases[atti];\\n    }\\n\\n    function getBallot(Box storage box, uint256 acct)\\n        public view returns (Ballot memory)\\n    {\\n        return box.ballots[acct];\\n    }\\n\\n\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[]", "ContractName": "BallotsBox", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}