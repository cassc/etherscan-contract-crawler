{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.9.2\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.9.2\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/math/Math.sol@v4.9.2\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    enum Rounding {\r\n        Down, // Toward negative infinity\r\n        Up, // Toward infinity\r\n        Zero // Toward zero\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a == 0 ? 0 : (a - 1) / b + 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\r\n     * with further edits by Uniswap Labs also under MIT license.\r\n     */\r\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\r\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n            // variables such that product = prod1 * 2^256 + prod0.\r\n            uint256 prod0; // Least significant 256 bits of the product\r\n            uint256 prod1; // Most significant 256 bits of the product\r\n            assembly {\r\n                let mm := mulmod(x, y, not(0))\r\n                prod0 := mul(x, y)\r\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n            }\r\n\r\n            // Handle non-overflow cases, 256 by 256 division.\r\n            if (prod1 == 0) {\r\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\r\n                // The surrounding unchecked block does not change this fact.\r\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\r\n                return prod0 / denominator;\r\n            }\r\n\r\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\r\n            require(denominator > prod1, \"Math: mulDiv overflow\");\r\n\r\n            ///////////////////////////////////////////////\r\n            // 512 by 256 division.\r\n            ///////////////////////////////////////////////\r\n\r\n            // Make division exact by subtracting the remainder from [prod1 prod0].\r\n            uint256 remainder;\r\n            assembly {\r\n                // Compute remainder using mulmod.\r\n                remainder := mulmod(x, y, denominator)\r\n\r\n                // Subtract 256 bit number from 512 bit number.\r\n                prod1 := sub(prod1, gt(remainder, prod0))\r\n                prod0 := sub(prod0, remainder)\r\n            }\r\n\r\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\r\n            // See https://cs.stackexchange.com/q/138556/92363.\r\n\r\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\r\n            uint256 twos = denominator & (~denominator + 1);\r\n            assembly {\r\n                // Divide denominator by twos.\r\n                denominator := div(denominator, twos)\r\n\r\n                // Divide [prod1 prod0] by twos.\r\n                prod0 := div(prod0, twos)\r\n\r\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\r\n                twos := add(div(sub(0, twos), twos), 1)\r\n            }\r\n\r\n            // Shift in bits from prod1 into prod0.\r\n            prod0 |= prod1 * twos;\r\n\r\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\r\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\r\n            // four bits. That is, denominator * inv = 1 mod 2^4.\r\n            uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\r\n            // in modular arithmetic, doubling the correct bits in each step.\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\r\n\r\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\r\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n            // is no longer required.\r\n            result = prod0 * inverse;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\r\n     */\r\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\r\n        uint256 result = mulDiv(x, y, denominator);\r\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\r\n            result += 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\r\n     *\r\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\r\n     */\r\n    function sqrt(uint256 a) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\r\n        //\r\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\r\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\r\n        //\r\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\r\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\r\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\r\n        //\r\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\r\n        uint256 result = 1 << (log2(a) >> 1);\r\n\r\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\r\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\r\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\r\n        // into the expected uint128 result.\r\n        unchecked {\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            return min(result, a / result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates sqrt(a), following the selected rounding direction.\r\n     */\r\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = sqrt(a);\r\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 128;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 64;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 32;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 16;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                value >>= 8;\r\n                result += 8;\r\n            }\r\n            if (value >> 4 > 0) {\r\n                value >>= 4;\r\n                result += 4;\r\n            }\r\n            if (value >> 2 > 0) {\r\n                value >>= 2;\r\n                result += 2;\r\n            }\r\n            if (value >> 1 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log2(value);\r\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >= 10 ** 64) {\r\n                value /= 10 ** 64;\r\n                result += 64;\r\n            }\r\n            if (value >= 10 ** 32) {\r\n                value /= 10 ** 32;\r\n                result += 32;\r\n            }\r\n            if (value >= 10 ** 16) {\r\n                value /= 10 ** 16;\r\n                result += 16;\r\n            }\r\n            if (value >= 10 ** 8) {\r\n                value /= 10 ** 8;\r\n                result += 8;\r\n            }\r\n            if (value >= 10 ** 4) {\r\n                value /= 10 ** 4;\r\n                result += 4;\r\n            }\r\n            if (value >= 10 ** 2) {\r\n                value /= 10 ** 2;\r\n                result += 2;\r\n            }\r\n            if (value >= 10 ** 1) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log10(value);\r\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     *\r\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\r\n     */\r\n    function log256(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 16;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 8;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 4;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 2;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log256(value);\r\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/math/SignedMath.sol@v4.9.2\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard signed math utilities missing in the Solidity language.\r\n */\r\nlibrary SignedMath {\r\n    /**\r\n     * @dev Returns the largest of two signed numbers.\r\n     */\r\n    function max(int256 a, int256 b) internal pure returns (int256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two signed numbers.\r\n     */\r\n    function min(int256 a, int256 b) internal pure returns (int256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two signed numbers without overflow.\r\n     * The result is rounded towards zero.\r\n     */\r\n    function average(int256 a, int256 b) internal pure returns (int256) {\r\n        // Formula from the book \"Hacker's Delight\"\r\n        int256 x = (a & b) + ((a ^ b) >> 1);\r\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the absolute unsigned value of a signed value.\r\n     */\r\n    function abs(int256 n) internal pure returns (uint256) {\r\n        unchecked {\r\n            // must be unchecked in order to support `n = type(int256).min`\r\n            return uint256(n >= 0 ? n : -n);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Strings.sol@v4.9.2\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            uint256 length = Math.log10(value) + 1;\r\n            string memory buffer = new string(length);\r\n            uint256 ptr;\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                ptr := add(buffer, add(32, length))\r\n            }\r\n            while (true) {\r\n                ptr--;\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\r\n                }\r\n                value /= 10;\r\n                if (value == 0) break;\r\n            }\r\n            return buffer;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(int256 value) internal pure returns (string memory) {\r\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            return toHexString(value, Math.log256(value) + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the two strings are equal.\r\n     */\r\n    function equal(string memory a, string memory b) internal pure returns (bool) {\r\n        return keccak256(bytes(a)) == keccak256(bytes(b));\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.9.2\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n\r\n// File contracts/extension/PaymentMethods.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\nabstract contract PaymentMethods is Ownable {\r\n\r\n    struct PricingOption {\r\n        address paymentMethod;\r\n        address paymentTo;\r\n        uint256 price;\r\n        uint256 extendDuration;\r\n        uint256 paymentMethodId;\r\n        bool    canBeUsedForPenalty;\r\n    }\r\n\r\n    //Key is paymentMethodId\r\n    mapping(uint256 => PricingOption) private _paymentMethods;\r\n    //Key is a custom ID => paymentMethodId => Option\r\n    mapping(uint256 => mapping(uint256 => PricingOption)) private _specialLevelPaymentMethods;\r\n    // Pricing IDs for levels and sequences are NOT in _paymentMethods\r\n    mapping(uint256 => bool) private _levelsWithSpecialPayments;\r\n\r\n    event PaymentMethodAdded(address indexed paymentMethodAddress, uint256 price, uint256 paymentMethodId, uint256 extendDuration);\r\n\r\n    /**\r\n     * @dev Allows owner to add/replace a payment method option for extending the NFT ownership\r\n     *  while offering discounts on different durations\r\n     *  owner can deactivate the payment method by setting price to 0\r\n     */\r\n    function setPaymentMethod(\r\n        uint256 paymentMethodId,\r\n        address paymentMethodAddress,\r\n        uint256 nftPrice,\r\n        uint256 extendDuration,\r\n        address paymentReceiver,\r\n        bool canBeUsedForPenalty\r\n    ) public onlyOwner {\r\n        PricingOption storage option = _paymentMethods[paymentMethodId];\r\n        option.price = nftPrice;\r\n        option.extendDuration = extendDuration;\r\n        option.paymentTo = paymentReceiver;\r\n        option.paymentMethod = paymentMethodAddress;\r\n        option.paymentMethodId = paymentMethodId;\r\n        option.canBeUsedForPenalty = canBeUsedForPenalty;\r\n\r\n        emit PaymentMethodAdded(paymentMethodAddress, nftPrice, paymentMethodId, extendDuration);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows owner to add/replace a payment method option for special pricing for specific levels\r\n     *  owner can deactivate the payment method by setting price to 0\r\n     */\r\n    function setPaymentMethodLevel(\r\n        uint256 level,\r\n        uint256 paymentMethodId,\r\n        address paymentMethodAddress,\r\n        uint256 nftPrice,\r\n        uint256 extendDuration,\r\n        address paymentReceiver,\r\n        bool    canBeUsedForPenalty\r\n    ) public onlyOwner {\r\n        PricingOption storage option = _specialLevelPaymentMethods[level][paymentMethodId];\r\n        option.price = nftPrice;\r\n        option.extendDuration = extendDuration;\r\n        option.paymentTo = paymentReceiver;\r\n        option.paymentMethod = paymentMethodAddress;\r\n        option.paymentMethodId = paymentMethodId;\r\n        option.canBeUsedForPenalty = canBeUsedForPenalty;\r\n\r\n        _levelsWithSpecialPayments[level] = true;\r\n        emit PaymentMethodAdded(paymentMethodAddress, nftPrice, paymentMethodId, extendDuration);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows owner to disable mandatory requirement for level payment methods after adding them\r\n     */\r\n    function disableLevelPaymentMethods(uint256 level) public onlyOwner {\r\n        _levelsWithSpecialPayments[level] = false;\r\n    }\r\n\r\n    function paymentMethod(uint256 paymentMethodId, uint256 levelId) public view returns (PricingOption memory, IERC20) {\r\n        PricingOption memory paymentOption;\r\n        if (_levelsWithSpecialPayments[levelId]) {\r\n            paymentOption = _specialLevelPaymentMethods[levelId][paymentMethodId];\r\n            require(paymentOption.price > 0 && paymentOption.paymentMethod != address(0), \"Level Payment method is invalid\");\r\n        } else {\r\n            paymentOption = _paymentMethods[paymentMethodId];\r\n            require(paymentOption.price > 0 && paymentOption.paymentMethod != address(0), \"Payment method is invalid\");\r\n        }\r\n        IERC20 _paymentMethod = IERC20(paymentOption.paymentMethod);\r\n        return (paymentOption, _paymentMethod);\r\n    }\r\n\r\n    /**\r\n     * @dev used to get a payment method by ID\r\n     *  Function checks if owner added a custom payment method for a specific tokenId, if not whether it implemented custom\r\n     *  function to get depth(level) of tokenId and has a special payment for it\r\n     */\r\n    function _paymentMethodVerify(uint256 paymentMethodId, uint256 levelId) internal view returns (PricingOption memory, IERC20) {\r\n        (PricingOption memory paymentOption, IERC20 _paymentMethod) = paymentMethod(paymentMethodId, levelId);\r\n        require(_paymentMethod.balanceOf(_msgSender()) >= paymentOption.price, \"Insufficient funds\");\r\n        require(_paymentMethod.allowance(_msgSender(), address(this)) >= paymentOption.price, \"Currency activation/allowance required\");\r\n        return (paymentOption, _paymentMethod);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.9.2\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.9.2\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/mrace/MRNFT.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev A custom NFT for The Mining Race, where NFTs are by invitation (parent NFTs)\r\n *  and each NFT is non transferable\r\n */\r\ncontract MRaceNFT is ReentrancyGuard, PaymentMethods {\r\n    using SafeMath for uint256;\r\n    using Strings for uint256;\r\n    using Strings for string;\r\n\r\n    struct Spot {\r\n        address owner;\r\n        string parent;\r\n        string payoutTo;\r\n        uint256 sequence;\r\n        uint256 level;\r\n        uint256 childCount;\r\n        uint256 expiresAt;\r\n    }\r\n\r\n    /**\r\n     * @dev Emitted when `tokenId` token minted (reserved) by someone\r\n     */\r\n    event Mint(address indexed to, string indexed spotId, uint256 expiresAt);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n    event Extended(string indexed tokenId, uint256 expiresAt);\r\n    event PayoutChanged(string indexed spotId, string payoutHash);\r\n    event Penalty(string indexed spotId, bool hasPenalty);\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    string public baseURI;\r\n\r\n    uint256 public constant NEVER_EXPIRES = type(uint256).max;\r\n    uint256 public constant MAX_SPOTS_PER_CODE = 10;\r\n    uint256 public constant PENALTY_AFTER_EXPIRY = 90 * 86400;\r\n\r\n    uint256 public _totalSupply = 1; //starts with root node\r\n    uint256 public _cap;\r\n\r\n    mapping(uint256 => Spot) private _sequences;\r\n    mapping(address => string) private _spotOwnerships;\r\n    mapping(string => Spot) private _communitySpots;\r\n    mapping(string => Spot) private _spots;\r\n    mapping(string => bool) private _neverExpireSpots;\r\n    mapping(string => bool) private _penalizedSpots;\r\n\r\n    modifier whenNotMaxed() {\r\n        require(_cap > _totalSupply, \"Token maxed out\");\r\n        _;\r\n    }\r\n\r\n    modifier whenSpotIdIsValid(string memory spotId) {\r\n        require(bytes(spotId).length > 0, \"Spot ID is invalid\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        string memory tokenName,\r\n        string memory tokenSymbol,\r\n        uint256 maxSupply,\r\n        string memory rootNodeId,\r\n        address defaultPaymentMethod,\r\n        uint256 defaultPrice,\r\n        address defaultOwner,\r\n        string memory tokenBaseUri\r\n    ) whenSpotIdIsValid(rootNodeId) {\r\n        _name = tokenName;\r\n        _symbol = tokenSymbol;\r\n        _cap = maxSupply;\r\n        baseURI = tokenBaseUri;\r\n\r\n        require(defaultOwner != address(0), \"Token needs an owner\");\r\n\r\n        require(defaultPaymentMethod != address(0), \"Invalid default payment method\");\r\n        require(defaultPrice > 0, \"Default price of token is required\");\r\n\r\n        setPaymentMethod(1, defaultPaymentMethod, defaultPrice, 31536000, defaultOwner, false);\r\n\r\n        Spot memory newSpot;\r\n        newSpot.sequence = 1;\r\n        newSpot.childCount = 0;\r\n        newSpot.level = 0;\r\n        newSpot.expiresAt = NEVER_EXPIRES;\r\n        newSpot.owner = address(this);\r\n\r\n        _communitySpots[rootNodeId] = newSpot;\r\n        _spots[rootNodeId] = newSpot;\r\n        _sequences[1] = newSpot;\r\n        // Community spots never expire\r\n        _neverExpireSpots[rootNodeId] = true;\r\n\r\n        // We treat it like a mint to self\r\n        emit Mint(address(this), rootNodeId, 0);\r\n        emit Transfer(address(0), address(this), 1);\r\n    }\r\n\r\n    function mint(\r\n        address owner,\r\n        string calldata parentSpotId,\r\n        string calldata newSpotId,\r\n        uint256 _expiresAt\r\n    )  public onlyOwner whenNotMaxed whenSpotIdIsValid(newSpotId) {\r\n        bool isCommunity = owner == address(this);\r\n\r\n        if(!isCommunity) {\r\n            string storage ownedSpotId = _spotOwnerships[owner];\r\n            require(ownedSpotId.equal(\"\"), \"Owner already owns a spot\");\r\n        }\r\n        require(_spots[newSpotId].sequence == 0, \"Spot ID is already in use\");\r\n\r\n        Spot storage parentSpot = _spots[parentSpotId];\r\n        require(parentSpot.sequence > 0, \"Parent spot is invalid\");\r\n        require(parentSpot.childCount < MAX_SPOTS_PER_CODE, \"This invite code is maxed out\");\r\n\r\n        uint256 nextSequence = MAX_SPOTS_PER_CODE * parentSpot.sequence + parentSpot.childCount + 1;\r\n        uint256 nextLevel = parentSpot.level + 1;\r\n\r\n        Spot memory newSpot;\r\n        newSpot.owner = owner;\r\n        newSpot.sequence = nextSequence;\r\n        newSpot.childCount = 0;\r\n        newSpot.expiresAt = isCommunity? NEVER_EXPIRES : _expiresAt;\r\n        newSpot.parent = parentSpotId;\r\n        newSpot.level = nextLevel;\r\n        if(isCommunity) {\r\n            //Community spot\r\n            _communitySpots[newSpotId] = newSpot;\r\n        }\r\n\r\n        parentSpot.childCount = parentSpot.childCount + 1;\r\n        _totalSupply = _totalSupply + 1;\r\n        _spotOwnerships[owner] = newSpotId;\r\n        _spots[newSpotId] = newSpot;\r\n        _sequences[nextSequence] = newSpot;\r\n\r\n        emit Mint(owner, newSpotId, newSpot.expiresAt);\r\n        emit Transfer(address(0), owner, nextSequence);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows any user to buy a spot as long as they know the paymentMethodId and have an inviteCode\r\n     *  restricted to one call per owner, and assumes owner's invite code will be randomly picked externally\r\n     *  function restricts children of any spot to MAX_SPOTS_PER_CODE,\r\n     *  this reverts if that is reached for the inviteCode provided\r\n     * @param paymentMethodId ID of the payment option\r\n     * @param invitedBySpotId ID of the spot that invited the user\r\n     * @param newSpotId A randomized ID for the spot being bought, to have random function outside contract\r\n     */\r\n    function buy(\r\n        uint256 paymentMethodId,\r\n        string calldata invitedBySpotId,\r\n        string calldata newSpotId\r\n    ) public whenNotMaxed nonReentrant whenSpotIdIsValid(newSpotId) {\r\n        address owner = _msgSender();\r\n        string storage ownedSpotId = _spotOwnerships[owner];\r\n        require(ownedSpotId.equal(\"\"), \"You already own a spot\");\r\n        require(_spots[newSpotId].sequence == 0, \"Spot ID is already in use\");\r\n\r\n        Spot storage parentSpot = _spots[invitedBySpotId];\r\n        require(parentSpot.sequence > 0, \"Parent spot is invalid\");\r\n        require(parentSpot.childCount < MAX_SPOTS_PER_CODE, \"This invite code is maxed out\");\r\n\r\n        uint256 nextSequence = MAX_SPOTS_PER_CODE * parentSpot.sequence + parentSpot.childCount + 1;\r\n        uint256 nextLevel = parentSpot.level + 1;\r\n        require(!(msg.data.length < (3 * 32 + 4)), \"USDT Short data protection in place\");\r\n        (PricingOption memory paymentOption, IERC20 paymentMethod) = _paymentMethodVerify(paymentMethodId, nextLevel);\r\n        paymentMethod.transferFrom(_msgSender(), paymentOption.paymentTo, paymentOption.price);\r\n\r\n        Spot memory newSpot;\r\n        newSpot.owner = owner;\r\n        newSpot.sequence = nextSequence;\r\n        newSpot.childCount = 0;\r\n        newSpot.expiresAt = paymentOption.extendDuration + block.timestamp;\r\n        newSpot.parent = invitedBySpotId;\r\n        newSpot.level = nextLevel;\r\n\r\n        parentSpot.childCount = parentSpot.childCount + 1;\r\n        _totalSupply = _totalSupply + 1;\r\n        _spotOwnerships[owner] = newSpotId;\r\n        _spots[newSpotId] = newSpot;\r\n        _sequences[nextSequence] = newSpot;\r\n\r\n        emit Mint(owner, newSpotId, newSpot.expiresAt);\r\n        emit Transfer(address(0), owner, nextSequence);\r\n    }\r\n\r\n    function buyAndSetPayoutHash(\r\n        uint256 paymentMethodId,\r\n        string calldata invitedBySpotId,\r\n        string calldata newSpotId,\r\n        string calldata _payoutHash\r\n    ) public whenNotMaxed {\r\n        buy(paymentMethodId, invitedBySpotId, newSpotId);\r\n        setPayoutHash(newSpotId, _payoutHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows any wallet to extend a spot by pay its price, for as much as they want\r\n     * @param paymentMethodId ID of the payment method\r\n     * @param spotId ID of the spot being extended (even if not owned by sender)\r\n     */\r\n    function extend(uint256 paymentMethodId, string calldata spotId) public {\r\n        Spot storage extended = _spots[spotId];\r\n        require(_spots[spotId].sequence > 0, \"Spot ID is invalid\");\r\n        // We don't care about level on renewal, and using level 0 implies admin can set special pricing for renwals\r\n        // Which affects everyone\r\n        (PricingOption memory paymentOption, IERC20 paymentMethod) = _paymentMethodVerify(paymentMethodId, 0);\r\n\r\n        bool penalty = hasPenalty(spotId);\r\n        require(!penalty || paymentOption.canBeUsedForPenalty, \"This payment method cannot be used with a penalty\");\r\n\r\n        paymentMethod.transferFrom(_msgSender(), paymentOption.paymentTo, paymentOption.price);\r\n        extended.expiresAt = extended.expiresAt + paymentOption.extendDuration;\r\n\r\n        emit Extended(spotId, extended.expiresAt);\r\n    }\r\n\r\n    function setPayoutHash(string calldata spotId, string memory _payoutHash) public {\r\n        Spot storage existing = _spots[spotId];\r\n\r\n        require(existing.sequence > 0, \"Spot ID is invalid\");\r\n        string storage ownedSpot = _spotOwnerships[_msgSender()];\r\n        require(spotId.equal(ownedSpot), \"Only owner can set this\");\r\n        require(bytes(_payoutHash).length > 0, \"Invalid payout hash\");\r\n        existing.payoutTo = _payoutHash;\r\n\r\n        emit PayoutChanged(spotId, _payoutHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the owner to toggle on and off the never expires flag for a spot\r\n     */\r\n    function setNeverExpires(string calldata spotId, bool newValue) public onlyOwner {\r\n        require(_spots[spotId].sequence > 0, \"Spot ID is invalid\");\r\n        _neverExpireSpots[spotId] = newValue;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the expiry time of a spot\r\n     * @param spotId string The ID of the spot\r\n     * @return timestamp in seconds\r\n     */\r\n    function expiresAt(string calldata spotId) public view returns(uint256) {\r\n        Spot storage existing = _spots[spotId];\r\n        require(existing.sequence > 0, \"Spot ID is invalid\");\r\n        if(_neverExpireSpots[spotId] || _communitySpots[spotId].sequence > 0) {\r\n            return NEVER_EXPIRES;\r\n        }\r\n        return existing.expiresAt;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows admin to set a penalty on a spot, normally occurs when an off chain issue\r\n     *  triggers this\r\n     */\r\n    function setPenalty(string calldata spotId, bool isPenalized) public onlyOwner {\r\n        _penalizedSpots[spotId] = isPenalized;\r\n        emit Penalty(spotId, isPenalized);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if a spot has incurred a penalty either administratively or by not renewing\r\n     */\r\n    function hasPenalty(string calldata spotId) public view returns(bool) {\r\n        return _penalizedSpots[spotId] ||\r\n            ( // Not community and hasn't renewed in PENALTY_AFTER_EXPIRY\r\n                _communitySpots[spotId].sequence == 0 &&\r\n                _spots[spotId].expiresAt < block.timestamp + PENALTY_AFTER_EXPIRY\r\n            );\r\n    }\r\n\r\n    function totalSupply() external view returns (uint256)\r\n    {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function cap() external view returns (uint256) {\r\n        return _cap;\r\n    }\r\n\r\n    function payoutHash(string calldata spotId) public view returns (string memory) {\r\n        return _spots[spotId].payoutTo;\r\n    }\r\n\r\n    function spotOf(address owner) public view returns (string memory) {\r\n        return _spotOwnerships[owner];\r\n    }\r\n\r\n    function ownerOf(string calldata spotId) public view returns (address) {\r\n        return _spots[spotId].owner;\r\n    }\r\n\r\n    /**\r\n     * @dev ERC20/721 compatible balance of to check if a wallet has a spot\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _spotOwnerships[owner].equal(\"\") ? 1: 0;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function setBaseURI(string memory baseUri) public onlyOwner {\r\n        baseURI = baseUri;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view returns (string memory) {\r\n        require(_sequences[tokenId].sequence > 0, \"ERC721: URI query for nonexistent token\");\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"rootNodeId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"defaultPaymentMethod\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"defaultPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"defaultOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenBaseUri\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"tokenId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"name\":\"Extended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"spotId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"paymentMethodAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentMethodId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"extendDuration\",\"type\":\"uint256\"}],\"name\":\"PaymentMethodAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"spotId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"payoutHash\",\"type\":\"string\"}],\"name\":\"PayoutChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"spotId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"hasPenalty\",\"type\":\"bool\"}],\"name\":\"Penalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SPOTS_PER_CODE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NEVER_EXPIRES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PENALTY_AFTER_EXPIRY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentMethodId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"invitedBySpotId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newSpotId\",\"type\":\"string\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentMethodId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"invitedBySpotId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newSpotId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_payoutHash\",\"type\":\"string\"}],\"name\":\"buyAndSetPayoutHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"disableLevelPaymentMethods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"spotId\",\"type\":\"string\"}],\"name\":\"expiresAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentMethodId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"spotId\",\"type\":\"string\"}],\"name\":\"extend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"spotId\",\"type\":\"string\"}],\"name\":\"hasPenalty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"parentSpotId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newSpotId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_expiresAt\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"spotId\",\"type\":\"string\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentMethodId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelId\",\"type\":\"uint256\"}],\"name\":\"paymentMethod\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"paymentMethod\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extendDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentMethodId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canBeUsedForPenalty\",\"type\":\"bool\"}],\"internalType\":\"struct PaymentMethods.PricingOption\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"spotId\",\"type\":\"string\"}],\"name\":\"payoutHash\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseUri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"spotId\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setNeverExpires\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentMethodId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentMethodAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extendDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentReceiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"canBeUsedForPenalty\",\"type\":\"bool\"}],\"name\":\"setPaymentMethod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentMethodId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentMethodAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extendDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentReceiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"canBeUsedForPenalty\",\"type\":\"bool\"}],\"name\":\"setPaymentMethodLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"spotId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_payoutHash\",\"type\":\"string\"}],\"name\":\"setPayoutHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"spotId\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isPenalized\",\"type\":\"bool\"}],\"name\":\"setPenalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"spotOf\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MRaceNFT", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000f42400000000000000000000000000000000000000000000000000000000000000180000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec700000000000000000000000000000000000000000000000000000000098968000000000000000000000000000483c5e6cc3d5b9d2931b665751b4273db872a4e00000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000000b4d696e696e672052616365000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000453504f5400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000647454e3030300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c68747470733a2f2f6d696e696e67726163652e636f6d2f6e6674732f00000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://539cedb6b002892481ce615eecd71b344af872cbda2ee1dbea59b355594a4284"}