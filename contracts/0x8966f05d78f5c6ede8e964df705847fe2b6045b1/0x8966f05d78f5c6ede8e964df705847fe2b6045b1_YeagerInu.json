{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n   \r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract YeagerInu is Context, IERC20Metadata, Ownable {\r\n    \r\n    struct governingTaxes{\r\n        uint32 _split0;\r\n        uint32 _split1;\r\n        uint32 _split2;\r\n        uint32 _split3;\r\n        address _wallet1;\r\n        address _wallet2;\r\n    }\r\n\r\n    struct Fees {\r\n        uint256 _fee0;\r\n        uint256 _fee1;\r\n        uint256 _fee2;\r\n        uint256 _fee3;\r\n    }\r\n    \r\n    uint32 private _totalTaxPercent;\r\n    governingTaxes private _governingTaxes;\r\n    \r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    \r\n    mapping (address => bool) private _isExcluded;\r\n    address[] private _excluded;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private _isLiquidityPool;\r\n\r\n    mapping (address => bool) private _isBlacklisted;\r\n    uint256 public _maxTxAmount;\r\n    uint256 private _maxHoldAmount;\r\n\r\n    bool private _tokenLock = true; //Locking the token until Liquidty is added\r\n    bool private _taxReverted = false;\r\n    uint256 public _tokenCommenceTime;\r\n\r\n    uint256 private constant _startingSupply = 100_000_000_000_000_000; //100 Quadrillion\r\n    \r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant _tTotal = _startingSupply * 10**9;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n    \r\n    string private constant _name = \"Yeager Inu\";\r\n    string private constant _symbol = \"YEAGER\";\r\n    uint8 private constant _decimals = 9;\r\n\r\n    address public constant burnAddress = 0x000000000000000000000000000000000000dEaD; \r\n\r\n    constructor (address wallet1_,  address wallet2_) {\r\n        _rOwned[_msgSender()] = _rTotal;\r\n\r\n        /*\r\n            Total Tax Percentage per Transaction : 10%\r\n            Tax Split:\r\n                > Burn (burnAddress): 10%\r\n                > Dev Wallet (wallet1): 20% \r\n                > Marketing Wallet (wallet2): 50%\r\n                > Holders (reflect): 20%\r\n        */\r\n\r\n        /*\r\n            >>> First 24 hour Tax <<<\r\n\r\n            Total Tax Percentage per Transaction : 25%\r\n            Tax Split:\r\n                > Burn (burnAddress): 4%\r\n                > Dev Wallet (wallet1): 40% \r\n                > Marketing Wallet (wallet2): 40%\r\n                > Holders (reflect): 16%\r\n        */\r\n        _totalTaxPercent = 25;  \r\n        _governingTaxes = governingTaxes(4, 40, 40, 16, wallet1_, wallet2_); \r\n        \r\n\r\n        //Max TX amount is 100% of the total supply, will be updated when token gets into circulation (anti-whale)\r\n        _maxTxAmount = (_startingSupply * 10**9); \r\n        //Max Hold amount is 2% of the total supply. (Only for first 24 hours) (anti-whale) \r\n        _maxHoldAmount = ((_startingSupply * 10**9) * 2) / 100;\r\n\r\n        //Excluding Owner and Other Governing Wallets From Reward System;\r\n        excludeFromFee(owner());\r\n        excludeFromReward(owner());\r\n        excludeFromReward(burnAddress);\r\n        excludeFromReward(wallet1_);\r\n        excludeFromReward(wallet2_);\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function currentTaxes() public view \r\n    returns (\r\n        uint32 total_Tax_Percent,\r\n        uint32 burn_Split,\r\n        uint32 governingSplit_Wallet1,\r\n        uint32 governingSplit_Wallet2,\r\n        uint32 reflect_Split\r\n    ) {\r\n        return (\r\n            _totalTaxPercent,\r\n            _governingTaxes._split0,\r\n            _governingTaxes._split1,\r\n            _governingTaxes._split2,\r\n            _governingTaxes._split3\r\n        );\r\n    }\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns(bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function isBlacklisted(address account) public view returns (bool) {\r\n        return _isBlacklisted[account];\r\n    }\r\n\r\n    function isLiquidityPool(address account) public view returns (bool) {\r\n        return _isLiquidityPool[account];\r\n    }\r\n\r\n    function _hasLimits(address from, address to) private view returns (bool) {\r\n        return from != owner()\r\n            && to != owner()\r\n            && to != burnAddress;\r\n    }\r\n\r\n    function setBlacklistAccount(address account, bool enabled) external onlyOwner() {\r\n        _isBlacklisted[account] = enabled;\r\n    }\r\n\r\n    function setLiquidityPool(address account, bool enabled) external onlyOwner() {\r\n        _isLiquidityPool[account] = enabled;\r\n    }\r\n\r\n    function setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {\r\n        require(maxTxAmount >= (_tTotal / 1000), \"Max Transaction amt must be above 0.1% of total supply\"); // Cannot set lower than 0.1%\r\n        _maxTxAmount = maxTxAmount;\r\n    }\r\n\r\n    function unlockToken() external onlyOwner() {\r\n        _tokenLock = false;\r\n        _tokenCommenceTime = block.timestamp;\r\n    }\r\n\r\n    function revertTax() external {\r\n        require(!_tokenLock, \"Token is Locked for Liquidty to be added\");\r\n        require(block.timestamp - _tokenCommenceTime > 86400, \"Tax can be reverted only after 24hrs\"); //check for 24 hours timeperiod\r\n        require(!_taxReverted, \"Tax had been Reverted!\"); //To prevent taxRevert more than once \r\n\r\n        _totalTaxPercent = 10;\r\n        _governingTaxes._split0 = 10;\r\n        _governingTaxes._split1 = 20;\r\n        _governingTaxes._split2 = 50;\r\n        _governingTaxes._split3 = 20;\r\n\r\n        _maxHoldAmount = _tTotal; //Removing the max hold limit of 2%\r\n        _taxReverted = true;\r\n    }\r\n\r\n    function setTaxes(\r\n        uint32 totalTaxPercent_, \r\n        uint32 split0_, \r\n        uint32 split1_, \r\n        uint32 split2_, \r\n        uint32 split3_, \r\n        address wallet1_, \r\n        address wallet2_\r\n    ) external onlyOwner() {\r\n        require(wallet1_ != address(0) && wallet2_ != address(0), \"Tax Wallets assigned zero address !\");\r\n        require(totalTaxPercent_ <= 10, \"Total Tax Percent Exceeds 10% !\"); // Prevents owner from manipulating Tax.\r\n        require(split0_+split1_+split2_+split3_ == 100, \"Split Percentages does not sum upto 100 !\");\r\n\r\n        _totalTaxPercent = totalTaxPercent_;\r\n        _governingTaxes._split0 = split0_;\r\n        _governingTaxes._split1 = split1_;\r\n        _governingTaxes._split2 = split2_;\r\n        _governingTaxes._split3 = split3_;\r\n        _governingTaxes._wallet1 = wallet1_;\r\n        _governingTaxes._wallet2 = wallet2_;\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n    \r\n    function includeInFee(address account) external onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function excludeFromReward(address account) public onlyOwner() {\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if(_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner() {\r\n        require(_isExcluded[account], \"Account is already excluded\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function reflect(uint256 tAmount) public {\r\n        address sender = _msgSender();\r\n        require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\r\n        (uint256 rAmount,,,,) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n        _rTotal = _rTotal - rAmount;\r\n        _tFeeTotal = _tFeeTotal + tAmount;\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount,,,,) = _getValues(tAmount);\r\n            return rAmount;\r\n        } else {\r\n            (,uint256 rTransferAmount,,,) = _getValues(tAmount);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount / currentRate;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require((!_tokenLock) || (!_hasLimits(sender, recipient))  , \"Token is Locked for Liquidty to be added\");\r\n\r\n        if(_hasLimits(sender, recipient)) {\r\n            require(tAmount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount\");\r\n            require(!isBlacklisted(sender) || !isBlacklisted(recipient), \"Sniper Rejected\");\r\n            if(!_taxReverted && !_isLiquidityPool[recipient]) {\r\n                require(balanceOf(recipient)+tAmount <= _maxHoldAmount, \"Receiver address exceeds the maxHoldAmount\");\r\n            }\r\n        }\r\n\r\n        uint32 _previoustotalTaxPercent;\r\n        if(_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) //checking if Tax should be deducted from transfer\r\n        {\r\n            _previoustotalTaxPercent = _totalTaxPercent;\r\n            _totalTaxPercent = 0; //removing Taxes\r\n        }\r\n        else if(!_taxReverted && _isLiquidityPool[sender]) {\r\n            _previoustotalTaxPercent = _totalTaxPercent;\r\n            _totalTaxPercent = 10; //Liquisity pool Buy tax reduced to 10% from 25%\r\n        }\r\n\r\n        (uint256 rAmount, uint256 rTransferAmount, Fees memory rFee, uint256 tTransferAmount, Fees memory tFee) = _getValues(tAmount);\r\n\r\n        if(_isExcludedFromFee[sender] || _isExcludedFromFee[recipient] || \r\n          (!_taxReverted && _isLiquidityPool[sender])) _totalTaxPercent = _previoustotalTaxPercent; //restoring Taxes\r\n\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\r\n\r\n        _rOwned[burnAddress] += rFee._fee0;\r\n        _rOwned[_governingTaxes._wallet1] += rFee._fee1;\r\n        _rOwned[_governingTaxes._wallet2] += rFee._fee2;\r\n        _reflectFee(rFee._fee3, tFee._fee0+tFee._fee1+tFee._fee2+tFee._fee3);\r\n\r\n        if (_isExcluded[sender]) _tOwned[sender] = _tOwned[sender] - tAmount;\r\n        if (_isExcluded[recipient]) _tOwned[recipient] = _tOwned[recipient] + tTransferAmount;\r\n        if (_isExcluded[burnAddress]) _tOwned[burnAddress] += tFee._fee0;\r\n        if (_isExcluded[_governingTaxes._wallet1]) _tOwned[_governingTaxes._wallet1] += tFee._fee1;\r\n        if (_isExcluded[_governingTaxes._wallet2])_tOwned[_governingTaxes._wallet2] += tFee._fee2;\r\n        \r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal - rFee;\r\n        _tFeeTotal = _tFeeTotal + tFee;\r\n    }\r\n\r\n    function _getValues(uint256 tAmount) private view returns (uint256 rAmount, uint256 rTransferAmount, Fees memory rFee, uint256 tTransferAmount, Fees memory tFee) {\r\n        (tTransferAmount, tFee) = _getTValues(tAmount);\r\n        uint256 currentRate =  _getRate();\r\n        (rAmount, rTransferAmount, rFee) = _getRValues(tAmount, tFee, currentRate);\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount) private view returns (uint256, Fees memory) {\r\n        Fees memory tFee;\r\n        tFee._fee0 = (tAmount * _totalTaxPercent * _governingTaxes._split0) / 10**4;\r\n        tFee._fee1 = (tAmount * _totalTaxPercent * _governingTaxes._split1) / 10**4;\r\n        tFee._fee2 = (tAmount * _totalTaxPercent * _governingTaxes._split2) / 10**4;\r\n        tFee._fee3 = (tAmount * _totalTaxPercent * _governingTaxes._split3) / 10**4;\r\n        uint256 tTransferAmount = tAmount - tFee._fee0 - tFee._fee1 - tFee._fee2 - tFee._fee3;\r\n        return (tTransferAmount, tFee);\r\n    }\r\n\r\n    function _getRValues(uint256 tAmount, Fees memory tFee, uint256 currentRate) private pure returns (uint256, uint256, Fees memory) {\r\n        uint256 rAmount = tAmount * currentRate;\r\n        Fees memory rFee;\r\n        rFee._fee0 = tFee._fee0 * currentRate;\r\n        rFee._fee1 = tFee._fee1 * currentRate;\r\n        rFee._fee2 = tFee._fee2 * currentRate;\r\n        rFee._fee3 = tFee._fee3 * currentRate;\r\n        uint256 rTransferAmount = rAmount - rFee._fee0 - rFee._fee1 - rFee._fee2 - rFee._fee3;\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply / tSupply;\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;      \r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply - _rOwned[_excluded[i]];\r\n            tSupply = tSupply - _tOwned[_excluded[i]];\r\n        }\r\n        if (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet1_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wallet2_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenCommenceTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTaxes\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"total_Tax_Percent\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"burn_Split\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"governingSplit_Wallet1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"governingSplit_Wallet2\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"reflect_Split\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isLiquidityPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"reflect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revertTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setBlacklistAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setLiquidityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"totalTaxPercent_\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"split0_\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"split1_\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"split2_\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"split3_\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"wallet1_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wallet2_\",\"type\":\"address\"}],\"name\":\"setTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "YeagerInu", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b3e4ac1b7b26f07dc892f639847b881897a4a2f40000000000000000000000004608202bd3a5c7296b553b35cb5b5d701ca95558", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://09f550dd31aadd94ba386aed699c51477ea618f9aa953940bca784aed5e72eea"}