{"SourceCode": "pragma solidity 0.6.7;\r\n\r\ncontract GebMath {\r\n    uint256 public constant RAY = 10 ** 27;\r\n    uint256 public constant WAD = 10 ** 18;\r\n\r\n    function ray(uint x) public pure returns (uint z) {\r\n        z = multiply(x, 10 ** 9);\r\n    }\r\n    function rad(uint x) public pure returns (uint z) {\r\n        z = multiply(x, 10 ** 27);\r\n    }\r\n    function minimum(uint x, uint y) public pure returns (uint z) {\r\n        z = (x <= y) ? x : y;\r\n    }\r\n    function addition(uint x, uint y) public pure returns (uint z) {\r\n        z = x + y;\r\n        require(z >= x, \"uint-uint-add-overflow\");\r\n    }\r\n    function subtract(uint x, uint y) public pure returns (uint z) {\r\n        z = x - y;\r\n        require(z <= x, \"uint-uint-sub-underflow\");\r\n    }\r\n    function multiply(uint x, uint y) public pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"uint-uint-mul-overflow\");\r\n    }\r\n    function rmultiply(uint x, uint y) public pure returns (uint z) {\r\n        z = multiply(x, y) / RAY;\r\n    }\r\n    function rdivide(uint x, uint y) public pure returns (uint z) {\r\n        z = multiply(x, RAY) / y;\r\n    }\r\n    function wdivide(uint x, uint y) public pure returns (uint z) {\r\n        z = multiply(x, WAD) / y;\r\n    }\r\n    function wmultiply(uint x, uint y) public pure returns (uint z) {\r\n        z = multiply(x, y) / WAD;\r\n    }\r\n    function rpower(uint x, uint n, uint base) public pure returns (uint z) {\r\n        assembly {\r\n            switch x case 0 {switch n case 0 {z := base} default {z := 0}}\r\n            default {\r\n                switch mod(n, 2) case 0 { z := base } default { z := x }\r\n                let half := div(base, 2)  // for rounding.\r\n                for { n := div(n, 2) } n { n := div(n,2) } {\r\n                    let xx := mul(x, x)\r\n                    if iszero(eq(div(xx, x), x)) { revert(0,0) }\r\n                    let xxRound := add(xx, half)\r\n                    if lt(xxRound, xx) { revert(0,0) }\r\n                    x := div(xxRound, base)\r\n                    if mod(n,2) {\r\n                        let zx := mul(z, x)\r\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\r\n                        let zxRound := add(zx, half)\r\n                        if lt(zxRound, zx) { revert(0,0) }\r\n                        z := div(zxRound, base)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract StabilityFeeTreasuryLike {\r\n    function getAllowance(address) virtual external view returns (uint, uint);\r\n    function systemCoin() virtual external view returns (address);\r\n    function pullFunds(address, address, uint) virtual external;\r\n}\r\n\r\ncontract IncreasingTreasuryReimbursement is GebMath {\r\n    // --- Auth ---\r\n    mapping (address => uint) public authorizedAccounts;\r\n    /**\r\n     * @notice Add auth to an account\r\n     * @param account Account to add auth to\r\n     */\r\n    function addAuthorization(address account) virtual external isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n    /**\r\n     * @notice Remove auth from an account\r\n     * @param account Account to remove auth from\r\n     */\r\n    function removeAuthorization(address account) virtual external isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n    /**\r\n    * @notice Checks whether msg.sender can call an authed function\r\n    **/\r\n    modifier isAuthorized {\r\n        require(authorizedAccounts[msg.sender] == 1, \"IncreasingTreasuryReimbursement/account-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- Variables ---\r\n    // Starting reward for the fee receiver/keeper\r\n    uint256 public baseUpdateCallerReward;          // [wad]\r\n    // Max possible reward for the fee receiver/keeper\r\n    uint256 public maxUpdateCallerReward;           // [wad]\r\n    // Max delay taken into consideration when calculating the adjusted reward\r\n    uint256 public maxRewardIncreaseDelay;          // [seconds]\r\n    // Rate applied to baseUpdateCallerReward every extra second passed beyond a certain point (e.g next time when a specific function needs to be called)\r\n    uint256 public perSecondCallerRewardIncrease;   // [ray]\r\n\r\n    // SF treasury\r\n    StabilityFeeTreasuryLike  public treasury;\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n    event ModifyParameters(\r\n      bytes32 parameter,\r\n      address addr\r\n    );\r\n    event ModifyParameters(\r\n      bytes32 parameter,\r\n      uint256 val\r\n    );\r\n    event FailRewardCaller(bytes revertReason, address feeReceiver, uint256 amount);\r\n\r\n    constructor(\r\n      address treasury_,\r\n      uint256 baseUpdateCallerReward_,\r\n      uint256 maxUpdateCallerReward_,\r\n      uint256 perSecondCallerRewardIncrease_\r\n    ) public {\r\n        if (address(treasury_) != address(0)) {\r\n          require(StabilityFeeTreasuryLike(treasury_).systemCoin() != address(0), \"IncreasingTreasuryReimbursement/treasury-coin-not-set\");\r\n        }\r\n        require(maxUpdateCallerReward_ >= baseUpdateCallerReward_, \"IncreasingTreasuryReimbursement/invalid-max-caller-reward\");\r\n        require(perSecondCallerRewardIncrease_ >= RAY, \"IncreasingTreasuryReimbursement/invalid-per-second-reward-increase\");\r\n        authorizedAccounts[msg.sender] = 1;\r\n\r\n        treasury                        = StabilityFeeTreasuryLike(treasury_);\r\n        baseUpdateCallerReward          = baseUpdateCallerReward_;\r\n        maxUpdateCallerReward           = maxUpdateCallerReward_;\r\n        perSecondCallerRewardIncrease   = perSecondCallerRewardIncrease_;\r\n        maxRewardIncreaseDelay          = uint(-1);\r\n\r\n        emit AddAuthorization(msg.sender);\r\n        emit ModifyParameters(\"treasury\", treasury_);\r\n        emit ModifyParameters(\"baseUpdateCallerReward\", baseUpdateCallerReward);\r\n        emit ModifyParameters(\"maxUpdateCallerReward\", maxUpdateCallerReward);\r\n        emit ModifyParameters(\"perSecondCallerRewardIncrease\", perSecondCallerRewardIncrease);\r\n    }\r\n\r\n    // --- Boolean Logic ---\r\n    function either(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := or(x, y)}\r\n    }\r\n\r\n    // --- Treasury ---\r\n    /**\r\n    * @notice This returns the stability fee treasury allowance for this contract by taking the minimum between the per block and the total allowances\r\n    **/\r\n    function treasuryAllowance() public view returns (uint256) {\r\n        (uint total, uint perBlock) = treasury.getAllowance(address(this));\r\n        return minimum(total, perBlock);\r\n    }\r\n    /*\r\n    * @notice Get the SF reward that can be sent to a function caller right now\r\n    * @param timeOfLastUpdate The last time when the function that the treasury pays for has been updated\r\n    * @param defaultDelayBetweenCalls Enforced delay between calls to the function for which the treasury reimburses callers\r\n    */\r\n    function getCallerReward(uint256 timeOfLastUpdate, uint256 defaultDelayBetweenCalls) public view returns (uint256) {\r\n        // If the rewards are null or if the time of the last update is in the future or present, return 0\r\n        bool nullRewards = (baseUpdateCallerReward == 0 && maxUpdateCallerReward == 0);\r\n        if (either(timeOfLastUpdate >= now, nullRewards)) return 0;\r\n\r\n        // If the time elapsed is smaller than defaultDelayBetweenCalls or if the base reward is zero, return 0\r\n        uint256 timeElapsed = (timeOfLastUpdate == 0) ? defaultDelayBetweenCalls : subtract(now, timeOfLastUpdate);\r\n        if (either(timeElapsed < defaultDelayBetweenCalls, baseUpdateCallerReward == 0)) {\r\n            return 0;\r\n        }\r\n\r\n        // If too much time elapsed, return the max reward\r\n        uint256 adjustedTime      = subtract(timeElapsed, defaultDelayBetweenCalls);\r\n        uint256 maxPossibleReward = minimum(maxUpdateCallerReward, treasuryAllowance() / RAY);\r\n        if (adjustedTime > maxRewardIncreaseDelay) {\r\n            return maxPossibleReward;\r\n        }\r\n\r\n        // Calculate the reward\r\n        uint256 calculatedReward = baseUpdateCallerReward;\r\n        if (adjustedTime > 0) {\r\n            calculatedReward = rmultiply(rpower(perSecondCallerRewardIncrease, adjustedTime, RAY), calculatedReward);\r\n        }\r\n\r\n        // If the reward is higher than max, set it to max\r\n        if (calculatedReward > maxPossibleReward) {\r\n            calculatedReward = maxPossibleReward;\r\n        }\r\n        return calculatedReward;\r\n    }\r\n    /**\r\n    * @notice Send a stability fee reward to an address\r\n    * @param proposedFeeReceiver The SF receiver\r\n    * @param reward The system coin amount to send\r\n    **/\r\n    function rewardCaller(address proposedFeeReceiver, uint256 reward) internal {\r\n        // If the receiver is the treasury itself or if the treasury is null or if the reward is zero, return\r\n        if (address(treasury) == proposedFeeReceiver) return;\r\n        if (either(address(treasury) == address(0), reward == 0)) return;\r\n\r\n        // Determine the actual receiver and send funds\r\n        address finalFeeReceiver = (proposedFeeReceiver == address(0)) ? msg.sender : proposedFeeReceiver;\r\n        try treasury.pullFunds(finalFeeReceiver, treasury.systemCoin(), reward) {}\r\n        catch(bytes memory revertReason) {\r\n            emit FailRewardCaller(revertReason, finalFeeReceiver, reward);\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract AccountingEngineLike {\r\n    function surplusBuffer() virtual public view returns (uint256);\r\n    function modifyParameters(bytes32, uint256) virtual external;\r\n}\r\nabstract contract SAFEEngineLike {\r\n    function globalDebt() virtual external view returns (uint256);\r\n}\r\n\r\ncontract AutoSurplusBufferSetter is IncreasingTreasuryReimbursement {\r\n    // --- Variables ---\r\n    // Whether buffer adjustments are blocked or not\r\n    uint256 public stopAdjustments;\r\n    // Delay between updates after which the reward starts to increase\r\n    uint256 public updateDelay;                                                                 // [seconds]\r\n    // The minimum buffer that must be maintained\r\n    uint256 public minimumBufferSize;                                                           // [rad]\r\n    // The max buffer allowed\r\n    uint256 public maximumBufferSize;                                                           // [rad]\r\n    // Last read global debt\r\n    uint256 public lastRecordedGlobalDebt;                                                      // [rad]\r\n    // Minimum change compared to current globalDebt that allows a new modifyParameters() call\r\n    uint256 public minimumGlobalDebtChange;                                                     // [thousand]\r\n    // Percentage of global debt that should be covered by the buffer\r\n    uint256 public coveredDebt;                                                                 // [thousand]\r\n    // Last timestamp when the median was updated\r\n    uint256 public lastUpdateTime;                                                              // [unix timestamp]\r\n\r\n    // Safe engine contract\r\n    SAFEEngineLike       public safeEngine;\r\n    // Accounting engine contract\r\n    AccountingEngineLike public accountingEngine;\r\n\r\n    constructor(\r\n      address treasury_,\r\n      address safeEngine_,\r\n      address accountingEngine_,\r\n      uint256 minimumBufferSize_,\r\n      uint256 minimumGlobalDebtChange_,\r\n      uint256 coveredDebt_,\r\n      uint256 updateDelay_,\r\n      uint256 baseUpdateCallerReward_,\r\n      uint256 maxUpdateCallerReward_,\r\n      uint256 perSecondCallerRewardIncrease_\r\n    ) public IncreasingTreasuryReimbursement(treasury_, baseUpdateCallerReward_, maxUpdateCallerReward_, perSecondCallerRewardIncrease_) {\r\n        require(both(minimumGlobalDebtChange_ > 0, minimumGlobalDebtChange_ <= THOUSAND), \"AutoSurplusBufferSetter/invalid-debt-change\");\r\n        require(both(coveredDebt_ > 0, coveredDebt_ <= THOUSAND), \"AutoSurplusBufferSetter/invalid-covered-debt\");\r\n        require(updateDelay_ > 0, \"AutoSurplusBufferSetter/null-update-delay\");\r\n\r\n        minimumBufferSize        = minimumBufferSize_;\r\n        maximumBufferSize        = uint(-1);\r\n        coveredDebt              = coveredDebt_;\r\n        minimumGlobalDebtChange  = minimumGlobalDebtChange_;\r\n        updateDelay              = updateDelay_;\r\n\r\n        safeEngine               = SAFEEngineLike(safeEngine_);\r\n        accountingEngine         = AccountingEngineLike(accountingEngine_);\r\n\r\n        emit ModifyParameters(bytes32(\"minimumBufferSize\"), minimumBufferSize);\r\n        emit ModifyParameters(bytes32(\"maximumBufferSize\"), maximumBufferSize);\r\n        emit ModifyParameters(bytes32(\"coveredDebt\"), coveredDebt);\r\n        emit ModifyParameters(bytes32(\"minimumGlobalDebtChange\"), minimumGlobalDebtChange);\r\n        emit ModifyParameters(bytes32(\"accountingEngine\"), address(accountingEngine));\r\n    }\r\n\r\n    // --- Boolean Logic ---\r\n    function both(bool x, bool y) internal pure returns (bool z) {\r\n      assembly{ z := and(x, y)}\r\n    }\r\n\r\n    // --- Administration ---\r\n    /*\r\n    * @notify Modify an uint256 parameter\r\n    * @param parameter The name of the parameter to change\r\n    * @param val The new parameter value\r\n    */\r\n    function modifyParameters(bytes32 parameter, uint256 val) external isAuthorized {\r\n        if (parameter == \"minimumBufferSize\") minimumBufferSize = val;\r\n        else if (parameter == \"maximumBufferSize\") {\r\n          require(val >= minimumBufferSize, \"AutoSurplusBufferSetter/max-buffer-size-too-small\");\r\n          maximumBufferSize = val;\r\n        }\r\n        else if (parameter == \"minimumGlobalDebtChange\") {\r\n          require(both(val > 0, val <= THOUSAND), \"AutoSurplusBufferSetter/invalid-debt-change\");\r\n          minimumGlobalDebtChange = val;\r\n        }\r\n        else if (parameter == \"coveredDebt\") {\r\n          require(both(val > 0, val <= THOUSAND), \"AutoSurplusBufferSetter/invalid-covered-debt\");\r\n          coveredDebt = val;\r\n        }\r\n        else if (parameter == \"baseUpdateCallerReward\") {\r\n          require(val <= maxUpdateCallerReward, \"AutoSurplusBufferSetter/invalid-min-reward\");\r\n          baseUpdateCallerReward = val;\r\n        }\r\n        else if (parameter == \"maxUpdateCallerReward\") {\r\n          require(val >= baseUpdateCallerReward, \"AutoSurplusBufferSetter/invalid-max-reward\");\r\n          maxUpdateCallerReward = val;\r\n        }\r\n        else if (parameter == \"perSecondCallerRewardIncrease\") {\r\n          require(val >= RAY, \"AutoSurplusBufferSetter/invalid-reward-increase\");\r\n          perSecondCallerRewardIncrease = val;\r\n        }\r\n        else if (parameter == \"maxRewardIncreaseDelay\") {\r\n          require(val > 0, \"AutoSurplusBufferSetter/invalid-max-increase-delay\");\r\n          maxRewardIncreaseDelay = val;\r\n        }\r\n        else if (parameter == \"updateDelay\") {\r\n          require(val > 0, \"AutoSurplusBufferSetter/null-update-delay\");\r\n          updateDelay = val;\r\n        }\r\n        else if (parameter == \"stopAdjustments\") {\r\n          require(val <= 1, \"AutoSurplusBufferSetter/invalid-stop-adjust\");\r\n          stopAdjustments = val;\r\n        }\r\n        else revert(\"AutoSurplusBufferSetter/modify-unrecognized-param\");\r\n        emit ModifyParameters(parameter, val);\r\n    }\r\n    /*\r\n    * @notify Modify an address param\r\n    * @param parameter The name of the parameter to change\r\n    * @param addr The new address for the parameter\r\n    */\r\n    function modifyParameters(bytes32 parameter, address addr) external isAuthorized {\r\n        require(addr != address(0), \"AutoSurplusBufferSetter/null-address\");\r\n        if (parameter == \"accountingEngine\") accountingEngine = AccountingEngineLike(addr);\r\n        else if (parameter == \"treasury\") treasury = StabilityFeeTreasuryLike(addr);\r\n        else revert(\"AutoSurplusBufferSetter/modify-unrecognized-param\");\r\n        emit ModifyParameters(parameter, addr);\r\n    }\r\n\r\n    // --- Math ---\r\n    uint internal constant RAD      = 10 ** 45;\r\n    uint internal constant THOUSAND = 1000;\r\n\r\n    // --- Utils ---\r\n    /*\r\n    * @notify Return the percentage debt change since the last recorded debt amount in the system\r\n    * @param currentGlobalDebt The current globalDebt in the system\r\n    */\r\n    function percentageDebtChange(uint currentGlobalDebt) public view returns (uint256) {\r\n        if (lastRecordedGlobalDebt == 0) return uint(-1);\r\n        uint256 deltaDebt = (currentGlobalDebt >= lastRecordedGlobalDebt) ?\r\n          subtract(currentGlobalDebt, lastRecordedGlobalDebt) : subtract(lastRecordedGlobalDebt, currentGlobalDebt);\r\n        return multiply(deltaDebt, THOUSAND) / lastRecordedGlobalDebt;\r\n    }\r\n    /*\r\n    * @notify Return the upcoming surplus buffer\r\n    * @param currentGlobalDebt The current amount of debt in the system\r\n    * @return newBuffer The new surplus buffer\r\n    */\r\n    function getNewBuffer(uint256 currentGlobalDebt) public view returns (uint newBuffer) {\r\n        if (currentGlobalDebt >= uint(-1) / coveredDebt) return maximumBufferSize;\r\n        newBuffer = multiply(coveredDebt, currentGlobalDebt) / THOUSAND;\r\n        newBuffer = both(newBuffer > maximumBufferSize, maximumBufferSize > 0) ? maximumBufferSize : newBuffer;\r\n        newBuffer = (newBuffer < minimumBufferSize) ? minimumBufferSize : newBuffer;\r\n    }\r\n\r\n    // --- Buffer Adjustment ---\r\n    /*\r\n    * @notify Calculate and set a new surplus buffer\r\n    * @param feeReceiver The address that will receive the SF reward for calling this function\r\n    */\r\n    function adjustSurplusBuffer(address feeReceiver) external {\r\n        // Check if adjustments are forbidden or not\r\n        require(stopAdjustments == 0, \"AutoSurplusBufferSetter/cannot-adjust\");\r\n        // Check delay between calls\r\n        require(either(subtract(now, lastUpdateTime) >= updateDelay, lastUpdateTime == 0), \"AutoSurplusBufferSetter/wait-more\");\r\n        // Get the caller's reward\r\n        uint256 callerReward = getCallerReward(lastUpdateTime, updateDelay);\r\n        // Store the timestamp of the update\r\n        lastUpdateTime = now;\r\n\r\n        // Get the current global debt\r\n        uint currentGlobalDebt = safeEngine.globalDebt();\r\n        // Check if we didn't already reach the max buffer\r\n        if (both(currentGlobalDebt > lastRecordedGlobalDebt, maximumBufferSize > 0)) {\r\n          require(accountingEngine.surplusBuffer() < maximumBufferSize, \"AutoSurplusBufferSetter/max-buffer-reached\");\r\n        }\r\n        // Check that global debt changed enough\r\n        require(percentageDebtChange(currentGlobalDebt) >= subtract(THOUSAND, minimumGlobalDebtChange), \"AutoSurplusBufferSetter/small-debt-change\");\r\n        // Compute the new buffer\r\n        uint newBuffer         = getNewBuffer(currentGlobalDebt);\r\n\r\n        lastRecordedGlobalDebt = currentGlobalDebt;\r\n        accountingEngine.modifyParameters(\"surplusBuffer\", newBuffer);\r\n\r\n        // Pay the caller for updating the rate\r\n        rewardCaller(feeReceiver, callerReward);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"safeEngine_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accountingEngine_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumBufferSize_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumGlobalDebtChange_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coveredDebt_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updateDelay_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseUpdateCallerReward_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxUpdateCallerReward_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perSecondCallerRewardIncrease_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"revertReason\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FailRewardCaller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountingEngine\",\"outputs\":[{\"internalType\":\"contract AccountingEngineLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"addition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"}],\"name\":\"adjustSurplusBuffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseUpdateCallerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coveredDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeOfLastUpdate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defaultDelayBetweenCalls\",\"type\":\"uint256\"}],\"name\":\"getCallerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentGlobalDebt\",\"type\":\"uint256\"}],\"name\":\"getNewBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuffer\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRecordedGlobalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRewardIncreaseDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxUpdateCallerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumBufferSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"minimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumBufferSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumGlobalDebtChange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"multiply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perSecondCallerRewardIncrease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentGlobalDebt\",\"type\":\"uint256\"}],\"name\":\"percentageDebtChange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"rad\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"ray\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"rdivide\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"rmultiply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"}],\"name\":\"rpower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeEngine\",\"outputs\":[{\"internalType\":\"contract SAFEEngineLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopAdjustments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"subtract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract StabilityFeeTreasuryLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"wdivide\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"wmultiply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "AutoSurplusBufferSetter", "CompilerVersion": "v0.6.7+commit.b8d736ae", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000083533fdd3285f48204215e9cf38c785371258e76000000000000000000000000cc88a9d330da1133df3a7bd823b95e52511a6962000000000000000000000000cee6aa1ab47d0fb0f24f51a3072ec16e20f90fce0000000000000000000001561d276ddfdc00a71dd41a08f48af4000000000000000000000000000000000000000000000000000000000000000000000000035200000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000127500000000000000000000000000000000000000000000000000451db4551b7e82af0000000000000000000000000000000000000000000000008a3b68aa36fd055e0000000000000000000000000000000000000000033b3bd3f4e7d55df7cc629f", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1d4a356cc987a3e4a086389a0485b37aff26081530fc76601c1040bcd8b79660"}