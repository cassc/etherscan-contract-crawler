{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/lib/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.8;\\n\\nlibrary EnumerableSet {\\n    struct Set {\\n        bytes32[] _values;\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                set._values[toDeleteIndex] = lastValue;\\n                set._indexes[lastValue] = valueIndex;\\n            }\\n\\n            delete set._values[lastIndex];\\n            set._values.pop();\\n\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _contains(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _at(Set storage set, uint256 index)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        return set._values[index];\\n    }\\n\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    //======== Bytes32Set ========\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    function add(Bytes32Set storage set, bytes32 value)\\n        public\\n        returns (bool)\\n    {\\n        return _add(set._inner, value);\\n    }\\n\\n    function remove(Bytes32Set storage set, bytes32 value)\\n        public\\n        returns (bool)\\n    {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function contains(Bytes32Set storage set, bytes32 value)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function length(Bytes32Set storage set) public view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function at(Bytes32Set storage set, uint256 index)\\n        public\\n        view\\n        returns (bytes32)\\n    {\\n        return _at(set._inner, index);\\n    }\\n\\n    function values(Bytes32Set storage set)\\n        public\\n        view\\n        returns (bytes32[] memory)\\n    {\\n        return _values(set._inner);\\n    }\\n\\n    //======== AddressSet ========\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    function add(AddressSet storage set, address value)\\n        public\\n        returns (bool)\\n    {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(AddressSet storage set, address value)\\n        public\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(AddressSet storage set, address value)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function length(AddressSet storage set) public view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function at(AddressSet storage set, uint256 index)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function values(AddressSet storage set)\\n        public\\n        view\\n        returns (address[] memory)\\n    {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    //======== UintSet ========\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function add(UintSet storage set, uint256 value) public returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(UintSet storage set, uint256 value)\\n        public\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) public view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function at(UintSet storage set, uint256 index)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function values(UintSet storage set)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/SigsRepo.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\n/* *\\n * Copyright 2021-2023 LI LI @ JINGTIAN & GONGCHENG.\\n * All Rights Reserved.\\n * */\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\nlibrary SigsRepo {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    struct Signature {\\n        uint40 signer;\\n        uint48 sigDate;\\n        uint64 blocknumber;\\n        bool flag;\\n        uint16 para;\\n        uint16 arg;\\n        uint16 seq;\\n        uint16 attr;\\n        uint32 data;\\n    }\\n\\n    struct Blank{\\n        EnumerableSet.UintSet seqOfDeals;\\n        Signature sig;\\n        bytes32 sigHash;\\n    }\\n\\n    // blanks[0].sig {\\n    //     sigDate: circulateDate;\\n    //     flag: established;\\n    //     para: counterOfBlanks;\\n    //     arg: counterOfSigs;\\n    //     seq: signingDays;\\n    //     attr: closingDays;\\n    // }\\n\\n    struct Page {\\n        // party => Blank\\n        mapping(uint256 => Blank) blanks;\\n        EnumerableSet.UintSet buyers;\\n        EnumerableSet.UintSet sellers;\\n    }\\n\\n    //###################\\n    //##    \u8bbe\u7f6e\u63a5\u53e3    ##\\n    //###################\\n\\n    function circulateDoc(\\n        Page storage p\\n    ) public {\\n        p.blanks[0].sig.sigDate = uint48(block.timestamp);\\n    }\\n\\n    function setTiming(\\n        Page storage p,\\n        uint signingDays,\\n        uint closingDays\\n    ) public {\\n        // require(!circulated(p), \\\"SR.SD: doc already circulated\\\");\\n        p.blanks[0].sig.seq = uint16(signingDays);\\n        p.blanks[0].sig.attr = uint16(closingDays);\\n    }\\n\\n    function addBlank(\\n        Page storage p,\\n        bool beBuyer,\\n        uint256 seq,\\n        uint256 acct\\n    ) public {\\n        require (seq > 0, \\\"SR.AB: zero seq\\\");\\n        require (acct > 0, \\\"SR.AB: zero acct\\\");\\n\\n        \\n        if (beBuyer) {\\n            require(!p.sellers.contains(acct), \\\"SR.AB: seller intends to buy\\\");\\n            p.buyers.add(acct);\\n        } else {\\n            require(!p.buyers.contains(acct), \\\"SR.AB: buyer intends to sell\\\");\\n            p.sellers.add(acct);\\n        }\\n\\n        if (p.blanks[uint40(acct)].seqOfDeals.add(uint16(seq)))\\n            _increaseCounterOfBlanks(p);\\n    }\\n\\n    function removeBlank(\\n        Page storage p,\\n        uint256 seq,\\n        uint256 acct\\n    ) public {\\n        if (p.buyers.contains(acct) || p.sellers.contains(acct)) {\\n            if (p.blanks[acct].seqOfDeals.remove(seq))\\n                _decreaseCounterOfBlanks(p);\\n\\n            if (p.blanks[acct].seqOfDeals.length() == 0) {\\n                delete p.blanks[acct]; \\n                p.buyers.remove(acct) || p.sellers.remove(acct);\\n            }\\n        }\\n    }\\n\\n    function signDoc(Page storage p, uint256 acct, bytes32 sigHash) \\n        public \\n    {\\n        require(block.timestamp < getSigDeadline(p) ||\\n            getSigningDays(p) == 0,\\n            \\\"SR.SD: missed sigDeadline\\\");\\n\\n        require(!established(p),\\n            \\\"SR.SD: Doc already established\\\");\\n\\n        if ((p.buyers.contains(acct) || p.sellers.contains(acct)) &&\\n            p.blanks[acct].sig.sigDate == 0) {\\n\\n            Signature storage sig = p.blanks[acct].sig;\\n\\n            sig.signer = uint40(acct);\\n            sig.sigDate = uint48(block.timestamp);\\n            sig.blocknumber = uint64(block.number);\\n\\n            p.blanks[acct].sigHash = sigHash;\\n\\n            _increaseCounterOfSigs(p, p.blanks[acct].seqOfDeals.length());\\n        }\\n    }\\n\\n    function regSig(Page storage p, uint256 acct, uint sigDate, bytes32 sigHash)\\n        public returns (bool flag)\\n    {\\n        require(block.timestamp < getSigDeadline(p),\\n            \\\"SR.RS: missed sigDeadline\\\");\\n\\n        require(!established(p),\\n            \\\"SR.regSig: Doc already established\\\");\\n\\n        if (p.buyers.contains(acct) || p.sellers.contains(acct)) {\\n\\n            Signature storage sig = p.blanks[acct].sig;\\n\\n            sig.signer = uint40(acct);\\n            sig.sigDate = uint48(sigDate);\\n            sig.blocknumber = uint64(block.number);\\n\\n            p.blanks[acct].sigHash = sigHash;\\n\\n            _increaseCounterOfSigs(p, 1);\\n\\n            flag = true;\\n        }\\n\\n    }\\n\\n    function _increaseCounterOfBlanks(Page storage p) private {\\n        p.blanks[0].sig.para++;\\n    }\\n\\n    function _decreaseCounterOfBlanks(Page storage p) private {\\n        p.blanks[0].sig.para--;\\n    }\\n\\n    function _increaseCounterOfSigs(Page storage p, uint qtyOfDeals) private {\\n        p.blanks[0].sig.arg += uint16(qtyOfDeals);\\n    }\\n\\n    //####################\\n    //##    \u67e5\u8be2\u63a5\u53e3     ##\\n    //####################\\n\\n    function circulated(Page storage p) public view returns (bool)\\n    {\\n        return p.blanks[0].sig.sigDate > 0;\\n    }\\n\\n    function established(Page storage p) public view returns (bool)\\n    {\\n        // return p.blanks[0].sig.flag;\\n        return counterOfBlanks(p) > 0 \\n            && counterOfBlanks(p) == counterOfSigs(p);\\n    }\\n\\n    function counterOfBlanks(Page storage p) public view returns(uint16) {\\n        return p.blanks[0].sig.para;\\n    }\\n\\n    function counterOfSigs(Page storage p) public view returns(uint16) {\\n        return p.blanks[0].sig.arg;\\n    }\\n\\n    function getCirculateDate(Page storage p) public view returns(uint48) {\\n        return p.blanks[0].sig.sigDate;\\n    }\\n\\n    function getSigningDays(Page storage p) public view returns(uint16) {\\n        return p.blanks[0].sig.seq;\\n    }\\n\\n    function getClosingDays(Page storage p) public view returns(uint16) {\\n        return p.blanks[0].sig.attr;\\n    }\\n\\n    function getSigDeadline(Page storage p) public view returns(uint48) {\\n        return p.blanks[0].sig.sigDate + uint48(p.blanks[0].sig.seq) * 86400; \\n    }\\n\\n    function getClosingDeadline(Page storage p) public view returns(uint48) {\\n        return p.blanks[0].sig.sigDate + uint48(p.blanks[0].sig.attr) * 86400; \\n    }\\n\\n    function isSigner(Page storage p, uint256 acct) \\n        public view returns (bool) \\n    {\\n        return p.blanks[acct].sig.signer > 0;\\n    }\\n\\n    function sigOfParty(Page storage p, uint256 acct) public view\\n        returns (\\n            uint256[] memory seqOfDeals, \\n            Signature memory sig,\\n            bytes32 sigHash\\n        ) \\n    {\\n        seqOfDeals = p.blanks[acct].seqOfDeals.values();\\n        sig = p.blanks[acct].sig;\\n        sigHash = p.blanks[acct].sigHash;\\n    }\\n\\n    function sigsOfPage(Page storage p) public view\\n        returns (\\n            Signature[] memory sigsOfBuyer, \\n            Signature[]memory sigsOfSeller\\n        )\\n    {\\n        sigsOfBuyer = sigsOfSide(p, p.buyers);\\n        sigsOfSeller = sigsOfSide(p, p.sellers);\\n    }\\n\\n    function sigsOfSide(Page storage p, EnumerableSet.UintSet storage partiesOfSide) \\n        public view\\n        returns (Signature[] memory)\\n    {\\n        uint256[] memory parties = partiesOfSide.values();\\n        uint256 len = parties.length;\\n\\n        Signature[] memory sigs = new Signature[](len);\\n\\n        while (len > 0) {\\n            sigs[len-1] = p.blanks[parties[len-1]].sig;\\n            len--;\\n        }\\n\\n        return sigs;\\n    }\\n\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/lib/EnumerableSet.sol\": {\r\n        \"EnumerableSet\": \"0xc4f24b69792ff96f0316fab2d7df198af8033930\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[]", "ContractName": "SigsRepo", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}