{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"base64-sol/base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BrawlerBearzRenderer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"base64-sol/base64.sol\\\";\\nimport {IBrawlerBearzRenderer} from \\\"./interfaces/IBrawlerBearzRenderer.sol\\\";\\nimport {IBrawlerBearzDynamicItems} from \\\"./interfaces/IBrawlerBearzDynamicItems.sol\\\";\\nimport {IBrawlerBearzErrors} from \\\"./interfaces/IBrawlerBearzErrors.sol\\\";\\nimport {IBrawlerBearzConsumables} from \\\"./interfaces/IBrawlerBearzConsumables.sol\\\";\\nimport {Genes} from \\\"./Genes.sol\\\";\\n\\n/*******************************************************************************\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|(@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|,|@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&@@@@@@@@@@@|,*|&@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%,**%@@@@@@@@%|******%&@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&##*****|||**,(%%%%%**|%@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@***,#%%%%**#&@@@@@#**,|@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@*,(@@@@@@@@@@**,(&@@@@#**%@@@@@@||(%@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@%|,****&@((@&***&@@@@@@%||||||||#%&@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@&%#*****||||||**#%&@%%||||||||#@&%#(@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@&**,(&@@@@@%|||||*##&&&&##|||||(%@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@**,%@@@@@@@(|*|#%@@@@@@@@#||#%%@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@#||||#@@@@||*|%@@@@@@@@&|||%%&@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@#,,,,,,*|**||%|||||||###&@@@@@@@#|||#%@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@&#||*|||||%%%@%%%#|||%@@@@@@@@&(|(%&@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@&&%%(||||@@@@@@&|||||(%&((||(#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@%%(||||||||||#%#(|||||%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@&%#######%%@@**||(#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%##%%&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n********************************************************************************/\\n\\n/**************************************************\\n * @title BrawlerBearzRenderer\\n * @author @scottybmitch\\n **************************************************/\\n\\ncontract BrawlerBearzRenderer is\\n    IBrawlerBearzRenderer,\\n    IBrawlerBearzErrors,\\n    Initializable,\\n    ReentrancyGuardUpgradeable,\\n    AccessControlUpgradeable\\n{\\n    using StringsUpgradeable for uint256;\\n    using Genes for uint256;\\n\\n    bytes32 constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n\\n    uint256 constant STR_BASIS = 100;\\n    uint256 constant END_BASIS = 100;\\n    uint256 constant INT_BASIS = 100;\\n    uint256 constant LCK_BASIS = 10;\\n    uint256 constant XP_BASIS = 2000;\\n\\n    /// @notice Base URI for assets\\n    string public baseURI;\\n\\n    /// @notice Animation URI for assets\\n    string public animationURI;\\n\\n    /// @notice parent contract\\n    IERC721Upgradeable public parentContract;\\n\\n    /// @notice Vendor contract\\n    IBrawlerBearzDynamicItems public vendorContract;\\n\\n    /// @notice Consumables contract\\n    IBrawlerBearzConsumables public consumableContract;\\n\\n    // ========================================\\n    // Modifiers\\n    // ========================================\\n\\n    modifier isTokenOwner(uint256 tokenId) {\\n        if (parentContract.ownerOf(tokenId) != _msgSender()) {\\n            revert InvalidOwner();\\n        }\\n        _;\\n    }\\n\\n    modifier isItemTokenOwner(uint256 itemTokenId) {\\n        if (vendorContract.balanceOf(_msgSender(), itemTokenId) == 0) {\\n            revert InvalidOwner();\\n        }\\n        _;\\n    }\\n\\n    function initialize(\\n        string memory _baseURI,\\n        string memory _animationURI\\n    ) public initializer {\\n        __AccessControl_init();\\n        __ReentrancyGuard_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _grantRole(OWNER_ROLE, _msgSender());\\n\\n        baseURI = _baseURI;\\n        animationURI = _animationURI;\\n    }\\n\\n    function toJSONProperty(\\n        string memory key,\\n        string memory value\\n    ) public pure returns (string memory) {\\n        return string(abi.encodePacked('\\\"', key, '\\\" : \\\"', value, '\\\"'));\\n    }\\n\\n    function toJSONNumberAttribute(\\n        string memory key,\\n        string memory value\\n    ) public pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{ \\\"trait_type\\\":\\\"',\\n                    key,\\n                    '\\\", \\\"value\\\": \\\"',\\n                    value,\\n                    '\\\", \\\"display_type\\\": \\\"number\\\"',\\n                    \\\"}\\\"\\n                )\\n            );\\n    }\\n\\n    function toJSONAttribute(\\n        string memory key,\\n        string memory value\\n    ) public pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{ \\\"trait_type\\\":\\\"',\\n                    key,\\n                    '\\\", \\\"value\\\": \\\"',\\n                    value,\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    function toJSONAttributeList(\\n        string[] memory attributes\\n    ) internal pure returns (string memory) {\\n        bytes memory attributeListBytes = \\\"[\\\";\\n        for (uint256 i = 0; i < attributes.length; i++) {\\n            attributeListBytes = abi.encodePacked(\\n                attributeListBytes,\\n                attributes[i],\\n                i != attributes.length - 1 ? \\\",\\\" : \\\"]\\\"\\n            );\\n        }\\n        return string(attributeListBytes);\\n    }\\n\\n    function gaussianTrait(\\n        uint256 seed,\\n        uint256 numSampling,\\n        uint256 samplingBits\\n    ) internal pure returns (uint256 trait) {\\n        uint256 samplingMask = (1 << samplingBits) - 1;\\n        unchecked {\\n            for (uint256 i = 0; i < numSampling; i++) {\\n                trait += (seed >> (i * samplingBits)) & samplingMask;\\n            }\\n        }\\n        return trait;\\n    }\\n\\n    function factionIdToName(\\n        uint256 factionId\\n    ) internal pure returns (string memory) {\\n        if (factionId == 1) {\\n            return \\\"IRONBEARZ\\\";\\n        } else if (factionId == 2) {\\n            return \\\"GEOSCAPEZ\\\";\\n        } else if (factionId == 3) {\\n            return \\\"PAWPUNKZ\\\";\\n        } else if (factionId == 4) {\\n            return \\\"TECHHEADZ\\\";\\n        } else {\\n            return \\\"NOMAD\\\";\\n        }\\n    }\\n\\n    function getHiddenProperties(\\n        uint256 tokenId\\n    ) internal view returns (Bear memory) {\\n        Traits memory traits;\\n        CustomMetadata memory dynamic;\\n        return\\n            Bear({\\n                name: string(\\n                    abi.encodePacked(\\n                        \\\"Brawler #\\\",\\n                        StringsUpgradeable.toString(tokenId)\\n                    )\\n                ),\\n                description: \\\"Fight or die. This is the life of the brawlers...\\\",\\n                dna: \\\"hidden\\\",\\n                renderingDna: \\\"hidden\\\",\\n                traits: traits,\\n                dynamic: dynamic\\n            });\\n    }\\n\\n    function createRenderingDna(\\n        uint256 chromosome,\\n        CustomMetadata memory md\\n    ) internal view returns (uint256) {\\n        uint256 renderingChromosomes = 0;\\n\\n        // Background\\n        renderingChromosomes <<= 16;\\n        renderingChromosomes |= Genes.getBackground(chromosome);\\n\\n        // Skin\\n        renderingChromosomes <<= 16;\\n        renderingChromosomes |= Genes.getSkin(chromosome);\\n\\n        // Head\\n        renderingChromosomes <<= 16;\\n        renderingChromosomes |= Genes.getHead(chromosome);\\n\\n        // Eyes\\n        renderingChromosomes <<= 16;\\n        renderingChromosomes |= Genes.getEyes(chromosome);\\n\\n        // Mouth\\n        renderingChromosomes <<= 16;\\n        renderingChromosomes |= Genes.getMouth(chromosome);\\n\\n        // Outfit\\n        renderingChromosomes <<= 16;\\n        renderingChromosomes |= Genes.getOutfit(chromosome);\\n\\n        // Set dynamic background\\n        renderingChromosomes <<= 16;\\n        renderingChromosomes |= md.background > 0 ? md.background : 0;\\n\\n        // Set dynamic weapon\\n        renderingChromosomes <<= 16;\\n        renderingChromosomes |= md.weapon > 0 ? md.weapon : 0;\\n\\n        // Set dynamic armor\\n        renderingChromosomes <<= 16;\\n        renderingChromosomes |= md.armor > 0 ? md.armor : 0;\\n\\n        // Set dynamic face armor\\n        renderingChromosomes <<= 16;\\n        renderingChromosomes |= md.faceArmor > 0 ? md.faceArmor : 0;\\n\\n        // Set dynamic eyewear\\n        renderingChromosomes <<= 16;\\n        renderingChromosomes |= md.eyewear > 0 ? md.eyewear : 0;\\n\\n        // Set dynamic misc\\n        renderingChromosomes <<= 16;\\n        renderingChromosomes |= md.misc > 0 ? md.misc : 0;\\n\\n        // Set dynamic head\\n        renderingChromosomes <<= 16;\\n        renderingChromosomes |= md.head > 0 ? md.head : 0;\\n\\n        return renderingChromosomes;\\n    }\\n\\n    function getProperties(\\n        uint256 tokenId,\\n        uint256 seed,\\n        CustomMetadata memory md\\n    ) internal view returns (Bear memory) {\\n        uint256 chromosome = Genes.seedToChromosome(seed);\\n\\n        Traits memory traits;\\n        CustomMetadata memory dynamic;\\n\\n        // Faction\\n        traits.faction = factionIdToName(md.faction);\\n        dynamic.faction = md.faction;\\n\\n        // Evolving\\n        traits.level = 1 + (md.xp > 0 ? sqrt(md.xp / XP_BASIS) : 0);\\n        traits.locked = md.isUnlocked ? \\\"FALSE\\\" : \\\"TRUE\\\";\\n\\n        traits.strength =\\n            traits.level *\\n            (STR_BASIS +\\n                gaussianTrait(\\n                    (\\n                        uint256(\\n                            keccak256(abi.encode(seed, keccak256(\\\"strength\\\")))\\n                        )\\n                    ),\\n                    5,\\n                    5\\n                ));\\n\\n        traits.endurance =\\n            traits.level *\\n            (END_BASIS +\\n                gaussianTrait(\\n                    (\\n                        uint256(\\n                            keccak256(abi.encode(seed, keccak256(\\\"endurance\\\")))\\n                        )\\n                    ),\\n                    5,\\n                    5\\n                ));\\n\\n        traits.intelligence = (INT_BASIS +\\n            gaussianTrait(\\n                (\\n                    uint256(\\n                        keccak256(abi.encode(seed, keccak256(\\\"intelligence\\\")))\\n                    )\\n                ),\\n                5,\\n                5\\n            ));\\n\\n        traits.luck =\\n            (LCK_BASIS +\\n                gaussianTrait(\\n                    (uint256(keccak256(abi.encode(seed, keccak256(\\\"luck\\\"))))),\\n                    3,\\n                    3\\n                )) %\\n            100;\\n\\n        traits.xp = md.xp;\\n\\n        // Base traits\\n        traits.skin = Genes.getSkinValue(chromosome);\\n        traits.head = Genes.getHeadValue(chromosome);\\n        traits.eyes = Genes.getEyesValue(chromosome);\\n        traits.outfit = Genes.getOutfitValue(chromosome);\\n        traits.mouth = Genes.getMouthValue(chromosome);\\n        traits.background = Genes.getBackgroundValue(chromosome);\\n\\n        // Dynamic traits\\n        dynamic.background = 0; // Has default + dynamic background\\n\\n        traits.weapon = \\\"NONE\\\";\\n        dynamic.weapon = 0;\\n\\n        traits.armor = \\\"NONE\\\";\\n        dynamic.armor = 0;\\n\\n        traits.faceArmor = \\\"NONE\\\";\\n        dynamic.faceArmor = 0;\\n\\n        traits.eyewear = \\\"NONE\\\";\\n        dynamic.eyewear = 0;\\n\\n        traits.misc = \\\"NONE\\\";\\n        dynamic.misc = 0;\\n\\n        // Set dynamic background\\n        if (md.background > 0) {\\n            traits.background = vendorContract.getItemName(md.background);\\n            dynamic.background = md.background;\\n        }\\n\\n        // Set dynamic weapon\\n        if (md.weapon > 0) {\\n            traits.weapon = vendorContract.getItemName(md.weapon);\\n            dynamic.weapon = md.weapon;\\n        }\\n\\n        // Set dynamic armor\\n        if (md.armor > 0) {\\n            traits.armor = vendorContract.getItemName(md.armor);\\n            dynamic.armor = md.armor;\\n        }\\n\\n        // Set dynamic face armor\\n        if (md.faceArmor > 0) {\\n            traits.faceArmor = vendorContract.getItemName(md.faceArmor);\\n            dynamic.faceArmor = md.faceArmor;\\n        }\\n\\n        // Set dynamic eyewear\\n        if (md.eyewear > 0) {\\n            traits.eyewear = vendorContract.getItemName(md.eyewear);\\n            dynamic.eyewear = md.eyewear;\\n        }\\n\\n        // Set dynamic misc\\n        if (md.misc > 0) {\\n            traits.misc = vendorContract.getItemName(md.misc);\\n            dynamic.misc = md.misc;\\n        }\\n\\n        // Set dynamic head\\n        if (md.head > 0) {\\n            traits.head = vendorContract.getItemName(md.head);\\n            dynamic.head = md.head;\\n        }\\n\\n        return\\n            Bear({\\n                name: (bytes(md.name).length > 0)\\n                    ? md.name\\n                    : string(\\n                        abi.encodePacked(\\n                            \\\"Brawler #\\\",\\n                            StringsUpgradeable.toString(tokenId)\\n                        )\\n                    ),\\n                description: (bytes(md.lore).length > 0) ? md.lore : \\\"\\\",\\n                dna: StringsUpgradeable.toString(chromosome),\\n                renderingDna: StringsUpgradeable.toString(\\n                    createRenderingDna(chromosome, md)\\n                ),\\n                traits: traits,\\n                dynamic: dynamic\\n            });\\n    }\\n\\n    // ========================================\\n    // NFT display helpers\\n    // ========================================\\n\\n    /**\\n     * @notice Sets the base URI for the image asset\\n     * @param _baseURI A base uri\\n     */\\n    function setBaseURI(string memory _baseURI) external onlyRole(OWNER_ROLE) {\\n        baseURI = _baseURI;\\n    }\\n\\n    /**\\n     * @notice Sets the animation URI for the image asset\\n     * @param _animationURI A base uri\\n     */\\n    function setAnimationURI(\\n        string memory _animationURI\\n    ) external onlyRole(OWNER_ROLE) {\\n        animationURI = _animationURI;\\n    }\\n\\n    /**\\n     * @notice Returns a json list of dynamic properties\\n     * @param instance A bear instance\\n     */\\n    function toDynamicProperties(\\n        Bear memory instance\\n    ) internal view returns (string memory) {\\n        string[] memory dynamic = new string[](15);\\n\\n        dynamic[0] = toJSONAttribute(\\n            \\\"Background Id\\\",\\n            StringsUpgradeable.toString(instance.dynamic.background)\\n        );\\n\\n        dynamic[1] = toJSONAttribute(\\n            \\\"Background Name\\\",\\n            vendorContract.getItemName(instance.dynamic.background)\\n        );\\n\\n        dynamic[2] = toJSONAttribute(\\n            \\\"Weapon Id\\\",\\n            StringsUpgradeable.toString(instance.dynamic.weapon)\\n        );\\n\\n        dynamic[3] = toJSONAttribute(\\n            \\\"Weapon Name\\\",\\n            vendorContract.getItemName(instance.dynamic.weapon)\\n        );\\n\\n        dynamic[4] = toJSONAttribute(\\n            \\\"Face Armor Id\\\",\\n            StringsUpgradeable.toString(instance.dynamic.faceArmor)\\n        );\\n\\n        dynamic[5] = toJSONAttribute(\\n            \\\"Face Armor Name\\\",\\n            vendorContract.getItemName(instance.dynamic.faceArmor)\\n        );\\n\\n        dynamic[6] = toJSONAttribute(\\n            \\\"Armor Id\\\",\\n            StringsUpgradeable.toString(instance.dynamic.armor)\\n        );\\n\\n        dynamic[7] = toJSONAttribute(\\n            \\\"Armor Name\\\",\\n            vendorContract.getItemName(instance.dynamic.armor)\\n        );\\n\\n        dynamic[8] = toJSONAttribute(\\n            \\\"Eyewear Id\\\",\\n            StringsUpgradeable.toString(instance.dynamic.eyewear)\\n        );\\n\\n        dynamic[9] = toJSONAttribute(\\n            \\\"Eyewear Name\\\",\\n            vendorContract.getItemName(instance.dynamic.eyewear)\\n        );\\n\\n        dynamic[10] = toJSONAttribute(\\n            \\\"Misc Id\\\",\\n            StringsUpgradeable.toString(instance.dynamic.misc)\\n        );\\n\\n        dynamic[11] = toJSONAttribute(\\n            \\\"Misc Name\\\",\\n            vendorContract.getItemName(instance.dynamic.misc)\\n        );\\n\\n        dynamic[12] = toJSONAttribute(\\n            \\\"Faction Id\\\",\\n            StringsUpgradeable.toString(instance.dynamic.faction)\\n        );\\n\\n        dynamic[13] = toJSONAttribute(\\n            \\\"Head Id\\\",\\n            StringsUpgradeable.toString(instance.dynamic.head)\\n        );\\n\\n        dynamic[14] = toJSONAttribute(\\n            \\\"Head Name\\\",\\n            vendorContract.getItemName(instance.dynamic.head)\\n        );\\n\\n        return toJSONAttributeList(dynamic);\\n    }\\n\\n    /**\\n     * @notice Sets the bearz consumables contract\\n     * @dev only owner call this function\\n     * @param _consumableContract The new contract address\\n     */\\n    function setConsumableContract(\\n        address _consumableContract\\n    ) public onlyRole(OWNER_ROLE) {\\n        consumableContract = IBrawlerBearzConsumables(_consumableContract);\\n    }\\n\\n    /**\\n     * @notice Sets the bearz contract\\n     * @dev only owner call this function\\n     * @param _parentContractAddress The new contract address\\n     */\\n    function setParentContract(\\n        address _parentContractAddress\\n    ) public onlyRole(OWNER_ROLE) {\\n        parentContract = IERC721Upgradeable(_parentContractAddress);\\n    }\\n\\n    /**\\n     * @notice Sets the bearz vendor item contract\\n     * @dev only owner call this function\\n     * @param _vendorContractAddress The new contract address\\n     */\\n    function setVendorContract(\\n        address _vendorContractAddress\\n    ) public onlyRole(OWNER_ROLE) {\\n        vendorContract = IBrawlerBearzDynamicItems(_vendorContractAddress);\\n    }\\n\\n    /**\\n     * @notice Returns a json list of attribute properties\\n     * @param instance A bear instance\\n     */\\n    function toAttributesProperty(\\n        Bear memory instance\\n    ) internal pure returns (string memory) {\\n        string[] memory attributes = new string[](19);\\n\\n        attributes[0] = toJSONAttribute(\\\"Head\\\", instance.traits.head);\\n\\n        attributes[1] = toJSONAttribute(\\\"Skin\\\", instance.traits.skin);\\n\\n        attributes[2] = toJSONAttribute(\\\"Eyes\\\", instance.traits.eyes);\\n\\n        attributes[3] = toJSONAttribute(\\\"Outfit\\\", instance.traits.outfit);\\n\\n        attributes[4] = toJSONAttribute(\\\"Mouth\\\", instance.traits.mouth);\\n\\n        attributes[5] = toJSONAttribute(\\n            \\\"Background\\\",\\n            instance.traits.background\\n        );\\n\\n        attributes[6] = toJSONAttribute(\\\"Armor\\\", instance.traits.armor);\\n\\n        attributes[7] = toJSONAttribute(\\n            \\\"Face Armor\\\",\\n            instance.traits.faceArmor\\n        );\\n\\n        attributes[8] = toJSONAttribute(\\\"Eyewear\\\", instance.traits.eyewear);\\n\\n        attributes[9] = toJSONAttribute(\\\"Weapon\\\", instance.traits.weapon);\\n\\n        attributes[10] = toJSONAttribute(\\\"Miscellaneous\\\", instance.traits.misc);\\n\\n        attributes[11] = toJSONNumberAttribute(\\n            \\\"XP\\\",\\n            StringsUpgradeable.toString(instance.traits.xp)\\n        );\\n\\n        attributes[12] = toJSONNumberAttribute(\\n            \\\"Level\\\",\\n            StringsUpgradeable.toString(instance.traits.level)\\n        );\\n\\n        attributes[13] = toJSONNumberAttribute(\\n            \\\"Strength\\\",\\n            StringsUpgradeable.toString(instance.traits.strength)\\n        );\\n\\n        attributes[14] = toJSONNumberAttribute(\\n            \\\"Endurance\\\",\\n            StringsUpgradeable.toString(instance.traits.endurance)\\n        );\\n\\n        attributes[15] = toJSONNumberAttribute(\\n            \\\"Intelligence\\\",\\n            StringsUpgradeable.toString(instance.traits.intelligence)\\n        );\\n\\n        attributes[16] = toJSONNumberAttribute(\\n            \\\"Luck\\\",\\n            StringsUpgradeable.toString(instance.traits.luck)\\n        );\\n\\n        attributes[17] = toJSONAttribute(\\\"Is Locked\\\", instance.traits.locked);\\n\\n        attributes[18] = toJSONAttribute(\\\"Faction\\\", instance.traits.faction);\\n\\n        return toJSONAttributeList(attributes);\\n    }\\n\\n    /**\\n     * @notice Returns hidden base64 json metadata\\n     * @param _tokenId The bear token id\\n     */\\n    function hiddenURI(uint256 _tokenId) public view returns (string memory) {\\n        Bear memory instance = getHiddenProperties(_tokenId);\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(\\n                        bytes(\\n                            abi.encodePacked(\\n                                \\\"{\\\",\\n                                toJSONProperty(\\\"name\\\", instance.name),\\n                                \\\",\\\",\\n                                toJSONProperty(\\n                                    \\\"description\\\",\\n                                    instance.description\\n                                ),\\n                                \\\",\\\",\\n                                toJSONProperty(\\n                                    \\\"image\\\",\\n                                    string(\\n                                        abi.encodePacked(baseURI, instance.dna)\\n                                    )\\n                                ),\\n                                \\\",\\\",\\n                                toJSONProperty(\\n                                    \\\"animation_url\\\",\\n                                    string(\\n                                        abi.encodePacked(\\n                                            animationURI,\\n                                            instance.dna\\n                                        )\\n                                    )\\n                                ),\\n                                \\\",\\\",\\n                                toJSONProperty(\\n                                    \\\"external_url\\\",\\n                                    string(\\n                                        abi.encodePacked(\\n                                            animationURI,\\n                                            instance.dna\\n                                        )\\n                                    )\\n                                ),\\n                                \\\",\\\",\\n                                toJSONProperty(\\n                                    \\\"tokenId\\\",\\n                                    StringsUpgradeable.toString(_tokenId)\\n                                ),\\n                                \\\",\\\",\\n                                toJSONProperty(\\\"dna\\\", instance.dna),\\n                                \\\"}\\\"\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    /// @notice Returns the dna for a given token, seed, and metadata\\n    function baseDna(\\n        uint256 _tokenId,\\n        uint256 _seed,\\n        CustomMetadata memory _md\\n    ) public view returns (string memory) {\\n        Bear memory instance = getProperties(_tokenId, _seed, _md);\\n        return instance.dna;\\n    }\\n\\n    /// @notice Returns the dna for a given token, seed, and metadata\\n    function dna(\\n        uint256 _tokenId,\\n        uint256 _seed,\\n        CustomMetadata memory _md\\n    ) public view returns (string memory) {\\n        Bear memory instance = getProperties(_tokenId, _seed, _md);\\n        return instance.renderingDna;\\n    }\\n\\n    function standardProperties(\\n        uint256 tokenId,\\n        Bear memory instance\\n    ) public view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    toJSONProperty(\\\"name\\\", instance.name),\\n                    \\\",\\\",\\n                    toJSONProperty(\\\"description\\\", instance.description),\\n                    \\\",\\\",\\n                    toJSONProperty(\\n                        \\\"image\\\",\\n                        string(abi.encodePacked(baseURI, instance.renderingDna))\\n                    ),\\n                    \\\",\\\",\\n                    toJSONProperty(\\n                        \\\"animation_url\\\",\\n                        string(\\n                            abi.encodePacked(\\n                                animationURI,\\n                                StringsUpgradeable.toString(tokenId)\\n                            )\\n                        )\\n                    ),\\n                    \\\",\\\",\\n                    toJSONProperty(\\n                        \\\"external_url\\\",\\n                        string(\\n                            abi.encodePacked(\\n                                animationURI,\\n                                StringsUpgradeable.toString(tokenId)\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns a base64 json metadata\\n     * @param _tokenId The bear token id\\n     * @param _seed The generated seed\\n     * @param _md The custom metadata\\n     */\\n    function tokenURI(\\n        uint256 _tokenId,\\n        uint256 _seed,\\n        CustomMetadata memory _md\\n    ) public view returns (string memory) {\\n        Bear memory instance = getProperties(_tokenId, _seed, _md);\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(\\n                        bytes(\\n                            abi.encodePacked(\\n                                \\\"{\\\",\\n                                standardProperties(_tokenId, instance),\\n                                \\\",\\\",\\n                                abi.encodePacked(\\n                                    '\\\"attributes\\\": ',\\n                                    toAttributesProperty(instance)\\n                                ),\\n                                \\\",\\\",\\n                                abi.encodePacked(\\n                                    '\\\"consumables\\\": ',\\n                                    consumableContract.toConsumableProperties(\\n                                        _tokenId\\n                                    )\\n                                ),\\n                                \\\",\\\",\\n                                abi.encodePacked(\\n                                    '\\\"equipped\\\": ',\\n                                    toDynamicProperties(instance)\\n                                ),\\n                                \\\",\\\",\\n                                toJSONProperty(\\n                                    \\\"tokenId\\\",\\n                                    StringsUpgradeable.toString(_tokenId)\\n                                ),\\n                                \\\",\\\",\\n                                toJSONProperty(\\n                                    \\\"seed\\\",\\n                                    StringsUpgradeable.toString(_seed)\\n                                ),\\n                                \\\",\\\",\\n                                toJSONProperty(\\\"base\\\", instance.dna),\\n                                \\\",\\\",\\n                                toJSONProperty(\\\"dna\\\", instance.renderingDna),\\n                                \\\"}\\\"\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        } else z = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Genes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// GENERATED CODE DO NOT MODIFY!\\n\\n/*******************************************************************************\\n * Genes\\n * Developed By: @scottybmitch\\n * Each of those seedTo{Group} function select 4 bytes from the seed\\n * and use those selected bytes to pick a trait using the A.J. Walker\\n * algorithm O(1) complexity. The rarity and aliases are calculated off-chain.\\n *******************************************************************************/\\n\\nlibrary Genes {\\n    function getGene(uint256 chromosome, uint32 position)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        unchecked {\\n            uint32 shift = 8 * position;\\n            return (chromosome & (0xFF << shift)) >> shift;\\n        }\\n    }\\n\\n    function seedToBackground(uint256 seed) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 traitSeed = (seed >> 16) & 0xFFFF;\\n            uint256 trait = traitSeed % 14;\\n            if (\\n                traitSeed >> 8 <\\n                [\\n                    255,\\n                    122,\\n                    215,\\n                    133,\\n                    250,\\n                    130,\\n                    117,\\n                    107,\\n                    71,\\n                    235,\\n                    133,\\n                    120,\\n                    35,\\n                    17\\n                ][trait]\\n            ) return trait;\\n            return [0, 0, 0, 1, 3, 4, 5, 1, 3, 6, 9, 10, 6, 11][trait];\\n        }\\n    }\\n\\n    function getBackgroundValue(uint256 chromosome)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        uint256 gene = getBackground(chromosome);\\n\\n        if (gene == 0) {\\n            return \\\"Gray\\\";\\n        }\\n\\n        if (gene == 1) {\\n            return \\\"Moss\\\";\\n        }\\n\\n        if (gene == 2) {\\n            return \\\"Orange\\\";\\n        }\\n\\n        if (gene == 3) {\\n            return \\\"Red\\\";\\n        }\\n\\n        if (gene == 4) {\\n            return \\\"Green\\\";\\n        }\\n\\n        if (gene == 5) {\\n            return \\\"Blue\\\";\\n        }\\n\\n        if (gene == 6) {\\n            return \\\"Brown\\\";\\n        }\\n\\n        if (gene == 7) {\\n            return \\\"Smoke\\\";\\n        }\\n\\n        if (gene == 8) {\\n            return \\\"Red Smoke\\\";\\n        }\\n\\n        if (gene == 9) {\\n            return \\\"Maroon\\\";\\n        }\\n\\n        if (gene == 10) {\\n            return \\\"Purple\\\";\\n        }\\n\\n        if (gene == 11) {\\n            return \\\"Navy\\\";\\n        }\\n\\n        if (gene == 12) {\\n            return \\\"Graffiti\\\";\\n        }\\n\\n        if (gene == 13) {\\n            return \\\"Cyber Safari\\\";\\n        }\\n        return \\\"\\\";\\n    }\\n\\n    function getBackground(uint256 chromosome) internal pure returns (uint256) {\\n        return getGene(chromosome, 5);\\n    }\\n\\n    function seedToSkin(uint256 seed) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 traitSeed = (seed >> 32) & 0xFFFF;\\n            uint256 trait = traitSeed % 21;\\n            if (\\n                traitSeed >> 8 <\\n                [\\n                    34,\\n                    16,\\n                    69,\\n                    256,\\n                    94,\\n                    215,\\n                    131,\\n                    188,\\n                    162,\\n                    98,\\n                    188,\\n                    255,\\n                    212,\\n                    92,\\n                    212,\\n                    218,\\n                    75,\\n                    147,\\n                    53,\\n                    205,\\n                    173\\n                ][trait]\\n            ) return trait;\\n            return\\n                [\\n                    9,\\n                    13,\\n                    13,\\n                    0,\\n                    14,\\n                    14,\\n                    14,\\n                    14,\\n                    3,\\n                    8,\\n                    19,\\n                    19,\\n                    9,\\n                    12,\\n                    13,\\n                    14,\\n                    19,\\n                    20,\\n                    20,\\n                    15,\\n                    19\\n                ][trait];\\n        }\\n    }\\n\\n    function getSkinValue(uint256 chromosome)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        uint256 gene = getSkin(chromosome);\\n\\n        if (gene == 0) {\\n            return \\\"Plasma\\\";\\n        }\\n\\n        if (gene == 1) {\\n            return \\\"Sun Breaker\\\";\\n        }\\n\\n        if (gene == 2) {\\n            return \\\"Negative\\\";\\n        }\\n\\n        if (gene == 3) {\\n            return \\\"Mash\\\";\\n        }\\n\\n        if (gene == 4) {\\n            return \\\"Grey Tiger\\\";\\n        }\\n\\n        if (gene == 5) {\\n            return \\\"Polar Bear\\\";\\n        }\\n\\n        if (gene == 6) {\\n            return \\\"Tan Tiger\\\";\\n        }\\n\\n        if (gene == 7) {\\n            return \\\"Tiger\\\";\\n        }\\n\\n        if (gene == 8) {\\n            return \\\"Chocolate Striped\\\";\\n        }\\n\\n        if (gene == 9) {\\n            return \\\"Ripper\\\";\\n        }\\n\\n        if (gene == 10) {\\n            return \\\"Brown Panda\\\";\\n        }\\n\\n        if (gene == 11) {\\n            return \\\"Panda\\\";\\n        }\\n\\n        if (gene == 12) {\\n            return \\\"Brown\\\";\\n        }\\n\\n        if (gene == 13) {\\n            return \\\"Grey\\\";\\n        }\\n\\n        if (gene == 14) {\\n            return \\\"Tan\\\";\\n        }\\n\\n        if (gene == 15) {\\n            return \\\"Black Bear\\\";\\n        }\\n\\n        if (gene == 16) {\\n            return \\\"Toxic\\\";\\n        }\\n\\n        if (gene == 17) {\\n            return \\\"Green Chalk\\\";\\n        }\\n\\n        if (gene == 18) {\\n            return \\\"Negative Tiger\\\";\\n        }\\n\\n        if (gene == 19) {\\n            return \\\"Metal\\\";\\n        }\\n\\n        if (gene == 20) {\\n            return \\\"Orange\\\";\\n        }\\n        return \\\"\\\";\\n    }\\n\\n    function getSkin(uint256 chromosome) internal pure returns (uint256) {\\n        return getGene(chromosome, 4);\\n    }\\n\\n    function seedToHead(uint256 seed) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 traitSeed = (seed >> 48) & 0xFFFF;\\n            uint256 trait = traitSeed % 72;\\n            if (\\n                traitSeed >> 8 <\\n                [\\n                    196,\\n                    196,\\n                    18,\\n                    204,\\n                    130,\\n                    149,\\n                    138,\\n                    154,\\n                    201,\\n                    138,\\n                    206,\\n                    238,\\n                    188,\\n                    180,\\n                    167,\\n                    112,\\n                    122,\\n                    125,\\n                    156,\\n                    170,\\n                    78,\\n                    117,\\n                    183,\\n                    130,\\n                    183,\\n                    256,\\n                    156,\\n                    209,\\n                    143,\\n                    156,\\n                    159,\\n                    235,\\n                    209,\\n                    198,\\n                    235,\\n                    151,\\n                    143,\\n                    196,\\n                    222,\\n                    170,\\n                    23,\\n                    104,\\n                    130,\\n                    104,\\n                    130,\\n                    78,\\n                    26,\\n                    167,\\n                    189,\\n                    218,\\n                    91,\\n                    170,\\n                    225,\\n                    220,\\n                    239,\\n                    182,\\n                    243,\\n                    235,\\n                    177,\\n                    145,\\n                    31,\\n                    78,\\n                    130,\\n                    173,\\n                    209,\\n                    237,\\n                    252,\\n                    136,\\n                    250,\\n                    179,\\n                    220,\\n                    170\\n                ][trait]\\n            ) return trait;\\n            return\\n                [\\n                    33,\\n                    33,\\n                    33,\\n                    34,\\n                    35,\\n                    35,\\n                    35,\\n                    47,\\n                    47,\\n                    47,\\n                    47,\\n                    47,\\n                    48,\\n                    48,\\n                    48,\\n                    49,\\n                    52,\\n                    52,\\n                    52,\\n                    52,\\n                    52,\\n                    52,\\n                    52,\\n                    53,\\n                    53,\\n                    0,\\n                    53,\\n                    53,\\n                    53,\\n                    53,\\n                    53,\\n                    53,\\n                    53,\\n                    25,\\n                    33,\\n                    34,\\n                    54,\\n                    54,\\n                    54,\\n                    54,\\n                    54,\\n                    55,\\n                    55,\\n                    59,\\n                    63,\\n                    63,\\n                    64,\\n                    35,\\n                    47,\\n                    48,\\n                    65,\\n                    66,\\n                    49,\\n                    52,\\n                    53,\\n                    54,\\n                    55,\\n                    56,\\n                    57,\\n                    58,\\n                    67,\\n                    69,\\n                    70,\\n                    59,\\n                    63,\\n                    64,\\n                    65,\\n                    66,\\n                    67,\\n                    68,\\n                    69,\\n                    70\\n                ][trait];\\n        }\\n    }\\n\\n    function getHeadValue(uint256 chromosome)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        uint256 gene = getHead(chromosome);\\n\\n        if (gene == 0) {\\n            return \\\"Green Soda Hat\\\";\\n        }\\n\\n        if (gene == 1) {\\n            return \\\"Orange Soda Hat\\\";\\n        }\\n\\n        if (gene == 2) {\\n            return \\\"Golden Gladiator Helmet\\\";\\n        }\\n\\n        if (gene == 3) {\\n            return \\\"Gladiator Helmet\\\";\\n        }\\n\\n        if (gene == 4) {\\n            return \\\"Bone Head\\\";\\n        }\\n\\n        if (gene == 5) {\\n            return \\\"Holiday Beanie\\\";\\n        }\\n\\n        if (gene == 6) {\\n            return \\\"Pan\\\";\\n        }\\n\\n        if (gene == 7) {\\n            return \\\"Snow Trooper\\\";\\n        }\\n\\n        if (gene == 8) {\\n            return \\\"Bearlympics Headband\\\";\\n        }\\n\\n        if (gene == 9) {\\n            return \\\"Sea Cap\\\";\\n        }\\n\\n        if (gene == 10) {\\n            return \\\"Green Goggles\\\";\\n        }\\n\\n        if (gene == 11) {\\n            return \\\"Red Goggles\\\";\\n        }\\n\\n        if (gene == 12) {\\n            return \\\"Society Cap\\\";\\n        }\\n\\n        if (gene == 13) {\\n            return \\\"Fireman Hat\\\";\\n        }\\n\\n        if (gene == 14) {\\n            return \\\"Vendor Cap\\\";\\n        }\\n\\n        if (gene == 15) {\\n            return \\\"Banana\\\";\\n        }\\n\\n        if (gene == 16) {\\n            return \\\"Cake\\\";\\n        }\\n\\n        if (gene == 17) {\\n            return \\\"Rabbit Ears\\\";\\n        }\\n\\n        if (gene == 18) {\\n            return \\\"Party Hat\\\";\\n        }\\n\\n        if (gene == 19) {\\n            return \\\"Rice Hat\\\";\\n        }\\n\\n        if (gene == 20) {\\n            return \\\"None\\\";\\n        }\\n\\n        if (gene == 21) {\\n            return \\\"Alarm\\\";\\n        }\\n\\n        if (gene == 22) {\\n            return \\\"Karate Band\\\";\\n        }\\n\\n        if (gene == 23) {\\n            return \\\"Butchered\\\";\\n        }\\n\\n        if (gene == 24) {\\n            return \\\"Green Bear Rag\\\";\\n        }\\n\\n        if (gene == 25) {\\n            return \\\"Red Bear Rag\\\";\\n        }\\n\\n        if (gene == 26) {\\n            return \\\"Wizard Hat\\\";\\n        }\\n\\n        if (gene == 27) {\\n            return \\\"Ninja Headband\\\";\\n        }\\n\\n        if (gene == 28) {\\n            return \\\"Sombrero\\\";\\n        }\\n\\n        if (gene == 29) {\\n            return \\\"Blue Ice Cream\\\";\\n        }\\n\\n        if (gene == 30) {\\n            return \\\"Red Ice Cream\\\";\\n        }\\n\\n        if (gene == 31) {\\n            return \\\"Viking Helmet\\\";\\n        }\\n\\n        if (gene == 32) {\\n            return \\\"Snow Hat\\\";\\n        }\\n\\n        if (gene == 33) {\\n            return \\\"Green Bucket Hat\\\";\\n        }\\n\\n        if (gene == 34) {\\n            return \\\"Blue Bucket Hat\\\";\\n        }\\n\\n        if (gene == 35) {\\n            return \\\"Red Bucket Hat\\\";\\n        }\\n\\n        if (gene == 36) {\\n            return \\\"Chef Hat\\\";\\n        }\\n\\n        if (gene == 37) {\\n            return \\\"Bearz Police\\\";\\n        }\\n\\n        if (gene == 38) {\\n            return \\\"Cowboy Hat\\\";\\n        }\\n\\n        if (gene == 39) {\\n            return \\\"Straw Hat\\\";\\n        }\\n\\n        if (gene == 40) {\\n            return \\\"Kings Crown\\\";\\n        }\\n\\n        if (gene == 41) {\\n            return \\\"Halo\\\";\\n        }\\n\\n        if (gene == 42) {\\n            return \\\"Jester Hat\\\";\\n        }\\n\\n        if (gene == 43) {\\n            return \\\"Dark Piratez\\\";\\n        }\\n\\n        if (gene == 44) {\\n            return \\\"Santa Hat\\\";\\n        }\\n\\n        if (gene == 45) {\\n            return \\\"Cyber Rice hat\\\";\\n        }\\n\\n        if (gene == 46) {\\n            return \\\"Wulfz\\\";\\n        }\\n\\n        if (gene == 47) {\\n            return \\\"Two Toned Cap\\\";\\n        }\\n\\n        if (gene == 48) {\\n            return \\\"Black Cap\\\";\\n        }\\n\\n        if (gene == 49) {\\n            return \\\"Green Cap\\\";\\n        }\\n\\n        if (gene == 50) {\\n            return \\\"Trainer Cap\\\";\\n        }\\n\\n        if (gene == 51) {\\n            return \\\"Horn\\\";\\n        }\\n\\n        if (gene == 52) {\\n            return \\\"Green Punk Hair\\\";\\n        }\\n\\n        if (gene == 53) {\\n            return \\\"Blue Punk Hair\\\";\\n        }\\n\\n        if (gene == 54) {\\n            return \\\"Red Punk Hair\\\";\\n        }\\n\\n        if (gene == 55) {\\n            return \\\"Purple Punk Hair\\\";\\n        }\\n\\n        if (gene == 56) {\\n            return \\\"Grey Poof\\\";\\n        }\\n\\n        if (gene == 57) {\\n            return \\\"Blue Beanie\\\";\\n        }\\n\\n        if (gene == 58) {\\n            return \\\"Orange Beanie\\\";\\n        }\\n\\n        if (gene == 59) {\\n            return \\\"Red Beanie\\\";\\n        }\\n\\n        if (gene == 60) {\\n            return \\\"Green Flames\\\";\\n        }\\n\\n        if (gene == 61) {\\n            return \\\"Blue Flames\\\";\\n        }\\n\\n        if (gene == 62) {\\n            return \\\"Flames\\\";\\n        }\\n\\n        if (gene == 63) {\\n            return \\\"Grey Headphones\\\";\\n        }\\n\\n        if (gene == 64) {\\n            return \\\"Blue Headphones\\\";\\n        }\\n\\n        if (gene == 65) {\\n            return \\\"Red Headphones\\\";\\n        }\\n\\n        if (gene == 66) {\\n            return \\\"Black Snapback\\\";\\n        }\\n\\n        if (gene == 67) {\\n            return \\\"Green Snapback\\\";\\n        }\\n\\n        if (gene == 68) {\\n            return \\\"Blue Snapback\\\";\\n        }\\n\\n        if (gene == 69) {\\n            return \\\"Two Tones Snapback\\\";\\n        }\\n\\n        if (gene == 70) {\\n            return \\\"Red Snapback\\\";\\n        }\\n\\n        if (gene == 71) {\\n            return \\\"Vault Bear\\\";\\n        }\\n        return \\\"\\\";\\n    }\\n\\n    function getHead(uint256 chromosome) internal pure returns (uint256) {\\n        return getGene(chromosome, 3);\\n    }\\n\\n    function seedToEyes(uint256 seed) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 traitSeed = (seed >> 64) & 0xFFFF;\\n            uint256 trait = traitSeed % 13;\\n            if (\\n                traitSeed >> 8 <\\n                [255, 242, 241, 231, 197, 68, 166, 58, 124, 13, 58, 67, 74][\\n                    trait\\n                ]\\n            ) return trait;\\n            return [0, 0, 1, 2, 3, 4, 0, 1, 1, 3, 11, 5, 11][trait];\\n        }\\n    }\\n\\n    function getEyesValue(uint256 chromosome)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        uint256 gene = getEyes(chromosome);\\n\\n        if (gene == 0) {\\n            return \\\"Real Green\\\";\\n        }\\n\\n        if (gene == 1) {\\n            return \\\"Black\\\";\\n        }\\n\\n        if (gene == 2) {\\n            return \\\"Black Side Eye\\\";\\n        }\\n\\n        if (gene == 3) {\\n            return \\\"Real Black\\\";\\n        }\\n\\n        if (gene == 4) {\\n            return \\\"Real Blue\\\";\\n        }\\n\\n        if (gene == 5) {\\n            return \\\"Honey\\\";\\n        }\\n\\n        if (gene == 6) {\\n            return \\\"Ghost\\\";\\n        }\\n\\n        if (gene == 7) {\\n            return \\\"Snake\\\";\\n        }\\n\\n        if (gene == 8) {\\n            return \\\"Worried\\\";\\n        }\\n\\n        if (gene == 9) {\\n            return \\\"Cyber\\\";\\n        }\\n\\n        if (gene == 10) {\\n            return \\\"Lizard\\\";\\n        }\\n\\n        if (gene == 11) {\\n            return \\\"Brown\\\";\\n        }\\n\\n        if (gene == 12) {\\n            return \\\"Bloodshot\\\";\\n        }\\n        return \\\"\\\";\\n    }\\n\\n    function getEyes(uint256 chromosome) internal pure returns (uint256) {\\n        return getGene(chromosome, 2);\\n    }\\n\\n    function seedToMouth(uint256 seed) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 traitSeed = (seed >> 80) & 0xFFFF;\\n            uint256 trait = traitSeed % 11;\\n            if (\\n                traitSeed >> 8 <\\n                [255, 211, 42, 70, 254, 211, 138, 174, 197, 140, 14][trait]\\n            ) return trait;\\n            return [0, 0, 0, 6, 0, 6, 4, 6, 6, 6, 7][trait];\\n        }\\n    }\\n\\n    function getMouthValue(uint256 chromosome)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        uint256 gene = getMouth(chromosome);\\n\\n        if (gene == 0) {\\n            return \\\"Serious\\\";\\n        }\\n\\n        if (gene == 1) {\\n            return \\\"Tongue\\\";\\n        }\\n\\n        if (gene == 2) {\\n            return \\\"Ramen\\\";\\n        }\\n\\n        if (gene == 3) {\\n            return \\\"Lollipop\\\";\\n        }\\n\\n        if (gene == 4) {\\n            return \\\"Orge\\\";\\n        }\\n\\n        if (gene == 5) {\\n            return \\\"Tiger\\\";\\n        }\\n\\n        if (gene == 6) {\\n            return \\\"Smile\\\";\\n        }\\n\\n        if (gene == 7) {\\n            return \\\"Angry\\\";\\n        }\\n\\n        if (gene == 8) {\\n            return \\\"Worried\\\";\\n        }\\n\\n        if (gene == 9) {\\n            return \\\"Rage\\\";\\n        }\\n\\n        if (gene == 10) {\\n            return \\\"Bloody Fangs\\\";\\n        }\\n        return \\\"\\\";\\n    }\\n\\n    function getMouth(uint256 chromosome) internal pure returns (uint256) {\\n        return getGene(chromosome, 1);\\n    }\\n\\n    function seedToOutfit(uint256 seed) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 traitSeed = (seed >> 96) & 0xFFFF;\\n            uint256 trait = traitSeed % 75;\\n            if (\\n                traitSeed >> 8 <\\n                [\\n                    74,\\n                    24,\\n                    248,\\n                    198,\\n                    256,\\n                    124,\\n                    186,\\n                    149,\\n                    223,\\n                    111,\\n                    213,\\n                    171,\\n                    216,\\n                    153,\\n                    123,\\n                    80,\\n                    207,\\n                    152,\\n                    97,\\n                    151,\\n                    187,\\n                    192,\\n                    174,\\n                    24,\\n                    94,\\n                    248,\\n                    124,\\n                    223,\\n                    211,\\n                    223,\\n                    248,\\n                    248,\\n                    223,\\n                    186,\\n                    223,\\n                    124,\\n                    99,\\n                    233,\\n                    227,\\n                    192,\\n                    171,\\n                    136,\\n                    223,\\n                    174,\\n                    186,\\n                    198,\\n                    186,\\n                    174,\\n                    223,\\n                    198,\\n                    136,\\n                    144,\\n                    194,\\n                    141,\\n                    139,\\n                    198,\\n                    198,\\n                    198,\\n                    176,\\n                    196,\\n                    179,\\n                    250,\\n                    240,\\n                    197,\\n                    174,\\n                    249,\\n                    157,\\n                    248,\\n                    194,\\n                    226,\\n                    161,\\n                    213,\\n                    219,\\n                    129,\\n                    74\\n                ][trait]\\n            ) return trait;\\n            return\\n                [\\n                    15,\\n                    18,\\n                    18,\\n                    18,\\n                    0,\\n                    19,\\n                    19,\\n                    19,\\n                    19,\\n                    20,\\n                    4,\\n                    10,\\n                    20,\\n                    11,\\n                    13,\\n                    14,\\n                    15,\\n                    16,\\n                    17,\\n                    18,\\n                    19,\\n                    20,\\n                    21,\\n                    24,\\n                    22,\\n                    24,\\n                    25,\\n                    24,\\n                    24,\\n                    25,\\n                    25,\\n                    25,\\n                    25,\\n                    25,\\n                    25,\\n                    26,\\n                    26,\\n                    26,\\n                    37,\\n                    38,\\n                    37,\\n                    37,\\n                    37,\\n                    38,\\n                    39,\\n                    39,\\n                    39,\\n                    60,\\n                    60,\\n                    61,\\n                    63,\\n                    66,\\n                    69,\\n                    69,\\n                    70,\\n                    70,\\n                    70,\\n                    71,\\n                    71,\\n                    39,\\n                    59,\\n                    60,\\n                    61,\\n                    62,\\n                    72,\\n                    63,\\n                    65,\\n                    72,\\n                    72,\\n                    66,\\n                    69,\\n                    70,\\n                    71,\\n                    72,\\n                    73\\n                ][trait];\\n        }\\n    }\\n\\n    function getOutfitValue(uint256 chromosome)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        uint256 gene = getOutfit(chromosome);\\n\\n        if (gene == 0) {\\n            return \\\"Dark Space Suit\\\";\\n        }\\n\\n        if (gene == 1) {\\n            return \\\"Golden Space Suit\\\";\\n        }\\n\\n        if (gene == 2) {\\n            return \\\"Space Suit\\\";\\n        }\\n\\n        if (gene == 3) {\\n            return \\\"Rugged Jacket\\\";\\n        }\\n\\n        if (gene == 4) {\\n            return \\\"Multi Jacket\\\";\\n        }\\n\\n        if (gene == 5) {\\n            return \\\"Plated Suit\\\";\\n        }\\n\\n        if (gene == 6) {\\n            return \\\"T16 Jacket\\\";\\n        }\\n\\n        if (gene == 7) {\\n            return \\\"Sand Raider Armor\\\";\\n        }\\n\\n        if (gene == 8) {\\n            return \\\"Raider Armor\\\";\\n        }\\n\\n        if (gene == 9) {\\n            return \\\"Tuxedo\\\";\\n        }\\n\\n        if (gene == 10) {\\n            return \\\"Blue Don Jacket\\\";\\n        }\\n\\n        if (gene == 11) {\\n            return \\\"Green Don Jacket\\\";\\n        }\\n\\n        if (gene == 12) {\\n            return \\\"Purple Don Jacket\\\";\\n        }\\n\\n        if (gene == 13) {\\n            return \\\"Red Don Jacket\\\";\\n        }\\n\\n        if (gene == 14) {\\n            return \\\"Hunter Jacket\\\";\\n        }\\n\\n        if (gene == 15) {\\n            return \\\"Brawler Bearz Hoodie\\\";\\n        }\\n\\n        if (gene == 16) {\\n            return \\\"Quartz Paw Hoodie\\\";\\n        }\\n\\n        if (gene == 17) {\\n            return \\\"Cyan Paw Hoodie\\\";\\n        }\\n\\n        if (gene == 18) {\\n            return \\\"Blue Two Tone Hoodie\\\";\\n        }\\n\\n        if (gene == 19) {\\n            return \\\"Red Two Tone Hoodie\\\";\\n        }\\n\\n        if (gene == 20) {\\n            return \\\"Purple Two Tone Hoodie\\\";\\n        }\\n\\n        if (gene == 21) {\\n            return \\\"Orange Paw Hoodie\\\";\\n        }\\n\\n        if (gene == 22) {\\n            return \\\"Green Paw Hoodie\\\";\\n        }\\n\\n        if (gene == 23) {\\n            return \\\"MVHQ Hoodie\\\";\\n        }\\n\\n        if (gene == 24) {\\n            return \\\"Green Bearz Hoodie\\\";\\n        }\\n\\n        if (gene == 25) {\\n            return \\\"Red Bearz Hoodie\\\";\\n        }\\n\\n        if (gene == 26) {\\n            return \\\"Street Hoodie\\\";\\n        }\\n\\n        if (gene == 27) {\\n            return \\\"Ranger Trench Jacket\\\";\\n        }\\n\\n        if (gene == 28) {\\n            return \\\"Night Rider Jacket\\\";\\n        }\\n\\n        if (gene == 29) {\\n            return \\\"Blue Utility Jacket\\\";\\n        }\\n\\n        if (gene == 30) {\\n            return \\\"Orange Utility Jacket\\\";\\n        }\\n\\n        if (gene == 31) {\\n            return \\\"Red Utility Jacket\\\";\\n        }\\n\\n        if (gene == 32) {\\n            return \\\"Brown Neo Jacket\\\";\\n        }\\n\\n        if (gene == 33) {\\n            return \\\"Green Neo Jacet\\\";\\n        }\\n\\n        if (gene == 34) {\\n            return \\\"Forester Jacket\\\";\\n        }\\n\\n        if (gene == 35) {\\n            return \\\"Robe\\\";\\n        }\\n\\n        if (gene == 36) {\\n            return \\\"Champions Robe\\\";\\n        }\\n\\n        if (gene == 37) {\\n            return \\\"Red Flame Pullover\\\";\\n        }\\n\\n        if (gene == 38) {\\n            return \\\"Blue Flame Pullover\\\";\\n        }\\n\\n        if (gene == 39) {\\n            return \\\"Leather Jacket\\\";\\n        }\\n\\n        if (gene == 40) {\\n            return \\\"Chain\\\";\\n        }\\n\\n        if (gene == 41) {\\n            return \\\"Tech Suit\\\";\\n        }\\n\\n        if (gene == 42) {\\n            return \\\"Red 10 Plate Armor\\\";\\n        }\\n\\n        if (gene == 43) {\\n            return \\\"Blue 10 Plate Armor\\\";\\n        }\\n\\n        if (gene == 44) {\\n            return \\\"Orange 10 Plate Armor\\\";\\n        }\\n\\n        if (gene == 45) {\\n            return \\\"Green 9 Plate Armor\\\";\\n        }\\n\\n        if (gene == 46) {\\n            return \\\"Orange 9 Plate Armor\\\";\\n        }\\n\\n        if (gene == 47) {\\n            return \\\"Blue 9 Plate Armor\\\";\\n        }\\n\\n        if (gene == 48) {\\n            return \\\"Red 9 Plate Armor\\\";\\n        }\\n\\n        if (gene == 49) {\\n            return \\\"Forester Bandana\\\";\\n        }\\n\\n        if (gene == 50) {\\n            return \\\"Purple Striped Bandana\\\";\\n        }\\n\\n        if (gene == 51) {\\n            return \\\"Green Striped Bandana\\\";\\n        }\\n\\n        if (gene == 52) {\\n            return \\\"Green Bandana\\\";\\n        }\\n\\n        if (gene == 53) {\\n            return \\\"Blue Striped Bandana\\\";\\n        }\\n\\n        if (gene == 54) {\\n            return \\\"Red Striped Bandana\\\";\\n        }\\n\\n        if (gene == 55) {\\n            return \\\"Red Bandana\\\";\\n        }\\n\\n        if (gene == 56) {\\n            return \\\"Red Arm Bandana\\\";\\n        }\\n\\n        if (gene == 57) {\\n            return \\\"Blue Arm Bandana\\\";\\n        }\\n\\n        if (gene == 58) {\\n            return \\\"Black Arm Bandana\\\";\\n        }\\n\\n        if (gene == 59) {\\n            return \\\"Black Tee\\\";\\n        }\\n\\n        if (gene == 60) {\\n            return \\\"White Tee\\\";\\n        }\\n\\n        if (gene == 61) {\\n            return \\\"Two Toned Tee\\\";\\n        }\\n\\n        if (gene == 62) {\\n            return \\\"Two Tone Long Sleeve\\\";\\n        }\\n\\n        if (gene == 63) {\\n            return \\\"Bearz Long Sleeve\\\";\\n        }\\n\\n        if (gene == 64) {\\n            return \\\"Bearz Tee\\\";\\n        }\\n\\n        if (gene == 65) {\\n            return \\\"Graphic Tee\\\";\\n        }\\n\\n        if (gene == 66) {\\n            return \\\"Black Graphic Tee\\\";\\n        }\\n\\n        if (gene == 67) {\\n            return \\\"Dark Piratez Suit\\\";\\n        }\\n\\n        if (gene == 68) {\\n            return \\\"Green Arm Bandana\\\";\\n        }\\n\\n        if (gene == 69) {\\n            return \\\"Black Bearz Hoodie\\\";\\n        }\\n\\n        if (gene == 70) {\\n            return \\\"White Futura Jacket\\\";\\n        }\\n\\n        if (gene == 71) {\\n            return \\\"Orange Futura Jacket\\\";\\n        }\\n\\n        if (gene == 72) {\\n            return \\\"Red Futura Jacket\\\";\\n        }\\n\\n        if (gene == 73) {\\n            return \\\"Damaged Shirt\\\";\\n        }\\n\\n        if (gene == 74) {\\n            return \\\"None\\\";\\n        }\\n        return \\\"\\\";\\n    }\\n\\n    function getOutfit(uint256 chromosome) internal pure returns (uint256) {\\n        return getGene(chromosome, 0);\\n    }\\n\\n    function seedToChromosome(uint256 seed)\\n        internal\\n        pure\\n        returns (uint256 chromosome)\\n    {\\n        chromosome |= seedToBackground(seed);\\n        chromosome <<= 8;\\n\\n        chromosome |= seedToSkin(seed);\\n        chromosome <<= 8;\\n\\n        chromosome |= seedToHead(seed);\\n        chromosome <<= 8;\\n\\n        chromosome |= seedToEyes(seed);\\n        chromosome <<= 8;\\n\\n        chromosome |= seedToMouth(seed);\\n        chromosome <<= 8;\\n\\n        chromosome |= seedToOutfit(seed);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBrawlerBearzCommon.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBrawlerBearzCommon {\\n    struct CustomMetadata {\\n        string name;\\n        string lore;\\n        uint256 background;\\n        uint256 head;\\n        uint256 weapon;\\n        uint256 armor;\\n        uint256 faceArmor;\\n        uint256 eyewear;\\n        uint256 misc;\\n        uint256 xp;\\n        bool isUnlocked;\\n        uint256 faction;\\n    }\\n\\n    struct Traits {\\n        uint256 strength;\\n        uint256 endurance;\\n        uint256 intelligence;\\n        uint256 luck;\\n        uint256 xp;\\n        uint256 level;\\n        string skin;\\n        string head;\\n        string eyes;\\n        string outfit;\\n        string mouth;\\n        string background;\\n        string weapon;\\n        string armor;\\n        string eyewear;\\n        string faceArmor;\\n        string misc;\\n        string locked;\\n        string faction;\\n    }\\n\\n    struct Bear {\\n        string name;\\n        string description;\\n        string dna;\\n        string renderingDna;\\n        Traits traits;\\n        CustomMetadata dynamic;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBrawlerBearzConsumables.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBrawlerBearzConsumables {\\n    error NotConsumed();\\n    error InvalidOwner();\\n    error InvalidItemType();\\n\\n    struct Consumable {\\n        uint256 itemId;\\n        string name;\\n        string description;\\n        uint256 consumedAt;\\n    }\\n\\n    event Consumed(uint256 indexed tokenId, uint256 itemTokenId);\\n\\n    event Activated(uint256 indexed tokenId, uint256 itemTokenId);\\n\\n    event Deactivated(uint256 indexed tokenId, uint256 itemTokenId);\\n\\n    function setParentContract(address contractAddress) external;\\n\\n    function setVendorContract(address contractAddress) external;\\n\\n    function getConsumables(\\n        uint256 tokenId\\n    ) external view returns (bytes[] memory);\\n\\n    function consume(\\n        uint256 tokenId,\\n        uint256 itemTokenId,\\n        bool isEnabled\\n    ) external;\\n\\n    function activate(uint256 tokenId, uint256 itemTokenId) external;\\n\\n    function deactivate(uint256 tokenId, uint256 itemTokenId) external;\\n\\n    function isActiveConsumable(\\n        uint256 tokenId,\\n        uint256 itemTokenId\\n    ) external returns (bool);\\n\\n    function toConsumableProperties(\\n        uint256 tokenId\\n    ) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBrawlerBearzDynamicItems.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\n\\ninterface IBrawlerBearzDynamicItems is IERC1155Upgradeable {\\n    struct CustomMetadata {\\n        string typeOf;\\n        string name;\\n        uint256 xp; // Min XP required to equip\\n        string rarity; // LEGENDARY, SUPER_RARE, RARE, UNCOMMON, COMMON\\n        uint256 atk; // Correlated to Strength\\n        uint256 def; // Correlated to Endurance\\n        uint256 usageChance; // Duration\\n        string usageDuration; // Persistent / Consumable\\n        string description;\\n        uint256 intel; // Correlated to intelligence\\n        uint256 luck; // Correlated to luck\\n    }\\n\\n    function getMetadata(uint256 tokenId)\\n        external\\n        view\\n        returns (CustomMetadata memory);\\n\\n    function getMetadataBatch(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (CustomMetadata[] memory);\\n\\n    function getItemType(uint256 tokenId) external view returns (string memory);\\n\\n    function getItemName(uint256 tokenId) external view returns (string memory);\\n\\n    function getItemXPReq(uint256 tokenId) external view returns (uint256);\\n\\n    function setItemMetadata(\\n        uint256 tokenId,\\n        string calldata typeOf,\\n        string calldata name,\\n        uint256 xp\\n    ) external;\\n\\n    function setItemMetadataStruct(\\n        uint256 tokenId,\\n        CustomMetadata memory metadata\\n    ) external;\\n\\n    function shopDrop(address _toAddress, uint256 _amount) external;\\n\\n    function dropItems(address _toAddress, uint256[] calldata itemIds) external;\\n\\n    function burnItemForOwnerAddress(\\n        uint256 _typeId,\\n        uint256 _quantity,\\n        address _materialOwnerAddress\\n    ) external;\\n\\n    function burnItemsForOwnerAddress(\\n        uint256[] memory _typeIds,\\n        uint256[] memory _quantities,\\n        address _materialOwnerAddress\\n    ) external;\\n\\n    function mintItemToAddress(\\n        uint256 _typeId,\\n        uint256 _quantity,\\n        address _toAddress\\n    ) external;\\n\\n    function mintBatchItemsToAddress(\\n        uint256[] memory _typeIds,\\n        uint256[] memory _quantities,\\n        address _toAddress\\n    ) external;\\n\\n    function bulkSafeTransfer(\\n        uint256 _typeId,\\n        uint256 _quantityPerRecipient,\\n        address[] calldata recipients\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBrawlerBearzErrors.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBrawlerBearzErrors {\\n    error InvalidRecipient();\\n    error InvalidTokenIds();\\n    error InvalidOwner();\\n    error InvalidItemType();\\n    error InvalidString();\\n    error InvalidLength();\\n    error InvalidValue();\\n    error ItemRequiresMoreXP();\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBrawlerBearzRenderer.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IBrawlerBearzCommon} from \\\"./IBrawlerBearzCommon.sol\\\";\\n\\ninterface IBrawlerBearzRenderer is IBrawlerBearzCommon {\\n    function hiddenURI(uint256 _tokenId) external view returns (string memory);\\n\\n    function tokenURI(\\n        uint256 _tokenId,\\n        uint256 _seed,\\n        CustomMetadata memory _md\\n    ) external view returns (string memory);\\n\\n    function dna(\\n        uint256 _tokenId,\\n        uint256 _seed,\\n        CustomMetadata memory _md\\n    ) external view returns (string memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 500,\r\n      \"details\": {\r\n        \"yul\": false\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/Genes.sol\": {\r\n        \"Genes\": \"0x62654b94a9b0ad41ccb9e53c5ef40443564edd02\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"InvalidItemType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidString\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenIds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ItemRequiresMoreXP\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"animationURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seed\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lore\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"background\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"head\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weapon\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"armor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"faceArmor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eyewear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"misc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isUnlocked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"faction\",\"type\":\"uint256\"}],\"internalType\":\"struct IBrawlerBearzCommon.CustomMetadata\",\"name\":\"_md\",\"type\":\"tuple\"}],\"name\":\"baseDna\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"consumableContract\",\"outputs\":[{\"internalType\":\"contract IBrawlerBearzConsumables\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seed\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lore\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"background\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"head\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weapon\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"armor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"faceArmor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eyewear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"misc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isUnlocked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"faction\",\"type\":\"uint256\"}],\"internalType\":\"struct IBrawlerBearzCommon.CustomMetadata\",\"name\":\"_md\",\"type\":\"tuple\"}],\"name\":\"dna\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"hiddenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_animationURI\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parentContract\",\"outputs\":[{\"internalType\":\"contract IERC721Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_animationURI\",\"type\":\"string\"}],\"name\":\"setAnimationURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consumableContract\",\"type\":\"address\"}],\"name\":\"setConsumableContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_parentContractAddress\",\"type\":\"address\"}],\"name\":\"setParentContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vendorContractAddress\",\"type\":\"address\"}],\"name\":\"setVendorContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dna\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"renderingDna\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"strength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endurance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intelligence\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"luck\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"skin\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"head\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"eyes\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"outfit\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"mouth\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"background\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"weapon\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"armor\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"eyewear\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"faceArmor\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"misc\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"locked\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"faction\",\"type\":\"string\"}],\"internalType\":\"struct IBrawlerBearzCommon.Traits\",\"name\":\"traits\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lore\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"background\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"head\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weapon\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"armor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"faceArmor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eyewear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"misc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isUnlocked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"faction\",\"type\":\"uint256\"}],\"internalType\":\"struct IBrawlerBearzCommon.CustomMetadata\",\"name\":\"dynamic\",\"type\":\"tuple\"}],\"internalType\":\"struct IBrawlerBearzCommon.Bear\",\"name\":\"instance\",\"type\":\"tuple\"}],\"name\":\"standardProperties\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"toJSONAttribute\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"toJSONNumberAttribute\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"toJSONProperty\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seed\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lore\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"background\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"head\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weapon\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"armor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"faceArmor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eyewear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"misc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isUnlocked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"faction\",\"type\":\"uint256\"}],\"internalType\":\"struct IBrawlerBearzCommon.CustomMetadata\",\"name\":\"_md\",\"type\":\"tuple\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vendorContract\",\"outputs\":[{\"internalType\":\"contract IBrawlerBearzDynamicItems\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BrawlerBearzRenderer", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "500", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}