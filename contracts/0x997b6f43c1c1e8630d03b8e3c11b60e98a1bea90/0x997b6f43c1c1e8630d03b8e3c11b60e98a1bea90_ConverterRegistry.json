{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/converter/ConverterRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { IConverterRegistry } from \\\"./IConverterRegistry.sol\\\";\\nimport { ITokenConverter } from \\\"./ITokenConverter.sol\\\";\\n\\ncontract ConverterRegistry is Ownable, IConverterRegistry {\\n  /*************\\n   * Variables *\\n   *************/\\n\\n  /// @dev Mapping from pool type to the address of converter.\\n  mapping(uint256 => address) private converters;\\n\\n  /// @dev Mapping from tokenIn to tokenOut to routes.\\n  /// @dev See {ITokenConverter-convert} for the meaning.\\n  mapping(address => mapping(address => uint256[])) private routes;\\n\\n  /*************************\\n   * Public View Functions *\\n   *************************/\\n\\n  /// @inheritdoc IConverterRegistry\\n  function getRoutes(address src, address dst) external view override returns (uint256[] memory) {\\n    return routes[src][dst];\\n  }\\n\\n  /// @inheritdoc IConverterRegistry\\n  function getTokenPair(uint256 _route) external view override returns (address, address) {\\n    uint256 _poolType = _route & 255;\\n    return ITokenConverter(converters[_poolType]).getTokenPair(_route);\\n  }\\n\\n  /// @inheritdoc IConverterRegistry\\n  function getConverter(uint256 _poolType) external view override returns (address) {\\n    return converters[_poolType];\\n  }\\n\\n  /*******************************\\n   * Public Restricted Functions *\\n   *******************************/\\n\\n  /// @notice Register a converter or update the converter.\\n  ///\\n  /// @param _poolType The pool type to update.\\n  /// @param _newConverter The address of converter to update.\\n  function register(uint256 _poolType, address _newConverter) external onlyOwner {\\n    address _oldConverter = converters[_poolType];\\n    converters[_poolType] = _newConverter;\\n\\n    emit UpdateConverter(_poolType, _oldConverter, _newConverter);\\n  }\\n\\n  /// @notice Update the routes for converting from source token to destination token.\\n  ///\\n  /// @param _src The address of source token.\\n  /// @param _dst The address of destination token.\\n  /// @param _routes The list of route encodings.\\n  function updateRoute(\\n    address _src,\\n    address _dst,\\n    uint256[] memory _routes\\n  ) external onlyOwner {\\n    delete routes[_src][_dst];\\n\\n    routes[_src][_dst] = _routes;\\n\\n    emit UpdateRoute(_src, _dst, _routes);\\n  }\\n\\n  /// @notice Withdraw dust assets from a converter contract.\\n  /// @param _converter The address of converter contract.\\n  /// @param _token The address of token to withdraw.\\n  /// @param _recipient The address of token receiver.\\n  function withdrawFund(\\n    address _converter,\\n    address _token,\\n    address _recipient\\n  ) external onlyOwner {\\n    ITokenConverter(_converter).withdrawFund(_token, _recipient);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/converter/IConverterRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0 || ^0.8.0;\\n\\ninterface IConverterRegistry {\\n  /**********\\n   * Events *\\n   **********/\\n\\n  /// @notice Emitted when the converter route is updated.\\n  /// @param src The address of source token.\\n  /// @param dst The address of destination token.\\n  /// @param routes The list of route encodings.\\n  event UpdateRoute(address indexed src, address indexed dst, uint256[] routes);\\n\\n  /// @notice Emitted when the token converter is updated for some pool type.\\n  /// @param poolType The pool type updated.\\n  /// @param oldConverter The address of previous converter.\\n  /// @param newConverter The address of current converter.\\n  event UpdateConverter(uint256 indexed poolType, address indexed oldConverter, address indexed newConverter);\\n\\n  /*************************\\n   * Public View Functions *\\n   *************************/\\n\\n  /// @notice Return the routes used to convert source token to destination token.\\n  /// @param src The address of source token.\\n  /// @param dst The address of destination token.\\n  /// @return routes The list of route encodings.\\n  function getRoutes(address src, address dst) external view returns (uint256[] memory routes);\\n\\n  /// @notice Return the input token and output token for the route.\\n  /// @param route The encoding of the route.\\n  /// @return tokenIn The address of input token.\\n  /// @return tokenOut The address of output token.\\n  function getTokenPair(uint256 route) external view returns (address tokenIn, address tokenOut);\\n\\n  /// @notice Return the address of converter for a specific pool type.\\n  /// @param poolType The type of converter.\\n  /// @return converter The address of converter.\\n  function getConverter(uint256 poolType) external view returns (address converter);\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/converter/ITokenConverter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0 || ^0.8.0;\\n\\ninterface ITokenConverter {\\n  /*************************\\n   * Public View Functions *\\n   *************************/\\n\\n  /// @notice The address of Converter Registry.\\n  function registry() external view returns (address);\\n\\n  /// @notice Return the input token and output token for the route.\\n  /// @param route The encoding of the route.\\n  /// @return tokenIn The address of input token.\\n  /// @return tokenOut The address of output token.\\n  function getTokenPair(uint256 route) external view returns (address tokenIn, address tokenOut);\\n\\n  /// @notice Query the output token amount according to the encoding.\\n  ///\\n  /// @dev See the comments in `convert` for the meaning of encoding.\\n  ///\\n  /// @param encoding The encoding used to convert.\\n  /// @param amountIn The amount of input token.\\n  /// @param amountOut The amount of output token received.\\n  function queryConvert(uint256 encoding, uint256 amountIn) external returns (uint256 amountOut);\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @notice Convert input token to output token according to the encoding.\\n  /// Assuming that the input token is already in the contract.\\n  ///\\n  /// @dev encoding for single route\\n  /// |   8 bits  | 2 bits |  246 bits  |\\n  /// | pool_type | action | customized |\\n  ///\\n  /// + pool_type = 0: UniswapV2, only action = 0\\n  ///   customized = |   160 bits   | 24 bits |     1 bit    | 1 bit | ... |\\n  ///                | pool address | fee_num | zero_for_one | twamm | ... |\\n  /// + pool_type = 1: UniswapV3, only action = 0\\n  ///   customized = |   160 bits   | 24 bits |     1 bit    | ... |\\n  ///                | pool address | fee_num | zero_for_one | ... |\\n  /// + pool_type = 2: BalancerV1, only action = 0\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  | ... |\\n  ///                | pool address | tokens | index in | index out | ... |\\n  /// + pool_type = 3: BalancerV2, only action = 0\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  | ... |\\n  ///                | pool address | tokens | index in | index out | ... |\\n  /// + pool_type = 4: CurvePlainPool or CurveFactoryPlainPool\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  |  1 bit  | ... |\\n  ///                | pool address | tokens | index in | index out | use_eth | ... |\\n  /// + pool_type = 5: CurveAPool\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  |     1 bits     | ... |\\n  ///                | pool address | tokens | index in | index out | use_underlying | ... |\\n  /// + pool_type = 6: CurveYPool\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  |     1 bits     | ... |\\n  ///                | pool address | tokens | index in | index out | use_underlying | ... |\\n  /// + pool_type = 7: CurveMetaPool or CurveFactoryMetaPool\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  | ... |\\n  ///                | pool address | tokens | index in | index out | ... |\\n  /// + pool_type = 8: CurveCryptoPool or CurveFactoryCryptoPool\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  |  1 bit  | ... |\\n  ///                | pool address | tokens | index in | index out | use_eth | ... |\\n  /// + pool_type = 9: ERC4626, no action 0\\n  ///   customized = |   160 bits   | ... |\\n  ///                | pool address | ... |\\n  /// + pool_type = 10: Lido, no action 0\\n  ///   customized = |   160 bits   | ... |\\n  ///                | pool address | ... |\\n  ///\\n  /// Note: tokens + 1 is the number of tokens of the pool\\n  ///\\n  /// + action = 0: swap\\n  /// + action = 1: add liquidity / wrap / stake\\n  /// + action = 2: remove liquidity / unwrap / unstake\\n  ///\\n  /// @param encoding The encoding used to convert.\\n  /// @param amountIn The amount of input token.\\n  /// @param recipient The address of token receiver.\\n  /// @return amountOut The amount of output token received.\\n  function convert(\\n    uint256 encoding,\\n    uint256 amountIn,\\n    address recipient\\n  ) external payable returns (uint256 amountOut);\\n\\n  /// @notice Withdraw dust assets in this contract.\\n  /// @param token The address of token to withdraw.\\n  /// @param recipient The address of token receiver.\\n  function withdrawFund(address token, address recipient) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolType\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldConverter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newConverter\",\"type\":\"address\"}],\"name\":\"UpdateConverter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"routes\",\"type\":\"uint256[]\"}],\"name\":\"UpdateRoute\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolType\",\"type\":\"uint256\"}],\"name\":\"getConverter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"}],\"name\":\"getRoutes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_route\",\"type\":\"uint256\"}],\"name\":\"getTokenPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newConverter\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dst\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_routes\",\"type\":\"uint256[]\"}],\"name\":\"updateRoute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_converter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdrawFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ConverterRegistry", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}