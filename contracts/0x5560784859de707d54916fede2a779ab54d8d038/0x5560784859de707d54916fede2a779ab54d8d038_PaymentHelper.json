{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/PaymentHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"openzeppelin-contracts/token/ERC20/IERC20.sol\\\";\\nimport {IPaymentSplitter} from \\\"./IPaymentSplitter.sol\\\";\\n\\nstruct TokenPayment {\\n    address token;\\n    uint256 amount;\\n}\\n\\ninterface ICollectionPaymentReader {\\n    function paymentSplitter() external view returns (IPaymentSplitter);\\n    function paymentSplitterRoyalties() external view returns (IPaymentSplitter);\\n}\\n\\n/**\\n * @notice Helper functions for claiming payments.\\n * @dev This is intentionally agnostic from Alba and should be independently replaceable\\n * for another solution later if needed.\\n */\\ncontract PaymentHelper {\\n    event PaymentsClaimed(address indexed collection, address user);\\n\\n    /**\\n     * @notice Returns the payment splitters for a collection.\\n     */\\n    function splittersForCollection(address collection) internal view returns (IPaymentSplitter, IPaymentSplitter) {\\n        IPaymentSplitter paymentSplitter = ICollectionPaymentReader(collection).paymentSplitter();\\n        IPaymentSplitter paymentSplitterRoyalties = ICollectionPaymentReader(collection).paymentSplitterRoyalties();\\n\\n        return (paymentSplitter, paymentSplitterRoyalties);\\n    }\\n\\n    /**\\n     * @notice Returns the amount of ETH that can be claimed by the caller for a collection.\\n     * @return (primaryEth, secondaryEth) amounts.\\n     */\\n    function availableETH(address collection) public view returns (uint256, uint256) {\\n        (IPaymentSplitter paymentSplitter, IPaymentSplitter paymentSplitterRoyalties) =\\n            splittersForCollection(collection);\\n\\n        uint256 available = paymentSplitter.releasable(msg.sender);\\n        uint256 availableRoyalties = 0;\\n        if (address(paymentSplitterRoyalties) != address(0)) {\\n            availableRoyalties = paymentSplitterRoyalties.releasable(msg.sender);\\n        }\\n        return (available, availableRoyalties);\\n    }\\n\\n    /**\\n     * @notice Returns the amount of payments that can be claimed by the user.\\n     * @dev The uses msg.sender so can be called by the artist or by Alba.\\n     */\\n    function availableERC20(address collection, address[] calldata primaryTokens, address[] calldata secondaryTokens)\\n        public\\n        view\\n        returns (TokenPayment[] memory, TokenPayment[] memory)\\n    {\\n        TokenPayment[] memory primaryAmounts = new TokenPayment[](primaryTokens.length);\\n        TokenPayment[] memory secondaryAmounts = new TokenPayment[](secondaryTokens.length);\\n\\n        if (primaryTokens.length == 0 && secondaryTokens.length == 0) {\\n            return (primaryAmounts, secondaryAmounts);\\n        }\\n\\n        (IPaymentSplitter paymentSplitter, IPaymentSplitter paymentSplitterRoyalties) =\\n            splittersForCollection(collection);\\n\\n        for (uint256 i = 0; i < primaryTokens.length; i++) {\\n            primaryAmounts[i] =\\n                TokenPayment(primaryTokens[i], paymentSplitter.releasable(IERC20(primaryTokens[i]), msg.sender));\\n        }\\n\\n        for (uint256 i = 0; i < secondaryTokens.length; i++) {\\n            secondaryAmounts[i] = TokenPayment(\\n                secondaryTokens[i], paymentSplitterRoyalties.releasable(IERC20(secondaryTokens[i]), msg.sender)\\n            );\\n        }\\n\\n        return (primaryAmounts, secondaryAmounts);\\n    }\\n\\n    /**\\n     * @notice Convenience function to claim all payments for a collection.\\n     */\\n    function claimPayments(address collection, address[] calldata primaryTokens, address[] calldata secondaryTokens)\\n        external\\n    {\\n        _claimPayments(collection, primaryTokens, secondaryTokens);\\n    }\\n\\n    /**\\n     * @notice Convenience function to claim all payments for multiple collections.\\n     * @dev To reduce gas, don't pass token addresses if there is no available balance for that token.\\n     */\\n    function claimPaymentsBatch(\\n        address[] calldata collections,\\n        address[][] calldata primaryTokens,\\n        address[][] calldata secondaryTokens\\n    ) external {\\n        uint256 numCollections = collections.length;\\n        for (uint256 i = 0; i < numCollections; i++) {\\n            _claimPayments(collections[i], primaryTokens[i], secondaryTokens[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Convenience function to claim all payments for a collection.\\n     * @dev This can be used by both the artist and Alba to claim their payments.\\n     * When upgraded to 4.8.X, we can use the `releasable` function to check payments\\n     * for the specific caller rather than just checking the balance.\\n     * Note that we don't authz as that is done by the splitters directly.\\n     * TODO: We can make this more gas efficient by passing flags for which splitter to claim, and doing the\\n     * available calls off-chain.\\n     */\\n    function _claimPayments(address collection, address[] calldata primaryTokens, address[] calldata secondaryTokens)\\n        internal\\n    {\\n        (IPaymentSplitter paymentSplitter, IPaymentSplitter paymentSplitterRoyalties) =\\n            splittersForCollection(collection);\\n        bool claimed = false;\\n\\n        // Claim ETH payments.\\n        (uint256 ethPrimary, uint256 ethSecondary) = availableETH(collection);\\n        if (ethPrimary > 0) {\\n            paymentSplitter.release(payable(msg.sender));\\n            claimed = true;\\n        }\\n        if (ethSecondary > 0) {\\n            paymentSplitterRoyalties.release(payable(msg.sender));\\n            claimed = true;\\n        }\\n\\n        // Claim ERC20 payments if given.\\n        if (primaryTokens.length != 0 || secondaryTokens.length != 0) {\\n            (TokenPayment[] memory primaryTokenAmounts, TokenPayment[] memory secondaryTokenAmounts) =\\n                availableERC20(collection, primaryTokens, secondaryTokens);\\n\\n            uint256 numPrimaryTokens = primaryTokenAmounts.length;\\n            for (uint256 i = 0; i < numPrimaryTokens; i++) {\\n                if (primaryTokenAmounts[i].amount > 0) {\\n                    paymentSplitter.release(IERC20(primaryTokenAmounts[i].token), payable(msg.sender));\\n                    claimed = true;\\n                }\\n            }\\n\\n            uint256 numSecondaryTokens = secondaryTokenAmounts.length;\\n            for (uint256 i = 0; i < numSecondaryTokens; i++) {\\n                if (secondaryTokenAmounts[i].amount > 0) {\\n                    paymentSplitterRoyalties.release(IERC20(secondaryTokenAmounts[i].token), payable(msg.sender));\\n                    claimed = true;\\n                }\\n            }\\n        }\\n\\n        if (claimed) {\\n            emit PaymentsClaimed(collection, msg.sender);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/IPaymentSplitter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.13;\\n\\nimport {IERC20} from \\\"openzeppelin-contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IPaymentSplitter {\\n    function releasable(address account) external view returns (uint256);\\n    function releasable(IERC20 token, address account) external view returns (uint256);\\n\\n    function release(address payable account) external;\\n    function release(IERC20 token, address account) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"ethier/=lib/ethier/contracts/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"erc721a/=lib/ERC721A-Upgradeable/contracts/\",\r\n      \"ethfs/=lib/ethfs/packages/contracts/src/\",\r\n      \"scripty/=lib/scripty.sol/contracts/scripty/\",\r\n      \"ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\r\n      \"ERC721A/=lib/ERC721A/contracts/\",\r\n      \"openzeppelin/=lib/ethfs/packages/contracts/lib/openzeppelin-contracts/contracts/\",\r\n      \"scripty.sol/=lib/scripty.sol/contracts/\",\r\n      \"solady/=lib/ethfs/packages/contracts/lib/solady/src/\",\r\n      \"solmate/=lib/ethfs/packages/contracts/lib/solady/lib/solmate/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {\r\n      \"src/libraries/Pricing.sol\": {\r\n        \"AlbaCollectionPricing\": \"0x19bc0b68a262a0f56a812bd0cabe1466fc1ca875\"\r\n      },\r\n      \"src/libraries/Splitters.sol\": {\r\n        \"Splitters\": \"0xd47d5f3cb05d4fc80b8b8a828e0626bc3a02c44e\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"PaymentsClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"primaryTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"secondaryTokens\",\"type\":\"address[]\"}],\"name\":\"availableERC20\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenPayment[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenPayment[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"availableETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"primaryTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"secondaryTokens\",\"type\":\"address[]\"}],\"name\":\"claimPayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"collections\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"primaryTokens\",\"type\":\"address[][]\"},{\"internalType\":\"address[][]\",\"name\":\"secondaryTokens\",\"type\":\"address[][]\"}],\"name\":\"claimPaymentsBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PaymentHelper", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}