//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.4;


/// @title IInitialLiquidityVaultAction
interface IInitialLiquidityVaultAction1 {

    /// ####### only admin ##########


    function setStartTime(uint256 _startTime) external;

    /// @dev initialization function . Set claim information.
    /// @param _totalAllocatedAmount total allocated amount
    /// @param tosPrice tosPrice
    /// @param tokenPrice tokenPrice
    /// @param initSqrtPrice When a pool is created for the first time, pricing information is absolutely necessary when initializing it.
    /// @param _startTime After this time, the pool can be created.
    function initialize(
        uint256 _totalAllocatedAmount,
        uint256 tosPrice,
        uint256 tokenPrice,
        uint160 initSqrtPrice,
        uint256 _startTime
    ) external ;


    /// @dev Set the uniswapV3 contract address.
    /// @param poolfactory UniswapV3Factory address
    /// @param npm NonfungiblePositionManager address
    function setUniswapInfo(
        address poolfactory,
        address npm
        )
        external;


    /// @dev Set the token address and fee information of the pool you want to create.
    /// @param tos tos address
    /// @param _fee _fee ( 3000 )
    function setTokens(
            address tos,
            uint24 _fee
        )
        external;

    /// @dev create a pool.
    function setCreatePool() external ;

    /// @dev Configure pool settings for uniswapV3.
    function setPool() external ;


    /// @dev Initialize the pool of uniswapV3.
    /// @param inSqrtPriceX96 initial price inSqrtPriceX96
    function setPoolInitialize(uint160 inSqrtPriceX96) external;


    /// ####### anyone can use ##########


    /// @dev Pool address generated by toss and project tokens
    /// @param tokenA tokenA address
    /// @param tokenB tokenB address
    /// @param _fee fee
    /// @return pool pool address
    /// @return token0  token0 address
    /// @return token1  token1 address
    function computePoolAddress(address tokenA, address tokenB, uint24 _fee)
        external view returns (address pool, address token0, address token1);


    /// @dev Provide liquidity to uniswap V3 and receive LP tokens. Vault uses up all available project token
    function mint(uint256 tosAmount) external;

    /// @dev function to charge a fee
    function collect() external ;


    /// @dev get minimum tick
    function getMinTick() external view returns (int24);


    /// @dev get maximum tick
    function getMaxTick() external view returns (int24);


}