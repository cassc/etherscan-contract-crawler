{"SourceCode": "// This software is a subject to Ambisafe License Agreement.\r\n// No use or distribution is allowed without written permission from Ambisafe.\r\n// https://ambisafe.com/terms.pdf\r\n\r\n// File: contracts/AssetInterface.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\ncontract AssetInterface {\r\n    function _performTransferWithReference(\r\n        address _to,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    public returns(bool);\r\n\r\n    function _performTransferToICAPWithReference(\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    public returns(bool);\r\n\r\n    function _performApprove(address _spender, uint _value, address _sender)\r\n    public returns(bool);\r\n\r\n    function _performTransferFromWithReference(\r\n        address _from,\r\n        address _to,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    public returns(bool);\r\n\r\n    function _performTransferFromToICAPWithReference(\r\n        address _from,\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    public returns(bool);\r\n\r\n    function _performGeneric(bytes memory, address) public payable {\r\n        revert();\r\n    }\r\n}\r\n\r\n// File: contracts/ERC20Interface.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\ncontract ERC20Interface {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed from, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() public view returns(uint256 supply);\r\n    function balanceOf(address _owner) public view returns(uint256 balance);\r\n    // solhint-disable-next-line no-simple-event-func-name\r\n    function transfer(address _to, uint256 _value) public returns(bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success);\r\n    function approve(address _spender, uint256 _value) public returns(bool success);\r\n    function allowance(address _owner, address _spender) public view returns(uint256 remaining);\r\n\r\n    // function symbol() constant returns(string);\r\n    function decimals() public view returns(uint8);\r\n    // function name() constant returns(string);\r\n}\r\n\r\n// File: contracts/AssetProxyInterface.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\n\r\ncontract AssetProxyInterface is ERC20Interface {\r\n    function _forwardApprove(address _spender, uint _value, address _sender)\r\n    public returns(bool);\r\n\r\n    function _forwardTransferFromWithReference(\r\n        address _from,\r\n        address _to,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    public returns(bool);\r\n\r\n    function _forwardTransferFromToICAPWithReference(\r\n        address _from,\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    public returns(bool);\r\n\r\n    function recoverTokens(ERC20Interface _asset, address _receiver, uint _value)\r\n    public returns(bool);\r\n\r\n    function etoken2() external view returns(address); // To be replaced by the implicit getter;\r\n\r\n    // To be replaced by the implicit getter;\r\n    function etoken2Symbol() external view returns(bytes32);\r\n}\r\n\r\n// File: @orderbook/smart-contracts-common/contracts/Bytes32.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\ncontract Bytes32 {\r\n    function _bytes32(string memory _input) internal pure returns(bytes32 result) {\r\n        assembly {\r\n            result := mload(add(_input, 32))\r\n        }\r\n    }\r\n}\r\n\r\n// File: @orderbook/smart-contracts-common/contracts/ReturnData.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\ncontract ReturnData {\r\n    function _returnReturnData(bool _success) internal pure {\r\n        assembly {\r\n            let returndatastart := 0\r\n            returndatacopy(returndatastart, 0, returndatasize)\r\n            switch _success case 0 { revert(returndatastart, returndatasize) }\r\n                default { return(returndatastart, returndatasize) }\r\n        }\r\n    }\r\n\r\n    function _assemblyCall(address _destination, uint _value, bytes memory _data)\r\n    internal returns(bool success) {\r\n        assembly {\r\n            success := call(gas, _destination, _value, add(_data, 32), mload(_data), 0, 0)\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Asset.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title EToken2 Asset implementation contract.\r\n *\r\n * Basic asset implementation contract, without any additional logic.\r\n * Every other asset implementation contracts should derive from this one.\r\n * Receives calls from the proxy, and calls back immediately without arguments modification.\r\n *\r\n * Note: all the non constant functions return false instead of throwing in case if state change\r\n * didn't happen yet.\r\n */\r\ncontract Asset is AssetInterface, Bytes32, ReturnData {\r\n    // Assigned asset proxy contract, immutable.\r\n    AssetProxyInterface public proxy;\r\n\r\n    /**\r\n     * Only assigned proxy is allowed to call.\r\n     */\r\n    modifier onlyProxy() {\r\n        if (address(proxy) == msg.sender) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets asset proxy address.\r\n     *\r\n     * Can be set only once.\r\n     *\r\n     * @param _proxy asset proxy contract address.\r\n     *\r\n     * @return success.\r\n     * @dev function is final, and must not be overridden.\r\n     */\r\n    function init(AssetProxyInterface _proxy) public returns(bool) {\r\n        if (address(proxy) != address(0)) {\r\n            return false;\r\n        }\r\n        proxy = _proxy;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Passes execution into virtual function.\r\n     *\r\n     * Can only be called by assigned asset proxy.\r\n     *\r\n     * @return success.\r\n     * @dev function is final, and must not be overridden.\r\n     */\r\n    function _performTransferWithReference(\r\n        address _to,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    public onlyProxy() returns(bool) {\r\n        if (isICAP(_to)) {\r\n            return _transferToICAPWithReference(\r\n                bytes20(_to), _value, _reference, _sender);\r\n        }\r\n        return _transferWithReference(_to, _value, _reference, _sender);\r\n    }\r\n\r\n    /**\r\n     * Calls back without modifications.\r\n     *\r\n     * @return success.\r\n     * @dev function is virtual, and meant to be overridden.\r\n     */\r\n    function _transferWithReference(\r\n        address _to,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    internal returns(bool) {\r\n        return proxy._forwardTransferFromWithReference(\r\n            _sender, _to, _value, _reference, _sender);\r\n    }\r\n\r\n    /**\r\n     * Passes execution into virtual function.\r\n     *\r\n     * Can only be called by assigned asset proxy.\r\n     *\r\n     * @return success.\r\n     * @dev function is final, and must not be overridden.\r\n     */\r\n    function _performTransferToICAPWithReference(\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    public onlyProxy() returns(bool) {\r\n        return _transferToICAPWithReference(_icap, _value, _reference, _sender);\r\n    }\r\n\r\n    /**\r\n     * Calls back without modifications.\r\n     *\r\n     * @return success.\r\n     * @dev function is virtual, and meant to be overridden.\r\n     */\r\n    function _transferToICAPWithReference(\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    internal returns(bool) {\r\n        return proxy._forwardTransferFromToICAPWithReference(\r\n            _sender, _icap, _value, _reference, _sender);\r\n    }\r\n\r\n    /**\r\n     * Passes execution into virtual function.\r\n     *\r\n     * Can only be called by assigned asset proxy.\r\n     *\r\n     * @return success.\r\n     * @dev function is final, and must not be overridden.\r\n     */\r\n    function _performTransferFromWithReference(\r\n        address _from,\r\n        address _to,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    public onlyProxy() returns(bool) {\r\n        if (isICAP(_to)) {\r\n            return _transferFromToICAPWithReference(\r\n                _from, bytes20(_to), _value, _reference, _sender);\r\n        }\r\n        return _transferFromWithReference(_from, _to, _value, _reference, _sender);\r\n    }\r\n\r\n    /**\r\n     * Calls back without modifications.\r\n     *\r\n     * @return success.\r\n     * @dev function is virtual, and meant to be overridden.\r\n     */\r\n    function _transferFromWithReference(\r\n        address _from,\r\n        address _to,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    internal returns(bool) {\r\n        return proxy._forwardTransferFromWithReference(\r\n            _from, _to, _value, _reference, _sender);\r\n    }\r\n\r\n    /**\r\n     * Passes execution into virtual function.\r\n     *\r\n     * Can only be called by assigned asset proxy.\r\n     *\r\n     * @return success.\r\n     * @dev function is final, and must not be overridden.\r\n     */\r\n    function _performTransferFromToICAPWithReference(\r\n        address _from,\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    public onlyProxy() returns(bool) {\r\n        return _transferFromToICAPWithReference(\r\n            _from, _icap, _value, _reference, _sender);\r\n    }\r\n\r\n    /**\r\n     * Calls back without modifications.\r\n     *\r\n     * @return success.\r\n     * @dev function is virtual, and meant to be overridden.\r\n     */\r\n    function _transferFromToICAPWithReference(\r\n        address _from,\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    internal returns(bool) {\r\n        return proxy._forwardTransferFromToICAPWithReference(\r\n            _from, _icap, _value, _reference, _sender);\r\n    }\r\n\r\n    /**\r\n     * Passes execution into virtual function.\r\n     *\r\n     * Can only be called by assigned asset proxy.\r\n     *\r\n     * @return success.\r\n     * @dev function is final, and must not be overridden.\r\n     */\r\n    function _performApprove(address _spender, uint _value, address _sender)\r\n    public onlyProxy() returns(bool) {\r\n        return _approve(_spender, _value, _sender);\r\n    }\r\n\r\n    /**\r\n     * Calls back without modifications.\r\n     *\r\n     * @return success.\r\n     * @dev function is virtual, and meant to be overridden.\r\n     */\r\n    function _approve(address _spender, uint _value, address _sender)\r\n    internal returns(bool) {\r\n        return proxy._forwardApprove(_spender, _value, _sender);\r\n    }\r\n\r\n    /**\r\n     * Passes execution into virtual function.\r\n     *\r\n     * Can only be called by assigned asset proxy.\r\n     *\r\n     * @return bytes32 result.\r\n     * @dev function is final, and must not be overridden.\r\n     */\r\n    function _performGeneric(bytes memory _data, address _sender)\r\n    public payable onlyProxy() {\r\n        _generic(_data, msg.value, _sender);\r\n    }\r\n\r\n    modifier onlyMe() {\r\n        if (address(this) == msg.sender) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    // Most probably the following should never be redefined in child contracts.\r\n    address public genericSender;\r\n\r\n    function _generic(bytes memory _data, uint _value, address _msgSender) internal {\r\n        // Restrict reentrancy.\r\n        require(genericSender == address(0));\r\n        genericSender = _msgSender;\r\n        bool success = _assemblyCall(address(this), _value, _data);\r\n        delete genericSender;\r\n        _returnReturnData(success);\r\n    }\r\n\r\n    // Decsendants should use _sender() instead of msg.sender to properly process proxied calls.\r\n    function _sender() internal view returns(address) {\r\n        return address(this) == msg.sender ? genericSender : msg.sender;\r\n    }\r\n\r\n    // Interface functions to allow specifying ICAP addresses as strings.\r\n    function transferToICAP(string memory _icap, uint _value) public returns(bool) {\r\n        return transferToICAPWithReference(_icap, _value, '');\r\n    }\r\n\r\n    function transferToICAPWithReference(string memory _icap, uint _value, string memory _reference)\r\n    public returns(bool) {\r\n        return _transferToICAPWithReference(\r\n            _bytes32(_icap), _value, _reference, _sender());\r\n    }\r\n\r\n    function transferFromToICAP(address _from, string memory _icap, uint _value)\r\n    public returns(bool) {\r\n        return transferFromToICAPWithReference(_from, _icap, _value, '');\r\n    }\r\n\r\n    function transferFromToICAPWithReference(\r\n        address _from,\r\n        string memory _icap,\r\n        uint _value,\r\n        string memory _reference)\r\n    public returns(bool) {\r\n        return _transferFromToICAPWithReference(\r\n            _from, _bytes32(_icap), _value, _reference, _sender());\r\n    }\r\n\r\n    function isICAP(address _address) public pure returns(bool) {\r\n        bytes20 a = bytes20(_address);\r\n        if (a[0] != 'X' || a[1] != 'E') {\r\n            return false;\r\n        }\r\n        if (uint8(a[2]) < 48 || uint8(a[2]) > 57 || uint8(a[3]) < 48 || uint8(a[3]) > 57) {\r\n            return false;\r\n        }\r\n        for (uint i = 4; i < 20; i++) {\r\n            uint char = uint8(a[i]);\r\n            if (char < 48 || char > 90 || (char > 57 && char < 65)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/Ambi2Enabled.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\ncontract Ambi2 {\r\n    function claimFor(address _address, address _owner) public returns(bool);\r\n    function hasRole(address _from, bytes32 _role, address _to) public view returns(bool);\r\n    function isOwner(address _node, address _owner) public view returns(bool);\r\n}\r\n\r\n\r\ncontract Ambi2Enabled {\r\n    Ambi2 public ambi2;\r\n\r\n    modifier onlyRole(bytes32 _role) {\r\n        if (address(ambi2) != address(0) && ambi2.hasRole(address(this), _role, msg.sender)) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    // Perform only after claiming the node, or claim in the same tx.\r\n    function setupAmbi2(Ambi2 _ambi2) public returns(bool) {\r\n        if (address(ambi2) != address(0)) {\r\n            return false;\r\n        }\r\n\r\n        ambi2 = _ambi2;\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/Ambi2EnabledFull.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\n\r\ncontract Ambi2EnabledFull is Ambi2Enabled {\r\n    // Setup and claim atomically.\r\n    function setupAmbi2(Ambi2 _ambi2) public returns(bool) {\r\n        if (address(ambi2) != address(0)) {\r\n            return false;\r\n        }\r\n        if (!_ambi2.claimFor(address(this), msg.sender) &&\r\n            !_ambi2.isOwner(address(this), msg.sender)) {\r\n            return false;\r\n        }\r\n\r\n        ambi2 = _ambi2;\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/AssetWithAmbi.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\n\r\n\r\ncontract AssetWithAmbi is Asset, Ambi2EnabledFull {\r\n    modifier onlyRole(bytes32 _role) {\r\n        if (address(ambi2) != address(0) && (ambi2.hasRole(address(this), _role, _sender()))) {\r\n            _;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/AssetWithCompliance.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\n\r\ncontract ComplianceConfiguration {\r\n    function isTransferAllowed(address _from, address _to, uint _value) public view returns(bool);\r\n\r\n    function isTransferToICAPAllowed(\r\n        address _from,\r\n        bytes32 _icap,\r\n        uint _value)\r\n    public view returns(bool);\r\n\r\n    function processTransferResult(address _from, address _to, uint _value, bool _success) public;\r\n\r\n    function processTransferToICAPResult(\r\n        address _from,\r\n        bytes32 _icap,\r\n        uint _value,\r\n        bool _success)\r\n    public;\r\n}\r\n\r\n\r\n/**\r\n * @title EToken2 Asset with compliance configuration.\r\n * Note: all the non constant functions return false instead of throwing in case if state change\r\n * didn't happen yet.\r\n */\r\ncontract AssetWithCompliance is AssetWithAmbi {\r\n    ComplianceConfiguration public complianceConfiguration;\r\n    bool public revokeFromHolder;\r\n\r\n    event Error(bytes32 error);\r\n    event ComplianceConfigurationSet(address contractAddress);\r\n\r\n    function init(AssetProxyInterface) public returns(bool) {\r\n        // Override Asset.init();\r\n        return false;\r\n    }\r\n\r\n    function initAssetWithCompliance(AssetProxyInterface _proxy, bool _revokeFromHolder) public returns(bool) {\r\n        if (!super.init(_proxy)) {\r\n            return false;\r\n        }\r\n        revokeFromHolder = _revokeFromHolder;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Emits Error if verifications in complianceConfiguration contract is not valid\r\n     */\r\n    modifier isTransferAllowed(address _from, address _to, uint _value) {\r\n        if (address(complianceConfiguration) != address(0) &&\r\n        !complianceConfiguration.isTransferAllowed(_from, _to, _value)) {\r\n            emit Error('Transfer is not allowed');\r\n            return;\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Emits Error if verifications in complianceConfiguration contract is not valid\r\n     */\r\n    modifier isTransferToICAPAllowed(address _from, bytes32 _icap, uint _value) {\r\n        if (address(complianceConfiguration) != address(0)\r\n        && !complianceConfiguration.isTransferToICAPAllowed(_from, _icap, _value)) {\r\n            emit Error('Transfer is not allowed');\r\n            return;\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Sets instance of ComplianceConfiguration object\r\n     *\r\n     * Can only be called by caller with admin role.\r\n     *\r\n     * @param _complianceConfiguration instance of ComplianceConfiguration\r\n     * object that will be used for whitelisting verifications.\r\n     *\r\n     * @return success.\r\n     */\r\n    function setupComplianceConfiguration(ComplianceConfiguration _complianceConfiguration)\r\n    public onlyRole('admin') returns(bool) {\r\n        complianceConfiguration = _complianceConfiguration;\r\n        emit ComplianceConfigurationSet(address(_complianceConfiguration));\r\n        return true;\r\n    }\r\n\r\n    function processTransferResult(address _from, address _to, uint _value, bool _success)\r\n    internal returns(bool) {\r\n        if (address(complianceConfiguration) == address(0)) {\r\n            return _success;\r\n        }\r\n        complianceConfiguration.processTransferResult(_from, _to, _value, _success);\r\n        return _success;\r\n    }\r\n\r\n    function processTransferToICAPResult(address _from, bytes32 _icap, uint _value, bool _success)\r\n    internal returns(bool) {\r\n        if (address(complianceConfiguration) == address(0)) {\r\n            return _success;\r\n        }\r\n        complianceConfiguration.processTransferToICAPResult(_from, _icap, _value, _success);\r\n        return _success;\r\n    }\r\n\r\n    /**\r\n     * Transfers asset balance with compliance verification with adding specified comment.\r\n     *\r\n     * @param _to holder address to give to.\r\n     * @param _value amount to transfer.\r\n     * @param _reference transfer comment to be included in a EToken2's Transfer event.\r\n     *\r\n     * @return success.\r\n     */\r\n    function _transferWithReference(\r\n        address _to,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    internal isTransferAllowed(_sender, _to, _value) returns(bool) {\r\n        return processTransferResult(\r\n            _sender,\r\n            _to,\r\n            _value,\r\n            super._transferWithReference(_to, _value, _reference, _sender));\r\n    }\r\n\r\n    /**\r\n     * Transfers asset balance wwith compliance verification adding specified comment.\r\n     *\r\n     * @param _icap recipient ICAP to give to.\r\n     * @param _value amount to transfer.\r\n     * @param _reference transfer comment to be included in a EToken2's Transfer event.\r\n     *\r\n     * @return success.\r\n     */\r\n    function _transferToICAPWithReference(\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    internal isTransferToICAPAllowed(_sender, _icap, _value) returns(bool) {\r\n        return processTransferToICAPResult(\r\n            _sender,\r\n            _icap,\r\n            _value,\r\n            super._transferToICAPWithReference(_icap, _value, _reference, _sender));\r\n    }\r\n\r\n    /**\r\n     * Performs allowance transfer of asset balance with compliance verification\r\n     * between holders adding specified comment.\r\n     *\r\n     * @param _from holder address to take from.\r\n     * @param _to holder address to give to.\r\n     * @param _value amount to transfer.\r\n     * @param _reference transfer comment to be included in a EToken2's Transfer event.\r\n     *\r\n     * @return success.\r\n     */\r\n    function _transferFromWithReference(\r\n        address _from,\r\n        address _to,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    internal isTransferAllowed(_from, _to, _value) returns(bool) {\r\n        return processTransferResult(\r\n            _from,\r\n            _to,\r\n            _value,\r\n            super._transferFromWithReference(_from, _to, _value, _reference, _sender));\r\n    }\r\n\r\n    /**\r\n     * Performs allowance transfer of asset balance with compliance\r\n     * verification between holders adding specified comment.\r\n     * Resolves asset implementation contract for the caller\r\n     * and forwards there arguments along with\r\n     * the caller address.\r\n     *\r\n     * @param _from holder address to take from.\r\n     * @param _icap recipient ICAP address to give to.\r\n     * @param _value amount to transfer.\r\n     * @param _reference transfer comment to be included in a EToken2's Transfer event.\r\n     *\r\n     * @return success.\r\n     */\r\n    function _transferFromToICAPWithReference(\r\n        address _from,\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    internal isTransferToICAPAllowed(_from, _icap, _value) returns(bool) {\r\n        return processTransferToICAPResult(\r\n            _from,\r\n            _icap,\r\n            _value,\r\n            super._transferFromToICAPWithReference(_from, _icap, _value, _reference, _sender));\r\n    }\r\n\r\n    \r\n    function legalTransferFrom(address _from, address _to, uint _value, string calldata _reference)\r\n        external onlyRole('legal') returns(bool)\r\n    {\r\n        if (!revokeFromHolder) {\r\n            emit Error('Revoke from is not allowed');\r\n            return false;\r\n        }\r\n\r\n        return processTransferResult(\r\n            _from,\r\n            _to,\r\n            _value,\r\n            super._transferFromWithReference(_from, _to, _value, _reference, _from));\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"genericSender\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_complianceConfiguration\",\"type\":\"address\"}],\"name\":\"setupComplianceConfiguration\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_performTransferWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isICAP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"legalTransferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"revokeFromHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_icap\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromToICAP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ambi2\",\"type\":\"address\"}],\"name\":\"setupAmbi2\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icap\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferToICAP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_icap\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"transferFromToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icap\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"transferToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"complianceConfiguration\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_performTransferToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_performTransferFromWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_performGeneric\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_performApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_performTransferFromToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ambi2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proxy\",\"type\":\"address\"},{\"name\":\"_revokeFromHolder\",\"type\":\"bool\"}],\"name\":\"initAssetWithCompliance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"error\",\"type\":\"bytes32\"}],\"name\":\"Error\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"ComplianceConfigurationSet\",\"type\":\"event\"}]", "ContractName": "AssetWithCompliance", "CompilerVersion": "v0.5.8+commit.23d335f2", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://fdf210e8cc52cb1d5f1cfe50e0abdb9dd7c1a417334e66e40c7d0c811939b02c"}