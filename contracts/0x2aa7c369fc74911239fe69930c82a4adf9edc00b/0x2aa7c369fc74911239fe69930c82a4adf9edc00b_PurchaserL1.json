{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IInputHandler.sol\": {\r\n      \"content\": \"// Copyright (C) 2023 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n//\\n// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity 0.8.21;\\n\\ninterface IInputHandler {\\n    /**\\n     * @notice Indicated update of the beneficiary address\\n     * @param oldBeneficiary Address of old beneficiary\\n     * @param newBeneficiary Address of new beneficiary\\n     */\\n    event NewBeneficiary(address oldBeneficiary, address newBeneficiary);\\n\\n    /**\\n     * @notice Sets new beneficiary address\\n     * @param newBeneficiary New beneficiary address\\n     * @dev Can be called only by the owner, emits NewBeneficiary event\\n     */\\n    function setBeneficiary(address newBeneficiary) external;\\n\\n    /**\\n     * @notice Returns current beneficiary address\\n     * @return currentBeneficiary Current beneficiary address\\n     */\\n    function getBeneficiary()\\n        external\\n        view\\n        returns (address currentBeneficiary);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILostTokensHandler.sol\": {\r\n      \"content\": \"// Copyright (C) 2023 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n//\\n// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity 0.8.21;\\n\\ninterface ILostTokensHandler {\\n    /**\\n     * @notice Returns tokens mistakenly sent to this contract\\n     * @param token Address of token\\n     * @param receiver Address that will receive tokens\\n     * @dev Can be called only by the owner\\n     */\\n    function returnLostTokens(address token, address payable receiver) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOwnable.sol\": {\r\n      \"content\": \"// Copyright (C) 2023 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n//\\n// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity 0.8.21;\\n\\ninterface IOwnable {\\n    /**\\n     * @notice Indicates update of the pending owner address\\n     * @param oldPendingOwner Old pending owner\\n     * @param newPendingOwner New pending owner\\n     */\\n    event PendingOwnerSet(\\n        address indexed oldPendingOwner,\\n        address indexed newPendingOwner\\n    );\\n\\n    /**\\n     * @notice Indicates update of the owner address\\n     * @param oldOwner Old contract's owner\\n     * @param newOwner New contract's owner\\n     */\\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\\n\\n    /**\\n     * @notice Sets pending owner to the `newPendingOwner` address\\n     * @param newPendingOwner Address of new pending owner\\n     * @dev The function is callable only by the owner, emits PendingOwnerSet event\\n     */\\n    function setPendingOwner(address newPendingOwner) external;\\n\\n    /**\\n     * @notice Sets owner to the pending owner address\\n     * @dev The function is callable only by the pending owner, emits OwnerSet event\\n     */\\n    function setOwner() external;\\n\\n    /**\\n     * @notice Returns current owner address\\n     * @return currentOwner Owner of the contract\\n     */\\n    function getOwner() external view returns (address currentOwner);\\n\\n    /**\\n     * @notice Returns current pending owner address\\n     * @return currentPendingOwner Pending owner of the contract\\n     */\\n    function getPendingOwner()\\n        external\\n        view\\n        returns (address currentPendingOwner);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPausableOwnable.sol\": {\r\n      \"content\": \"// Copyright (C) 2023 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n//\\n// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity 0.8.21;\\n\\ninterface IPausableOwnable {\\n    /**\\n     * @notice Pauses contract functionality\\n     * @dev Can be called only by the owner\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @notice Unpauses contract functionality\\n     * @dev Can be called only by the owner\\n     */\\n    function unpause() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPurchaser.sol\": {\r\n      \"content\": \"// Copyright (C) 2023 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n//\\n// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity 0.8.21;\\n\\ninterface IPurchaser {\\n    /**\\n     * @notice Indicates Premium purchase\\n     * @param tokenId DNA token ID Premium is purchased for\\n     * @param premiumType Type of premium subscription\\n     * @param hash The rest of parameters encoded and hashed\\n     * @param signature Signature verifying the validity of function arguments\\n     */\\n    event PurchasePremium(\\n        uint256 indexed tokenId,\\n        uint256 indexed premiumType,\\n        bytes32 indexed hash,\\n        bytes signature\\n    );\\n\\n    /**\\n     * @notice Indicates DNA mint and Premium purchase request\\n     * @param receiver Receiver of new DNA token\\n     * @param premiumType Type of premium subscription\\n     * @param hash The rest of parameters encoded and hashed\\n     * @param signature Signature verifying the validity of function arguments\\n     */\\n    event RequestPremium(\\n        address indexed receiver,\\n        uint256 indexed premiumType,\\n        bytes32 indexed hash,\\n        bytes signature\\n    );\\n\\n    /**\\n     * @notice Purchase Premium for certain DNA token\\n     * @param tokenId DNA token ID to purchase Premium for\\n     * @param premiumType Type of premium subscription\\n     * @param token Input token address (may be any ERC20 token, Ether, or zero)\\n     * @param amount Input token amount\\n     * @param deadline Deadline timestamp, ehich shouldn't be exceeded\\n     * @param signature Signature verifying the validity of function arguments\\n     * @dev Emits PurchasePremium event, can be paused, throws DeadlineExceeded error\\n     */\\n    function purchasePremium(\\n        uint256 tokenId,\\n        uint256 premiumType,\\n        address token,\\n        uint256 amount,\\n        uint256 deadline,\\n        bytes memory signature\\n    ) external payable;\\n\\n    /**\\n     * @notice Request DNA mint and Premium purchase for certain receiver\\n     * @param receiver Receiver of new DNA token\\n     * @param premiumType Type of premium subscription\\n     * @param token Input token address (may be any ERC20 token, Ether, or zero)\\n     * @param amount Input token amount\\n     * @param deadline Deadline timestamp, ehich shouldn't be exceeded\\n     * @param signature Signature verifying the validity of function arguments\\n     * @dev Emits RequestPremium event, can be paused, throws DeadlineExceeded error\\n     */\\n    function requestPremium(\\n        address receiver,\\n        uint256 premiumType,\\n        address token,\\n        uint256 amount,\\n        uint256 deadline,\\n        bytes memory signature\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPurchaserL1.sol\": {\r\n      \"content\": \"// Copyright (C) 2023 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n//\\n// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity 0.8.21;\\n\\nimport { IPurchaser } from \\\"./IPurchaser.sol\\\";\\nimport { IERC721Receiver } from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\ninterface IPurchaserL1 is IPurchaser, IERC721Receiver {\\n    /**\\n     * @notice Purchase Premium and mint DNA in the same transaction\\n     * @param receiver Address requesting the newly minted DNA and Premium purchase\\n     * @param premiumType Type of premium subscription\\n     * @param salt Salt generated by Premium request event\\n     * @param signature Signature verifying the validity of function arguments\\n     * @dev Can be called only by the owner, can be paused\\n     * @dev Throws ZeroSalt error\\n     */\\n    function mintAndPurchasePremium(\\n        address receiver,\\n        uint256 premiumType,\\n        bytes32 salt,\\n        bytes memory signature\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IZerionDNA.sol\": {\r\n      \"content\": \"// Copyright (C) 2023 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n//\\n// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity 0.8.21;\\n\\ninterface IZerionDNA {\\n    function mint() external;\\n\\n    function totalSupply() external returns (uint256 totalSupply);\\n}\\n\"\r\n    },\r\n    \"contracts/purchaser/Purchaser.sol\": {\r\n      \"content\": \"// Copyright (C) 2023 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n//\\n// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity 0.8.21;\\n\\nimport { PausableOwnable } from \\\"../shared/PausableOwnable.sol\\\";\\nimport { InputHandler } from \\\"../shared/InputHandler.sol\\\";\\nimport { LostTokensHandler } from \\\"../shared/LostTokensHandler.sol\\\";\\nimport { IPurchaser } from \\\"../interfaces/IPurchaser.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { DeadlineExceeded } from \\\"../shared/Errors.sol\\\";\\n\\n/**\\n * @notice Abstract contract with main logic of Premium purchases\\n */\\nabstract contract Purchaser is\\n    IPurchaser,\\n    InputHandler,\\n    LostTokensHandler,\\n    PausableOwnable,\\n    ReentrancyGuard\\n{\\n    /**\\n     * @inheritdoc IPurchaser\\n     */\\n    function purchasePremium(\\n        uint256 tokenId,\\n        uint256 premiumType,\\n        address token,\\n        uint256 amount,\\n        uint256 deadline,\\n        bytes memory signature\\n    ) external payable override nonReentrant whenNotPaused {\\n        verifyDeadline(deadline);\\n        handleInput(token, amount, msg.sender);\\n\\n        emitPurchasePremium({\\n            tokenId: tokenId,\\n            premiumType: premiumType,\\n            token: token,\\n            amount: amount,\\n            deadline: deadline,\\n            salt: bytes32(0),\\n            signature: signature\\n        });\\n    }\\n\\n    /**\\n     * @inheritdoc IPurchaser\\n     */\\n    function requestPremium(\\n        address receiver,\\n        uint256 premiumType,\\n        address token,\\n        uint256 amount,\\n        uint256 deadline,\\n        bytes memory signature\\n    ) external payable override nonReentrant whenNotPaused {\\n        verifyDeadline(deadline);\\n        handleInput(token, amount, msg.sender);\\n\\n        emitRequestPremium({\\n            receiver: receiver,\\n            premiumType: premiumType,\\n            token: token,\\n            amount: amount,\\n            deadline: deadline,\\n            signature: signature\\n        });\\n    }\\n\\n    /**\\n     * @dev Emits purchase Premium event\\n     */\\n    function emitPurchasePremium(\\n        uint256 tokenId,\\n        uint256 premiumType,\\n        address token,\\n        uint256 amount,\\n        uint256 deadline,\\n        bytes32 salt,\\n        bytes memory signature\\n    ) internal {\\n        emit PurchasePremium(\\n            tokenId,\\n            premiumType,\\n            keccak256(abi.encode(token, amount, deadline, salt)),\\n            signature\\n        );\\n    }\\n\\n    /**\\n     * @dev Emits request Premium event\\n     */\\n    function emitRequestPremium(\\n        address receiver,\\n        uint256 premiumType,\\n        address token,\\n        uint256 amount,\\n        uint256 deadline,\\n        bytes memory signature\\n    ) internal {\\n        emit RequestPremium(\\n            receiver,\\n            premiumType,\\n            keccak256(abi.encode(token, amount, deadline)),\\n            signature\\n        );\\n    }\\n\\n    /**\\n     * @dev Checks that `block.timestamp` does not exceed the deadline\\n     * @param deadline Deadline timestamp\\n     */\\n    function verifyDeadline(uint256 deadline) private view {\\n        // solhint-disable not-rely-on-time\\n        if (block.timestamp > deadline) {\\n            revert DeadlineExceeded(block.timestamp, deadline);\\n        }\\n        // solhint-enable not-rely-on-time\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/purchaser/PurchaserL1.sol\": {\r\n      \"content\": \"// Copyright (C) 2023 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n//\\n// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity 0.8.21;\\n\\nimport { Base } from \\\"../shared/Base.sol\\\";\\nimport { Purchaser } from \\\"./Purchaser.sol\\\";\\nimport { IPurchaserL1 } from \\\"../interfaces/IPurchaserL1.sol\\\";\\nimport { IZerionDNA } from \\\"../interfaces/IZerionDNA.sol\\\";\\nimport { ZeroSalt } from \\\"../shared/Errors.sol\\\";\\nimport { ERC721Holder } from \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\n\\n/**\\n * @notice Ethereum-only version of Purchaser, additionally supports relaying requested purchases\\n */\\ncontract PurchaserL1 is IPurchaserL1, Purchaser, ERC721Holder {\\n    /// Zerion DNA token address\\n    address private constant DNA = 0x932261f9Fc8DA46C4a22e31B45c4De60623848bF;\\n\\n    /**\\n     * @inheritdoc IPurchaserL1\\n     */\\n    function mintAndPurchasePremium(\\n        address receiver,\\n        uint256 premiumType,\\n        bytes32 salt,\\n        bytes memory signature\\n    ) external override onlyOwner nonReentrant whenNotPaused {\\n        if (salt == bytes32(0)) revert ZeroSalt();\\n\\n        uint256 tokenId = mintDNA(receiver);\\n\\n        emitPurchasePremium({\\n            tokenId: tokenId,\\n            premiumType: premiumType,\\n            token: address(0),\\n            amount: uint256(0),\\n            deadline: type(uint256).max,\\n            salt: salt,\\n            signature: signature\\n        });\\n    }\\n\\n    /**\\n     * @dev Mints DNA token and sends it to the receiver\\n     * @param receiver Receiver of newly minted DNA token\\n     * @return tokenId ID of newly minted DNA token\\n     */\\n    function mintDNA(address receiver) internal returns (uint256 tokenId) {\\n        tokenId = IZerionDNA(DNA).totalSupply();\\n\\n        IZerionDNA(DNA).mint();\\n\\n        Base.safeTransferFrom(DNA, address(this), receiver, tokenId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/shared/Base.sol\": {\r\n      \"content\": \"// Copyright (C) 2023 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n//\\n// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity 0.8.21;\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { TransferFromEther, InsufficientBalance, InsufficientAllowance, ZeroReceiver } from \\\"./Errors.sol\\\";\\n\\n/**\\n * @title Library unifying transfer, approval, and getting balance for ERC20 tokens and Ether\\n */\\nlibrary Base {\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /**\\n     * @notice Transfers tokens or Ether\\n     * @param token Address of the token or `ETH` in case of Ether transfer\\n     * @param receiver Address of the account that will receive funds\\n     * @param amount Amount to be transferred\\n     * @dev This function is compatible only with ERC20 tokens and Ether, not ERC721/ERC1155 tokens\\n     * @dev Reverts on zero `receiver` and insufficient balance, does nothing for zero amount\\n     * @dev Should not be used with zero token address\\n     */\\n    function transfer(\\n        address token,\\n        address receiver,\\n        uint256 amount\\n    ) internal {\\n        if (amount == uint256(0)) return;\\n        if (receiver == address(0)) revert ZeroReceiver();\\n\\n        uint256 currentBalance = getBalance(token);\\n        if (currentBalance < amount)\\n            revert InsufficientBalance(currentBalance, amount);\\n\\n        if (token == ETH) {\\n            Address.sendValue(payable(receiver), amount);\\n        } else {\\n            SafeERC20.safeTransfer(IERC20(token), receiver, amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfers tokens or Ether from sender to the receiver\\n     * @param token Address of the token or `ETH` in case of Ether transfer\\n     * @param receiver Address of the account that will send funds\\n     * @param receiver Address of the account that will receive funds\\n     * @param amount Amount to be transferred\\n     * @dev This function is compatible only with ERC20 tokens and Ether, not ERC721/ERC1155 tokens\\n     * @dev Reverts on zero `receiver` and insufficient balance/allowance, does nothing for zero amount\\n     * @dev Should not be used with zero token address\\n     * @dev It is unsafe to use this function with sender address different from `msg.sender`\\n     */\\n    function transferFrom(\\n        address token,\\n        address sender,\\n        address receiver,\\n        uint256 amount\\n    ) internal {\\n        if (amount == uint256(0)) return;\\n        if (receiver == address(0)) revert ZeroReceiver();\\n\\n        if (token == ETH) {\\n            revert TransferFromEther();\\n        } else {\\n            uint256 balance = getBalance(token, sender);\\n            if (balance < amount) revert InsufficientBalance(balance, amount);\\n\\n            uint256 currentAllowance = IERC20(token).allowance(\\n                sender,\\n                address(this)\\n            );\\n            if (currentAllowance < amount) {\\n                revert InsufficientAllowance(currentAllowance, amount);\\n            }\\n\\n            SafeERC20.safeTransferFrom(IERC20(token), sender, receiver, amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfers ERC721 tokens from sender to the receiver\\n     * @param token Address of ERC721 token\\n     * @param receiver Address of the account that will send ERC721 token\\n     * @param receiver Address of the account that will receive ERC721 token\\n     * @param tokenId TokenId to be transferred\\n     * @dev This function is compatible only with ERC20 tokens and Ether, not ERC721/ERC1155 tokens\\n     * @dev Reverts on zero `receiver` and insufficient balance/allowance, does nothing for zero amount\\n     * @dev Should not be used with zero token address\\n     * @dev It is unsafe to use this function with sender address different from `msg.sender`\\n     */\\n    function safeTransferFrom(\\n        address token,\\n        address sender,\\n        address receiver,\\n        uint256 tokenId\\n    ) internal {\\n        if (receiver == address(0)) revert ZeroReceiver();\\n\\n        address owner = getOwnerOf(token, tokenId);\\n        if (sender != owner) {\\n            revert InsufficientBalance(0, 1);\\n        }\\n\\n        if (sender != address(this)) {\\n            bool isApprovedForAll = IERC721(token).isApprovedForAll(\\n                sender,\\n                address(this)\\n            );\\n            if (!isApprovedForAll) {\\n                address operator = IERC721(token).getApproved(tokenId);\\n                if (operator != address(this))\\n                    revert InsufficientAllowance(0, 1);\\n            }\\n        }\\n\\n        IERC721(token).safeTransferFrom(sender, receiver, tokenId);\\n    }\\n\\n    /**\\n     * @notice Calculates the token balance of the given account\\n     * @param token Address of the token\\n     * @param tokenId TokenId of the token\\n     * @return owner Owner of the token with given tokenId\\n     * @dev Should not be used with zero token address\\n     */\\n    function getOwnerOf(\\n        address token,\\n        uint256 tokenId\\n    ) internal view returns (address owner) {\\n        return IERC721(token).ownerOf(tokenId);\\n    }\\n\\n    /**\\n     * @notice Calculates the token balance of the given account\\n     * @param token Address of the token\\n     * @param account Address of the account\\n     * @return balance The token balance of the given account\\n     * @dev Should not be used with zero token address\\n     */\\n    function getBalance(\\n        address token,\\n        address account\\n    ) internal view returns (uint256 balance) {\\n        if (token == ETH) return account.balance;\\n\\n        return IERC20(token).balanceOf(account);\\n    }\\n\\n    /**\\n     * @notice Calculates the token balance of `this` contract address\\n     * @param token Address of the token\\n     * @return balance The token balance of `this` contract address\\n     * @dev Returns `0` for zero token address in order to handle empty token case\\n     */\\n    function getBalance(address token) internal view returns (uint256 balance) {\\n        if (token == address(0)) return uint256(0);\\n\\n        return Base.getBalance(token, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/shared/Errors.sol\": {\r\n      \"content\": \"// Copyright (C) 2023 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n//\\n// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity 0.8.21;\\n\\n/**\\n * @notice Error thrown when block timestamp exceeds deadline\\n * @param blockTimestamp Current block timestamp\\n * @param deadline Deadline timestamp\\n */\\nerror DeadlineExceeded(uint256 blockTimestamp, uint256 deadline);\\n\\n/**\\n * @notice Error thrown when `mintAndPurchasePremium()` function is called with zero `salt` parameter\\n */\\nerror ZeroSalt();\\n\\n/**\\n * @notice Error thrown when `transfer()` or `transferFrom()` functions was called with zero `receiver` address\\n */\\nerror ZeroReceiver();\\n\\n/**\\n * @notice Error thrown when beneficiary address is set to zero\\n */\\nerror ZeroBeneficiary();\\n\\n/**\\n * @notice Error thrown when `transferFrom()` function is called with insufficient allowance\\n * @param currentAllowance Current allowance\\n * @param requiredAllowance Required allowance\\n */\\nerror InsufficientAllowance(\\n    uint256 currentAllowance,\\n    uint256 requiredAllowance\\n);\\n\\n/**\\n * @notice Error thrown when `transfer()` or `transferFrom()` function is called with insufficient allowance\\n * @param currentBalance Current balance\\n * @param requiredBalance Required balance\\n */\\nerror InsufficientBalance(uint256 currentBalance, uint256 requiredBalance);\\n\\n/**\\n * @notice Error thrown when `transferFrom()` function is called with ETH address instead ERC20 token\\n */\\nerror TransferFromEther();\\n\\n/**\\n * @notice Error thrown when `msg.sender` differs from the required one\\n * @param currentMsgSender Current `msg.sender`\\n * @param requiredMsgSender Required `msg.sender`\\n */\\nerror BadMsgSender(address currentMsgSender, address requiredMsgSender);\\n\"\r\n    },\r\n    \"contracts/shared/InputHandler.sol\": {\r\n      \"content\": \"// Copyright (C) 2023 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n//\\n// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity 0.8.21;\\n\\nimport { IInputHandler } from \\\"../interfaces/IInputHandler.sol\\\";\\nimport { Base } from \\\"./Base.sol\\\";\\nimport { Ownable } from \\\"./Ownable.sol\\\";\\nimport { ZeroBeneficiary } from \\\"./Errors.sol\\\";\\n\\nabstract contract InputHandler is IInputHandler, Ownable {\\n    address private constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    address private beneficiary;\\n\\n    /**\\n     * @inheritdoc IInputHandler\\n     */\\n    function setBeneficiary(\\n        address newBeneficiary\\n    ) external override onlyOwner {\\n        if (newBeneficiary == address(0)) revert ZeroBeneficiary();\\n        emit NewBeneficiary(beneficiary, newBeneficiary);\\n\\n        beneficiary = newBeneficiary;\\n    }\\n\\n    /**\\n     * @notice Returns current beneficiary address\\n     * @return currentBeneficiary New beneficiary address\\n     */\\n    function getBeneficiary()\\n        external\\n        view\\n        override\\n        returns (address currentBeneficiary)\\n    {\\n        return beneficiary;\\n    }\\n\\n    /**\\n     * @dev In ERC20 token case, transfers input token from the accound address to the beneficiary\\n     * @dev Checks `msg.value` and transfers it to beneficiary in Ether case\\n     * @dev Does nothing in zero input token address case\\n     * @param token Input token address (may be any ERC20 token, Ether, or zero)\\n     * @param amount Input token amount\\n     * @param account Address of the account to take tokens from\\n     */\\n    function handleInput(\\n        address token,\\n        uint256 amount,\\n        address account\\n    ) internal {\\n        if (token == address(0)) return;\\n\\n        if (token == ETH) return handleETHInput(amount);\\n\\n        handleTokenInput(token, amount, account);\\n    }\\n\\n    /**\\n     * @dev Transfers Ether amount to the beneficiary\\n     * @param amount Ether amount to be sent\\n     */\\n    function handleETHInput(uint256 amount) private {\\n        Base.transfer(ETH, beneficiary, amount);\\n    }\\n\\n    /**\\n     * @dev Transfers input token from the account address to the beneficiary\\n     * @param token Token to be taken from the account address\\n     * @param amount Input token amount to be taken from the account\\n     * @param account Address of the account to take tokens from\\n     */\\n    function handleTokenInput(\\n        address token,\\n        uint256 amount,\\n        address account\\n    ) private {\\n        Base.transferFrom(token, account, beneficiary, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/shared/LostTokensHandler.sol\": {\r\n      \"content\": \"// Copyright (C) 2023 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n//\\n// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity 0.8.21;\\n\\nimport { ILostTokensHandler } from \\\"../interfaces/ILostTokensHandler.sol\\\";\\n\\nimport { Base } from \\\"./Base.sol\\\";\\nimport { Ownable } from \\\"./Ownable.sol\\\";\\n\\n/**\\n * @title Abstract contract returning tokens lost on the contract\\n */\\nabstract contract LostTokensHandler is ILostTokensHandler, Ownable {\\n    /**\\n     * @inheritdoc ILostTokensHandler\\n     */\\n    function returnLostTokens(\\n        address token,\\n        address payable receiver\\n    ) external override onlyOwner {\\n        Base.transfer(token, receiver, Base.getBalance(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/shared/Ownable.sol\": {\r\n      \"content\": \"// Copyright (C) 2023 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n//\\n// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity 0.8.21;\\n\\nimport { IOwnable } from \\\"../interfaces/IOwnable.sol\\\";\\nimport { BadMsgSender } from \\\"./Errors.sol\\\";\\n\\n/**\\n * @title Abstract contract with basic Ownable functionality and two-step ownership transfer\\n */\\nabstract contract Ownable is IOwnable {\\n    address private pendingOwner;\\n    address private owner;\\n\\n    modifier onlyPendingOwner() {\\n        address currentMsgSender = msg.sender;\\n        if (currentMsgSender != pendingOwner)\\n            revert BadMsgSender(currentMsgSender, pendingOwner);\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        address currentMsgSender = msg.sender;\\n        if (currentMsgSender != owner)\\n            revert BadMsgSender(currentMsgSender, owner);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes owner variable with `msg.sender` address\\n     */\\n    constructor() {\\n        emit OwnerSet(address(0), msg.sender);\\n\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n     * @inheritdoc IOwnable\\n     */\\n    function setPendingOwner(\\n        address newPendingOwner\\n    ) external override onlyOwner {\\n        emit PendingOwnerSet(pendingOwner, newPendingOwner);\\n\\n        pendingOwner = newPendingOwner;\\n    }\\n\\n    /**\\n     * @inheritdoc IOwnable\\n     */\\n    function setOwner() external override onlyPendingOwner {\\n        emit OwnerSet(owner, msg.sender);\\n\\n        owner = msg.sender;\\n        delete pendingOwner;\\n    }\\n\\n    /**\\n     * @inheritdoc IOwnable\\n     */\\n    function getOwner() external view override returns (address currentOwner) {\\n        return owner;\\n    }\\n\\n    /**\\n     * @inheritdoc IOwnable\\n     */\\n    function getPendingOwner()\\n        external\\n        view\\n        override\\n        returns (address currentPendingOwner)\\n    {\\n        return pendingOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/shared/PausableOwnable.sol\": {\r\n      \"content\": \"// Copyright (C) 2023 Zerion Inc. <https://zerion.io>\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\\n//\\n// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity 0.8.21;\\n\\nimport { Ownable } from \\\"./Ownable.sol\\\";\\nimport { IPausableOwnable } from \\\"../interfaces/IPausableOwnable.sol\\\";\\nimport { Pausable } from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nabstract contract PausableOwnable is IPausableOwnable, Ownable, Pausable {\\n    /**\\n     * @inheritdoc IPausableOwnable\\n     */\\n    function pause() external override onlyOwner whenNotPaused {\\n        _pause();\\n    }\\n\\n    /**\\n     * @inheritdoc IPausableOwnable\\n     */\\n    function unpause() external override onlyOwner whenPaused {\\n        _unpause();\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currentMsgSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"requiredMsgSender\",\"type\":\"address\"}],\"name\":\"BadMsgSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"DeadlineExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredAllowance\",\"type\":\"uint256\"}],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredBalance\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromEther\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroBeneficiary\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroReceiver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroSalt\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldBeneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"NewBeneficiary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldPendingOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"PendingOwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"premiumType\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"PurchasePremium\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"premiumType\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"RequestPremium\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"currentBeneficiary\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"currentPendingOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"premiumType\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mintAndPurchasePremium\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"purchasePremium\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"premiumType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"requestPremium\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"returnLostTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"setPendingOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PurchaserL1", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}