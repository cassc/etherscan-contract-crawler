{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Jackpot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Jackpot {\\n    /**\\n     * @dev Write to log info about the new game.\\n     *\\n     * @param _game Game number.\\n     * @param _time Time when game stated.\\n     \\n     */\\n    event Game(uint _game, uint indexed _time);\\n\\n    struct Bet {\\n        address addr;\\n        uint256 ticketstart;\\n        uint256 ticketend;\\n    }\\n\\n    mapping(uint256 => mapping(uint256 => Bet)) public bets;\\n    mapping(address => mapping(uint256 => uint256)) public totalVolume;\\n    mapping(address => mapping(uint256 => bool)) public isInGame;\\n    mapping(uint256 => uint256) public totalBets;\\n\\n    IERC20 public token;\\n\\n    // Current game number.\\n    uint public game;\\n\\n    // All-time game jackpot.\\n    uint public allTimeJackpot = 0;\\n    // All-time game players count\\n    uint public allTimePlayers = 0;\\n\\n    // Store game jackpot.\\n    mapping(uint => uint) jackpot;\\n    // Store game players.\\n    mapping(uint => address[]) public players;\\n    // Store total tickets for each game\\n    mapping(uint => uint) tickets;\\n    // Store game start block number.\\n    mapping(uint => uint) public gamestartblock;\\n\\n    address payable public owner;\\n    address payable taxWallet;\\n\\n    uint counter = 1;\\n\\n    /**\\n     * @dev Check sender address and compare it to an owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Only owner can call this function.\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initialize game.\\n     * @dev Create ownable and stats aggregator instances,\\n     * @dev set funds distributor contract address.\\n     *\\n     */\\n\\n    constructor() {\\n        owner = payable(msg.sender);\\n        startGame();\\n    }\\n\\n    /**\\n     * @dev The method that allows buying tickets by directly sending ether to the contract.\\n     */\\n\\n    function setToken(address _address) external onlyOwner {\\n        require(address(token) == address(0));\\n        token = IERC20(_address);\\n    }\\n\\n    function playerticketstart(\\n        uint _gameid,\\n        uint _pid\\n    ) public view returns (uint256) {\\n        return bets[_gameid][_pid].ticketstart;\\n    }\\n\\n    function playerticketend(\\n        uint _gameid,\\n        uint _pid\\n    ) public view returns (uint256) {\\n        return bets[_gameid][_pid].ticketend;\\n    }\\n\\n    /**\\n     * @dev Start the new game.\\n     */\\n    function start() public onlyOwner {\\n        if (players[game].length > 0) {\\n            pickTheWinners();\\n        }\\n        startGame();\\n    }\\n\\n    /**\\n     * @dev Stop the game.\\n     */\\n    function end() public onlyOwner {\\n        selfdestruct(payable(msg.sender));\\n    }\\n\\n    /**\\n     * @dev Get random number. It cant be influenced by anyone\\n     * @dev Random number calculation depends on block timestamp,\\n     * @dev difficulty, counter and jackpot players length.\\n     *\\n     */\\n    function randomNumber(uint number) internal returns (uint) {\\n        counter++;\\n        uint random = uint(\\n            keccak256(\\n                abi.encodePacked(\\n                    block.timestamp,\\n                    counter,\\n                    players[game].length,\\n                    gasleft()\\n                )\\n            )\\n        ) % number;\\n        return random + 1;\\n    }\\n\\n    /**\\n     * @dev adds the player to the jackpot game.\\n     */\\n    event Entry(address indexed from, uint indexed game);\\n\\n    function deposit(address from, uint amount) public {\\n        require(\\n            msg.sender == address(token),\\n            \\\"Stake by sending token to this contract\\\"\\n        );\\n\\n        totalVolume[from][game] += amount;\\n\\n        uint newtotalstr = totalBets[game];\\n        bets[game][newtotalstr].addr = address(from);\\n        bets[game][newtotalstr].ticketstart = tickets[game] + 1;\\n        bets[game][newtotalstr].ticketend =\\n            ((tickets[game] + 1) + (amount / (100_000 * 10 ** 9))) -\\n            1;\\n\\n        totalBets[game] += 1;\\n        jackpot[game] += amount;\\n        tickets[game] += (amount / (100_000 * 10 ** 9));\\n\\n        if (!isInGame[from][game]) {\\n            players[game].push(from);\\n            isInGame[from][game] = true;\\n            emit Entry(from, game);\\n        }\\n    }\\n\\n    /**\\n     * @dev Start the new game.\\n     * @dev Checks game status changes, if exists request for changing game status game status\\n     * @dev will be changed.\\n     */\\n    function startGame() internal {\\n        game += 1;\\n        gamestartblock[game] = block.timestamp;\\n        emit Game(game, block.timestamp);\\n    }\\n\\n    function checkIfWinnerDuplicate(\\n        address[] memory list,\\n        address winner\\n    ) internal pure returns (bool) {\\n        uint i;\\n        for (i = 0; i < list.length; i++) {\\n            if (list[i] == winner) return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Pick the winner using random number provably fair function.\\n     */\\n    function pickTheWinner() internal returns (address) {\\n        uint winner = randomNumber(tickets[game]); //winning ticket\\n        uint256 lookingforticket = winner;\\n        address ticketwinner;\\n        for (uint8 i = 0; i <= totalBets[game]; i++) {\\n            address addr = bets[game][i].addr;\\n            uint256 ticketstart = bets[game][i].ticketstart;\\n            uint256 ticketend = bets[game][i].ticketend;\\n            if (\\n                lookingforticket >= ticketstart && lookingforticket <= ticketend\\n            ) {\\n                ticketwinner = addr; //finding winner address\\n            }\\n        }\\n        return ticketwinner;\\n    }\\n\\n    function pickTheWinners() internal {\\n        address[] memory winners;\\n        uint toPlayer = address(this).balance;\\n        uint reward;\\n        uint i;\\n        uint j;\\n\\n        if (players[game].length <= 5) {\\n            winners = players[game];\\n        } else {\\n            winners = new address[](5);\\n            for (i = 0; i < 50; i++) {\\n                address winner = pickTheWinner();\\n                if (checkIfWinnerDuplicate(winners, winner)) continue;\\n                winners[j] = winner;\\n                j = j + 1;\\n                if (j >= 5) {\\n                    break;\\n                }\\n            }\\n        }\\n\\n        reward = toPlayer / winners.length;\\n        for (i = 0; i < winners.length; i++) {\\n            if (winners[i] != address(0)) {\\n                payable(winners[i]).transfer(reward);\\n            }\\n        }\\n\\n        allTimeJackpot += toPlayer;\\n        allTimePlayers += players[game].length;\\n    }\\n\\n    function recover() external onlyOwner {\\n        owner.call{value: address(this).balance}(\\\"\\\");\\n    }\\n\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"lib/forge-std:ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"lib/openzeppelin-contracts:@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"lib/openzeppelin-contracts:ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\r\n      \"lib/openzeppelin-contracts:erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"lib/openzeppelin-contracts:forge-std/=lib/openzeppelin-contracts/lib/forge-std/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"game\",\"type\":\"uint256\"}],\"name\":\"Entry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_game\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Game\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"allTimeJackpot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allTimePlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ticketstart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketend\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"end\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"game\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gamestartblock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isInGame\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"playerticketend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"playerticketstart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalBets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalVolume\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Jackpot", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}