{"SourceCode": "{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nabstract contract Context {\\n    function _msgSender() internal view returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this;\\n        return msg.data;\\n    }\\n}\"},\"IDEXFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\ninterface IDEXFactory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\"},\"IDEXRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n//This is an interface to Uniswap Router V2 and it\\u0027s already implemened.\\n//When initializing the interface please use the right network/address for the router otherwise it won\\u0027t work\\n\\n//For BSC Test Net address is 0xD99D1c33F9fC3444f8101754aBC46c52416550D1\\n\\n//For Live Blockchains if using Pancakeswap please refer to https://docs.pancakeswap.finance/developers/smart-contracts/pancakeswap-exchange/v2-contracts/router-v2\\n\\n// Uniswap Deployment addresses: refer to https://docs.uniswap.org/contracts/v3/reference/deployments\\n\\n//For interface documentatio please refer to https://docs.uniswap.org/contracts/v2/reference/smart-contracts/router-02\\n\\n//Since Pancake Swap is based on Uniswap so the documentation above solves both cases.\\n\\n\\ninterface IDEXRouter {\\n\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IERC20 {\\n\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"},\"IPancakePair.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IPancakePair {\\n    function sync() external;\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./Context.sol\\\";\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n  \\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n   \\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\"},\"SafeMath.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n}\"},\"Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/* \\n\\n _______  _______  _______  ___  \\n|       ||       ||       ||   | \\n|    _  ||    ___||    _  ||   | \\n|   |_| ||   |___ |   |_| ||   | \\n|    ___||    ___||    ___||   | \\n|   |    |   |___ |   |    |   | \\n|___|    |_______||___|    |___| \\n\\n*/\\n\\n\\n\\npragma solidity ^0.8.21;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./IDEXFactory.sol\\\";\\nimport \\\"./IPancakePair.sol\\\";\\nimport \\\"./IDEXRouter.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\n\\n//Swap Router Live Address: 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\\n\\ncontract PEPICOIN is IERC20, Ownable {\\n    using SafeMath for uint256;\\n    \\n    address WETH;\\n    address constant DEAD          = 0x000000000000000000000000000000000000dEaD;\\n    address constant ZERO          = 0x0000000000000000000000000000000000000000;\\n\\n    string _name = \\\"PEPI\\\";\\n    string _symbol = \\\"PEPI\\\";\\n    uint8 constant _decimals = 9;\\n\\n    uint256 _totalSupply = 1 * 10**8 * 10**_decimals; \\n    uint256 public _maxTxAmount = (_totalSupply * 1) / 100; // 1%\\n    uint256 public _maxWalletSize = (_totalSupply * 1) / 100; // 1%  \\n\\n    mapping (address =\\u003e uint256) public _rOwned;\\n    uint256 public _totalProportion = _totalSupply;\\n\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) _allowances;\\n    mapping (address =\\u003e bool) isCooldownExempt;    \\n    mapping (address =\\u003e bool) isFeeExempt;\\n    mapping (address =\\u003e bool) isTxLimitExempt;\\n \\n    uint256 liquidityFeeBuy = 0; \\n    uint256 liquidityFeeSell = 0;\\n\\n    uint256 TeamFeeBuy = 1;  \\n    uint256 TeamFeeSell = 0;  \\n\\n    uint256 marketingFeeBuy = 2;   \\n    uint256 marketingFeeSell = 2;   \\n\\n    uint256 reflectionFeeBuy = 0;   \\n    uint256 reflectionFeeSell = 1;   \\n\\n    uint256 totalFeeBuy = marketingFeeBuy + liquidityFeeBuy + TeamFeeBuy + reflectionFeeBuy;     \\n    uint256 totalFeeSell = marketingFeeSell + liquidityFeeSell + TeamFeeSell + reflectionFeeSell; \\n\\n    uint256 feeDenominator = 100; \\n       \\n    address autoLPReceiver;\\n    address marketingReceiver;\\n    address teamReceiver;\\n\\n    uint256 targetLiquidity = 100;\\n    uint256 targetLiquidityDenominator = 100;\\n\\n    IDEXRouter public router;\\n    address public pair;\\n\\n    bool public tradingOpen = false;\\n\\n    bool public buyCooldownEnabled = true;\\n    uint8 public CooldownTimerInterval = 10; //seconds\\n    mapping (address =\\u003e uint) public CooldownTimer;\\n    \\n    bool public claimingFees = true; \\n    bool alternateSwaps = true;  \\n    uint256 smallSwapThreshold = _totalSupply * 1 / 1000; // .1%\\n    uint256 largeSwapThreshold = _totalSupply * 2 / 1000; // .2%\\n\\n    uint256 public swapThreshold = smallSwapThreshold;\\n    bool inSwap;\\n    modifier swapping() { inSwap = true; _; inSwap = false; }\\n\\n    //Token Holder Struct\\n    struct Holder {\\n        address holderWallet;\\n        uint256 amountHeld;\\n        uint256 percentProportion;\\n        }\\n    //Array storing all holders onchain\\n    address[] private  tokenHolders;\\n\\n    mapping(address =\\u003e Holder) public addressToHolder;\\n\\n    constructor (address swapRouterAddress, string memory tName, string memory tSymbol) {\\n        _name = tName;\\n        _symbol = tSymbol;\\n        router = IDEXRouter(swapRouterAddress);\\n        WETH = router.WETH();\\n        pair = IDEXFactory(router.factory()).createPair(WETH, address(this));\\n\\n        _allowances[address(this)][address(router)] = type(uint256).max;\\n        _allowances[address(this)][msg.sender] = type(uint256).max;\\n\\n        isTxLimitExempt[address(this)] = true;\\n        isTxLimitExempt[address(router)] = true;\\n\\t    isTxLimitExempt[pair] = true;\\n        isTxLimitExempt[msg.sender] = true;\\n        isTxLimitExempt[marketingReceiver] = true;\\n        isFeeExempt[msg.sender] = true;\\n        isCooldownExempt[msg.sender] = true;\\n        isCooldownExempt[DEAD] = true;\\n        isCooldownExempt[address(this)] = true;\\n\\n        \\n        autoLPReceiver = address(0x3297149AddBFEC4d854E9A3d51A8aF0f8D27eAce); //Replace with corresponding address\\n        teamReceiver = address(0x5E8516Fb995857F57826210FeCb6B2eE56D626a8); //Replace with corresponding address\\n        marketingReceiver = address(0x0bcCd153CC76EfBE7C98066841A875027709799d); //Replace with corresponding address\\n\\n        _rOwned[msg.sender] = _totalSupply;\\n        emit Transfer(address(0), msg.sender, _totalSupply);\\n    }\\n\\n    receive() external payable { }\\n\\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\\n    function decimals() external pure returns (uint8) { return _decimals; }\\n    function name() external view returns (string memory) { return _name; }\\n    function symbol() external view returns (string memory) { return _symbol; }\\n    function getOwner() external view returns (address) { return owner(); }\\n    function balanceOf(address account) public view override returns (uint256) { return tokenFromReflection(_rOwned[account]); }\\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\\n\\n    function approve(address spender, uint256 amount) \\n        public override returns (bool) {\\n        _allowances[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function approveMax(address spender) external returns (bool) {\\n        return approve(spender, type(uint256).max);\\n    }\\n\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        return _transferFrom(msg.sender, recipient, amount);\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        if(_allowances[sender][msg.sender] != type(uint256).max){\\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \\\"Insufficient Allowance\\\");\\n        }\\n\\n        return _transferFrom(sender, recipient, amount);\\n    }\\n\\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\\n\\n        if (recipient != pair \\u0026\\u0026 recipient != DEAD \\u0026\\u0026 recipient != marketingReceiver \\u0026\\u0026 !isTxLimitExempt[recipient]) {\\n            require(balanceOf(recipient) + amount \\u003c= _maxWalletSize, \\\"Max Wallet Exceeded\\\");\\n\\n        if (sender == pair \\u0026\\u0026 buyCooldownEnabled \\u0026\\u0026 !isCooldownExempt[recipient]) {\\n            require(CooldownTimer[recipient] \\u003c block.timestamp,\\\"Please wait for between buys\\\");\\n            CooldownTimer[recipient] = block.timestamp + CooldownTimerInterval;\\n        }\\n        \\n        }\\n        \\n        if(!isTxLimitExempt[sender]) {\\n            require(amount \\u003c= _maxTxAmount, \\\"Transaction Amount Exceeded\\\");\\n        }\\n     \\n        if (recipient != pair \\u0026\\u0026 recipient != DEAD \\u0026\\u0026 !isTxLimitExempt[recipient]) {\\n            require(tradingOpen,\\\"Trading not open yet\\\");\\n        \\n        }\\n\\n        if(shouldSwapBack()){ swapBack(); }\\n\\n        uint256 proportionAmount = tokensToProportion(amount);\\n\\n        _rOwned[sender] = _rOwned[sender].sub(proportionAmount, \\\"Insufficient Balance\\\");\\n\\n        uint256 proportionReceived = shouldTakeFee(sender) \\u0026\\u0026 shouldTakeFee(recipient) ? takeFeeInProportions(sender == pair? true : false, sender, recipient, proportionAmount) : proportionAmount;\\n        _rOwned[recipient] = _rOwned[recipient].add(proportionReceived);\\n\\n        //Distribute Tokens\\n        addOrUpdateTokenHolder([sender,recipient]);\\n\\n        emit Transfer(sender, recipient, tokenFromReflection(proportionReceived));\\n        return true;\\n    }\\n\\n    function tokensToProportion(uint256 tokens) public view returns (uint256) {\\n        return tokens.mul(_totalProportion).div(_totalSupply);\\n    }\\n\\n    function tokenFromReflection(uint256 proportion) public view returns (uint256) {\\n        return proportion.mul(_totalSupply).div(_totalProportion);\\n    }\\n\\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\\n        uint256 proportionAmount = tokensToProportion(amount);\\n        _rOwned[sender] = _rOwned[sender].sub(proportionAmount, \\\"Insufficient Balance\\\");\\n        _rOwned[recipient] = _rOwned[recipient].add(proportionAmount);\\n        //Distribute token //Now using the function.\\n        addOrUpdateTokenHolder([sender,recipient]);\\n\\n        emit Transfer(sender, recipient, amount);\\n        return true;\\n    }\\n\\n\\n    //Funtion to create token holder struct or modify it\\u0027s value then call distrubution function.\\n    function addOrUpdateTokenHolder(address[2] memory holders) internal {\\n        //Do this for holders who are not the pair address.\\n        for (uint i=0; i\\u003cholders.length; i++) \\n        {\\n            uint256 amountHeld = balanceOf(holders[i]);\\n            uint256 proportionPercent =  ((amountHeld.div(_totalSupply.div(100)))*10**9).div(100);\\n            if (holders[i] != pair \\u0026\\u0026 holders[i] != address(this)){\\n                if (addressToHolder[holders[i]].holderWallet != holders[i]){\\n                    addressToHolder[holders[i]] = Holder(holders[i], amountHeld, proportionPercent);\\n                    tokenHolders.push(holders[i]);\\n                }else {\\n                    addressToHolder[holders[i]].amountHeld = amountHeld;\\n                    addressToHolder[holders[i]].percentProportion = proportionPercent;\\n                }\\n            }\\n        }\\n\\n        \\n    }\\n\\n    //Funtion to perform token distribution.\\n    function distributeOnePercentProportion() internal {\\n        address proportionAddress = address(this);\\n        \\n            for (uint i=0; i\\u003ctokenHolders.length; i++) \\n                {\\n                    address holderWallet = addressToHolder[tokenHolders[i]].holderWallet;\\n                    uint256 amountHeld = balanceOf(holderWallet);\\n                    uint256 proportionPercent =  ((amountHeld.div(_totalSupply.div(100)))*10**9).div(100);\\n                    uint256 onePercentProportionAmount = (proportionPercent).div(10**9)*balanceOf(proportionAddress);\\n                    if(balanceOf(holderWallet) \\u003e= _totalSupply.div(400) \\u0026\\u0026 balanceOf(proportionAddress) \\u003e= _totalSupply.div(200))\\n{\\n                        _rOwned[proportionAddress] = _rOwned[proportionAddress].sub(onePercentProportionAmount, \\\"Insufficient Balance\\\");\\n                        _rOwned[holderWallet] = _rOwned[holderWallet].add(onePercentProportionAmount);\\n                        addressToHolder[holderWallet].amountHeld = balanceOf(holderWallet);\\n                    }\\n                }\\n    }\\n\\n\\n    function shouldTakeFee(address sender) internal view returns (bool) {\\n        return !isFeeExempt[sender];\\n\\n    }\\n\\n     function checkTxLimit(address sender, uint256 amount) internal view {\\n        require(amount \\u003c= _maxTxAmount || isTxLimitExempt[sender], \\\"TX Limit Exceeded\\\");\\n    }\\n\\n    function getTotalFeeBuy(bool) public view returns (uint256) {\\n        return totalFeeBuy;\\n    }\\n\\n    function getTotalFeeSell(bool) public view returns (uint256) {\\n        return totalFeeSell;\\n    }\\n\\n    function takeFeeInProportions(bool buying, address sender, address receiver, uint256 proportionAmount) internal returns (uint256) {\\n        uint256 proportionFeeAmount = buying == true? proportionAmount.mul(getTotalFeeBuy(receiver == pair)).div(feeDenominator) :\\n        proportionAmount.mul(getTotalFeeSell(receiver == pair)).div(feeDenominator);\\n\\n        \\n        uint256 proportionReflected = buying == true? proportionFeeAmount.mul(reflectionFeeBuy).div(totalFeeBuy) :\\n        proportionFeeAmount.mul(reflectionFeeSell).div(totalFeeSell);\\n\\n        _totalProportion = _totalProportion.sub(proportionReflected);\\n\\n        \\n        uint256 _proportionToContract = proportionFeeAmount.sub(proportionReflected);\\n        _rOwned[address(this)] = _rOwned[address(this)].add(_proportionToContract);\\n\\n            //Distribute fees after taxes put in contract address. This should prevent the balance of address(this) being 0\\n            distributeOnePercentProportion();\\n\\n        emit Transfer(sender, address(this), tokenFromReflection(_proportionToContract));\\n        emit Reflect(proportionReflected, _totalProportion);\\n        return proportionAmount.sub(proportionFeeAmount);\\n    }\\n\\n     function clearStuckETH(uint256 amountPercentage) external {\\n        uint256 amountETH = address(this).balance;\\n        payable(teamReceiver).transfer(amountETH * amountPercentage / 100);\\n        emit ClearStuck(amountPercentage);\\n     }\\n\\n     function clearForeignToken(address tokenAddress, uint256 tokens) external onlyOwner returns (bool) {\\n     require(tokenAddress != address(this), \\\"Owner cannot claim native tokens\\\"); \\n     if(tokens == 0){\\n            tokens = IERC20(tokenAddress).balanceOf(address(this));\\n        }\\n        emit ClearToken(tokenAddress, tokens);\\n        return IERC20(tokenAddress).transfer(msg.sender, tokens);\\n       \\n    }\\n  \\n      function removeLimits() \\n      external onlyOwner { \\n     _maxWalletSize = _totalSupply;\\n     _maxTxAmount = _totalSupply;\\n\\n    }\\n\\n    function multiSendTokens(address[] memory accounts, uint256[] memory amounts) external onlyOwner {\\n        require(accounts.length == amounts.length, \\\"Lengths do not match.\\\");\\n        for (uint16 i = 0; i \\u003c accounts.length; i++) {\\n        require(balanceOf(msg.sender) \\u003e= amounts[i], \\\"Not enough tokens.\\\");       \\n        _basicTransfer(msg.sender,accounts[i],amounts[i]);\\n    }\\n}\\n  \\n\\n    function shouldSwapBack() internal view returns (bool) {\\n        return msg.sender != pair\\n        \\u0026\\u0026 !inSwap\\n        \\u0026\\u0026 claimingFees\\n        \\u0026\\u0026 balanceOf(address(this)) \\u003e= swapThreshold;\\n    }\\n\\n    function swapBack() internal swapping {\\n        uint256 dynamicLiquidityFee = isOverLiquified(targetLiquidity, targetLiquidityDenominator) ? 0 : liquidityFeeSell;\\n        uint256 _totalFee = totalFeeSell.sub(reflectionFeeSell);\\n        uint256 amountToLiquify = swapThreshold.mul(dynamicLiquidityFee).div(_totalFee).div(2);\\n        uint256 amountToSwap = swapThreshold.sub(amountToLiquify);\\n\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = WETH;\\n\\n        uint256 balanceBefore = address(this).balance;\\n\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            amountToSwap,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        uint256 amountETH = address(this).balance.sub(balanceBefore);\\n        uint256 totalETHFee = _totalFee.sub(dynamicLiquidityFee.div(2));\\n        uint256 amountETHLiquidity = amountETH.mul(liquidityFeeSell).div(totalETHFee).div(2);\\n        uint256 amountETHMarketing = amountETH.mul(marketingFeeSell).div(totalETHFee);\\n        uint256 amountETHTeam = amountETH.mul(TeamFeeSell).div(totalETHFee);\\n\\n        // payable(teamReceiver).transfer(amountETHTeam);\\n        // payable(marketingReceiver).transfer(amountETHMarketing);\\n\\n        (bool tmpSuccess,) = payable(marketingReceiver).call{value: amountETHMarketing, gas: 30000}(\\\"\\\");\\n        (tmpSuccess,) = payable(teamReceiver).call{value: amountETHTeam, gas: 30000}(\\\"\\\");\\n             \\n            if(amountToLiquify \\u003e 0) {\\n             router.addLiquidityETH{value: amountETHLiquidity}(\\n                address(this),\\n                amountToLiquify,\\n                0,\\n                0,\\n                autoLPReceiver,\\n                block.timestamp\\n            );\\n            emit AutoLiquify(amountETHLiquidity, amountToLiquify);\\n        }\\n\\n        swapThreshold = !alternateSwaps ? swapThreshold : swapThreshold == smallSwapThreshold ? largeSwapThreshold : smallSwapThreshold;\\n    }\\n\\n    function setSwapThreshold\\n    (bool _enabled, uint256 _amountS, uint256 _amountL, bool _alternate) \\n    external onlyOwner {\\n    require(_amountS \\u003c (_totalSupply/50), \\\"Cannot set swap amount above 2%\\\");\\n    require(_amountS \\u003e (_totalSupply/100000), \\\"Cannot set swap amount below 0.001%\\\");\\n    require(_amountL \\u003c (_totalSupply/50), \\\"Cannot set swap amount above 2%\\\");\\n    require(_amountL \\u003e (_totalSupply/100000), \\\"Cannot set swap amount below 0.001%\\\");\\n    alternateSwaps = _alternate;\\n    claimingFees = _enabled;\\n    smallSwapThreshold = _amountS;\\n    largeSwapThreshold = _amountL;\\n    swapThreshold = smallSwapThreshold;\\n\\n        emit set_SellAmounts(alternateSwaps, claimingFees, smallSwapThreshold, largeSwapThreshold);\\n    }\\n\\n    function enableTrading() public onlyOwner {\\n        require (!tradingOpen);\\n        tradingOpen = true;\\n        }\\n\\n    function disableTrading() public onlyOwner {\\n        require (tradingOpen);\\n        tradingOpen = false;\\n        }\\n\\n    function setFees\\n    (uint256 _liquidityFeeBuy, uint256 _reflectionFeeBuy, uint256 _marketingFeeBuy, uint256 _TeamFeeBuy, uint256 _feeDenominator,\\n    uint256 _liquidityFeeSell, uint256 _reflectionFeeSell, uint256 _marketingFeeSell, uint256 _TeamFeeSell) \\n    external onlyOwner {\\n    liquidityFeeBuy = _liquidityFeeBuy;\\n    reflectionFeeBuy = _reflectionFeeBuy;\\n    marketingFeeBuy = _marketingFeeBuy;\\n    TeamFeeBuy = _TeamFeeBuy;\\n    totalFeeBuy = liquidityFeeBuy.add(reflectionFeeBuy).add(marketingFeeBuy).add(TeamFeeBuy);\\n\\n    liquidityFeeSell = _liquidityFeeSell;\\n    reflectionFeeSell = _reflectionFeeSell;\\n    marketingFeeSell = _marketingFeeSell;\\n    TeamFeeSell = _TeamFeeSell;\\n    totalFeeSell = liquidityFeeSell.add(reflectionFeeSell).add(marketingFeeSell).add(TeamFeeSell);\\n       \\n    feeDenominator = _feeDenominator;\\n\\n    require(totalFeeBuy \\u003c= feeDenominator/1,\\\"Cannot set buy fees above 20%\\\"); \\n    require(totalFeeSell \\u003c=feeDenominator/1,\\\"Cannot set sell fees above 20%\\\"); \\n        \\n     }\\n     \\n    function updateMaxWallet\\n    (uint256 maxWalletHolding) \\n    external onlyOwner() {\\n    require(maxWalletHolding \\u003e= 1);\\n    _maxWalletSize = (_totalSupply * maxWalletHolding ) / 1000;\\n    emit set_MaxWallet(_maxWalletSize);\\n    }\\n\\n    function updateMaxTransaction\\n    (uint256 maxTransactionSize) \\n    external onlyOwner() {\\n    require(maxTransactionSize \\u003e= 1, \\\"Cannot set max TX below .1%\\\");\\n     _maxTxAmount = (_totalSupply * maxTransactionSize ) / 1000;\\n    emit set_MaxTransaction(_maxTxAmount);\\n    \\n      }\\n      \\n    function addTaxExemption(address[] calldata addresses, bool status) public onlyOwner {\\n        for (uint256 i; i \\u003c addresses.length; ++i) {\\n            isFeeExempt[addresses[i]] = status;\\n            }\\n    }\\n\\n    function addTXLimitExemption\\n    (address[] calldata addresses, bool status)\\n    public onlyOwner {\\n    for (uint256 i; i \\u003c addresses.length; ++i) {\\n    isTxLimitExempt[addresses[i]] = status;\\n        } \\n    }\\n\\n    function addCooldownExempt\\n    (address holder, bool exempt) \\n    external onlyOwner {\\n    isCooldownExempt[holder] = exempt;\\n    }\\n\\n    \\n    function setPresaleAddress(address holder, bool exempt) external onlyOwner {\\n        isFeeExempt[holder] = exempt;\\n        isTxLimitExempt[holder] = exempt;\\n    }\\n    \\n    function setTaxReceivers (address _marketingReceiver, address _autoLPReceiver, address _TeamReceiver) external onlyOwner {\\n        marketingReceiver = _marketingReceiver;\\n        teamReceiver = _TeamReceiver;\\n        autoLPReceiver = _autoLPReceiver;\\n\\n        emit set_Receivers(marketingReceiver, teamReceiver, autoLPReceiver);\\n    }\\n\\n    function getCirculatingSupply() \\n    public view returns (uint256) {\\n    return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\\n    }\\n\\n    function getLiquidityBacking\\n    (uint256 accuracy) \\n    private view returns (uint256) {\\n    return accuracy.mul(balanceOf(pair).mul(2)).div(getCirculatingSupply());\\n\\n    }\\n\\n    function isOverLiquified\\n    (uint256 target, uint256 accuracy)\\n    public view returns (bool) {\\n    return getLiquidityBacking(accuracy) \\u003e target;\\n    \\n    }\\n\\n    event AutoLiquify(uint256 amountETH, uint256 amountTokens);\\n    event user_exemptfromfees(address Wallet, bool Exempt);\\n    event user_TxExempt(address Wallet, bool Exempt);\\n    event ClearStuck(uint256 amount);\\n    event ClearToken(address tokenAddress, uint256 tokens);\\n    event set_Receivers(address marketingReceiver, address teamReceiver,address autoLPReceiver);\\n    event set_MaxWallet(uint256 maxWallet);\\n    event set_MaxTransaction(uint256 maxTXAmount);\\n    event set_SellAmounts(bool enabled, bool alternate, uint256 amountS, uint256 amountL);\\n    event Reflect(uint256 amountReflected, uint256 newTotalProportion);\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapRouterAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tSymbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClearStuck\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"ClearToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReflected\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalProportion\",\"type\":\"uint256\"}],\"name\":\"Reflect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTXAmount\",\"type\":\"uint256\"}],\"name\":\"set_MaxTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxWallet\",\"type\":\"uint256\"}],\"name\":\"set_MaxWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"marketingReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"teamReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"autoLPReceiver\",\"type\":\"address\"}],\"name\":\"set_Receivers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"alternate\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountS\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountL\",\"type\":\"uint256\"}],\"name\":\"set_SellAmounts\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Exempt\",\"type\":\"bool\"}],\"name\":\"user_TxExempt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Exempt\",\"type\":\"bool\"}],\"name\":\"user_exemptfromfees\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"CooldownTimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CooldownTimerInterval\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_rOwned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalProportion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"addCooldownExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"addTXLimitExemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"addTaxExemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"holderWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountHeld\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentProportion\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyCooldownEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimingFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"clearForeignToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"}],\"name\":\"clearStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"getTotalFeeBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"getTotalFeeSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"isOverLiquified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiSendTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFeeBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reflectionFeeBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFeeBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_TeamFeeBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFeeSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reflectionFeeSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFeeSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_TeamFeeSell\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setPresaleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amountS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountL\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_alternate\",\"type\":\"bool\"}],\"name\":\"setSwapThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_autoLPReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_TeamReceiver\",\"type\":\"address\"}],\"name\":\"setTaxReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proportion\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"tokensToProportion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTransactionSize\",\"type\":\"uint256\"}],\"name\":\"updateMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWalletHolding\",\"type\":\"uint256\"}],\"name\":\"updateMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PEPICOIN", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000004506570690000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045065706900000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cbd463d201291b3bb7739a003a2bcc53fa03db5bcc05e2a005c55c11fe1cb556"}