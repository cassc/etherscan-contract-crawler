{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: LendingPool.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ncontract LendingPool is Ownable {\r\n    mapping(address => uint256) private _deposits;\r\n    mapping(address => uint256) private _borrowed;\r\n    mapping(address => uint256) private _collateral;\r\n    mapping(address => uint256) private _interestRates;\r\n\r\n    IERC20 private _lendingToken;\r\n\r\n    event Deposited(address indexed user, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event Borrowed(address indexed borrower, uint256 amount, uint256 interestRate);\r\n    event Repaid(address indexed borrower, uint256 amount);\r\n    event CollateralSeized(address indexed borrower, uint256 amount);\r\n\r\n\r\n    constructor(IERC20 lendingToken_) Ownable(msg.sender) {\r\n        _lendingToken = lendingToken_;\r\n    }\r\n\r\n    function deposit(uint256 amount) external {\r\n        _lendingToken.transferFrom(msg.sender, address(this), amount);\r\n        _deposits[msg.sender] += amount;\r\n        emit Deposited(msg.sender, amount);\r\n    }\r\n\r\n    function withdraw(uint256 amount) external {\r\n        require(_deposits[msg.sender] >= amount, \"LendingPool: Insufficient funds\");\r\n        _deposits[msg.sender] -= amount;\r\n        _lendingToken.transfer(msg.sender, amount);\r\n        emit Withdrawn(msg.sender, amount);\r\n    }\r\n\r\n    function borrow(uint256 amount) external {\r\n        uint256 collateralRequired = _calculateCollateral(amount);\r\n        require(_collateral[msg.sender] >= collateralRequired, \"LendingPool: Insufficient collateral\");\r\n        uint256 interestRate = _calculateInterestRate(amount);\r\n        _borrowed[msg.sender] += amount;\r\n        _interestRates[msg.sender] = interestRate;\r\n        _lendingToken.transfer(msg.sender, amount);\r\n        emit Borrowed(msg.sender, amount, interestRate);\r\n    }\r\n\r\n    function repay(uint256 amount) external {\r\n        require(_borrowed[msg.sender] >= amount, \"LendingPool: Invalid repayment amount\");\r\n        _lendingToken.transferFrom(msg.sender, address(this), amount);\r\n        _borrowed[msg.sender] -= amount;\r\n        if (_borrowed[msg.sender] == 0) {\r\n            _interestRates[msg.sender] = 0;\r\n        }\r\n        emit Repaid(msg.sender, amount);\r\n    }\r\n\r\n    function seizeCollateral(address borrower, uint256 amount) external onlyOwner {\r\n        require(_collateral[borrower] >= amount, \"LendingPool: Insufficient collateral\");\r\n        _collateral[borrower] -= amount;\r\n        _lendingToken.transfer(msg.sender, amount);\r\n        emit CollateralSeized(borrower, amount);\r\n    }\r\n\r\n    function _calculateCollateral(uint256 amount) private view returns (uint256) {\r\n        \r\n        return amount;\r\n    }\r\n\r\n    function _calculateInterestRate(uint256 amount) private view returns (uint256) {\r\n        \r\n        return amount;\r\n    }\r\n\r\n    function addCollateral(uint256 amount) external {\r\n        _lendingToken.transferFrom(msg.sender, address(this), amount);\r\n        _collateral[msg.sender] += amount;\r\n    }\r\n\r\n    function removeCollateral(uint256 amount) external {\r\n        require(_collateral[msg.sender] >= amount, \"LendingPool: Insufficient collateral\");\r\n        _collateral[msg.sender] -= amount;\r\n        _lendingToken.transfer(msg.sender, amount);\r\n    }\r\n}\r\n// File: 2.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ncontract BorrowersContract is Ownable {\r\n    struct Borrower {\r\n        uint256 totalBorrowed;\r\n        uint256 totalRepaid;\r\n        uint256 currentDebt;\r\n        uint256 creditLimit;\r\n    }\r\n\r\n    mapping(address => Borrower) public borrowers;\r\n    \r\n    LendingPool private _lendingPool;\r\n\r\n    event LoanRequested(address indexed borrower, uint256 amount);\r\n    event LoanRepaid(address indexed borrower, uint256 amount);\r\n\r\n    constructor(LendingPool lendingPool_) Ownable(msg.sender) {\r\n        _lendingPool = lendingPool_;\r\n    }\r\n\r\n    function requestLoan(uint256 amount) external {\r\n        require(amount > 0, \"BorrowersContract: Request amount must be greater than 0\");\r\n        require(borrowers[msg.sender].creditLimit >= amount, \"BorrowersContract: Amount exceeds credit limit\");\r\n        borrowers[msg.sender].totalBorrowed += amount;\r\n        borrowers[msg.sender].currentDebt += amount;\r\n        emit LoanRequested(msg.sender, amount);\r\n    }\r\n\r\n    function repayLoan(uint256 amount) external {\r\n        require(amount > 0, \"BorrowersContract: Repayment amount must be greater than 0\");\r\n        require(borrowers[msg.sender].currentDebt >= amount, \"BorrowersContract: Repayment amount exceeds current debt\");\r\n        borrowers[msg.sender].totalRepaid += amount;\r\n        borrowers[msg.sender].currentDebt -= amount;\r\n        emit LoanRepaid(msg.sender, amount);\r\n    }\r\n\r\n    function setCreditLimit(address borrower, uint256 newCreditLimit) external onlyOwner {\r\n        require(borrower != address(0), \"BorrowersContract: Borrower address cannot be zero\");\r\n        borrowers[borrower].creditLimit = newCreditLimit;\r\n    }\r\n\r\n    function updateCreditScore(address borrower, uint256 newScore) external {\r\n    }\r\n\r\n    function getCreditScore(address borrower) public view returns (uint256) {\r\n    }\r\n\r\n    function calculateMaxLoan(address borrower) public view returns (uint256) {\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract LendingPool\",\"name\":\"lendingPool_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LoanRepaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LoanRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBorrowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRepaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creditLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"calculateMaxLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"getCreditScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repayLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"requestLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newCreditLimit\",\"type\":\"uint256\"}],\"name\":\"setCreditLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newScore\",\"type\":\"uint256\"}],\"name\":\"updateCreditScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BorrowersContract", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000008798249c2e607446efb7ad49ec89dd1865ff4272", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://929a892c045a4563107ef1217a4f2a75186375c824436f4e862060cca97a72d9"}