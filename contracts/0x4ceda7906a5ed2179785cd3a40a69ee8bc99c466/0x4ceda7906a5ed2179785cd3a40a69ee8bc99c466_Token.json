{"SourceCode": "pragma solidity >=0.4.10;\r\n\r\n// from Zeppelin\r\ncontract SafeMath {\r\n    function safeMul(uint a, uint b) internal returns (uint) {\r\n        uint c = a * b;\r\n        require(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint a, uint b) internal returns (uint) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) internal returns (uint) {\r\n        uint c = a + b;\r\n        require(c>=a && c>=b);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address newOwner;\r\n\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address _newOwner) onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() {\r\n        if (msg.sender == newOwner) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\ncontract IToken {\r\n    function transfer(address _to, uint _value) returns (bool);\r\n    function balanceOf(address owner) returns(uint);\r\n}\r\n\r\n// In case someone accidentally sends token to one of these contracts,\r\n// add a way to get them back out.\r\ncontract TokenReceivable is Owned {\r\n    function claimTokens(address _token, address _to) onlyOwner returns (bool) {\r\n        IToken token = IToken(_token);\r\n        return token.transfer(_to, token.balanceOf(this));\r\n    }\r\n}\r\n\r\ncontract EventDefinitions {\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Burn(address indexed from, bytes32 indexed to, uint value);\r\n    event Claimed(address indexed claimer, uint value);\r\n}\r\n\r\ncontract Pausable is Owned {\r\n    bool public paused;\r\n\r\n    function pause() onlyOwner {\r\n        paused = true;\r\n    }\r\n\r\n    function unpause() onlyOwner {\r\n        paused = false;\r\n    }\r\n\r\n    modifier notPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract Finalizable is Owned {\r\n    bool public finalized;\r\n\r\n    function finalize() onlyOwner {\r\n        finalized = true;\r\n    }\r\n\r\n    modifier notFinalized() {\r\n        require(!finalized);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract Ledger is Owned, SafeMath, Finalizable {\r\n    Controller public controller;\r\n    mapping(address => uint) public balanceOf;\r\n    mapping (address => mapping (address => uint)) public allowance;\r\n    uint public totalSupply;\r\n    uint public mintingNonce;\r\n    bool public mintingStopped;\r\n\r\n    /**\r\n     * Used for updating the contract with proofs. Note that the logic\r\n     * for guarding against unwanted actions happens in the controller. We only\r\n     * specify onlyController here.\r\n     * @notice: not yet used\r\n     */\r\n    mapping(uint256 => bytes32) public proofs;\r\n\r\n    /**\r\n     * If bridge delivers currency back from the other network, it may be that we\r\n     * want to lock it until the user is able to \"claim\" it. This mapping would store the\r\n     * state of the unclaimed currency.\r\n     * @notice: not yet used\r\n     */\r\n    mapping(address => uint256) public locked;\r\n\r\n    /**\r\n     * As a precautionary measure, we may want to include a structure to store necessary\r\n     * data should we find that we require additional information.\r\n     * @notice: not yet used\r\n     */\r\n    mapping(bytes32 => bytes32) public metadata;\r\n\r\n    /**\r\n     * Set by the controller to indicate where the transfers should go to on a burn\r\n     */\r\n    address public burnAddress;\r\n\r\n    /**\r\n     * Mapping allowing us to identify the bridge nodes, in the current setup\r\n     * manipulation of this mapping is only accessible by the parameter.\r\n     */\r\n    mapping(address => bool) public bridgeNodes;\r\n\r\n    // functions below this line are onlyOwner\r\n\r\n    function Ledger() {\r\n    }\r\n\r\n    function setController(address _controller) onlyOwner notFinalized {\r\n        controller = Controller(_controller);\r\n    }\r\n\r\n    /**\r\n     * @dev         To be called once minting is complete, disables minting.  \r\n     */\r\n    function stopMinting() onlyOwner {\r\n        mintingStopped = true;\r\n    }\r\n\r\n    /**\r\n     * @dev         Used to mint a batch of currency at once.\r\n     * \r\n     * @notice      This gives us a maximum of 2^96 tokens per user.\r\n     * @notice      Expected packed structure is [ADDR(20) | VALUE(12)].\r\n     *\r\n     * @param       nonce   The minting nonce, an incorrect nonce is rejected.\r\n     * @param       bits    An array of packed bytes of address, value mappings.  \r\n     *\r\n     */\r\n    function multiMint(uint nonce, uint256[] bits) onlyOwner {\r\n        require(!mintingStopped);\r\n        if (nonce != mintingNonce) return;\r\n        mintingNonce += 1;\r\n        uint256 lomask = (1 << 96) - 1;\r\n        uint created = 0;\r\n        for (uint i=0; i<bits.length; i++) {\r\n            address a = address(bits[i]>>96);\r\n            uint value = bits[i]&lomask;\r\n            balanceOf[a] = balanceOf[a] + value;\r\n            controller.ledgerTransfer(0, a, value);\r\n            created += value;\r\n        }\r\n        totalSupply += created;\r\n    }\r\n\r\n    // functions below this line are onlyController\r\n\r\n    modifier onlyController() {\r\n        require(msg.sender == address(controller));\r\n        _;\r\n    }\r\n\r\n    function transfer(address _from, address _to, uint _value) onlyController returns (bool success) {\r\n        if (balanceOf[_from] < _value) return false;\r\n\r\n        balanceOf[_from] = safeSub(balanceOf[_from], _value);\r\n        balanceOf[_to] = safeAdd(balanceOf[_to], _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _spender, address _from, address _to, uint _value) onlyController returns (bool success) {\r\n        if (balanceOf[_from] < _value) return false;\r\n\r\n        var allowed = allowance[_from][_spender];\r\n        if (allowed < _value) return false;\r\n\r\n        balanceOf[_to] = safeAdd(balanceOf[_to], _value);\r\n        balanceOf[_from] = safeSub(balanceOf[_from], _value);\r\n        allowance[_from][_spender] = safeSub(allowed, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _owner, address _spender, uint _value) onlyController returns (bool success) {\r\n        // require user to set to zero before resetting to nonzero\r\n        if ((_value != 0) && (allowance[_owner][_spender] != 0)) {\r\n            return false;\r\n        }\r\n\r\n        allowance[_owner][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    function increaseApproval (address _owner, address _spender, uint _addedValue) onlyController returns (bool success) {\r\n        uint oldValue = allowance[_owner][_spender];\r\n        allowance[_owner][_spender] = safeAdd(oldValue, _addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval (address _owner, address _spender, uint _subtractedValue) onlyController returns (bool success) {\r\n        uint oldValue = allowance[_owner][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowance[_owner][_spender] = 0;\r\n        } else {\r\n            allowance[_owner][_spender] = safeSub(oldValue, _subtractedValue);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function setProof(uint256 _key, bytes32 _proof) onlyController {\r\n        proofs[_key] = _proof;\r\n    }\r\n\r\n    function setLocked(address _key, uint256 _value) onlyController {\r\n        locked[_key] = _value;\r\n    }\r\n\r\n    function setMetadata(bytes32 _key, bytes32 _value) onlyController {\r\n        metadata[_key] = _value;\r\n    }\r\n\r\n    /**\r\n     * Burn related functionality\r\n     */\r\n\r\n    /**\r\n     * @dev        sets the burn address to the new value\r\n     *\r\n     * @param      _address  The address\r\n     *\r\n     */\r\n    function setBurnAddress(address _address) onlyController {\r\n        burnAddress = _address;\r\n    }\r\n\r\n    function setBridgeNode(address _address, bool enabled) onlyController {\r\n        bridgeNodes[_address] = enabled;\r\n    }\r\n}\r\n\r\ncontract ControllerEventDefinitions {\r\n    /**\r\n     * An internal burn event, emitted by the controller contract\r\n     * which the bridges could be listening to.\r\n     */\r\n    event ControllerBurn(address indexed from, bytes32 indexed to, uint value);\r\n}\r\n\r\n/**\r\n * @title Controller for business logic between the ERC20 API and State\r\n *\r\n * Controller is responsible for the business logic that sits in between\r\n * the Ledger (model) and the Token (view). Presently, adherence to this model\r\n * is not strict, but we expect future functionality (Burning, Claiming) to adhere\r\n * to this model more closely.\r\n * \r\n * The controller must be linked to a Token and Ledger to become functional.\r\n * \r\n */\r\ncontract Controller is Owned, Finalizable, ControllerEventDefinitions {\r\n    Ledger public ledger;\r\n    Token public token;\r\n    address public burnAddress;\r\n\r\n    function Controller() {\r\n    }\r\n\r\n    // functions below this line are onlyOwner\r\n\r\n\r\n    function setToken(address _token) onlyOwner {\r\n        token = Token(_token);\r\n    }\r\n\r\n    function setLedger(address _ledger) onlyOwner {\r\n        ledger = Ledger(_ledger);\r\n    }\r\n\r\n    /**\r\n     * @dev         Sets the burn address burn values get moved to. Only call\r\n     *              after token and ledger contracts have been hooked up. Ensures\r\n     *              that all three values are set atomically.\r\n     *             \r\n     * @notice      New Functionality\r\n     *\r\n     * @param       _address    desired address\r\n     *\r\n     */\r\n    function setBurnAddress(address _address) onlyOwner {\r\n        burnAddress = _address;\r\n        ledger.setBurnAddress(_address);\r\n        token.setBurnAddress(_address);\r\n    }\r\n\r\n    modifier onlyToken() {\r\n        require(msg.sender == address(token));\r\n        _;\r\n    }\r\n\r\n    modifier onlyLedger() {\r\n        require(msg.sender == address(ledger));\r\n        _;\r\n    }\r\n\r\n    function totalSupply() constant returns (uint) {\r\n        return ledger.totalSupply();\r\n    }\r\n\r\n    function balanceOf(address _a) constant returns (uint) {\r\n        return ledger.balanceOf(_a);\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint) {\r\n        return ledger.allowance(_owner, _spender);\r\n    }\r\n\r\n    // functions below this line are onlyLedger\r\n\r\n    // let the ledger send transfer events (the most obvious case\r\n    // is when we mint directly to the ledger and need the Transfer()\r\n    // events to appear in the token)\r\n    function ledgerTransfer(address from, address to, uint val) onlyLedger {\r\n        token.controllerTransfer(from, to, val);\r\n    }\r\n\r\n    // functions below this line are onlyToken\r\n\r\n    function transfer(address _from, address _to, uint _value) onlyToken returns (bool success) {\r\n        return ledger.transfer(_from, _to, _value);\r\n    }\r\n\r\n    function transferFrom(address _spender, address _from, address _to, uint _value) onlyToken returns (bool success) {\r\n        return ledger.transferFrom(_spender, _from, _to, _value);\r\n    }\r\n\r\n    function approve(address _owner, address _spender, uint _value) onlyToken returns (bool success) {\r\n        return ledger.approve(_owner, _spender, _value);\r\n    }\r\n\r\n    function increaseApproval (address _owner, address _spender, uint _addedValue) onlyToken returns (bool success) {\r\n        return ledger.increaseApproval(_owner, _spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval (address _owner, address _spender, uint _subtractedValue) onlyToken returns (bool success) {\r\n        return ledger.decreaseApproval(_owner, _spender, _subtractedValue);\r\n    }\r\n\r\n    /**\r\n     * End Original Contract\r\n     * Below is new functionality\r\n     */\r\n\r\n    /**\r\n     * @dev        Enables burning on the token contract\r\n     */\r\n    function enableBurning() onlyOwner {\r\n        token.enableBurning();\r\n    }\r\n\r\n    /**\r\n     * @dev        Disables burning on the token contract\r\n     */\r\n    function disableBurning() onlyOwner {\r\n        token.disableBurning();\r\n    }\r\n\r\n    // public functions\r\n\r\n    /**\r\n     * @dev         \r\n     *\r\n     * @param       _from       account the value is burned from\r\n     * @param       _to         the address receiving the value\r\n     * @param       _amount     the value amount\r\n     * \r\n     * @return      success     operation successful or not.\r\n     */ \r\n    function burn(address _from, bytes32 _to, uint _amount) onlyToken returns (bool success) {\r\n        if (ledger.transfer(_from, burnAddress, _amount)) {\r\n            ControllerBurn(_from, _to, _amount);\r\n            token.controllerBurn(_from, _to, _amount);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev         Implementation for claim mechanism. Note that this mechanism has not yet\r\n     *              been implemented. This function is only here for future expansion capabilities.\r\n     *              Presently, just returns false to indicate failure.\r\n     *              \r\n     * @notice      Only one of claimByProof() or claim() will potentially be activated in the future.\r\n     *              Depending on the functionality required and route selected. \r\n     *\r\n     * @param       _claimer    The individual claiming the tokens (also the recipient of said tokens).\r\n     * @param       data        The input data required to release the tokens.\r\n     * @param       success     The proofs associated with the data, to indicate the legitimacy of said data.\r\n     * @param       number      The block number the proofs and data correspond to.\r\n     *\r\n     * @return      success     operation successful or not.\r\n     * \r\n     */\r\n    function claimByProof(address _claimer, bytes32[] data, bytes32[] proofs, uint256 number)\r\n        onlyToken\r\n        returns (bool success) {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev         Implementation for an alternative claim mechanism, in which the participant\r\n     *              is not required to confirm through proofs. Note that this mechanism has not\r\n     *              yet been implemented.\r\n     *              \r\n     * @notice      Only one of claimByProof() or claim() will potentially be activated in the future.\r\n     *              Depending on the functionality required and route selected.\r\n     * \r\n     * @param       _claimer    The individual claiming the tokens (also the recipient of said tokens).\r\n     * \r\n     * @return      success     operation successful or not.\r\n     */\r\n    function claim(address _claimer) onlyToken returns (bool success) {\r\n        return false;\r\n    }\r\n}\r\n\r\ncontract Token is Finalizable, TokenReceivable, SafeMath, EventDefinitions, Pausable {\r\n    // Set these appropriately before you deploy\r\n    string constant public name = \"AION\";\r\n    uint8 constant public decimals = 8;\r\n    string constant public symbol = \"AION\";\r\n    Controller public controller;\r\n    string public motd;\r\n    event Motd(string message);\r\n\r\n    address public burnAddress; //@ATTENTION: set this to a correct value\r\n    bool public burnable = false;\r\n\r\n    // functions below this line are onlyOwner\r\n\r\n    // set \"message of the day\"\r\n    function setMotd(string _m) onlyOwner {\r\n        motd = _m;\r\n        Motd(_m);\r\n    }\r\n\r\n    function setController(address _c) onlyOwner notFinalized {\r\n        controller = Controller(_c);\r\n    }\r\n\r\n    // functions below this line are public\r\n\r\n    function balanceOf(address a) constant returns (uint) {\r\n        return controller.balanceOf(a);\r\n    }\r\n\r\n    function totalSupply() constant returns (uint) {\r\n        return controller.totalSupply();\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint) {\r\n        return controller.allowance(_owner, _spender);\r\n    }\r\n\r\n    function transfer(address _to, uint _value) notPaused returns (bool success) {\r\n        if (controller.transfer(msg.sender, _to, _value)) {\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) notPaused returns (bool success) {\r\n        if (controller.transferFrom(msg.sender, _from, _to, _value)) {\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function approve(address _spender, uint _value) notPaused returns (bool success) {\r\n        // promote safe user behavior\r\n        if (controller.approve(msg.sender, _spender, _value)) {\r\n            Approval(msg.sender, _spender, _value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function increaseApproval (address _spender, uint _addedValue) notPaused returns (bool success) {\r\n        if (controller.increaseApproval(msg.sender, _spender, _addedValue)) {\r\n            uint newval = controller.allowance(msg.sender, _spender);\r\n            Approval(msg.sender, _spender, newval);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function decreaseApproval (address _spender, uint _subtractedValue) notPaused returns (bool success) {\r\n        if (controller.decreaseApproval(msg.sender, _spender, _subtractedValue)) {\r\n            uint newval = controller.allowance(msg.sender, _spender);\r\n            Approval(msg.sender, _spender, newval);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // modifier onlyPayloadSize(uint numwords) {\r\n    //     assert(msg.data.length >= numwords * 32 + 4);\r\n    //     _;\r\n    // }\r\n\r\n    // functions below this line are onlyController\r\n\r\n    modifier onlyController() {\r\n        assert(msg.sender == address(controller));\r\n        _;\r\n    }\r\n\r\n    // In the future, when the controller supports multiple token\r\n    // heads, allow the controller to reconstitute the transfer and\r\n    // approval history.\r\n\r\n    function controllerTransfer(address _from, address _to, uint _value) onlyController {\r\n        Transfer(_from, _to, _value);\r\n    }\r\n\r\n    function controllerApprove(address _owner, address _spender, uint _value) onlyController {\r\n        Approval(_owner, _spender, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev        Burn event possibly called by the controller on a burn. This is\r\n     *             the public facing event that anyone can track, the bridges listen\r\n     *             to an alternative event emitted by the controller.\r\n     *\r\n     * @param      _from   address that coins are burned from\r\n     * @param      _to     address (on other network) that coins are received by\r\n     * @param      _value  amount of value to be burned\r\n     *\r\n     * @return     { description_of_the_return_value }\r\n     */\r\n    function controllerBurn(address _from, bytes32 _to, uint256 _value) onlyController {\r\n        Burn(_from, _to, _value);\r\n    }\r\n\r\n    function controllerClaim(address _claimer, uint256 _value) onlyController {\r\n        Claimed(_claimer, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev        Sets the burn address to a new value\r\n     *\r\n     * @param      _address  The address\r\n     *\r\n     */\r\n    function setBurnAddress(address _address) onlyController {\r\n        burnAddress = _address;\r\n    }\r\n\r\n    /**\r\n     * @dev         Enables burning through burnable bool\r\n     *\r\n     */\r\n    function enableBurning() onlyController {\r\n        burnable = true;\r\n    }\r\n\r\n    /**\r\n     * @dev         Disables burning through burnable bool\r\n     *\r\n     */\r\n    function disableBurning() onlyController {\r\n        burnable = false;\r\n    }\r\n\r\n    /**\r\n     * @dev         Indicates that burning is enabled\r\n     */\r\n    modifier burnEnabled() {\r\n        require(burnable == true);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev         burn function, changed from original implementation. Public facing API\r\n     *              indicating who the token holder wants to burn currency to and the amount.\r\n     *\r\n     * @param       _amount  The amount\r\n     *\r\n     */\r\n    function burn(bytes32 _to, uint _amount) notPaused burnEnabled returns (bool success) {\r\n        return controller.burn(msg.sender, _to, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev         claim (quantumReceive) allows the user to \"prove\" some an ICT to the contract\r\n     *              thereby thereby releasing the tokens into their account\r\n     * \r\n     */\r\n    function claimByProof(bytes32[] data, bytes32[] proofs, uint256 number) notPaused burnEnabled returns (bool success) {\r\n        return controller.claimByProof(msg.sender, data, proofs, number);\r\n    }\r\n\r\n    /**\r\n     * @dev         Simplified version of claim, just requires user to call to claim.\r\n     *              No proof is needed, which version is chosen depends on our bridging model.\r\n     *\r\n     * @return      \r\n     */\r\n    function claim() notPaused burnEnabled returns (bool success) {\r\n        return controller.claim(msg.sender);\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"data\",\"type\":\"bytes32[]\"},{\"name\":\"proofs\",\"type\":\"bytes32[]\"},{\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"claimByProof\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setBurnAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"motd\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_m\",\"type\":\"string\"}],\"name\":\"setMotd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableBurning\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_claimer\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"controllerClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"controllerApprove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_c\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableBurning\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"controllerTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"controllerBurn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Motd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"}]", "ContractName": "Token", "CompilerVersion": "v0.4.17+commit.bdeb9e52", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://18201e55ea53905fd7e862bf4ae6c4216d3a320fa385b80bcc301cbd25c77082"}