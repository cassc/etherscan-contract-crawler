{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BasedMarket.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 https://based.foundation\\npragma solidity ^0.8.23;\\n\\n/**\\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\\n * \u256c\u256c\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\\n * \u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u256c\u256c\u256c\u256c\\n * \u256c\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u256c\u256c\\n * \u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u256c\\n * \u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256b\u2588\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256b\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256b\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\\n * \u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u2563\u2588\u256c\u2588\u2588\u2588\u2588\u2588\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256b\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\\n * \u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256b\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\\n * \u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u2563\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256b\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\\n * \u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256b\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u256c\u2563\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u2588\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256b\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\\n * \u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256b\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\\n * \u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256b\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\\n * \u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256b\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\\n * \u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256b\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\\n * \u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256b\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\\n * \u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u256c\\n * \u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2563\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u256c\\n * \u256c\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u2563\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u256c\u256c\\n * \u256c\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u2563\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u2563\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256b\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u258c\u2593\u2593\u2593\u256b\u2580\u2580\u256c\u256c\u256c\u2563\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u2593\u00d1\u256c\u2584\u2593\u2593\u2593\u2588\u2588\u2588\u2593\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2593\u2588\u2588\u2580\u2560\u2584\u2593\u2593\u2593\u2593\u2593\u2592\u2261\u2588\u2588\u2588\u2588\u2588\u2593\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2593\u2593\u2593\u256c\u256c\u2580\u2580\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2593\u2593\u2592\u256c\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2593\u255a\u2588\u2588\u2588\u2588\u2593\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2593\u2592\u00dc\u256c\u256c\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2593\u2592\u2560\u2560\u2593\u2588\u2593\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u258c\u2560\u2593\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2593\u2593\u256c\u2560\u2584\u2588\u2588\u2588\u2588\u2588\u2584\u2592\u2560\u2560\u2588\u2593\u2588\u2593\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u2588\u2588\u2588\u2563\u2563\u256c\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u2588\u2588\u2588\u2588\u00dc\u255f\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u00d1\u2560\u2588\u2588\u2588\u2588\u2593\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2593\u2593\u2593\u2588\u2588\u00d1\u2584\u2593\u2588\u2593\u2588\u2593\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2592\u256c\u2593\u2588\u2588\u2588\u2593\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u256c\u00dc\u256b\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2593\u2563\u2588\u2588\u2588\u2588\u2592\u2560\u2560\u2593\u2588\u2593\u255a\u2569\u2559\u2560\u2588\u2588\u2588\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u2588\u256c\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2593\u2588\u2588\u2588\u2588\u2593\u2588\u2588\u2588\u2593\u2593\u256c\u2588\u2562\u2588\u2593\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u255f\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2569\u256b\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2563\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u258c\u2560\u256b\u2593\u2588\u2588\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2588\u2588\u2593\u2593\u2563\u2588\u256c\u2563\u00d1\u256c\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u00d1\u2560\u2560\u2560\u256b\u2593\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2593\u2588\u2593\u00d1\u2592\u2584\u2593\u2588\u2593\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2593\u256c\u2563\u2593\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u2593\u2593\u2593\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u256c\u00d1\u255f\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u00d1\u256c\u2588\u2588\u2588\u2588\u2588\u2593\u2592\u2591\u2592\u2560\u2593\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c\u2584\u2584\u2584\u2593\u2588\u256c\u255a\u255a\u2559\u2559\u2559\u2559\u2591\u2593\u2588\u2588\u2588\u2588\u2588\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2563\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2593\u2563\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2584\u2584\u2592\u2593\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2563\u2593\u2593\u2588\u2593\u2593\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u258c\u256c\u256c\u00d1\u256c\u2563\u2593\u2588\u2588\u2593\u256c\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2593\u2560\u256c\u2593\u2593\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2593\u2593\u2593\u256c\u256c\u256c\u256c\u256c\u256c\u2593\u2588\u2588\u2593\u256c\u2588\u00d1\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u256b\u256c\u256c\u256c\u256c\\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2593\u2563\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u256c\u256c\u256c\u2588\u2593\u2563\u256c\u2593\u2593\u256c\u256c\u256c\u2563\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2593\u00d1\u256c\u2592\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u256c\u2593\u2588\u256c\u256c\u256c\u256c\\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2593\u256c\u2593\u256c\u2563\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u255a\u256c\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2588\u2588\u2588\u2593\u2593\u2588\u2588\u2593\u2593\u2593\u256c\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u256c\u2569\u2588\u2588\u2593\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u256c\u256c\u256c\u256c\\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u256c\u256c\u256c\u2593\u2593\u256c\u2593\u2593\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2588\u2584\u2584\u2584\u2584\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2559\u00dc\u2591\u2590\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u2588\u2588\u2593\u2592\u256c\u2588\u2588\u2588\u2588\u2588\u2593\u2563\u256c\u2563\u255f\u2563\u2593\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\\n * \u256c\u256c\u256c\u256c\u256c\u256c\u2563\u2563\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c\u2591\u2591\u2591\u2559\u2559\u2559\u00dc]\u00dc\u2593\u2588\u2588\u2588\u2588\u2593\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2588\u2593\u2593\u2593\u256c\u2593\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\\n * \u256c\u256c\u256c\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\u2584\u2584\u2584\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2563\u256c\u256c\u256c\\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2563\u256c\u256c\u256c\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u256c\u256c\\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2593\u256c\u2593\u2593\u2563\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\\n * \u256c\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u2563\u2588\u2588\u2588\u2588\u2588\u256c\u2563\u256c\u2588\u2588\u2588\u2588\u256c\u2588\u2588\u2588\u2588\u256c\u2588\u2588\u2588\u256c\u256c\u2588\u2588\u2588\u256c\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u2563\u2563\u2563\u2588\u2588\u2588\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u2563\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u2588\u2588\u2588\u2588\u256c\u256c\u2588\u2588\u2588\u2588\u256c\\n * \u256c\u2588\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u2588\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u2563\u2588\u2588\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u2588\u2588\u256c\u256c\u256c\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u2563\u2588\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u2588\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u2588\u256c\\n * \u256c\u2588\u256c\u256c\u2588\u2588\u2588\u2588\u256c\u2588\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u2588\u256c\u2588\u2562\u256c\u2588\u2588\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u2588\u2588\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u2588\u2588\u2588\u256c\u256c\u256c\u2588\u2588\u2588\u256c\u2588\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u2588\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u256c\u2588\u2588\u256c\u256c\u256c\u2588\u256c\\n * \u256c\u2588\u256c\u256c\u2588\u2588\u2588\u2588\u256c\u2588\u256c\u256c\u2562\u2588\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u2588\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u2588\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u2588\u256c\u2563\u2588\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u2588\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u256c\u2588\u256c\\n * \u256c\u2588\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u2562\u2588\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u2588\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u2588\u256c\u2563\u2588\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u2588\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\\n * \u256c\u2588\u256c\u256c\u2588\u2588\u2588\u2588\u256c\u2588\u256c\u256c\u2562\u2588\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u2588\u256c\u2588\u2562\u256c\u256c\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u2588\u256c\u2588\u256c\u2563\u2588\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u2588\u256c\u2563\u2588\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u2588\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u2563\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u256c\\n * \u256c\u2588\u256c\u256c\u2588\u256c\u256c\u256c\u2563\u2588\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u2563\u2588\u256c\u256c\u256c\u2588\u256c\u2588\u2563\u2588\u256c\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u2588\u256c\u2563\u2588\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u2588\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u2588\u256c\\n * \u256c\u2588\u256c\u256c\u2588\u256c\u256c\u256c\u256c\u2588\u256c\u256c\u256c\u2588\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u2588\u256c\u256c\u2563\u2588\u256c\u2588\u2563\u2588\u2588\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u2588\u2588\u256c\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u2588\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u2588\u256c\u2563\u2588\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u256c\u2588\u256c\u256c\u2563\u2588\u256c\u2588\u256c\u2563\u2588\u256c\u256c\u256c\u256c\u256c\u2588\u256c\\n * \u256c\u2588\u256c\u256c\u2588\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u256c\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u256c\u2588\u256c\u2563\u2588\u2588\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u2563\u256c\u256c\u2588\u2588\u256c\u2588\u256c\u256c\u2588\u256c\u256c\u2588\u256c\u2588\u256c\u256c\u256c\u2588\u256c\u256c\u2588\u256c\u2563\u2563\u2588\u256c\u2563\u2588\u2563\u2563\u2563\u256c\u2588\u2563\u256c\u2588\u256c\u256c\u256c\u2588\u2588\u256c\u256c\u256c\u2588\u256c\\n * \u256c\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u256c\u256c\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u2588\u2588\u2588\u256c\u256c\u2588\u2588\u2588\u256c\u256c\u2588\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u256c\u2588\u2588\u2588\u256c\u2588\u2588\u2588\u256c\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u2588\u2588\u2588\u2588\u2588\u256c\u256c\u2563\u2588\u2588\u2588\u2588\u2563\u256c\u256c\u2588\u2588\u2588\u2588\u256c\u2588\u2588\u2588\u2588\u256c\u256c\\n * \u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\u256c\\n *\\n * He who rules the AI, rules the future.\\n *\\n * Homepage: https://based.foundation\\n *\\n */\\n \\nabstract contract Initializable {\\n    struct InitializableStorage {\\n        uint64 _initialized;\\n        bool _initializing;\\n    }\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n    error InvalidInitialization();\\n    error NotInitializing();\\n    event Initialized(uint64 version);\\n    modifier initializer() {\\n        InitializableStorage storage $ = _getInitializableStorage();\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n    modifier reinitializer(uint64 version) {\\n        InitializableStorage storage $ = _getInitializableStorage();\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n    function _disableInitializers() internal virtual {\\n        InitializableStorage storage $ = _getInitializableStorage();\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n    error OwnableUnauthorizedAccount(address account);\\n    error OwnableInvalidOwner(address owner);\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\ninterface IERC20Errors {\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n    error ERC20InvalidSender(address sender);\\n    error ERC20InvalidReceiver(address receiver);\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n    error ERC20InvalidApprover(address approver);\\n    error ERC20InvalidSpender(address spender);\\n}\\ninterface IERC721Errors {\\n    error ERC721InvalidOwner(address owner);\\n    error ERC721NonexistentToken(uint256 tokenId);\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n    error ERC721InvalidSender(address sender);\\n    error ERC721InvalidReceiver(address receiver);\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n    error ERC721InvalidApprover(address approver);\\n    error ERC721InvalidOperator(address operator);\\n}\\ninterface IERC1155Errors {\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n    error ERC1155InvalidSender(address sender);\\n    error ERC1155InvalidReceiver(address receiver);\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n    error ERC1155InvalidApprover(address approver);\\n    error ERC1155InvalidOperator(address operator);\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\ninterface IERC20 {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address to, uint256 value) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 value) external returns (bool);\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\ninterface IERC20Metadata is IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n}\\nabstract contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20, IERC20Metadata, IERC20Errors {\\n    struct ERC20Storage {\\n        mapping(address account => uint256) _balances;\\n        mapping(address account => mapping(address spender => uint256)) _allowances;\\n        uint256 _totalSupply;\\n        string _name;\\n        string _symbol;\\n    }\\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\\n        assembly {\\n            $.slot := ERC20StorageLocation\\n        }\\n    }\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        $._name = name_;\\n        $._symbol = symbol_;\\n    }\\n    function name() public view virtual returns (string memory) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._name;\\n    }\\n    function symbol() public view virtual returns (string memory) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._symbol;\\n    }\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n    function totalSupply() public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._totalSupply;\\n    }\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._balances[account];\\n    }\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._allowances[owner][spender];\\n    }\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        if (from == address(0)) {\\n            $._totalSupply += value;\\n        } else {\\n            uint256 fromBalance = $._balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                $._balances[from] = fromBalance - value;\\n            }\\n        }\\n        if (to == address(0)) {\\n            unchecked {\\n                $._totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                $._balances[to] += value;\\n            }\\n        }\\n        emit Transfer(from, to, value);\\n    }\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        $._allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\ninterface IERC20VEST {\\n    function mintVESTByVESTContract(address to, uint256 amount) external;\\n}\\ninterface IERC20STAKE {\\n    function mintSTAKEByVESTContract(address to, uint256 amount) external;\\n}\\ninterface IUniswapV2Factory {\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n}\\ninterface IUpgradedVesting {\\n    function doEthToVest(address useSender) payable external;  \\n}\\ninterface IHelperContract {\\n    function updatePriceHistory() external;\\n    function getBuyPrice() external view returns (uint256);\\n    function doGetChadReleasableByReserves(uint256 additionalTimeReleasableVEST, uint256 useThresholdCapEth, uint256 CHAD_TOTAL_SUPPLY_WEI) external returns (uint256 reservesReleasableVEST);\\n    function setbuyDiscountFrac1k(uint256 _buyDiscountFrac1k) external;\\n    function reInitialize(uint256 firstPriceEth\\n\\t\\t\\t ) external;\\n}\\ninterface ICloneFactory {\\n    function feeTo() external view returns (address);\\n    function owner() external view returns (address);\\n}\\ncontract BasedMarket is Initializable, OwnableUpgradeable      {\\n    bool private initialized;  \\n    bool internal locked;\\n    modifier nonReentrantIsSim(bool isSim) {\\n\\tif (!isSim){\\n\\t    require(!locked,\\\"REENTRANT_ISSIM\\\");\\n\\t    locked = true;\\n\\t}\\n\\t_;\\n\\tif (!isSim){\\n\\t    locked = false;\\n\\t}\\n    }\\n    modifier nonReentrant() {\\n\\trequire(!locked,'REENTRANT');\\n\\tlocked = true;\\n\\t_;\\n\\tlocked = false;\\n    }\\n    bool internal lockedInner;\\n    modifier nonReentrantInner() {\\n\\trequire(!lockedInner,\\\"REENTRANT_INNER\\\");\\n\\tlockedInner = true;\\n\\t_;\\n\\tlockedInner = false;\\n    }\\n    address     private factoryAddress;\\n    IERC20      private chadToken;\\n    IERC20VEST  private vestToken;\\n    IERC20STAKE private stakeToken;\\n    address private helperContract;  \\n    address private uniswapV2Pair;\\n    bool private useAutoPricing;\\n    bool private salesLive;\\n    address private replacementAddress;\\n    uint32 private curLastMaturityChunk;\\n    uint32 public individualRefundChunks;\\n    uint32 public  vestDurationChunks;\\n    uint32 public  vestDurationChunksManual;\\n    address[] public allBeneficiaries;\\n    uint256 public allBeneficiariesCount;\\n    uint256 private CUR_TOTAL_CHAD_PURCHASED;  \\n    uint256 private TOTAL_CHAD_FOR_SALE_CAP;  \\n    uint256 private CHAD_TOTAL_SUPPLY_WEI;\\n    uint256 private POST_CAP_THRESHOLD_ETH; \\n    uint256 private buyPriceEthPerVest;    \\n    uint32  public  blocksPerChunk;\\n    uint32  private maxChunksPerStaking;\\n    uint256 private fracStakingRewards1k;\\n    bool private allowEarlyChadLockin;\\n    bool private liquiditySensitive;\\n    uint256 unlockThreshDiscountFrac1k;\\n    struct DECStruct {\\n        uint64 a_inChadExternalSellers;  \\n        uint64 a_inChadDisembursedToSellers;\\n        uint64 a_outChadUndecided;\\n        uint64 a_outEthUndecided;\\n        uint64 a_inEthDisembursedStakersRefund;\\n        uint64 a_outChadExternalSellers;\\n\\tuint64 a_outChadRecycle;\\n        uint64 a_inChadUndecided;\\n        uint64 a_outEthExternalBuyers;\\n        uint64 a_inEthUndecided;\\n        uint64 a_inEthSellersEarly;\\n        uint64 a_inEthStakeHoldersEarly;\\n        uint64 a_outChadVestHolders;\\n        uint64 a_inChadDisembursedHolders;\\n        uint64 a_inChadVestHolders;\\n\\tuint64 a_inChadVestHoldersEarly;\\n        uint64 a_inEthSellers;\\n        uint64 a_inEthStakeHolders;\\n        uint64 a_outEthStakeHolders;\\n        uint64 a_inEthDisembursedStakersRewards;\\n    }\\n    DECStruct public DEC;\\n    bool doDoubleAccountingChecks;\\n    uint32 lastFinalizedRewardsChunkUpdated;\\n    bool allowEarlyStakingPayouts;\\n    uint256 private vestIdSeq;\\n    struct VESTingSchedule {\\n        uint256 vestId;               \\n        uint256 amtETH;               \\n        uint32 createdChunk;          \\n        uint32 endRefundsChunk;       \\n        uint256 amountTotalVEST;      \\n        uint256 releasedVEST;         \\n        uint256 refundedVEST;         \\n        uint256 refundedETH;          \\n        bool cancelled;               \\n        bool vestToChadEarly;         \\n        bool isManual;\\n    }\\n    struct VESTingDetail {\\n        uint256 index;\\n        VESTingSchedule schedule;\\n    }\\n    mapping(address => mapping(uint256 => VESTingSchedule)) private vestedUserDetail;\\n    mapping(address => uint256) private holdersVESTingCount;\\n    struct AddressIndexPair {\\n        address addr;\\n        uint idx;\\n    }\\n    AddressIndexPair[] private vestedUserDetailByAddressIndex;\\n    mapping(uint32 => uint256) private stake_block_tot_held_eth_early;    \\n    mapping(uint32 => uint256) private stake_block_tot_held_chad_early;    \\n    mapping(uint32 => uint256) private stake_block_tot_held_eth;    \\n    mapping(uint32 => mapping(address => uint256)) private stake_block_holder_nonheld_eth;    \\n    mapping(uint32 => uint256) private stake_block_tot_nonheld_eth;\\n    mapping(uint32 => mapping(address => uint256)) private stake_block_who_reward_already_paid_eth;  \\n    mapping(uint32 => mapping(address => uint256)) private stake_block_who_early_held_paid_eth;\\n    mapping(uint32 => uint256) private stake_block_tot_held_chad;\\n    mapping(uint32 => uint256) private stake_block_tot_refunded_eth;\\n    event EthToVest(address user,\\n\\t\\t    uint256 vestId,\\n\\t\\t    uint256 spentEth,\\n\\t\\t    uint256 numberOfVEST,\\n\\t\\t    uint32 _startingChunk,\\n\\t\\t    uint32 _endRefundsChunk,\\n\\t\\t    bool _isManual\\n                   );\\n    event VestToChad(address user,\\n\\t\\t     uint256 releasedSoFarNow,\\n\\t\\t     uint256 additionalTimeReleasableVEST,\\n\\t\\t     uint256 reservesReleasableVEST,\\n\\t\\t     uint256 reservesEth,\\n\\t\\t     uint256 reservesChad,\\n\\t\\t     uint256 totalRefundableVest\\n\\t\\t    );\\n    event VestToEth(address user,\\n\\t\\t    uint256 totalRefundableNowVest,\\n\\t\\t    uint256 totalRefundableNowEth\\n\\t\\t   );\\n    event VestToChadEarly(address beneficiary,\\n\\t\\t\\t  uint256 totEarlyLockedChad,\\n\\t\\t\\t  uint256 totEarlyLockedEth\\n\\t\\t\\t );\\n    event StakeToEth(address user,\\n\\t\\t    uint256 releasableMyRewardsEth,\\n\\t\\t    uint256 myTotalEverRewardsEth\\n\\t\\t    );\\n    event StakeToEthEarly(address beneficiary,\\n\\t\\t\\t  uint32 xChunk,\\n\\t\\t\\t  uint256 thisChunkMyRewardsEth,\\n\\t\\t\\t  uint256 everyoneHoldersThisChunk,\\n\\t\\t\\t  uint256 everyonesStakeThisChunk,\\n\\t\\t\\t  uint256 earlyHoldersThisChunk,\\n\\t\\t\\t  uint256 myAlreadyPaidThisChunk\\n\\t\\t\\t );\\n    event SellerWithdrewChad(uint256 amountChadOut,\\n\\t\\t\\t     uint256 new_TOTAL_CHAD_FOR_SALE_CAP,\\n\\t\\t\\t     uint64 a_inChadUndecided,\\n\\t\\t\\t     uint64 a_outChadRecycle,\\n\\t\\t\\t     uint64 a_inChadDisembursedHolders\\n\\t\\t\\t    );\\n    event SellerDepositedChad(uint256 amountChad,\\n\\t\\t\\t      uint256 new_TOTAL_CHAD_FOR_SALE_CAP,\\n\\t\\t\\t      uint256 CUR_TOTAL_CHAD_PURCHASED,\\t\\t\\t      \\n\\t\\t\\t      uint256 TOTAL_CHAD_FOR_SALE_CAP,\\n\\t\\t\\t      address sellerAddress,\\n\\t\\t\\t      uint256 initialPrice,\\n\\t\\t\\t      bool _useAutoPricing\\n\\t\\t\\t       );\\n    event SellerPaidEthEarly(uint256 totalToPaySellerLate,\\n\\t\\t\\t     address sellerAddress\\n\\t\\t\\t    );\\n    event SellerPaidEthLate(uint256 totalToPaySellerLate,\\n\\t\\t\\t    address sellerAddress\\n\\t\\t\\t   );\\n    uint256 constant SE  = 15;\\n    uint256 constant SC  = 32;\\n    bool private isInternalCall;  \\n    bool private rewardEarlyChunks;\\n    address private WETH_ADDRESS;\\n    address[] private oldMarketAddresses;\\n    function finishInitialize(address _vestToken,\\n\\t\\t\\t      address _stakeToken,\\n\\t\\t\\t      address _uniswapV2Pair,\\n\\t\\t\\t      address _WETH_ADDRESS,\\n\\t\\t\\t      address _helperContract,\\n\\t\\t\\t      uint256 firstPriceEth\\n\\t\\t\\t     ) public onlyFactoryOwner\\n    {\\n\\trequire(msg.sender == factoryAddress, 'ONLY_CLONE_FACTORY');\\n        vestToken = IERC20VEST(_vestToken);\\n        stakeToken = IERC20STAKE(_stakeToken);\\n        uniswapV2Pair = address(_uniswapV2Pair); \\n        helperContract = _helperContract;\\n\\tWETH_ADDRESS = _WETH_ADDRESS;\\n\\tbuyPriceEthPerVest = firstPriceEth;\\n\\tif (firstPriceEth > 0){\\n            liquiditySensitive = true;\\n\\t}\\n\\tsalesLive = false;  \\n    }\\n    function initialize(address _creatorOwner,\\n    \\t\\t\\taddress _factoryAddress,\\n\\t\\t\\taddress _chadToken,\\n\\t\\t\\tuint32 _blocksPerChunk,                          \\n\\t\\t\\tuint32 _individualRefundChunks,                  \\n\\t\\t\\tuint32 _maxChunksPerStaking,                     \\n\\t\\t\\tuint32 _vestDurationChunks,                     \\n\\t\\t\\tuint32 _vestDurationChunksManual,\\n\\t\\t\\tuint256 _fracStakingRewards1k,           \\n\\t\\t\\tuint256 _unlockThreshDiscountFrac1k,                \\n\\t\\t\\tbool _useAutoPricing,             \\n\\t\\t\\tuint256 _CHAD_TOTAL_SUPPLY_WEI,  \\n\\t\\t\\tuint256 _POST_CAP_THRESHOLD_ETH,                       \\n\\t\\t\\tbool _allowEarlyChadLockin,                    \\n\\t\\t\\tbool _rewardEarlyChunks,\\n\\t\\t\\tbool _allowEarlyStakingPayouts,\\t\\t\\t\\n\\t\\t\\tbool _doDoubleAccountingChecks               \\n\\t\\t       ) public initializer\\n    {\\n\\trequire(!initialized, \\\"Contract already initialized\\\");  \\n\\t__Ownable_init(_creatorOwner);\\n\\tinitialized = true;  \\n\\trequire(_factoryAddress != address(0), \\\"ZERO_FACTORY_ADDRESS\\\");\\n\\tfactoryAddress = _factoryAddress;\\n\\tvestIdSeq = 1;\\n        chadToken = IERC20(_chadToken);\\n        blocksPerChunk         = _blocksPerChunk;                    \\n        individualRefundChunks = _individualRefundChunks;                    \\n        maxChunksPerStaking    = _maxChunksPerStaking;                    \\n        vestDurationChunks     = _vestDurationChunks;                    \\n\\tvestDurationChunksManual  = _vestDurationChunksManual;\\n        fracStakingRewards1k =  _fracStakingRewards1k;           \\n\\tunlockThreshDiscountFrac1k = _unlockThreshDiscountFrac1k;                \\n\\tuseAutoPricing = _useAutoPricing;             \\n        CHAD_TOTAL_SUPPLY_WEI = _CHAD_TOTAL_SUPPLY_WEI;  \\n        POST_CAP_THRESHOLD_ETH = _POST_CAP_THRESHOLD_ETH;                       \\n        allowEarlyChadLockin = _allowEarlyChadLockin;                    \\n        rewardEarlyChunks = _rewardEarlyChunks;\\n        uint32 currentChunk = uint32(block.number / blocksPerChunk);\\n        lastFinalizedRewardsChunkUpdated = currentChunk - 1;\\n\\tcurLastMaturityChunk = currentChunk;\\n        allowEarlyStakingPayouts = _allowEarlyStakingPayouts;\\n        doDoubleAccountingChecks = _doDoubleAccountingChecks;               \\n    }\\n    function checkOnlyVESTTokenOrThisOrHelper() internal view{\\n    }\\n    modifier onlyVESTTokenOrThisOrHelper {\\n    \\tcheckOnlyVESTTokenOrThisOrHelper();\\n        _;\\n    }\\n    function checkOnlySTAKETokenOrThisOrHelper() internal view{\\n    }\\n    modifier onlySTAKETokenOrThisOrHelper {\\n        checkOnlySTAKETokenOrThisOrHelper(); \\n        _;\\n    }\\n    function checkOnlyFactoryOwner() internal view{\\n        require(msg.sender == factoryAddress || msg.sender == address(this) || msg.sender == address(helperContract) || msg.sender == ICloneFactory(factoryAddress).owner() ,\\\"MODIFIER_FAIL_6\\\");\\n    }\\n    modifier onlyFactoryOwner() {\\n\\tcheckOnlyFactoryOwner();\\n        _;\\n    }\\n    function setVestedUserDetail(address user, uint256 index, VESTingSchedule memory schedule) external onlyFactoryOwner {\\n        vestedUserDetail[user][index] = schedule;\\n    }\\n    function setHoldersVESTingCount(address user, uint256 count) external onlyFactoryOwner {\\n        holdersVESTingCount[user] = count;\\n    }\\n    function getVestedUserDetail(address user, uint256 index) external view returns (VESTingSchedule memory) {\\n        return vestedUserDetail[user][index];\\n    }\\n    function getHoldersVESTingCount(address user) external view returns (uint256) {\\n        return holdersVESTingCount[user];\\n    }\\n    function xSE(uint256 x) internal pure returns (uint64) {\\n        return uint64(x >> 15);\\n    }\\n    function xSC(uint256 x) internal pure returns (uint64) {\\n        return uint64(x >> 32);\\n    }\\n    function uSE(uint64 x) internal pure returns (uint256) {\\n        return uint256(x) << 15;\\n    }\\n    function uSC(uint64 x) internal pure returns (uint256) {\\n        return uint256(x) << 32;\\n    }\\n    function uSExSE(uint256 x) internal pure returns (uint256) {\\n        return (x >> 15) << 15;\\n    }\\n    function uSCxSC(uint256 x) internal pure returns (uint256) {\\n        return (x >> 32) << 32;\\n    }\\n    receive() external payable   {\\n        isInternalCall = true;\\n        if (msg.sender != owner()) {\\n            if (replacementAddress != address(0)){\\n                IUpgradedVesting(replacementAddress).doEthToVest{value: msg.value}(msg.sender);\\n            }\\n            else{\\n                doEthToVest(msg.sender); \\n            }\\n        }\\n        isInternalCall = false;\\n    }\\n    function setDEC(DECStruct memory newDEC) external onlyFactoryOwner {\\n        DEC = newDEC;\\n    }\\n    function cancelManualEthToVest(address beneficiary, uint256 vestNum) external onlyFactoryOwner  {\\n        VESTingSchedule storage vestingSchedule = vestedUserDetail[beneficiary][vestNum];\\n        vestingSchedule.cancelled = true;\\n    }\\n    function batchManualEthToVest(\\n        address[] memory users, \\n        uint256[] memory amountsVEST, \\n        uint256[] memory spentsETH\\n    ) external onlyVESTTokenOrThisOrHelper {\\n        require(users.length == amountsVEST.length && amountsVEST.length == spentsETH.length, \\\"ARRAY_LENGTH_MISMATCH\\\");\\n        uint32 currentChunk = uint32(block.number / blocksPerChunk);            \\n        uint256 vestEndRefundsChunk = currentChunk - 1;  \\n\\tuint256 xTotalVest;\\n\\tuint256 xTotalEth;\\n        for (uint i = 0; i < users.length; i++) {\\n            xTotalVest += amountsVEST[i];\\n            xTotalEth += spentsETH[i];\\n            createVESTingSchedule(users[i],\\n\\t\\t\\t\\t  spentsETH[i],  \\n\\t\\t\\t\\t  uint32(currentChunk),  \\n\\t\\t\\t\\t  uint32(vestEndRefundsChunk), \\n\\t\\t\\t\\t  amountsVEST[i],\\n\\t\\t\\t\\t  true  \\n\\t\\t\\t\\t );\\n            IERC20VEST(vestToken).mintVESTByVESTContract(users[i], amountsVEST[i]);\\n        }\\n\\tCUR_TOTAL_CHAD_PURCHASED += xTotalVest;\\t    \\n        TOTAL_CHAD_FOR_SALE_CAP += xTotalVest;  \\n        DEC.a_outChadExternalSellers += xSC(xTotalVest);   \\n        DEC.a_inChadUndecided += xSC(xTotalVest);\\n        DEC.a_outEthExternalBuyers += xSE(xTotalEth);   \\n        DEC.a_inEthUndecided += xSE(xTotalEth);\\t    \\n    }\\n    function simEthToVest(uint256 amt_eth)\\n    public\\n    view\\n    returns (\\n\\tuint256 refundNowEth,\\n\\tuint256 adjustedSpentEth,\\n\\tuint256 numberOfVEST,\\n        uint32 vestEndRefundsChunk,\\n        uint32 currentChunk,\\n        uint256 currentBlock\\n    )\\n    {\\n\\tuint256 usePrice;\\n\\tif (useAutoPricing){\\n\\t    usePrice = IHelperContract(helperContract).getBuyPrice();\\n\\t} else {\\n\\t    usePrice = buyPriceEthPerVest;\\n\\t}\\n        uint256 chadRemaining = TOTAL_CHAD_FOR_SALE_CAP - CUR_TOTAL_CHAD_PURCHASED;\\n\\tuint256 tempNumberOfVest = (amt_eth * 10**18 / usePrice);  \\n        numberOfVEST = (tempNumberOfVest < chadRemaining) ? tempNumberOfVest : chadRemaining;\\n        adjustedSpentEth = numberOfVEST * usePrice / 10**18;  \\n        refundNowEth = amt_eth - adjustedSpentEth;\\n        currentBlock = block.number;\\n        currentChunk = uint32(block.number / blocksPerChunk);\\t\\n        vestEndRefundsChunk = currentChunk + individualRefundChunks;\\n        return (refundNowEth, adjustedSpentEth, numberOfVEST, vestEndRefundsChunk, currentChunk, currentBlock);\\n    }\\n    function batchDoEthToVest(address[] memory users, uint256[] memory valuesEth) public payable   {\\n        require(users.length == valuesEth.length, \\\"ARRAY_LENGTH_MISMATCH\\\");\\n        uint256 totalValueETH = 0;\\n        for(uint i = 0; i < valuesEth.length; i++) {\\n            totalValueETH += valuesEth[i];\\n        }\\n        require(totalValueETH == msg.value, \\\"BAD_TOTAL_ETH\\\");\\n        for(uint i = 0; i < users.length; i++) {\\n            doEthToVestInternal(users[i], valuesEth[i]);\\n        }\\n    }\\n    function doEthToVest(address user) public payable    {\\n        doEthToVestInternal(user, msg.value);\\n    }\\n    function doEthToVestInternal(address user, uint256 valueEth) internal nonReentrant()  {\\n        require(salesLive, \\\"SALES_NOT_LIVE\\\");\\n\\tuint256 feeAmt;\\n\\tif (factoryAddress != address(0)){\\n\\t    address sendFeeTo = ICloneFactory(factoryAddress).feeTo();\\n\\t    if (sendFeeTo != address(0)){\\n\\t\\tfeeAmt = valueEth * 5 / 1000;\\n\\t\\tvalueEth -= feeAmt;\\n\\t\\tpayable(sendFeeTo).transfer(feeAmt);\\n\\t    }\\n\\t}\\t\\t\\n        (uint256 refundNowEth,\\n         uint256 adjustedSpentEth,\\n         uint256 numberOfVEST,\\n         uint32 vestEndRefundsChunk,\\n         uint32 currentChunk,\\n        ) = simEthToVest(valueEth);\\n        require(numberOfVEST != 0, \\\"ZERO_ETH_SOLD\\\");\\n        if (refundNowEth > 0) {\\n            payable(user).transfer(refundNowEth);  \\n        }\\n        createVESTingSchedule(user,   uint256(adjustedSpentEth), uint32(currentChunk), uint32(vestEndRefundsChunk), uint256(numberOfVEST),   false);\\n        IERC20VEST(vestToken).mintVESTByVESTContract(user,numberOfVEST);\\n        IHelperContract(helperContract).updatePriceHistory();\\n    }\\n    function checkChadReservesInvariant() internal view {\\n\\tuint256 reservedChad = uSC((DEC.a_inChadUndecided) - (DEC.a_inChadDisembursedHolders + DEC.a_outChadRecycle));\\n\\tuint256 chadBalance = IERC20(chadToken).balanceOf(address(this));\\n\\tuint256 reservesImpliedRoundCap = CUR_TOTAL_CHAD_PURCHASED + chadBalance - reservedChad;\\n\\trequire(reservesImpliedRoundCap >= TOTAL_CHAD_FOR_SALE_CAP, 'CHAD_RESERVES_INV');  \\n    }\\n    function createVESTingSchedule(\\n        address _beneficiary,\\n        uint256 adjustedSpentEth,\\n        uint32 _startingChunk,\\n        uint32 _endRefundsChunk, \\n        uint256 numberOfVEST,\\n        bool _isManual\\n    ) public onlyVESTTokenOrThisOrHelper   {\\n        require((numberOfVEST > 0 && adjustedSpentEth > 0), \\\"UNEXPECTED_ZERO\\\");\\n        uint256 curVestIdSeq = vestIdSeq++;\\n        uint256 currentVESTingIndex = holdersVESTingCount[_beneficiary]++;\\n\\tif (currentVESTingIndex == 1){\\n\\t    allBeneficiaries.push(_beneficiary);\\n\\t    allBeneficiariesCount += 1;\\n\\t}\\n        VESTingSchedule storage newVestSchedule = vestedUserDetail[_beneficiary][currentVESTingIndex];\\n        newVestSchedule.vestId = curVestIdSeq;\\n        newVestSchedule.amtETH = adjustedSpentEth;\\n        newVestSchedule.endRefundsChunk=   _endRefundsChunk;   \\n        newVestSchedule.amountTotalVEST =   numberOfVEST;\\n        newVestSchedule.createdChunk =  _startingChunk; \\n        newVestSchedule.isManual = _isManual;\\n        vestedUserDetailByAddressIndex.push(AddressIndexPair(_beneficiary, currentVESTingIndex));\\n        if (!_isManual) {\\n            CUR_TOTAL_CHAD_PURCHASED += numberOfVEST;\\n            uint32 chunk = _startingChunk; \\n            stake_block_tot_held_eth[chunk] += adjustedSpentEth;\\n            stake_block_tot_held_chad[chunk] += numberOfVEST;\\n\\t}\\n        if (!_isManual) {\\n            DEC.a_outChadExternalSellers += xSC(numberOfVEST);   \\n            DEC.a_inChadUndecided += xSC(numberOfVEST);\\n            DEC.a_outEthExternalBuyers += xSE(adjustedSpentEth);   \\n            DEC.a_inEthUndecided += xSE(adjustedSpentEth);\\n\\t}\\n\\tif (!_isManual){  \\n\\t    if (_endRefundsChunk > curLastMaturityChunk) {\\n\\t\\tcurLastMaturityChunk = _endRefundsChunk;  \\n\\t    }\\n\\t}\\n\\temit EthToVest(_beneficiary,\\n\\t\\t       curVestIdSeq,\\n\\t\\t       adjustedSpentEth,\\n\\t\\t       numberOfVEST,\\n\\t\\t       _startingChunk,\\n\\t\\t       _endRefundsChunk,\\n\\t\\t       _isManual\\n                      );\\n    }\\n    function getVestingTableRange(uint startIndex, uint endIndex) public view returns (\\n        VESTingSchedule[] memory rangeData\\n    ) {\\n        require((startIndex < endIndex) && (endIndex <= vestedUserDetailByAddressIndex.length), \\\"BAD_RANGE\\\");\\n        uint rangeSize = endIndex - startIndex;\\n        rangeData = new VESTingSchedule[](rangeSize);\\n        for (uint i = 0; i < rangeSize; i++) {\\n            AddressIndexPair memory pair = vestedUserDetailByAddressIndex[startIndex + i];\\n            rangeData[i] = vestedUserDetail[pair.addr][pair.idx];\\n        }\\n        return rangeData;\\n    }\\n    function doVestToChad(address beneficiary, uint256 requestedReleasedVest, bool allowEarlyCommit, bool useOnlyVestNum, uint256 onlyVestNum, bool isSim) external    nonReentrantIsSim(isSim) returns (\\n        uint256 releasedSoFarNow,\\n        uint256 additionalTimeReleasableVEST,\\n        uint256 reservesReleasableVEST,\\n        uint256 reservesEth,\\n        uint256 reservesChad\\n    ) {\\t\\n        if (!isSim){\\n            require(salesLive, \\\"SALES_NOT_LIVE\\\");\\n\\t    checkOnlyVESTTokenOrThisOrHelper();\\n            advanceUpstreamAccounting();\\n        }\\n        if (requestedReleasedVest == 0) {\\n            requestedReleasedVest = CHAD_TOTAL_SUPPLY_WEI;\\n        }\\n\\trequestedReleasedVest = uSCxSC(requestedReleasedVest);  \\n        uint32 currentChunk = uint32(block.number / blocksPerChunk);\\n        uint256 totalSpentEth;\\n        uint256 totalGotVest;\\n\\tuint256 totalRefundableVest;\\n        uint256 totalReleasedAndRefundedVest = 0;\\n        uint256 prevAdditionalTimeReleasableVEST = 0;  \\n        bool triggeredEarlyLockin = false;\\n        uint256 vestingCount = holdersVESTingCount[beneficiary];\\n        uint256 startIdx = 0;\\n        uint256 endIdx = vestingCount;\\n        if (useOnlyVestNum) {\\n            require(onlyVestNum < vestingCount, \\\"INVALID_VESTING_SCHEDULE_NUMBER\\\");\\n            startIdx = onlyVestNum;\\n            endIdx = onlyVestNum + 1;  \\n        }\\n\\tuint256 totEarlyLockedChad;\\n\\tuint256 totEarlyLockedEth;\\n        for (uint256 i = startIdx; i < endIdx; i++) {   \\n            VESTingSchedule storage vestingSchedule = vestedUserDetail[beneficiary][i];\\n            totalGotVest += vestingSchedule.amountTotalVEST;\\n            totalReleasedAndRefundedVest += (vestingSchedule.releasedVEST + vestingSchedule.refundedVEST);\\n            if (vestingSchedule.cancelled) {\\n                continue;\\n            }\\n            if (currentChunk < vestingSchedule.endRefundsChunk) {\\n\\t\\tif (vestingSchedule.amountTotalVEST >= vestingSchedule.refundedVEST + vestingSchedule.releasedVEST) {\\n\\t\\t    totalRefundableVest += vestingSchedule.amountTotalVEST - vestingSchedule.refundedVEST - vestingSchedule.releasedVEST;\\n\\t\\t}\\n\\t    }\\n            uint256 releasableBasedOnTime = 0;\\n\\t    uint256 thisRemVest = 0;\\n\\t    if (vestingSchedule.amountTotalVEST >= vestingSchedule.refundedVEST + vestingSchedule.releasedVEST) {\\n\\t\\tthisRemVest = vestingSchedule.amountTotalVEST - vestingSchedule.refundedVEST;  \\n\\t    } \\n\\t    uint256 useVestDurationChunks;\\n\\t    if (vestingSchedule.isManual){\\n\\t\\tuseVestDurationChunks = vestDurationChunksManual;\\n\\t    } else {\\n\\t\\tuseVestDurationChunks = vestDurationChunks;\\n\\t    }\\n            if (currentChunk < vestingSchedule.endRefundsChunk) {\\n                if (allowEarlyChadLockin && allowEarlyCommit) {\\n                    if (!isSim){\\n                        vestingSchedule.endRefundsChunk = currentChunk;\\n                        vestingSchedule.vestToChadEarly = true;\\n                    }\\n                    releasableBasedOnTime = 0;  \\n                    triggeredEarlyLockin = true;\\n                    uint256 origBuyPrice = (vestingSchedule.amtETH * 1e18) / vestingSchedule.amountTotalVEST;\\n                    uint256 earlyLockedChad = thisRemVest - vestingSchedule.releasedVEST;  \\n                    uint256 earlyLockedEth = earlyLockedChad * origBuyPrice / 1e18;\\n\\t\\t    totEarlyLockedChad += earlyLockedChad;\\n\\t\\t    totEarlyLockedEth += earlyLockedEth;\\n                    if (!isSim){\\n                        uint32 vChunk = vestingSchedule.createdChunk;\\n                        stake_block_tot_held_eth_early[vChunk] += earlyLockedEth;\\n                        stake_block_tot_held_chad_early[vChunk] += earlyLockedChad;  \\n                        uint256 ethValueStaker = earlyLockedEth * fracStakingRewards1k / 1000;\\n                        uint256 ethValueSeller = earlyLockedEth - ethValueStaker;\\n\\t\\t\\tpayable(owner()).transfer(ethValueSeller);  \\n\\t\\t\\temit SellerPaidEthEarly(ethValueSeller,\\n\\t\\t\\t\\t\\t\\towner()\\n\\t\\t\\t\\t\\t       );\\n                        DEC.a_inEthSellersEarly += xSE(ethValueSeller);\\n                        DEC.a_inEthStakeHoldersEarly += xSE(ethValueStaker);\\n\\t\\t\\tDEC.a_inChadVestHoldersEarly += xSC(earlyLockedChad);\\n\\t\\t\\tif (doDoubleAccountingChecks){\\n\\t\\t\\t    require(DEC.a_inEthUndecided >= DEC.a_outEthUndecided, \\\"DEC_8\\\");  \\n\\t\\t\\t    require(DEC.a_inChadUndecided >= DEC.a_outChadUndecided, \\\"DEC_9\\\");  \\n\\t\\t\\t}\\n                    }\\n                } \\n                else {\\n                    releasableBasedOnTime = 0;\\n                }\\n            } else if (currentChunk >= vestingSchedule.endRefundsChunk + useVestDurationChunks) {\\n                releasableBasedOnTime = thisRemVest;\\n            } else {\\n                releasableBasedOnTime = thisRemVest * (currentChunk - vestingSchedule.endRefundsChunk) / useVestDurationChunks;\\n            }\\n\\t    if (additionalTimeReleasableVEST != requestedReleasedVest){  \\n\\t\\tif (releasableBasedOnTime > vestingSchedule.releasedVEST) {\\n\\t\\t    additionalTimeReleasableVEST += releasableBasedOnTime - vestingSchedule.releasedVEST;  \\n\\t\\t} \\n\\t\\tif (additionalTimeReleasableVEST > requestedReleasedVest) {\\n                    totalSpentEth += vestingSchedule.amtETH * (additionalTimeReleasableVEST - prevAdditionalTimeReleasableVEST) / vestingSchedule.amountTotalVEST;\\n                    additionalTimeReleasableVEST = requestedReleasedVest;        \\n\\t\\t} else {\\n\\t\\t    totalSpentEth += vestingSchedule.amtETH;\\n\\t\\t    prevAdditionalTimeReleasableVEST = additionalTimeReleasableVEST;\\n\\t\\t}\\n\\t    }\\n        }\\n\\tif (!isSim){\\n\\t    if (totEarlyLockedChad != 0){\\n\\t\\temit VestToChadEarly(beneficiary,\\n\\t\\t\\t\\t     totEarlyLockedChad,\\n\\t\\t\\t\\t     totEarlyLockedEth\\n\\t\\t\\t\\t    );\\n\\t    } \\n\\t}\\n        additionalTimeReleasableVEST = additionalTimeReleasableVEST < requestedReleasedVest ? additionalTimeReleasableVEST : requestedReleasedVest;\\n\\tif (totalGotVest == 0){\\n            return (releasedSoFarNow,\\n                    additionalTimeReleasableVEST,\\n                    reservesReleasableVEST,\\n                    reservesEth,\\n                    reservesChad\\n\\t\\t   );\\n\\t}\\n        uint256 useThresholdCapEth;\\n        if (POST_CAP_THRESHOLD_ETH > 0) {\\n            useThresholdCapEth = POST_CAP_THRESHOLD_ETH;\\n        } else {\\n            useThresholdCapEth = CHAD_TOTAL_SUPPLY_WEI * totalSpentEth / totalGotVest;\\n\\t    if (unlockThreshDiscountFrac1k != 0){\\n\\t\\tuseThresholdCapEth = useThresholdCapEth * unlockThreshDiscountFrac1k / 1000;  \\n\\t    }\\n        }\\n        if (liquiditySensitive && (additionalTimeReleasableVEST > 0)){\\n\\t    reservesReleasableVEST = IHelperContract(helperContract).doGetChadReleasableByReserves(additionalTimeReleasableVEST, useThresholdCapEth, CHAD_TOTAL_SUPPLY_WEI);\\n        } else {\\n            reservesReleasableVEST = additionalTimeReleasableVEST;\\n        }\\n\\tif (reservesReleasableVEST == 0){\\n            return (releasedSoFarNow,\\n                    additionalTimeReleasableVEST,\\n                    reservesReleasableVEST,\\n                    reservesEth,\\n                    reservesChad\\n\\t\\t   );\\n\\t}\\t\\n        for (uint256 i = 0; i < vestingCount; i++) {\\n            VESTingSchedule storage vestingSchedule = vestedUserDetail[beneficiary][i];\\n            if (vestingSchedule.cancelled) {\\n                continue;\\n            }\\n            uint256 remThis = vestingSchedule.amountTotalVEST - vestingSchedule.releasedVEST - vestingSchedule.refundedVEST;\\n            if (reservesReleasableVEST > releasedSoFarNow) {  \\n\\t\\tuint256 remAll = reservesReleasableVEST - releasedSoFarNow;  \\n                uint256 relThis = remThis < remAll ? remThis : remAll;\\n                if (!isSim){   \\n                    vestingSchedule.releasedVEST += relThis;\\n                }  \\n                releasedSoFarNow += relThis;        \\n                require(vestingSchedule.amountTotalVEST >= vestingSchedule.releasedVEST, \\\"Invalid releasedVEST value\\\");\\n            }\\n        }\\n        if (!isSim){\\n            DEC.a_outChadVestHolders += xSC(releasedSoFarNow);\\n            DEC.a_inChadDisembursedHolders += xSC(releasedSoFarNow);\\n            if (doDoubleAccountingChecks){          \\n\\t\\trequire(DEC.a_inChadVestHolders + DEC.a_inChadVestHoldersEarly >= DEC.a_inChadDisembursedHolders, \\\"DEC_7\\\");  \\n            }\\n        }\\n\\tif (!isSim){\\n\\t    emit VestToChad(beneficiary,\\n\\t\\t\\t    releasedSoFarNow,\\n\\t\\t\\t    additionalTimeReleasableVEST,\\n\\t\\t\\t    reservesReleasableVEST,\\n\\t\\t\\t    reservesEth,\\n\\t\\t\\t    reservesChad,\\n\\t\\t\\t    totalRefundableVest\\n\\t\\t\\t   );\\n\\t}\\n        return (releasedSoFarNow,\\n                additionalTimeReleasableVEST,\\n                reservesReleasableVEST,\\n                reservesEth,\\n                reservesChad\\n               );\\n    }\\n    function advanceUpstreamAccounting() internal nonReentrantInner() {\\n        uint32 currentChunk = uint32(block.number / blocksPerChunk);\\n        uint32 lastMatureChunk = currentChunk - individualRefundChunks;\\n        if (lastFinalizedRewardsChunkUpdated >= lastMatureChunk) {\\n            return;\\n        }\\n\\tuint64 tmp_tot_heldChadThisChunk;\\n\\tuint64 tmp_tot_ethValueSeller;\\n\\tuint32 tmp_lastFinalizedRewardsChunkUpdated;\\n\\tuint32 endChunk = curLastMaturityChunk < lastMatureChunk ? curLastMaturityChunk : lastMatureChunk;\\t\\n\\tif (endChunk <= lastFinalizedRewardsChunkUpdated){\\n\\t    return;\\n\\t}\\n        for (uint32 xChunk = lastFinalizedRewardsChunkUpdated + 1; xChunk < endChunk; xChunk++) {\\n            uint256 heldEthThisChunk  = stake_block_tot_held_eth[xChunk] - stake_block_tot_held_eth_early[xChunk];\\n\\t    if (heldEthThisChunk > 0){\\n\\t\\tuint256 heldChadThisChunk  = stake_block_tot_held_chad[xChunk] - stake_block_tot_held_chad_early[xChunk];  \\n\\t\\ttmp_tot_heldChadThisChunk += xSC(heldChadThisChunk);\\n\\t\\tuint256 ethValueStaker = (heldEthThisChunk * fracStakingRewards1k) / 1000;\\n\\t\\tuint256 ethValueSeller = heldEthThisChunk - ethValueStaker;\\n\\t\\ttmp_tot_ethValueSeller = xSE(ethValueSeller);\\n\\t    }\\n        }\\n        tmp_lastFinalizedRewardsChunkUpdated = lastMatureChunk - 1;  \\n\\tif (tmp_lastFinalizedRewardsChunkUpdated > lastFinalizedRewardsChunkUpdated) {  \\n\\t    if (tmp_tot_ethValueSeller > 0) {  \\n\\t\\tuint256 totalToPaySellerLate = uSE(tmp_tot_ethValueSeller);\\n\\t\\trequire(address(this).balance >= totalToPaySellerLate, \\\"INSUFFICIENT_ETH_ADV.\\\");\\n\\t\\tpayable(owner()).transfer(totalToPaySellerLate);  \\n\\t\\temit SellerPaidEthLate(totalToPaySellerLate,\\n\\t\\t\\t\\t       owner()\\n\\t\\t\\t\\t      );\\n\\t    }\\n\\t    if (tmp_tot_ethValueSeller > 0){\\n\\t\\tDEC.a_outEthUndecided   += tmp_tot_ethValueSeller;\\n\\t\\tDEC.a_inEthSellers      += tmp_tot_ethValueSeller;\\n\\t\\tDEC.a_outEthUndecided   += tmp_tot_ethValueSeller;\\n\\t\\tDEC.a_inEthStakeHolders += tmp_tot_ethValueSeller;\\n\\t\\tDEC.a_outChadUndecided  += tmp_tot_heldChadThisChunk;  \\n\\t\\tDEC.a_inChadVestHolders += tmp_tot_heldChadThisChunk;  \\n\\t    }\\n            if (doDoubleAccountingChecks){\\n\\t\\trequire(DEC.a_inChadUndecided >= DEC.a_outChadUndecided, \\\"DEC_1\\\");  \\n\\t\\trequire(DEC.a_inEthUndecided >= DEC.a_outEthUndecided, \\\"DEC_2\\\");  \\n\\t\\tcheckChadReservesInvariant();  \\n            }\\n\\t    lastFinalizedRewardsChunkUpdated = tmp_lastFinalizedRewardsChunkUpdated;\\n\\t}\\n    }\\n    function doStakeToEth(address beneficiary, bool isSim) external   nonReentrantIsSim(isSim) returns  (\\n        uint256 releasableMyRewardsEth,\\n        uint256 myTotalEverRewardsEth\\n    ) {  \\n\\tif (!isSim){\\n            require(salesLive, \\\"SALES_NOT_LIVE\\\");\\n\\t    checkOnlySTAKETokenOrThisOrHelper();\\n            advanceUpstreamAccounting();\\n        }\\n        uint32 lastMatureChunk = uint32((block.number / blocksPerChunk) - individualRefundChunks);\\n        uint256 thisChunkMyRewardsEth;\\n        uint256 vestingCount;\\n        uint32 lastSeenChunk;  \\n        vestingCount = holdersVESTingCount[beneficiary];\\n        for (uint256 i = 0; i < vestingCount; i++) {\\n            VESTingSchedule storage vestingSchedule = vestedUserDetail[beneficiary][i];\\n            if (vestingSchedule.cancelled) {\\n                continue;\\n            }\\n            uint32 startChunkWide = vestingSchedule.createdChunk;  \\n            uint32 endChunkWide = startChunkWide + maxChunksPerStaking;\\n            if (startChunkWide < lastSeenChunk) {\\n                startChunkWide = lastSeenChunk;\\n            }\\n            if (startChunkWide > endChunkWide) {\\n                continue;\\n            }\\n            for (uint32 xChunk = startChunkWide; xChunk < endChunkWide; xChunk++) {\\n                if (xChunk <= lastSeenChunk) {\\n                    continue;\\n                }\\n                lastSeenChunk = xChunk;\\n\\t\\tuint256 everyonesStakeThisChunk = stake_block_tot_nonheld_eth[xChunk];\\n\\t\\tuint256 everyoneHoldersThisChunk = stake_block_tot_held_eth[xChunk];\\n                if (everyonesStakeThisChunk == 0) {\\n                    continue;\\n                }\\n\\t\\tthisChunkMyRewardsEth = 0;\\n\\t\\tuint256 myStakeThisChunk = stake_block_holder_nonheld_eth[xChunk][beneficiary];\\n                if (xChunk >= lastMatureChunk) {\\n\\t\\t    if (!rewardEarlyChunks){\\n\\t\\t\\tbreak;\\n\\t\\t    } else {\\n\\t\\t\\tif (myStakeThisChunk > 0){\\n\\t\\t\\t    uint256 earlyHoldersThisChunk = stake_block_tot_held_eth_early[xChunk];\\n\\t\\t\\t    uint256 wc_held_eth = earlyHoldersThisChunk;\\n\\t\\t\\t    if (wc_held_eth > 0){\\n\\t\\t\\t\\tuint256 wc_nonheld_eth;\\n\\t\\t\\t\\tif (everyoneHoldersThisChunk + everyonesStakeThisChunk >= earlyHoldersThisChunk) {\\n\\t\\t\\t\\t    wc_nonheld_eth = everyoneHoldersThisChunk + everyonesStakeThisChunk - earlyHoldersThisChunk;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t    wc_nonheld_eth = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (wc_nonheld_eth > 0){\\n\\t\\t\\t\\t    thisChunkMyRewardsEth = (wc_held_eth * myStakeThisChunk * fracStakingRewards1k) / (wc_nonheld_eth * 1000);\\n\\t\\t\\t\\t}\\n\\t\\t\\t    }\\n\\t\\t\\t}\\n\\t\\t    }\\n                } else {\\n                    thisChunkMyRewardsEth = (everyoneHoldersThisChunk * myStakeThisChunk * fracStakingRewards1k) / (everyonesStakeThisChunk * 1000);\\n\\t\\t}\\n\\t\\tmyTotalEverRewardsEth += thisChunkMyRewardsEth;\\n\\t\\treleasableMyRewardsEth = thisChunkMyRewardsEth - stake_block_who_reward_already_paid_eth[xChunk][beneficiary];\\n                if (!isSim){\\n\\t\\t    if (releasableMyRewardsEth > 0){\\n\\t\\t\\tstake_block_who_reward_already_paid_eth[xChunk][beneficiary] += releasableMyRewardsEth;\\n\\t\\t    }\\n\\t\\t}\\n            }\\n        }\\n        if (releasableMyRewardsEth > 0) {\\n            if (!isSim){\\n\\t\\trequire(address(this).balance >= releasableMyRewardsEth, \\\"Contract has insufficient ETH.\\\");\\n                payable(beneficiary).transfer(releasableMyRewardsEth);\\n            }\\n        }\\n        if (!isSim){\\n            DEC.a_outEthStakeHolders += xSE(releasableMyRewardsEth);\\n            DEC.a_inEthDisembursedStakersRewards += xSE(releasableMyRewardsEth);\\n            if (doDoubleAccountingChecks){                \\n                require(DEC.a_inEthStakeHolders + DEC.a_inEthStakeHoldersEarly >= DEC.a_outEthStakeHolders, \\\"DEC_3\\\");  \\n            }\\n        }\\n\\tif (!isSim){\\n\\t    emit StakeToEth(beneficiary,\\n\\t\\t\\t    releasableMyRewardsEth,\\n\\t\\t\\t    myTotalEverRewardsEth\\n\\t\\t\\t   );\\n\\t}\\n        return (releasableMyRewardsEth, myTotalEverRewardsEth);\\n    }\\n    function doVestToEth(address payable beneficiary, uint256 maxVest, bool isSim) external   nonReentrantIsSim(isSim) returns (\\n        uint256 totalRefundableNowVest,\\n        uint256 totalRefundableNowEth\\n    ) {\\t\\n\\tif (!isSim){\\n            require(salesLive, \\\"SALES_NOT_LIVE\\\");\\n\\t    checkOnlyVESTTokenOrThisOrHelper();\\n\\t    advanceUpstreamAccounting();  \\n\\t}\\n        uint32 currentChunk = uint32(block.number / blocksPerChunk);\\n\\tuint256 eth_for_sale = address(this).balance;\\n        if (maxVest == 0) {\\n            maxVest = CHAD_TOTAL_SUPPLY_WEI;\\n        }\\n\\tmaxVest = uSCxSC(maxVest);  \\n        uint256 vestingCount = holdersVESTingCount[beneficiary];\\n        for (uint256 i = 0; i < vestingCount; i++) {\\n            VESTingSchedule storage vestingSchedule = vestedUserDetail[beneficiary][i];\\n            if (vestingSchedule.cancelled) {\\n                continue;\\n            }\\n            uint256 refundableThisVest = 0;\\n            if (currentChunk >= vestingSchedule.endRefundsChunk) {\\n                continue;\\n            }\\n            if (currentChunk < vestingSchedule.endRefundsChunk) {\\n\\t\\tif (vestingSchedule.amountTotalVEST >= vestingSchedule.refundedVEST + vestingSchedule.releasedVEST) {\\n\\t\\t    refundableThisVest = vestingSchedule.amountTotalVEST - vestingSchedule.refundedVEST - vestingSchedule.releasedVEST;\\n\\t\\t} else {\\n\\t\\t    refundableThisVest = 0;\\n\\t\\t}\\n            }\\n                if (totalRefundableNowVest + refundableThisVest > maxVest) {\\n                    refundableThisVest = maxVest - totalRefundableNowVest;\\n                }\\n            uint256  originalBuyPriceEthPerVest = (vestingSchedule.amtETH * 1e18) / vestingSchedule.amountTotalVEST;\\n            uint256 refundableThisEth = refundableThisVest * originalBuyPriceEthPerVest / 1e18;\\n            if (refundableThisVest == 0) {\\n                continue;\\n            }\\n\\t\\ttotalRefundableNowVest += refundableThisVest;\\n\\t\\ttotalRefundableNowEth += refundableThisEth;\\n\\t    if (!isSim){\\n\\t\\tvestingSchedule.refundedVEST += refundableThisVest;\\n\\t\\tvestingSchedule.refundedETH  += refundableThisEth;\\n\\t    }\\n            if (!isSim){  \\n                uint32 chunk = vestingSchedule.createdChunk; \\n                stake_block_tot_held_eth[chunk] -= (stake_block_tot_held_eth[chunk] > refundableThisEth) ? refundableThisEth : stake_block_tot_held_eth[chunk];\\n                stake_block_tot_held_chad[chunk] -= (stake_block_tot_held_chad[chunk] > refundableThisVest) ? refundableThisVest : stake_block_tot_held_chad[chunk];\\n                stake_block_tot_refunded_eth[chunk] += refundableThisEth;\\n                uint32 startChunkNarrow = vestingSchedule.createdChunk + 1;  \\n                uint32 endChunkNarrow = currentChunk;  \\n                if (endChunkNarrow > startChunkNarrow) {\\n                    uint32 intervalWidthNarrow = endChunkNarrow - startChunkNarrow;\\n                    uint256 amtEthPerNarrow = refundableThisEth / intervalWidthNarrow;\\n                    for (uint32 chunk2 = startChunkNarrow; chunk2 < endChunkNarrow; chunk2++) {  \\n                        stake_block_holder_nonheld_eth[chunk2][beneficiary] += amtEthPerNarrow;\\n                        stake_block_tot_nonheld_eth[chunk2] += amtEthPerNarrow;                        \\n                    }\\n                }\\n            }  \\n            if (totalRefundableNowVest == maxVest) {\\n                break;\\n            }\\n        }\\n        if (!isSim){ \\n            require(eth_for_sale >= totalRefundableNowEth, \\\"INSUFFICIENT_ETH_BALANCE.\\\");\\n        }\\n        if (!isSim){  \\n            if (totalRefundableNowVest > 0){\\n\\t\\tbeneficiary.transfer(totalRefundableNowEth);\\n                IERC20STAKE(stakeToken).mintSTAKEByVESTContract(beneficiary,totalRefundableNowVest);\\n\\t\\tDEC.a_outChadUndecided += xSC(totalRefundableNowVest);   \\n\\t\\tDEC.a_outEthUndecided += xSE(totalRefundableNowEth);  \\n\\t\\tDEC.a_inEthDisembursedStakersRefund += xSE(totalRefundableNowEth);\\n\\t\\tTOTAL_CHAD_FOR_SALE_CAP += totalRefundableNowVest;  \\n\\t\\tDEC.a_outChadRecycle += xSC(totalRefundableNowVest);\\n\\t\\tDEC.a_outChadExternalSellers += xSC(totalRefundableNowVest);  \\n\\t\\tif (doDoubleAccountingChecks){\\n                    require(DEC.a_inChadUndecided >= DEC.a_outChadUndecided, \\\"DEC_4\\\");  \\n\\t\\t    checkChadReservesInvariant();  \\n\\t\\t}\\n\\t\\temit VestToEth(beneficiary,\\n\\t\\t\\t       totalRefundableNowVest,\\n\\t\\t\\t       totalRefundableNowEth\\n\\t\\t\\t      );\\n            }\\n\\t}\\n        return (totalRefundableNowVest,\\n                totalRefundableNowEth\\n               );\\n    }\\n    function sellerDepositChad(uint256 amountChad,\\n\\t\\t\\t       uint256 new_TOTAL_CHAD_FOR_SALE_CAP,  \\n\\t\\t\\t       address sellerAddress,\\n\\t\\t\\t       uint256 initialPrice,\\n\\t\\t\\t       bool _useAutoPricing,\\n\\t\\t\\t       uint256 buyDiscountFrac1k\\n\\t\\t\\t      ) public  \\n    {\\n\\trequire(msg.sender == factoryAddress || msg.sender == ICloneFactory(factoryAddress).owner(), 'BAD_CALLER');\\n\\tTOTAL_CHAD_FOR_SALE_CAP = new_TOTAL_CHAD_FOR_SALE_CAP;\\n\\tuint256 chadBalance = IERC20(chadToken).balanceOf(address(this));\\n\\tuint256 reservedChad = uSC((DEC.a_outChadUndecided) - (DEC.a_inChadDisembursedHolders + DEC.a_outChadRecycle));\\n\\trequire(CUR_TOTAL_CHAD_PURCHASED + (chadBalance) - reservedChad >= TOTAL_CHAD_FOR_SALE_CAP, \\\"POST_FAIL_10\\\");\\n\\tif (initialPrice > 0){\\n\\t    buyPriceEthPerVest = initialPrice;\\n\\t    IHelperContract(helperContract).reInitialize(initialPrice);\\n\\t} else {\\n\\t    buyPriceEthPerVest = IHelperContract(helperContract).getBuyPrice();\\n\\t}\\n\\tuseAutoPricing = _useAutoPricing;\\n\\tif (buyDiscountFrac1k > 0){\\n\\t    IHelperContract(helperContract).setbuyDiscountFrac1k(buyDiscountFrac1k);\\n\\t}\\n\\tuseAutoPricing = _useAutoPricing;\\n\\tsalesLive = true;\\n\\tDEC.a_inChadExternalSellers += xSC(amountChad);\\n\\temit SellerDepositedChad(amountChad,\\n\\t\\t\\t\\t new_TOTAL_CHAD_FOR_SALE_CAP,\\n\\t\\t\\t\\t CUR_TOTAL_CHAD_PURCHASED,\\n\\t\\t\\t\\t TOTAL_CHAD_FOR_SALE_CAP,\\n\\t\\t\\t\\t sellerAddress,\\n\\t\\t\\t\\t initialPrice,\\n\\t\\t\\t\\t _useAutoPricing\\n\\t\\t\\t\\t);\\n\\tif (doDoubleAccountingChecks){\\n\\t    checkChadReservesInvariant();  \\n\\t}\\n    }\\n    function sellerWithdrawChad(uint256 amountTaking,\\n\\t\\t\\t\\tuint256 new_TOTAL_CHAD_FOR_SALE_CAP \\n\\t\\t\\t       ) public   nonReentrant() returns (uint256 amtTakeOut)\\n    {\\n\\trequire(msg.sender == factoryAddress || msg.sender == ICloneFactory(factoryAddress).owner(), 'BAD_CALLER');\\n\\tuint256 chadBalance = IERC20(chadToken).balanceOf(address(this));\\n\\tTOTAL_CHAD_FOR_SALE_CAP = new_TOTAL_CHAD_FOR_SALE_CAP;\\n        require(chadBalance >= amountTaking,\\\"INSUFFICIENT_CHAD_BALANCE\\\");  \\n        require(IERC20(chadToken).transfer(owner(), amountTaking),\\\"CHAD_TRANSFER_FAIL\\\");  \\n\\tDEC.a_inChadDisembursedToSellers += xSC(amountTaking);\\n\\temit SellerWithdrewChad(amountTaking,\\n\\t\\t\\t\\tnew_TOTAL_CHAD_FOR_SALE_CAP,\\n\\t\\t\\t\\tDEC.a_inChadUndecided,\\n\\t\\t\\t\\tDEC.a_outChadRecycle,\\n\\t\\t\\t\\tDEC.a_inChadDisembursedToSellers\\n\\t\\t\\t       );\\n\\tif (doDoubleAccountingChecks){\\t\\n\\t    checkChadReservesInvariant();  \\n\\t}\\n\\treturn amountTaking;\\n    }\\n    function getDEC() external view returns (\\n\\tuint256 r_chadBalance,\\n\\tuint256 r_CUR_TOTAL_CHAD_PURCHASED,\\n\\tuint256 r_TOTAL_CHAD_FOR_SALE_CAP, \\n\\tuint64 r_a_inChadUndecided,\\n\\tuint64 r_a_inChadDisembursedHolders,\\n\\tuint64 r_a_outChadRecycle,\\n    \\tuint64 r_a_outChadUndecided,\\n\\tuint64 r_a_inEthUndecided,\\n\\tuint64 r_a_outEthUndecided\\n    )\\n    {\\n\\tuint256 chadBalance = IERC20(chadToken).balanceOf(address(this));\\n\\treturn (chadBalance, CUR_TOTAL_CHAD_PURCHASED, TOTAL_CHAD_FOR_SALE_CAP, \\n\\t\\tDEC.a_inChadUndecided, DEC.a_inChadDisembursedHolders, DEC.a_outChadRecycle,\\n\\t\\tDEC.a_outChadUndecided, DEC.a_inEthUndecided, DEC.a_outEthUndecided);\\n    }\\n    function getChunkData(uint32 start, uint32 end, address user) external view returns (\\n        uint256[] memory r_stake_block_tot_held_eth,\\n        uint256[] memory r_stake_block_tot_nonheld_eth,\\n        uint256[] memory r_stake_block_tot_held_chad,\\n        uint256[] memory r_stake_block_tot_refunded_eth,\\n\\tuint256[] memory r_stake_block_tot_held_eth_early,\\n\\tuint256[] memory r_stake_block_tot_held_chad_early,\\n        uint256[] memory r_stake_block_holder_nonheld_eth,\\n        uint256[] memory r_stake_block_who_reward_already_paid_eth,\\n\\tuint256[] memory r_stake_block_who_early_held_paid_eth,\\n        uint256 r_currentBlock\\n    ) {\\n\\trequire(end>start,\\\"!(end>start)\\\");\\n        uint32 length = end - start + 1;\\n        uint256[] memory arr1 = new uint256[](length);\\n        uint256[] memory arr2 = new uint256[](length);\\n        uint256[] memory arr3 = new uint256[](length);\\n        uint256[] memory arr4 = new uint256[](length);\\n        uint256[] memory arr5 = new uint256[](length);\\n        uint256[] memory arr6 = new uint256[](length);\\n        uint256[] memory arr7 = new uint256[](length);\\n        uint256[] memory arr8 = new uint256[](length);\\n        uint256[] memory arr9 = new uint256[](length);\\n        for (uint32 i = 0; i < length; i++) {\\n            arr1[i] = stake_block_tot_held_eth[start + i];\\n            arr2[i] = stake_block_tot_nonheld_eth[start + i];       \\n            arr3[i] = stake_block_tot_held_chad[start + i];\\n            arr4[i] = stake_block_tot_refunded_eth[start + i];\\n\\t    arr5[i] = stake_block_tot_held_eth_early[start + i];\\n\\t    arr6[i] = stake_block_tot_held_chad_early[start + i];\\n            if (user != address(0)) {\\n                arr7[i] = stake_block_holder_nonheld_eth[start + i][user];\\n                arr8[i] = stake_block_who_reward_already_paid_eth[start + i][user];    \\n\\t\\tarr9[i] = stake_block_who_early_held_paid_eth[start + i][user];\\n            }\\n        }\\n        return (arr1,\\n                arr2,\\n                arr3,\\n                arr4,\\n                arr5,\\n                arr6,\\n                arr7,\\n                arr8,\\n                arr9,\\n                block.number);\\n    }\\n    function getSettingsForNewVest2() public view returns (\\n        address s_chadToken,\\n        address s_vestToken,\\n        address s_stakeToken,\\n        address s_uniswapV2Pair,\\n        bool s_allowEarlyChadLockin,\\n        bool s_liquiditySensitive,\\n        bool s_doDoubleAccountingChecks,\\n        bool s_allowEarlyStakingPayouts,\\n        uint256 s_SC,\\n        uint256 s_SE,\\n        uint256 s_currentBlock\\n    )\\n    {\\n        return ( \\n            address(chadToken),\\n            address(vestToken),\\n            address(stakeToken),\\n            address(uniswapV2Pair),\\n            allowEarlyChadLockin,\\n            liquiditySensitive,\\n            doDoubleAccountingChecks,\\n            allowEarlyStakingPayouts,\\n            SC,\\n            SE,\\n            block.number\\n        );\\n    }\\n    function setSettingsForNewVest2( \\n        address s_chadToken,\\n        address s_vestToken,\\n        address s_stakeToken,\\n        address s_uniswapV2Pair,\\n        bool s_allowEarlyChadLockin,\\n        bool s_liquiditySensitive,\\n        bool s_doDoubleAccountingChecks,\\n        bool s_allowEarlyStakingPayouts\\n    ) external onlyFactoryOwner\\n    {\\n        chadToken = IERC20(s_chadToken);\\n        vestToken = IERC20VEST(s_vestToken);\\n        stakeToken = IERC20STAKE(s_stakeToken);\\n        uniswapV2Pair = s_uniswapV2Pair;\\n        allowEarlyChadLockin = s_allowEarlyChadLockin;\\n        liquiditySensitive = s_liquiditySensitive;\\n        doDoubleAccountingChecks = s_doDoubleAccountingChecks;\\n        allowEarlyStakingPayouts = s_allowEarlyStakingPayouts;\\n    }\\n    function getSettingsForNewVest() public view returns (\\n        bool    s_salesLive,\\n        address s_replacementAddress,\\n        uint32 s_blocksPerChunk,\\n        uint32 s_individualRefundChunks,\\n        uint32 s_maxChunksPerStaking,\\n        uint32 s_vestDurationChunks,\\n\\tuint32 s_vestDurationChunksManual,\\n        uint256 s_buyPriceEthPerVest,\\n        uint256 s_fracStakingRewards1k,\\n        uint256 s_CUR_TOTAL_CHAD_PURCHASED,  \\n        uint256 s_TOTAL_CHAD_FOR_SALE_CAP,\\n        uint256 s_POST_CAP_THRESHOLD_ETH,\\n\\tbool    s_useAutoPricing,\\n\\tuint256 s_CHAD_TOTAL_SUPPLY_WEI,\\n\\tuint256 s_unlockThreshDiscountFrac1k,\\n        uint256 s_currentBlock  \\n    )\\n    {\\n        return (salesLive,\\n                replacementAddress,\\n                blocksPerChunk,\\n                individualRefundChunks,\\n                maxChunksPerStaking,\\n                vestDurationChunks,\\n                vestDurationChunksManual,\\n                buyPriceEthPerVest,\\n                fracStakingRewards1k,\\n                CUR_TOTAL_CHAD_PURCHASED, \\n                TOTAL_CHAD_FOR_SALE_CAP,\\n                POST_CAP_THRESHOLD_ETH,\\n\\t\\tuseAutoPricing,\\n\\t\\tCHAD_TOTAL_SUPPLY_WEI,\\n\\t\\tunlockThreshDiscountFrac1k,\\n                block.number  \\n               );\\n    }\\n    function setSettingsForNewVest(bool    s_salesLive,\\n                                   address s_replacementAddress,\\n                                   uint32 s_blocksPerChunk,\\n                                   uint32 s_individualRefundChunks,\\n                                   uint32 s_maxChunksPerStaking,\\n                                   uint32 s_vestDurationChunksManual,\\n                                   uint32 s_vestDurationChunks,\\n                                   uint256 s_buyPriceEthPerVest,\\n                                   uint256 s_fracStakingRewards1k,\\n                                   uint256 s_CUR_TOTAL_CHAD_PURCHASED,\\n                                   uint256 s_TOTAL_CHAD_FOR_SALE_CAP,\\n                                   uint256 s_POST_CAP_THRESHOLD_ETH,\\n\\t\\t\\t\\t   bool    s_useAutoPricing,\\n                                   uint256 s_CHAD_TOTAL_SUPPLY_WEI,\\t\\t\\t\\t   \\n                                   uint256 s_unlockThreshDiscountFrac1k\\n\\t\\t\\t\\t  ) external onlyFactoryOwner\\n    {\\n        salesLive = s_salesLive;\\n        replacementAddress = s_replacementAddress;\\n        blocksPerChunk = s_blocksPerChunk;\\n        individualRefundChunks = s_individualRefundChunks;\\n        maxChunksPerStaking = s_maxChunksPerStaking;\\n        vestDurationChunks = s_vestDurationChunks;\\n        vestDurationChunksManual = s_vestDurationChunksManual;\\n        buyPriceEthPerVest = s_buyPriceEthPerVest;\\n        fracStakingRewards1k = s_fracStakingRewards1k;\\n        CUR_TOTAL_CHAD_PURCHASED = s_CUR_TOTAL_CHAD_PURCHASED;\\n        TOTAL_CHAD_FOR_SALE_CAP = s_TOTAL_CHAD_FOR_SALE_CAP;\\n        POST_CAP_THRESHOLD_ETH = s_POST_CAP_THRESHOLD_ETH;\\n\\tuseAutoPricing = s_useAutoPricing;\\n        CHAD_TOTAL_SUPPLY_WEI = s_CHAD_TOTAL_SUPPLY_WEI;\\n\\tunlockThreshDiscountFrac1k = s_unlockThreshDiscountFrac1k;\\n    }\\n    function getTokenAddresses() public view returns (\\n\\taddress s_chadToken,\\n\\taddress s_vestToken,\\n\\taddress s_stakeToken,\\n\\taddress s_uniswapV2Pair,\\n\\taddress s_helperContract,\\n\\taddress s_factoryContract\\n    ){\\n\\treturn (address(chadToken),\\n\\t\\taddress(vestToken),\\n\\t\\taddress(stakeToken),\\n\\t\\taddress(uniswapV2Pair),\\n\\t\\taddress(helperContract),\\n\\t\\taddress(factoryAddress)\\n\\t       );\\n    }\\n    function setTokenAddresses(address _chadToken,\\n                               address _vestToken,\\n                               address _stakeToken,\\n                               address _uniswapV2Pair,\\n\\t\\t\\t       address _helperContract,\\n\\t\\t\\t       address _factoryContract\\n                              ) external onlyFactoryOwner {\\n        chadToken = IERC20(_chadToken);\\n        vestToken = IERC20VEST(_vestToken);\\n        stakeToken = IERC20STAKE(_stakeToken);\\n        uniswapV2Pair = address(_uniswapV2Pair);\\n\\thelperContract = address(_helperContract);\\n\\tfactoryAddress = address(_factoryContract);\\n    }\\n    function withdrawETH() external onlyFactoryOwner{\\n        payable(owner()).transfer(address(this).balance);\\n    }\\n    function withdrawERC20(address _token) external onlyFactoryOwner nonReentrant() {\\n        uint256 balanceChad = IERC20(_token).balanceOf(address(this));\\n        require(balanceChad > 0, \\\"Either no ERC20 tokens to withdraw, or unknown ERC20 token.\\\");\\n        require(IERC20(_token).transfer(msg.sender, balanceChad), \\\"ERC20 withdraw failed.\\\"); \\n    }\\n    function transferUnderlying(address receiver,uint256 amount) external onlyVESTTokenOrThisOrHelper nonReentrant() returns(\\n        bool success\\n    ){\\n        require(IERC20(chadToken).balanceOf(address(this)) >= amount,\\\"INSUFFICIENT_CHAD_BALANCE\\\");\\n        require(IERC20(chadToken).transfer(receiver,amount),\\\"CHAD_TRANSFER_FAIL\\\");\\n\\tif (doDoubleAccountingChecks){\\n\\t    checkChadReservesInvariant();  \\n\\t}\\n        return true;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spentEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberOfVEST\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_startingChunk\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_endRefundsChunk\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isManual\",\"type\":\"bool\"}],\"name\":\"EthToVest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountChad\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"new_TOTAL_CHAD_FOR_SALE_CAP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"CUR_TOTAL_CHAD_PURCHASED\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TOTAL_CHAD_FOR_SALE_CAP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sellerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_useAutoPricing\",\"type\":\"bool\"}],\"name\":\"SellerDepositedChad\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalToPaySellerLate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sellerAddress\",\"type\":\"address\"}],\"name\":\"SellerPaidEthEarly\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalToPaySellerLate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sellerAddress\",\"type\":\"address\"}],\"name\":\"SellerPaidEthLate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountChadOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"new_TOTAL_CHAD_FOR_SALE_CAP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"a_inChadUndecided\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"a_outChadRecycle\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"a_inChadDisembursedHolders\",\"type\":\"uint64\"}],\"name\":\"SellerWithdrewChad\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releasableMyRewardsEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"myTotalEverRewardsEth\",\"type\":\"uint256\"}],\"name\":\"StakeToEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"xChunk\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"thisChunkMyRewardsEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"everyoneHoldersThisChunk\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"everyonesStakeThisChunk\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earlyHoldersThisChunk\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"myAlreadyPaidThisChunk\",\"type\":\"uint256\"}],\"name\":\"StakeToEthEarly\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releasedSoFarNow\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"additionalTimeReleasableVEST\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reservesReleasableVEST\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reservesEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reservesChad\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRefundableVest\",\"type\":\"uint256\"}],\"name\":\"VestToChad\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totEarlyLockedChad\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totEarlyLockedEth\",\"type\":\"uint256\"}],\"name\":\"VestToChadEarly\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRefundableNowVest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRefundableNowEth\",\"type\":\"uint256\"}],\"name\":\"VestToEth\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEC\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"a_inChadExternalSellers\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"a_inChadDisembursedToSellers\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"a_outChadUndecided\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"a_outEthUndecided\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"a_inEthDisembursedStakersRefund\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"a_outChadExternalSellers\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"a_outChadRecycle\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"a_inChadUndecided\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"a_outEthExternalBuyers\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"a_inEthUndecided\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"a_inEthSellersEarly\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"a_inEthStakeHoldersEarly\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"a_outChadVestHolders\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"a_inChadDisembursedHolders\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"a_inChadVestHolders\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"a_inChadVestHoldersEarly\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"a_inEthSellers\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"a_inEthStakeHolders\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"a_outEthStakeHolders\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"a_inEthDisembursedStakersRewards\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allBeneficiaries\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allBeneficiariesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"valuesEth\",\"type\":\"uint256[]\"}],\"name\":\"batchDoEthToVest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsVEST\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"spentsETH\",\"type\":\"uint256[]\"}],\"name\":\"batchManualEthToVest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksPerChunk\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vestNum\",\"type\":\"uint256\"}],\"name\":\"cancelManualEthToVest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"adjustedSpentEth\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_startingChunk\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_endRefundsChunk\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"numberOfVEST\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isManual\",\"type\":\"bool\"}],\"name\":\"createVESTingSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"doEthToVest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSim\",\"type\":\"bool\"}],\"name\":\"doStakeToEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"releasableMyRewardsEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"myTotalEverRewardsEth\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestedReleasedVest\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allowEarlyCommit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useOnlyVestNum\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"onlyVestNum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSim\",\"type\":\"bool\"}],\"name\":\"doVestToChad\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"releasedSoFarNow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"additionalTimeReleasableVEST\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservesReleasableVEST\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservesEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservesChad\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxVest\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSim\",\"type\":\"bool\"}],\"name\":\"doVestToEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalRefundableNowVest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRefundableNowEth\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vestToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapV2Pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH_ADDRESS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_helperContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"firstPriceEth\",\"type\":\"uint256\"}],\"name\":\"finishInitialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"start\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"end\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getChunkData\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"r_stake_block_tot_held_eth\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"r_stake_block_tot_nonheld_eth\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"r_stake_block_tot_held_chad\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"r_stake_block_tot_refunded_eth\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"r_stake_block_tot_held_eth_early\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"r_stake_block_tot_held_chad_early\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"r_stake_block_holder_nonheld_eth\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"r_stake_block_who_reward_already_paid_eth\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"r_stake_block_who_early_held_paid_eth\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"r_currentBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDEC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"r_chadBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r_CUR_TOTAL_CHAD_PURCHASED\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r_TOTAL_CHAD_FOR_SALE_CAP\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"r_a_inChadUndecided\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"r_a_inChadDisembursedHolders\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"r_a_outChadRecycle\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"r_a_outChadUndecided\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"r_a_inEthUndecided\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"r_a_outEthUndecided\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getHoldersVESTingCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSettingsForNewVest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"s_salesLive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"s_replacementAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"s_blocksPerChunk\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"s_individualRefundChunks\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"s_maxChunksPerStaking\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"s_vestDurationChunks\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"s_vestDurationChunksManual\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"s_buyPriceEthPerVest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s_fracStakingRewards1k\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s_CUR_TOTAL_CHAD_PURCHASED\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s_TOTAL_CHAD_FOR_SALE_CAP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s_POST_CAP_THRESHOLD_ETH\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"s_useAutoPricing\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"s_CHAD_TOTAL_SUPPLY_WEI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s_unlockThreshDiscountFrac1k\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s_currentBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSettingsForNewVest2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"s_chadToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"s_vestToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"s_stakeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"s_uniswapV2Pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"s_allowEarlyChadLockin\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"s_liquiditySensitive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"s_doDoubleAccountingChecks\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"s_allowEarlyStakingPayouts\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"s_SC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s_SE\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s_currentBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"s_chadToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"s_vestToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"s_stakeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"s_uniswapV2Pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"s_helperContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"s_factoryContract\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getVestedUserDetail\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"vestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtETH\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"createdChunk\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endRefundsChunk\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amountTotalVEST\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedVEST\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refundedVEST\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refundedETH\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"cancelled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"vestToChadEarly\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isManual\",\"type\":\"bool\"}],\"internalType\":\"struct BasedMarket.VESTingSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"getVestingTableRange\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"vestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtETH\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"createdChunk\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endRefundsChunk\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amountTotalVEST\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedVEST\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refundedVEST\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refundedETH\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"cancelled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"vestToChadEarly\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isManual\",\"type\":\"bool\"}],\"internalType\":\"struct BasedMarket.VESTingSchedule[]\",\"name\":\"rangeData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"individualRefundChunks\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creatorOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factoryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_chadToken\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_blocksPerChunk\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_individualRefundChunks\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_maxChunksPerStaking\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_vestDurationChunks\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_vestDurationChunksManual\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_fracStakingRewards1k\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockThreshDiscountFrac1k\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_useAutoPricing\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_CHAD_TOTAL_SUPPLY_WEI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_POST_CAP_THRESHOLD_ETH\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_allowEarlyChadLockin\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_rewardEarlyChunks\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_allowEarlyStakingPayouts\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_doDoubleAccountingChecks\",\"type\":\"bool\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountChad\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"new_TOTAL_CHAD_FOR_SALE_CAP\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sellerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_useAutoPricing\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"buyDiscountFrac1k\",\"type\":\"uint256\"}],\"name\":\"sellerDepositChad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountTaking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"new_TOTAL_CHAD_FOR_SALE_CAP\",\"type\":\"uint256\"}],\"name\":\"sellerWithdrawChad\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amtTakeOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"a_inChadExternalSellers\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"a_inChadDisembursedToSellers\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"a_outChadUndecided\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"a_outEthUndecided\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"a_inEthDisembursedStakersRefund\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"a_outChadExternalSellers\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"a_outChadRecycle\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"a_inChadUndecided\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"a_outEthExternalBuyers\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"a_inEthUndecided\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"a_inEthSellersEarly\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"a_inEthStakeHoldersEarly\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"a_outChadVestHolders\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"a_inChadDisembursedHolders\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"a_inChadVestHolders\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"a_inChadVestHoldersEarly\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"a_inEthSellers\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"a_inEthStakeHolders\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"a_outEthStakeHolders\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"a_inEthDisembursedStakersRewards\",\"type\":\"uint64\"}],\"internalType\":\"struct BasedMarket.DECStruct\",\"name\":\"newDEC\",\"type\":\"tuple\"}],\"name\":\"setDEC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"setHoldersVESTingCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"s_salesLive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"s_replacementAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"s_blocksPerChunk\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"s_individualRefundChunks\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"s_maxChunksPerStaking\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"s_vestDurationChunksManual\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"s_vestDurationChunks\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"s_buyPriceEthPerVest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s_fracStakingRewards1k\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s_CUR_TOTAL_CHAD_PURCHASED\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s_TOTAL_CHAD_FOR_SALE_CAP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s_POST_CAP_THRESHOLD_ETH\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"s_useAutoPricing\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"s_CHAD_TOTAL_SUPPLY_WEI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s_unlockThreshDiscountFrac1k\",\"type\":\"uint256\"}],\"name\":\"setSettingsForNewVest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"s_chadToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"s_vestToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"s_stakeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"s_uniswapV2Pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"s_allowEarlyChadLockin\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"s_liquiditySensitive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"s_doDoubleAccountingChecks\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"s_allowEarlyStakingPayouts\",\"type\":\"bool\"}],\"name\":\"setSettingsForNewVest2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_chadToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vestToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapV2Pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_helperContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factoryContract\",\"type\":\"address\"}],\"name\":\"setTokenAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"vestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtETH\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"createdChunk\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endRefundsChunk\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amountTotalVEST\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedVEST\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refundedVEST\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refundedETH\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"cancelled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"vestToChadEarly\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isManual\",\"type\":\"bool\"}],\"internalType\":\"struct BasedMarket.VESTingSchedule\",\"name\":\"schedule\",\"type\":\"tuple\"}],\"name\":\"setVestedUserDetail\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt_eth\",\"type\":\"uint256\"}],\"name\":\"simEthToVest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"refundNowEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adjustedSpentEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfVEST\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"vestEndRefundsChunk\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"currentChunk\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferUnderlying\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestDurationChunks\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestDurationChunksManual\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BasedMarket", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}