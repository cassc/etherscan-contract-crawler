{"SourceCode": "pragma solidity ^0.8.0;\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\npragma solidity ^0.8.0;\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\npragma solidity ^0.8.0;\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\npragma solidity ^0.8.0;\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\npragma solidity ^0.8.0;\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\npragma solidity ^0.8.0;\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n        return true;\r\n    }\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n        emit Transfer(account, address(0), amount);\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\npragma solidity ^0.8.9;\r\nabstract contract StakeToken is Ownable {\r\n    ERC20 public token;\r\n    event TokenAddressUpdated(address oldAddress, address tokenAddress);\r\n    function tokenName() public view returns (string memory) {\r\n        return token.name();\r\n    }\r\n    function tokenSymbol() public view returns (string memory) {\r\n        return token.symbol();\r\n    }\r\n    function tokenDecimals() public view returns (uint256) {\r\n        return token.decimals();\r\n    }\r\n    function tokenBalanceOf(address _address) public view returns (uint256) {\r\n        return token.balanceOf(_address);\r\n    }\r\n    function _changeTokenAddress(address newTokenAddress)\r\n        internal\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        token = ERC20(newTokenAddress);\r\n        require(newTokenAddress != address(0), \"Token address cannot be 0\");\r\n        require(\r\n            newTokenAddress != address(token),\r\n            \"Token address cannot be the same as the current one\"\r\n        );\r\n        emit TokenAddressUpdated(address(token), newTokenAddress);\r\n        return true;\r\n    }\r\n}\r\ncontract EliteStake is StakeToken {\r\n    using SafeMath for uint256;\r\n    event StakeMinAmountUpdated(uint256 amount);\r\n    event StakeMaxAmountUpdated(uint256 amount);\r\n    event StakePenaltyUpdated(uint256 stakePenalty);\r\n    event TierListUpdated(uint256 level, uint256 percentage);\r\n    event TierListTimeLimitUpdated(uint256 level, uint256 timeLimit);\r\n    uint256 public minTxAmount = 0;\r\n    uint256 public maxTxAmount = 0; \r\n    uint256 public penalty = 3;\r\n    uint256 public totalRewardsDistributed = 0;\r\n    uint256 public totalStaked = 0;\r\n    bool public isStakingEnabled = false;\r\n    bool private tokenWithdrawable = false;\r\n    bool public useSpenderWallet = false;\r\n    bool public singleTierOnly = false;\r\n    address public spenderWallet;\r\n    struct UserDetails {\r\n        uint256 level;\r\n        uint256 amount;\r\n        uint256 initialTime;\r\n        uint256 endTime;\r\n        uint256 rewardAmount;\r\n        uint256 withdrawAmount;\r\n        bool isActive;\r\n    }\r\n    mapping(address => mapping(uint256 => UserDetails)) private user;\r\n    mapping(uint256 => uint256) private tierList;\r\n    mapping(address => uint256) public userTotalStakedAmount;\r\n    mapping(uint256 => uint256) public tierListTimeLimit;\r\n    mapping(uint256 => mapping(uint256 => uint256)) public advancedTierList;\r\n    mapping(uint256 => uint256) public advancedTierListThresholds;\r\n    bool public useAdvancedRewardCalculation = false;\r\n    constructor(\r\n        address _token,\r\n        bool _withdrawable,\r\n        uint256 _minTxAmount,\r\n        uint256 _maxTxAmount,\r\n        address _spenderWallet\r\n    ) {\r\n        token = ERC20(_token);\r\n        tokenWithdrawable = _withdrawable;\r\n        minTxAmount = _minTxAmount;\r\n        maxTxAmount = _maxTxAmount;\r\n        tierList[1] = 1; \r\n        tierList[2] = 1; \r\n        tierList[3] = 1; \r\n        tierList[4] = 1; \r\n        tierListTimeLimit[1] = 0; \r\n        tierListTimeLimit[2] = 30;\r\n        tierListTimeLimit[3] = 60;\r\n        tierListTimeLimit[4] = 90;\r\n        if (_spenderWallet != address(0)) {\r\n            useSpenderWallet = true;\r\n            spenderWallet = _spenderWallet;\r\n        }\r\n    }\r\n    modifier onlySpender() {\r\n        require(\r\n            msg.sender == spenderWallet,\r\n            \"Only spender wallet can call this function\"\r\n        );\r\n        _;\r\n    }\r\n    function enableAdvancedRewardCalculation(\r\n        uint256[3] memory _thresholds,\r\n        uint256[3] memory _tierOnePercentages,\r\n        uint256[3] memory _tierTwoPercentages,\r\n        uint256[3] memory _tierThreePercentages,\r\n        uint256[3] memory _tierFourPercentages\r\n    ) external onlyOwner returns (bool) {\r\n        uint256 decimals = token.decimals();\r\n        advancedTierListThresholds[1] = _thresholds[0] * 10**decimals;\r\n        advancedTierListThresholds[2] = _thresholds[1] * 10**decimals;\r\n        advancedTierListThresholds[3] = _thresholds[2] * 10**decimals;\r\n        advancedTierList[1][1] = _tierOnePercentages[0];\r\n        advancedTierList[1][2] = _tierOnePercentages[1];\r\n        advancedTierList[1][3] = _tierOnePercentages[2];\r\n        advancedTierList[2][1] = _tierTwoPercentages[0];\r\n        advancedTierList[2][2] = _tierTwoPercentages[1];\r\n        advancedTierList[2][3] = _tierTwoPercentages[2];\r\n        advancedTierList[3][1] = _tierThreePercentages[0];\r\n        advancedTierList[3][2] = _tierThreePercentages[1];\r\n        advancedTierList[3][3] = _tierThreePercentages[2];\r\n        advancedTierList[4][1] = _tierFourPercentages[0];\r\n        advancedTierList[4][2] = _tierFourPercentages[1];\r\n        advancedTierList[4][3] = _tierFourPercentages[2];\r\n        useAdvancedRewardCalculation = true;\r\n        return true;\r\n    }\r\n    function disableAdvancedRewardCalculation()\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        useAdvancedRewardCalculation = false;\r\n        return true;\r\n    }\r\n    function getAdvancedRewards(uint256 _level) public view returns (uint256) {\r\n        require(\r\n            useAdvancedRewardCalculation,\r\n            \"Advanced reward calculation is not enabled\"\r\n        );\r\n        uint256 _amount = user[msg.sender][_level].amount;\r\n        uint256 thresholdLevel = 1;\r\n        if (_amount < advancedTierListThresholds[1]) {\r\n            thresholdLevel = 1;\r\n        } else if (\r\n            _amount >= advancedTierListThresholds[1] &&\r\n            _amount < advancedTierListThresholds[2]\r\n        ) {\r\n            thresholdLevel = 2;\r\n        } else {\r\n            thresholdLevel = 3;\r\n        }\r\n        return advancedTierList[_level][thresholdLevel];\r\n    }\r\n    function changeSingleTierOnly(bool _singleTierOnly) external onlyOwner {\r\n        singleTierOnly = _singleTierOnly;\r\n    }\r\n    function changeSpenderWallet(address _spenderWallet) external onlyOwner {\r\n        useSpenderWallet = true;\r\n        spenderWallet = _spenderWallet;\r\n    }\r\n    function retrieveToken(uint256 _amount) private {\r\n        if (useSpenderWallet) {\r\n            token.transferFrom(msg.sender, spenderWallet, _amount);\r\n        } else {\r\n            token.transferFrom(msg.sender, address(this), _amount);\r\n        }\r\n    }\r\n    function sendToken(uint256 _amount) private {\r\n        if (useSpenderWallet) {\r\n            token.transferFrom(spenderWallet, msg.sender, _amount);\r\n        } else {\r\n            token.transfer(msg.sender, _amount);\r\n        }\r\n    }\r\n    function changeTokenAddress(address newTokenAddress) external onlyOwner {\r\n        require(\r\n            !isStakingEnabled,\r\n            \"Cannot change token address while staking is enabled\"\r\n        );\r\n        _changeTokenAddress(newTokenAddress);\r\n    }\r\n    function changeTierListTimeLimit(uint256 _level, uint256 _timeLimit)\r\n        external\r\n        onlyOwner\r\n    {\r\n        tierListTimeLimit[_level] = _timeLimit;\r\n        emit TierListTimeLimitUpdated(_level, _timeLimit);\r\n    }\r\n    function changeMinTxAmount(uint256 _minTxAmount) external onlyOwner {\r\n        minTxAmount = _minTxAmount;\r\n        emit StakeMinAmountUpdated(minTxAmount);\r\n    }\r\n    function changeMaxTxAmount(uint256 _maxTxAmount) external onlyOwner {\r\n        require(\r\n            _maxTxAmount > minTxAmount,\r\n            \"Max amount must be greater than min amount\"\r\n        );\r\n        maxTxAmount = _maxTxAmount;\r\n        emit StakeMaxAmountUpdated(maxTxAmount);\r\n    }\r\n    function getTier(uint256 _level) external view returns (uint256) {\r\n        return tierList[_level];\r\n    }\r\n    function getTiers() external view returns (uint256[3] memory) {\r\n        return [tierList[1], tierList[2], tierList[3]];\r\n    }\r\n    function withdrawTokenFromContractJustInCase() external onlyOwner {\r\n        require(!isStakingEnabled, \"Staking should be disabled\");\r\n        require(tokenWithdrawable, \"Token is not withdrawable\");\r\n        require(\r\n            !useSpenderWallet,\r\n            \"You cannot withdraw token from spender wallet\"\r\n        );\r\n        uint256 _amount = token.balanceOf(address(this));\r\n        token.transfer(address(owner()), _amount);\r\n    }\r\n    function sendExactTokenFromContractToOwner(address _token, uint256 _amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(_token != address(0), \"Token address cannot be null\");\r\n        ERC20 _tokenERC20 = ERC20(_token);\r\n        require(\r\n            _tokenERC20.balanceOf(address(this)) >= _amount,\r\n            \"Not enough token in contract\"\r\n        );\r\n        _tokenERC20.transfer(address(owner()), _amount);\r\n    }\r\n    function changeTierList(uint256 _level, uint256 _percentage)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(tierList[_level] != 0, \"Invalid level\");\r\n        tierList[_level] = _percentage;\r\n        emit TierListUpdated(_level, _percentage);\r\n        return true;\r\n    }\r\n    function disableStaking() external onlyOwner returns (bool) {\r\n        isStakingEnabled = false;\r\n        return true;\r\n    }\r\n    function enableStaking() external onlyOwner returns (bool) {\r\n        isStakingEnabled = true;\r\n        return true;\r\n    }\r\n    function stake(uint256 amount, uint256 level) external returns (bool) {\r\n        require(isStakingEnabled, \"Staking is disabled\");\r\n        if (singleTierOnly) {\r\n            bool isBronzeActive = user[msg.sender][1].isActive;\r\n            bool isSilverActive = user[msg.sender][2].isActive;\r\n            bool isGoldActive = user[msg.sender][3].isActive;\r\n            require(\r\n                !isBronzeActive && !isSilverActive && !isGoldActive,\r\n                \"You can only stake once\"\r\n            );\r\n        }\r\n        uint256 tokenDecimals = token.decimals();\r\n        uint256 _minTxAmount = minTxAmount * 10**tokenDecimals;\r\n        require(amount >= _minTxAmount, \"amount is less than minTxAmount\");\r\n        if (maxTxAmount > 0) {\r\n            require(\r\n                userTotalStakedAmount[msg.sender].add(amount) <=\r\n                    maxTxAmount * 10**tokenDecimals,\r\n                \"You have exceeded your max amount\"\r\n            );\r\n            require(\r\n                amount <= maxTxAmount * 10**tokenDecimals,\r\n                \"amount is greater than maxTxAmount\"\r\n            );\r\n        }\r\n        require(!(user[msg.sender][level].isActive), \"user already exist\");\r\n        retrieveToken(amount);\r\n        setLevel(level);\r\n        user[msg.sender][level].amount = amount;\r\n        user[msg.sender][level].level = level;\r\n        user[msg.sender][level].initialTime = block.timestamp;\r\n        user[msg.sender][level].isActive = true;\r\n        totalStaked = totalStaked.add(amount);\r\n        userTotalStakedAmount[msg.sender] = userTotalStakedAmount[msg.sender]\r\n            .add(amount);\r\n        return true;\r\n    }\r\n    function setLevel(uint256 level) private {\r\n        require(tierList[level] != 0, \"Invalid level\");\r\n        if (level == 1) {\r\n            user[msg.sender][level].endTime = 0;\r\n        } else {\r\n            user[msg.sender][level].endTime =\r\n                block.timestamp +\r\n                (tierListTimeLimit[level] * 1 days);\r\n        }\r\n    }\r\n    function getRewards(address account, uint256 level)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (user[account][level].isActive) {\r\n            uint256 stakeAmount = user[account][level].amount;\r\n            uint256 timeDiff;\r\n            require(\r\n                block.timestamp >= user[account][level].initialTime,\r\n                \"Time exceeds\"\r\n            );\r\n            unchecked {\r\n                timeDiff = block.timestamp - user[account][level].initialTime;\r\n            }\r\n            uint256 rewardRate;\r\n            if (useAdvancedRewardCalculation) {\r\n                rewardRate = getAdvancedRewards(level);\r\n            } else {\r\n                rewardRate = tierList[level];\r\n            }\r\n            uint256 rewardAmount = (((stakeAmount * (rewardRate)) / 100) *\r\n                timeDiff) / 365 days;\r\n            return rewardAmount;\r\n        } else return 0;\r\n    }\r\n    function withdraw(uint256 level) external returns (bool) {\r\n        require(user[msg.sender][level].isActive, \"user not exist\");\r\n        require(\r\n            user[msg.sender][level].endTime <= block.timestamp,\r\n            \"staking end time is not reached\"\r\n        );\r\n        uint256 rewardAmount = getRewards(msg.sender, level);\r\n        uint256 amount = rewardAmount + user[msg.sender][level].amount;\r\n        sendToken(amount);\r\n        totalStaked = totalStaked.sub(user[msg.sender][level].amount);\r\n        userTotalStakedAmount[msg.sender] = userTotalStakedAmount[msg.sender]\r\n            .sub(user[msg.sender][level].amount);\r\n        user[msg.sender][level].amount = 0;\r\n        user[msg.sender][level].rewardAmount = user[msg.sender][level]\r\n            .rewardAmount\r\n            .add(rewardAmount);\r\n        user[msg.sender][level].withdrawAmount += amount;\r\n        user[msg.sender][level].isActive = false;\r\n        totalRewardsDistributed = totalRewardsDistributed.add(rewardAmount);\r\n        return true;\r\n    }\r\n    function changePenalty(uint256 _penalty) public onlyOwner {\r\n        require(_penalty <= 50, \"penalty should be less than 50\");\r\n        penalty = _penalty;\r\n        emit StakePenaltyUpdated(_penalty);\r\n    }\r\n    function emergencyWithdraw(uint256 level) public returns (uint256) {\r\n        require(user[msg.sender][level].isActive, \"user not exist\");\r\n        uint256 _penalty;\r\n        if (isStakingEnabled) {\r\n            _penalty = penalty;\r\n        } else {\r\n            _penalty = 0;\r\n        }\r\n        uint256 stakedAmount = user[msg.sender][level].amount.sub(\r\n            user[msg.sender][level].amount.mul(_penalty).div(100)\r\n        );\r\n        sendToken(stakedAmount);\r\n        totalStaked = totalStaked.sub(user[msg.sender][level].amount);\r\n        userTotalStakedAmount[msg.sender] = userTotalStakedAmount[msg.sender]\r\n            .sub(user[msg.sender][level].amount);\r\n        user[msg.sender][level].amount = 0;\r\n        user[msg.sender][level].isActive = false;\r\n        return stakedAmount;\r\n    }\r\n    function getUserDetails(address account, uint256 level)\r\n        public\r\n        view\r\n        returns (UserDetails memory, uint256)\r\n    {\r\n        uint256 reward = getRewards(account, level);\r\n        return (\r\n            UserDetails(\r\n                user[account][level].level,\r\n                user[account][level].amount,\r\n                user[account][level].initialTime,\r\n                user[account][level].endTime,\r\n                user[account][level].rewardAmount,\r\n                user[account][level].withdrawAmount,\r\n                user[account][level].isActive\r\n            ),\r\n            reward\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withdrawable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_minTxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_spenderWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeMaxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeMinAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakePenalty\",\"type\":\"uint256\"}],\"name\":\"StakePenaltyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeLimit\",\"type\":\"uint256\"}],\"name\":\"TierListTimeLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"TierListUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenAddressUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"advancedTierList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"advancedTierListThresholds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"changeMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minTxAmount\",\"type\":\"uint256\"}],\"name\":\"changeMinTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_penalty\",\"type\":\"uint256\"}],\"name\":\"changePenalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_singleTierOnly\",\"type\":\"bool\"}],\"name\":\"changeSingleTierOnly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spenderWallet\",\"type\":\"address\"}],\"name\":\"changeSpenderWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"changeTierList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeLimit\",\"type\":\"uint256\"}],\"name\":\"changeTierListTimeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTokenAddress\",\"type\":\"address\"}],\"name\":\"changeTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableAdvancedRewardCalculation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"_thresholds\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"_tierOnePercentages\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"_tierTwoPercentages\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"_tierThreePercentages\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"_tierFourPercentages\",\"type\":\"uint256[3]\"}],\"name\":\"enableAdvancedRewardCalculation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getAdvancedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"getRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTiers\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"getUserDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct EliteStake.UserDetails\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStakingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendExactTokenFromContractToOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"singleTierOnly\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spenderWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tierListTimeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"tokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useAdvancedRewardCalculation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useSpenderWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTotalStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTokenFromContractJustInCase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EliteStake", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000058bf474c84c02cd693ae92694a122b365609462300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000008e11d7eab77f37e27bc1a195869410e6e68e8797", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9be1a1e52d228353306cc39bc6acddc28c6216ae38fc6867ff93db1a8e54eea0"}