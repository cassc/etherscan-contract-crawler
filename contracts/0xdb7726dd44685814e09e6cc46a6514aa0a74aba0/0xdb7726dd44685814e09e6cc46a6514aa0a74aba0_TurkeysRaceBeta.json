{"SourceCode": "// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: turkeys/turkeyRaceBot.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface GameTurkeys {\r\n    struct Stats {\r\n        uint8 strength;\r\n        uint8 intelligence;\r\n        uint8 speed;\r\n        uint8 bravery;\r\n    }\r\n    function getTokenStats(uint256 tokenId) external view returns (Stats memory);\r\n}\r\n\r\n\r\ncontract TurkeysRaceBeta {\r\n    // Variables\r\n    address public admin;\r\n    address public turkeys = 0x000000000000000000000000000000000000dEaD;\r\n    IERC20 public token = IERC20(0x85Cd22083260e1D6C869ca7D89b0c8B5428e3c92);\r\n    GameTurkeys public nftContract = GameTurkeys(0x49C59D51a3e0fA9df6c80F38Dda32b66E51b21c8);\r\n    address public constant DEAD_ADDRESS = 0x000000000000000000000000000000000000dEaD;\r\n    uint256[] public racers; // List of NFTs in the race\r\n    mapping(uint256 => uint256) public bets; // tokenId => amount\r\n    mapping(uint256 => address[]) public bettors;\r\n    mapping(address => uint256) public balances; // User balance inside the contract\r\n    uint256 public totalBets;\r\n    uint256 public oddsBalancer = 90;\r\n\r\n    address[] public bettorUsers;\r\n    mapping(address => bool) public hasBet;\r\n    \r\n    // Events\r\n    event PreRaceSet(uint256[] racers);\r\n    event BetPlaced(address indexed user, uint256 tokenId, uint256 amount);\r\n    event RaceCompleted(uint256 winner);\r\n    event RacerPointsUpdated(uint256 indexed tokenId, uint256 newPoints);\r\n    event RaceWinnerDeclared(uint256 indexed tokenId);\r\n    event WinningBettor(address indexed bettor, uint256 amountWon);\r\n    \r\n    // Constructor\r\n    constructor() {admin = msg.sender;}\r\n    \r\n    // Set pre-race numbers\r\n    function preRace(uint256 numberOfRacers, uint256 totalNFTs) external {\r\n        require(msg.sender == admin, \"Only admin\");\r\n        require(numberOfRacers <= totalNFTs, \"Invalid racers\");\r\n\r\n        // Reset bets and racers\r\n        for (uint256 i = 0; i < racers.length; i++) {\r\n            // Reset total bets for each racer tokenID\r\n            bets[racers[i]] = 0;\r\n        }\r\n\r\n        // Reset user bets\r\n        for (uint256 i = 0; i < racers.length; i++) {\r\n            // Reset individual bet amounts for each tokenId\r\n            bets[racers[i]] = 0;\r\n            delete bettors[racers[i]];  // Remove all bettors for this tokenId\r\n        }\r\n\r\n        // Reset state\r\n        delete racers;\r\n        totalBets = 0;\r\n\r\n        // Generate unique random numbers\r\n        for(uint256 i = 0; i < numberOfRacers; i++) {\r\n            uint256 rand = (uint256(keccak256(abi.encodePacked(block.timestamp, i))) % totalNFTs) + 1;\r\n            while(isDuplicate(rand)) {\r\n                rand = (uint256(keccak256(abi.encodePacked(block.timestamp, i))) % totalNFTs) + 1;\r\n            }\r\n            racers.push(rand);\r\n        }\r\n        emit PreRaceSet(racers);\r\n    }\r\n    \r\n    function placeBet(uint256 tokenId, uint256 amount) external {\r\n        require(isValidRacer(tokenId), \"Invalid racer\");\r\n        require(amount < 1000000000000, \"You can only bet upto 1000 $VEG.\");\r\n        require(token.transferFrom(msg.sender, address(this), amount), \"Transfer failed\"); // Directly transfer tokens from user to contract\r\n\r\n        bets[tokenId] += amount;\r\n        bettors[tokenId].push(msg.sender); // add bettor to the list of bettors for the specific tokenId\r\n        totalBets += amount;\r\n        emit BetPlaced(msg.sender, tokenId, amount);\r\n\r\n        if(!hasBet[msg.sender]) {\r\n            bettorUsers.push(msg.sender);\r\n            hasBet[msg.sender] = true;\r\n        }\r\n    }\r\n\r\n    function race() external {\r\n        require(msg.sender == admin, \"Only admin\");\r\n\r\n        uint256 winner = simulateRace();\r\n        if (bets[winner] == 0) {\r\n            // No winners, burn the tokens\r\n            burnTokens(totalBets);\r\n            return;\r\n        }\r\n\r\n        uint256 turkeyShare = (totalBets * 20) / 100;\r\n        uint256 winnersShare = totalBets - turkeyShare;\r\n\r\n        require(token.transfer(turkeys, turkeyShare), \"Transfer to turkeys failed\"); // Directly transfer turkey's share\r\n\r\n        // Distribute winnings\r\n        uint256 totalWinnerBets = bets[winner];\r\n        address[] memory winnerBettors = bettors[winner];\r\n        for(uint256 i = 0; i < winnerBettors.length; i++) {\r\n            address bettor = winnerBettors[i];\r\n            uint256 betAmount = bets[winner];\r\n            uint256 share = (betAmount * winnersShare) / totalWinnerBets;\r\n            require(token.transfer(bettor, share), \"Transfer to winner failed\"); // Directly transfer winner's share\r\n\r\n            emit WinningBettor(bettor, share);  // Emit the event\r\n        }\r\n\r\n        emit RaceCompleted(winner);\r\n\r\n        // Reset bets and racers\r\n        for (uint256 i = 0; i < racers.length; i++) {\r\n            // Reset total bets for each racer tokenID\r\n            bets[racers[i]] = 0;\r\n        }\r\n\r\n        // Reset user bets\r\n        for (uint256 i = 0; i < racers.length; i++) {\r\n            // Reset individual bet amounts for each tokenId\r\n            bets[racers[i]] = 0;\r\n            delete bettors[racers[i]];  // Remove all bettors for this tokenId\r\n        }\r\n\r\n        // Reset state\r\n        delete racers;\r\n        totalBets = 0;\r\n    }\r\n\r\n    function simulateRace() internal returns(uint256) {\r\n        uint256[] memory positions = new uint256[](racers.length);\r\n\r\n        for(uint256 j = 0; j < racers.length; j++) {\r\n        uint256 tokenId = racers[j];\r\n\r\n        GameTurkeys.Stats memory stats = nftContract.getTokenStats(tokenId);\r\n        uint256 speed = stats.speed;\r\n\r\n        uint256 totalBetsForTokenRaw = bets[tokenId];\r\n        uint256 totalBetsForToken = totalBetsForTokenRaw / (10 ** 9);\r\n        uint256 handicap = totalBetsForToken / oddsBalancer;\r\n\r\n        positions[j] += handicap + (speed / 10);\r\n    }\r\n\r\n        for(uint256 i = 0; i < 5; i++) {  // 5 rounds\r\n            for(uint256 j = 0; j < racers.length; j++) {\r\n                uint256 rand = uint256(keccak256(abi.encodePacked(block.timestamp, i, j))) % 10;\r\n                positions[j] += rand;\r\n                emit RacerPointsUpdated(racers[j], positions[j]);\r\n            }\r\n        }\r\n\r\n        uint256 highestPosition = 0;\r\n        uint256 winnerIndex = 0;\r\n        for(uint256 i = 0; i < racers.length; i++) {\r\n            if(positions[i] > highestPosition) {\r\n                highestPosition = positions[i];\r\n                winnerIndex = i;\r\n            }\r\n        }\r\n\r\n        uint256 winner = racers[winnerIndex];\r\n        emit RaceWinnerDeclared(winner);\r\n\r\n        return winner;\r\n    }\r\n    \r\n    function isDuplicate(uint256 n) internal view returns(bool) {\r\n        for(uint256 i = 0; i < racers.length; i++) {\r\n            if(racers[i] == n) return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function isValidRacer(uint256 tokenId) internal view returns(bool) {\r\n        for(uint256 i = 0; i < racers.length; i++) {\r\n            if(racers[i] == tokenId) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function getRacers() public view returns(uint256[] memory) {\r\n        return racers;\r\n    }\r\n\r\n    function burnTokens(uint256 amount) internal {\r\n        require(token.transfer(DEAD_ADDRESS, amount), \"Failed to burn tokens\");\r\n    }\r\n\r\n    function getCurrentTotalBettingPot() public view returns (uint256) {\r\n        uint256 totalPot = 0;\r\n        for (uint256 i = 0; i < racers.length; i++) {\r\n            totalPot += bets[racers[i]];\r\n        }\r\n        return totalPot;\r\n    }\r\n\r\n    function getTotalAmountBet() public view returns (uint256) {\r\n        return totalBets;\r\n    }\r\n\r\n    function getBetsValueForToken(uint256 tokenId) public view returns (uint256) {\r\n        return bets[tokenId];\r\n    }\r\n\r\n    function getNumberOfBetsForRacers() public view returns (uint256[] memory) {\r\n        uint256[] memory betCounts = new uint256[](racers.length);\r\n        for (uint256 i = 0; i < racers.length; i++) {\r\n            betCounts[i] = bettors[racers[i]].length;\r\n        }\r\n        return betCounts;\r\n    }\r\n\r\n    function turkeysRevenue() public {        \r\n        uint256 amount = balances[turkeys];\r\n        require(amount > 0, \"No balance to transfer\");\r\n        \r\n        balances[turkeys] = 0;\r\n        require(token.transfer(turkeys, amount), \"Transfer failed\");\r\n    }\r\n\r\n    function adminTransfer(address user) public {\r\n        require(msg.sender == admin, \"Only admin can transfer\");\r\n        \r\n        uint256 amount = balances[user];\r\n        require(amount > 0, \"No balance to transfer\");\r\n        \r\n        balances[user] = 0;\r\n        require(token.transfer(user, amount), \"Transfer failed\");\r\n    }\r\n\r\n    function adminTransferAll(address[] memory users) public {\r\n        require(msg.sender == admin, \"Only admin can transfer\");\r\n\r\n        for (uint i = 0; i < users.length; i++) {\r\n            address user = users[i];\r\n            uint256 amount = balances[user];\r\n            \r\n            if (amount > 0) {\r\n                balances[user] = 0;\r\n                require(token.transfer(user, amount), \"Transfer failed\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function setOddsBalancer(uint256 _newOddsBalancer) external {\r\n        require(msg.sender == admin, \"Only admin can call this.\");\r\n        oddsBalancer = _newOddsBalancer;\r\n    }\r\n\r\n    function withdrawStuckEther() external {\r\n        require(msg.sender == admin, \"Only admin can call this.\");\r\n        payable(admin).transfer(address(this).balance);\r\n    }\r\n\r\n    function withdrawStuckTokens(uint256 amount) external {\r\n        require(msg.sender == admin, \"Only admin can call this.\");\r\n        require(token.balanceOf(address(this)) >= amount, \"Insufficient token balance\");\r\n        token.transfer(admin, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BetPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"racers\",\"type\":\"uint256[]\"}],\"name\":\"PreRaceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winner\",\"type\":\"uint256\"}],\"name\":\"RaceCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"RaceWinnerDeclared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPoints\",\"type\":\"uint256\"}],\"name\":\"RacerPointsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bettor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWon\",\"type\":\"uint256\"}],\"name\":\"WinningBettor\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"adminTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"adminTransferAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bettorUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bettors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getBetsValueForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTotalBettingPot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfBetsForRacers\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRacers\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalAmountBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasBet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftContract\",\"outputs\":[{\"internalType\":\"contract GameTurkeys\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oddsBalancer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"placeBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfRacers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalNFTs\",\"type\":\"uint256\"}],\"name\":\"preRace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"race\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"racers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newOddsBalancer\",\"type\":\"uint256\"}],\"name\":\"setOddsBalancer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turkeys\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turkeysRevenue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TurkeysRaceBeta", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://26700a8b785ea9a2c04762072fa02e7f6eba0e2d094bc2adcc7db420225a8feb"}