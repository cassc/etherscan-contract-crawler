{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Morra.sol\": {\r\n      \"content\": \"/**\\r\\n\\r\\nMorra Games is a web3 studio that incorporates cutting-edge technology and a community-driven  \\r\\napproach to redefine the future of the entertainment industry. It operates as a platform that offers  \\r\\ndiverse entertainment ecosystems, including Gaming, Comics, Augmented Reality, and Esport, with \\r\\na focus on creating content that resonates with the community's interests and passions. \\r\\n\\r\\nLinktree: https://linktr.ee/morragames\\r\\nTelegram (Portal): t.me/morragames\\r\\nTwitter: twitter.com/morragames\\r\\n\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.10;\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n   \\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount)\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\r\\n        require(\\r\\n            currentAllowance >= amount,\\r\\n            \\\"ERC20: transfer amount exceeds allowance\\\"\\r\\n        );\\r\\n        unchecked {\\r\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue)\\r\\n        public\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(\\r\\n            _msgSender(),\\r\\n            spender,\\r\\n            _allowances[_msgSender()][spender] + addedValue\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\r\\n        public\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\r\\n        require(\\r\\n            currentAllowance >= subtractedValue,\\r\\n            \\\"ERC20: decreased allowance below zero\\\"\\r\\n        );\\r\\n        unchecked {\\r\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(\\r\\n            senderBalance >= amount,\\r\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\r\\n        );\\r\\n        unchecked {\\r\\n            _balances[sender] = senderBalance - amount;\\r\\n        }\\r\\n        _balances[recipient] += amount;\\r\\n\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function _createInitialSupply(address account, uint256 amount)\\r\\n        internal\\r\\n        virtual\\r\\n    {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    constructor() {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership(bool confirmRenounce)\\r\\n        external\\r\\n        virtual\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(confirmRenounce, \\\"Please confirm renounce!\\\");\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface ILpPair {\\r\\n    function sync() external;\\r\\n}\\r\\n\\r\\ninterface IDexRouter {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n}\\r\\n\\r\\ninterface IDexFactory {\\r\\n    function createPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        returns (address pair);\\r\\n}\\r\\n\\r\\ncontract Morra is ERC20, Ownable {\\r\\n    uint256 public maxBuyAmount;\\r\\n    uint256 public maxSellAmount;\\r\\n    uint256 public maxWallet;\\r\\n\\r\\n    IDexRouter public dexRouter;\\r\\n    address public lpPair;\\r\\n\\r\\n    bool private swapping;\\r\\n    uint256 public swapTokensAtAmount;\\r\\n\\r\\n    address public devAddress;\\r\\n    address public marketingAddress;\\r\\n    address public reservedAddress;\\r\\n\\r\\n    uint256 public tradingActiveBlock = 0; // 0 means trading is not active\\r\\n    uint256 public antiBotBlock;\\r\\n    mapping(address => bool) public botsBuy;\\r\\n    address[] public identifiedBots;\\r\\n    uint256 public botsIdentified;\\r\\n\\r\\n    bool public limitsInEffect = true;\\r\\n    bool public tradingActive = false;\\r\\n    bool public swapEnabled = false;\\r\\n\\r\\n    // Anti-bot and anti-whale mappings and variables\\r\\n    mapping(address => uint256) private _holderLastTransferTimestamp; // to hold last Transfers temporarily during launch\\r\\n    bool public transferDelayEnabled = true;\\r\\n\\r\\n    uint256 public buyTotalFees;\\r\\n    uint256 public buyDevFee;\\r\\n    uint256 public buyLiquidityFee;\\r\\n    uint256 public buyMarketingfee;\\r\\n\\r\\n    uint256 public sellTotalFees;\\r\\n    uint256 public sellDevFee;\\r\\n    uint256 public sellLiquidityFee;\\r\\n    uint256 public sellMarketingfee;\\r\\n\\r\\n    uint256 public tokensForDev;\\r\\n    uint256 public tokensForLiquidity;\\r\\n    uint256 public tokensForMarketing;\\r\\n    bool public markBotsEnabled = true;\\r\\n    bool private taxFree = false; \\r\\n\\r\\n    /******************/\\r\\n\\r\\n    // exlcude from fees and max transaction amount\\r\\n    mapping(address => bool) private _isExcludedFromFees;\\r\\n    mapping(address => bool) public _isExcludedMaxTransactionAmount;\\r\\n\\r\\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\\r\\n    // could be subject to a maximum transfer amount\\r\\n    mapping(address => bool) public automatedMarketMakerPairs;\\r\\n\\r\\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\\r\\n\\r\\n    event EnabledTrading();\\r\\n\\r\\n    event ExcludeFromFees(address indexed account, bool isExcluded);\\r\\n\\r\\n    event UpdatedMaxBuyAmount(uint256 newAmount);\\r\\n\\r\\n    event UpdatedMaxSellAmount(uint256 newAmount);\\r\\n\\r\\n    event UpdatedMaxWalletAmount(uint256 newAmount);\\r\\n\\r\\n    event UpdatedDevAddress(address indexed newWallet);\\r\\n\\r\\n    event UpdatedMarketingAddress(address indexed newWallet);\\r\\n\\r\\n    event UpdatedReservedAddress(address indexed newWallet);\\r\\n\\r\\n    event MaxTransactionExclusion(address _address, bool excluded);\\r\\n\\r\\n    event OwnerForcedSwapBack(uint256 timestamp);\\r\\n\\r\\n    event BotBlocked(address sniper);\\r\\n\\r\\n    event SwapAndLiquify(\\r\\n        uint256 tokensSwapped,\\r\\n        uint256 ethReceived,\\r\\n        uint256 tokensIntoLiquidity\\r\\n    );\\r\\n\\r\\n    event TransferForeignToken(address token, uint256 amount);\\r\\n\\r\\n    event UpdatedPrivateMaxSell(uint256 amount);\\r\\n\\r\\n    event EnabledSelling();\\r\\n\\r\\n    constructor() payable ERC20(\\\"Morra\\\", \\\"MORRA\\\") {\\r\\n        address newOwner = msg.sender; \\r\\n\\r\\n        address _dexRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; \\r\\n\\r\\n        // initialize router\\r\\n        dexRouter = IDexRouter(_dexRouter);\\r\\n\\r\\n        // create pair\\r\\n        lpPair = IDexFactory(dexRouter.factory()).createPair(\\r\\n            address(this),\\r\\n            dexRouter.WETH()\\r\\n        );\\r\\n        _excludeFromMaxTransaction(address(lpPair), true);\\r\\n        _setAutomatedMarketMakerPair(address(lpPair), true);\\r\\n\\r\\n        uint256 totalSupply = 500 * 1e6 * 1e18; // 500 million\\r\\n\\r\\n        maxBuyAmount = (totalSupply * 10) / 100; // 10%\\r\\n        maxSellAmount = (totalSupply * 10) / 100; // 10%\\r\\n        maxWallet = (totalSupply * 10) / 100; // 10%\\r\\n        swapTokensAtAmount = (totalSupply * 5) / 10000; // 0.05 %\\r\\n\\r\\n        buyDevFee = 2;\\r\\n        buyLiquidityFee = 1;\\r\\n        buyMarketingfee = 2;\\r\\n        buyTotalFees = buyDevFee + buyLiquidityFee + buyMarketingfee;\\r\\n\\r\\n        sellDevFee = 3;\\r\\n        sellLiquidityFee = 1;\\r\\n        sellMarketingfee = 3;\\r\\n        sellTotalFees = sellDevFee + sellLiquidityFee + sellMarketingfee;\\r\\n\\r\\n        devAddress = address(msg.sender);\\r\\n        marketingAddress = address(0x92e394743b6d710ec011Ab85A36C01E9a08543c7);\\r\\n        reservedAddress = address(0x13cB8918f77c0D2b7C8FfC7283A6eBF7f605019d);\\r\\n\\r\\n        _excludeFromMaxTransaction(newOwner, true);\\r\\n        _excludeFromMaxTransaction(address(this), true);\\r\\n        _excludeFromMaxTransaction(address(0xdead), true);\\r\\n        _excludeFromMaxTransaction(address(devAddress), true);\\r\\n        _excludeFromMaxTransaction(address(marketingAddress), true);\\r\\n        _excludeFromMaxTransaction(address(reservedAddress), true);\\r\\n        _excludeFromMaxTransaction(address(dexRouter), true);\\r\\n\\r\\n        excludeFromFees(newOwner, true);\\r\\n        excludeFromFees(address(this), true);\\r\\n        excludeFromFees(address(0xdead), true);\\r\\n        excludeFromFees(address(devAddress), true);\\r\\n        excludeFromFees(address(marketingAddress), true);\\r\\n        excludeFromFees(address(reservedAddress), true);\\r\\n        excludeFromFees(address(dexRouter), true);\\r\\n\\r\\n        _createInitialSupply(newOwner, totalSupply);\\r\\n\\r\\n        transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function enableTrading(uint256 blocksForPenalty) external onlyOwner {\\r\\n        require(!tradingActive, \\\"Cannot reenable trading\\\");\\r\\n        require(\\r\\n            blocksForPenalty <= 10,\\r\\n            \\\"Cannot make penalty blocks more than 10\\\"\\r\\n        );\\r\\n        tradingActive = true;\\r\\n        swapEnabled = true;\\r\\n        tradingActiveBlock = block.number;\\r\\n        antiBotBlock = tradingActiveBlock + blocksForPenalty;\\r\\n        emit EnabledTrading();\\r\\n    }\\r\\n\\r\\n    function bots() external view returns (address[] memory) {\\r\\n        return identifiedBots;\\r\\n    }\\r\\n\\r\\n    function identifySniper(address wallet) external onlyOwner {\\r\\n        require(\\r\\n            markBotsEnabled,\\r\\n            \\\"Mark bot functionality has been disabled forever!\\\"\\r\\n        );\\r\\n        require(!botsBuy[wallet], \\\"Wallet is already flagged.\\\");\\r\\n        botsBuy[wallet] = true;\\r\\n    }\\r\\n\\r\\n    function removeSniper(address wallet) external onlyOwner {\\r\\n        require(botsBuy[wallet], \\\"Wallet is already not flagged.\\\");\\r\\n        botsBuy[wallet] = false;\\r\\n    }\\r\\n\\r\\n    function emergencySetRouter(address router, bool _swapEnabled) external onlyOwner {\\r\\n        require(!tradingActive, \\\"Cannot set after trading is functional\\\");\\r\\n        dexRouter = IDexRouter(router);\\r\\n        swapEnabled = _swapEnabled; \\r\\n    }\\r\\n\\r\\n    // disable Transfer delay - cannot be reenabled\\r\\n    function disableTransferDelay() external onlyOwner {\\r\\n        transferDelayEnabled = false;\\r\\n    }\\r\\n\\r\\n    function setTaxFree(bool set) external onlyOwner {\\r\\n        taxFree = set; \\r\\n    }\\r\\n\\r\\n    function setMaxBuyAmount(uint256 newNum) external onlyOwner {\\r\\n        require(\\r\\n            newNum >= ((totalSupply() * 5) / 1000) / 1e18,\\r\\n            \\\"Cannot set max buy amount lower than 0.5%\\\"\\r\\n        );\\r\\n        require(\\r\\n            newNum <= ((totalSupply() * 10) / 100) / 1e18,\\r\\n            \\\"Cannot set max buy amount higher than 10%\\\"\\r\\n        );\\r\\n        maxBuyAmount = newNum * (10**18);\\r\\n        emit UpdatedMaxBuyAmount(maxBuyAmount);\\r\\n    }\\r\\n\\r\\n    function setMaxSellAmount(uint256 newNum) external onlyOwner {\\r\\n        require(\\r\\n            newNum >= ((totalSupply() * 5) / 1000) / 1e18,\\r\\n            \\\"Cannot set max sell amount lower than 0.5%\\\"\\r\\n        );\\r\\n        require(\\r\\n            newNum <= ((totalSupply() * 10) / 100) / 1e18,\\r\\n            \\\"Cannot set max sell amount higher than 10%\\\"\\r\\n        );\\r\\n        maxSellAmount = newNum * (10**18);\\r\\n        emit UpdatedMaxSellAmount(maxSellAmount);\\r\\n    }\\r\\n\\r\\n    function setMaxWalletAmount(uint256 newNum) external onlyOwner {\\r\\n        require(\\r\\n            newNum >= ((totalSupply() * 5) / 1000) / 1e18,\\r\\n            \\\"Cannot set max wallet amount lower than 0.5%\\\"\\r\\n        );\\r\\n        require(\\r\\n            newNum <= ((totalSupply() * 10) / 100) / 1e18,\\r\\n            \\\"Cannot set max wallet amount higher than 10%\\\"\\r\\n        );\\r\\n        maxWallet = newNum * (10**18);\\r\\n        emit UpdatedMaxWalletAmount(maxWallet);\\r\\n    }\\r\\n\\r\\n    // change the minimum amount of tokens to sell from fees\\r\\n    function setSwapTokensAtAmount(uint256 newAmount) external onlyOwner {\\r\\n        require(\\r\\n            newAmount >= (totalSupply() * 1) / 100000,\\r\\n            \\\"Swap amount cannot be lower than 0.001% total supply.\\\"\\r\\n        );\\r\\n        require(\\r\\n            newAmount <= (totalSupply() * 1) / 1000,\\r\\n            \\\"Swap amount cannot be higher than 0.1% total supply.\\\"\\r\\n        );\\r\\n        swapTokensAtAmount = newAmount;\\r\\n    }\\r\\n\\r\\n    function _excludeFromMaxTransaction(address updAds, bool isExcluded)\\r\\n        private\\r\\n    {\\r\\n        _isExcludedMaxTransactionAmount[updAds] = isExcluded;\\r\\n        emit MaxTransactionExclusion(updAds, isExcluded);\\r\\n    }\\r\\n\\r\\n    function excludeFromMaxTransaction(address updAds, bool isEx)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        if (!isEx) {\\r\\n            require(\\r\\n                updAds != lpPair,\\r\\n                \\\"Cannot remove uniswap pair from max txn\\\"\\r\\n            );\\r\\n        }\\r\\n        _isExcludedMaxTransactionAmount[updAds] = isEx;\\r\\n    }\\r\\n\\r\\n    function setAutomatedMarketMakerPair(address pair, bool value)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(\\r\\n            pair != lpPair,\\r\\n            \\\"The pair cannot be removed from automatedMarketMakerPairs\\\"\\r\\n        );\\r\\n        _setAutomatedMarketMakerPair(pair, value);\\r\\n        emit SetAutomatedMarketMakerPair(pair, value);\\r\\n    }\\r\\n\\r\\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\\r\\n        automatedMarketMakerPairs[pair] = value;\\r\\n        _excludeFromMaxTransaction(pair, value);\\r\\n        emit SetAutomatedMarketMakerPair(pair, value);\\r\\n    }\\r\\n\\r\\n    function setBuyFees(\\r\\n        uint256 _operationsFee,\\r\\n        uint256 _liquidityFee,\\r\\n        uint256 _marketingfee\\r\\n    ) external onlyOwner {\\r\\n        buyDevFee = _operationsFee;\\r\\n        buyLiquidityFee = _liquidityFee;\\r\\n        buyMarketingfee = _marketingfee;\\r\\n        buyTotalFees = buyDevFee + buyLiquidityFee + buyMarketingfee;\\r\\n        require(buyTotalFees <= 20, \\\"Must keep fees at 20% or less\\\");\\r\\n    }\\r\\n\\r\\n    function setSellFees(\\r\\n        uint256 _operationsFee,\\r\\n        uint256 _liquidityFee,\\r\\n        uint256 _marketingfee\\r\\n    ) external onlyOwner {\\r\\n        sellDevFee = _operationsFee;\\r\\n        sellLiquidityFee = _liquidityFee;\\r\\n        sellMarketingfee = _marketingfee;\\r\\n        sellTotalFees = sellDevFee + sellLiquidityFee + sellMarketingfee;\\r\\n        require(sellTotalFees <= 30, \\\"Must keep fees at 30% or less\\\");\\r\\n    }\\r\\n\\r\\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\\r\\n        _isExcludedFromFees[account] = excluded;\\r\\n        emit ExcludeFromFees(account, excluded);\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal override {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(amount > 0, \\\"amount must be greater than 0\\\");\\r\\n\\r\\n        if (!tradingActive) {\\r\\n            require(\\r\\n                _isExcludedFromFees[from] || _isExcludedFromFees[to],\\r\\n                \\\"Trading is not active.\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (!antiBot() && tradingActive) {\\r\\n            require(\\r\\n                !botsBuy[from] || to == owner() || to == address(0xdead),\\r\\n                \\\"Bots cannot transfer tokens in or out except to owner or dead address.\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (limitsInEffect) {\\r\\n            if (\\r\\n                from != owner() &&\\r\\n                to != owner() &&\\r\\n                to != address(0xdead) &&\\r\\n                !_isExcludedFromFees[from] &&\\r\\n                !_isExcludedFromFees[to]\\r\\n            ) {\\r\\n                if (transferDelayEnabled) {\\r\\n                    if (to != address(dexRouter) && to != address(lpPair)) {\\r\\n                        require(\\r\\n                            _holderLastTransferTimestamp[tx.origin] <\\r\\n                                block.number - 2 &&\\r\\n                                _holderLastTransferTimestamp[to] <\\r\\n                                block.number - 2,\\r\\n                            \\\"_transfer:: Transfer Delay enabled.  Try again later.\\\"\\r\\n                        );\\r\\n                        _holderLastTransferTimestamp[tx.origin] = block.number;\\r\\n                        _holderLastTransferTimestamp[to] = block.number;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                //when buy\\r\\n                if (\\r\\n                    automatedMarketMakerPairs[from] &&\\r\\n                    !_isExcludedMaxTransactionAmount[to]\\r\\n                ) {\\r\\n                    require(\\r\\n                        amount <= maxBuyAmount,\\r\\n                        \\\"Buy transfer amount exceeds the max buy.\\\"\\r\\n                    );\\r\\n                    require(\\r\\n                        amount + balanceOf(to) <= maxWallet,\\r\\n                        \\\"Max Wallet Exceeded\\\"\\r\\n                    );\\r\\n                }\\r\\n                //when sell\\r\\n                else if (\\r\\n                    automatedMarketMakerPairs[to] &&\\r\\n                    !_isExcludedMaxTransactionAmount[from]\\r\\n                ) {\\r\\n                    require(\\r\\n                        amount <= maxSellAmount,\\r\\n                        \\\"Sell transfer amount exceeds the max sell.\\\"\\r\\n                    );\\r\\n                } else if (!_isExcludedMaxTransactionAmount[to]) {\\r\\n                    require(\\r\\n                        amount + balanceOf(to) <= maxWallet,\\r\\n                        \\\"Max Wallet Exceeded\\\"\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 contractTokenBalance = balanceOf(address(this));\\r\\n\\r\\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\\r\\n\\r\\n        if (\\r\\n            canSwap && swapEnabled && !swapping && automatedMarketMakerPairs[to]\\r\\n        ) {\\r\\n            swapping = true;\\r\\n            swapBack();\\r\\n            swapping = false;\\r\\n        }\\r\\n\\r\\n        bool takeFee = true;\\r\\n        // if any account belongs to _isExcludedFromFee account then remove the fee\\r\\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\\r\\n            takeFee = false;\\r\\n        }\\r\\n\\r\\n        uint256 fees = 0;\\r\\n        // only take fees on buys/sells, do not take on wallet transfers\\r\\n        if (takeFee) {\\r\\n            // bot/sniper penalty.\\r\\n            if (\\r\\n                (antiBot()) &&\\r\\n                automatedMarketMakerPairs[from] &&\\r\\n                !automatedMarketMakerPairs[to] &&\\r\\n                !_isExcludedFromFees[to] &&\\r\\n                buyTotalFees > 0\\r\\n            ) {\\r\\n\\r\\n                if (!botsBuy[to]) {\\r\\n                    botsBuy[to] = true;\\r\\n                    botsIdentified += 1;\\r\\n                    identifiedBots.push(to);\\r\\n                    emit BotBlocked(to);\\r\\n                }\\r\\n\\r\\n                fees = (amount * 80) / 100;\\r\\n                tokensForLiquidity += (fees * buyLiquidityFee) / buyTotalFees;\\r\\n                tokensForDev += (fees * buyDevFee) / buyTotalFees;\\r\\n                tokensForMarketing += (fees * buyMarketingfee) / buyTotalFees;\\r\\n            }\\r\\n\\r\\n            // on sell\\r\\n            else if (automatedMarketMakerPairs[to] && sellTotalFees > 0) {\\r\\n                fees = (amount * sellTotalFees) / 100;\\r\\n                tokensForLiquidity += (fees * sellLiquidityFee) / sellTotalFees;\\r\\n                tokensForDev +=\\r\\n                    (fees * sellDevFee) /\\r\\n                    sellTotalFees;\\r\\n                tokensForMarketing += (fees * sellMarketingfee) / sellTotalFees;\\r\\n            }\\r\\n            // on buy\\r\\n            else if (automatedMarketMakerPairs[from] && buyTotalFees > 0) {\\r\\n                fees = (amount * buyTotalFees) / 100;\\r\\n                tokensForLiquidity += (fees * buyLiquidityFee) / buyTotalFees;\\r\\n                tokensForDev += (fees * buyDevFee) / buyTotalFees;\\r\\n                tokensForMarketing += (fees * buyMarketingfee) / buyTotalFees;\\r\\n            }\\r\\n            \\r\\n            if(!taxFree) {\\r\\n\\r\\n                if (fees > 0) {\\r\\n                    super._transfer(from, address(this), fees);\\r\\n                }\\r\\n\\r\\n                amount -= fees;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        super._transfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    function antiBot() public view returns (bool) {\\r\\n        return block.number < antiBotBlock;\\r\\n    }\\r\\n\\r\\n    function swapTokensForEth(uint256 tokenAmount) private {\\r\\n        // generate the uniswap pair path of token -> weth\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = dexRouter.WETH();\\r\\n\\r\\n        _approve(address(this), address(dexRouter), tokenAmount);\\r\\n\\r\\n        // make the swap\\r\\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, // accept any amount of ETH\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\r\\n        // approve token transfer to cover all possible scenarios\\r\\n        _approve(address(this), address(dexRouter), tokenAmount);\\r\\n\\r\\n        // add the liquidity\\r\\n        dexRouter.addLiquidityETH{value: ethAmount}(\\r\\n            address(this),\\r\\n            tokenAmount,\\r\\n            0, // slippage is unavoidable\\r\\n            0, // slippage is unavoidable\\r\\n            reservedAddress,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function swapBack() private {\\r\\n        uint256 contractBalance = balanceOf(address(this));\\r\\n\\r\\n        uint256 totalTokensToSwap = tokensForLiquidity +\\r\\n            tokensForDev +\\r\\n            tokensForMarketing;\\r\\n\\r\\n        uint256 trueTokensToSwap = contractBalance < totalTokensToSwap ? contractBalance : totalTokensToSwap; \\r\\n\\r\\n        if (trueTokensToSwap == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (trueTokensToSwap > swapTokensAtAmount * 30) {\\r\\n            trueTokensToSwap = swapTokensAtAmount * 30;\\r\\n        }\\r\\n\\r\\n        bool success;\\r\\n\\r\\n        // Halve the amount of liquidity tokens\\r\\n        uint256 liquidityTokens = (trueTokensToSwap * tokensForLiquidity) /\\r\\n            totalTokensToSwap /\\r\\n            2;\\r\\n\\r\\n        swapTokensForEth(trueTokensToSwap - liquidityTokens);\\r\\n\\r\\n        uint256 ethBalance = address(this).balance;\\r\\n        uint256 ethForLiquidity = ethBalance;\\r\\n\\r\\n        uint256 ethForDev = (ethBalance * tokensForDev) /\\r\\n            (totalTokensToSwap - (tokensForLiquidity / 2));\\r\\n        uint256 ethForMarketing = (ethBalance * tokensForMarketing) /\\r\\n            (totalTokensToSwap - (tokensForLiquidity / 2));\\r\\n\\r\\n        ethForLiquidity -= ethForDev + ethForMarketing;\\r\\n\\r\\n        tokensForLiquidity = 0;\\r\\n        tokensForDev = 0;\\r\\n        tokensForMarketing = 0;\\r\\n\\r\\n        if (liquidityTokens > 0 && ethForLiquidity > 0) {\\r\\n            addLiquidity(liquidityTokens, ethForLiquidity);\\r\\n        }\\r\\n\\r\\n        (success, ) = address(marketingAddress).call{value: ethForMarketing}(\\\"\\\");\\r\\n        (success, ) = address(devAddress).call{\\r\\n            value: address(this).balance\\r\\n        }(\\\"\\\");\\r\\n    }\\r\\n\\r\\n    function withdrawForeignToken(address _token, address _to)\\r\\n        external\\r\\n        onlyOwner\\r\\n        returns (bool _sent)\\r\\n    {\\r\\n        require(_token != address(0), \\\"_token address cannot be 0\\\");\\r\\n        require(\\r\\n            _token != address(this) || !tradingActive,\\r\\n            \\\"Can't withdraw native tokens while trading is active\\\"\\r\\n        );\\r\\n        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));\\r\\n        _sent = IERC20(_token).transfer(_to, _contractBalance);\\r\\n        emit TransferForeignToken(_token, _contractBalance);\\r\\n    }\\r\\n\\r\\n    // withdraw ETH if stuck or someone sends to the address\\r\\n    function withdrawStuckETH() external onlyOwner {\\r\\n        bool success;\\r\\n        (success, ) = address(msg.sender).call{value: address(this).balance}(\\r\\n            \\\"\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setDevAddress(address _devAddress)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(\\r\\n            _devAddress != address(0),\\r\\n            \\\"_devAddress address cannot be 0\\\"\\r\\n        );\\r\\n        devAddress = payable(_devAddress);\\r\\n        emit UpdatedDevAddress(_devAddress);\\r\\n    }\\r\\n\\r\\n    function setMarketingAddress(address _marketingAddress) external onlyOwner {\\r\\n        require(\\r\\n            _marketingAddress != address(0),\\r\\n            \\\"_marketingAddress address cannot be 0\\\"\\r\\n        );\\r\\n        marketingAddress = payable(_marketingAddress);\\r\\n        emit UpdatedMarketingAddress(_marketingAddress);\\r\\n    }\\r\\n\\r\\n    function setReservedAddress(address _reservedAddress) external onlyOwner {\\r\\n        require(\\r\\n            _reservedAddress != address(0),\\r\\n            \\\"_reservedAddress address cannot be 0\\\"\\r\\n        );\\r\\n        reservedAddress = payable(_reservedAddress);\\r\\n        emit UpdatedReservedAddress(_reservedAddress);\\r\\n    }\\r\\n\\r\\n    // force Swap back if slippage issues.\\r\\n    function forceSwapBack() external onlyOwner {\\r\\n        require(\\r\\n            balanceOf(address(this)) >= swapTokensAtAmount,\\r\\n            \\\"Can only swap when token amount is at or higher than restriction\\\"\\r\\n        );\\r\\n        swapping = true;\\r\\n        swapBack();\\r\\n        swapping = false;\\r\\n        emit OwnerForcedSwapBack(block.timestamp);\\r\\n    }\\r\\n\\r\\n    // remove limits after token is stable\\r\\n    function removeLimits() external onlyOwner {\\r\\n        limitsInEffect = false;\\r\\n    }\\r\\n\\r\\n    function disableMarkBotsForever() external onlyOwner {\\r\\n        require(\\r\\n            markBotsEnabled,\\r\\n            \\\"Mark bot functionality already disabled forever!!\\\"\\r\\n        );\\r\\n\\r\\n        markBotsEnabled = false;\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sniper\",\"type\":\"address\"}],\"name\":\"BotBlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EnabledSelling\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EnabledTrading\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"MaxTransactionExclusion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OwnerForcedSwapBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferForeignToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"UpdatedDevAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"UpdatedMarketingAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxBuyAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxSellAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxWalletAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UpdatedPrivateMaxSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"UpdatedReservedAddress\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedMaxTransactionAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiBotBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bots\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"botsBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"botsIdentified\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IDexRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableMarkBotsForever\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTransferDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_swapEnabled\",\"type\":\"bool\"}],\"name\":\"emergencySetRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blocksForPenalty\",\"type\":\"uint256\"}],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updAds\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceSwapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"identifiedBots\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"identifySniper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"markBotsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"removeSniper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"confirmRenounce\",\"type\":\"bool\"}],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operationsFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingfee\",\"type\":\"uint256\"}],\"name\":\"setBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingAddress\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"setMaxBuyAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"setMaxSellAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reservedAddress\",\"type\":\"address\"}],\"name\":\"setReservedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operationsFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingfee\",\"type\":\"uint256\"}],\"name\":\"setSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"set\",\"type\":\"bool\"}],\"name\":\"setTaxFree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForDev\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActiveBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawForeignToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_sent\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Morra", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}