{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAutoStakeFor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\ninterface IAutoStakeFor {\\n    function stakeFor(address _for, uint256 amount) external;\\n    function rewardsDuration() external view returns(uint256);\\n    function earned(address _account) external view returns(uint256);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBooster.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IBooster {\\n    struct PoolInfo {\\n        address lptoken;\\n        address token;\\n        address gauge;\\n        address crvRewards;\\n        address stash;\\n        bool shutdown;\\n    }\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (bool);\\n\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _amount,\\n        bool _stake\\n    ) external returns (bool);\\n\\n    function depositAll(uint256 _pid, bool _stake) external returns (bool);\\n\\n    function poolInfo(uint256 _index) external view returns (PoolInfo memory);\\n\\n    function poolLength() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICVXRewards.sol\": {\r\n      \"content\": \"\\npragma solidity ^0.8.0;\\n\\ninterface ICVXRewards {\\n    function withdraw(uint256 _amount, bool claim) external;\\n    function getReward(bool _stake) external;\\n    function stake(uint256 _amount) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IFeeReceiving.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\ninterface IFeeReceiving {\\n    function feeReceiving(\\n        address _sender,\\n        address _token,\\n        uint256 _amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IInflation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\ninterface IInflation {\\n    function getToken(address) external;\\n    function getToken() external;\\n    function getToken(address[] memory) external;\\n    function totalMinted() external view returns(uint256);\\n    function claimable(address) external view returns(uint256);\\n    function targetMinted() external view returns(uint256);\\n    function periodicEmission() external view returns(uint256);\\n    function startInflationTime() external view returns(uint256);\\n    function periodDuration() external view returns(uint256);\\n    function sumWeight() external view returns(uint256);\\n    function weights(address) external view returns(uint256);\\n    function token() external view returns(address);\\n    function lastTs() external view returns(uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IReferralProgram.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\ninterface IReferralProgram {\\n    struct User {\\n        bool exists;\\n        address referrer;\\n    }\\n\\n    function users(address wallet)\\n        external\\n        returns (User memory user);\\n\\n    function registerUser(address referrer, address referral) external;\\n\\n    function rootAddress() external view returns(address);\\n    function rewards(address user, address token) external view returns(uint256);\\n\\n    function feeReceiving(\\n        address _for,\\n        address _token,\\n        uint256 _amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewards.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\ninterface IRewards {\\n    function stake(address, uint256) external;\\n\\n    function stake(uint256) external;\\n\\n    function stakeFor(address, uint256) external;\\n\\n    function withdraw(address, uint256) external;\\n\\n    function exit(address) external;\\n\\n    function getReward(bool) external;\\n\\n    function getReward(address, bool) external returns(bool);\\n\\n    function getReward() external returns (bool);\\n\\n    function queueNewRewards(uint256) external;\\n\\n    function notifyRewardAmount(uint256) external;\\n\\n    function addExtraReward(address) external;\\n\\n    function stakingToken() external returns (address);\\n\\n    function withdraw(uint256, bool) external returns(bool);\\n\\n    function withdrawAndUnwrap(uint256 amount, bool claim)\\n        external\\n        returns (bool);\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function depositAll(bool, address) external;\\n\\n    function deposit(uint256, bool) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVeToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\ninterface IVeToken {\\n\\n    struct Point {\\n        int128 bias;\\n        int128 slope; // - dweight / dt\\n        uint256 ts;\\n        uint256 blk; // block\\n    }\\n    function pointHistory(uint256 index) external view returns(Point memory);\\n\\n    function createLockFor(address addr, uint256 amount, uint256 lockEnd) external;\\n\\n    function depositFor(address _addr, uint256 _value) external;\\n\\n    function increaseAmountFor(address _account, uint256 _value) external;\\n\\n    function increaseUnlockTimeFor(address _account, uint256 _unlockTime) external;\\n\\n    function getLastUserSlope(address addr) external view returns (int128);\\n\\n    function lockedEnd(address addr) external view returns (uint256);\\n\\n    function lockedAmount(address addr) external view returns (uint256);\\n\\n    function userPointEpoch(address addr) external view returns (uint256);\\n\\n    function userPointHistoryTs(address addr, uint256 epoch)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function balanceOfAt(address addr, uint256 _block)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function balanceOf(address addr) external view returns (uint256);\\n\\n    function balanceOf(address addr, uint256 timestamp)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function lockedSupply() external view returns (uint256);\\n\\n    function lockStarts(address addr) external view returns (uint256);\\n\\n    function totalSupplyAt(uint256 _block) external view returns (uint256);\\n\\n    function MAXTIME() external view returns (uint256);\\n\\n    function WEEK() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/curve/ICurveCrvCvxCrvPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\ninterface ICurveCrvCvxCrvPool {\\n  function add_liquidity(\\n    uint256[2] memory _amounts,\\n    uint256 _min_mint_amount\\n  ) external returns(uint256);\\n\\n  function coins(\\n    uint256 index\\n  ) external view returns(address);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/vaults/ConvexVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./base/BaseVault.sol\\\";\\nimport \\\"./../interfaces/IBooster.sol\\\";\\nimport \\\"./../interfaces/IRewards.sol\\\";\\nimport \\\"./../interfaces/ICVXRewards.sol\\\";\\nimport \\\"./../interfaces/curve/ICurveCrvCvxCrvPool.sol\\\";\\n\\ncontract ConvexVault is BaseVault {\\n\\n    struct ConstructorParams {\\n        address rewardToken;    // reward token\\n        IERC20 stakeToken;  // stake token (LP)\\n        address inflation;  // Inflation address\\n        string name;    // LP Vault token name\\n        string symbol;  // LP Vault token symbol\\n        address referralProgramAddress; // Referral program contract address\\n        address boosterAddress;\\n        uint256 poolIndex;\\n        address crvRewardAddress;   // CRV Rewards contract address\\n        address curvePool;\\n        uint256 percentageToBeLocked;\\n        address veTokenAddress;\\n    }\\n\\n    using SafeERC20 for IERC20;\\n\\n    address public immutable boosterAddress;    // Booster address\\n    uint256 public immutable poolIndex;   // Pool index\\n    address public immutable crvRewardAddress;   \\n\\n    address public immutable curvePool; \\n\\n    address[2] public coins;\\n\\n    /**\\n    * @param _params ConstructorParams struct \\n    */\\n    constructor(\\n        ConstructorParams memory _params\\n    ) BaseVault(\\n        _params.rewardToken,\\n        _params.stakeToken,\\n        _params.inflation,\\n        _params.name,\\n        _params.symbol,\\n        _params.referralProgramAddress,\\n        _params.percentageToBeLocked,\\n        _params.veTokenAddress\\n    ) {\\n        boosterAddress = _params.boosterAddress;\\n        stakeToken.safeApprove(_params.boosterAddress, type(uint256).max);\\n        poolIndex = _params.poolIndex;\\n        crvRewardAddress = _params.crvRewardAddress;\\n        curvePool = _params.curvePool;\\n        for (uint256 i = 0; i < 2; i++) {\\n            address coinAddress = ICurveCrvCvxCrvPool(_params.curvePool).coins(i);\\n            IERC20(coinAddress).approve(_params.curvePool, type(uint256).max);\\n            coins[i] = coinAddress;\\n        }\\n    }\\n\\n    function _getEarnedAmountFromExternalProtocol(address _user, uint256 _index) internal override returns(uint256 vaultEarned) {\\n        address crvReward = crvRewardAddress;\\n        Reward[] memory _rewards = rewards;\\n        if (_index == 1 || _index == 2 && crvReward != address(0)) { // index == CRV OR index == CVX\\n            IRewards(crvReward).getReward(address(this), false); // claim CRV and CVX\\n        }\\n    }\\n\\n    function _harvestFromExternalProtocol() internal override {\\n        require(\\n            IRewards(crvRewardAddress).getReward(address(this), false),\\n            \\\"!getRewardsCRV\\\"\\n        );\\n    }\\n\\n    function _depositToExternalProtocol(uint256 _amount, address _from) internal override {\\n        IERC20 stake = stakeToken;\\n        address booster = boosterAddress;\\n        if (_from != address(this)) stake.safeTransferFrom(_from, address(this), _amount);\\n        if (booster != address(0)) {\\n            IBooster(booster).depositAll(\\n                poolIndex,\\n                true\\n            );\\n        }\\n    }\\n\\n    function depositUnderlyingTokensFor(\\n        uint256[2] memory _amounts, \\n        uint256 _min_mint_amount, \\n        address _to\\n    ) external whenNotPaused nonReentrant {\\n        for (uint256 i; i < 2; i++) {\\n            IERC20(coins[i]).transferFrom(_msgSender(), address(this), _amounts[i]);\\n        }\\n        uint256 received = ICurveCrvCvxCrvPool(curvePool).add_liquidity(_amounts, _min_mint_amount);\\n        _depositForFrom(received, _to, address(this));\\n    }\\n\\n    function _withdrawFromExternalProtocol(uint256 _amount, address _to) internal override {\\n        IRewards(crvRewardAddress).withdraw(_amount, true);\\n        require(\\n            IBooster(boosterAddress).withdraw(\\n                poolIndex,\\n                _amount\\n            ),\\n            \\\"!withdraw\\\"\\n        );\\n        stakeToken.safeTransfer(_to, _amount);\\n\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/vaults/base/BaseVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../../interfaces/IReferralProgram.sol\\\";\\nimport \\\"../../interfaces/IInflation.sol\\\";\\nimport \\\"../../interfaces/IFeeReceiving.sol\\\";\\nimport \\\"../../interfaces/IAutoStakeFor.sol\\\";\\nimport \\\"../../interfaces/IVeToken.sol\\\";\\n\\n// Token distribution is very similar to MasterChef's distribution\\n// logic, but MasterChef's mint is supposed to be unlimited in\\n// time and has fixed amount of reward per period, so we made some\\n// changes in the staking logic. In particular, we changed earned()\\n// and updatePool() functions, so now arbitrary Token portions are\\n// distributed correctly. Also we make the virtual stake for the\\n// owner to avoid stacking Token reward on the contract. The virtual\\n// stake is only 1 wei so it won't affect other users' stakes, but\\n// there will always be a non-zero stake, so if some Token remains\\n// on the contract, owner can claim it. Token can remain because\\n// MasterChef doesn't mint reward if there are no stakers, but\\n// Inflation mints it in any case.\\n\\nabstract contract BaseVault is ERC20, Pausable, ReentrancyGuard, Ownable {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    struct Reward {\\n        address rewardToken;    // Reward token address\\n        uint128 accRewardPerShare;  // Accumulated reward per share\\n        uint256 lastBalance;    // Balance of this contract at the last moment when pool was updated\\n        uint256 payedRewardForPeriod;   // Reward amount payed for all the period\\n    }\\n\\n    struct FeeReceiver {\\n        address receiver;   // Address of fee receiver\\n        uint256 bps; // Amount of reward token for the receiver (in BPs)\\n        bool isFeeReceivingCallNeeded;  // Flag if the feeReceiving() call needed or not\\n        mapping(address => bool) isTokenAllowedToBeChargedOfFees;   // Map if fee will be charged on this token\\n    }\\n\\n    address public inflation;    // Inflation contract address\\n    uint256 public startTime;   // Timestamp when the vault was configured\\n    IERC20 public immutable stakeToken;   // Stake token address\\n    IReferralProgram public referralProgram;    // Referral program contract address\\n    IAutoStakeFor public votingStakingRewards;  // VSR contract address\\n\\n    Reward[] public rewards;    // Array of reward tokens addresses\\n\\n    mapping(uint256 => FeeReceiver) public feeReceivers;  // Reward token receivers\\n    uint256 public feeReceiversLength;  // Reward token receivers count\\n\\n    bool public isGetRewardFeesEnabled; // Flag if fee distribution on getting reward enabled or not\\n\\n    uint256 public depositFeeBps;   // On deposit fee amount (in BPs)\\n    address public depositFeeReceiver;  // On deposit fee receiver\\n\\n    mapping(address => int256[]) public rewardDebts;  // users' reward debts\\n    mapping(address => address) public rewardDelegates;  // delegates addresses\\n\\n    uint256 public percentageToBeLocked;\\n    address public veToken;\\n\\n    uint256 internal constant ACC_REWARD_PRECISION = 1e12;\\n\\n    event Deposit(address indexed user, uint256 amount, address indexed to);\\n    event Withdraw(address indexed user, uint256 amount, address indexed to);\\n    event Harvest(address indexed user, uint256[] amounts);\\n    event LogUpdatePool(uint256 lpSupply, uint256[] rewardsPerPeriod);\\n    event NewRewardToken(address newToken);\\n    event Delegated(address delegator, address recipient);\\n\\n    modifier onlyInflation {\\n        require(_msgSender() == inflation, \\\"not inflation\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @param _rewardToken reward token\\n    * @param _stakeToken stake token (LP)\\n    * @param _inflation Inflation address\\n    * @param _name LP Vault token name\\n    * @param _symbol LP Vault token symbol\\n    * @param _referralProgramAddress Referral program contract address\\n    */\\n    constructor(\\n        address _rewardToken,\\n        IERC20 _stakeToken,\\n        address _inflation,\\n        string memory _name,\\n        string memory _symbol,\\n        address _referralProgramAddress,\\n        uint256 _percentageToBeLocked,\\n        address _veToken\\n    ) ERC20(_name, _symbol) {\\n        rewards.push(Reward(_rewardToken, 0, 0, 0));\\n        stakeToken = _stakeToken;\\n        inflation = _inflation;\\n        referralProgram = IReferralProgram(_referralProgramAddress);\\n        percentageToBeLocked = _percentageToBeLocked;\\n        veToken = _veToken;\\n        IERC20(_rewardToken).approve(address(veToken), type(uint256).max);\\n        _pause();\\n    }\\n\\n    /**\\n    * @notice Deletes all fee receivers\\n    * @dev Can be called only by owner\\n    */\\n    function deleteAllFeeReceivers() external onlyOwner {\\n        feeReceiversLength = 0;\\n    }\\n\\n\\n    function setPercentageToBeLocked(uint256 _percentageToBeLocked) external onlyOwner {\\n        require(_percentageToBeLocked <= 100, \\\"invalid percentage\\\");\\n        percentageToBeLocked = _percentageToBeLocked;\\n    }\\n\\n    function setVeToken(address _veToken) external onlyOwner {\\n        address token = rewards[0].rewardToken;\\n        IERC20(token).approve(veToken, 0);\\n        IERC20(token).approve(_veToken, type(uint256).max);\\n        veToken = _veToken;\\n    }\\n\\n    function setVotingStakingRewards(IAutoStakeFor _votingStakingRewards) external onlyOwner {\\n        votingStakingRewards = _votingStakingRewards;\\n    }\\n\\n    /**\\n    * @notice Adds fee receiver\\n    * @dev Can be called only by owner\\n    * @param _receiver New receiver address\\n    * @param _bps Amount of BPs for the new receiver\\n    * @param _isFeeReceivingCallNeeded Flag if feeReceiving() call needed\\n    * @param _rewardsTokens Reward token addresses\\n    * @param _statuses Flags if vault should pay fee on this token or not\\n    * @return feeReceiverIndex Index of the new added receiver\\n    */\\n    function addFeeReceiver(\\n        address _receiver,\\n        uint256 _bps,\\n        bool _isFeeReceivingCallNeeded,\\n        address[] calldata _rewardsTokens,\\n        bool[] calldata _statuses\\n    )\\n        external\\n        onlyOwner\\n        returns(uint256 feeReceiverIndex)\\n    {\\n        require(_rewardsTokens.length == _statuses.length, \\\"invalidLengths\\\");\\n        feeReceiverIndex = feeReceiversLength++;\\n        FeeReceiver storage feeReceiver = feeReceivers[feeReceiverIndex];\\n        feeReceiver.receiver = _receiver;\\n        feeReceiver.bps = _bps;\\n        feeReceiver.isFeeReceivingCallNeeded = _isFeeReceivingCallNeeded;\\n        for (uint256 i; i < _rewardsTokens.length; i++) {\\n            _setFeeReceiversTokensToBeChargedOfFees(feeReceiverIndex, _rewardsTokens[i], _statuses[i]);\\n        }\\n    }\\n\\n    /**\\n    * @notice Returns reward token array length\\n    */\\n    function rewardsCount() external view returns(uint256) {\\n        return rewards.length;\\n    }\\n\\n    /**\\n    * @notice Sets fee receiver address\\n    * @dev Can be called only by owner\\n    * @param _index Receiver index\\n    * @param _receiver New receiver address\\n    */\\n    function setFeeReceiverAddress(uint256 _index, address _receiver) external onlyOwner {\\n        feeReceivers[_index].receiver = _receiver;\\n    }\\n\\n    /**\\n    * @notice Sets BPs for fee receiver\\n    * @dev Can be called only by owner\\n    * @param _index Receiver index\\n    * @param _bps New receiver BPs\\n    */\\n    function setFeeReceiverBps(uint256 _index, uint256 _bps) external onlyOwner {\\n        require(_bps < 10000, \\\"incorrect BPs\\\");\\n        feeReceivers[_index].bps = _bps;\\n    }\\n\\n    /**\\n    * @notice Sets isFeeReceivingCallNeeded flag for fee receiver\\n    * @dev Can be called only by owner\\n    * @param _index Receiver index\\n    * @param _isFeeReceivingCallNeeded New flag\\n    */\\n    function setFeeReceiversCallNeeded(uint256 _index, bool _isFeeReceivingCallNeeded) external onlyOwner {\\n        feeReceivers[_index].isFeeReceivingCallNeeded = _isFeeReceivingCallNeeded;\\n    }\\n\\n    /**\\n    * @notice Sets isTokenAllowedToBeChargedOfFees flag for specified token at specified fee receiver\\n    * @dev Can be called only by owner\\n    * @param _index Receiver index\\n    * @param _rewardsToken Reward token address to change isTokenAllowedToBeChargedOfFees status\\n    * @param _status New status for isTokenAllowedToBeChargedOfFees flag\\n    */\\n    function setFeeReceiversTokensToBeChargedOfFees(uint256 _index, address _rewardsToken, bool _status) external onlyOwner {\\n        _setFeeReceiversTokensToBeChargedOfFees(_index, _rewardsToken, _status);\\n    }\\n\\n    /**\\n    * @notice Sets isTokenAllowedToBeChargedOfFees flags for several fee receivers\\n    * @dev Can be called only by owner\\n    * @param _indices Receivers indices\\n    * @param _rewardsTokens Reward tokens addresses to change isTokenAllowedToBeChargedOfFees statuses\\n    * @param _statuses New statuses for isTokenAllowedToBeChargedOfFees flags\\n    */\\n    function setFeeReceiversTokensToBeChargedOfFeesMulti(\\n        uint256[] calldata _indices,\\n        address[] calldata _rewardsTokens,\\n        bool[] calldata _statuses\\n    ) external onlyOwner {\\n        require(_indices.length == _rewardsTokens.length, \\\"invalidLengthsOfRewardsTokens\\\");\\n        require(_indices.length == _statuses.length, \\\"invalidLengthsOfStatuses\\\");\\n        for (uint256 i; i < _indices.length; i++) {\\n            _setFeeReceiversTokensToBeChargedOfFees(_indices[i], _rewardsTokens[i], _statuses[i]);\\n        }\\n    }\\n\\n    /**\\n    * @notice Sets Inflation contract address\\n    * @dev can be called only by owner\\n    * @param _inflation new Inflation contract address\\n    */\\n    function setInflation(address _inflation) external onlyOwner {\\n        inflation = _inflation;\\n    }\\n\\n    /**\\n    * @notice Sets Referral program contract address\\n    * @dev Can be called only by owner\\n    * @param _refProgram New Referral program contract address\\n    */\\n    function setReferralProgram(address _refProgram) external onlyOwner {\\n        referralProgram = IReferralProgram(_refProgram);\\n    }\\n\\n    /**\\n    * @notice Sets the flag if fee on getting reward is claimed or not\\n    * @dev Can be called only by owner\\n    * @param _isEnabled New onGetRewardFeesEnabled status\\n    */\\n    function setOnGetRewardFeesEnabled(bool _isEnabled) external onlyOwner {\\n        isGetRewardFeesEnabled = _isEnabled;\\n    }\\n\\n    /**\\n    * @notice Sets deposit fee BPs\\n    * @dev can be called only by owner\\n    * @param _bps New deposit fee BPs\\n    */\\n    function setDepositFeeBps(uint256 _bps) external onlyOwner {\\n        require(_bps < 10000, \\\"incorrect BPs\\\");\\n        depositFeeBps = _bps;\\n    }\\n\\n    /**\\n    * @notice Sets deposit fee receiver\\n    * @dev can be called only by owner\\n    * @param _receiver New deposit fee receiver\\n    */\\n    function setDepositFeeReceiver(address _receiver) external onlyOwner {\\n        depositFeeReceiver = _receiver;\\n    }\\n\\n    /**\\n    * @notice Configures Vault\\n    * @dev can be called only by Inflation\\n    */\\n    function configure() external virtual onlyInflation whenPaused {\\n        _unpause();\\n        updatePool();\\n        address owner_ = owner();\\n        _mint(owner_, 1 wei);\\n        _depositFor(1 wei, owner_);\\n        startTime = block.timestamp;\\n    }\\n\\n    /**\\n    * @notice Returns user's reward debt\\n    * @param _account User's address\\n    * @param _index Index of reward token\\n    */\\n    function getRewardDebt(address _account, uint256 _index) external view returns(int256) {\\n        if (_index < rewardDebts[_account].length) return rewardDebts[_account][_index];\\n        return 0;\\n    }\\n\\n    /**\\n    * @notice Adds reward token\\n    * @dev Can be called only by owner\\n    * @param _newToken New reward token\\n    */\\n\\n    function addRewardToken(address _newToken) external onlyOwner {\\n        rewards.push(Reward(_newToken, 0, 0, 0));\\n        updatePool();\\n        emit NewRewardToken(_newToken);\\n    }\\n\\n    /**\\n    * @notice Returns user's earned reward\\n    * @dev Mutability speciefier should be manually switched to 'view'\\n    * in ABI due to Curve's claimable_tokens function implementation\\n    * @param _user User's address\\n    * @param _index Index of reward token\\n    * @return pending Amount of pending reward\\n    */\\n    function earned(address _user, uint256 _index) external virtual returns (uint256 pending) {\\n        Reward[] memory _rewards = rewards;\\n        require(_index < _rewards.length, \\\"index exceeds amount of reward tokens\\\");\\n        uint256 accRewardPerShare_ = _rewards[_index].accRewardPerShare;\\n        uint256 lpSupply = totalSupply() - balanceOf(address(this));\\n        uint256 vaultEarned;\\n\\n        if (_index == 0) {\\n            vaultEarned = IInflation(inflation).claimable(address(this)); \\n        } else {\\n            vaultEarned = _getEarnedAmountFromExternalProtocol(_user, _index);\\n        }\\n        uint256 balance = IERC20(_rewards[_index].rewardToken).balanceOf(address(this));\\n        uint256 rewardForPeriod = balance + vaultEarned - (_rewards[_index].lastBalance - _rewards[_index].payedRewardForPeriod);\\n        if (lpSupply != 0) {\\n            uint256 reward = rewardForPeriod;\\n            accRewardPerShare_ += reward * ACC_REWARD_PRECISION / lpSupply;\\n        }\\n        if (_index < rewardDebts[_user].length) {\\n            pending = uint256(int256(balanceOf(_user) * accRewardPerShare_ / ACC_REWARD_PRECISION) - rewardDebts[_user][_index]);\\n        } else {\\n            pending = balanceOf(_user) * accRewardPerShare_ / ACC_REWARD_PRECISION;\\n        }\\n\\n    }\\n\\n    /**\\n    * @notice Updates pool\\n    * @dev Mints Token if available, claims all reward from the gauge\\n    */\\n    function updatePool() public virtual whenNotPaused {\\n        Reward[] memory _rewards = rewards;\\n        uint256 length = _rewards.length;\\n        _harvestFromExternalProtocol();\\n        IInflation(inflation).getToken(address(this));\\n        uint256[] memory rewardsForPeriod = new uint256[](length);\\n        uint256 lpSupply = totalSupply() - balanceOf(address(this));\\n        uint256 multiplier = ACC_REWARD_PRECISION;\\n        for (uint256 i; i < length; i++) {\\n            uint256 balance = IERC20(_rewards[i].rewardToken).balanceOf(address(this)); // get the balance after claim/mint\\n            rewardsForPeriod[i] = balance - (_rewards[i].lastBalance - _rewards[i].payedRewardForPeriod);   // calculate how much reward came from the last time\\n            rewards[i].lastBalance = balance;\\n            rewards[i].payedRewardForPeriod = 0;\\n            if (lpSupply > 0) rewards[i].accRewardPerShare += uint128(rewardsForPeriod[i] * multiplier / lpSupply);\\n        }\\n\\n        emit LogUpdatePool(lpSupply, rewardsForPeriod);\\n    }\\n\\n    /**\\n    * @notice Deposits stake tokens for user for reward allocation\\n    * @param _amount Amount of tokens to deposit\\n    * @param _to Address of a beneficiary\\n    */\\n    function depositFor(uint256 _amount, address _to) public virtual nonReentrant whenNotPaused {\\n        _depositForFrom(_amount, _to, _msgSender());\\n    }\\n\\n    function _depositForFrom(uint256 _amount, address _to, address _from) internal virtual {\\n        _amount = _chargeFeesOnDeposit(_amount);\\n        updatePool();\\n        _mint(_to, _amount);\\n        _depositFor(_amount, _to);\\n        _depositToExternalProtocol(_amount, _from);\\n        IReferralProgram referral = referralProgram;\\n        if(!referral.users(_to).exists) {\\n            address rootAddress = referral.rootAddress();\\n            referral.registerUser(rootAddress, _to);\\n        }\\n        emit Deposit(_from, _amount, _to);\\n    }\\n\\n    /**\\n    * @notice Withdraw Vault LP tokens.\\n    * @dev Withdraws underlying tokens from Gauge, transfers Vault LP to 'to' address\\n    * @param _amount Vault LP token amount to unwrap.\\n    * @param _to The receiver of Vault LP tokens.\\n    */\\n    function withdraw(uint256 _amount, address _to) public nonReentrant virtual whenNotPaused {\\n        updatePool();\\n        _withdraw(_amount, _msgSender());\\n        _withdrawFromExternalProtocol(_amount, _to);\\n        _burn(_msgSender(), _amount);\\n        emit Withdraw(_msgSender(), _amount, _to);\\n    }\\n\\n    /**\\n    * @notice Harvest all available reward for the user.\\n    * @param _to The receiver of the reward tokens.\\n    */\\n    function getReward(address _to) public virtual nonReentrant whenNotPaused {\\n        _getReward(_msgSender(), _to, false);\\n    }\\n\\n    function _getReward(address _for, address _to, bool _hardSend) internal virtual {\\n        updatePool();\\n        Reward[] memory _rewards = rewards;\\n        uint256 rewardsLength = _rewards.length;\\n        uint256[] memory _pendingRewards = new uint256[](rewardsLength);\\n        uint256 multiplier = ACC_REWARD_PRECISION;\\n\\n        // Interactions\\n        for (uint256 i; i < rewardsLength; i++) {\\n            int256 accumulatedReward = int256(balanceOf(_for) * _rewards[i].accRewardPerShare / multiplier);\\n            if (i >= rewardDebts[_for].length) rewardDebts[_for].push(0);\\n            _pendingRewards[i] = uint256(accumulatedReward - rewardDebts[_for][i]);\\n\\n            rewardDebts[_for][i] = accumulatedReward;\\n            if (_pendingRewards[i] > 0) {\\n                address rewardTokenAddress = _rewards[i].rewardToken;\\n                uint256 rewardsAmountWithFeesTaken = _chargeFees(_for, rewardTokenAddress, _pendingRewards[i]);\\n                _transferOrLock(rewardTokenAddress, rewardsAmountWithFeesTaken, _to, _hardSend);\\n                rewards[i].payedRewardForPeriod += _pendingRewards[i];\\n                _pendingRewards[i] = rewardsAmountWithFeesTaken;\\n            }\\n        }\\n\\n        emit Harvest(_for, _pendingRewards);\\n    }\\n\\n    /**\\n    * @notice Withdraw tokens from Vault and harvest reward for transaction sender to `_to`\\n    * @param _amount LP token amount to withdraw\\n    * @param _to Receiver of the LP tokens and rewards\\n    */\\n    function withdrawAndHarvest(uint256 _amount, address _to) public virtual nonReentrant whenNotPaused {\\n        updatePool();\\n        address sender = _msgSender();\\n        Reward[] memory _rewards = rewards;\\n        uint256 multiplier = ACC_REWARD_PRECISION;\\n        // Effects\\n\\n        _withdrawFromExternalProtocol(_amount, _to);\\n        _burn(sender, _amount);\\n\\n        uint256 rewardsLength = _rewards.length;\\n        uint256[] memory _pendingRewards = new uint256[](rewardsLength);\\n\\n        for (uint256 i; i < rewardsLength; i++) {\\n            if (i >= rewardDebts[sender].length) {\\n                rewardDebts[sender].push(-int256(_amount * _rewards[i].accRewardPerShare / multiplier));\\n            } else {\\n                rewardDebts[sender][i] -= int256(_amount * _rewards[i].accRewardPerShare / multiplier);\\n            }\\n            int256 accumulatedReward = int256(balanceOf(sender) * _rewards[i].accRewardPerShare / multiplier);\\n            _pendingRewards[i] = uint256(accumulatedReward - rewardDebts[sender][i]);\\n\\n            rewardDebts[sender][i] = accumulatedReward;\\n            if (_pendingRewards[i] > 0) {\\n                address rewardTokenAddress = _rewards[i].rewardToken;\\n                uint256 rewardsAmountWithFeesTaken = _chargeFees(sender, rewardTokenAddress, _pendingRewards[i]);\\n                _transferOrLock(rewardTokenAddress, rewardsAmountWithFeesTaken, _to, false);\\n                rewards[i].payedRewardForPeriod += _pendingRewards[i];\\n                _pendingRewards[i] = rewardsAmountWithFeesTaken;\\n            }\\n        }\\n        emit Harvest(sender, _pendingRewards);\\n        emit Withdraw(_msgSender(), _amount, _to);\\n    }\\n\\n    function setDelegate(address _baseReceiver, address _delegate) external onlyOwner {\\n        require(rewardDelegates[_baseReceiver] != _delegate, \\\"!new\\\");\\n        rewardDelegates[_baseReceiver] = _delegate;\\n        emit Delegated(_baseReceiver, _delegate);\\n    }\\n\\n    function getRewardForDelegator(address _baseReceiver)\\n        nonReentrant\\n        virtual \\n        external {\\n        require(_msgSender() == rewardDelegates[_baseReceiver], \\\"unknown sender\\\");\\n        _getReward(_baseReceiver, _msgSender(), true);\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal override virtual {\\n        updatePool();\\n        _withdraw(amount, sender);\\n        super._transfer(sender, recipient, amount);\\n        _depositFor(amount, recipient);\\n    }\\n\\n    function _depositFor(uint256 _amount, address _to) internal virtual {\\n        Reward[] memory _rewards = rewards;\\n        // Effects\\n        uint256 multiplier = ACC_REWARD_PRECISION;\\n\\n        for (uint256 i; i < _rewards.length; i++) {\\n            if (i >= rewardDebts[_to].length) {\\n                rewardDebts[_to].push(int256(_amount * _rewards[i].accRewardPerShare / multiplier));\\n            } else {\\n                rewardDebts[_to][i] += int256(_amount * _rewards[i].accRewardPerShare / multiplier);\\n            }\\n        }\\n\\n    }\\n\\n    function _withdraw(uint256 _amount, address _user) internal virtual {\\n        Reward[] memory _rewards = rewards;\\n        uint256 multiplier = ACC_REWARD_PRECISION;\\n        // Effects\\n        for (uint256 i; i < _rewards.length; i++) {\\n            if (i >= rewardDebts[_user].length) {\\n                rewardDebts[_user].push(-int256(_amount * _rewards[i].accRewardPerShare / multiplier));\\n            } else {\\n                rewardDebts[_user][i] -= int256(_amount * _rewards[i].accRewardPerShare / multiplier);\\n            }\\n        }\\n\\n    }\\n\\n    function _chargeFees(\\n        address _sender,\\n        address _rewardToken,\\n        uint256 _amount\\n    ) internal virtual returns (uint256) {\\n        if (!isGetRewardFeesEnabled) {\\n            return _amount;\\n        }\\n        uint256 fee;\\n        uint256 amountAfterFee = _amount;\\n\\n        for (uint256 i = 0; i < feeReceiversLength; i++) {\\n            FeeReceiver storage _feeReceiver = feeReceivers[i];\\n            if (_feeReceiver.isTokenAllowedToBeChargedOfFees[_rewardToken]) {\\n                fee = _feeReceiver.bps * _amount / 10000;\\n                IERC20(_rewardToken).safeTransfer(_feeReceiver.receiver, fee);\\n                amountAfterFee -= fee;\\n                if (_feeReceiver.isFeeReceivingCallNeeded) {\\n                    IFeeReceiving(_feeReceiver.receiver).feeReceiving(\\n                        _sender,\\n                        _rewardToken,\\n                        fee\\n                    );\\n                }\\n            }\\n        }\\n        return amountAfterFee;\\n    }\\n\\n    function _transferOrLock(\\n        address _token,\\n        uint256 _amount,\\n        address _receiver,\\n        bool _hardSend\\n    ) internal {\\n        if (_token != rewards[0].rewardToken || _hardSend) {\\n            IERC20(_token).safeTransfer(_receiver, _amount);\\n        } else {\\n            uint256 toLock = percentageToBeLocked * _amount / 100;\\n            uint256 toTransfer = _amount - toLock;\\n            IVeToken veToken_ = IVeToken(veToken);\\n            uint256 unlockTime = veToken_.lockedEnd(_receiver);\\n            if (unlockTime == 0) {\\n                IVeToken.Point memory initialPoint = veToken_.pointHistory(0);\\n                uint256 rewardsDuration = votingStakingRewards.rewardsDuration();\\n                uint256 lockTime = veToken_.MAXTIME();\\n                uint256 week = veToken_.WEEK();\\n                if (initialPoint.ts + lockTime + rewardsDuration < block.timestamp) { // reward program is surely over\\n                    IERC20(_token).safeTransfer(_receiver, _amount);\\n                } else {\\n                    IERC20(_token).safeTransfer(_receiver, toTransfer);\\n                    uint256 unlockDate = \\n                        (initialPoint.ts + lockTime) / week * week <= block.timestamp ? // if we are between 100 and 101 week\\n                        block.timestamp + 2 * rewardsDuration : \\n                        initialPoint.ts + lockTime;\\n                    veToken_.createLockFor(_receiver, toLock, unlockDate);\\n                }\\n\\n            } else {\\n                require(unlockTime > block.timestamp, \\\"withdraw the lock first\\\");\\n                IERC20(_token).safeTransfer(_receiver, toTransfer);\\n                veToken_.increaseAmountFor(_receiver, toLock);\\n            }\\n        }\\n    }\\n\\n    function _chargeFeesOnDeposit(uint256 _amount)\\n        internal \\n        virtual\\n        returns (uint256 _sumWithoutFee)\\n    {\\n        uint256 bps = depositFeeBps;\\n        if (bps > 0) {\\n            uint256 _fee = bps * _amount / 10000;\\n            stakeToken.safeTransferFrom(_msgSender(), depositFeeReceiver, _fee);\\n            _sumWithoutFee = _amount - _fee;\\n\\n        } else {\\n            _sumWithoutFee = _amount;\\n        }\\n    }\\n\\n    function _setFeeReceiversTokensToBeChargedOfFees(uint256 _index, address _rewardsToken, bool _status) internal {\\n        feeReceivers[_index].isTokenAllowedToBeChargedOfFees[_rewardsToken] = _status;\\n    }\\n\\n    function _getEarnedAmountFromExternalProtocol(\\n        address _user, \\n        uint256 _index\\n    ) internal virtual returns(uint256 vaultEarned);\\n    function _harvestFromExternalProtocol() internal virtual;\\n    function _depositToExternalProtocol(uint256 _amount, address _from) internal virtual;\\n    function _withdrawFromExternalProtocol(uint256 _amount, address _to) internal virtual;\\n\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inflation\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"referralProgramAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"boosterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"crvRewardAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curvePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentageToBeLocked\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"veTokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct ConvexVault.ConstructorParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"Delegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewardsPerPeriod\",\"type\":\"uint256[]\"}],\"name\":\"LogUpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"NewRewardToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bps\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isFeeReceivingCallNeeded\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"_rewardsTokens\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_statuses\",\"type\":\"bool[]\"}],\"name\":\"addFeeReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feeReceiverIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newToken\",\"type\":\"address\"}],\"name\":\"addRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boosterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"coins\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"configure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvRewardAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curvePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deleteAllFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_amounts\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"_min_mint_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"depositUnderlyingTokensFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feeReceivers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bps\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFeeReceivingCallNeeded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiversLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getRewardDebt\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseReceiver\",\"type\":\"address\"}],\"name\":\"getRewardForDelegator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inflation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGetRewardFeesEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentageToBeLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralProgram\",\"outputs\":[{\"internalType\":\"contract IReferralProgram\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardDebts\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardDelegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"accRewardPerShare\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"lastBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payedRewardForPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bps\",\"type\":\"uint256\"}],\"name\":\"setDepositFeeBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"setDepositFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"setFeeReceiverAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bps\",\"type\":\"uint256\"}],\"name\":\"setFeeReceiverBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isFeeReceivingCallNeeded\",\"type\":\"bool\"}],\"name\":\"setFeeReceiversCallNeeded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setFeeReceiversTokensToBeChargedOfFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_indices\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_rewardsTokens\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_statuses\",\"type\":\"bool[]\"}],\"name\":\"setFeeReceiversTokensToBeChargedOfFeesMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inflation\",\"type\":\"address\"}],\"name\":\"setInflation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isEnabled\",\"type\":\"bool\"}],\"name\":\"setOnGetRewardFeesEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentageToBeLocked\",\"type\":\"uint256\"}],\"name\":\"setPercentageToBeLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_refProgram\",\"type\":\"address\"}],\"name\":\"setReferralProgram\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_veToken\",\"type\":\"address\"}],\"name\":\"setVeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAutoStakeFor\",\"name\":\"_votingStakingRewards\",\"type\":\"address\"}],\"name\":\"setVotingStakingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingStakingRewards\",\"outputs\":[{\"internalType\":\"contract IAutoStakeFor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawAndHarvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ConvexVault", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000002000000000000000000000000056bb5d139ecc91992587cedba55794d7feea489e0000000000000000000000009d0464996170c6b9e75eed71c68b99ddedf279e800000000000000000000000057f2d75bd84bfb6912971713d0fa326402a0ac95000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000005ed75f5df2dbd6f8751b61344286446bc247fdf2000000000000000000000000f403c135812408bfbe8713b5a23a04b3d48aae3100000000000000000000000000000000000000000000000000000000000000290000000000000000000000000392321e86f42c2f94fbb0c6853052487db521f00000000000000000000000009d0464996170c6b9e75eed71c68b99ddedf279e800000000000000000000000000000000000000000000000000000000000000500000000000000000000000002ed2b0880c931173d05080a0fd6e80cf021bcaa00000000000000000000000000000000000000000000000000000000000000012435256637678435256205661756c74204c5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006434343564c500000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}