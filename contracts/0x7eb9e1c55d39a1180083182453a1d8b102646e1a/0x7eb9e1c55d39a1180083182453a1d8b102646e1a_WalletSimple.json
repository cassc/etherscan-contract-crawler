{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/ERC20Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.20;\\r\\n\\r\\n/**\\r\\n * Contract that exposes the needed erc20 token functions\\r\\n */\\r\\n\\r\\nabstract contract ERC20Interface {\\r\\n  // Send _value amount of tokens to address _to\\r\\n  function transfer(address _to, uint256 _value)\\r\\n    public\\r\\n    virtual\\r\\n    returns (bool success);\\r\\n\\r\\n  // Get the account balance of another account with address _owner\\r\\n  function balanceOf(address _owner)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    returns (uint256 balance);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/IForwarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport '@openzeppelin/contracts/utils/introspection/IERC165.sol';\\r\\n\\r\\ninterface IForwarder is IERC165 {\\r\\n  /**\\r\\n   * Sets the autoflush721 parameter.\\r\\n   *\\r\\n   * @param autoFlush whether to autoflush erc721 tokens\\r\\n   */\\r\\n  function setAutoFlush721(bool autoFlush) external;\\r\\n\\r\\n  /**\\r\\n   * Sets the autoflush1155 parameter.\\r\\n   *\\r\\n   * @param autoFlush whether to autoflush erc1155 tokens\\r\\n   */\\r\\n  function setAutoFlush1155(bool autoFlush) external;\\r\\n\\r\\n  /**\\r\\n   * Execute a token transfer of the full balance from the forwarder token to the parent address\\r\\n   *\\r\\n   * @param tokenContractAddress the address of the erc20 token contract\\r\\n   */\\r\\n  function flushTokens(address tokenContractAddress) external;\\r\\n\\r\\n  /**\\r\\n   * Execute a nft transfer from the forwarder to the parent address\\r\\n   *\\r\\n   * @param tokenContractAddress the address of the ERC721 NFT contract\\r\\n   * @param tokenId The token id of the nft\\r\\n   */\\r\\n  function flushERC721Token(address tokenContractAddress, uint256 tokenId)\\r\\n    external;\\r\\n\\r\\n  /**\\r\\n   * Execute a nft transfer from the forwarder to the parent address.\\r\\n   *\\r\\n   * @param tokenContractAddress the address of the ERC1155 NFT contract\\r\\n   * @param tokenId The token id of the nft\\r\\n   */\\r\\n  function flushERC1155Tokens(address tokenContractAddress, uint256 tokenId)\\r\\n    external;\\r\\n\\r\\n  /**\\r\\n   * Execute a batch nft transfer from the forwarder to the parent address.\\r\\n   *\\r\\n   * @param tokenContractAddress the address of the ERC1155 NFT contract\\r\\n   * @param tokenIds The token ids of the nfts\\r\\n   */\\r\\n  function batchFlushERC1155Tokens(\\r\\n    address tokenContractAddress,\\r\\n    uint256[] calldata tokenIds\\r\\n  ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n// source: https://github.com/Uniswap/solidity-lib/blob/master/contracts/libraries/TransferHelper.sol\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport '@openzeppelin/contracts/utils/Address.sol';\\r\\n\\r\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\r\\nlibrary TransferHelper {\\r\\n  function safeTransfer(\\r\\n    address token,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    // bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n    (bool success, bytes memory data) = token.call(\\r\\n      abi.encodeWithSelector(0xa9059cbb, to, value)\\r\\n    );\\r\\n    require(\\r\\n      success && (data.length == 0 || abi.decode(data, (bool))),\\r\\n      'TransferHelper::safeTransfer: transfer failed'\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function safeTransferFrom(\\r\\n    address token,\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\r\\n    (bool success, bytes memory returndata) = token.call(\\r\\n      abi.encodeWithSelector(0x23b872dd, from, to, value)\\r\\n    );\\r\\n    Address.verifyCallResult(\\r\\n      success,\\r\\n      returndata,\\r\\n      'TransferHelper::transferFrom: transferFrom failed'\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/WalletSimple.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\r\\npragma solidity 0.8.20;\\r\\nimport './TransferHelper.sol';\\r\\nimport './ERC20Interface.sol';\\r\\nimport './IForwarder.sol';\\r\\n\\r\\n/** ERC721, ERC1155 imports */\\r\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol';\\r\\n\\r\\n/**\\r\\n *\\r\\n * WalletSimple\\r\\n * ============\\r\\n *\\r\\n * Basic multi-signer wallet designed for use in a co-signing environment where 2 signatures are required to move funds.\\r\\n * Typically used in a 2-of-3 signing configuration. Uses ecrecover to allow for 2 signatures in a single transaction.\\r\\n *\\r\\n * The first signature is created on the operation hash (see Data Formats) and passed to sendMultiSig/sendMultiSigToken\\r\\n * The signer is determined by verifyMultiSig().\\r\\n *\\r\\n * The second signature is created by the submitter of the transaction and determined by msg.signer.\\r\\n *\\r\\n * Data Formats\\r\\n * ============\\r\\n *\\r\\n * The signature is created with ethereumjs-util.ecsign(operationHash).\\r\\n * Like the eth_sign RPC call, it packs the values as a 65-byte array of [r, s, v].\\r\\n * Unlike eth_sign, the message is not prefixed.\\r\\n *\\r\\n * The operationHash the result of keccak256(prefix, toAddress, value, data, expireTime).\\r\\n * For ether transactions, `prefix` is \\\"ETHER\\\".\\r\\n * For token transaction, `prefix` is \\\"ERC20\\\" and `data` is the tokenContractAddress.\\r\\n *\\r\\n *\\r\\n */\\r\\ncontract WalletSimple is IERC721Receiver, ERC1155Receiver {\\r\\n  // Events\\r\\n  event Deposited(address from, uint256 value, bytes data);\\r\\n  event SafeModeActivated(address msgSender);\\r\\n  event Transacted(\\r\\n    address msgSender, // Address of the sender of the message initiating the transaction\\r\\n    address otherSigner, // Address of the signer (second signature) used to initiate the transaction\\r\\n    bytes32 operation, // Operation hash (see Data Formats)\\r\\n    address toAddress, // The address the transaction was sent to\\r\\n    uint256 value, // Amount of Wei sent to the address\\r\\n    bytes data // Data sent when invoking the transaction\\r\\n  );\\r\\n\\r\\n  event BatchTransfer(address sender, address recipient, uint256 value);\\r\\n  // this event shows the other signer and the operation hash that they signed\\r\\n  // specific batch transfer events are emitted in Batcher\\r\\n  event BatchTransacted(\\r\\n    address msgSender, // Address of the sender of the message initiating the transaction\\r\\n    address otherSigner, // Address of the signer (second signature) used to initiate the transaction\\r\\n    bytes32 operation // Operation hash (see Data Formats)\\r\\n  );\\r\\n\\r\\n  // Public fields\\r\\n  mapping(address => bool) public signers; // The addresses that can co-sign transactions on the wallet\\r\\n  bool public safeMode = false; // When active, wallet may only send to signer addresses\\r\\n  bool public initialized = false; // True if the contract has been initialized\\r\\n\\r\\n  // Internal fields\\r\\n  uint256 private constant MAX_SEQUENCE_ID_INCREASE = 10000;\\r\\n  uint256 constant SEQUENCE_ID_WINDOW_SIZE = 10;\\r\\n  uint256[SEQUENCE_ID_WINDOW_SIZE] recentSequenceIds;\\r\\n\\r\\n  /**\\r\\n   * Set up a simple multi-sig wallet by specifying the signers allowed to be used on this wallet.\\r\\n   * 2 signers will be required to send a transaction from this wallet.\\r\\n   * Note: The sender is NOT automatically added to the list of signers.\\r\\n   * Signers CANNOT be changed once they are set\\r\\n   *\\r\\n   * @param allowedSigners An array of signers on the wallet\\r\\n   */\\r\\n  function init(address[] calldata allowedSigners) external onlyUninitialized {\\r\\n    require(allowedSigners.length == 3, 'Invalid number of signers');\\r\\n\\r\\n    for (uint8 i = 0; i < allowedSigners.length; i++) {\\r\\n      require(allowedSigners[i] != address(0), 'Invalid signer');\\r\\n      signers[allowedSigners[i]] = true;\\r\\n    }\\r\\n\\r\\n    initialized = true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Get the network identifier that signers must sign over\\r\\n   * This provides protection signatures being replayed on other chains\\r\\n   * This must be a virtual function because chain-specific contracts will need\\r\\n   *    to override with their own network ids. It also can't be a field\\r\\n   *    to allow this contract to be used by proxy with delegatecall, which will\\r\\n   *    not pick up on state variables\\r\\n   */\\r\\n  function getNetworkId() internal pure virtual returns (string memory) {\\r\\n    return 'ETHER';\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Get the network identifier that signers must sign over for token transfers\\r\\n   * This provides protection signatures being replayed on other chains\\r\\n   * This must be a virtual function because chain-specific contracts will need\\r\\n   *    to override with their own network ids. It also can't be a field\\r\\n   *    to allow this contract to be used by proxy with delegatecall, which will\\r\\n   *    not pick up on state variables\\r\\n   */\\r\\n  function getTokenNetworkId() internal pure virtual returns (string memory) {\\r\\n    return 'ERC20';\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Get the network identifier that signers must sign over for batch transfers\\r\\n   * This provides protection signatures being replayed on other chains\\r\\n   * This must be a virtual function because chain-specific contracts will need\\r\\n   *    to override with their own network ids. It also can't be a field\\r\\n   *    to allow this contract to be used by proxy with delegatecall, which will\\r\\n   *    not pick up on state variables\\r\\n   */\\r\\n  function getBatchNetworkId() internal pure virtual returns (string memory) {\\r\\n    return 'ETHER-Batch';\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Determine if an address is a signer on this wallet\\r\\n   * @param signer address to check\\r\\n   * returns boolean indicating whether address is signer or not\\r\\n   */\\r\\n  function isSigner(address signer) public view returns (bool) {\\r\\n    return signers[signer];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Modifier that will execute internal code block only if the sender is an authorized signer on this wallet\\r\\n   */\\r\\n  modifier onlySigner() {\\r\\n    require(isSigner(msg.sender), 'Non-signer in onlySigner method');\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Modifier that will execute internal code block only if the contract has not been initialized yet\\r\\n   */\\r\\n  modifier onlyUninitialized() {\\r\\n    require(!initialized, 'Contract already initialized');\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Gets called when a transaction is received with data that does not match any other method\\r\\n   */\\r\\n  fallback() external payable {\\r\\n    if (msg.value > 0) {\\r\\n      // Fire deposited event if we are receiving funds\\r\\n      emit Deposited(msg.sender, msg.value, msg.data);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Gets called when a transaction is received with ether and no data\\r\\n   */\\r\\n  receive() external payable {\\r\\n    if (msg.value > 0) {\\r\\n      // Fire deposited event if we are receiving funds\\r\\n      // message data is always empty for receive. If there is data it is sent to fallback function.\\r\\n      emit Deposited(msg.sender, msg.value, '');\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Execute a multi-signature transaction from this wallet using 2 signers: one from msg.sender and the other from ecrecover.\\r\\n   * Sequence IDs are numbers starting from 1. They are used to prevent replay attacks and may not be repeated.\\r\\n   *\\r\\n   * @param toAddress the destination address to send an outgoing transaction\\r\\n   * @param value the amount in Wei to be sent\\r\\n   * @param data the data to send to the toAddress when invoking the transaction\\r\\n   * @param expireTime the number of seconds since 1970 for which this transaction is valid\\r\\n   * @param sequenceId the unique sequence id obtainable from getNextSequenceId\\r\\n   * @param signature see Data Formats\\r\\n   */\\r\\n  function sendMultiSig(\\r\\n    address toAddress,\\r\\n    uint256 value,\\r\\n    bytes calldata data,\\r\\n    uint256 expireTime,\\r\\n    uint256 sequenceId,\\r\\n    bytes calldata signature\\r\\n  ) external onlySigner {\\r\\n    // Verify the other signer\\r\\n    bytes32 operationHash = keccak256(\\r\\n      abi.encodePacked(\\r\\n        getNetworkId(),\\r\\n        toAddress,\\r\\n        value,\\r\\n        data,\\r\\n        expireTime,\\r\\n        sequenceId\\r\\n      )\\r\\n    );\\r\\n\\r\\n    address otherSigner = verifyMultiSig(\\r\\n      toAddress,\\r\\n      operationHash,\\r\\n      signature,\\r\\n      expireTime,\\r\\n      sequenceId\\r\\n    );\\r\\n\\r\\n    // Success, send the transaction\\r\\n    (bool success, ) = toAddress.call{ value: value }(data);\\r\\n    require(success, 'Call execution failed');\\r\\n\\r\\n    emit Transacted(\\r\\n      msg.sender,\\r\\n      otherSigner,\\r\\n      operationHash,\\r\\n      toAddress,\\r\\n      value,\\r\\n      data\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Execute a batched multi-signature transaction from this wallet using 2 signers: one from msg.sender and the other from ecrecover.\\r\\n   * Sequence IDs are numbers starting from 1. They are used to prevent replay attacks and may not be repeated.\\r\\n   * The recipients and values to send are encoded in two arrays, where for index i, recipients[i] will be sent values[i].\\r\\n   *\\r\\n   * @param recipients The list of recipients to send to\\r\\n   * @param values The list of values to send to\\r\\n   * @param expireTime the number of seconds since 1970 for which this transaction is valid\\r\\n   * @param sequenceId the unique sequence id obtainable from getNextSequenceId\\r\\n   * @param signature see Data Formats\\r\\n   */\\r\\n  function sendMultiSigBatch(\\r\\n    address[] calldata recipients,\\r\\n    uint256[] calldata values,\\r\\n    uint256 expireTime,\\r\\n    uint256 sequenceId,\\r\\n    bytes calldata signature\\r\\n  ) external onlySigner {\\r\\n    require(recipients.length != 0, 'Not enough recipients');\\r\\n    require(\\r\\n      recipients.length == values.length,\\r\\n      'Unequal recipients and values'\\r\\n    );\\r\\n    require(recipients.length < 256, 'Too many recipients, max 255');\\r\\n\\r\\n    // Verify the other signer\\r\\n    bytes32 operationHash = keccak256(\\r\\n      abi.encodePacked(\\r\\n        getBatchNetworkId(),\\r\\n        recipients,\\r\\n        values,\\r\\n        expireTime,\\r\\n        sequenceId\\r\\n      )\\r\\n    );\\r\\n\\r\\n    // the first parameter (toAddress) is used to ensure transactions in safe mode only go to a signer\\r\\n    // if in safe mode, we should use normal sendMultiSig to recover, so this check will always fail if in safe mode\\r\\n    require(!safeMode, 'Batch in safe mode');\\r\\n    address otherSigner = verifyMultiSig(\\r\\n      address(0x0),\\r\\n      operationHash,\\r\\n      signature,\\r\\n      expireTime,\\r\\n      sequenceId\\r\\n    );\\r\\n\\r\\n    batchTransfer(recipients, values);\\r\\n    emit BatchTransacted(msg.sender, otherSigner, operationHash);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Transfer funds in a batch to each of recipients\\r\\n   * @param recipients The list of recipients to send to\\r\\n   * @param values The list of values to send to recipients.\\r\\n   *  The recipient with index i in recipients array will be sent values[i].\\r\\n   *  Thus, recipients and values must be the same length\\r\\n   */\\r\\n  function batchTransfer(\\r\\n    address[] calldata recipients,\\r\\n    uint256[] calldata values\\r\\n  ) internal {\\r\\n    for (uint256 i = 0; i < recipients.length; i++) {\\r\\n      require(address(this).balance >= values[i], 'Insufficient funds');\\r\\n\\r\\n      (bool success, ) = recipients[i].call{ value: values[i] }('');\\r\\n      require(success, 'Call failed');\\r\\n\\r\\n      emit BatchTransfer(msg.sender, recipients[i], values[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Execute a multi-signature token transfer from this wallet using 2 signers: one from msg.sender and the other from ecrecover.\\r\\n   * Sequence IDs are numbers starting from 1. They are used to prevent replay attacks and may not be repeated.\\r\\n   *\\r\\n   * @param toAddress the destination address to send an outgoing transaction\\r\\n   * @param value the amount in tokens to be sent\\r\\n   * @param tokenContractAddress the address of the erc20 token contract\\r\\n   * @param expireTime the number of seconds since 1970 for which this transaction is valid\\r\\n   * @param sequenceId the unique sequence id obtainable from getNextSequenceId\\r\\n   * @param signature see Data Formats\\r\\n   */\\r\\n  function sendMultiSigToken(\\r\\n    address toAddress,\\r\\n    uint256 value,\\r\\n    address tokenContractAddress,\\r\\n    uint256 expireTime,\\r\\n    uint256 sequenceId,\\r\\n    bytes calldata signature\\r\\n  ) external onlySigner {\\r\\n    // Verify the other signer\\r\\n    bytes32 operationHash = keccak256(\\r\\n      abi.encodePacked(\\r\\n        getTokenNetworkId(),\\r\\n        toAddress,\\r\\n        value,\\r\\n        tokenContractAddress,\\r\\n        expireTime,\\r\\n        sequenceId\\r\\n      )\\r\\n    );\\r\\n\\r\\n    verifyMultiSig(toAddress, operationHash, signature, expireTime, sequenceId);\\r\\n\\r\\n    TransferHelper.safeTransfer(tokenContractAddress, toAddress, value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Execute a token flush from one of the forwarder addresses. This transfer needs only a single signature and can be done by any signer\\r\\n   *\\r\\n   * @param forwarderAddress the address of the forwarder address to flush the tokens from\\r\\n   * @param tokenContractAddress the address of the erc20 token contract\\r\\n   */\\r\\n  function flushForwarderTokens(\\r\\n    address payable forwarderAddress,\\r\\n    address tokenContractAddress\\r\\n  ) external onlySigner {\\r\\n    IForwarder forwarder = IForwarder(forwarderAddress);\\r\\n    forwarder.flushTokens(tokenContractAddress);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Execute a ERC721 token flush from one of the forwarder addresses. This transfer needs only a single signature and can be done by any signer\\r\\n   *\\r\\n   * @param forwarderAddress the address of the forwarder address to flush the tokens from\\r\\n   * @param tokenContractAddress the address of the erc20 token contract\\r\\n   */\\r\\n  function flushERC721ForwarderTokens(\\r\\n    address payable forwarderAddress,\\r\\n    address tokenContractAddress,\\r\\n    uint256 tokenId\\r\\n  ) external onlySigner {\\r\\n    IForwarder forwarder = IForwarder(forwarderAddress);\\r\\n    forwarder.flushERC721Token(tokenContractAddress, tokenId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Execute a ERC1155 batch token flush from one of the forwarder addresses.\\r\\n   * This transfer needs only a single signature and can be done by any signer.\\r\\n   *\\r\\n   * @param forwarderAddress the address of the forwarder address to flush the tokens from\\r\\n   * @param tokenContractAddress the address of the erc1155 token contract\\r\\n   */\\r\\n  function batchFlushERC1155ForwarderTokens(\\r\\n    address payable forwarderAddress,\\r\\n    address tokenContractAddress,\\r\\n    uint256[] calldata tokenIds\\r\\n  ) external onlySigner {\\r\\n    IForwarder forwarder = IForwarder(forwarderAddress);\\r\\n    forwarder.batchFlushERC1155Tokens(tokenContractAddress, tokenIds);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Execute a ERC1155 token flush from one of the forwarder addresses.\\r\\n   * This transfer needs only a single signature and can be done by any signer.\\r\\n   *\\r\\n   * @param forwarderAddress the address of the forwarder address to flush the tokens from\\r\\n   * @param tokenContractAddress the address of the erc1155 token contract\\r\\n   * @param tokenId the token id associated with the ERC1155\\r\\n   */\\r\\n  function flushERC1155ForwarderTokens(\\r\\n    address payable forwarderAddress,\\r\\n    address tokenContractAddress,\\r\\n    uint256 tokenId\\r\\n  ) external onlySigner {\\r\\n    IForwarder forwarder = IForwarder(forwarderAddress);\\r\\n    forwarder.flushERC1155Tokens(tokenContractAddress, tokenId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Sets the autoflush 721 parameter on the forwarder.\\r\\n   *\\r\\n   * @param forwarderAddress the address of the forwarder to toggle.\\r\\n   * @param autoFlush whether to autoflush erc721 tokens\\r\\n   */\\r\\n  function setAutoFlush721(address forwarderAddress, bool autoFlush)\\r\\n    external\\r\\n    onlySigner\\r\\n  {\\r\\n    IForwarder forwarder = IForwarder(forwarderAddress);\\r\\n    forwarder.setAutoFlush721(autoFlush);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Sets the autoflush 721 parameter on the forwarder.\\r\\n   *\\r\\n   * @param forwarderAddress the address of the forwarder to toggle.\\r\\n   * @param autoFlush whether to autoflush erc1155 tokens\\r\\n   */\\r\\n  function setAutoFlush1155(address forwarderAddress, bool autoFlush)\\r\\n    external\\r\\n    onlySigner\\r\\n  {\\r\\n    IForwarder forwarder = IForwarder(forwarderAddress);\\r\\n    forwarder.setAutoFlush1155(autoFlush);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Do common multisig verification for both eth sends and erc20token transfers\\r\\n   *\\r\\n   * @param toAddress the destination address to send an outgoing transaction\\r\\n   * @param operationHash see Data Formats\\r\\n   * @param signature see Data Formats\\r\\n   * @param expireTime the number of seconds since 1970 for which this transaction is valid\\r\\n   * @param sequenceId the unique sequence id obtainable from getNextSequenceId\\r\\n   * returns address that has created the signature\\r\\n   */\\r\\n  function verifyMultiSig(\\r\\n    address toAddress,\\r\\n    bytes32 operationHash,\\r\\n    bytes calldata signature,\\r\\n    uint256 expireTime,\\r\\n    uint256 sequenceId\\r\\n  ) private returns (address) {\\r\\n    address otherSigner = recoverAddressFromSignature(operationHash, signature);\\r\\n\\r\\n    // Verify if we are in safe mode. In safe mode, the wallet can only send to signers\\r\\n    require(!safeMode || isSigner(toAddress), 'External transfer in safe mode');\\r\\n\\r\\n    // Verify that the transaction has not expired\\r\\n    require(expireTime >= block.timestamp, 'Transaction expired');\\r\\n\\r\\n    // Try to insert the sequence ID. Will revert if the sequence id was invalid\\r\\n    tryInsertSequenceId(sequenceId);\\r\\n\\r\\n    require(isSigner(otherSigner), 'Invalid signer');\\r\\n\\r\\n    require(otherSigner != msg.sender, 'Signers cannot be equal');\\r\\n\\r\\n    return otherSigner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * ERC721 standard callback function for when a ERC721 is transfered.\\r\\n   *\\r\\n   * @param _operator The address of the nft contract\\r\\n   * @param _from The address of the sender\\r\\n   * @param _tokenId The token id of the nft\\r\\n   * @param _data Additional data with no specified format, sent in call to `_to`\\r\\n   */\\r\\n  function onERC721Received(\\r\\n    address _operator,\\r\\n    address _from,\\r\\n    uint256 _tokenId,\\r\\n    bytes memory _data\\r\\n  ) external virtual override returns (bytes4) {\\r\\n    return this.onERC721Received.selector;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @inheritdoc IERC1155Receiver\\r\\n   */\\r\\n  function onERC1155Received(\\r\\n    address _operator,\\r\\n    address _from,\\r\\n    uint256 id,\\r\\n    uint256 value,\\r\\n    bytes calldata data\\r\\n  ) external virtual override returns (bytes4) {\\r\\n    return this.onERC1155Received.selector;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @inheritdoc IERC1155Receiver\\r\\n   */\\r\\n  function onERC1155BatchReceived(\\r\\n    address _operator,\\r\\n    address _from,\\r\\n    uint256[] calldata ids,\\r\\n    uint256[] calldata values,\\r\\n    bytes calldata data\\r\\n  ) external virtual override returns (bytes4) {\\r\\n    return this.onERC1155BatchReceived.selector;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Irrevocably puts contract into safe mode. When in this mode, transactions may only be sent to signing addresses.\\r\\n   */\\r\\n  function activateSafeMode() external onlySigner {\\r\\n    safeMode = true;\\r\\n    emit SafeModeActivated(msg.sender);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Gets signer's address using ecrecover\\r\\n   * @param operationHash see Data Formats\\r\\n   * @param signature see Data Formats\\r\\n   * returns address recovered from the signature\\r\\n   */\\r\\n  function recoverAddressFromSignature(\\r\\n    bytes32 operationHash,\\r\\n    bytes memory signature\\r\\n  ) private pure returns (address) {\\r\\n    require(signature.length == 65, 'Invalid signature - wrong length');\\r\\n\\r\\n    // We need to unpack the signature, which is given as an array of 65 bytes (like eth.sign)\\r\\n    bytes32 r;\\r\\n    bytes32 s;\\r\\n    uint8 v;\\r\\n\\r\\n    // solhint-disable-next-line\\r\\n    assembly {\\r\\n      r := mload(add(signature, 32))\\r\\n      s := mload(add(signature, 64))\\r\\n      v := and(mload(add(signature, 65)), 255)\\r\\n    }\\r\\n    if (v < 27) {\\r\\n      v += 27; // Ethereum versions are 27 or 28 as opposed to 0 or 1 which is submitted by some signing libs\\r\\n    }\\r\\n\\r\\n    // protect against signature malleability\\r\\n    // S value must be in the lower half orader\\r\\n    // reference: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/051d340171a93a3d401aaaea46b4b62fa81e5d7c/contracts/cryptography/ECDSA.sol#L53\\r\\n    require(\\r\\n      uint256(s) <=\\r\\n        0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\r\\n      \\\"ECDSA: invalid signature 's' value\\\"\\r\\n    );\\r\\n\\r\\n    // note that this returns 0 if the signature is invalid\\r\\n    // Since 0x0 can never be a signer, when the recovered signer address\\r\\n    // is checked against our signer list, that 0x0 will cause an invalid signer failure\\r\\n    return ecrecover(operationHash, v, r, s);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Verify that the sequence id has not been used before and inserts it. Throws if the sequence ID was not accepted.\\r\\n   * We collect a window of up to 10 recent sequence ids, and allow any sequence id that is not in the window and\\r\\n   * greater than the minimum element in the window.\\r\\n   * @param sequenceId to insert into array of stored ids\\r\\n   */\\r\\n  function tryInsertSequenceId(uint256 sequenceId) private onlySigner {\\r\\n    // Keep a pointer to the lowest value element in the window\\r\\n    uint256 lowestValueIndex = 0;\\r\\n    // fetch recentSequenceIds into memory for function context to avoid unnecessary sloads\\r\\n\\r\\n    uint256[SEQUENCE_ID_WINDOW_SIZE]\\r\\n      memory _recentSequenceIds = recentSequenceIds;\\r\\n    for (uint256 i = 0; i < SEQUENCE_ID_WINDOW_SIZE; i++) {\\r\\n      require(_recentSequenceIds[i] != sequenceId, 'Sequence ID already used');\\r\\n\\r\\n      if (_recentSequenceIds[i] < _recentSequenceIds[lowestValueIndex]) {\\r\\n        lowestValueIndex = i;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    // The sequence ID being used is lower than the lowest value in the window\\r\\n    // so we cannot accept it as it may have been used before\\r\\n    require(\\r\\n      sequenceId > _recentSequenceIds[lowestValueIndex],\\r\\n      'Sequence ID below window'\\r\\n    );\\r\\n\\r\\n    // Block sequence IDs which are much higher than the lowest value\\r\\n    // This prevents people blocking the contract by using very large sequence IDs quickly\\r\\n    require(\\r\\n      sequenceId <=\\r\\n        (_recentSequenceIds[lowestValueIndex] + MAX_SEQUENCE_ID_INCREASE),\\r\\n      'Sequence ID above maximum'\\r\\n    );\\r\\n\\r\\n    recentSequenceIds[lowestValueIndex] = sequenceId;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Gets the next available sequence ID for signing when using executeAndConfirm\\r\\n   * returns the sequenceId one higher than the highest currently stored\\r\\n   */\\r\\n  function getNextSequenceId() external view returns (uint256) {\\r\\n    uint256 highestSequenceId = 0;\\r\\n    for (uint256 i = 0; i < SEQUENCE_ID_WINDOW_SIZE; i++) {\\r\\n      if (recentSequenceIds[i] > highestSequenceId) {\\r\\n        highestSequenceId = recentSequenceIds[i];\\r\\n      }\\r\\n    }\\r\\n    return highestSequenceId + 1;\\r\\n  }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"otherSigner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"BatchTransacted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BatchTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"SafeModeActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"otherSigner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"operation\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transacted\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"activateSafeMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"forwarderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchFlushERC1155ForwarderTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"forwarderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"flushERC1155ForwarderTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"forwarderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"flushERC721ForwarderTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"forwarderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"}],\"name\":\"flushForwarderTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextSequenceId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"allowedSigners\",\"type\":\"address[]\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"isSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expireTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sequenceId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"sendMultiSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"expireTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sequenceId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"sendMultiSigBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expireTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sequenceId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"sendMultiSigToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarderAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"autoFlush\",\"type\":\"bool\"}],\"name\":\"setAutoFlush1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarderAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"autoFlush\",\"type\":\"bool\"}],\"name\":\"setAutoFlush721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WalletSimple", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}