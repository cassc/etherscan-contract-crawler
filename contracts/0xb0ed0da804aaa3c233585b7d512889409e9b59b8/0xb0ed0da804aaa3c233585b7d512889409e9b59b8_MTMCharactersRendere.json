{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\n//////////////////////////////////////////////////////////\r\n//    __  ___         __  _                 _   ______  //\r\n//   /  |/  /__ _____/ /_(_)__ ____  ___   | | / /_  /  //\r\n//  / /|_/ / _ `/ __/ __/ / _ `/ _ \\(_-<   | |/ //_ <   //\r\n// /_/  /_/\\_,_/_/  \\__/_/\\_,_/_//_/___/   |___/____/   //\r\n//                                                      //\r\n// Author: 0xInuarashi                                  //\r\n//////////////////////////////////////////////////////////\r\n\r\n//////////////////////////////////////////////\r\n//     __   _ __                _           //\r\n//    / /  (_) /  _______ _____(_)__ ___    //\r\n//   / /__/ / _ \\/ __/ _ `/ __/ / -_|_-<    //\r\n//  /____/_/_.__/_/  \\_,_/_/ /_/\\__/___/    //\r\n//////////////////////////////////////////////\r\n                                    \r\nlibrary Base64 {\r\n    string internal constant TABLE =\r\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n    function encode(bytes memory data) internal pure returns (string memory) {\r\n        if (data.length == 0) return \"\";\r\n        string memory table = TABLE;\r\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\r\n        string memory result = new string(encodedLen + 32);\r\n        assembly {\r\n            mstore(result, encodedLen)\r\n            let tablePtr := add(table, 1)\r\n            let dataPtr := data\r\n            let endPtr := add(dataPtr, mload(data))\r\n            let resultPtr := add(result, 32)\r\n            for {} lt(dataPtr, endPtr) {} {\r\n                dataPtr := add(dataPtr, 3)\r\n                let input := mload(dataPtr)\r\n                mstore(\r\n                    resultPtr,\r\n                    shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))\r\n                )\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore(\r\n                    resultPtr,\r\n                    shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))\r\n                )\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore(\r\n                    resultPtr,\r\n                    shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F))))\r\n                )\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore(\r\n                    resultPtr,\r\n                    shl(248, mload(add(tablePtr, and(input, 0x3F))))\r\n                )\r\n                resultPtr := add(resultPtr, 1)\r\n            }\r\n            switch mod(mload(data), 3)\r\n            case 1 {\r\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\r\n            }\r\n            case 2 {\r\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nlibrary Strings {\r\n    function toString(uint256 value) internal pure \r\n    returns (string memory str) { assembly {\r\n        let m := add(mload(0x40), 0xa0)\r\n        mstore(0x40, m)\r\n        str := sub(m, 0x20)\r\n        mstore(str, 0)\r\n\r\n        let end := str\r\n\r\n        for { let temp := value } 1 {} {\r\n            str := sub(str, 1)\r\n            mstore8(str, add(48, mod(temp, 10)))\r\n            temp := div(temp, 10)\r\n            if iszero(temp) { break }\r\n        }\r\n\r\n        let length := sub(end, str)\r\n        str := sub(str, 0x20)\r\n        mstore(str, length)\r\n    }}\r\n}\r\n\r\nlibrary SCLib {\r\n    function _capsuleRNG(uint256 tokenId_, string memory keyPrefix_, uint256 length_) \r\n    private pure returns (uint256) {\r\n        return uint256(keccak256(abi.encodePacked(\r\n            string(abi.encodePacked(\r\n                keyPrefix_, Strings.toString(tokenId_)\r\n            )) \r\n        ))) % length_;\r\n    }\r\n\r\n    function _getWeaponId(uint256 tokenId_) internal pure returns (uint256) {\r\n        return _capsuleRNG(tokenId_, \"WEAPONS\", 18);\r\n    }\r\n    function _getChestId(uint256 tokenId_) internal pure returns (uint256) {\r\n        return _capsuleRNG(tokenId_, \"CHEST\", 15);\r\n    }\r\n    function _getHeadId(uint256 tokenId_) internal pure returns (uint256) {\r\n        return _capsuleRNG(tokenId_, \"HEAD\", 15);\r\n    }\r\n    function _getLegsId(uint256 tokenId_) internal pure returns (uint256) {\r\n        return _capsuleRNG(tokenId_, \"LEGS\", 15);\r\n    }\r\n    function _getVehicleId(uint256 tokenId_) internal pure returns (uint256) {\r\n        return _capsuleRNG(tokenId_, \"VEHICLE\", 15);\r\n    }\r\n    function _getArmsId(uint256 tokenId_) internal pure returns (uint256) {\r\n        return _capsuleRNG(tokenId_, \"ARMS\", 15);\r\n    }\r\n    function _getArtifactId(uint256 tokenId_) internal pure returns (uint256) {\r\n        return _capsuleRNG(tokenId_, \"ARTIFACTS\", 3);\r\n    }\r\n    function _getRingId(uint256 tokenId_) internal pure returns (uint256) {\r\n        return _capsuleRNG(tokenId_, \"RINGS\", 5);\r\n    }\r\n}\r\n\r\n\r\n//////////////////////////////////////////////////////////////\r\n//     ___                       __             _           //\r\n//    / _ \\___ ___  ___ ___  ___/ /__ ___  ____(_)__ ___    //\r\n//   / // / -_) _ \\/ -_) _ \\/ _  / -_) _ \\/ __/ / -_|_-<    //\r\n//  /____/\\__/ .__/\\__/_//_/\\_,_/\\__/_//_/\\__/_/\\__/___/    //\r\n/////////////_///////////////////////////////////////////////\r\n\r\nabstract contract Ownable {\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    address public owner;\r\n\r\n    constructor() { \r\n        owner = msg.sender; \r\n    }\r\n    \r\n    modifier onlyOwner { \r\n        require(owner == msg.sender, \"onlyOwner not owner!\");\r\n        _; \r\n    }\r\n    \r\n    function transferOwnership(address new_) external onlyOwner {\r\n        address _old = owner;\r\n        owner = new_;\r\n        emit OwnershipTransferred(_old, new_);\r\n    }\r\n}\r\n\r\n\r\n//////////////////////////////////////////////////\r\n//     ____     __          ___                 //\r\n//    /  _/__  / /____ ____/ _/__ ________ ___  //\r\n//   _/ // _ \\/ __/ -_) __/ _/ _ `/ __/ -_|_-<  //\r\n//  /___/_//_/\\__/\\__/_/ /_/ \\_,_/\\__/\\__/___/  //\r\n//////////////////////////////////////////////////\r\n\r\n// iSC for Space Capsule Data Interface\r\ninterface iSC {\r\n    function getWeapon(uint256 tokenId) external view returns (string memory);\r\n    function getChest(uint256 tokenId) external view returns (string memory);\r\n    function getHead(uint256 tokenId) external view returns (string memory);\r\n    function getLegs(uint256 tokenId) external view returns (string memory);\r\n    function getVehicle(uint256 tokenId) external view returns (string memory);\r\n    function getArms(uint256 tokenId) external view returns (string memory);\r\n    function getArtifact(uint256 tokenId) external view returns (string memory);\r\n    function getRing(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// iCS for Character Storage Data Interface\r\ninterface iCS {\r\n    // Structs of Characters\r\n    struct Character {\r\n        uint8 race_;\r\n        uint8 renderType_;\r\n        uint16 transponderId_;\r\n        uint16 spaceCapsuleId_;\r\n        uint8 augments_;\r\n        uint16 basePoints_;\r\n        uint16 totalEquipmentBonus_;\r\n    }\r\n    struct Stats {\r\n        uint8 strength_; \r\n        uint8 agility_; \r\n        uint8 constitution_; \r\n        uint8 intelligence_; \r\n        uint8 spirit_; \r\n    }\r\n    struct Equipment {\r\n        uint8 weaponUpgrades_;\r\n        uint8 chestUpgrades_;\r\n        uint8 headUpgrades_;\r\n        uint8 legsUpgrades_;\r\n        uint8 vehicleUpgrades_;\r\n        uint8 armsUpgrades_;\r\n        uint8 artifactUpgrades_;\r\n        uint8 ringUpgrades_;\r\n    }\r\n\r\n    // View Functions\r\n    function names(uint256 tokenId_) external view returns (string memory);\r\n    function bios(uint256 tokenId_) external view returns (string memory);\r\n    function characters(uint256 tokenId_) external view returns (Character memory);\r\n    function stats(uint256 tokenId_) external view returns (Stats memory);\r\n    function equipments(uint256 tokenId_) external view returns (Equipment memory);\r\n    function contractToRace(address contractAddress_) external view returns (uint8);\r\n}\r\n\r\n// iCI for Character Image Storage Data Interface\r\ninterface iCI {\r\n    function getCharacterImage(uint8 race_, uint8 rank_) external view returns (string memory);\r\n    function getCharacterImage2(uint8 race_, uint8 rank_) external view returns (string memory); // NOTE: ADD THIS!!!!\r\n    function raceToRaceName(uint8 race_) external view returns (string memory); \r\n}\r\n\r\n// iCC for Character Controller Data Interface \r\ninterface iCC {\r\n    function getCharacterYieldRate(uint256 characterId_) external view returns (uint256);\r\n    function getItemRarity(uint16 spaceCapsuleId_, string memory keyPrefix_) external view returns (uint8);\r\n    function queryBaseEquipmentTier(uint8 rarity_) external view returns (uint8);\r\n}\r\n\r\n// iCR (Character Registry) for Helmet Change\r\ninterface iCR {\r\n    function characterToHelmetOff(uint256 tokenId_) external view returns (bool);\r\n}\r\n\r\n// iMarsRulerRegistry for Ruler Registry (Fully Augmented)\r\ninterface iMarsRulerRegistry {\r\n\r\n    struct GearConfig {\r\n        bool hasConfig;\r\n        uint8 weaponType;\r\n        uint8 chestType;\r\n        uint8 headType;\r\n        uint8 legsType;\r\n        uint8 vehicleType;\r\n        uint8 armsType;\r\n        uint8 artifactType;\r\n        uint8 ringType;\r\n    }\r\n\r\n    function characterToGearConfig(uint256 tokenId_) external view\r\n    returns (GearConfig memory);\r\n}\r\n\r\n// iModelStorage for Asset Storages\r\ninterface iModelStorage {\r\n    function getModel(uint256 modelId_) external view returns (string memory);\r\n}\r\n\r\n\r\n\r\n//////////////////////////////////////////////\r\n//   _____          __               __     //\r\n//  / ___/__  ___  / /________ _____/ /_    //\r\n// / /__/ _ \\/ _ \\/ __/ __/ _ `/ __/ __/    //\r\n// \\___/\\___/_//_/\\__/_/  \\_,_/\\__/\\__/     //\r\n//////////////////////////////////////////////\r\n\r\ncontract MTMCharactersRendererV3OnChain is Ownable {\r\n\r\n    //////////////////////\r\n    ///// Interfaces /////\r\n    //////////////////////\r\n\r\n    // Storage Interfaces\r\n    iCS public CS; // Character Storage\r\n    iCR public CR; // Character Registry (Helmet)\r\n    iMarsRulerRegistry public MRR; // Mars Ruler Registry\r\n\r\n    // On Chain Data URI Generator\r\n    iModelStorage public Artifacts  ;\r\n    iModelStorage public Weapons    ;\r\n    iModelStorage public Vehicle1   ;\r\n    iModelStorage public Vehicle2   ;\r\n    iModelStorage public RaceHead   ;\r\n    iModelStorage public RaceBody   ;\r\n    iModelStorage public RaceArms   ;\r\n    iModelStorage public MaleHead   ;\r\n    iModelStorage public MaleChest  ;\r\n    iModelStorage public MaleArms   ;\r\n    iModelStorage public FemaleHead ;\r\n    iModelStorage public FemaleChest;\r\n    iModelStorage public FemaleArms ;\r\n\r\n    function O_setInterfaceContracts(address cs_, address cr_, address mrr_)\r\n     external onlyOwner {\r\n        CS = iCS(cs_); \r\n        CR = iCR(cr_);\r\n        MRR = iMarsRulerRegistry(mrr_);\r\n    }\r\n\r\n    function O_setModels(address[13] calldata modelAddresses_) external onlyOwner {\r\n        Artifacts   = iModelStorage(modelAddresses_[0] );\r\n        Weapons     = iModelStorage(modelAddresses_[1] );\r\n        Vehicle1    = iModelStorage(modelAddresses_[2] );\r\n        Vehicle2    = iModelStorage(modelAddresses_[3] );\r\n        RaceHead    = iModelStorage(modelAddresses_[4] );\r\n        RaceBody    = iModelStorage(modelAddresses_[5] );\r\n        RaceArms    = iModelStorage(modelAddresses_[6] );\r\n        MaleHead    = iModelStorage(modelAddresses_[7] );\r\n        MaleChest   = iModelStorage(modelAddresses_[8] );\r\n        MaleArms    = iModelStorage(modelAddresses_[9] );\r\n        FemaleHead  = iModelStorage(modelAddresses_[10]);\r\n        FemaleChest = iModelStorage(modelAddresses_[11]);\r\n        FemaleArms  = iModelStorage(modelAddresses_[12]);\r\n    }\r\n\r\n    ///////////////////////\r\n    ///// Model Query ///// \r\n    ///////////////////////\r\n\r\n    // Race\r\n    function _getRaceHeadB64(uint8 gearId_) private view returns (string memory) {\r\n        return RaceHead.getModel(gearId_);\r\n    }\r\n    function _getRaceBodyB64(uint8 gearId_) private view returns (string memory) {\r\n        return RaceBody.getModel(gearId_);\r\n    }\r\n    function _getRaceArmsB64(uint8 gearId_) private view returns (string memory) {\r\n        return RaceArms.getModel(gearId_);\r\n    }\r\n\r\n    // Condition Agnostic Accessories\r\n    function _getWeaponB64(uint8 gearId_) private view returns (string memory) {\r\n        return Weapons.getModel(gearId_);\r\n    }\r\n    function _getArtifactB64(uint8 gearId_) private view returns (string memory) {\r\n        return Artifacts.getModel(gearId_);\r\n    }\r\n    function _getVehicleB64(uint8 gearId_) private view returns (string memory) {\r\n        if (gearId_ < 11) {\r\n            return Vehicle1.getModel(gearId_); // 1-10\r\n        }\r\n        else {\r\n            return Vehicle2.getModel(gearId_); // 11+\r\n        }    \r\n    }\r\n\r\n    // Condition Dependant Accessories\r\n    function _getHeadB64(uint8 gearId_, uint8 race_) private view \r\n    returns (string memory) {\r\n        if (race_ == 2 && gearId_ < 10) return FemaleHead.getModel(gearId_);\r\n        return MaleHead.getModel(gearId_);\r\n    }\r\n    function _getChestB64(uint8 gearId_, uint8 race_) private view \r\n    returns (string memory) {\r\n        if (race_ == 2) return FemaleChest.getModel(gearId_);\r\n        return MaleChest.getModel(gearId_);\r\n    }\r\n    function _getArmsB64(uint8 gearId_, uint8 race_) private view\r\n    returns (string memory) {\r\n        if (race_ == 2) return FemaleArms.getModel(gearId_);\r\n        return MaleArms.getModel(gearId_);\r\n    }\r\n\r\n    ////////////////////////\r\n    ///// Model Piping ///// \r\n    ////////////////////////\r\n\r\n    struct Model {\r\n        uint8 vehicleId;\r\n        uint8 weaponId;\r\n        uint8 raceHeadId;\r\n        uint8 raceBodyId;\r\n        uint8 raceArmsId;\r\n        uint8 armsId;\r\n        uint8 chestId;\r\n        uint8 artifactId;\r\n        uint8 raceHeadIdOverlay;\r\n        uint8 headId;\r\n    }\r\n\r\n    function _getModelParams(uint256 tokenId_) public view returns (Model memory) {\r\n        // Prepare the delivery Model\r\n        Model memory _Model;\r\n        \r\n        // Grab the necessary data for TokenId\r\n        iMarsRulerRegistry.GearConfig memory _RulerGear = \r\n            MRR.characterToGearConfig(tokenId_);\r\n\r\n        iCS.Character memory _Character = CS.characters(tokenId_);\r\n        uint256 _spaceCapsuleId = _Character.spaceCapsuleId_;\r\n\r\n        bool _HelmetOff = CR.characterToHelmetOff(tokenId_);\r\n\r\n        // The model is a MALE\r\n        if (_Character.race_ == 1 ||\r\n            _Character.race_ == 3 ||\r\n            _Character.race_ == 5) {\r\n\r\n            // If the helmet is off, use the race head\r\n            _Model.raceHeadIdOverlay = _HelmetOff ? (_Character.race_ + 100) : 255;\r\n\r\n            _Model.raceHeadId = 1;\r\n            _Model.raceBodyId = 1;\r\n            _Model.raceArmsId = 1;\r\n        }\r\n\r\n        // The model is a FEMALE\r\n        else if (_Character.race_ == 2 ||\r\n            _Character.race_ == 4 ||\r\n            _Character.race_ == 6) {\r\n\r\n            // If the helmet is off, use the race head\r\n            _Model.raceHeadIdOverlay = _HelmetOff ? (_Character.race_ + 100) : 255;\r\n\r\n            _Model.raceHeadId = 2;\r\n            _Model.raceBodyId = 2;\r\n            _Model.raceArmsId = 2;\r\n        }\r\n\r\n        // The model is not MALE or FEMALE\r\n        else {\r\n            _Model.raceHeadIdOverlay = 255;\r\n\r\n            _Model.raceHeadId = _Character.race_;\r\n            _Model.raceBodyId = _Character.race_;\r\n            _Model.raceArmsId = _Character.race_;\r\n        }\r\n\r\n        // Check if RulerGear exists config\r\n        if (_RulerGear.hasConfig) {\r\n            _Model.vehicleId    = _RulerGear.vehicleType;\r\n            _Model.weaponId     = _RulerGear.weaponType;\r\n            _Model.armsId       = _RulerGear.armsType;\r\n            _Model.chestId      = _RulerGear.chestType;\r\n            _Model.artifactId   = _RulerGear.artifactType;\r\n            _Model.headId       = _RulerGear.headType;\r\n            // Ring doesn't exist on the image\r\n        }\r\n\r\n        // If RulerGear does not exists config\r\n        else {\r\n            _Model.vehicleId    = uint8(SCLib._getVehicleId (_spaceCapsuleId));\r\n            _Model.weaponId     = uint8(SCLib._getWeaponId  (_spaceCapsuleId));\r\n            _Model.armsId       = uint8(SCLib._getArmsId    (_spaceCapsuleId));\r\n            _Model.chestId      = uint8(SCLib._getChestId   (_spaceCapsuleId));\r\n            _Model.artifactId   = uint8(SCLib._getArtifactId(_spaceCapsuleId));\r\n            _Model.headId       = uint8(SCLib._getHeadId    (_spaceCapsuleId));\r\n        }\r\n\r\n        // Now, if _HelmetOff is true, or the race is > 6,\r\n        // override the helmet (head) slot\r\n        // We use 255 as empty\r\n        if (_HelmetOff || _Character.race_ > 6) _Model.headId = 255;\r\n\r\n        // Return the model\r\n        return _Model;\r\n    }\r\n\r\n    /////////////////////////\r\n    ///// SVG Constants ///// \r\n    /////////////////////////\r\n    string private constant _svgHeader = \"<svg id='martians' width='100%' height='100%' version='1.1' viewBox='0 0 64 64' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'>\";\r\n    string private constant _svgFooter = \"<style>#martians{shape-rendering: crispedges; image-rendering: -webkit-crisp-edges; image-rendering: -moz-crisp-edges; image-rendering: crisp-edges; image-rendering: pixelated; -ms-interpolation-mode: nearest-neighbor;}</style></svg>\";\r\n\r\n    function _imageWrapper(string memory uri_) private pure \r\n    returns (string memory) {\r\n        string memory _wrapper = string(abi.encodePacked(\r\n            \"<image x='0' y='0' width='64' height='64' image-rendering='pixelated' preserveAspectRatio='xMidYMid' href='data:image/png;base64,\",\r\n            uri_,\r\n            \"'/>\"\r\n        ));\r\n        return _wrapper;\r\n    }\r\n\r\n    //////////////////////////////\r\n    ///// Model Construction /////\r\n    //////////////////////////////\r\n\r\n    /*\r\n        The layering is as follows:\r\n            Vehicle\r\n            Weapon\r\n            Race Body\r\n            Race Arms\r\n            Equipment Arms\r\n            Equipment Body\r\n            Artifact\r\n            Race Head\r\n            Equipment Head\r\n    */\r\n\r\n   function renderMartianFromModel(Model memory model_) public view \r\n   returns (string memory) {\r\n        // Format model_ to _Model\r\n        Model memory _Model = model_;\r\n\r\n        // Render the Model\r\n        string memory _svg = string(abi.encodePacked(\r\n            _svgHeader,\r\n            _imageWrapper(_getVehicleB64(_Model.vehicleId)),\r\n            _imageWrapper(_getWeaponB64(_Model.weaponId)),\r\n            _imageWrapper(_getRaceBodyB64(_Model.raceBodyId)),\r\n            _imageWrapper(_getRaceArmsB64(_Model.raceArmsId)),\r\n            // Male vs Female Logic. We use raceBodyId as race model\r\n            _imageWrapper(_getArmsB64(_Model.armsId, _Model.raceBodyId)),\r\n            _imageWrapper(_getChestB64(_Model.chestId, _Model.raceBodyId))\r\n        ));\r\n\r\n        _svg = string(abi.encodePacked(\r\n            _svg,\r\n            _imageWrapper(_getArtifactB64(_Model.artifactId)),\r\n            _imageWrapper(_getRaceHeadB64(_Model.raceHeadId))\r\n        ));\r\n\r\n        // If the character can take off their helmet\r\n        // and also has taken it off\r\n        if (_Model.raceHeadIdOverlay >= 101 &&\r\n            _Model.raceHeadIdOverlay <= 106) {\r\n            _svg = string(abi.encodePacked(\r\n                _svg,\r\n                _imageWrapper(_getRaceHeadB64(_Model.raceHeadIdOverlay))\r\n            ));\r\n        }\r\n\r\n        // If the character has a helmet\r\n        if (_Model.raceBodyId == 1 ||\r\n            _Model.raceBodyId == 2) {\r\n            if (_Model.headId != 255) {\r\n                _svg = string(abi.encodePacked(\r\n                    _svg,\r\n                    _imageWrapper(_getHeadB64(_Model.headId, _Model.raceBodyId))\r\n                ));\r\n            }\r\n        }\r\n\r\n        // Close the SVG Tag\r\n        _svg = string(abi.encodePacked(\r\n            _svg,\r\n            \"</svg>\"\r\n        ));\r\n\r\n        return _svg;\r\n   }\r\n\r\n   function renderMartian(uint256 tokenId_) public view returns (string memory) {\r\n        // Load the Model\r\n        Model memory _Model = _getModelParams(tokenId_);\r\n\r\n        // Render the Model\r\n        return renderMartianFromModel(_Model);\r\n   }\r\n\r\n    function drawCharacter(uint256 tokenId_) public view returns (string memory) {\r\n        return Base64.encode( bytes(string(abi.encodePacked( \r\n            renderMartian(tokenId_)) \r\n        )));\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Artifacts\",\"outputs\":[{\"internalType\":\"contract iModelStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CR\",\"outputs\":[{\"internalType\":\"contract iCR\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CS\",\"outputs\":[{\"internalType\":\"contract iCS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FemaleArms\",\"outputs\":[{\"internalType\":\"contract iModelStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FemaleChest\",\"outputs\":[{\"internalType\":\"contract iModelStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FemaleHead\",\"outputs\":[{\"internalType\":\"contract iModelStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MRR\",\"outputs\":[{\"internalType\":\"contract iMarsRulerRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MaleArms\",\"outputs\":[{\"internalType\":\"contract iModelStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MaleChest\",\"outputs\":[{\"internalType\":\"contract iModelStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MaleHead\",\"outputs\":[{\"internalType\":\"contract iModelStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cs_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cr_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mrr_\",\"type\":\"address\"}],\"name\":\"O_setInterfaceContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[13]\",\"name\":\"modelAddresses_\",\"type\":\"address[13]\"}],\"name\":\"O_setModels\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RaceArms\",\"outputs\":[{\"internalType\":\"contract iModelStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RaceBody\",\"outputs\":[{\"internalType\":\"contract iModelStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RaceHead\",\"outputs\":[{\"internalType\":\"contract iModelStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Vehicle1\",\"outputs\":[{\"internalType\":\"contract iModelStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Vehicle2\",\"outputs\":[{\"internalType\":\"contract iModelStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Weapons\",\"outputs\":[{\"internalType\":\"contract iModelStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"_getModelParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"vehicleId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"weaponId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"raceHeadId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"raceBodyId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"raceArmsId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"armsId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"chestId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"artifactId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"raceHeadIdOverlay\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"headId\",\"type\":\"uint8\"}],\"internalType\":\"struct MTMCharactersRendererV3OnChain.Model\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"drawCharacter\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"renderMartian\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"vehicleId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"weaponId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"raceHeadId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"raceBodyId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"raceArmsId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"armsId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"chestId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"artifactId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"raceHeadIdOverlay\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"headId\",\"type\":\"uint8\"}],\"internalType\":\"struct MTMCharactersRendererV3OnChain.Model\",\"name\":\"model_\",\"type\":\"tuple\"}],\"name\":\"renderMartianFromModel\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MTMCharactersRendererV3OnChain", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ba502c1d1ba3ab3422b7dca8cc624f9ba0d8f91d5e28628cb726ac1c98656901"}