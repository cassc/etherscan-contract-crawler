{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2022-09-30\r\n*/\r\n\r\npragma solidity ^0.8.14;\r\n\r\n//SPDX-License-Identifier: MIT Licensed\r\n\r\ninterface IToken {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function description() external view returns (string memory);\r\n\r\n    function version() external view returns (uint256);\r\n\r\n    function getRoundData(uint80 _roundId)\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}\r\n\r\ncontract presale {\r\n    IToken public token;\r\n\r\n    AggregatorV3Interface public priceFeedeth;\r\n    address payable public owner;\r\n\r\n    uint256 public tokenPerUsd;\r\n    uint256 public minAmount;\r\n    uint256 public maxAmount;\r\n    uint256 public preSaleTime;\r\n    uint256 public soldToken;\r\n\r\n    mapping(address => uint256) public Ethbalances;\r\n    mapping(address => uint256) public tokenBalance;\r\n    mapping(address => bool) public claimed;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"preSale: Not an owner\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        IToken _token\r\n    ) {\r\n        owner = payable(msg.sender);\r\n        token = _token;\r\n        priceFeedeth = AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);\r\n        tokenPerUsd = 4;\r\n        minAmount = 0.001 ether;\r\n        maxAmount = 5 ether;\r\n        preSaleTime = block.timestamp + 360 days;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    // to get real time price of eth\r\n    function getLatestPriceeth() public view returns (uint256) {\r\n        (, int256 price, , , ) = priceFeedeth.latestRoundData();\r\n        return uint256(price) / (1e8);\r\n    }\r\n\r\n    // to buy billz token during preSale time => for web3 use\r\n    function buyToken() public payable {\r\n        uint256 numberOfTokens = ethToToken(msg.value);\r\n        uint256 maxToken = ethToToken(maxAmount);\r\n\r\n        require(\r\n            msg.value >= minAmount && msg.value <= maxAmount,\r\n            \"preSale: Amount not correct\"\r\n        );\r\n        require(\r\n            numberOfTokens + (tokenBalance[msg.sender]) <= maxToken,\r\n            \"preSale: Amount exceeded max limit\"\r\n        );\r\n        require(block.timestamp < preSaleTime, \"preSale: PreSale over\");\r\n        Ethbalances[msg.sender] += msg.value;\r\n        tokenBalance[msg.sender] += numberOfTokens;\r\n        token.transferFrom(owner, msg.sender, numberOfTokens);\r\n        soldToken = soldToken + (numberOfTokens);\r\n    }\r\n\r\n    // to check number of token for given eth\r\n    function ethToToken(uint256 _amount) public view returns (uint256) {\r\n        uint256 precision = 1e4;\r\n        uint256 ethToUsd = (precision * (_amount) * (getLatestPriceeth())) /\r\n            (1 ether);\r\n        uint256 numberOfTokens = ethToUsd * (tokenPerUsd);\r\n        return (numberOfTokens * (10**token.decimals())) / (precision);\r\n    }\r\n\r\n    // to change Price of the token\r\n    function changePrice(uint256 _tokenPerUsd) external onlyOwner {\r\n        tokenPerUsd = _tokenPerUsd;\r\n    }\r\n\r\n    function setPreSaleAmount(uint256 _minAmount, uint256 _maxAmount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _minAmount <= _maxAmount,\r\n            \"preSale: Min amount should be less than max amount\"\r\n        );\r\n        minAmount = _minAmount;\r\n        maxAmount = _maxAmount;\r\n    }\r\n\r\n    function setpreSaleTime(uint256 _time) external onlyOwner {\r\n        preSaleTime = _time;\r\n    }\r\n\r\n    // transfer ownership\r\n    function changeOwner(address payable _newOwner) external onlyOwner {\r\n        require(_newOwner != address(0), \"preSale: New owner cannot be 0x0\");\r\n        owner = _newOwner;\r\n    }\r\n\r\n    // to draw funds for liquidity\r\n    function transferFunds(uint256 _value) external onlyOwner returns (bool) {\r\n        owner.transfer(_value);\r\n        return true;\r\n    }\r\n\r\n    function withdrawStuckFunds(IToken _token, uint256 amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _token.balanceOf(address(this)) >= amount,\r\n            \"preSale: Insufficient funds\"\r\n        );\r\n        _token.transfer(msg.sender, amount);\r\n    }\r\n\r\n    function getCurrentTime() public view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function contractBalanceeth() external view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getContractTokenBalance() external view returns (uint256) {\r\n        return token.allowance(owner, address(this));\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IToken\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Ethbalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenPerUsd\",\"type\":\"uint256\"}],\"name\":\"changePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalanceeth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ethToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPriceeth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preSaleTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeedeth\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmount\",\"type\":\"uint256\"}],\"name\":\"setPreSaleAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setpreSaleTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soldToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPerUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFunds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IToken\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "presale", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000bdf10efbab3526600fa06baefb156223ce29a019", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://740694c7bca53ca811e16a0743ba1ae8cdae8ebaf2c180157ed4f95bf2897dc9"}