{"SourceCode": "pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = _a * _b;\r\n        assert(c / _a == _b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = _a / _b;\r\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        assert(_b <= _a);\r\n        uint256 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 c = _a + _b;\r\n        assert(c >= _a);\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to relinquish control of the contract.\r\n    * @notice Renouncing to ownership will leave the contract without an owner.\r\n    * It will not be possible to call the functions with the `onlyOwner`\r\n    * modifier anymore.\r\n    */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(owner);\r\n        owner = address(0);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param _newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfers control of the contract to a newOwner.\r\n    * @param _newOwner The address to transfer ownership to.\r\n    */\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0));\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is not paused.\r\n    */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is paused.\r\n    */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to pause, triggers stopped state\r\n    */\r\n    function pause() public onlyOwner whenNotPaused {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to unpause, returns to normal state\r\n    */\r\n    function unpause() public onlyOwner whenPaused {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\n\r\n/**\r\n* @title ERC20 interface\r\n* @dev see https://github.com/ethereum/EIPs/issues/20\r\n*/\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function balanceOf(address _who) public view returns (uint256);\r\n\r\n    function allowance(address _owner, address _spender)\r\n        public view returns (uint256);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n\r\n    function approve(address _spender, uint256 _value)\r\n        public returns (bool);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        public returns (bool);\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/**\r\n* @title Standard ERC20 token\r\n*\r\n* @dev Implementation of the basic standard token.\r\n* https://github.com/ethereum/EIPs/issues/20\r\n* Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n*/\r\ncontract StandardToken is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    uint256 totalSupply_;\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param _owner address The address which owns the funds.\r\n    * @param _spender address The address which will spend the funds.\r\n    * @return A uint256 specifying the amount of tokens still available for the spender.\r\n    */\r\n    function allowance(\r\n        address _owner,\r\n        address _spender\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_value <= balances[msg.sender]);\r\n        require(_to != address(0));\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _value The amount of tokens to be spent.\r\n    */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amount of tokens to be transferred\r\n    */\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        require(_to != address(0));\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n    * approve should be called when allowed[_spender] == 0. To increment\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _addedValue The amount of tokens to increase the allowance by.\r\n    */\r\n    function increaseApproval(\r\n        address _spender,\r\n        uint256 _addedValue\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        allowed[msg.sender][_spender] = (\r\n        allowed[msg.sender][_spender].add(_addedValue));\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n    * approve should be called when allowed[_spender] == 0. To decrement\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n    */\r\n    function decreaseApproval(\r\n        address _spender,\r\n        uint256 _subtractedValue\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue >= oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n* @title Pausable token\r\n* @dev StandardToken modified with pausable transfers.\r\n**/\r\ncontract PausableERC20Token is StandardToken, Pausable {\r\n\r\n    function transfer(\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n        public\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n        public\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(\r\n        address _spender,\r\n        uint256 _value\r\n    )\r\n        public\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    function increaseApproval(\r\n        address _spender,\r\n        uint _addedValue\r\n    )\r\n        public\r\n        whenNotPaused\r\n        returns (bool success)\r\n    {\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval(\r\n        address _spender,\r\n        uint _subtractedValue\r\n    )\r\n        public\r\n        whenNotPaused\r\n        returns (bool success)\r\n    {\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n* @title Burnable Pausable Token\r\n* @dev Pausable Token that can be irreversibly burned (destroyed).\r\n*/\r\ncontract BurnablePausableERC20Token is PausableERC20Token {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowedBurn;\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    event ApprovalBurn(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    function allowanceBurn(\r\n        address _owner,\r\n        address _spender\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return allowedBurn[_owner][_spender];\r\n    }\r\n\r\n    function approveBurn(address _spender, uint256 _value) public returns (bool) {\r\n        allowedBurn[msg.sender][_spender] = _value;\r\n        emit ApprovalBurn(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Burns a specific amount of tokens.\r\n    * @param _value The amount of token to be burned.\r\n    */\r\n    function burn(\r\n        uint256 _value\r\n    ) \r\n        public\r\n        whenNotPaused\r\n    {\r\n        _burn(msg.sender, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Burns a specific amount of tokens from the target address and decrements allowance\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _value uint256 The amount of token to be burned\r\n    */\r\n    function burnFrom(\r\n        address _from, \r\n        uint256 _value\r\n    ) \r\n        public \r\n        whenNotPaused\r\n    {\r\n        require(_value <= allowedBurn[_from][msg.sender]);\r\n        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\r\n        // this function needs to emit an event with the updated approval.\r\n        allowedBurn[_from][msg.sender] = allowedBurn[_from][msg.sender].sub(_value);\r\n        _burn(_from, _value);\r\n    }\r\n\r\n    function _burn(\r\n        address _who, \r\n        uint256 _value\r\n    ) \r\n        internal \r\n        whenNotPaused\r\n    {\r\n        require(_value <= balances[_who]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        balances[_who] = balances[_who].sub(_value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        emit Burn(_who, _value);\r\n        emit Transfer(_who, address(0), _value);\r\n    }\r\n\r\n    function increaseBurnApproval(\r\n        address _spender,\r\n        uint256 _addedValue\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        allowedBurn[msg.sender][_spender] = (\r\n        allowedBurn[msg.sender][_spender].add(_addedValue));\r\n        emit ApprovalBurn(msg.sender, _spender, allowedBurn[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseBurnApproval(\r\n        address _spender,\r\n        uint256 _subtractedValue\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        uint256 oldValue = allowedBurn[msg.sender][_spender];\r\n        if (_subtractedValue >= oldValue) {\r\n            allowedBurn[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowedBurn[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit ApprovalBurn(msg.sender, _spender, allowedBurn[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract FreezableBurnablePausableERC20Token is BurnablePausableERC20Token {\r\n    mapping (address => bool) public frozenAccount;\r\n    event FrozenFunds(address target, bool frozen);\r\n\r\n    function freezeAccount(\r\n        address target,\r\n        bool freeze\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        frozenAccount[target] = freeze;\r\n        emit FrozenFunds(target, freeze);\r\n    }\r\n\r\n    function transfer(\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n        public\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        require(!frozenAccount[msg.sender], \"Sender account freezed\");\r\n        require(!frozenAccount[_to], \"Receiver account freezed\");\r\n\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n        public\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        require(!frozenAccount[msg.sender], \"Sender account freezed\");\r\n        require(!frozenAccount[_from], \"From account freezed\");\r\n        require(!frozenAccount[_to], \"Receiver account freezed\");\r\n\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function burn(\r\n        uint256 _value\r\n    ) \r\n        public\r\n        whenNotPaused\r\n    {\r\n        require(!frozenAccount[msg.sender], \"Sender account freezed\");\r\n\r\n        return super.burn(_value);\r\n    }\r\n\r\n    function burnFrom(\r\n        address _from, \r\n        uint256 _value\r\n    ) \r\n        public \r\n        whenNotPaused\r\n    {\r\n        require(!frozenAccount[msg.sender], \"Sender account freezed\");\r\n        require(!frozenAccount[_from], \"From account freezed\");\r\n\r\n        return super.burnFrom(_from, _value);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n* @title Lockable, Freezable, Burnable, Pausable, ERC20\r\n* @dev Token that can be locked, and will be released in steps.\r\n*/\r\ncontract LockableFreezableBurnablePausableERC20Token is FreezableBurnablePausableERC20Token {\r\n    struct LockAtt {\r\n    uint256 initLockAmount;    //\u521d\u59cb\u9501\u4ed3\u91d1\u989d\r\n    uint256 lockAmount;        //\u5269\u4f59\u9501\u4ed3\u91d1\u989d\r\n    uint256 startLockTime;     //\u5f00\u59cb\u9501\u4ed3\u7684\u65f6\u95f4\r\n    uint256 cliff;             //\u521d\u6b21\u91ca\u653e\u4e4b\u524d\u7684\u9501\u5b9a\u65f6\u957f\r\n    uint256 interval;          //\u4e24\u6b21\u91ca\u653e\u4e4b\u524d\u7684\u95f4\u9694\r\n    uint256 releaseCount;      //\u603b\u91ca\u653e\u6b21\u6570\r\n    bool revocable;            //\u662f\u5426\u53ef\u56de\u6536\r\n    address revocAddress;      //\u56de\u6536\u5730\u5740\r\n    }\r\n    mapping (address => LockAtt) public lockAtts;\r\n\r\n    event RefreshedLockStatus(address _account);\r\n    //\u5237\u65b0\u9501\u4ed3\u72b6\u6001\r\n    function refreshLockStatus(address _account) public whenNotPaused returns (bool)\r\n    { \r\n        if(lockAtts[_account].lockAmount <= 0)\r\n            return false;\r\n\r\n        require(lockAtts[_account].interval > 0, \"Interval error\");\r\n\r\n        uint256 initlockamount = lockAtts[_account].initLockAmount;\r\n        uint256 startlocktime = lockAtts[_account].startLockTime;\r\n        uint256 cliff = lockAtts[_account].cliff;\r\n        uint256 interval = lockAtts[_account].interval;\r\n        uint256 releasecount = lockAtts[_account].releaseCount;\r\n\r\n        uint256 releaseamount = 0;\r\n\tif(block.timestamp < startlocktime + cliff)\r\n\t    return false;\r\n\r\n        uint256 exceedtime = block.timestamp-startlocktime-cliff;\r\n        if(exceedtime >= 0)\r\n        {\r\n            releaseamount = (exceedtime/interval+1)*initlockamount/releasecount;\r\n            uint256 lockamount = initlockamount - releaseamount;\r\n            if(lockamount<0)\r\n                lockamount=0;\r\n            if(lockamount>initlockamount)\r\n                lockamount=initlockamount;\r\n            lockAtts[_account].lockAmount = lockamount;\r\n        }\r\n\r\n        emit RefreshedLockStatus(_account);\r\n        return true;\r\n    }\r\n\r\n    event LockTransfered(address _from, address _to, uint256 _value, uint256 _cliff, uint256 _interval, uint _releaseCount);\r\n    //\u9501\u4ed3\u8f6c\u8d26\r\n    function lockTransfer(address _to, uint256 _value, uint256 _cliff, uint256 _interval, uint _releaseCount) \r\n    public whenNotPaused returns (bool)\r\n    {\r\n        require(!frozenAccount[msg.sender], \"Sender account freezed\");\r\n        require(!frozenAccount[_to], \"Receiver account freezed\");\r\n        require(balances[_to] == 0, \"Revceiver not a new account\");    //\u65b0\u5730\u5740\u624d\u53ef\u4ee5\u63a5\u53d7\u9501\u4ed3\u8f6c\u5165\r\n        require(_cliff>0, \"Cliff error\"); \r\n        require(_interval>0, \"Interval error\"); \r\n        require(_releaseCount>0, \"Release count error\"); \r\n\r\n        refreshLockStatus(msg.sender);\r\n        uint256 balance = balances[msg.sender];\r\n        uint256 lockbalance = lockAtts[msg.sender].lockAmount;\r\n        require(_value <= balance && _value <= balance.sub(lockbalance), \"Unlocked balance insufficient\");\r\n        require(_to != address(0));\r\n\r\n        LockAtt memory lockatt = LockAtt(_value, _value, block.timestamp, _cliff, _interval, _releaseCount, false, msg.sender);\r\n        lockAtts[_to] = lockatt;    //\u8bbe\u7f6e\u63a5\u6536\u5730\u5740\u7684\u9501\u4ed3\u53c2\u6570\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit LockTransfered(msg.sender, _to, _value, _cliff, _interval, _releaseCount);\r\n        return true; \r\n    } \r\n\r\n    event SetRevocable(bool _revocable);\r\n    //\u540c\u610f\u6536\u56de\r\n    function setRevocable(bool _revocable) public whenNotPaused \r\n    {\r\n        require(!frozenAccount[msg.sender], \"Account freezed\");\r\n\r\n        lockAtts[msg.sender].revocable = _revocable;\r\n        emit SetRevocable(_revocable);\r\n    }\r\n\r\n    event Revoced(address _account);\r\n    //\u6536\u56de\r\n    function revoc(address _account) public whenNotPaused returns (uint256)\r\n    {\r\n        require(!frozenAccount[msg.sender], \"Account freezed\");\r\n        require(!frozenAccount[_account], \"Sender account freezed\");\r\n        require(lockAtts[_account].revocable, \"Account not revocable\");        //\u8be5\u8d26\u6237\u662f\u5426\u53ef\u56de\u6536\r\n        require(lockAtts[_account].revocAddress == msg.sender, \"No permission to revoc\");    //\u56de\u6536\u5730\u5740\u662f\u5426\u4e3asender\r\n        refreshLockStatus(_account);\r\n        uint256 balance = balances[_account];\r\n        uint256 lockbalance = lockAtts[_account].lockAmount;\r\n        require(balance >= balance.sub(lockbalance), \"Unlocked balance insufficient\");\r\n    \r\n        //\u8f6c\u8d26\r\n        balances[msg.sender] = balances[msg.sender].add(lockbalance);\r\n        balances[_account] = balances[_account].sub(lockbalance); \r\n\r\n\t//\u88ab\u56de\u6536\u8d26\u6237\u7684\u9501\u4ed3\u72b6\u6001\u8981\u6e050\uff0c\u5426\u5219\u5df2\u91ca\u653e\u7684\u90e8\u5206\u4e5f\u65e0\u6cd5\u64cd\u4f5c\r\n        lockAtts[_account].lockAmount = 0;\r\n        lockAtts[_account].initLockAmount = 0;\r\n\r\n\r\n        emit Revoced(_account);\r\n        return lockbalance;\r\n    }\r\n\r\n    //\u91cd\u5199\u666e\u901a\u8f6c\u8d26\u3001\u9500\u6bc1\u7b49\u51fd\u6570\uff0c\u5224\u65ad\u9501\u5b9a\u91d1\u989d\r\n\r\n    function transfer(\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n        public\r\n        whenNotPaused\r\n        returns (bool)\r\n    { \r\n        refreshLockStatus(msg.sender);\r\n        uint256 balance = balances[msg.sender];\r\n        uint256 lockbalance = lockAtts[msg.sender].lockAmount;\r\n        require(_value <= balance && _value <= balance.sub(lockbalance), \"Unlocked balance insufficient\");\r\n\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n        public\r\n        whenNotPaused\r\n        returns (bool)\r\n    { \r\n        refreshLockStatus(_from);\r\n        uint256 balance = balances[_from];\r\n        uint256 lockbalance = lockAtts[_from].lockAmount;\r\n        require(_value <= balance && _value <= balance.sub(lockbalance), \"Unlocked balance insufficient\");\r\n\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function burn(\r\n        uint256 _value\r\n    ) \r\n        public\r\n        whenNotPaused\r\n    {  \r\n        refreshLockStatus(msg.sender);\r\n        uint256 balance = balances[msg.sender];\r\n        uint256 lockbalance = lockAtts[msg.sender].lockAmount;\r\n        require(_value <= balance && _value <= balance.sub(lockbalance), \"Unlocked balance insufficient\");\r\n\r\n        return super.burn(_value);\r\n    }\r\n\r\n    function burnFrom(\r\n        address _from, \r\n        uint256 _value\r\n    ) \r\n        public \r\n        whenNotPaused\r\n    {  \r\n        refreshLockStatus(_from);\r\n        uint256 balance = balances[_from];\r\n        uint256 lockbalance = lockAtts[_from].lockAmount;\r\n        require(_value <= balance && _value <= balance.sub(lockbalance), \"Unlocked balance insufficient\");\r\n\r\n        return super.burnFrom(_from, _value);\r\n    }\r\n\r\n \r\n}\r\n\r\n\r\n/**\r\n* @title AWNC\r\n* @dev Token that is ERC20 compatible, Pausable, Burnable, Ownable, Lockable with SafeMath.\r\n*/\r\ncontract AWNC is LockableFreezableBurnablePausableERC20Token {\r\n\r\n    /** Token Setting: You are free to change any of these\r\n    * @param name string The name of your token (can be not unique)\r\n    * @param symbol string The symbol of your token (can be not unique, can be more than three characters)\r\n    * @param decimals uint8 The accuracy decimals of your token (conventionally be 18)\r\n    * Read this to choose decimals: https://ethereum.stackexchange.com/questions/38704/why-most-erc-20-tokens-have-18-decimals\r\n    * @param INITIAL_SUPPLY uint256 The total supply of your token. Example default to be \"10000\". Change as you wish.\r\n    **/\r\n    string public constant name = \"Action Wellness Chain\";\r\n    string public constant symbol = \"AWNC\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    uint256 public constant INITIAL_SUPPLY = 10000000000 * (10 ** uint256(decimals));\r\n\r\n    /**\r\n    * @dev Constructor that gives msg.sender all of existing tokens.\r\n    * Literally put all the issued money in your pocket\r\n    */\r\n    constructor() public {\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n        balances[msg.sender] = INITIAL_SUPPLY;\r\n        emit Transfer(address(0), msg.sender, INITIAL_SUPPLY);\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approveBurn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseBurnApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"revoc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockAtts\",\"outputs\":[{\"name\":\"initLockAmount\",\"type\":\"uint256\"},{\"name\":\"lockAmount\",\"type\":\"uint256\"},{\"name\":\"startLockTime\",\"type\":\"uint256\"},{\"name\":\"cliff\",\"type\":\"uint256\"},{\"name\":\"interval\",\"type\":\"uint256\"},{\"name\":\"releaseCount\",\"type\":\"uint256\"},{\"name\":\"revocable\",\"type\":\"bool\"},{\"name\":\"revocAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowanceBurn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"refreshLockStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_cliff\",\"type\":\"uint256\"},{\"name\":\"_interval\",\"type\":\"uint256\"},{\"name\":\"_releaseCount\",\"type\":\"uint256\"}],\"name\":\"lockTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_revocable\",\"type\":\"bool\"}],\"name\":\"setRevocable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseBurnApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"RefreshedLockStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_cliff\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_interval\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_releaseCount\",\"type\":\"uint256\"}],\"name\":\"LockTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_revocable\",\"type\":\"bool\"}],\"name\":\"SetRevocable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"Revoced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ApprovalBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "AWNC", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://bbcbb9bc7a83f7ea9063fc65ded1431483c2a8f0d9eee157ba13666d65a6a48a"}