{"SourceCode": "// SPDX-License-Identifier: BSD-3-Clause\r\n// File: lib/ipor-power-tokens/contracts/libraries/errors/Errors.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\nlibrary Errors {\r\n    /// @notice Error thrown when the lpToken address is not supported\r\n    /// @dev List of supported LpTokens is defined in {LiquidityMining._lpTokens}\r\n    string public constant LP_TOKEN_NOT_SUPPORTED = \"PT_701\";\r\n    /// @notice Error thrown when the caller / msgSender is not a Pause Manager address.\r\n    /// @dev Pause Manager can be defined by the smart contract's Onwer\r\n    string public constant CALLER_NOT_PAUSE_MANAGER = \"PT_704\";\r\n    /// @notice Error thrown when the account's base balance is too low\r\n    string public constant ACCOUNT_BASE_BALANCE_IS_TOO_LOW = \"PT_705\";\r\n    /// @notice Error thrown when the account's Lp Token balance is too low\r\n    string public constant ACCOUNT_LP_TOKEN_BALANCE_IS_TOO_LOW = \"PT_706\";\r\n    /// @notice Error thrown when the account's delegated balance is too low\r\n    string public constant ACC_DELEGATED_TO_LIQUIDITY_MINING_BALANCE_IS_TOO_LOW = \"PT_707\";\r\n    /// @notice Error thrown when the account's available Power Token balance is too low\r\n    string public constant ACC_AVAILABLE_POWER_TOKEN_BALANCE_IS_TOO_LOW = \"PT_708\";\r\n    /// @notice Error thrown when the account doesn't have the rewards (Staked Tokens / Power Tokens) to claim\r\n    string public constant NO_REWARDS_TO_CLAIM = \"PT_709\";\r\n    /// @notice Error thrown when the cooldown is not finished.\r\n    string public constant COOL_DOWN_NOT_FINISH = \"PT_710\";\r\n    /// @notice Error thrown when the aggregate power up indicator is going to be negative during the calculation.\r\n    string public constant AGGREGATE_POWER_UP_COULD_NOT_BE_NEGATIVE = \"PT_711\";\r\n    /// @notice Error thrown when the block number used in the function is lower than previous block number stored in the liquidity mining indicators.\r\n    string public constant BLOCK_NUMBER_LOWER_THAN_PREVIOUS_BLOCK_NUMBER = \"PT_712\";\r\n    /// @notice Account Composite Multiplier indicator is greater or equal to Composit Multiplier indicator, but it should be lower or equal\r\n    string public constant ACCOUNT_COMPOSITE_MULTIPLIER_GT_COMPOSITE_MULTIPLIER = \"PT_713\";\r\n    /// @notice The fee for unstacking of Power Tokens should be number between (0, 1e18)\r\n    string public constant UNSTAKE_WITHOUT_COOLDOWN_FEE_IS_TO_HIGH = \"PT_714\";\r\n    /// @notice General problem, address is wrong\r\n    string public constant WRONG_ADDRESS = \"PT_715\";\r\n    /// @notice General problem, contract is wrong\r\n    string public constant WRONG_CONTRACT_ID = \"PT_716\";\r\n    /// @notice Value not greater than zero\r\n    string public constant VALUE_NOT_GREATER_THAN_ZERO = \"PT_717\";\r\n    /// @notice Appeared when input of two arrays length mismatch\r\n    string public constant INPUT_ARRAYS_LENGTH_MISMATCH = \"PT_718\";\r\n    /// @notice msg.sender is not an appointed owner, it cannot confirm their ownership\r\n    string public constant SENDER_NOT_APPOINTED_OWNER = \"PT_719\";\r\n    /// @notice msg.sender is not an appointed owner, it cannot confirm their ownership\r\n    string public constant ROUTER_INVALID_SIGNATURE = \"PT_720\";\r\n    string public constant INPUT_ARRAYS_EMPTY = \"PT_721\";\r\n    string public constant CALLER_NOT_ROUTER = \"PT_722\";\r\n    string public constant CALLER_NOT_GUARDIAN = \"PT_723\";\r\n    string public constant CONTRACT_PAUSED = \"PT_724\";\r\n    string public constant REENTRANCY = \"PT_725\";\r\n    string public constant CALLER_NOT_OWNER = \"PT_726\";\r\n}\r\n\r\n// File: lib/ipor-power-tokens/contracts/libraries/ContractValidator.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\nlibrary ContractValidator {\r\n    function checkAddress(address addr) internal pure returns (address) {\r\n        require(addr != address(0), Errors.WRONG_ADDRESS);\r\n        return addr;\r\n    }\r\n}\r\n\r\n// File: lib/ipor-power-tokens/contracts/interfaces/types/PowerTokenTypes.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n/// @title Struct used across Liquidity Mining.\r\nlibrary PowerTokenTypes {\r\n    struct PwTokenCooldown {\r\n        // @dev The timestamp when the account can redeem Power Tokens\r\n        uint256 endTimestamp;\r\n        // @dev The amount of Power Tokens which can be redeemed without fee when the cooldown reaches `endTimestamp`\r\n        uint256 pwTokenAmount;\r\n    }\r\n\r\n    struct UpdateGovernanceToken {\r\n        address beneficiary;\r\n        uint256 governanceTokenAmount;\r\n    }\r\n}\r\n\r\n// File: lib/ipor-power-tokens/contracts/interfaces/IPowerTokenInternal.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\n/// @title PowerToken smart contract interface\r\ninterface IPowerTokenInternal {\r\n    /// @notice Returns the current version of the PowerToken smart contract\r\n    /// @return Current PowerToken smart contract version\r\n    function getVersion() external pure returns (uint256);\r\n\r\n    /// @notice Gets the total supply base amount\r\n    /// @return total supply base amount, represented with 18 decimals\r\n    function totalSupplyBase() external view returns (uint256);\r\n\r\n    /// @notice Calculates the internal exchange rate between the Staked Token and total supply of a base amount\r\n    /// @return Current exchange rate between the Staked Token and the total supply of a base amount, represented with 18 decimals.\r\n    function calculateExchangeRate() external view returns (uint256);\r\n\r\n    /// @notice Method for seting up the unstaking fee\r\n    /// @param unstakeWithoutCooldownFee fee percentage, represented with 18 decimals.\r\n    function setUnstakeWithoutCooldownFee(uint256 unstakeWithoutCooldownFee) external;\r\n\r\n    /// @notice method returning address of the Staked Token\r\n    function getGovernanceToken() external view returns (address);\r\n\r\n    /// @notice Pauses the smart contract, it can only be executed by the Owner\r\n    /// @dev Emits {Paused} event.\r\n    function pause() external;\r\n\r\n    /// @notice Unpauses the smart contract, it can only be executed by the Owner\r\n    /// @dev Emits {Unpaused}.\r\n    function unpause() external;\r\n\r\n    /// @notice Method for granting allowance to the Router\r\n    /// @param erc20Token address of the ERC20 token\r\n    function grantAllowanceForRouter(address erc20Token) external;\r\n\r\n    /// @notice Method for revoking allowance to the Router\r\n    /// @param erc20Token address of the ERC20 token\r\n    function revokeAllowanceForRouter(address erc20Token) external;\r\n\r\n    /// @notice Gets the power token cool down time in seconds.\r\n    /// @return uint256 cool down time in seconds\r\n    function COOL_DOWN_IN_SECONDS() external view returns (uint256);\r\n\r\n    /// @notice Adds a new pause guardian to the contract.\r\n    /// @param guardians The addresses of the new pause guardians.\r\n    /// @dev Only the contract owner can call this function.\r\n    function addPauseGuardians(address[] calldata guardians) external;\r\n\r\n    /// @notice Removes a pause guardian from the contract.\r\n    /// @param guardians The addresses of the pause guardians to be removed.\r\n    /// @dev Only the contract owner can call this function.\r\n    function removePauseGuardians(address[] calldata guardians) external;\r\n\r\n    /// @notice Checks if an address is a pause guardian.\r\n    /// @param guardian The address to be checked.\r\n    /// @return A boolean indicating whether the address is a pause guardian (true) or not (false).\r\n    function isPauseGuardian(address guardian) external view returns (bool);\r\n\r\n    /// @notice Emitted when the user receives rewards from the LiquidityMining\r\n    /// @dev Receiving rewards does not change Internal Exchange Rate of Power Tokens in PowerToken smart contract.\r\n    /// @param account address\r\n    /// @param rewardsAmount amount of Power Tokens received from LiquidityMining\r\n    event RewardsReceived(address account, uint256 rewardsAmount);\r\n\r\n    /// @notice Emitted when the fee for immediate unstaking is modified.\r\n    /// @param newFee new value of the fee, represented with 18 decimals\r\n    event UnstakeWithoutCooldownFeeChanged(uint256 newFee);\r\n\r\n    /// @notice Emmited when PauseManager's address had been changed by its owner.\r\n    /// @param newLiquidityMining PauseManager's new address\r\n    event LiquidityMiningChanged(address indexed newLiquidityMining);\r\n\r\n    /// @notice Emmited when the PauseManager's address is changed by its owner.\r\n    /// @param newPauseManager PauseManager's new address\r\n    event PauseManagerChanged(address indexed newPauseManager);\r\n\r\n    /// @notice Emitted when owner grants allowance for router\r\n    /// @param erc20Token address of ERC20 token\r\n    /// @param router address of router\r\n    event AllowanceGranted(address indexed erc20Token, address indexed router);\r\n\r\n    /// @notice Emitted when owner revokes allowance for router\r\n    /// @param erc20Token address of ERC20 token\r\n    /// @param router address of router\r\n    event AllowanceRevoked(address indexed erc20Token, address indexed router);\r\n}\r\n\r\n// File: lib/ipor-power-tokens/contracts/interfaces/IPowerToken.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\n/// @title The Interface for the interaction with the PowerToken - smart contract responsible\r\n/// for managing Power Token (pwToken), Swapping Staked Token for Power Tokens, and\r\n/// delegating Power Tokens to other components.\r\ninterface IPowerToken {\r\n    /// @notice Gets the name of the Power Token\r\n    /// @return Returns the name of the Power Token.\r\n    function name() external pure returns (string memory);\r\n\r\n    /// @notice Contract ID. The keccak-256 hash of \"io.ipor.PowerToken\" decreased by 1\r\n    /// @return Returns the ID of the contract\r\n    function getContractId() external pure returns (bytes32);\r\n\r\n    /// @notice Gets the symbol of the Power Token.\r\n    /// @return Returns the symbol of the Power Token.\r\n    function symbol() external pure returns (string memory);\r\n\r\n    /// @notice Returns the number of the decimals used by Power Token. By default it's 18 decimals.\r\n    /// @return Returns the number of decimals: 18.\r\n    function decimals() external pure returns (uint8);\r\n\r\n    /// @notice Gets the total supply of the Power Token.\r\n    /// @dev Value is calculated in runtime using baseTotalSupply and internal exchange rate.\r\n    /// @return Total supply of Power tokens, represented with 18 decimals\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /// @notice Gets the balance of Power Tokens for a given account\r\n    /// @param account account address for which the balance of Power Tokens is fetched\r\n    /// @return Returns the amount of the Power Tokens owned by the `account`.\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /// @notice Gets the delegated balance of the Power Tokens for a given account.\r\n    /// Tokens are delegated from PowerToken to LiquidityMining smart contract (reponsible for rewards distribution).\r\n    /// @param account account address for which the balance of delegated Power Tokens is checked\r\n    /// @return  Returns the amount of the Power Tokens owned by the `account` and delegated to the LiquidityMining contracts.\r\n    function delegatedToLiquidityMiningBalanceOf(address account) external view returns (uint256);\r\n\r\n    /// @notice Gets the rate of the fee from the configuration. This fee is applied when the owner of Power Tokens wants to unstake them immediately.\r\n    /// @dev Fee value represented in as a percentage with 18 decimals\r\n    /// @return value, a percentage represented with 18 decimal\r\n    function getUnstakeWithoutCooldownFee() external view returns (uint256);\r\n\r\n    /// @notice Gets the state of the active cooldown for the sender.\r\n    /// @dev If PowerTokenTypes.PowerTokenCoolDown contains only zeros it represents no active cool down.\r\n    /// Struct containing information on when the cooldown end and what is the quantity of the Power Tokens locked.\r\n    /// @param account account address that owns Power Tokens in the cooldown\r\n    /// @return Object PowerTokenTypes.PowerTokenCoolDown represents active cool down\r\n    function getActiveCooldown(\r\n        address account\r\n    ) external view returns (PowerTokenTypes.PwTokenCooldown memory);\r\n\r\n    /// @notice Initiates a cooldown for the specified account.\r\n    /// @dev This function allows an account to initiate a cooldown period for a specified amount of Power Tokens.\r\n    ///      During the cooldown period, the specified amount of Power Tokens cannot be redeemed or transferred.\r\n    /// @param account The account address for which the cooldown is initiated.\r\n    /// @param pwTokenAmount The amount of Power Tokens to be put on cooldown.\r\n    function cooldownInternal(address account, uint256 pwTokenAmount) external;\r\n\r\n    /// @notice Cancels the cooldown for the specified account.\r\n    /// @dev This function allows an account to cancel the active cooldown period for their Power Tokens,\r\n    ///      enabling them to freely redeem or transfer their Power Tokens.\r\n    /// @param account The account address for which the cooldown is to be canceled.\r\n    function cancelCooldownInternal(address account) external;\r\n\r\n    /// @notice Redeems Power Tokens for the specified account.\r\n    /// @dev This function allows an account to redeem their Power Tokens, transferring the specified\r\n    ///      amount of Power Tokens back to the account's staked token balance.\r\n    ///      The redemption is subject to the cooldown period, and the account must wait for the cooldown\r\n    ///      period to finish before being able to redeem the Power Tokens.\r\n    /// @param account The account address for which Power Tokens are to be redeemed.\r\n    /// @return transferAmount The amount of Power Tokens that have been redeemed and transferred back to the staked token balance.\r\n    function redeemInternal(address account) external returns (uint256 transferAmount);\r\n\r\n    /// @notice Adds staked tokens to the specified account.\r\n    /// @dev This function allows the specified account to add staked tokens to their Power Token balance.\r\n    ///      The staked tokens are converted to Power Tokens based on the internal exchange rate.\r\n    /// @param updateGovernanceToken An object of type PowerTokenTypes.UpdateGovernanceToken containing the details of the staked token update.\r\n    function addGovernanceTokenInternal(\r\n        PowerTokenTypes.UpdateGovernanceToken memory updateGovernanceToken\r\n    ) external;\r\n\r\n    /// @notice Removes staked tokens from the specified account, applying a fee.\r\n    /// @dev This function allows the specified account to remove staked tokens from their Power Token balance,\r\n    ///      while deducting a fee from the staked token amount. The fee is determined based on the cooldown period.\r\n    /// @param updateGovernanceToken An object of type PowerTokenTypes.UpdateGovernanceToken containing the details of the staked token update.\r\n    /// @return governanceTokenAmountToTransfer The amount of staked tokens to be transferred after applying the fee.\r\n    function removeGovernanceTokenWithFeeInternal(\r\n        PowerTokenTypes.UpdateGovernanceToken memory updateGovernanceToken\r\n    ) external returns (uint256 governanceTokenAmountToTransfer);\r\n\r\n    /// @notice Delegates a specified amount of Power Tokens from the caller's balance to the Liquidity Mining contract.\r\n    /// @dev This function allows the caller to delegate a specified amount of Power Tokens to the Liquidity Mining contract,\r\n    ///      enabling them to participate in liquidity mining and earn rewards.\r\n    /// @param account The address of the account delegating the Power Tokens.\r\n    /// @param pwTokenAmount The amount of Power Tokens to delegate.\r\n    function delegateInternal(address account, uint256 pwTokenAmount) external;\r\n\r\n    /// @notice Undelegated a specified amount of Power Tokens from the Liquidity Mining contract back to the caller's balance.\r\n    /// @dev This function allows the caller to undelegate a specified amount of Power Tokens from the Liquidity Mining contract,\r\n    ///      effectively removing them from participation in liquidity mining and stopping the earning of rewards.\r\n    /// @param account The address of the account to undelegate the Power Tokens from.\r\n    /// @param pwTokenAmount The amount of Power Tokens to undelegate.\r\n    function undelegateInternal(address account, uint256 pwTokenAmount) external;\r\n\r\n    /// @notice Emitted when the account stake/add [Staked] Tokens\r\n    /// @param account account address that executed the staking\r\n    /// @param governanceTokenAmount of Staked Token amount being staked into PowerToken contract\r\n    /// @param internalExchangeRate internal exchange rate used to calculate the base amount\r\n    /// @param baseAmount value calculated based on the governanceTokenAmount and the internalExchangeRate\r\n    event GovernanceTokenAdded(\r\n        address indexed account,\r\n        uint256 governanceTokenAmount,\r\n        uint256 internalExchangeRate,\r\n        uint256 baseAmount\r\n    );\r\n\r\n    /// @notice Emitted when the account unstakes the Power Tokens\r\n    /// @param account address that executed the unstaking\r\n    /// @param pwTokenAmount amount of Power Tokens that were unstaked\r\n    /// @param internalExchangeRate which was used to calculate the base amount\r\n    /// @param fee amount subtracted from the pwTokenAmount\r\n    event GovernanceTokenRemovedWithFee(\r\n        address indexed account,\r\n        uint256 pwTokenAmount,\r\n        uint256 internalExchangeRate,\r\n        uint256 fee\r\n    );\r\n\r\n    /// @notice Emitted when the sender delegates the Power Tokens to the LiquidityMining contract\r\n    /// @param account address delegating the Power Tokens\r\n    /// @param pwTokenAmounts amounts of Power Tokens delegated to respective lpTokens\r\n    event Delegated(address indexed account, uint256 pwTokenAmounts);\r\n\r\n    /// @notice Emitted when the sender undelegates Power Tokens from the LiquidityMining\r\n    /// @param account address undelegating Power Tokens\r\n    /// @param pwTokenAmounts amounts of Power Tokens undelegated form respective lpTokens\r\n    event Undelegated(address indexed account, uint256 pwTokenAmounts);\r\n\r\n    /// @notice Emitted when the sender sets the cooldown on Power Tokens\r\n    /// @param pwTokenAmount amount of pwToken in cooldown\r\n    /// @param endTimestamp end time of the cooldown\r\n    event CooldownChanged(uint256 pwTokenAmount, uint256 endTimestamp);\r\n\r\n    /// @notice Emitted when the sender redeems the pwTokens after the cooldown\r\n    /// @param account address that executed the redeem function\r\n    /// @param pwTokenAmount amount of the pwTokens that was transferred to the Power Token owner's address\r\n    event Redeem(address indexed account, uint256 pwTokenAmount);\r\n}\r\n\r\n// File: lib/ipor-power-tokens/contracts/interfaces/IPowerTokenLens.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\ninterface IPowerTokenLens {\r\n    /// @notice Gets the total supply of the Power Token.\r\n    /// @dev Value is calculated in runtime using baseTotalSupply and internal exchange rate.\r\n    /// @return Total supply of Power tokens, represented with 18 decimals\r\n    function totalSupplyOfPwToken() external view returns (uint256);\r\n\r\n    /// @notice Gets the balance of Power Tokens for a given account\r\n    /// @param account account address for which the balance of Power Tokens is fetched\r\n    /// @return Returns the amount of the Power Tokens owned by the `account`.\r\n    function balanceOfPwToken(address account) external view returns (uint256);\r\n\r\n    /// @notice Gets the delegated balance of the Power Tokens for a given account.\r\n    /// Tokens are delegated from PowerToken to LiquidityMining smart contract (reponsible for rewards distribution).\r\n    /// @param account account address for which the balance of delegated Power Tokens is checked\r\n    /// @return  Returns the amount of the Power Tokens owned by the `account` and delegated to the LiquidityMining contracts.\r\n    function balanceOfPwTokenDelegatedToLiquidityMining(\r\n        address account\r\n    ) external view returns (uint256);\r\n\r\n    /// @notice Gets the rate of the fee from the configuration. This fee is applied when the owner of Power Tokens wants to unstake them immediately.\r\n    /// @dev Fee value represented in as a percentage with 18 decimals\r\n    /// @return value, a percentage represented with 18 decimal\r\n    function getPwTokenUnstakeFee() external view returns (uint256);\r\n\r\n    /// @notice Gets the state of the active cooldown for the sender.\r\n    /// @dev If PowerTokenTypes.PowerTokenCoolDown contains only zeros it represents no active cool down.\r\n    /// Struct containing information on when the cooldown end and what is the quantity of the Power Tokens locked.\r\n    /// @param account account address that owns Power Tokens in the cooldown\r\n    /// @return Object PowerTokenTypes.PowerTokenCoolDown represents active cool down\r\n    function getPwTokensInCooldown(\r\n        address account\r\n    ) external view returns (PowerTokenTypes.PwTokenCooldown memory);\r\n\r\n    /// @notice Gets the power token cool down time in seconds.\r\n    /// @return uint256 cool down time in seconds\r\n    function getPwTokenCooldownTime() external view returns (uint256);\r\n\r\n    /// @notice Calculates the internal exchange rate between the Staked Token and total supply of a base amount\r\n    /// @return Current exchange rate between the Staked Token and the total supply of a base amount, represented with 18 decimals.\r\n    function getPwTokenExchangeRate() external view returns (uint256);\r\n\r\n    /// @notice Gets the total supply base amount\r\n    /// @return total supply base amount, represented with 18 decimals\r\n    function getPwTokenTotalSupplyBase() external view returns (uint256);\r\n}\r\n\r\n// File: lib/ipor-power-tokens/contracts/lens/PowerTokenLens.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @dev It is not recommended to use lens contract directly, should be used only through router (like IporProtocolRouter or PowerTokenRouter)\r\ncontract PowerTokenLens is IPowerTokenLens {\r\n    using ContractValidator for address;\r\n    address public immutable powerToken;\r\n\r\n    constructor(address powerTokenInput) {\r\n        powerToken = powerTokenInput.checkAddress();\r\n    }\r\n\r\n    function totalSupplyOfPwToken() external view override returns (uint256) {\r\n        return IPowerToken(powerToken).totalSupply();\r\n    }\r\n\r\n    function balanceOfPwToken(address account) external view override returns (uint256) {\r\n        return IPowerToken(powerToken).balanceOf(account);\r\n    }\r\n\r\n    function balanceOfPwTokenDelegatedToLiquidityMining(\r\n        address account\r\n    ) external view override returns (uint256) {\r\n        return IPowerToken(powerToken).delegatedToLiquidityMiningBalanceOf(account);\r\n    }\r\n\r\n    function getPwTokenUnstakeFee() external view returns (uint256) {\r\n        return IPowerToken(powerToken).getUnstakeWithoutCooldownFee();\r\n    }\r\n\r\n    function getPwTokensInCooldown(\r\n        address account\r\n    ) external view returns (PowerTokenTypes.PwTokenCooldown memory) {\r\n        return IPowerToken(powerToken).getActiveCooldown(account);\r\n    }\r\n\r\n    function getPwTokenCooldownTime() external view returns (uint256) {\r\n        return IPowerTokenInternal(powerToken).COOL_DOWN_IN_SECONDS();\r\n    }\r\n\r\n    function getPwTokenExchangeRate() external view returns (uint256) {\r\n        return IPowerTokenInternal(powerToken).calculateExchangeRate();\r\n    }\r\n\r\n    function getPwTokenTotalSupplyBase() external view returns (uint256) {\r\n        return IPowerTokenInternal(powerToken).totalSupplyBase();\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"powerTokenInput\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfPwToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfPwTokenDelegatedToLiquidityMining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPwTokenCooldownTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPwTokenExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPwTokenTotalSupplyBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPwTokenUnstakeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPwTokensInCooldown\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pwTokenAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct PowerTokenTypes.PwTokenCooldown\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"powerToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyOfPwToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PowerTokenLens", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d72915b95c37ae1b16b926f85ad61cca6395409f", "EVMVersion": "paris", "Library": "", "LicenseType": "BSD-3-Clause", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c1875ccf2d66aba231f449f52a181d7da5a0f61c27e1af42ded60eee63487c8a"}