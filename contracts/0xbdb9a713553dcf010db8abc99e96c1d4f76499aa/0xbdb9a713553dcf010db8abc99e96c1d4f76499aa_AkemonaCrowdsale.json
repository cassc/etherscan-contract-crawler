{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\utils\\math\\SafeMath.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\access\\IAccessControl.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {AccessControl-_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\access\\IAccessControlEnumerable.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\r\n */\r\ninterface IAccessControlEnumerable is IAccessControl {\r\n    /**\r\n     * @dev Returns one of the accounts that have `role`. `index` must be a\r\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\r\n     *\r\n     * Role bearers are not sorted in any particular way, and their ordering may\r\n     * change at any point.\r\n     *\r\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\r\n     * you perform all queries on the same block. See the following\r\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\r\n     * for more information.\r\n     */\r\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the number of accounts that have `role`. Can be used\r\n     * together with {getRoleMember} to enumerate all bearers of a role.\r\n     */\r\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\utils\\Context.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\utils\\math\\Math.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    enum Rounding {\r\n        Down, // Toward negative infinity\r\n        Up, // Toward infinity\r\n        Zero // Toward zero\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a == 0 ? 0 : (a - 1) / b + 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\r\n     * with further edits by Uniswap Labs also under MIT license.\r\n     */\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\r\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n            // variables such that product = prod1 * 2^256 + prod0.\r\n            uint256 prod0; // Least significant 256 bits of the product\r\n            uint256 prod1; // Most significant 256 bits of the product\r\n            assembly {\r\n                let mm := mulmod(x, y, not(0))\r\n                prod0 := mul(x, y)\r\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n            }\r\n\r\n            // Handle non-overflow cases, 256 by 256 division.\r\n            if (prod1 == 0) {\r\n                return prod0 / denominator;\r\n            }\r\n\r\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\r\n            require(denominator > prod1);\r\n\r\n            ///////////////////////////////////////////////\r\n            // 512 by 256 division.\r\n            ///////////////////////////////////////////////\r\n\r\n            // Make division exact by subtracting the remainder from [prod1 prod0].\r\n            uint256 remainder;\r\n            assembly {\r\n                // Compute remainder using mulmod.\r\n                remainder := mulmod(x, y, denominator)\r\n\r\n                // Subtract 256 bit number from 512 bit number.\r\n                prod1 := sub(prod1, gt(remainder, prod0))\r\n                prod0 := sub(prod0, remainder)\r\n            }\r\n\r\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\r\n            // See https://cs.stackexchange.com/q/138556/92363.\r\n\r\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\r\n            uint256 twos = denominator & (~denominator + 1);\r\n            assembly {\r\n                // Divide denominator by twos.\r\n                denominator := div(denominator, twos)\r\n\r\n                // Divide [prod1 prod0] by twos.\r\n                prod0 := div(prod0, twos)\r\n\r\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\r\n                twos := add(div(sub(0, twos), twos), 1)\r\n            }\r\n\r\n            // Shift in bits from prod1 into prod0.\r\n            prod0 |= prod1 * twos;\r\n\r\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\r\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\r\n            // four bits. That is, denominator * inv = 1 mod 2^4.\r\n            uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\r\n            // in modular arithmetic, doubling the correct bits in each step.\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\r\n\r\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\r\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n            // is no longer required.\r\n            result = prod0 * inverse;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\r\n     */\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator,\r\n        Rounding rounding\r\n    ) internal pure returns (uint256) {\r\n        uint256 result = mulDiv(x, y, denominator);\r\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\r\n            result += 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\r\n     *\r\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\r\n     */\r\n    function sqrt(uint256 a) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\r\n        //\r\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\r\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\r\n        //\r\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\r\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\r\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\r\n        //\r\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\r\n        uint256 result = 1 << (log2(a) >> 1);\r\n\r\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\r\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\r\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\r\n        // into the expected uint128 result.\r\n        unchecked {\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            return min(result, a / result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates sqrt(a), following the selected rounding direction.\r\n     */\r\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = sqrt(a);\r\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 128;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 64;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 32;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 16;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                value >>= 8;\r\n                result += 8;\r\n            }\r\n            if (value >> 4 > 0) {\r\n                value >>= 4;\r\n                result += 4;\r\n            }\r\n            if (value >> 2 > 0) {\r\n                value >>= 2;\r\n                result += 2;\r\n            }\r\n            if (value >> 1 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log2(value);\r\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >= 10**64) {\r\n                value /= 10**64;\r\n                result += 64;\r\n            }\r\n            if (value >= 10**32) {\r\n                value /= 10**32;\r\n                result += 32;\r\n            }\r\n            if (value >= 10**16) {\r\n                value /= 10**16;\r\n                result += 16;\r\n            }\r\n            if (value >= 10**8) {\r\n                value /= 10**8;\r\n                result += 8;\r\n            }\r\n            if (value >= 10**4) {\r\n                value /= 10**4;\r\n                result += 4;\r\n            }\r\n            if (value >= 10**2) {\r\n                value /= 10**2;\r\n                result += 2;\r\n            }\r\n            if (value >= 10**1) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log10(value);\r\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     *\r\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\r\n     */\r\n    function log256(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 16;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 8;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 4;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 2;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log256(value);\r\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\r\n        }\r\n    }\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\utils\\Strings.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            uint256 length = Math.log10(value) + 1;\r\n            string memory buffer = new string(length);\r\n            uint256 ptr;\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                ptr := add(buffer, add(32, length))\r\n            }\r\n            while (true) {\r\n                ptr--;\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\r\n                }\r\n                value /= 10;\r\n                if (value == 0) break;\r\n            }\r\n            return buffer;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            return toHexString(value, Math.log256(value) + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n    }\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\utils\\introspection\\IERC165.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\utils\\introspection\\ERC165.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\access\\AccessControl.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\r\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\r\n     *\r\n     * Format of the revert message is described in {_checkRole}.\r\n     *\r\n     * _Available since v4.6._\r\n     */\r\n    function _checkRole(bytes32 role) internal view virtual {\r\n        _checkRole(role, _msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view virtual {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"AccessControl: account \",\r\n                        Strings.toHexString(account),\r\n                        \" is missing role \",\r\n                        Strings.toHexString(uint256(role), 32)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     *\r\n     * NOTE: This function is deprecated in favor of {_grantRole}.\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     */\r\n    function _grantRole(bytes32 role, address account) internal virtual {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function _revokeRole(bytes32 role, address account) internal virtual {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\utils\\structs\\EnumerableSet.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\r\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n *\r\n * [WARNING]\r\n * ====\r\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\r\n * unusable.\r\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\r\n *\r\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\r\n * array of EnumerableSet.\r\n * ====\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastValue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastValue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        bytes32[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\access\\AccessControlEnumerable.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\r\n */\r\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns one of the accounts that have `role`. `index` must be a\r\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\r\n     *\r\n     * Role bearers are not sorted in any particular way, and their ordering may\r\n     * change at any point.\r\n     *\r\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\r\n     * you perform all queries on the same block. See the following\r\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\r\n     * for more information.\r\n     */\r\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\r\n        return _roleMembers[role].at(index);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of accounts that have `role`. Can be used\r\n     * together with {getRoleMember} to enumerate all bearers of a role.\r\n     */\r\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\r\n        return _roleMembers[role].length();\r\n    }\r\n\r\n    /**\r\n     * @dev Overload {_grantRole} to track enumerable memberships\r\n     */\r\n    function _grantRole(bytes32 role, address account) internal virtual override {\r\n        super._grantRole(role, account);\r\n        _roleMembers[role].add(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload {_revokeRole} to track enumerable memberships\r\n     */\r\n    function _revokeRole(bytes32 role, address account) internal virtual override {\r\n        super._revokeRole(role, account);\r\n        _roleMembers[role].remove(account);\r\n    }\r\n}\r\n\r\n// File: contracts\\AkemonaWhitelistBase.sol\r\n\r\npragma solidity ^0.8.19;\r\n\r\n//import \"./AkemonaCrowdsale.sol\";\r\n\r\nabstract contract AkemonaWhitelistBase {\r\n    function isTransferAuthorized(address _from, address _to, AkemonaCrowdsale _contract) public virtual view returns (bool); \r\n    function isPurchaseAuthorized(address _investor, uint256 _amount) public virtual view returns (bool); \r\n\r\n    function addWhitelistedAddresses(address[] memory _addresses) public virtual returns (bool);\r\n    function removeWhitelistedAddresses(address[] memory _addresses) public virtual;\r\n}\r\n\r\n// File: contracts\\AkemonaWhitelistTracker.sol\r\n\r\npragma solidity ^0.8.19;\r\ncontract AkemonaWhitelistTracker is Context, AccessControlEnumerable {\r\n\r\n    AkemonaWhitelistBase[] public whitelists;\r\n\r\n    constructor() {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n    }\r\n\r\n    modifier restricted() {\r\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \"not authorized\");\r\n        _;\r\n    }\r\n    \r\n    function addWhitelist(address _whitelist) public restricted {\r\n        whitelists.push(AkemonaWhitelistBase(_whitelist));\r\n    }\r\n\r\n    function removeWhitelist(uint256 index) public restricted {\r\n        require(index < whitelists.length);\r\n        whitelists[index] = whitelists[whitelists.length-1];\r\n        whitelists.pop();\r\n    }\r\n}\r\n\r\n// File: contracts\\AkemonaWhitelist.sol\r\n\r\npragma solidity ^0.8.19;\r\n//import \"./AkemonaCrowdsale.sol\";\r\n//import \"./AkemonaWhitelistBase.sol\";\r\ncontract AkemonaWhitelist is AkemonaWhitelistBase {\r\n\r\n    address public owner;\r\n\r\n    mapping (address => bool) public accredited;\r\n    mapping (address => bool) public whitelisted;\r\n    mapping (address => mapping(address => bool)) public exceptions;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier restricted() {\r\n        if (msg.sender == owner) _;\r\n    }\r\n\r\n    function isPurchaseAuthorized(address _investor, uint256 _amount) public view override returns (bool) {\r\n        if (!whitelisted[_investor]) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function isTransferAuthorized(address _from, address _to, AkemonaCrowdsale _contract) public view override returns (bool) {\r\n        if (exceptions[_from][_to]) {\r\n            return true;\r\n        }\r\n        if (!_contract.isDisbursed()) {\r\n            return false;\r\n        }\r\n        if (!whitelisted[_to]) {\r\n            return false;\r\n        }\r\n        if (block.timestamp - _contract.disbursementTime() > 60 * 60 * 24 * 365) {\r\n            return true;\r\n        }\r\n        if (accredited[_from]) {\r\n            return true;\r\n        }\r\n        // TODO\r\n        // If the crowdsale contract is in a buyback period, and the toAddress is the borrower, and the fromAddress is an original investor in the crowdsale, return true\r\n        return false;\r\n    }\r\n\r\n    function addAccreditedStatus(address[] memory _addresses) public restricted {\r\n        for (uint8 i = 0; i < _addresses.length; i++) {\r\n            accredited[_addresses[i]] = true;\r\n        }\r\n    }\r\n\r\n    function addWhitelistedAddresses(address[] memory _addresses) public override restricted returns (bool) {\r\n        for (uint8 i = 0; i < _addresses.length; i++) {\r\n            whitelisted[_addresses[i]] = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function removeAccreditedStatus(address[] memory _addresses) public restricted {\r\n        for (uint8 i = 0; i < _addresses.length; i++) {\r\n            accredited[_addresses[i]] = false;\r\n        }\r\n    }\r\n\r\n    function removeWhitelistedAddresses(address[] memory _addresses) public override restricted {\r\n        for (uint8 i = 0; i < _addresses.length; i++) {\r\n            accredited[_addresses[i]] = false;\r\n            whitelisted[_addresses[i]] = false;\r\n        }\r\n    }\r\n\r\n    function addException(address _from, address  _to) public restricted {\r\n        exceptions[_from][_to] = true;\r\n    }\r\n\r\n    function removeException(address _from, address _to) public restricted {\r\n        exceptions[_from][_to] = false;\r\n    }\r\n\r\n    function hasException(address _from, address _to) public view returns (bool) {\r\n        return exceptions[_from][_to];\r\n    }\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\nabstract contract ERC20Burnable is Context, ERC20 {\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n     * allowance.\r\n     *\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have allowance for ``accounts``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public virtual {\r\n        _spendAllowance(account, _msgSender(), amount);\r\n        _burn(account, amount);\r\n    }\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\security\\Pausable.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev ERC20 token with pausable token transfers, minting and burning.\r\n *\r\n * Useful for scenarios such as preventing trades until the end of an evaluation\r\n * period, or having an emergency switch for freezing all token transfers in the\r\n * event of a large bug.\r\n */\r\nabstract contract ERC20Pausable is ERC20, Pausable {\r\n    /**\r\n     * @dev See {ERC20-_beforeTokenTransfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the contract must not be paused.\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n\r\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\r\n    }\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/presets/ERC20PresetMinterPauser.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev {ERC20} token, including:\r\n *\r\n *  - ability for holders to burn (destroy) their tokens\r\n *  - a minter role that allows for token minting (creation)\r\n *  - a pauser role that allows to stop all token transfers\r\n *\r\n * This contract uses {AccessControl} to lock permissioned functions using the\r\n * different roles - head to its documentation for details.\r\n *\r\n * The account that deploys the contract will be granted the minter and pauser\r\n * roles, as well as the default admin role, which will let it grant both minter\r\n * and pauser roles to other accounts.\r\n *\r\n * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\r\n */\r\ncontract ERC20PresetMinterPauser is Context, AccessControlEnumerable, ERC20Burnable, ERC20Pausable {\r\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\r\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\r\n\r\n    /**\r\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\r\n     * account that deploys the contract.\r\n     *\r\n     * See {ERC20-constructor}.\r\n     */\r\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n\r\n        _setupRole(MINTER_ROLE, _msgSender());\r\n        _setupRole(PAUSER_ROLE, _msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` new tokens for `to`.\r\n     *\r\n     * See {ERC20-_mint}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the `MINTER_ROLE`.\r\n     */\r\n    function mint(address to, uint256 amount) public virtual {\r\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have minter role to mint\");\r\n        _mint(to, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Pauses all token transfers.\r\n     *\r\n     * See {ERC20Pausable} and {Pausable-_pause}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the `PAUSER_ROLE`.\r\n     */\r\n    function pause() public virtual {\r\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to pause\");\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n     * @dev Unpauses all token transfers.\r\n     *\r\n     * See {ERC20Pausable} and {Pausable-_unpause}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the `PAUSER_ROLE`.\r\n     */\r\n    function unpause() public virtual {\r\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to unpause\");\r\n        _unpause();\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual override(ERC20, ERC20Pausable) {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n    }\r\n}\r\n\r\n// File: contracts\\AkemonaDisbursement.sol\r\n\r\npragma solidity ^0.8.19;\r\n\r\n//import \"./AkemonaWhitelist.sol\";\r\n//import \"./AkemonaCrowdsaleToken.sol\";\r\n//import \"./Usdc.sol\";\r\n\r\n/*\r\n1. Administrator sets up partial or full redemption of securities\r\nContract creation (\"AkemonaDisbursement\")\r\n\r\n2. Investor makes an onchain request for seeking disbursement of funds\r\n\r\n\r\nPaying agent who is the owner of the disbursement wallet approves the payment to investors\r\nAdministrator allocates the disbursement amount to investors\r\nInvestor pulls the onchain funds into their own wallet\r\n\r\n*/\r\n\r\ncontract AkemonaDisbursement {\r\n\r\n    address public owner;\r\n\r\n    AkemonaCrowdsale crowdsale;\r\n    AkemonaCrowdsaleToken token;\r\n    Usdc usdc;\r\n    address[] disbursementWallets;\r\n\r\n    bool _isClosed = true;\r\n\r\n    uint256 _amountDisbursedPerToken;\r\n    uint256 _totalDisbursementAmount;\r\n    uint256 _openingTime;\r\n    bool _isFinal;\r\n\r\n    uint256 serialNumber;\r\n\r\n    uint256 public currentRound;\r\n\r\n\r\n    struct RedemptionRequest {\r\n        bool onBehalfOf;\r\n        bool redemptionAllocated;\r\n        bool redemptionClaimed;\r\n        uint256 allocatedAmount;\r\n        uint256 burnAmount;\r\n        uint8 disbursementWalletIndex;\r\n        bool offchainRedemption;\r\n        address wallet;\r\n        bytes32 investorId;\r\n        bool exists; // ignore this, it is used as a solidity hack to check for existence\r\n        uint256 round;\r\n    }\r\n\r\n    // Maps investorId to RedemptionRequest\r\n    mapping(bytes32 => RedemptionRequest) public walletlessRedemptionRequest;\r\n    // Maps wallet address to RedemptionRequest\r\n    mapping(address => RedemptionRequest) public walletRedemptionRequest;\r\n\r\n\r\n    event DisbursementSetupEvent(uint256 openingTime, bool isFinal, uint256 serialNumber, uint256 amountDisbursedPerToken, uint256 round);\r\n    event RedemptionRequestEvent(bool onBehalfOf, bool offchainRedemption, uint256 serialNumber, address wallet, bytes32 investorId, uint256 round);\r\n    event DisbursementAllocatedEvent(address wallet, bytes32 investorId, uint256 allocatedAmount, uint256 burnAmount, uint8 disbursementWalletIndex, bool offchainRedemption, uint256 serialNumber, uint256 round);\r\n    event DisbursementRedeemedEvent(address wallet, bytes32 investorId, uint256 allocatedAmount, uint256 burnAmount, uint8 disbursementWalletIndex, bool offchainRedemption, uint256 serialNumber, uint256 round);\r\n    event DisbursementClosedEvent(uint256 serialNumber, uint256 round);\r\n\r\n    constructor(\r\n            address _crowdsale,\r\n            address _crowdsaleToken,\r\n            address[] memory _disbursementWallets,\r\n            address payable _usdc,\r\n            uint256 _serialNumber\r\n            ) public {\r\n\r\n        currentRound = 0;\r\n\r\n        owner = msg.sender;\r\n\r\n        crowdsale = AkemonaCrowdsale(_crowdsale);\r\n        token = AkemonaCrowdsaleToken(_crowdsaleToken);\r\n        usdc = Usdc(_usdc);\r\n        disbursementWallets = _disbursementWallets;\r\n        serialNumber = _serialNumber;\r\n\r\n        require (_crowdsale == address(token.crowdsale()), \"E0\");\r\n\r\n    }\r\n    \r\n    modifier restricted() {\r\n        require(msg.sender == owner, \"E3\");\r\n        _;\r\n    }\r\n\r\n    function isOpen() public view returns (bool) {\r\n        return _openingTime > 0 && isClosed() == false && block.timestamp > _openingTime;\r\n    }\r\n\r\n    function isClosed() public view returns (bool) {\r\n        return _isClosed;\r\n    }\r\n\r\n    function close() public restricted {\r\n        _isClosed = true;\r\n        \r\n        emit DisbursementClosedEvent(getSerialNumber(), currentRound);\r\n    }\r\n\r\n    /*\r\n\r\n    1. Multiple whitelists per token (add/remove)\r\n    2. Permissioned whitelist\r\n    3. Central tracker for whitelist\r\n\r\n\r\n    TODO: add amountDisbursedPerToken to event\r\n\r\n    */\r\n\r\n    // Wallets must be funded prior to calling this function\r\n    function setupDisbursement (\r\n        uint256 amountDisbursedPerToken,\r\n        uint256 openingTime,\r\n        bool isFinal\r\n        ) public restricted {\r\n\r\n        require(_isClosed == true, \"The active round must bee closed before this can be called.\");\r\n        \r\n        //require ((_amountDisbursedPerToken / 1e6) * token.totalSupplyNonWalletless() <= _totalDisbursementAmount, \"Not enough disbursementAmount to cover token supply\");\r\n\r\n        currentRound = currentRound + 1;\r\n        _isClosed = false;\r\n\r\n        _amountDisbursedPerToken = amountDisbursedPerToken;\r\n        //_totalDisbursementAmount = totalDisbursementAmount;\r\n        _openingTime = openingTime;\r\n        _isFinal = isFinal;\r\n\r\n        uint256 _fundedTotal = 0;\r\n\r\n        for (uint8 i = 0; i < disbursementWallets.length; i++) {\r\n            _fundedTotal = _fundedTotal + usdc.balanceOf(disbursementWallets[i]);\r\n        }\r\n\r\n        require (_fundedTotal >= (amountDisbursedPerToken * (token.totalSupplyNonWalletless() / 1e6)), \"Not enough funds in wallets to cover disbursementAmount\");\r\n\r\n        emit DisbursementSetupEvent(openingTime, isFinal, getSerialNumber(), amountDisbursedPerToken, currentRound);\r\n    }\r\n\r\n    function getSerialNumber() public view returns (uint256) {\r\n        return serialNumber;\r\n    }\r\n\r\n    function requestRedemption(bool offchainRedemption) public {\r\n        require(isOpen(), \"disbursement is not open\");\r\n        //for (uint8 i = 0; i < addresses.length; i++) {\r\n\r\n        require(token.balanceOf(msg.sender) > 0, \"no tokens found for this wallet\");\r\n\r\n        require(walletRedemptionRequest[msg.sender].exists == false || walletRedemptionRequest[msg.sender].round < currentRound, \"request already exists for this round\");\r\n        //require\r\n        //require(crowdsale.getInvestorForPurchaseIndex(purchaseIndexes[i]) == msg.sender, \"must request from the investor address\");\r\n\r\n\r\n        walletRedemptionRequest[msg.sender] = RedemptionRequest(false, false, false, 0, 0, 0, offchainRedemption, msg.sender, 0, true, currentRound);\r\n\r\n        emit RedemptionRequestEvent(false, offchainRedemption, getSerialNumber(), msg.sender, 0, currentRound);\r\n\r\n        //}\r\n    }\r\n\r\n    function requestRedemptionOnBehalfOfWallet(address[] memory wallets, bool[] memory offchainRedemption) public restricted {\r\n        for (uint8 i = 0; i < wallets.length; i++) {\r\n            require(walletRedemptionRequest[wallets[i]].exists == false || walletRedemptionRequest[wallets[i]].round < currentRound, \"request already exists for this round\");\r\n            walletRedemptionRequest[wallets[i]] = RedemptionRequest(true, false, false, 0, 0, 0, offchainRedemption[i], msg.sender, 0, true, currentRound);\r\n            emit RedemptionRequestEvent(true, offchainRedemption[i], getSerialNumber(), wallets[i], 0, currentRound);\r\n        }\r\n    }\r\n\r\n    function requestRedemptionOnBehalfOf(bytes32[] memory _investorIds) public restricted {\r\n        for (uint8 i = 0; i < _investorIds.length; i++) {\r\n            require(walletlessRedemptionRequest[_investorIds[i]].exists == false || walletlessRedemptionRequest[_investorIds[i]].round < currentRound, \"request already exists\");\r\n            walletlessRedemptionRequest[_investorIds[i]] = RedemptionRequest(true, false, false, 0, 0, 0, true, address(0), _investorIds[i], true, currentRound);\r\n            emit RedemptionRequestEvent(true, true, getSerialNumber(), address(0), _investorIds[i], currentRound);\r\n        }\r\n    }\r\n    \r\n    // emits DisbursementAllocatedEvent\r\n    // in the case of on-chain disbursements, the wallet index indicates which disbursementWallet to use (starting with 0)\r\n\r\n    function allocateDisbursementsByInvestorId(bytes32[] memory _investorIds, uint256[] memory _amounts, uint8[] memory _walletIndexes) public restricted {\r\n\r\n        for (uint8 i = 0; i < _investorIds.length; i++) {\r\n            require(walletlessRedemptionRequest[_investorIds[i]].exists != false, \"request does not exist\");\r\n\r\n            //address addr = crowdsale.getInvestorForPurchaseIndex(_investorIds[i]);\r\n\r\n            //require(token.balanceOf(addr) * (_amountDisbursedPerToken / 1e6) <= _amounts[i], \"too much is being allocated for this investor\");\r\n\r\n            require(walletlessRedemptionRequest[_investorIds[i]].redemptionClaimed == false, \"request has already been redeemed\");\r\n\r\n            walletlessRedemptionRequest[_investorIds[i]].allocatedAmount = _amounts[i];\r\n            walletlessRedemptionRequest[_investorIds[i]].disbursementWalletIndex = _walletIndexes[i];\r\n            walletlessRedemptionRequest[_investorIds[i]].redemptionAllocated = true;\r\n\r\n            emit DisbursementAllocatedEvent(address(0), _investorIds[i], _amounts[i], 0, _walletIndexes[i], walletlessRedemptionRequest[_investorIds[i]].offchainRedemption, getSerialNumber(), currentRound);\r\n        }\r\n\r\n    }\r\n\r\n    function allocateDisbursementsByWallet(address[] memory _wallets, uint256[] memory _amounts, uint256[] memory _burnAmounts, uint8[] memory _walletIndexes) public restricted {\r\n\r\n        for (uint8 i = 0; i < _wallets.length; i++) {\r\n            require(walletRedemptionRequest[_wallets[i]].exists != false, \"request does not exist\");\r\n\r\n            //address addr = crowdsale.getInvestorForPurchaseIndex(_investorIds[i]);\r\n\r\n            //require(token.balanceOf(addr) * (_amountDisbursedPerToken / 1e6) <= _amounts[i], \"too much is being allocated for this investor\");\r\n\r\n            require(walletRedemptionRequest[_wallets[i]].redemptionClaimed == false, \"request has already been redeemed\");\r\n\r\n            require(walletRedemptionRequest[_wallets[i]].offchainRedemption == false || _amounts[i] == 0, \"cannot allocate non-zero amount to offchain redemption request\");\r\n\r\n            walletRedemptionRequest[_wallets[i]].allocatedAmount = _amounts[i];\r\n            walletRedemptionRequest[_wallets[i]].disbursementWalletIndex = _walletIndexes[i];\r\n            walletRedemptionRequest[_wallets[i]].redemptionAllocated = true;\r\n            walletRedemptionRequest[_wallets[i]].burnAmount = _burnAmounts[i];\r\n\r\n            emit DisbursementAllocatedEvent(_wallets[i], 0, _amounts[i], _burnAmounts[i], _walletIndexes[i], walletRedemptionRequest[_wallets[i]].offchainRedemption, getSerialNumber(), currentRound);\r\n        }\r\n\r\n    }\r\n/*\r\n    function debugAllowance() public view returns (uint256) {\r\n        uint256 allowance = usdc.allowance(disbursementWallets[walletRedemptionRequest[msg.sender].disbursementWalletIndex], address(this));\r\n        return allowance;\r\n    }\r\n\r\n    function debugAllocated() public view returns (uint256) {\r\n        return walletRedemptionRequest[msg.sender].allocatedAmount;\r\n    }\r\n\r\n    function debugIndex() public view returns (uint8) {\r\n        return disbursementWallets[walletRedemptionRequest[msg.sender].disbursementWalletIndex\r\n    }\r\n*/\r\n    function redeemDisbursement() public {\r\n        require(isOpen(), \"disbursement is not open\");\r\n        //for (uint8 i = 0; i < purchaseIndexes.length; i++) {\r\n            //address addr = crowdsale.getInvestorForPurchaseIndex(purchaseIndexes[i]);\r\n\r\n            //require(addr == msg.sender, \"must redeem from the investor address\");\r\n\r\n            require(walletRedemptionRequest[msg.sender].redemptionAllocated == true, \"disbursement is not allocated\");\r\n            require(walletRedemptionRequest[msg.sender].offchainRedemption == false, \"disbursement is designated as offchain\");\r\n\r\n            uint256 allowance = usdc.allowance(disbursementWallets[walletRedemptionRequest[msg.sender].disbursementWalletIndex], address(this));\r\n\r\n            require(allowance >= walletRedemptionRequest[msg.sender].allocatedAmount, \"insufficient approval in wallet\");\r\n            require(walletRedemptionRequest[msg.sender].redemptionClaimed == false, \"disbursement has already been redeemed\");\r\n\r\n            // Ensure this flag gets set before the USDC transfer\r\n            walletRedemptionRequest[msg.sender].redemptionClaimed = true;\r\n\r\n            require(usdc.transferFrom(disbursementWallets[walletRedemptionRequest[msg.sender].disbursementWalletIndex], msg.sender, walletRedemptionRequest[msg.sender].allocatedAmount), \"USDC transfer failed.\");\r\n\r\n            if (walletRedemptionRequest[msg.sender].burnAmount == 0) {\r\n                if (_isFinal) {\r\n                    token.burnFromAdmin(msg.sender, token.balanceOf(msg.sender));\r\n                }\r\n            } else {\r\n                token.burnFromAdmin(msg.sender, walletRedemptionRequest[msg.sender].burnAmount);\r\n            }\r\n\r\n\r\n            emit DisbursementRedeemedEvent(msg.sender, 0, walletRedemptionRequest[msg.sender].allocatedAmount, walletRedemptionRequest[msg.sender].burnAmount, walletRedemptionRequest[msg.sender].disbursementWalletIndex,walletRedemptionRequest[msg.sender].offchainRedemption, getSerialNumber(), currentRound);\r\n        //}\r\n    }\r\n\r\n    function redeemDisbursementOnBehalfOfWallet(address[] memory _wallets) public restricted {\r\n        for (uint8 i = 0; i < _wallets.length; i++) {\r\n            require(walletRedemptionRequest[_wallets[i]].redemptionAllocated == true, \"disbursement is not allocated\");\r\n            require(walletRedemptionRequest[_wallets[i]].redemptionClaimed == false, \"disbursement has already been redeemed\");\r\n\r\n            walletRedemptionRequest[_wallets[i]].redemptionClaimed = true;\r\n\r\n            if (walletRedemptionRequest[_wallets[i]].offchainRedemption == false) {\r\n                require(usdc.transferFrom(disbursementWallets[walletRedemptionRequest[_wallets[i]].disbursementWalletIndex], _wallets[i], walletRedemptionRequest[_wallets[i]].allocatedAmount), \"USDC transfer failed.\");\r\n            }\r\n\r\n            if (walletRedemptionRequest[_wallets[i]].burnAmount == 0) {\r\n                if (_isFinal) {\r\n                    token.burnFromAdmin(_wallets[i], token.balanceOf(_wallets[i]));\r\n                }\r\n            } else {\r\n                token.burnFromAdmin(_wallets[i], walletRedemptionRequest[_wallets[i]].burnAmount);\r\n            }\r\n\r\n    \r\n            emit DisbursementRedeemedEvent(_wallets[i], 0, walletRedemptionRequest[_wallets[i]].allocatedAmount, walletRedemptionRequest[_wallets[i]].burnAmount, walletRedemptionRequest[_wallets[i]].disbursementWalletIndex, walletRedemptionRequest[_wallets[i]].offchainRedemption, getSerialNumber(), currentRound);\r\n        }\r\n    }\r\n\r\n\r\n    function redeemDisbursementsOffchain(bytes32[] memory _investorIds) public restricted {\r\n        require(isOpen(), \"disbursement is not open\");\r\n\r\n        for (uint8 i = 0; i < _investorIds.length; i++) {\r\n            require(walletlessRedemptionRequest[_investorIds[i]].redemptionAllocated == true, \"disbursement is not allocated\");\r\n            require(walletlessRedemptionRequest[_investorIds[i]].offchainRedemption == true, \"disbursement is not designated as offchain\");\r\n            require(walletlessRedemptionRequest[_investorIds[i]].redemptionClaimed == false, \"disbursement has already been redeemed\");\r\n\r\n            walletlessRedemptionRequest[_investorIds[i]].redemptionClaimed = true;\r\n\r\n            //address addr = crowdsale.getInvestorForPurchaseIndex(_investorIds[i]);\r\n\r\n            //if (_isFinal) {\r\n            //    token.burnFromAdmin(addr, token.balanceOf(addr));\r\n            //}\r\n\r\n    \r\n            emit DisbursementRedeemedEvent(address(0), _investorIds[i], walletlessRedemptionRequest[_investorIds[i]].allocatedAmount, walletlessRedemptionRequest[_investorIds[i]].burnAmount, walletlessRedemptionRequest[_investorIds[i]].disbursementWalletIndex, walletlessRedemptionRequest[_investorIds[i]].offchainRedemption, getSerialNumber(), currentRound);\r\n        }\r\n/*\r\n        for (uint8 i = 0; i < _wallets.length; i++) {\r\n            require(walletRedemptionRequest[_wallets[i]].redemptionAllocated == true, \"disbursement is not allocated\");\r\n            require(walletRedemptionRequest[_wallets[i]].offchainRedemption == true, \"disbursement is not designated as offchain\");\r\n            require(walletRedemptionRequest[_wallets[i]].redemptionClaimed == false, \"disbursement has already been redeemed\");\r\n\r\n            walletRedemptionRequest[_wallets[i]].redemptionClaimed = true;\r\n\r\n            if (_burnAmounts[i] == 0) {\r\n                if (_isFinal) {\r\n                    token.burnFromAdmin(_wallets[i], token.balanceOf(_wallets[i]));\r\n                }\r\n            } else {\r\n                token.burnFromAdmin(_wallets[i], _burnAmounts[i]);\r\n            }\r\n\r\n    \r\n            emit DisbursementRedeemedEvent(_wallets[i], 0, walletRedemptionRequest[_wallets[i]].allocatedAmount, _burnAmounts[i], walletRedemptionRequest[_wallets[i]].disbursementWalletIndex, walletRedemptionRequest[_wallets[i]].offchainRedemption, getSerialNumber(), currentRound);\r\n        }*/\r\n    }\r\n\r\n}\r\n\r\n// File: contracts\\AkemonaCrowdsaleToken.sol\r\n\r\npragma solidity ^0.8.19;\r\n//import \"./AkemonaCrowdsale.sol\";\r\n//import \"./AkemonaWhitelist.sol\";\r\n/**\r\n * @title SampleCrowdsaleToken\r\n * @dev Very simple ERC20 Token that can be minted.\r\n * It is meant to be used in a crowdsale contract.\r\n */\r\ncontract AkemonaCrowdsaleToken is ERC20PresetMinterPauser {\r\n\r\n    AkemonaCrowdsale public crowdsale;\r\n\r\n    AkemonaDisbursement public disbursement;\r\n    bool _disbursementSet;\r\n\r\n    constructor (string memory name, string memory symbol, address _crowdsale) public ERC20PresetMinterPauser(name, symbol) {\r\n        // solhint-disable-previous-line no-empty-blocks\r\n        crowdsale = AkemonaCrowdsale(_crowdsale);\r\n    }\r\n\r\n    modifier restricted() {\r\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \"E3\");\r\n        _;\r\n    }\r\n\r\n    function setCrowdsale(address _crowdsale) public restricted {\r\n        crowdsale = AkemonaCrowdsale(_crowdsale);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 value) internal override {\r\n        if (!hasRole(DEFAULT_ADMIN_ROLE, _msgSender())) {\r\n            require(crowdsale.isTransferAuthorized(from, to, value), \"Transfer is not authorized.\");\r\n\r\n            if (hasDisbursement()) {\r\n                require(disbursement.isOpen() == false, \"Cannot transfer while disbursement is open.\");\r\n            }\r\n        }\r\n        \r\n        super._transfer(from, to, value);\r\n    }\r\n\r\n    function decimals() public view override returns (uint8) {\r\n        return 6;\r\n    }\r\n\r\n    function burnFromAdmin(address account, uint256 amount) public restricted {\r\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \"AkemonaCrowdsaleToken: must have admin role to call burnFromAdmin\");\r\n        _burn(account, amount);\r\n    }\r\n\r\n    function burnFromAdminMultiple(address[] memory accounts, uint256[] memory amounts) public restricted {\r\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \"AkemonaCrowdsaleToken: must have admin role to call burnFromAdmin\");\r\n        for (uint8 i = 0; i < accounts.length; i++) {\r\n            _burn(accounts[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n   // function balanceOf(address account) public override view returns (uint256) {\r\n    //    return super.balanceOf(account);\r\n   // }\r\n\r\n    function adminTransfer(address from, address to, uint256 value) public restricted {\r\n        super._transfer(from, to, value);\r\n    }\r\n\r\n    function setDisbursement(address _disbursement) public restricted {\r\n        if (hasDisbursement()) {\r\n            require(disbursement.isClosed(), \"Cannot replace a disbursement that isnt closed\");\r\n        }\r\n        disbursement = AkemonaDisbursement(_disbursement);\r\n        grantRole(DEFAULT_ADMIN_ROLE, _disbursement);\r\n        _disbursementSet = true;\r\n    }\r\n\r\n    function hasDisbursement() public view returns (bool) {\r\n        return _disbursementSet;\r\n    }\r\n\r\n    function addAdmin(address account) public restricted {\r\n        grantRole(DEFAULT_ADMIN_ROLE, account);\r\n    }\r\n\r\n    function totalSupplyNonWalletless() public view returns (uint256) {\r\n        return totalSupply() - balanceOf(crowdsale.owner());\r\n    }\r\n}\r\n\r\n// File: contracts\\Usdc.sol\r\n\r\npragma solidity ^0.8.19;\r\n\r\nlibrary SafeMathMod { // Partial SafeMath Library\r\n\r\n    function mul(uint256 a, uint256 b) pure internal returns(uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) pure internal returns(uint256) {\r\n        assert(b != 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256 c) {\r\n        require((c = a - b) < a);\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256 c) {\r\n        require((c = a + b) > a);\r\n    }\r\n}\r\n\r\ncontract Usdc { //is inherently ERC20\r\n    using SafeMathMod\r\n    for uint256;\r\n\r\n    address owner;\r\n\r\n\r\n\r\n    string constant public name = \"USDC\";\r\n\r\n    string constant public symbol = \"USDC\";\r\n\r\n    uint256 constant public decimals = 6;\r\n\r\n    uint256 constant public totalSupply = 100000000e18;\r\n\r\n    uint256 constant private MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    mapping(address => mapping(address => uint256)) public allowed;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    event TransferFrom(address indexed _spender, address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    constructor () public {\r\n        balanceOf[msg.sender] = totalSupply;\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * @dev function that sells available tokens\r\n     */\r\n\r\n\r\n    function transfer(address _to, uint256 _value) public returns(bool success) {\r\n        /* Ensures that tokens are not sent to address \"0x0\" */\r\n        require(_to != address(0));\r\n        /* Prevents sending tokens directly to contracts. */\r\n\r\n\r\n        /* SafeMathMOd.sub will throw if there is not enough balance and if the transfer value is 0. */\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value The amount of token to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success) {\r\n        /* Ensures that tokens are not sent to address \"0x0\" */\r\n        require(_to != address(0));\r\n        /* Ensures tokens are not sent to this contract */\r\n\r\n\r\n        uint256 allowance = allowed[_from][msg.sender];\r\n        /* Ensures sender has enough available allowance OR sender is balance holder allowing single transsaction send to contracts*/\r\n        require(_value <= allowance || _from == msg.sender);\r\n\r\n        /* Use SafeMathMod to add and subtract from the _to and _from addresses respectively. Prevents under/overflow and 0 transfers */\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n\r\n        /* Only reduce allowance if not MAX_UINT256 in order to save gas on unlimited allowance */\r\n        /* Balance holder does not need allowance to send from self. */\r\n        if (allowed[_from][msg.sender] != MAX_UINT256 && _from != msg.sender) {\r\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        }\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer the specified amounts of tokens to the specified addresses.\r\n     * @dev Be aware that there is no check for duplicate recipients.\r\n     *\r\n     * @param _toAddresses Receiver addresses.\r\n     * @param _amounts Amounts of tokens that will be transferred.\r\n     */\r\n    function multiPartyTransfer(address[] memory _toAddresses, uint256[] memory _amounts) public {\r\n        /* Ensures _toAddresses array is less than or equal to 255 */\r\n        require(_toAddresses.length <= 255);\r\n        /* Ensures _toAddress and _amounts have the same number of entries. */\r\n        require(_toAddresses.length == _amounts.length);\r\n\r\n        for (uint8 i = 0; i < _toAddresses.length; i++) {\r\n            transfer(_toAddresses[i], _amounts[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer the specified amounts of tokens to the specified addresses from authorized balance of sender.\r\n     * @dev Be aware that there is no check for duplicate recipients.\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _toAddresses The addresses of the recipients (MAX 255)\r\n     * @param _amounts The amounts of tokens to be transferred\r\n     */\r\n    function multiPartyTransferFrom(address _from, address[] memory _toAddresses, uint256[] memory _amounts) public {\r\n        /* Ensures _toAddresses array is less than or equal to 255 */\r\n        require(_toAddresses.length <= 255);\r\n        /* Ensures _toAddress and _amounts have the same number of entries. */\r\n        require(_toAddresses.length == _amounts.length);\r\n\r\n        for (uint8 i = 0; i < _toAddresses.length; i++) {\r\n            transferFrom(_from, _toAddresses[i], _amounts[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice `msg.sender` approves `_spender` to spend `_value` tokens\r\n     *\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @param _value The amount of tokens to be approved for transfer\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns(bool success) {\r\n        /* Ensures address \"0x0\" is not assigned allowance. */\r\n        require(_spender != address(0));\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @param _owner The address of the account owning tokens\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns(uint256 remaining) {\r\n        remaining = allowed[_owner][_spender];\r\n    }\r\n\r\n    //function isNotContract(address _addr) private view returns(bool) {\r\n    //    uint length;\r\n    //    assembly {\r\n            /* retrieve the size of the code on target address, this needs assembly */\r\n    //        length: = extcodesize(_addr)\r\n    //    }\r\n    //    return (length == 0);\r\n    //}\r\n\r\n}\r\n\r\n// File: contracts\\AkemonaCrowdsale.sol\r\n\r\npragma solidity ^0.8.19;\r\ncontract AkemonaCrowdsale {\r\n\r\n    struct RefundRequest {\r\n        uint256 purchaseIndex;\r\n        bool isReconfirm;\r\n        // TODO: partial refund\r\n    }\r\n\r\n    RefundRequest[] public refundRequests;\r\n\r\n    struct Purchase {\r\n        address investor;\r\n        bytes32 investorId;\r\n        uint256 paid;\r\n        uint256 received;\r\n        bool refunded;\r\n        bool refundRequested;\r\n        bool refundAllocated;\r\n        bool requiresReconfirm;\r\n        bool isClosed;\r\n        bool offChain;\r\n        bool noWallet;\r\n        bytes32 offchainPurchaseId;\r\n    }\r\n\r\n    /* TODO:\r\n       1) issue tokens to 0 address for no wallet\r\n       2) covert noWallet to wallet and issue event\r\n\r\n    */\r\n\r\n    Purchase[] public purchases;\r\n\r\n    address public owner;\r\n\r\n    AkemonaCrowdsaleToken public token;\r\n    Usdc public usdc;\r\n    AkemonaWhitelistBase[] public whitelists;\r\n    address public escrow;\r\n    uint256 public openingTime;\r\n    uint256 public closingTime;\r\n    uint256 public minimumInvestment;\r\n    uint256 public goal;\r\n    uint256 public cap;\r\n\r\n    uint256 public raised;\r\n\r\n\r\n\r\n    bool public isDisbursed;\r\n    uint256 public disbursementTime;\r\n\r\n    bool private _closed;\r\n\r\n    // zero coupon bond\r\n    uint256 public maturityTime;\r\n    uint256 public effectiveDailyRate;\r\n\r\n    \r\n    uint256 public transactionId;\r\n\r\n    string public securityType;\r\n    bool public directRefund;\r\n\r\n    event PurchaseEvent(address indexed _purchaser, uint256 indexed _paid, uint256 indexed _received, uint256 _purchaseIndex);\r\n\r\n    event PurchaseClosedEvent(address indexed _purchaser, uint256 indexed _paid, uint256 indexed _received, uint256 _purchaseIndex);\r\n\r\n    event RefundProcessedEvent(address indexed _purchaser, uint256 indexed _paid, uint256 indexed _received, uint256 _purchaseIndex);\r\n\r\n    event RefundAllocatedEvent(address indexed _purchaser, uint256 indexed _paid, uint256 indexed _received, uint256 _purchaseIndex);\r\n\r\n    event RefundRequestedEvent(address indexed _purchaser, uint256 indexed _paid, uint256 indexed _received, uint256 _purchaseIndex);\r\n\r\n    event ReconfirmEvent(address indexed _purchaser, uint256 indexed _paid, uint256 indexed _received, uint256 _purchaseIndex);\r\n\r\n    event RecoverTokenEvent(address indexed _oldAddress, address indexed _newAddress, uint256 _purchaseIndex);\r\n\r\n    event ConvertNoWalletEvent(address indexed _wallet, uint256 _purchaseIndex);\r\n\r\n    function getPurchase(uint256 i) public view returns (Purchase memory) {\r\n        return purchases[i];   \r\n    }\r\n\r\n    constructor(\r\n            address payable _usdc, \r\n            address[] memory _whitelists, \r\n            address _escrow, \r\n            /*\r\n            WAS:\r\n            uint256[] memory _openingClosingMaturityTime, \r\n            //uint256 _openingTime, \r\n            //uint256 _closingTime, \r\n            //uint256 _maturityTime, \r\n            uint256 _minimumInvestment,\r\n            uint256 _goal,\r\n            uint256 _cap,\r\n            uint256 _effectiveDailyRate,\r\n            */\r\n            uint256[] memory _intArguments, \r\n            //uint256 _openingTime, \r\n            //uint256 _closingTime, \r\n            //uint256 _maturityTime, \r\n            //uint256 _minimumInvestment,\r\n            //uint256 _goal,\r\n            //uint256 _cap,\r\n            //uint256 _effectiveDailyRate,\r\n            string memory name, \r\n            string memory symbol,\r\n            string memory _securityType,\r\n            bool _directRefund\r\n            ) public {\r\n        owner = msg.sender;\r\n        raised = 0;\r\n        //token = new AkemonaCrowdsaleToken(\"ake\", symbol);\r\n        token = new AkemonaCrowdsaleToken(name, symbol, address(this));\r\n        token.addAdmin(msg.sender);\r\n        usdc = Usdc(_usdc);\r\n        for (uint8 i = 0; i < _whitelists.length; i++) {\r\n            whitelists.push(AkemonaWhitelistBase(_whitelists[i]));\r\n        }\r\n        escrow = _escrow;\r\n        openingTime = _intArguments[0];\r\n        closingTime = _intArguments[1];\r\n        maturityTime = _intArguments[2];\r\n        minimumInvestment = _intArguments[3];\r\n        goal = _intArguments[4];\r\n        cap = _intArguments[5];\r\n        effectiveDailyRate = _intArguments[6];\r\n\r\n        require(closingTime > openingTime, \"E1\");\r\n\r\n\r\n\r\n        require(maturityTime > closingTime, \"E2\");\r\n        transactionId = 1;\r\n\r\n        securityType = _securityType;\r\n        directRefund = _directRefund;\r\n    }\r\n\r\n\r\n\r\n    modifier restricted() {\r\n        require(msg.sender == owner, \"E3\");\r\n        _;\r\n    }\r\n\r\n    modifier whenNotClosed() {\r\n        require(!_closed, \"E4\");\r\n        _;\r\n    }\r\n\r\n    modifier whenClosed() {\r\n        require(_closed, \"E5\");\r\n        _;\r\n    }\r\n\r\n    function addWhitelist(address _whitelist) public restricted {\r\n        whitelists.push(AkemonaWhitelistBase(_whitelist));\r\n    }\r\n\r\n    function removeWhitelist(uint256 index) public restricted {\r\n        require(index < whitelists.length);\r\n        whitelists[index] = whitelists[whitelists.length-1];\r\n        whitelists.pop();\r\n    }\r\n\r\n    function getInvestorForPurchaseIndex(uint256 index) public view returns (address) {\r\n        return purchases[index].investor;\r\n    }\r\n\r\n\r\n     /* TODO:\r\n       1) issue tokens to 0 address for no wallet\r\n       2) covert noWallet to wallet and issue event\r\n\r\n    */\r\n\r\n// TODO: offchainInvestmentId\r\n    function processNoWalletPurchase(bytes32[] memory _userIds, uint256[] memory _amounts, uint256[] memory amountToIssue, bytes32[] memory _offchainInvestmentIds, uint256 _transactionId) public restricted {\r\n        require(transactionId == _transactionId, \"E6\");\r\n        transactionId = transactionId + 1;\r\n\r\n        for (uint8 i = 0; i < _userIds.length; i++) {\r\n            require(!isDisbursed, \"E7\");\r\n            //require(block.timestamp < closingTime, \"Contract is past its closing time.\");  // now a client-side check\r\n            require(block.timestamp > openingTime, \"E8\");\r\n\r\n            require(raised < cap, \"E9\");\r\n\r\n            uint usdcAmount = _amounts[i];\r\n\r\n            require(raised + usdcAmount <= cap, \"E10\");\r\n\r\n            require (usdcAmount >= minimumInvestment, \"E11\");\r\n\r\n            //uint256 amountToIssue = getNumTokensPerNumDollarsWithCredit(usdcAmount, _numDays[i]);\r\n\r\n            token.mint(owner, amountToIssue[i]);\r\n\r\n            raised = raised + usdcAmount;\r\n\r\n            purchases.push(Purchase(0x0000000000000000000000000000000000000000, _userIds[i], usdcAmount, amountToIssue[i], false, false, false, false, false, true, true, _offchainInvestmentIds[i]));\r\n\r\n            emit PurchaseEvent(0x0000000000000000000000000000000000000000, usdcAmount, amountToIssue[i], purchases.length - 1);\r\n        }\r\n    }\r\n\r\n\r\n    function convertNoWalletToWallet(uint256[] memory purchaseIndices, address wallet) public restricted {\r\n        for (uint i = 0; i < purchaseIndices.length; i++) {\r\n            Purchase storage currentPurchase = purchases[purchaseIndices[i]];\r\n\r\n            require(currentPurchase.noWallet, \"E12\");\r\n\r\n            currentPurchase.investor = wallet;\r\n            currentPurchase.noWallet = false;\r\n\r\n            //token.transferFrom(owner, wallet, currentPurchase.received);\r\n            //token.transfer(wallet, currentPurchase.received);\r\n            token.adminTransfer(owner, wallet, currentPurchase.received);\r\n\r\n            emit ConvertNoWalletEvent(wallet, purchaseIndices[i]);\r\n        }\r\n    }\r\n\r\n// TODO: offchainInvestmentId\r\n    function processPurchaseOnBehalfOf(address[] memory _addresses, uint256[] memory _amounts, uint256[] memory amountToIssue, bytes32[] memory _offchainInvestmentIds, uint256 _transactionId) public restricted {\r\n        require(transactionId == _transactionId, \"E13\");\r\n        transactionId = transactionId + 1;\r\n        for (uint8 i = 0; i < _addresses.length; i++) {\r\n            require(!isDisbursed, \"E14\");\r\n            //require(block.timestamp < closingTime, \"Contract is past its closing time.\");  // now a client-side check\r\n            require(block.timestamp > openingTime, \"E15\");\r\n\r\n            require(raised < cap, \"E16\");\r\n\r\n            uint usdcAmount = _amounts[i];\r\n\r\n            require(raised + usdcAmount <= cap, \"E17\");\r\n\r\n            bool authorized = false;\r\n            for (uint8 i = 0; i < whitelists.length; i++) {\r\n                if (whitelists[i].isPurchaseAuthorized(_addresses[i], usdcAmount)) {\r\n                    authorized = true;\r\n                }\r\n            }\r\n            require(authorized, \"E18\");\r\n            require (usdcAmount >= minimumInvestment, \"E19\");\r\n\r\n            //uint256 amountToIssue = getNumTokensPerNumDollarsWithCredit(usdcAmount, _numDays[i]);\r\n            token.mint(_addresses[i], amountToIssue[i]);\r\n\r\n            raised = raised + usdcAmount;\r\n\r\n            purchases.push(Purchase(_addresses[i], \"\", usdcAmount, amountToIssue[i], false, false, false, false, false, true, false, _offchainInvestmentIds[i]));\r\n\r\n            emit PurchaseEvent(_addresses[i], usdcAmount, amountToIssue[i], purchases.length - 1);\r\n        }\r\n    }\r\n\r\n    function processPurchase(address _investor, uint usdcAmount, uint256 amountToIssue) public restricted {\r\n        require(!isDisbursed, \"E20\");\r\n        //require(block.timestamp < closingTime, \"Contract is past its closing time.\"); // now a client-side check\r\n        require(block.timestamp > openingTime, \"E21\");\r\n\r\n        require(raised < cap, \"E22\");\r\n\r\n        require(usdc.allowance(_investor, address(this)) > 0, \"E23\");\r\n        //uint usdcAmount = usdc.allowance(_investor, address(this));\r\n\r\n        require(raised + usdcAmount <= cap, \"E24\");\r\n\r\n        bool authorized = false;\r\n        for (uint8 i = 0; i < whitelists.length; i++) {\r\n            if (whitelists[i].isPurchaseAuthorized(_investor, usdcAmount)) {\r\n                authorized = true;\r\n            }\r\n        }\r\n        require(authorized, \"E25\");\r\n        require (usdcAmount >= minimumInvestment, \"E26\");\r\n        require(usdc.transferFrom(_investor, escrow, usdcAmount), \"E27\");\r\n\r\n        //uint256 amountToIssue = getNumTokensPerNumDollars(usdcAmount);\r\n        token.mint(_investor, amountToIssue);\r\n\r\n        raised = raised + usdcAmount;\r\n\r\n        purchases.push(Purchase(_investor, \"\", usdcAmount, amountToIssue, false, false, false, false, false, false, false, \"\"));\r\n\r\n        emit PurchaseEvent(_investor, usdcAmount, amountToIssue, purchases.length - 1);\r\n    }\r\n\r\n    function processPurchases(address[] memory _addresses, uint[] memory usdcAmount, uint256[] memory amountToIssue) public restricted {\r\n        for (uint8 i = 0; i < _addresses.length; i++) {\r\n            if (usdc.allowance(_addresses[i], address(this)) > 0) {\r\n                processPurchase(_addresses[i], usdcAmount[i], amountToIssue[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setDisbursed(bool _isDisbursed, uint256 _disbursementTime) public restricted {\r\n        isDisbursed = _isDisbursed;\r\n        disbursementTime = _disbursementTime;\r\n    }\r\n\r\n    function close() public restricted whenNotClosed {\r\n        _closed = true;\r\n    }\r\n\r\n    function unclose() public restricted whenClosed {\r\n        _closed = false;\r\n    }\r\n\r\n    function closed() public view returns (bool) {\r\n        return _closed;\r\n    }\r\n\r\n    function isTransferAuthorized(address _from, address _to, uint256 value) public view returns (bool) {\r\n        for (uint8 i = 0; i < whitelists.length; i++) {\r\n            if (whitelists[i].isTransferAuthorized(_from, _to, this)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function rollingClose() public restricted {\r\n        require(!isDisbursed, \"E28\");\r\n\r\n        for (uint i = 0; i < purchases.length; i++) {\r\n            if (!purchases[i].requiresReconfirm && !purchases[i].refunded && !purchases[i].refundRequested && !purchases[i].isClosed) {\r\n                purchases[i].isClosed = true;\r\n                emit PurchaseClosedEvent(purchases[i].investor, purchases[i].paid, purchases[i].received, i);\r\n            }\r\n        }\r\n    }\r\n\r\n    function reconfirmPurchase(uint256 i) public whenNotClosed {\r\n        require(!isDisbursed, \"E29\");\r\n    \r\n        if (purchases[i].investor == msg.sender && !purchases[i].refunded && !purchases[i].refundRequested) {\r\n            purchases[i].requiresReconfirm = false;\r\n            emit ReconfirmEvent(purchases[i].investor, purchases[i].paid, purchases[i].received, i);\r\n        }\r\n\r\n    }\r\n\r\n    function reconfirmPurchaseOnBehalfOf(uint256 i) public restricted {\r\n        require(!isDisbursed, \"E30\");\r\n    \r\n        if (!purchases[i].refunded && !purchases[i].refundRequested) {\r\n            purchases[i].requiresReconfirm = false;\r\n            emit ReconfirmEvent(purchases[i].investor, purchases[i].paid, purchases[i].received, i);\r\n        }\r\n\r\n    }\r\n\r\n    function requireReconfirm() public restricted {\r\n        require(!isDisbursed, \"E31\");\r\n\r\n        for (uint i = 0; i < purchases.length; i++) {\r\n            if (!purchases[i].refunded && !purchases[i].refundRequested && !purchases[i].isClosed) {\r\n                purchases[i].requiresReconfirm = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function processReconfirm() public restricted {\r\n        require(!isDisbursed, \"E32\");\r\n\r\n        for (uint i = 0; i < purchases.length; i++) {\r\n            if (purchases[i].requiresReconfirm && !purchases[i].refunded && !purchases[i].refundRequested) {\r\n                purchases[i].refundRequested = true;\r\n                refundRequests.push(RefundRequest(i, true));\r\n            }\r\n        }\r\n    }\r\n\r\n    function requestRefundForPurchase(uint256 i) public whenNotClosed {\r\n        require(!isDisbursed, \"E33\");\r\n\r\n        bool refundProcessed = false;\r\n    \r\n        if (purchases[i].investor == msg.sender && !purchases[i].refunded && !purchases[i].refundRequested && !purchases[i].isClosed) {\r\n            purchases[i].refundRequested = true;\r\n            refundRequests.push(RefundRequest(i, false));\r\n            refundProcessed = true;\r\n\r\n            emit RefundRequestedEvent(purchases[i].investor, purchases[i].paid, purchases[i].received, i);\r\n        }\r\n\r\n        require(refundProcessed, \"E34\");\r\n    }\r\n\r\n    \r\n    function requestRefundForPurchaseOnBehalfOf(uint256 i) public restricted {\r\n        require(!isDisbursed, \"E35\");\r\n\r\n        bool refundProcessed = false;\r\n    \r\n        if (!purchases[i].refunded && !purchases[i].refundRequested && !purchases[i].isClosed) {\r\n            purchases[i].refundRequested = true;\r\n            refundRequests.push(RefundRequest(i, false));\r\n            refundProcessed = true;\r\n\r\n            emit RefundRequestedEvent(purchases[i].investor, purchases[i].paid, purchases[i].received, i);\r\n        }\r\n\r\n        require(refundProcessed, \"E36\");\r\n    }\r\n\r\n\r\n    // maxLength used as a hack to avoid unestimatable gas price error\r\n    function requestRefundAll(uint256 maxLength) public restricted {\r\n        require(!isDisbursed, \"E37\");\r\n\r\n        for (uint i = 0; i < purchases.length && i < maxLength; i++) {\r\n            if (!purchases[i].refunded && !purchases[i].refundRequested && !purchases[i].isClosed) {\r\n                purchases[i].refundRequested = true;\r\n                refundRequests.push(RefundRequest(i, false));\r\n\r\n                emit RefundRequestedEvent(purchases[i].investor, purchases[i].paid, purchases[i].received, i);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function requestRefund(bool onlyMostRecent) public whenNotClosed {\r\n        require(!isDisbursed, \"E38\");\r\n\r\n        bool refundProcessed = false;\r\n        bool cont = true;\r\n\r\n        for (uint i = purchases.length - 1; i >= 0 && cont; i--) {\r\n            if (purchases[i].investor == msg.sender && !purchases[i].refunded && !purchases[i].refundRequested && !purchases[i].isClosed) {\r\n                purchases[i].refundRequested = true;\r\n                refundRequests.push(RefundRequest(i, false));\r\n                refundProcessed = true;\r\n\r\n                emit RefundRequestedEvent(purchases[i].investor, purchases[i].paid, purchases[i].received, i);\r\n\r\n                if (onlyMostRecent) {\r\n                    cont = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        require(refundProcessed, \"E39\");\r\n    }\r\n\r\n    function processRefund(uint256 purchaseIndex) public whenNotClosed {\r\n        require(!directRefund);\r\n        require(!isDisbursed, \"Contract is already disbursed\");\r\n\r\n        uint256 usdcAuthorized = usdc.allowance(escrow, address(this));\r\n        require(usdcAuthorized > 0, \"Contract does not have authorization to refund USDC.\");\r\n\r\n        uint256 usdcAvailable = usdc.balanceOf(escrow);\r\n        require(usdcAvailable > 0, \"Insufficient funds.\");\r\n\r\n        if (usdcAuthorized < usdcAvailable) {\r\n            usdcAvailable = usdcAuthorized;\r\n        }\r\n\r\n        Purchase storage currentPurchase = purchases[purchaseIndex];\r\n\r\n        require(currentPurchase.investor == msg.sender);\r\n\r\n        require(!currentPurchase.offChain, \"This was an offchain purchase and needs to be processed via processOffchainRefund method\");\r\n\r\n        if(!currentPurchase.refunded && currentPurchase.refundRequested && currentPurchase.refundAllocated) {\r\n            if (usdcAvailable >= currentPurchase.paid) {\r\n\r\n                // Process the refund\r\n                require(usdc.transferFrom(escrow, currentPurchase.investor, currentPurchase.paid), \"USDC transfer failed.\");\r\n                token.burnFromAdmin(currentPurchase.investor, currentPurchase.received);\r\n   \r\n                currentPurchase.refunded = true;\r\n\r\n                raised = raised - currentPurchase.paid;\r\n\r\n                emit RefundProcessedEvent(currentPurchase.investor, currentPurchase.paid, currentPurchase.received, purchaseIndex);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function processOffchainRefund(uint256 purchaseIndex) public restricted {\r\n        processManualRefund(purchaseIndex);\r\n    }\r\n\r\n    function processDirectRefundByEscrow(uint256 purchaseIndex) public restricted {\r\n        processManualRefund(purchaseIndex);\r\n    }\r\n    \r\n    function processManualRefund(uint256 purchaseIndex) public restricted {\r\n        require(!isDisbursed, \"Contract is already disbursed\");\r\n\r\n        Purchase storage currentPurchase = purchases[purchaseIndex];\r\n\r\n        require(!currentPurchase.refunded, \"This purchase is already marked as refunded\");\r\n\r\n        require(currentPurchase.refundRequested, \"This purchase is not marked as refundRequested\");\r\n\r\n        if (!currentPurchase.noWallet) {\r\n            // Burn tokens as the refund has been processed offchain\r\n            token.burnFromAdmin(currentPurchase.investor, currentPurchase.received);\r\n        }\r\n\r\n        currentPurchase.refunded = true;\r\n\r\n        raised = raised - currentPurchase.paid;\r\n\r\n        emit RefundProcessedEvent(currentPurchase.investor, currentPurchase.paid, currentPurchase.received, purchaseIndex);\r\n    }\r\n\r\n    function getPurchasesPendingRefund() public view returns (bool[] memory) {\r\n        require(!isDisbursed, \"Contract is already disbursed\");\r\n\r\n        uint256 usdcAuthorized = usdc.allowance(escrow, address(this));\r\n        require(usdcAuthorized > 0, \"Contract does not have authorization to refund USDC.\");\r\n\r\n        uint256 usdcAvailable = usdc.balanceOf(escrow);\r\n        require(usdcAvailable > 0, \"Insufficient funds.\");\r\n\r\n        if (usdcAuthorized < usdcAvailable) {\r\n            usdcAvailable = usdcAuthorized;\r\n        }\r\n\r\n        bool continueProcessing = true;\r\n\r\n        bool[] memory pendingRefunds = new bool[](purchases.length);\r\n\r\n        for (uint i = 0; i < refundRequests.length; i++) {\r\n            if (continueProcessing) {\r\n                Purchase storage currentPurchase = purchases[refundRequests[i].purchaseIndex];\r\n                \r\n                if (!currentPurchase.refunded && currentPurchase.refundRequested && !currentPurchase.offChain) {\r\n                    if (usdcAvailable >= currentPurchase.paid) {\r\n\r\n                        if (currentPurchase.refundAllocated) {\r\n                            usdcAvailable = usdcAvailable - currentPurchase.paid;\r\n                        } else {\r\n                            // Allocate the refund\r\n                            pendingRefunds[refundRequests[i].purchaseIndex] = true;\r\n                            usdcAvailable = usdcAvailable - currentPurchase.paid;\r\n                        }\r\n\r\n                    } else {\r\n                        // Insufficient funds to process refund\r\n                        continueProcessing = false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return pendingRefunds;\r\n    }\r\n\r\n    function allocateRefunds(uint256[] memory purchaseIndices) public restricted {\r\n\r\n        for (uint i = 0; i < purchaseIndices.length; i++) {\r\n            Purchase storage currentPurchase = purchases[purchaseIndices[i]];\r\n\r\n            require(!currentPurchase.offChain, \"One or more purchaseIndices was an offchain purchase and cannot be allocated\");\r\n\r\n            if (!currentPurchase.refunded && currentPurchase.refundRequested) {\r\n                currentPurchase.refundAllocated = true;\r\n                emit RefundAllocatedEvent(currentPurchase.investor, currentPurchase.paid, currentPurchase.received, purchaseIndices[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function moveSentTokens(address _to) public restricted {\r\n        uint usdcAmount = usdc.balanceOf(address(this));\r\n\r\n        require(usdc.transfer(_to, usdcAmount), \"USDC transfer failed.\");\r\n    }\r\n\r\n    function getWhitelist(uint256 i) public view returns (AkemonaWhitelistBase) {\r\n        return whitelists[i];\r\n    }\r\n\r\n    function getTest() public view returns (uint256) {\r\n        return goal;\r\n    }\r\n\r\n    function getToken() public view returns (AkemonaCrowdsaleToken) {\r\n        return token;\r\n    }\r\n    \r\n    function recoverLostTokens(uint256[] memory purchaseIndices, address _to) public restricted {\r\n        //AkemonaWhitelist wl = AkemonaWhitelist(crowdsale.whitelist);\r\n\r\n\r\n        for (uint i = 0; i < purchaseIndices.length; i++) {\r\n            Purchase storage currentPurchase = purchases[purchaseIndices[i]];\r\n\r\n\r\n            require (this.getToken().balanceOf(currentPurchase.investor) >= currentPurchase.received, \"Account has insufficient tokens\");\r\n\r\n            this.getToken().adminTransfer(currentPurchase.investor, _to, currentPurchase.received);\r\n\r\n            emit RecoverTokenEvent(currentPurchase.investor, _to, purchaseIndices[i]);\r\n\r\n            currentPurchase.investor = _to;\r\n\r\n        }\r\n\r\n            \r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_whitelists\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_escrow\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_intArguments\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_securityType\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_directRefund\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_purchaseIndex\",\"type\":\"uint256\"}],\"name\":\"ConvertNoWalletEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_paid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_received\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_purchaseIndex\",\"type\":\"uint256\"}],\"name\":\"PurchaseClosedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_paid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_received\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_purchaseIndex\",\"type\":\"uint256\"}],\"name\":\"PurchaseEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_paid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_received\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_purchaseIndex\",\"type\":\"uint256\"}],\"name\":\"ReconfirmEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_purchaseIndex\",\"type\":\"uint256\"}],\"name\":\"RecoverTokenEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_paid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_received\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_purchaseIndex\",\"type\":\"uint256\"}],\"name\":\"RefundAllocatedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_paid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_received\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_purchaseIndex\",\"type\":\"uint256\"}],\"name\":\"RefundProcessedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_paid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_received\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_purchaseIndex\",\"type\":\"uint256\"}],\"name\":\"RefundRequestedEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"addWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"purchaseIndices\",\"type\":\"uint256[]\"}],\"name\":\"allocateRefunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"purchaseIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"convertNoWalletToWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"directRefund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disbursementTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"effectiveDailyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getInvestorForPurchaseIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getPurchase\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"investorId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"refunded\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"refundRequested\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"refundAllocated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"requiresReconfirm\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isClosed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"offChain\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"noWallet\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"offchainPurchaseId\",\"type\":\"bytes32\"}],\"internalType\":\"struct AkemonaCrowdsale.Purchase\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPurchasesPendingRefund\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"contract AkemonaCrowdsaleToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getWhitelist\",\"outputs\":[{\"internalType\":\"contract AkemonaWhitelistBase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDisbursed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"isTransferAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maturityTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumInvestment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"moveSentTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"purchaseIndex\",\"type\":\"uint256\"}],\"name\":\"processDirectRefundByEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"purchaseIndex\",\"type\":\"uint256\"}],\"name\":\"processManualRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_userIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountToIssue\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_offchainInvestmentIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"processNoWalletPurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"purchaseIndex\",\"type\":\"uint256\"}],\"name\":\"processOffchainRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToIssue\",\"type\":\"uint256\"}],\"name\":\"processPurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountToIssue\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_offchainInvestmentIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"processPurchaseOnBehalfOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"usdcAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountToIssue\",\"type\":\"uint256[]\"}],\"name\":\"processPurchases\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processReconfirm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"purchaseIndex\",\"type\":\"uint256\"}],\"name\":\"processRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"purchases\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"investorId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"refunded\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"refundRequested\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"refundAllocated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"requiresReconfirm\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isClosed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"offChain\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"noWallet\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"offchainPurchaseId\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"reconfirmPurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"reconfirmPurchaseOnBehalfOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"purchaseIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"recoverLostTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"refundRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"purchaseIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isReconfirm\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removeWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"onlyMostRecent\",\"type\":\"bool\"}],\"name\":\"requestRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxLength\",\"type\":\"uint256\"}],\"name\":\"requestRefundAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"requestRefundForPurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"requestRefundForPurchaseOnBehalfOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requireReconfirm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollingClose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"securityType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isDisbursed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_disbursementTime\",\"type\":\"uint256\"}],\"name\":\"setDisbursed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract AkemonaCrowdsaleToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract Usdc\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelists\",\"outputs\":[{\"internalType\":\"contract AkemonaWhitelistBase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AkemonaCrowdsale", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000000000100000000000000000000000000be1d87208917f50e25021ce4f50183b423fc5b6500000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000004730ad729261a06c4806e08fb53d2c4d00d182f600000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000065a7893c00000000000000000000000000000000000000000000000000000000660a5b340000000000000000000000000000000000000000000000000000003afff360bc0000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000000000000000000000000000000000037e11d6000000000000000000000000000000000000000000000000000000048c273950000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b534f4d3234303131374145000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b534f4d323430313137414500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f47b22726567223a227265675f6366222c2273656375726974795f74797065223a22657175697479222c2273656375726974795f6f6666657265645f6f746865725f64657363223a22507265666572726564222c22646f63756d656e746174696f6e5f75726c223a2268747470733a2f2f616b6d6e2e75732f6f2f736f6d61222c22726567756c61746f725f75726c223a2268747470733a2f2f7777772e7365632e676f762f41726368697665732f65646761722f646174612f323030343936302f3030303230303439363032333030303030332f303030323030343936302d32332d3030303030332d696e6465782e68746d227d000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://18869eb09c2392d0b61434eaf1776454cd69c7d83a3b43fad2e83d91a50980f7"}