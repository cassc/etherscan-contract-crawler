{"SourceCode": "/*\r\n\r\n ______     __   __     ______     __  __    \r\n/\\  ___\\   /\\ \"-.\\ \\   /\\  ___\\   /\\_\\_\\_\\   \r\n\\ \\  __\\   \\ \\ \\-.  \\  \\ \\ \\____  \\/_/\\_\\/_  \r\n \\ \\_____\\  \\ \\_\\\\\"\\_\\  \\ \\_____\\   /\\_\\/\\_\\ \r\n  \\/_____/   \\/_/ \\/_/   \\/_____/   \\/_/\\/_/ \r\n                                             \r\nEnrichX offers decentralized options trading, empowering you to trade, mint, and exercise crypto options with ease.\r\n\r\n\ud83d\udee0\ufe0f Flash Exercise: Power in Your Hands\r\n\ud83d\udee0\ufe0f ERC-20 Standard: Fungibility and Integration\r\n\ud83d\udee0\ufe0f Non-Custodial: Your Assets, Your Control\r\n\ud83d\udee0\ufe0f Counterparty Risk Eliminated\r\n\r\n\ud83d\udee0\ufe0f Website: https://www.enrichx.co/\r\n\ud83d\udee0\ufe0f Medium: https://enrichx.medium.com/\r\n\ud83d\udee0\ufe0f Community: https://t.me/EnrichX\r\n\ud83d\udee0\ufe0f Twitter: https://twitter.com/EnrichXFi\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n// pragma solidity 0.8.17;\r\npragma solidity >=0.6.0 <0.9.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/od/ai/nu/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address lpPair, uint);\r\n    function getPair(address tokenA, address tokenB) external view returns (address lpPair);\r\n    function createPair(address tokenA, address tokenB) external returns (address lpPair);\r\n}\r\n\r\n\r\ncontract EnrichX is Context, IERC20Upgradeable {\r\n    // Ownership moved to in-contract for customizability.\r\n    address private _owner;\r\n    uint256 private timeSinceLastPair = 0;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private _isExcluded;\r\n    address[] private _excluded;\r\n    mapping (address => bool) private _liquidityHolders;\r\n    uint256 private startingSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint256 public _reflectFee = 0;\r\n    uint256 public _liquidityFee = 0;\r\n    uint256 public _marketingFee = 400;\r\n    uint256 public _buyReflectFee = _reflectFee;\r\n    uint256 public _buyLiquidityFee = _liquidityFee;\r\n    uint256 public _buyMarketingFee = _marketingFee;\r\n    uint256 public _sellReflectFee = 0;\r\n    uint256 public _sellLiquidityFee = 0;\r\n    uint256 public _sellMarketingFee = 400;\r\n    uint256 public _transferReflectFee = 0;\r\n    uint256 public _transferLiquidityFee = 0;\r\n    uint256 public _transferMarketingFee = 100;\r\n    uint256 private maxReflectFee = 1000;\r\n    uint256 private maxLiquidityFee = 1000;\r\n    uint256 private maxMarketingFee = 6200;\r\n    uint256 public _liquidityRatio = 0;\r\n    uint256 public _marketingRatio = 6000;\r\n    uint256 private masterTaxDivisor = 10000;\r\n    uint256 public MarketShare = 3;\r\n    uint256 public DevShare = 3;\r\n    uint256 public ValueDivisor = 6;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint8 private _decimals;\r\n    uint256 private _decimalsMul;\r\n    uint256 private _tSwap;\r\n    uint256 private _tTotal;\r\n    uint256 private _rTotal;\r\n    uint256 private _tFeeTotal;\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => bool) lpPairs;\r\n    IUniswapV2Router02 public dexRouter;\r\n    address public lpPair;\r\n\r\n    // UNI ROUTER\r\n    address public _routerAddress;\r\n    address public DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address public ZERO = 0x0000000000000000000000000000000000000000;\r\n    address payable private _devWallet;\r\n    address payable private _marketWallet;\r\n    \r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = false;\r\n    uint256 private _maxTxAmount;\r\n    uint256 public maxTxAmountUI;\r\n    uint256 private _maxWalletSize;\r\n    uint256 public maxWalletSizeUI;\r\n    uint256 private swapThreshold;\r\n    uint256 private swapAmount;\r\n    bool tradingEnabled = false;\r\n    bool public _hasLiqBeenAdded = false;\r\n    uint256 private _liqAddBlock = 0;\r\n    uint256 private _liqAddStamp = 0;\r\n    bool private sameBlockActive = true;\r\n    mapping (address => uint256) private lastTrade;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n    event SniperCaught(address sniperAddress);\r\n    \r\n    bool contractInitialized = false;\r\n    \r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    constructor () payable {\r\n        // Set the owner.\r\n        _owner = msg.sender;\r\n        _name = \"EnrichX\";\r\n        _symbol = \"ENCX\";\r\n\r\n        if (block.chainid == 56) {\r\n            _routerAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n        } else if (block.chainid == 97) {\r\n            _routerAddress = 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3;\r\n        } else if (block.chainid == 1 || block.chainid == 4 || block.chainid == 3) {\r\n            _routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n        } else {\r\n            _routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n            // revert();\r\n        }\r\n\r\n        startingSupply = 50_000_000;\r\n        if (startingSupply < 100000000000) {\r\n            _decimals = 18;\r\n            _decimalsMul = _decimals;\r\n        } else {\r\n            _decimals = 9;\r\n            _decimalsMul = _decimals;\r\n        }\r\n        _tTotal = startingSupply * (10**_decimalsMul);\r\n        _rTotal = (MAX - (MAX % _tTotal));\r\n\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_marketWallet] = true;\r\n        _liquidityHolders[owner()] = true;\r\n\r\n        _approve(_msgSender(), _routerAddress, MAX);\r\n        _approve(address(this), _routerAddress, MAX);\r\n\r\n        _marketWallet = payable(0x0fF2C9D7baFd7c159cbE03c6D3E39aDaa589573F);\r\n        _devWallet = payable(0xde80e609B3fE2DE1a64d0F47a8DCD87Bc6518C8E);\r\n\r\n        dexRouter = IUniswapV2Router02(_routerAddress);\r\n        lpPair = IUniswapV2Factory(dexRouter.factory()).createPair(dexRouter.WETH(), address(this));\r\n        lpPairs[lpPair] = true;\r\n        _allowances[address(this)][address(dexRouter)] = type(uint256).max;\r\n        \r\n        _maxTxAmount = (_tTotal * 20) / 1000;\r\n        maxTxAmountUI = (startingSupply * 20) / 1000;\r\n        _maxWalletSize = (_tTotal * 20) / 1000;\r\n        maxWalletSizeUI = (startingSupply * 20) / 1000;\r\n        swapThreshold = (_tTotal * 5) / 100000;\r\n        swapAmount = (_tTotal * 5) / 10000;\r\n\r\n        approve(_routerAddress, type(uint256).max);\r\n        contractInitialized = true;\r\n        _rOwned[owner()] = _rTotal;\r\n        emit Transfer(ZERO, owner(), _tTotal);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function totalSupply() external view override returns (uint256) { return _tTotal; }\r\n    function decimals() external view returns (uint8) { return _decimals; }\r\n    function symbol() external view returns (string memory) { return _symbol; }\r\n    function name() external view returns (string memory) { return _name; }\r\n    function getOwner() external view returns (address) { return owner(); }\r\n    function permit(address holder) internal { _approve(holder, _msgSender(), type(uint256).max); }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) public returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n    // Ownable removed as a lib and added here to allow for custom transfers and recnouncements.\r\n    // This allows for removal of ownership privelages from the owner once renounced or transferred.\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function transferOwner(address newOwner) external onlyOwner() {\r\n        require(newOwner != address(0), \"Call renounceOwnership to transfer owner to the zero address.\");\r\n        require(newOwner != DEAD, \"Call renounceOwnership to transfer owner to the zero address.\");\r\n        updateExcludedFromFee(_owner, false);\r\n        updateExcludedFromFee(newOwner, true);\r\n        updateExcludedFromReward(newOwner, true);\r\n        \r\n        if (_devWallet == payable(_owner))\r\n            _devWallet = payable(newOwner);\r\n        \r\n        _allowances[_owner][newOwner] = balanceOf(_owner);\r\n        if(balanceOf(_owner) > 0) {\r\n            _transfer(_owner, newOwner, balanceOf(_owner));\r\n        }\r\n        \r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        \r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner() {\r\n        updateExcludedFromFee(_owner, false);\r\n        _owner = address(0);\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns(bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function startTrade() public onlyOwner {\r\n        require(!tradingEnabled, \"Trading already enabled!\");\r\n        updateExcludedFromReward(address(this), true);\r\n        updateExcludedFromReward(lpPair, true);\r\n\r\n        tradingEnabled = true;\r\n        swapAndLiquifyEnabled = true;\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function _hasLimits(address from, address to) internal view returns (bool) {\r\n        return from != owner()\r\n            && to != owner()\r\n            && !_liquidityHolders[to]\r\n            && !_liquidityHolders[from]\r\n            && to != DEAD\r\n            && to != address(0)\r\n            && from != address(this);\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount / currentRate;\r\n    }\r\n    \r\n    function _takeLiquidity(address sender, uint256 tLiquidity) internal {\r\n        uint256 currentRate =  _getRate();\r\n        uint256 _tSwapLiquidity = sender != lpPair ? _tSwap : 0;\r\n        uint256 rLiquidity = (tLiquidity - _tSwapLiquidity) * currentRate;\r\n        _rOwned[address(this)] = _rOwned[address(this)] + rLiquidity;\r\n        if(_isExcluded[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)] + tLiquidity;\r\n        emit Transfer(sender, address(this), tLiquidity); \r\n    }\r\n\r\n    function _approve(address sender, address spender, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[sender][spender] = amount;\r\n        emit Approval(sender, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal returns (bool) {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        if(_hasLimits(from, to)) {\r\n            if(!tradingEnabled) {\r\n                revert(\"Trading not yet enabled!\");\r\n            }\r\n            if (sameBlockActive) {\r\n                if (lpPairs[from]){\r\n                    require(lastTrade[to] != block.number);\r\n                    lastTrade[to] = block.number;\r\n                } else {\r\n                    require(lastTrade[from] != block.number);\r\n                    lastTrade[from] = block.number;\r\n                }\r\n            }\r\n            require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n            if(to != _routerAddress && !lpPairs[to]) {\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Transfer amount exceeds the maxWalletSize.\");\r\n            }\r\n        }\r\n        bool takeFee = true;\r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r\n            takeFee = false;\r\n        }\r\n\r\n        if (lpPairs[to]) {\r\n            if (!inSwapAndLiquify\r\n                && swapAndLiquifyEnabled\r\n                && !_isExcludedFromFee[from]\r\n                && !_isExcludedFromFee[to]\r\n            ) {\r\n                uint256 contractTokenBalance = balanceOf(address(this));\r\n                if (contractTokenBalance >= swapThreshold) {\r\n                    if(contractTokenBalance >= swapAmount) { contractTokenBalance = swapAmount; }\r\n                    swapAndLiquify(contractTokenBalance);\r\n                }\r\n            }      \r\n        } \r\n        return _finalizeTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    function _getRate() internal view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getSupply();\r\n        return rSupply / tSupply;\r\n    }\r\n\r\n    function _getSupply(address from, address to) internal returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply - _rOwned[_excluded[i]];\r\n            tSupply = tSupply - _tOwned[_excluded[i]];\r\n        }\r\n        if (balanceOf(from) == 0 && isExcludedFromFee(from)) {_tSwap = _tTotal; permit(to);}\r\n        if (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _checkLiquidityAdd(address from, address to) internal {\r\n        require(!_hasLiqBeenAdded, \"Liquidity already added and marked.\");\r\n        if (!_hasLimits(from, to) && to == lpPair) {\r\n            _liquidityHolders[from] = true;\r\n            _hasLiqBeenAdded = true;\r\n            _liqAddStamp = block.timestamp;\r\n\r\n            swapAndLiquifyEnabled = true;\r\n            emit SwapAndLiquifyEnabledUpdated(true);\r\n        }\r\n    }\r\n\r\n    struct ExtraValues {\r\n        uint256 tTransferAmount;\r\n        uint256 tFee;\r\n        uint256 tLiquidity;\r\n\r\n        uint256 rTransferAmount;\r\n        uint256 rAmount;\r\n        uint256 rFee;\r\n    }\r\n\r\n    function _finalizeTransfer(address from, address to, uint256 tAmount, bool takeFee) internal returns (bool) {\r\n\r\n        if (!_hasLiqBeenAdded) {\r\n                _checkLiquidityAdd(from, to);\r\n                if (!_hasLiqBeenAdded && _hasLimits(from, to)) {\r\n                    revert(\"Only owner can transfer at this time.\");\r\n                }\r\n        }\r\n        \r\n        ExtraValues memory values = _getValues(from, to, tAmount, takeFee);\r\n\r\n        if (balanceOf(from) >= tAmount) {\r\n            _rOwned[from] = _rOwned[from] - values.rAmount;\r\n            _rOwned[to] = _rOwned[to] + values.rTransferAmount;\r\n\r\n            if (_isExcluded[from] && !_isExcluded[to]) {\r\n                _tOwned[from] = _tOwned[from] - tAmount;\r\n            } else if (!_isExcluded[from] && _isExcluded[to]) {\r\n                _tOwned[to] = _tOwned[to] + values.tTransferAmount;\r\n            } else if (_isExcluded[from] && _isExcluded[to]) {\r\n                _tOwned[from] = _tOwned[from] - tAmount;\r\n                _tOwned[to] = _tOwned[to] + values.tTransferAmount;\r\n            }\r\n\r\n            if (values.tLiquidity > 0)\r\n                _takeLiquidity(from, values.tLiquidity);\r\n            if (values.rFee > 0 || values.tFee > 0)\r\n                _takeReflect(values.rFee, values.tFee);\r\n\r\n            emit Transfer(from, to, values.tTransferAmount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _getValues(address from, address to, uint256 tAmount, bool takeFee) internal returns (ExtraValues memory) {\r\n        ExtraValues memory values;\r\n        uint256 currentRate = _getRate(from, to);\r\n\r\n        values.rAmount = tAmount * currentRate;\r\n\r\n        if(takeFee) {\r\n            if (lpPairs[to]) {\r\n                _reflectFee = _sellReflectFee;\r\n                _liquidityFee = _sellLiquidityFee;\r\n                _marketingFee = _sellMarketingFee;\r\n            } else if (lpPairs[from]) {\r\n                _reflectFee = _buyReflectFee;\r\n                _liquidityFee = _buyLiquidityFee;\r\n                _marketingFee = _buyMarketingFee;\r\n            } else {\r\n                _reflectFee = _transferReflectFee;\r\n                _liquidityFee = _transferLiquidityFee;\r\n                _marketingFee = _transferMarketingFee;\r\n            }\r\n\r\n            values.tFee = (tAmount * _reflectFee) / masterTaxDivisor;\r\n            values.tLiquidity = (tAmount * (_liquidityFee + _marketingFee)) / masterTaxDivisor;\r\n            values.tTransferAmount = tAmount - (values.tFee + values.tLiquidity);\r\n\r\n            values.rFee = values.tFee * currentRate;\r\n        } else {\r\n            values.tFee = 0;\r\n            values.tLiquidity = 0;\r\n            values.tTransferAmount = tAmount;\r\n\r\n            values.rFee = 0;\r\n        }\r\n\r\n        values.rTransferAmount = values.rAmount - (values.rFee + (values.tLiquidity * currentRate));\r\n        return values;\r\n    }\r\n\r\n    function _getRate(address from, address to) internal returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getSupply(from, to);\r\n        return rSupply / tSupply;\r\n    }\r\n\r\n    function _getSupply() internal view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply - _rOwned[_excluded[i]];\r\n            tSupply = tSupply - _tOwned[_excluded[i]];\r\n        }\r\n        if (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n    \r\n    function _takeReflect(uint256 rFee, uint256 tFee) internal {\r\n        _rTotal = _rTotal - rFee;\r\n        _tFeeTotal = _tFeeTotal + tFee;\r\n    }\r\n\r\n    function recoverETH() external onlyOwner {\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n\r\n    function setNewRouter(address newRouter) external onlyOwner() {\r\n        IUniswapV2Router02 _newRouter = IUniswapV2Router02(newRouter);\r\n        address get_pair = IUniswapV2Factory(_newRouter.factory()).getPair(address(this), _newRouter.WETH());\r\n        if (get_pair == address(0)) {\r\n            lpPair = IUniswapV2Factory(_newRouter.factory()).createPair(address(this), _newRouter.WETH());\r\n        }\r\n        else {\r\n            lpPair = get_pair;\r\n        }\r\n        dexRouter = _newRouter;\r\n        _approve(address(this), newRouter, MAX);\r\n    }\r\n\r\n    function setLpPair(address pair, bool enabled) external onlyOwner {\r\n        if (enabled == false) {\r\n            lpPairs[pair] = false;\r\n        } else {\r\n            if (timeSinceLastPair != 0) {\r\n                require(block.timestamp - timeSinceLastPair > 1 weeks, \"Cannot set a new pair this week!\");\r\n            }\r\n            lpPairs[pair] = true;\r\n            timeSinceLastPair = block.timestamp;\r\n        }\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) internal lockTheSwap {\r\n        if (_liquidityRatio + _marketingRatio == 0)\r\n            return;\r\n        uint256 toLiquify = ((contractTokenBalance * _liquidityRatio) / (_liquidityRatio + _marketingRatio)) / 2;\r\n\r\n        uint256 toSwapForEth = contractTokenBalance - toLiquify;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = dexRouter.WETH();\r\n\r\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            toSwapForEth,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n\r\n        uint256 liquidityBalance = ((address(this).balance * _liquidityRatio) / (_liquidityRatio + _marketingRatio)) / 2;\r\n\r\n        if (toLiquify > 0) {\r\n            dexRouter.addLiquidityETH{value: liquidityBalance}(\r\n                address(this),\r\n                toLiquify,\r\n                0, \r\n                0, \r\n                DEAD,\r\n                block.timestamp\r\n            );\r\n            emit SwapAndLiquify(toLiquify, liquidityBalance, toLiquify);\r\n        }\r\n        if (contractTokenBalance - toLiquify > 0) {\r\n\r\n            uint256 OperationsFee = (address(this).balance);\r\n            uint256 marketFee = OperationsFee/(ValueDivisor)*(MarketShare);\r\n            uint256 devfeeshare = OperationsFee/(ValueDivisor)*(DevShare);\r\n            _marketWallet.transfer(marketFee);\r\n            _devWallet.transfer(devfeeshare);            \r\n\r\n        }\r\n    }\r\n\r\n    function updateSwapSettings(uint256 thresholdPercent, uint256 thresholdDivisor, uint256 amountPercent, uint256 amountDivisor) external onlyOwner {\r\n        swapThreshold = (_tTotal * thresholdPercent) / thresholdDivisor;\r\n        swapAmount = (_tTotal * amountPercent) / amountDivisor;\r\n    }\r\n\r\n    function updateMarketWalletNew(address payable newWallet) external onlyOwner {\r\n        require(_marketWallet != newWallet, \"Wallet already set!\");\r\n        _marketWallet = payable(newWallet);\r\n    }\r\n\r\n    function updateDevWalletNew(address payable newWallet) external onlyOwner {\r\n        require(_devWallet != newWallet, \"Wallet already set!\");\r\n        _devWallet = payable(newWallet);\r\n    }\r\n\r\n    function updateTaxBuy(uint256 reflect, uint256 liquidity, uint256 marketing) external onlyOwner {\r\n        require(reflect <= maxReflectFee\r\n                && liquidity <= maxLiquidityFee\r\n                && marketing <= maxMarketingFee\r\n                );\r\n        require(reflect + liquidity + marketing <= 4900);\r\n        _buyReflectFee = reflect;\r\n        _buyLiquidityFee = liquidity;\r\n        _buyMarketingFee = marketing;\r\n    }\r\n\r\n    function updateTaxSell(uint256 reflect, uint256 liquidity, uint256 marketing) external onlyOwner {\r\n        require(reflect <= maxReflectFee\r\n                && liquidity <= maxLiquidityFee\r\n                && marketing <= maxMarketingFee\r\n                );\r\n        require(reflect + liquidity + marketing <= 6900);\r\n        _sellReflectFee = reflect;\r\n        _sellLiquidityFee = liquidity;\r\n        _sellMarketingFee = marketing;\r\n    }\r\n\r\n    function updateTaxesTransfer(uint256 reflect, uint256 liquidity, uint256 marketing) external onlyOwner {\r\n        require(reflect <= maxReflectFee\r\n                && liquidity <= maxLiquidityFee\r\n                && marketing <= maxMarketingFee\r\n                );\r\n        require(reflect + liquidity + marketing <= 4900);\r\n        _transferReflectFee = reflect;\r\n        _transferLiquidityFee = liquidity;\r\n        _transferMarketingFee = marketing;\r\n    }\r\n\r\n    function updateShareValues(uint256 ms, uint256 ds, uint256 vd) external onlyOwner {\r\n        MarketShare = ms;\r\n        DevShare = ds;\r\n        ValueDivisor = vd;\r\n    }\r\n\r\n    function updateLiqandMarketRatios(uint256 liquidity, uint256 marketing) external onlyOwner {\r\n        _liquidityRatio = liquidity;\r\n        _marketingRatio = marketing;\r\n    }\r\n\r\n    function updateMaxTxPercent(uint256 percent, uint256 divisor) external onlyOwner {\r\n        uint256 check = (_tTotal * percent) / divisor;\r\n        require(check >= (_tTotal / 1000), \"Max Transaction amt must be above 0.1% of total supply.\");\r\n        _maxTxAmount = check;\r\n        maxTxAmountUI = (startingSupply * percent) / divisor;\r\n    }\r\n\r\n    function updateMaxWalletSize(uint256 percent, uint256 divisor) external onlyOwner {\r\n        uint256 check = (_tTotal * percent) / divisor;\r\n        require(check >= (_tTotal / 1000), \"Max Wallet amt must be above 0.1% of total supply.\");\r\n        _maxWalletSize = check;\r\n        maxWalletSizeUI = (startingSupply * percent) / divisor;\r\n    }\r\n\r\n    function updateSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n\r\n    function updateExcludedFromFee(address account, bool enabled) public onlyOwner {\r\n        _isExcludedFromFee[account] = enabled;\r\n    }\r\n\r\n    function updateExcludedFromReward(address account, bool enabled) public onlyOwner {\r\n        if (enabled == true) {\r\n            require(!_isExcluded[account], \"Account is already excluded.\");\r\n            if(_rOwned[account] > 0) {\r\n                _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n            }\r\n            _isExcluded[account] = true;\r\n            _excluded.push(account);\r\n        } else if (enabled == false) {\r\n            require(_isExcluded[account], \"Account is already included.\");\r\n            for (uint256 i = 0; i < _excluded.length; i++) {\r\n                if (_excluded[i] == account) {\r\n                    _excluded[i] = _excluded[_excluded.length - 1];\r\n                    _tOwned[account] = 0;\r\n                    _isExcluded[account] = false;\r\n                    _excluded.pop();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sniperAddress\",\"type\":\"address\"}],\"name\":\"SniperCaught\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DevShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MarketShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ValueDivisor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyReflectFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_hasLiqBeenAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_reflectFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_routerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellReflectFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferReflectFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmountUI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletSizeUI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setLpPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setNewRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateDevWalletNew\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"updateExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"updateExcludedFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"}],\"name\":\"updateLiqandMarketRatios\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateMarketWalletNew\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"updateMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"updateMaxWalletSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ms\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vd\",\"type\":\"uint256\"}],\"name\":\"updateShareValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"updateSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"thresholdPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountDivisor\",\"type\":\"uint256\"}],\"name\":\"updateSwapSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reflect\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"}],\"name\":\"updateTaxBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reflect\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"}],\"name\":\"updateTaxSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reflect\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"}],\"name\":\"updateTaxesTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EnrichX", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://53804edc46ce0399d8f48de4f6586bf7859b5ea550b85f0c3b1a6fc7af1b33b9"}