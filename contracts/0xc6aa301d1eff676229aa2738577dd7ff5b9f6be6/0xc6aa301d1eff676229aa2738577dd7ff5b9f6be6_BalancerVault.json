{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n *\r\n * [CAUTION]\r\n * ====\r\n * Avoid leaving a contract uninitialized.\r\n *\r\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\r\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\r\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * /// @custom:oz-upgrades-unsafe-allow constructor\r\n * constructor() initializer {}\r\n * ```\r\n * ====\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\r\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\r\n        // contract may have been reentered.\r\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\r\n     * {initializer} modifier, directly or indirectly.\r\n     */\r\n    modifier onlyInitializing() {\r\n        require(_initializing, \"Initializable: contract is not initializing\");\r\n        _;\r\n    }\r\n\r\n    function _isConstructor() private view returns (bool) {\r\n        return !AddressUpgradeable.isContract(address(this));\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __Context_init_unchained() internal onlyInitializing {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\r\n        __ERC20_init_unchained(name_, symbol_);\r\n    }\r\n\r\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = _allowances[owner][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[45] private __gap;\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20Upgradeable {\r\n    using AddressUpgradeable for address;\r\n\r\n    function safeTransfer(\r\n        IERC20Upgradeable token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20Upgradeable token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20Upgradeable token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20Upgradeable token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20Upgradeable token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = _allowances[owner][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\ninterface ILiquidityGaugeStrat {\r\n\tstruct Reward {\r\n\t\taddress token;\r\n\t\taddress distributor;\r\n\t\tuint256 period_finish;\r\n\t\tuint256 rate;\r\n\t\tuint256 last_update;\r\n\t\tuint256 integral;\r\n\t}\r\n\r\n\t// solhint-disable-next-line\r\n\tfunction deposit_reward_token(address _rewardToken, uint256 _amount) external;\r\n\r\n\t// solhint-disable-next-line\r\n\tfunction claim_rewards_for(address _user, address _recipient) external;\r\n\r\n\t// // solhint-disable-next-line\r\n\t// function claim_rewards_for(address _user) external;\r\n\r\n\t// solhint-disable-next-line\r\n\tfunction deposit(uint256 _value, address _addr) external;\r\n\r\n\t// solhint-disable-next-line\r\n\tfunction reward_tokens(uint256 _i) external view returns (address);\r\n\r\n\tfunction withdraw(\r\n\t\tuint256 _value,\r\n\t\taddress _addr,\r\n\t\tbool _claim_rewards\r\n\t) external;\r\n\r\n\t// solhint-disable-next-line\r\n\tfunction reward_data(address _tokenReward) external view returns (Reward memory);\r\n\r\n\tfunction balanceOf(address) external returns (uint256);\r\n\r\n\tfunction claimable_reward(address _user, address _reward_token) external view returns (uint256);\r\n\r\n\tfunction user_checkpoint(address _user) external returns (bool);\r\n\r\n\tfunction commit_transfer_ownership(address) external;\r\n\r\n\tfunction initialize(\r\n\t\taddress _staking_token,\r\n\t\taddress _admin,\r\n\t\taddress _SDT,\r\n\t\taddress _voting_escrow,\r\n\t\taddress _veBoost_proxy,\r\n\t\taddress _distributor,\r\n\t\taddress _vault,\r\n\t\tstring memory _symbol\r\n\t) external;\r\n\r\n\tfunction add_reward(address, address) external;\r\n\r\n\tfunction set_claimer(address) external;\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface ILocker {\r\n\tfunction createLock(uint256, uint256) external;\r\n\r\n\tfunction claimAllRewards(address[] calldata _tokens, address _recipient) external;\r\n\r\n\tfunction increaseAmount(uint256) external;\r\n\r\n\tfunction increaseUnlockTime(uint256) external;\r\n\r\n\tfunction release() external;\r\n\r\n\tfunction claimRewards(address,address) external;\r\n\r\n\tfunction claimFXSRewards(address) external;\r\n\r\n\tfunction execute(\r\n\t\taddress,\r\n\t\tuint256,\r\n\t\tbytes calldata\r\n\t) external returns (bool, bytes memory);\r\n\r\n\tfunction setGovernance(address) external;\r\n\r\n\tfunction voteGaugeWeight(address, uint256) external;\r\n\r\n\tfunction setAngleDepositor(address) external;\r\n\r\n\tfunction setFxsDepositor(address) external;\r\n}\r\n\r\ncontract BaseStrategy {\r\n\t/* ========== STATE VARIABLES ========== */\r\n\tILocker public locker;\r\n\taddress public governance;\r\n\taddress public rewardsReceiver;\r\n\taddress public veSDTFeeProxy;\r\n\taddress public vaultGaugeFactory;\r\n\tuint256 public constant BASE_FEE = 10_000;\r\n\tmapping(address => address) public gauges;\r\n\tmapping(address => bool) public vaults;\r\n\tmapping(address => uint256) public perfFee;\r\n\tmapping(address => address) public multiGauges;\r\n\tmapping(address => uint256) public accumulatorFee; // gauge -> fee\r\n\tmapping(address => uint256) public claimerRewardFee; // gauge -> fee\r\n\tmapping(address => uint256) public veSDTFee; // gauge -> fee\r\n\r\n\t/* ========== EVENTS ========== */\r\n\tevent Deposited(address _gauge, address _token, uint256 _amount);\r\n\tevent Withdrawn(address _gauge, address _token, uint256 _amount);\r\n\tevent Claimed(address _gauge, address _token, uint256 _amount);\r\n\tevent RewardReceiverSet(address _gauge, address _receiver);\r\n\tevent VaultToggled(address _vault, bool _newState);\r\n\tevent GaugeSet(address _gauge, address _token);\r\n\r\n\t/* ========== MODIFIERS ========== */\r\n\tmodifier onlyGovernance() {\r\n\t\trequire(msg.sender == governance, \"!governance\");\r\n\t\t_;\r\n\t}\r\n\tmodifier onlyApprovedVault() {\r\n\t\trequire(vaults[msg.sender], \"!approved vault\");\r\n\t\t_;\r\n\t}\r\n\tmodifier onlyGovernanceOrFactory() {\r\n\t\trequire(msg.sender == governance || msg.sender == vaultGaugeFactory, \"!governance && !factory\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/* ========== CONSTRUCTOR ========== */\r\n\tconstructor(\r\n\t\tILocker _locker,\r\n\t\taddress _governance,\r\n\t\taddress _receiver\r\n\t) {\r\n\t\tlocker = _locker;\r\n\t\tgovernance = _governance;\r\n\t\trewardsReceiver = _receiver;\r\n\t}\r\n\r\n\t/* ========== MUTATIVE FUNCTIONS ========== */\r\n\tfunction deposit(address _token, uint256 _amount) external virtual onlyApprovedVault {}\r\n\r\n\tfunction withdraw(address _token, uint256 _amount) external virtual onlyApprovedVault {}\r\n\r\n\tfunction claim(address _gauge) external virtual {}\r\n\r\n\tfunction toggleVault(address _vault) external virtual onlyGovernanceOrFactory {}\r\n\r\n\tfunction setGauge(address _token, address _gauge) external virtual onlyGovernanceOrFactory {}\r\n\r\n\tfunction setMultiGauge(address _gauge, address _multiGauge) external virtual onlyGovernanceOrFactory {}\r\n}\r\n\r\ninterface ILiquidityGauge {\r\n\tstruct Reward {\r\n\t\taddress token;\r\n\t\taddress distributor;\r\n\t\tuint256 period_finish;\r\n\t\tuint256 rate;\r\n\t\tuint256 last_update;\r\n\t\tuint256 integral;\r\n\t}\r\n\r\n\t// solhint-disable-next-line\r\n\tfunction deposit_reward_token(address _rewardToken, uint256 _amount) external;\r\n\r\n\t// solhint-disable-next-line\r\n\tfunction claim_rewards_for(address _user, address _recipient) external;\r\n\r\n\t// // solhint-disable-next-line\r\n\t// function claim_rewards_for(address _user) external;\r\n\r\n\t// solhint-disable-next-line\r\n\tfunction deposit(uint256 _value, address _addr) external;\r\n\r\n\t// solhint-disable-next-line\r\n\tfunction reward_tokens(uint256 _i) external view returns (address);\r\n\r\n\t// solhint-disable-next-line\r\n\tfunction reward_data(address _tokenReward) external view returns (Reward memory);\r\n\r\n\tfunction balanceOf(address) external returns (uint256);\r\n\r\n\tfunction claimable_reward(address _user, address _reward_token) external view returns (uint256);\r\n\r\n\tfunction claimable_tokens(address _user) external returns (uint256);\r\n\r\n\tfunction user_checkpoint(address _user) external returns (bool);\r\n\r\n\tfunction commit_transfer_ownership(address) external;\r\n\r\n\tfunction claim_rewards(address) external;\r\n}\r\n\r\ninterface ISDTDistributor {\r\n    function distribute(address gaugeAddr) external;\r\n}\r\n\r\n/// @title BaseAccumulator\r\n/// @notice A contract that defines the functions shared by all accumulators\r\n/// @author StakeDAO\r\ncontract BaseAccumulator {\r\n\tusing SafeERC20 for IERC20;\r\n\t/* ========== STATE VARIABLES ========== */\r\n\taddress public governance;\r\n\taddress public locker;\r\n\taddress public tokenReward;\r\n\taddress public gauge;\r\n\taddress public sdtDistributor;\r\n\tuint256 public claimerFee;\r\n\r\n\t/* ========== EVENTS ========== */\r\n\r\n\tevent SdtDistributorUpdated(address oldDistributor, address newDistributor);\r\n\tevent GaugeSet(address oldGauge, address newGauge);\r\n\tevent RewardNotified(address gauge, address tokenReward, uint256 amount);\r\n\tevent LockerSet(address oldLocker, address newLocker);\r\n\tevent GovernanceSet(address oldGov, address newGov);\r\n\tevent TokenRewardSet(address oldTr, address newTr);\r\n\tevent TokenDeposited(address token, uint256 amount);\r\n\tevent ERC20Rescued(address token, uint256 amount);\r\n\r\n\t/* ========== CONSTRUCTOR ========== */\r\n\tconstructor(address _tokenReward, address _gauge) {\r\n\t\ttokenReward = _tokenReward;\r\n\t\tgauge = _gauge;\r\n\t\tgovernance = msg.sender;\r\n\t}\r\n\r\n\t/* ========== MUTATIVE FUNCTIONS ========== */\r\n\r\n\t/// @notice Notify the reward using an extra token\r\n\t/// @param _tokenReward token address to notify\r\n\t/// @param _amount amount to notify\r\n\tfunction notifyExtraReward(address _tokenReward, uint256 _amount) external {\r\n\t\trequire(msg.sender == governance, \"!gov\");\r\n\t\t_notifyReward(_tokenReward, _amount);\r\n\t\t_distributeSDT();\r\n\t}\r\n\r\n\t/// @notice Notify the reward using all balance of extra token\r\n\t/// @param _tokenReward token address to notify\r\n\tfunction notifyAllExtraReward(address _tokenReward) external {\r\n\t\trequire(msg.sender == governance, \"!gov\");\r\n\t\tuint256 amount = IERC20(_tokenReward).balanceOf(address(this));\r\n\t\t_notifyReward(_tokenReward, amount);\r\n\t\t_distributeSDT();\r\n\t}\r\n\r\n\tfunction notifyExtraReward(address[] calldata _tokens, uint256[] calldata amounts) external {\r\n\t\trequire(msg.sender == governance, \"!gov\");\r\n\t\t_notifyExtraReward(_tokens, amounts);\r\n\t\t_distributeSDT();\r\n\t}\r\n\r\n\tfunction _notifyExtraReward(address[] memory _tokens, uint256[] memory amounts) internal {\r\n\t\tuint256 length = _tokens.length;\r\n\t\tfor (uint256 i; i < length; ++i) {\r\n\t\t\t_notifyReward(_tokens[i], amounts[i]);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction notifyAllExtraReward(address[] calldata _tokens) external {\r\n\t\trequire(msg.sender == governance, \"!gov\");\r\n\t\t_notifyAllExtraReward(_tokens);\r\n\t\t_distributeSDT();\r\n\t}\r\n\r\n\tfunction _notifyAllExtraReward(address[] memory _tokens) internal {\r\n\t\tuint256 amount;\r\n\t\tuint256 length = _tokens.length;\r\n\t\tfor (uint256 i; i < length; ++i) {\r\n\t\t\tamount = IERC20(_tokens[i]).balanceOf(address(this));\r\n\t\t\t_notifyReward(_tokens[i], amount);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _distributeSDT() internal {\r\n\t\tif (sdtDistributor != address(0)) {\r\n\t\t\tISDTDistributor(sdtDistributor).distribute(gauge);\r\n\t\t}\r\n\t}\r\n\r\n\t/// @notice Notify the new reward to the LGV4\r\n\t/// @param _tokenReward token to notify\r\n\t/// @param _amount amount to notify\r\n\tfunction _notifyReward(address _tokenReward, uint256 _amount) internal {\r\n\t\trequire(gauge != address(0), \"gauge not set\");\r\n\t\tif (_amount == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tuint256 balanceBefore = IERC20(_tokenReward).balanceOf(address(this));\r\n\t\trequire(balanceBefore >= _amount, \"amount not enough\");\r\n\t\tif (ILiquidityGauge(gauge).reward_data(_tokenReward).distributor != address(0)) {\r\n\t\t\tuint256 claimerReward = (_amount * claimerFee) / 10000;\r\n\t\t\tIERC20(_tokenReward).transfer(msg.sender, claimerReward);\r\n\t\t\t_amount -= claimerReward;\r\n\t\t\tIERC20(_tokenReward).approve(gauge, _amount);\r\n\t\t\tILiquidityGauge(gauge).deposit_reward_token(_tokenReward, _amount);\r\n\r\n\t\t\tuint256 balanceAfter = IERC20(_tokenReward).balanceOf(address(this));\r\n\r\n\t\t\trequire(balanceBefore - balanceAfter == _amount, \"wrong amount notified\");\r\n\r\n\t\t\temit RewardNotified(gauge, _tokenReward, _amount);\r\n\t\t}\r\n\t}\r\n\r\n\t/// @notice Deposit token into the accumulator\r\n\t/// @param _token token to deposit\r\n\t/// @param _amount amount to deposit\r\n\tfunction depositToken(address _token, uint256 _amount) external {\r\n\t\trequire(_amount > 0, \"set an amount > 0\");\r\n\t\tIERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\r\n\t\temit TokenDeposited(_token, _amount);\r\n\t}\r\n\r\n\t/// @notice Sets gauge for the accumulator which will receive and distribute the rewards\r\n\t/// @dev Can be called only by the governance\r\n\t/// @param _gauge gauge address\r\n\tfunction setGauge(address _gauge) external {\r\n\t\trequire(msg.sender == governance, \"!gov\");\r\n\t\trequire(_gauge != address(0), \"can't be zero address\");\r\n\t\temit GaugeSet(gauge, _gauge);\r\n\t\tgauge = _gauge;\r\n\t}\r\n\r\n\t/// @notice Sets SdtDistributor to distribute from the Accumulator SDT Rewards to Gauge.\r\n\t/// @dev Can be called only by the governance\r\n\t/// @param _sdtDistributor gauge address\r\n\tfunction setSdtDistributor(address _sdtDistributor) external {\r\n\t\trequire(msg.sender == governance, \"!gov\");\r\n\t\trequire(_sdtDistributor != address(0), \"can't be zero address\");\r\n\r\n\t\temit SdtDistributorUpdated(sdtDistributor, _sdtDistributor);\r\n\t\tsdtDistributor = _sdtDistributor;\r\n\t}\r\n\r\n\t/// @notice Allows the governance to set the new governance\r\n\t/// @dev Can be called only by the governance\r\n\t/// @param _governance governance address\r\n\tfunction setGovernance(address _governance) external {\r\n\t\trequire(msg.sender == governance, \"!gov\");\r\n\t\trequire(_governance != address(0), \"can't be zero address\");\r\n\t\temit GovernanceSet(governance, _governance);\r\n\t\tgovernance = _governance;\r\n\t}\r\n\r\n\t/// @notice Allows the governance to set the locker\r\n\t/// @dev Can be called only by the governance\r\n\t/// @param _locker locker address\r\n\tfunction setLocker(address _locker) external {\r\n\t\trequire(msg.sender == governance, \"!gov\");\r\n\t\trequire(_locker != address(0), \"can't be zero address\");\r\n\t\temit LockerSet(locker, _locker);\r\n\t\tlocker = _locker;\r\n\t}\r\n\r\n\t/// @notice Allows the governance to set the token reward\r\n\t/// @dev Can be called only by the governance\r\n\t/// @param _tokenReward token reward address\r\n\tfunction setTokenReward(address _tokenReward) external {\r\n\t\trequire(msg.sender == governance, \"!gov\");\r\n\t\trequire(_tokenReward != address(0), \"can't be zero address\");\r\n\t\temit TokenRewardSet(tokenReward, _tokenReward);\r\n\t\ttokenReward = _tokenReward;\r\n\t}\r\n\r\n\tfunction setClaimerFee(uint256 _claimerFee) external {\r\n\t\trequire(msg.sender == governance, \"!gov\");\r\n\t\tclaimerFee = _claimerFee;\r\n\t}\r\n\r\n\t/// @notice A function that rescue any ERC20 token\r\n\t/// @param _token token address\r\n\t/// @param _amount amount to rescue\r\n\t/// @param _recipient address to send token rescued\r\n\tfunction rescueERC20(\r\n\t\taddress _token,\r\n\t\tuint256 _amount,\r\n\t\taddress _recipient\r\n\t) external {\r\n\t\trequire(msg.sender == governance, \"!gov\");\r\n\t\trequire(_amount > 0, \"set an amount > 0\");\r\n\t\trequire(_recipient != address(0), \"can't be zero address\");\r\n\t\tIERC20(_token).safeTransfer(_recipient, _amount);\r\n\t\temit ERC20Rescued(_token, _amount);\r\n\t}\r\n}\r\n\r\n/// @title A contract that accumulates rewards and notifies them to the LGV4\r\n/// @author StakeDAO\r\ncontract BalancerAccumulator is BaseAccumulator {\r\n\taddress[] public tokenData;\r\n\r\n\t/* ========== CONSTRUCTOR ========== */\r\n\tconstructor(address _tokenReward, address _gauge) BaseAccumulator(_tokenReward, _gauge) {}\r\n\r\n\t/* ========== MUTATIVE FUNCTIONS ========== */\r\n\t/// @notice Claims rewards from the locker and notifies it to the LGV4\r\n\t/// @param _amount amount to notify\r\n\tfunction claimAndNotify(uint256 _amount) external {\r\n\t\trequire(locker != address(0), \"locker not set\");\r\n\t\tILocker(locker).claimRewards(tokenReward, address(this));\r\n\t\t_notifyReward(tokenReward, _amount);\r\n\t\t_distributeSDT();\r\n\t}\r\n\r\n\t/// @notice Claims rewards from the locker and notify all to the LGV4\r\n\tfunction claimAndNotifyAll() external {\r\n\t\trequire(locker != address(0), \"locker not set\");\r\n\t\tILocker(locker).claimRewards(tokenReward, address(this));\r\n\t\tuint256 amount = IERC20(tokenReward).balanceOf(address(this));\r\n\t\t_notifyReward(tokenReward, amount);\r\n\t\t_distributeSDT();\r\n\t}\r\n\r\n\t/// @notice Claims rewards from the locker and notify all to the LGV4\r\n\tfunction claimAllRewardsAndNotify() external {\r\n\t\trequire(locker != address(0), \"locker not set\");\r\n\t\tILocker(locker).claimAllRewards(tokenData, address(this));\r\n\t\t_notifyAllExtraReward(tokenData);\r\n\t}\r\n\r\n\tfunction addReward(address token) external {\r\n\t\trequire(msg.sender == governance, \"!gov\");\r\n\t\ttokenData.push(token);\r\n\t}\r\n\r\n\tfunction setTokenRewards(address[] calldata tokens) external {\r\n\t\trequire(msg.sender == governance, \"!gov\");\r\n\t\ttokenData = tokens;\r\n\t}\r\n}\r\n\r\ninterface IMultiRewards {\r\n\tfunction balanceOf(address) external returns (uint256);\r\n\r\n\tfunction stakeFor(address, uint256) external;\r\n\r\n\tfunction withdrawFor(address, uint256) external;\r\n\r\n\tfunction notifyRewardAmount(address, uint256) external;\r\n\r\n\tfunction mintFor(address recipient, uint256 amount) external;\r\n\r\n\tfunction burnFrom(address _from, uint256 _amount) external;\r\n\r\n\tfunction stakeOf(address account) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuardUpgradeable is Initializable {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    function __ReentrancyGuard_init() internal onlyInitializing {\r\n        __ReentrancyGuard_init_unchained();\r\n    }\r\n\r\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[49] private __gap;\r\n}\r\n\r\ninterface IGaugeController {\r\n\t//solhint-disable-next-line\r\n\tfunction gauge_types(address addr) external view returns (int128);\r\n\r\n\t//solhint-disable-next-line\r\n\tfunction gauge_relative_weight_write(address addr, uint256 timestamp) external returns (uint256);\r\n\r\n\t//solhint-disable-next-line\r\n\tfunction gauge_relative_weight(address addr) external view returns (uint256);\r\n\r\n\t//solhint-disable-next-line\r\n\tfunction gauge_relative_weight(address addr, uint256 timestamp) external view returns (uint256);\r\n\r\n\t//solhint-disable-next-line\r\n\tfunction get_total_weight() external view returns (uint256);\r\n\r\n\t//solhint-disable-next-line\r\n\tfunction get_gauge_weight(address addr) external view returns (uint256);\r\n\r\n\tfunction vote_for_gauge_weights(address, uint256) external;\r\n}\r\n\r\ninterface ISdtMiddlemanGauge {\r\n\tfunction notifyReward(address gauge, uint256 amount) external;\r\n}\r\n\r\n/// @title IStakingRewardsFunctions\r\n/// @author StakeDAO Core Team\r\n/// @notice Interface for the staking rewards contract that interact with the `RewardsDistributor` contract\r\ninterface IStakingRewardsFunctions {\r\n    function notifyRewardAmount(uint256 reward) external;\r\n\r\n    function recoverERC20(\r\n        address tokenAddress,\r\n        address to,\r\n        uint256 tokenAmount\r\n    ) external;\r\n\r\n    function setNewRewardsDistribution(address newRewardsDistribution) external;\r\n}\r\n\r\n/// @title IStakingRewards\r\n/// @author StakeDAO Core Team\r\n/// @notice Previous interface with additionnal getters for public variables\r\ninterface IStakingRewards is IStakingRewardsFunctions {\r\n    function rewardToken() external view returns (IERC20);\r\n}\r\n\r\ninterface IMasterchef {\r\n\tfunction deposit(uint256, uint256) external;\r\n\r\n\tfunction withdraw(uint256, uint256) external;\r\n\r\n\tfunction userInfo(uint256, address) external view returns (uint256, uint256);\r\n\r\n\tfunction poolInfo(uint256)\r\n\t\texternal\r\n\t\treturns (\r\n\t\t\taddress,\r\n\t\t\tuint256,\r\n\t\t\tuint256,\r\n\t\t\tuint256\r\n\t\t);\r\n\r\n\tfunction totalAllocPoint() external view returns (uint256);\r\n\r\n\tfunction sdtPerBlock() external view returns (uint256);\r\n\r\n\tfunction pendingSdt(uint256, address) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract MasterchefMasterToken is ERC20, Ownable {\r\n\tconstructor() ERC20(\"Masterchef Master Token\", \"MMT\") {\r\n\t\t_mint(msg.sender, 1e18);\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary StringsUpgradeable {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n/// @title IAccessControl\r\n/// @author Forked from OpenZeppelin\r\n/// @notice Interface for `AccessControl` contracts\r\ninterface IAccessControl {\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n/**\r\n * @dev This contract is fully forked from OpenZeppelin `AccessControlUpgradeable`.\r\n * The only difference is the removal of the ERC165 implementation as it's not\r\n * needed in Angle.\r\n *\r\n * Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControlUpgradeable is Initializable, IAccessControl {\r\n    function __AccessControl_init() internal initializer {\r\n        __AccessControl_init_unchained();\r\n    }\r\n\r\n    function __AccessControl_init_unchained() internal initializer {}\r\n\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role, msg.sender);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"AccessControl: account \",\r\n                        StringsUpgradeable.toHexString(uint160(account), 20),\r\n                        \" is missing role \",\r\n                        StringsUpgradeable.toHexString(uint256(role), 32)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) external override {\r\n        require(account == msg.sender, \"71\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\r\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\r\n        _roles[role].adminRole = adminRole;\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) internal {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, msg.sender);\r\n        }\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) internal {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, msg.sender);\r\n        }\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n/// @title SdtDistributorEvents\r\n/// @author StakeDAO Core Team\r\n/// @notice All the events used in `SdtDistributor` contract\r\n abstract contract SdtDistributorEvents {\r\n\tevent DelegateGaugeUpdated(address indexed _gaugeAddr, address indexed _delegateGauge);\r\n\tevent DistributionsToggled(bool _distributionsOn);\r\n\tevent GaugeControllerUpdated(address indexed _controller);\r\n\tevent GaugeToggled(address indexed gaugeAddr, bool newStatus);\r\n\tevent InterfaceKnownToggled(address indexed _delegateGauge, bool _isInterfaceKnown);\r\n\tevent RateUpdated(uint256 _newRate);\r\n\tevent Recovered(address indexed tokenAddress, address indexed to, uint256 amount);\r\n\tevent RewardDistributed(address indexed gaugeAddr, uint256 sdtDistributed, uint256 lastMasterchefPull);\r\n\tevent UpdateMiningParameters(uint256 time, uint256 rate, uint256 supply);\r\n}\r\n\r\n/// @title SdtDistributorV2\r\n/// @notice Earn from Masterchef SDT and distribute it to gauges\r\ncontract SdtDistributorV2 is ReentrancyGuardUpgradeable, AccessControlUpgradeable, SdtDistributorEvents {\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\t////////////////////////////////////////////////////////////////\r\n\t/// --- CONSTANTS\r\n\t///////////////////////////////////////////////////////////////\r\n\r\n\t/// @notice Accounting\r\n\tuint256 public constant BASE_UNIT = 10_000;\r\n\r\n\t/// @notice Address of the SDT token given as a reward.\r\n\tIERC20 public constant rewardToken = IERC20(0x73968b9a57c6E53d41345FD57a6E6ae27d6CDB2F);\r\n\r\n\t/// @notice Address of the masterchef.\r\n\tIMasterchef public constant masterchef = IMasterchef(0xfEA5E213bbD81A8a94D0E1eDB09dBD7CEab61e1c);\r\n\r\n\t/// @notice Role for governors only.\r\n\tbytes32 public constant GOVERNOR_ROLE = keccak256(\"GOVERNOR_ROLE\");\r\n\t/// @notice Role for the guardian\r\n\tbytes32 public constant GUARDIAN_ROLE = keccak256(\"GUARDIAN_ROLE\");\r\n\r\n\t////////////////////////////////////////////////////////////////\r\n\t/// --- STORAGE SLOTS\r\n\t///////////////////////////////////////////////////////////////\r\n\r\n\t/// @notice Time between SDT Harvest.\r\n\tuint256 public timePeriod;\r\n\r\n\t/// @notice Address of the token that will be deposited in masterchef.\r\n\tIERC20 public masterchefToken;\r\n\r\n\t/// @notice Address of the `GaugeController` contract.\r\n\tIGaugeController public controller;\r\n\r\n\t/// @notice Address responsible for pulling rewards of type >= 2 gauges and distributing it to the\r\n\t/// associated contracts if there is not already an address delegated for this specific contract.\r\n\taddress public delegateGauge;\r\n\r\n\t/// @notice Whether SDT distribution through this contract is on or no.\r\n\tbool public distributionsOn;\r\n\r\n\t/// @notice Maps the address of a type >= 2 gauge to a delegate address responsible\r\n\t/// for giving rewards to the actual gauge.\r\n\tmapping(address => address) public delegateGauges;\r\n\r\n\t/// @notice Maps the address of a gauge to whether it was killed or not\r\n\t/// A gauge killed in this contract cannot receive any rewards.\r\n\tmapping(address => bool) public killedGauges;\r\n\r\n\t/// @notice Maps the address of a gauge delegate to whether this delegate supports the `notifyReward` interface\r\n\t/// and is therefore built for automation.\r\n\tmapping(address => bool) public isInterfaceKnown;\r\n\r\n\t/// @notice Masterchef PID\r\n\tuint256 public masterchefPID;\r\n\r\n\t/// @notice Timestamp of the last pull from masterchef.\r\n\tuint256 public lastMasterchefPull;\r\n\r\n\t/// @notice Maps the timestamp of pull action to the amount of SDT that pulled.\r\n\tmapping(uint256 => uint256) public pulls; // day => SDT amount\r\n\r\n\t/// @notice Maps the timestamp of last pull to the gauge addresses then keeps the data if particular gauge paid in the last pull.\r\n\tmapping(uint256 => mapping(address => bool)) public isGaugePaid;\r\n\r\n\t/// @notice Incentive for caller.\r\n\tuint256 public claimerFee;\r\n\r\n\t/// @notice Number of days to go through for past distributing.\r\n\tuint256 public lookPastDays;\r\n\r\n\t////////////////////////////////////////////////////////////////\r\n\t/// --- INITIALIZATION LOGIC\r\n\t///////////////////////////////////////////////////////////////\r\n\r\n\t/// @notice Initialize function\r\n\t/// @param _controller gauge controller to manage votes\r\n\t/// @param _governor governor address\r\n\t/// @param _guardian guardian address\r\n\t/// @param _delegateGauge delegate gauge address\r\n\tfunction initialize(\r\n\t\taddress _controller,\r\n\t\taddress _governor,\r\n\t\taddress _guardian,\r\n\t\taddress _delegateGauge\r\n\t) external initializer {\r\n\t\trequire(_controller != address(0) && _guardian != address(0) && _governor != address(0), \"0\");\r\n\r\n\t\tcontroller = IGaugeController(_controller);\r\n\t\tdelegateGauge = _delegateGauge;\r\n\r\n\t\tmasterchefToken = IERC20(address(new MasterchefMasterToken()));\r\n\t\tdistributionsOn = false;\r\n\r\n\t\ttimePeriod = 3600 * 24; // One day in seconds\r\n\t\tlookPastDays = 45; // for past 45 days check\r\n\r\n\t\t_setRoleAdmin(GOVERNOR_ROLE, GOVERNOR_ROLE);\r\n\t\t_setRoleAdmin(GUARDIAN_ROLE, GOVERNOR_ROLE);\r\n\r\n\t\t_setupRole(GUARDIAN_ROLE, _guardian);\r\n\t\t_setupRole(GOVERNOR_ROLE, _governor);\r\n\t\t_setupRole(GUARDIAN_ROLE, _governor);\r\n\t}\r\n\r\n\t/// @custom:oz-upgrades-unsafe-allow constructor\r\n\tconstructor() initializer {}\r\n\r\n\t/// @notice Initialize the masterchef depositing the master token\r\n\t/// @param _pid pool id to deposit the token\r\n\tfunction initializeMasterchef(uint256 _pid) external onlyRole(GOVERNOR_ROLE) {\r\n\t\tmasterchefPID = _pid;\r\n\t\tmasterchefToken.approve(address(masterchef), 1e18);\r\n\t\tmasterchef.deposit(_pid, 1e18);\r\n\t}\r\n\r\n\t////////////////////////////////////////////////////////////////\r\n\t/// --- DISTRIBUTION LOGIC\r\n\t///////////////////////////////////////////////////////////////\r\n\r\n\t/// @notice Distribute SDT to Gauges\r\n\t/// @param gaugeAddr Address of the gauge to distribute.\r\n\tfunction distribute(address gaugeAddr) external nonReentrant {\r\n\t\t_distribute(gaugeAddr);\r\n\t}\r\n\r\n\t/// @notice Distribute SDT to Multiple Gauges\r\n\t/// @param gaugeAddr Array of addresses of the gauge to distribute.\r\n\tfunction distributeMulti(address[] calldata gaugeAddr) public nonReentrant {\r\n\t\tuint256 length = gaugeAddr.length;\r\n\t\tfor (uint256 i; i < length; i++) {\r\n\t\t\t_distribute(gaugeAddr[i]);\r\n\t\t}\r\n\t}\r\n\r\n\t/// @notice Internal implementation of distribute logic.\r\n\t/// @param gaugeAddr Address of the gauge to distribute rewards to\r\n\tfunction _distribute(address gaugeAddr) internal {\r\n\t\trequire(distributionsOn, \"not allowed\");\r\n\t\t(bool success, bytes memory result) = address(controller).call(\r\n\t\t\tabi.encodeWithSignature(\"gauge_types(address)\", gaugeAddr)\r\n\t\t);\r\n\t\tif (!success || killedGauges[gaugeAddr]) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tint128 gaugeType = abi.decode(result, (int128));\r\n\r\n\t\t// Rounded to beginning of the day -> 00:00 UTC\r\n\t\tuint256 roundedTimestamp = (block.timestamp / 1 days) * 1 days;\r\n\r\n\t\tuint256 totalDistribute;\r\n\r\n\t\tif (block.timestamp > lastMasterchefPull + timePeriod) {\r\n\t\t\tuint256 sdtBefore = rewardToken.balanceOf(address(this));\r\n\t\t\t_pullSDT();\r\n\t\t\tpulls[roundedTimestamp] = rewardToken.balanceOf(address(this)) - sdtBefore;\r\n\t\t\tlastMasterchefPull = roundedTimestamp;\r\n\t\t}\r\n\t\t// check past n days\r\n\t\tfor (uint256 i; i < lookPastDays; i++) {\r\n\t\t\tuint256 currentTimestamp = roundedTimestamp - (i * 86_400);\r\n\r\n\t\t\tif (pulls[currentTimestamp] > 0) {\r\n\t\t\t\tbool isPaid = isGaugePaid[currentTimestamp][gaugeAddr];\r\n\t\t\t\tif (isPaid) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Retrieve the amount pulled from Masterchef at the given timestamp.\r\n\t\t\t\tuint256 sdtBalance = pulls[currentTimestamp];\r\n\t\t\t\tuint256 gaugeRelativeWeight;\r\n\r\n\t\t\t\tif (i == 0) {\r\n\t\t\t\t\t// Makes sure the weight is checkpointed. Also returns the weight.\r\n\t\t\t\t\tgaugeRelativeWeight = controller.gauge_relative_weight_write(gaugeAddr, currentTimestamp);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tgaugeRelativeWeight = controller.gauge_relative_weight(gaugeAddr, currentTimestamp);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tuint256 sdtDistributed = (sdtBalance * gaugeRelativeWeight) / 1e18;\r\n\t\t\t\ttotalDistribute += sdtDistributed;\r\n\t\t\t\tisGaugePaid[currentTimestamp][gaugeAddr] = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (totalDistribute > 0) {\r\n\t\t\tif (gaugeType == 1) {\r\n\t\t\t\trewardToken.safeTransfer(gaugeAddr, totalDistribute);\r\n\t\t\t\tIStakingRewards(gaugeAddr).notifyRewardAmount(totalDistribute);\r\n\t\t\t} else if (gaugeType >= 2) {\r\n\t\t\t\t// If it is defined, we use the specific delegate attached to the gauge\r\n\t\t\t\taddress delegate = delegateGauges[gaugeAddr];\r\n\t\t\t\tif (delegate == address(0)) {\r\n\t\t\t\t\t// If not, we check if a delegate common to all gauges with type >= 2 can be used\r\n\t\t\t\t\tdelegate = delegateGauge;\r\n\t\t\t\t}\r\n\t\t\t\tif (delegate != address(0)) {\r\n\t\t\t\t\t// In the case where the gauge has a delegate (specific or not), then rewards are transferred to this gauge\r\n\t\t\t\t\trewardToken.safeTransfer(delegate, totalDistribute);\r\n\t\t\t\t\t// If this delegate supports a specific interface, then rewards sent are notified through this\r\n\t\t\t\t\t// interface\r\n\t\t\t\t\tif (isInterfaceKnown[delegate]) {\r\n\t\t\t\t\t\tISdtMiddlemanGauge(delegate).notifyReward(gaugeAddr, totalDistribute);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\trewardToken.safeTransfer(gaugeAddr, totalDistribute);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tILiquidityGauge(gaugeAddr).deposit_reward_token(address(rewardToken), totalDistribute);\r\n\t\t\t}\r\n\r\n\t\t\temit RewardDistributed(gaugeAddr, totalDistribute, lastMasterchefPull);\r\n\t\t}\r\n\t}\r\n\r\n\t/// @notice Internal function to pull SDT from the MasterChef\r\n\tfunction _pullSDT() internal {\r\n\t\tmasterchef.withdraw(masterchefPID, 0);\r\n\t}\r\n\r\n\t////////////////////////////////////////////////////////////////\r\n\t/// --- RESTRICTIVE FUNCTIONS\r\n\t///////////////////////////////////////////////////////////////\r\n\r\n\t/// @notice Sets the distribution state (on/off)\r\n\t/// @param _state new distribution state\r\n\tfunction setDistribution(bool _state) external onlyRole(GOVERNOR_ROLE) {\r\n\t\tdistributionsOn = _state;\r\n\t}\r\n\r\n\t/// @notice Sets a new gauge controller\r\n\t/// @param _controller Address of the new gauge controller\r\n\tfunction setGaugeController(address _controller) external onlyRole(GOVERNOR_ROLE) {\r\n\t\trequire(_controller != address(0), \"0\");\r\n\t\tcontroller = IGaugeController(_controller);\r\n\t\temit GaugeControllerUpdated(_controller);\r\n\t}\r\n\r\n\t/// @notice Sets a new delegate gauge for pulling rewards of a type >= 2 gauges or of all type >= 2 gauges\r\n\t/// @param gaugeAddr Gauge to change the delegate of\r\n\t/// @param _delegateGauge Address of the new gauge delegate related to `gaugeAddr`\r\n\t/// @param toggleInterface Whether we should toggle the fact that the `_delegateGauge` is built for automation or not\r\n\t/// @dev This function can be used to remove delegating or introduce the pulling of rewards to a given address\r\n\t/// @dev If `gaugeAddr` is the zero address, this function updates the delegate gauge common to all gauges with type >= 2\r\n\t/// @dev The `toggleInterface` parameter has been added for convenience to save one transaction when adding a gauge delegate\r\n\t/// which supports the `notifyReward` interface\r\n\tfunction setDelegateGauge(\r\n\t\taddress gaugeAddr,\r\n\t\taddress _delegateGauge,\r\n\t\tbool toggleInterface\r\n\t) external onlyRole(GOVERNOR_ROLE) {\r\n\t\tif (gaugeAddr != address(0)) {\r\n\t\t\tdelegateGauges[gaugeAddr] = _delegateGauge;\r\n\t\t} else {\r\n\t\t\tdelegateGauge = _delegateGauge;\r\n\t\t}\r\n\t\temit DelegateGaugeUpdated(gaugeAddr, _delegateGauge);\r\n\r\n\t\tif (toggleInterface) {\r\n\t\t\t_toggleInterfaceKnown(_delegateGauge);\r\n\t\t}\r\n\t}\r\n\r\n\t/// @notice Toggles the status of a gauge to either killed or unkilled\r\n\t/// @param gaugeAddr Gauge to toggle the status of\r\n\t/// @dev It is impossible to kill a gauge in the `GaugeController` contract, for this reason killing of gauges\r\n\t/// takes place in the `SdtDistributor` contract\r\n\t/// @dev This means that people could vote for a gauge in the gauge controller contract but that rewards are not going\r\n\t/// to be distributed to it in the end: people would need to remove their weights on the gauge killed to end the diminution\r\n\t/// in rewards\r\n\t/// @dev In the case of a gauge being killed, this function resets the timestamps at which this gauge has been approved and\r\n\t/// disapproves the gauge to spend the token\r\n\t/// @dev It should be cautiously called by governance as it could result in less SDT overall rewards than initially planned\r\n\t/// if people do not remove their voting weights to the killed gauge\r\n\tfunction toggleGauge(address gaugeAddr) external onlyRole(GOVERNOR_ROLE) {\r\n\t\tbool gaugeKilledMem = killedGauges[gaugeAddr];\r\n\t\tif (!gaugeKilledMem) {\r\n\t\t\trewardToken.safeApprove(gaugeAddr, 0);\r\n\t\t}\r\n\t\tkilledGauges[gaugeAddr] = !gaugeKilledMem;\r\n\t\temit GaugeToggled(gaugeAddr, !gaugeKilledMem);\r\n\t}\r\n\r\n\t/// @notice Notifies that the interface of a gauge delegate is known or has changed\r\n\t/// @param _delegateGauge Address of the gauge to change\r\n\t/// @dev Gauge delegates that are built for automation should be toggled\r\n\tfunction toggleInterfaceKnown(address _delegateGauge) external onlyRole(GUARDIAN_ROLE) {\r\n\t\t_toggleInterfaceKnown(_delegateGauge);\r\n\t}\r\n\r\n\t/// @notice Toggles the fact that a gauge delegate can be used for automation or not and therefore supports\r\n\t/// the `notifyReward` interface\r\n\t/// @param _delegateGauge Address of the gauge to change\r\n\tfunction _toggleInterfaceKnown(address _delegateGauge) internal {\r\n\t\tbool isInterfaceKnownMem = isInterfaceKnown[_delegateGauge];\r\n\t\tisInterfaceKnown[_delegateGauge] = !isInterfaceKnownMem;\r\n\t\temit InterfaceKnownToggled(_delegateGauge, !isInterfaceKnownMem);\r\n\t}\r\n\r\n\t/// @notice Gives max approvement to the gauge\r\n\t/// @param gaugeAddr Address of the gauge\r\n\tfunction approveGauge(address gaugeAddr) external onlyRole(GOVERNOR_ROLE) {\r\n\t\trewardToken.safeApprove(gaugeAddr, type(uint256).max);\r\n\t}\r\n\r\n\t/// @notice Set the time period to pull SDT from Masterchef\r\n\t/// @param _timePeriod new timePeriod value in seconds\r\n\tfunction setTimePeriod(uint256 _timePeriod) external onlyRole(GOVERNOR_ROLE) {\r\n\t\trequire(_timePeriod >= 1 days, \"TOO_LOW\");\r\n\t\ttimePeriod = _timePeriod;\r\n\t}\r\n\r\n\tfunction setClaimerFee(uint256 _newFee) external onlyRole(GOVERNOR_ROLE) {\r\n\t\trequire(_newFee <= BASE_UNIT, \"TOO_HIGH\");\r\n\t\tclaimerFee = _newFee;\r\n\t}\r\n\r\n\t/// @notice Set the how many days we should look back for reward distribution\r\n\t/// @param _newLookPastDays new value for how many days we should look back\r\n\tfunction setLookPastDays(uint256 _newLookPastDays) external onlyRole(GOVERNOR_ROLE) {\r\n\t\tlookPastDays = _newLookPastDays;\r\n\t}\r\n\r\n\t/// @notice Withdraws ERC20 tokens that could accrue on this contract\r\n\t/// @param tokenAddress Address of the ERC20 token to withdraw\r\n\t/// @param to Address to transfer to\r\n\t/// @param amount Amount to transfer\r\n\t/// @dev Added to support recovering LP Rewards and other mistaken tokens\r\n\t/// from other systems to be distributed to holders\r\n\t/// @dev This function could also be used to recover SDT tokens in case the rate got smaller\r\n\tfunction recoverERC20(\r\n\t\taddress tokenAddress,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t) external onlyRole(GOVERNOR_ROLE) {\r\n\t\tIERC20(tokenAddress).safeTransfer(to, amount);\r\n\t\temit Recovered(tokenAddress, to, amount);\r\n\t}\r\n}\r\n\r\ncontract BalancerStrategy is BaseStrategy {\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\tBalancerAccumulator public accumulator;\r\n\taddress public sdtDistributor;\r\n\taddress public constant BAL_MINTER = 0x239e55F427D44C3cc793f49bFB507ebe76638a2b;\r\n\taddress public constant BAL = 0xba100000625a3754423978a60c9317c58a424e3D;\r\n\r\n\tstruct ClaimerReward {\r\n\t\taddress rewardToken;\r\n\t\tuint256 amount;\r\n\t}\r\n\tenum MANAGEFEE {\r\n\t\tPERFFEE,\r\n\t\tVESDTFEE,\r\n\t\tACCUMULATORFEE,\r\n\t\tCLAIMERREWARD\r\n\t}\r\n\r\n\t/* ========== CONSTRUCTOR ========== */\r\n\tconstructor(\r\n\t\tILocker _locker,\r\n\t\taddress _governance,\r\n\t\taddress _receiver,\r\n\t\tBalancerAccumulator _accumulator,\r\n\t\taddress _veSDTFeeProxy,\r\n\t\taddress _sdtDistributor\r\n\t) BaseStrategy(_locker, _governance, _receiver) {\r\n\t\taccumulator = _accumulator;\r\n\t\tveSDTFeeProxy = _veSDTFeeProxy;\r\n\t\tsdtDistributor = _sdtDistributor;\r\n\t}\r\n\r\n\t/* ========== MUTATIVE FUNCTIONS ========== */\r\n\t/// @notice function to deposit into a gauge\r\n\t/// @param _token token address\r\n\t/// @param _amount amount to deposit\r\n\tfunction deposit(address _token, uint256 _amount) external override onlyApprovedVault {\r\n\t\tIERC20(_token).transferFrom(msg.sender, address(locker), _amount);\r\n\t\taddress gauge = gauges[_token];\r\n\t\trequire(gauge != address(0), \"!gauge\");\r\n\t\tlocker.execute(_token, 0, abi.encodeWithSignature(\"approve(address,uint256)\", gauge, 0));\r\n\t\tlocker.execute(_token, 0, abi.encodeWithSignature(\"approve(address,uint256)\", gauge, _amount));\r\n\r\n\t\t(bool success, ) = locker.execute(gauge, 0, abi.encodeWithSignature(\"deposit(uint256)\", _amount));\r\n\t\trequire(success, \"Deposit failed!\");\r\n\t\temit Deposited(gauge, _token, _amount);\r\n\t}\r\n\r\n\t/// @notice function to withdraw from a gauge\r\n\t/// @param _token token address\r\n\t/// @param _amount amount to withdraw\r\n\tfunction withdraw(address _token, uint256 _amount) external override onlyApprovedVault {\r\n\t\tuint256 _before = IERC20(_token).balanceOf(address(locker));\r\n\t\taddress gauge = gauges[_token];\r\n\t\trequire(gauge != address(0), \"!gauge\");\r\n\t\t(bool success, ) = locker.execute(gauge, 0, abi.encodeWithSignature(\"withdraw(uint256)\", _amount));\r\n\t\trequire(success, \"Transfer failed!\");\r\n\t\tuint256 _after = IERC20(_token).balanceOf(address(locker));\r\n\r\n\t\tuint256 _net = _after - _before;\r\n\t\t(success, ) = locker.execute(_token, 0, abi.encodeWithSignature(\"transfer(address,uint256)\", msg.sender, _net));\r\n\t\trequire(success, \"Transfer failed!\");\r\n\t\temit Withdrawn(gauge, _token, _amount);\r\n\t}\r\n\r\n\t/// @notice function to send funds into the related accumulator\r\n\t/// @param _token token address\r\n\t/// @param _amount amount to send\r\n\tfunction sendToAccumulator(address _token, uint256 _amount) external onlyGovernance {\r\n\t\tIERC20(_token).approve(address(accumulator), _amount);\r\n\t\taccumulator.depositToken(_token, _amount);\r\n\t}\r\n\r\n\t/// @notice function to claim the reward and distribute it\r\n\t/// @param _token BPT token address\r\n\tfunction claim(address _token) external override {\r\n\t\taddress gauge = gauges[_token];\r\n\t\trequire(gauge != address(0), \"!gauge\");\r\n\r\n\t\tuint256 balBeforeClaim = IERC20(BAL).balanceOf(address(locker));\r\n\r\n\t\t// Claim BAL\r\n\t\t// within the mint() it calls the user checkpoint\r\n\t\t(bool success, ) = locker.execute(\r\n\t\t\tBAL_MINTER,\r\n\t\t\t0,\r\n\t\t\tabi.encodeWithSignature(\"mint(address)\", gauge)\r\n\t\t);\t\r\n\t\trequire(success, \"BAL mint failed!\");\r\n\r\n\t\tuint256 balMinted = IERC20(BAL).balanceOf(address(locker)) - balBeforeClaim;\r\n\t\t\r\n\t\t// Send BAL here\r\n\t\t(success, ) = locker.execute(\r\n\t\t\tBAL,\r\n\t\t\t0,\r\n\t\t\tabi.encodeWithSignature(\"transfer(address,uint256)\", address(this), balMinted)\r\n\t\t);\r\n\t\trequire(success, \"BAL transfer failed!\");\r\n\r\n\t\t// Distribute BAL\r\n\t\tuint256 balNetRewards = sendFee(gauge, balMinted);\r\n\t\tIERC20(BAL).approve(multiGauges[gauge], balNetRewards);\r\n\t\tILiquidityGauge(multiGauges[gauge]).deposit_reward_token(BAL, balNetRewards);\r\n\t\temit Claimed(gauge, BAL, balMinted);\r\n\r\n\t\t// Distribute SDT to the related gauge\r\n\t\tSdtDistributorV2(sdtDistributor).distribute(multiGauges[gauge]);\r\n\r\n\t\t// Claim rewards only if there is at least one extra reward\r\n\t\tif(ILiquidityGauge(gauge).reward_tokens(0) != address(0)) {\r\n\t\t\t(success, ) = locker.execute(\r\n\t\t\t\tgauge, 0, abi.encodeWithSignature(\"claim_rewards(address,address)\", address(locker), address(this))\r\n\t\t\t);\r\n\t\t\taddress rewardToken;\r\n\t\t\tuint256 rewardsBalance;\r\n\t\t\tfor (uint8 i = 0; i < 8; i++) {\r\n\t\t\t\trewardToken = ILiquidityGauge(gauge).reward_tokens(i);\r\n\t\t\t\tif (rewardToken == address(0)) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n                rewardsBalance = IERC20(rewardToken).balanceOf(address(this));\r\n\t\t\t\tIERC20(rewardToken).approve(multiGauges[gauge], rewardsBalance);\r\n\t\t\t\tILiquidityGauge(multiGauges[gauge]).deposit_reward_token(rewardToken, rewardsBalance);\r\n\t\t\t\temit Claimed(gauge, rewardToken, rewardsBalance);\r\n\t\t\t}\t\r\n\t\t}\r\n\t}\r\n\r\n\t/// @notice internal function for distributing fees to recipients \r\n\t/// @param _gauge gauge address\r\n\t/// @param _rewardsBalance total balance to distribute\r\n\tfunction sendFee(address _gauge, uint256 _rewardsBalance) internal returns(uint256) {\r\n\t\t// calculate the amount for each fee recipient\r\n\t\tuint256 multisigFee = (_rewardsBalance * perfFee[_gauge]) / BASE_FEE;\r\n\t\tuint256 accumulatorPart = (_rewardsBalance * accumulatorFee[_gauge]) / BASE_FEE;\r\n\t\tuint256 veSDTPart = (_rewardsBalance * veSDTFee[_gauge]) / BASE_FEE;\r\n\t\tuint256 claimerPart = (_rewardsBalance * claimerRewardFee[_gauge]) / BASE_FEE;\r\n\t\t// send \r\n\t\tIERC20(BAL).approve(address(accumulator), accumulatorPart);\r\n\t\taccumulator.depositToken(BAL, accumulatorPart);\r\n\t\tIERC20(BAL).transfer(rewardsReceiver, multisigFee);\r\n\t\tIERC20(BAL).transfer(veSDTFeeProxy, veSDTPart);\r\n\t\tIERC20(BAL).transfer(msg.sender, claimerPart);\r\n\t\treturn _rewardsBalance - multisigFee - accumulatorPart - veSDTPart - claimerPart;\r\n\t}\r\n\r\n\t/// @notice function to toggle a vault\r\n\t/// @param _vault vault address\r\n\tfunction toggleVault(address _vault) external override onlyGovernanceOrFactory {\r\n\t\trequire(_vault != address(0), \"zero address\");\r\n\t\tvaults[_vault] = !vaults[_vault];\r\n\t\temit VaultToggled(_vault, vaults[_vault]);\r\n\t}\r\n\r\n\t/// @notice function to set a new gauge\r\n\t/// It permits to set it as address(0), for disabling it\r\n\t/// @param _token token address\r\n\t/// @param _gauge gauge address\r\n\tfunction setGauge(address _token, address _gauge) external override onlyGovernanceOrFactory {\r\n\t\trequire(_token != address(0), \"zero address\");\r\n\t\t// Set new gauge\r\n\t\tgauges[_token] = _gauge;\r\n\t\temit GaugeSet(_gauge, _token);\r\n\t}\r\n\r\n\t/// @notice function to set a multi gauge\r\n\t/// @param _gauge gauge address\r\n\t/// @param _multiGauge multi gauge address\r\n\tfunction setMultiGauge(address _gauge, address _multiGauge) external override onlyGovernanceOrFactory {\r\n\t\trequire(_gauge != address(0), \"zero address\");\r\n\t\trequire(_multiGauge != address(0), \"zero address\");\r\n\t\tmultiGauges[_gauge] = _multiGauge;\r\n\t}\r\n\r\n\t/// @notice function to set a new veSDTProxy\r\n\t/// @param _newVeSDTProxy veSdtProxy address\r\n\tfunction setVeSDTProxy(address _newVeSDTProxy) external onlyGovernance {\r\n\t\trequire(_newVeSDTProxy != address(0), \"zero address\");\r\n\t\tveSDTFeeProxy = _newVeSDTProxy;\r\n\t}\r\n\r\n\t/// @notice function to set a new accumulator\r\n\t/// @param _newAccumulator accumulator address\r\n\tfunction setAccumulator(address _newAccumulator) external onlyGovernance {\r\n\t\trequire(_newAccumulator != address(0), \"zero address\");\r\n\t\taccumulator = BalancerAccumulator(_newAccumulator);\r\n\t}\r\n\r\n\t/// @notice function to set a new reward receiver\r\n\t/// @param _newRewardsReceiver reward receiver address\r\n\tfunction setRewardsReceiver(address _newRewardsReceiver) external onlyGovernance {\r\n\t\trequire(_newRewardsReceiver != address(0), \"zero address\");\r\n\t\trewardsReceiver = _newRewardsReceiver;\r\n\t}\r\n\r\n\t/// @notice function to set a new governance address\r\n\t/// @param _newGovernance governance address\r\n\tfunction setGovernance(address _newGovernance) external onlyGovernance {\r\n\t\trequire(_newGovernance != address(0), \"zero address\");\r\n\t\tgovernance = _newGovernance;\r\n\t}\r\n\r\n\t/// @notice function to set the vault/gauge factory\r\n\t/// @param _newVaultGaugeFactory factory address\r\n\tfunction setVaultGaugeFactory(address _newVaultGaugeFactory) external onlyGovernance {\r\n\t\trequire(_newVaultGaugeFactory != address(0), \"zero address\");\r\n\t\tvaultGaugeFactory = _newVaultGaugeFactory;\r\n\t}\r\n\r\n\t/// @notice function to set new fees\r\n\t/// @param _manageFee manageFee\r\n\t/// @param _gauge gauge address\r\n\t/// @param _newFee new fee to set\r\n\tfunction manageFee(\r\n\t\tMANAGEFEE _manageFee,\r\n\t\taddress _gauge,\r\n\t\tuint256 _newFee\r\n\t) external onlyGovernanceOrFactory {\r\n\t\trequire(_gauge != address(0), \"zero address\");\r\n\t\tif (_manageFee == MANAGEFEE.PERFFEE) {\r\n\t\t\t// 0\r\n\t\t\tperfFee[_gauge] = _newFee;\r\n\t\t} else if (_manageFee == MANAGEFEE.VESDTFEE) {\r\n\t\t\t// 1\r\n\t\t\tveSDTFee[_gauge] = _newFee;\r\n\t\t} else if (_manageFee == MANAGEFEE.ACCUMULATORFEE) {\r\n\t\t\t//2\r\n\t\t\taccumulatorFee[_gauge] = _newFee;\r\n\t\t} else if (_manageFee == MANAGEFEE.CLAIMERREWARD) {\r\n\t\t\t// 3\r\n\t\t\tclaimerRewardFee[_gauge] = _newFee;\r\n\t\t}\r\n\t\trequire(\r\n\t\t\tperfFee[_gauge] + \r\n\t\t\tveSDTFee[_gauge] + \r\n\t\t\taccumulatorFee[_gauge] + \r\n\t\t\tclaimerRewardFee[_gauge] \r\n\t\t\t<= BASE_FEE, \"fee to high\"\r\n\t\t);\r\n\t}\r\n\r\n\t/// @notice execute a function\r\n\t/// @param _to Address to sent the value to\r\n\t/// @param _value Value to be sent\r\n\t/// @param _data Call function data\r\n\tfunction execute(\r\n\t\taddress _to,\r\n\t\tuint256 _value,\r\n\t\tbytes calldata _data\r\n\t) external onlyGovernance returns (bool, bytes memory) {\r\n\t\t(bool success, bytes memory result) = _to.call{ value: _value }(_data);\r\n\t\treturn (success, result);\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\r\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\r\n * types.\r\n *\r\n * This concept is unrelated to a Pool's Asset Managers.\r\n */\r\ninterface IAsset {\r\n\t// solhint-disable-previous-line no-empty-blocks\r\n}\r\n\r\ninterface IAuthorizer {\r\n\t/**\r\n\t * @dev Returns true if `account` can perform the action described by `actionId` in the contract `where`.\r\n\t */\r\n\tfunction canPerform(\r\n\t\tbytes32 actionId,\r\n\t\taddress account,\r\n\t\taddress where\r\n\t) external view returns (bool);\r\n}\r\n\r\ninterface IFlashLoanRecipient {\r\n\t/**\r\n\t * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\r\n\t *\r\n\t * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\r\n\t * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\r\n\t * Vault, or else the entire flash loan will revert.\r\n\t *\r\n\t * `userData` is the same value passed in the `IVault.flashLoan` call.\r\n\t */\r\n\tfunction receiveFlashLoan(\r\n\t\tIERC20[] memory tokens,\r\n\t\tuint256[] memory amounts,\r\n\t\tuint256[] memory feeAmounts,\r\n\t\tbytes memory userData\r\n\t) external;\r\n}\r\n\r\n/**\r\n * @dev Full external interface for the Vault core contract - no external or public methods exist in the contract that\r\n * don't override one of these declarations.\r\n */\r\ninterface IBalancerVault {\r\n\t// Generalities about the Vault:\r\n\t//\r\n\t// - Whenever documentation refers to 'tokens', it strictly refers to ERC20-compliant token contracts. Tokens are\r\n\t// transferred out of the Vault by calling the `IERC20.transfer` function, and transferred in by calling\r\n\t// `IERC20.transferFrom`. In these cases, the sender must have previously allowed the Vault to use their tokens by\r\n\t// calling `IERC20.approve`. The only deviation from the ERC20 standard that is supported is functions not returning\r\n\t// a boolean value: in these scenarios, a non-reverting call is assumed to be successful.\r\n\t//\r\n\t// - All non-view functions in the Vault are non-reentrant: calling them while another one is mid-execution (e.g.\r\n\t// while execution control is transferred to a token contract during a swap) will result in a revert. View\r\n\t// functions can be called in a re-reentrant way, but doing so might cause them to return inconsistent results.\r\n\t// Contracts calling view functions in the Vault must make sure the Vault has not already been entered.\r\n\t//\r\n\t// - View functions revert if referring to either unregistered Pools, or unregistered tokens for registered Pools.\r\n\r\n\t// Authorizer\r\n\t//\r\n\t// Some system actions are permissioned, like setting and collecting protocol fees. This permissioning system exists\r\n\t// outside of the Vault in the Authorizer contract: the Vault simply calls the Authorizer to check if the caller\r\n\t// can perform a given action.\r\n\r\n\t/**\r\n\t * @dev Returns the Vault's Authorizer.\r\n\t */\r\n\tfunction getAuthorizer() external view returns (IAuthorizer);\r\n\r\n\t/**\r\n\t * @dev Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this.\r\n\t *\r\n\t * Emits an `AuthorizerChanged` event.\r\n\t */\r\n\tfunction setAuthorizer(IAuthorizer newAuthorizer) external;\r\n\r\n\t/**\r\n\t * @dev Emitted when a new authorizer is set by `setAuthorizer`.\r\n\t */\r\n\tevent AuthorizerChanged(IAuthorizer indexed newAuthorizer);\r\n\r\n\t// Relayers\r\n\t//\r\n\t// Additionally, it is possible for an account to perform certain actions on behalf of another one, using their\r\n\t// Vault ERC20 allowance and Internal Balance. These accounts are said to be 'relayers' for these Vault functions,\r\n\t// and are expected to be smart contracts with sound authentication mechanisms. For an account to be able to wield\r\n\t// this power, two things must occur:\r\n\t//  - The Authorizer must grant the account the permission to be a relayer for the relevant Vault function. This\r\n\t//    means that Balancer governance must approve each individual contract to act as a relayer for the intended\r\n\t//    functions.\r\n\t//  - Each user must approve the relayer to act on their behalf.\r\n\t// This double protection means users cannot be tricked into approving malicious relayers (because they will not\r\n\t// have been allowed by the Authorizer via governance), nor can malicious relayers approved by a compromised\r\n\t// Authorizer or governance drain user funds, since they would also need to be approved by each individual user.\r\n\r\n\t/**\r\n\t * @dev Returns true if `user` has approved `relayer` to act as a relayer for them.\r\n\t */\r\n\tfunction hasApprovedRelayer(address user, address relayer) external view returns (bool);\r\n\r\n\t/**\r\n\t * @dev Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise.\r\n\t *\r\n\t * Emits a `RelayerApprovalChanged` event.\r\n\t */\r\n\tfunction setRelayerApproval(\r\n\t\taddress sender,\r\n\t\taddress relayer,\r\n\t\tbool approved\r\n\t) external;\r\n\r\n\t/**\r\n\t * @dev Emitted every time a relayer is approved or disapproved by `setRelayerApproval`.\r\n\t */\r\n\tevent RelayerApprovalChanged(address indexed relayer, address indexed sender, bool approved);\r\n\r\n\t// Internal Balance\r\n\t//\r\n\t// Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\r\n\t// transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\r\n\t// when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\r\n\t// gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\r\n\t//\r\n\t// Internal Balance management features batching, which means a single contract call can be used to perform multiple\r\n\t// operations of different kinds, with different senders and recipients, at once.\r\n\r\n\t/**\r\n\t * @dev Returns `user`'s Internal Balance for a set of tokens.\r\n\t */\r\n\tfunction getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\r\n\r\n\t/**\r\n\t * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\r\n\t * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\r\n\t * it lets integrators reuse a user's Vault allowance.\r\n\t *\r\n\t * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\r\n\t */\r\n\tfunction manageUserBalance(UserBalanceOp[] memory ops) external payable;\r\n\r\n\t/**\r\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\r\n     without manual WETH wrapping or unwrapping.\r\n     */\r\n\tstruct UserBalanceOp {\r\n\t\tUserBalanceOpKind kind;\r\n\t\tIAsset asset;\r\n\t\tuint256 amount;\r\n\t\taddress sender;\r\n\t\taddress payable recipient;\r\n\t}\r\n\r\n\t// There are four possible operations in `manageUserBalance`:\r\n\t//\r\n\t// - DEPOSIT_INTERNAL\r\n\t// Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\r\n\t// `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\r\n\t//\r\n\t// ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\r\n\t// and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\r\n\t// relevant for relayers).\r\n\t//\r\n\t// Emits an `InternalBalanceChanged` event.\r\n\t//\r\n\t//\r\n\t// - WITHDRAW_INTERNAL\r\n\t// Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\r\n\t//\r\n\t// ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\r\n\t// it to the recipient as ETH.\r\n\t//\r\n\t// Emits an `InternalBalanceChanged` event.\r\n\t//\r\n\t//\r\n\t// - TRANSFER_INTERNAL\r\n\t// Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\r\n\t//\r\n\t// Reverts if the ETH sentinel value is passed.\r\n\t//\r\n\t// Emits an `InternalBalanceChanged` event.\r\n\t//\r\n\t//\r\n\t// - TRANSFER_EXTERNAL\r\n\t// Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\r\n\t// relayers, as it lets them reuse a user's Vault allowance.\r\n\t//\r\n\t// Reverts if the ETH sentinel value is passed.\r\n\t//\r\n\t// Emits an `ExternalBalanceTransfer` event.\r\n\r\n\tenum UserBalanceOpKind {\r\n\t\tDEPOSIT_INTERNAL,\r\n\t\tWITHDRAW_INTERNAL,\r\n\t\tTRANSFER_INTERNAL,\r\n\t\tTRANSFER_EXTERNAL\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through\r\n\t * interacting with Pools using Internal Balance.\r\n\t *\r\n\t * Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH\r\n\t * address.\r\n\t */\r\n\tevent InternalBalanceChanged(address indexed user, IERC20 indexed token, int256 delta);\r\n\r\n\t/**\r\n\t * @dev Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account.\r\n\t */\r\n\tevent ExternalBalanceTransfer(IERC20 indexed token, address indexed sender, address recipient, uint256 amount);\r\n\r\n\t// Pools\r\n\t//\r\n\t// There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\r\n\t// functionality:\r\n\t//\r\n\t//  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\r\n\t// balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\r\n\t// which increase with the number of registered tokens.\r\n\t//\r\n\t//  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\r\n\t// balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\r\n\t// constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\r\n\t// independent of the number of registered tokens.\r\n\t//\r\n\t//  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\r\n\t// minimal swap info Pools, these are called via IMinimalSwapInfoPool.\r\n\r\n\tenum PoolSpecialization {\r\n\t\tGENERAL,\r\n\t\tMINIMAL_SWAP_INFO,\r\n\t\tTWO_TOKEN\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which\r\n\t * is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be\r\n\t * changed.\r\n\t *\r\n\t * The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`,\r\n\t * depending on the chosen specialization setting. This contract is known as the Pool's contract.\r\n\t *\r\n\t * Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words,\r\n\t * multiple Pools may share the same contract.\r\n\t *\r\n\t * Emits a `PoolRegistered` event.\r\n\t */\r\n\tfunction registerPool(PoolSpecialization specialization) external returns (bytes32);\r\n\r\n\t/**\r\n\t * @dev Emitted when a Pool is registered by calling `registerPool`.\r\n\t */\r\n\tevent PoolRegistered(bytes32 indexed poolId, address indexed poolAddress, PoolSpecialization specialization);\r\n\r\n\t/**\r\n\t * @dev Returns a Pool's contract address and specialization setting.\r\n\t */\r\n\tfunction getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\r\n\r\n\t/**\r\n\t * @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\r\n\t *\r\n\t * Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\r\n\t * exit by receiving registered tokens, and can only swap registered tokens.\r\n\t *\r\n\t * Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\r\n\t * of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in\r\n\t * ascending order.\r\n\t *\r\n\t * The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\r\n\t * Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`,\r\n\t * depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore\r\n\t * expected to be highly secured smart contracts with sound design principles, and the decision to register an\r\n\t * Asset Manager should not be made lightly.\r\n\t *\r\n\t * Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset\r\n\t * Manager is set, it cannot be changed except by deregistering the associated token and registering again with a\r\n\t * different Asset Manager.\r\n\t *\r\n\t * Emits a `TokensRegistered` event.\r\n\t */\r\n\tfunction registerTokens(\r\n\t\tbytes32 poolId,\r\n\t\tIERC20[] memory tokens,\r\n\t\taddress[] memory assetManagers\r\n\t) external;\r\n\r\n\t/**\r\n\t * @dev Emitted when a Pool registers tokens by calling `registerTokens`.\r\n\t */\r\n\tevent TokensRegistered(bytes32 indexed poolId, IERC20[] tokens, address[] assetManagers);\r\n\r\n\t/**\r\n\t * @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\r\n\t *\r\n\t * Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\r\n\t * balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\r\n\t * must be deregistered in the same `deregisterTokens` call.\r\n\t *\r\n\t * A deregistered token can be re-registered later on, possibly with a different Asset Manager.\r\n\t *\r\n\t * Emits a `TokensDeregistered` event.\r\n\t */\r\n\tfunction deregisterTokens(bytes32 poolId, IERC20[] memory tokens) external;\r\n\r\n\t/**\r\n\t * @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\r\n\t */\r\n\tevent TokensDeregistered(bytes32 indexed poolId, IERC20[] tokens);\r\n\r\n\t/**\r\n\t * @dev Returns detailed information for a Pool's registered token.\r\n\t *\r\n\t * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\r\n\t * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\r\n\t * equals the sum of `cash` and `managed`.\r\n\t *\r\n\t * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\r\n\t * `managed` or `total` balance to be greater than 2^112 - 1.\r\n\t *\r\n\t * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\r\n\t * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\r\n\t * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\r\n\t * change for this purpose, and will update `lastChangeBlock`.\r\n\t *\r\n\t * `assetManager` is the Pool's token Asset Manager.\r\n\t */\r\n\tfunction getPoolTokenInfo(bytes32 poolId, IERC20 token)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (\r\n\t\t\tuint256 cash,\r\n\t\t\tuint256 managed,\r\n\t\t\tuint256 lastChangeBlock,\r\n\t\t\taddress assetManager\r\n\t\t);\r\n\r\n\t/**\r\n\t * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\r\n\t * the tokens' `balances` changed.\r\n\t *\r\n\t * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\r\n\t * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\r\n\t *\r\n\t * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\r\n\t * order as passed to `registerTokens`.\r\n\t *\r\n\t * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\r\n\t * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\r\n\t * instead.\r\n\t */\r\n\tfunction getPoolTokens(bytes32 poolId)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (\r\n\t\t\tIERC20[] memory tokens,\r\n\t\t\tuint256[] memory balances,\r\n\t\t\tuint256 lastChangeBlock\r\n\t\t);\r\n\r\n\t/**\r\n\t * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\r\n\t * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\r\n\t * Pool shares.\r\n\t *\r\n\t * If the caller is not `sender`, it must be an authorized relayer for them.\r\n\t *\r\n\t * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\r\n\t * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\r\n\t * these maximums.\r\n\t *\r\n\t * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\r\n\t * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\r\n\t * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\r\n\t * back to the caller (not the sender, which is important for relayers).\r\n\t *\r\n\t * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\r\n\t * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\r\n\t * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\r\n\t * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\r\n\t *\r\n\t * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\r\n\t * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\r\n\t * withdrawn from Internal Balance: attempting to do so will trigger a revert.\r\n\t *\r\n\t * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\r\n\t * their own custom logic. This typically requires additional information from the user (such as the expected number\r\n\t * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\r\n\t * directly to the Pool's contract, as is `recipient`.\r\n\t *\r\n\t * Emits a `PoolBalanceChanged` event.\r\n\t */\r\n\tfunction joinPool(\r\n\t\tbytes32 poolId,\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tJoinPoolRequest memory request\r\n\t) external payable;\r\n\r\n\tstruct JoinPoolRequest {\r\n\t\taddress[] assets;\r\n\t\tuint256[] maxAmountsIn;\r\n\t\tbytes userData;\r\n\t\tbool fromInternalBalance;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\r\n\t * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\r\n\t * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\r\n\t * `getPoolTokenInfo`).\r\n\t *\r\n\t * If the caller is not `sender`, it must be an authorized relayer for them.\r\n\t *\r\n\t * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\r\n\t * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\r\n\t * it just enforces these minimums.\r\n\t *\r\n\t * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\r\n\t * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\r\n\t * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\r\n\t *\r\n\t * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\r\n\t * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\r\n\t * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\r\n\t * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\r\n\t *\r\n\t * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\r\n\t * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\r\n\t * do so will trigger a revert.\r\n\t *\r\n\t * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\r\n\t * `tokens` array. This array must match the Pool's registered tokens.\r\n\t *\r\n\t * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\r\n\t * their own custom logic. This typically requires additional information from the user (such as the expected number\r\n\t * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\r\n\t * passed directly to the Pool's contract.\r\n\t *\r\n\t * Emits a `PoolBalanceChanged` event.\r\n\t */\r\n\tfunction exitPool(\r\n\t\tbytes32 poolId,\r\n\t\taddress sender,\r\n\t\taddress payable recipient,\r\n\t\tExitPoolRequest memory request\r\n\t) external;\r\n\r\n\tstruct ExitPoolRequest {\r\n\t\tIAsset[] assets;\r\n\t\tuint256[] minAmountsOut;\r\n\t\tbytes userData;\r\n\t\tbool toInternalBalance;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively.\r\n\t */\r\n\tevent PoolBalanceChanged(\r\n\t\tbytes32 indexed poolId,\r\n\t\taddress indexed liquidityProvider,\r\n\t\tIERC20[] tokens,\r\n\t\tint256[] deltas,\r\n\t\tuint256[] protocolFeeAmounts\r\n\t);\r\n\r\n\tenum PoolBalanceChangeKind {\r\n\t\tJOIN,\r\n\t\tEXIT\r\n\t}\r\n\r\n\t// Swaps\r\n\t//\r\n\t// Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\r\n\t// they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\r\n\t// aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\r\n\t//\r\n\t// The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\r\n\t// In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\r\n\t// and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\r\n\t// More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\r\n\t// individual swaps.\r\n\t//\r\n\t// There are two swap kinds:\r\n\t//  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\r\n\t// `onSwap` hook) the amount of tokens out (to send to the recipient).\r\n\t//  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\r\n\t// (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\r\n\t//\r\n\t// Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\r\n\t// the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\r\n\t// tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\r\n\t// swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\r\n\t// the final intended token.\r\n\t//\r\n\t// In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\r\n\t// Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\r\n\t// certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\r\n\t// much less gas than they would otherwise.\r\n\t//\r\n\t// It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\r\n\t// Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\r\n\t// updating the Pool's internal accounting).\r\n\t//\r\n\t// To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\r\n\t// involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\r\n\t// minimum amount of tokens to receive (by passing a negative value) is specified.\r\n\t//\r\n\t// Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\r\n\t// this point in time (e.g. if the transaction failed to be included in a block promptly).\r\n\t//\r\n\t// If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\r\n\t// the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\r\n\t// passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\r\n\t// same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\r\n\t//\r\n\t// Finally, Internal Balance can be used when either sending or receiving tokens.\r\n\r\n\tenum SwapKind {\r\n\t\tGIVEN_IN,\r\n\t\tGIVEN_OUT\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Performs a swap with a single Pool.\r\n\t *\r\n\t * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\r\n\t * taken from the Pool, which must be greater than or equal to `limit`.\r\n\t *\r\n\t * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\r\n\t * sent to the Pool, which must be less than or equal to `limit`.\r\n\t *\r\n\t * Internal Balance usage and the recipient are determined by the `funds` struct.\r\n\t *\r\n\t * Emits a `Swap` event.\r\n\t */\r\n\tfunction swap(\r\n\t\tSingleSwap memory singleSwap,\r\n\t\tFundManagement memory funds,\r\n\t\tuint256 limit,\r\n\t\tuint256 deadline\r\n\t) external payable returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\r\n\t * the `kind` value.\r\n\t *\r\n\t * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\r\n\t * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\r\n\t *\r\n\t * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\r\n\t * used to extend swap behavior.\r\n\t */\r\n\tstruct SingleSwap {\r\n\t\tbytes32 poolId;\r\n\t\tSwapKind kind;\r\n\t\tIAsset assetIn;\r\n\t\tIAsset assetOut;\r\n\t\tuint256 amount;\r\n\t\tbytes userData;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\r\n\t * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\r\n\t *\r\n\t * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\r\n\t * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\r\n\t * the same index in the `assets` array.\r\n\t *\r\n\t * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\r\n\t * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\r\n\t * `amountOut` depending on the swap kind.\r\n\t *\r\n\t * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\r\n\t * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\r\n\t * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\r\n\t *\r\n\t * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\r\n\t * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\r\n\t * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\r\n\t * or unwrapped from WETH by the Vault.\r\n\t *\r\n\t * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\r\n\t * the minimum or maximum amount of each token the vault is allowed to transfer.\r\n\t *\r\n\t * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\r\n\t * equivalent `swap` call.\r\n\t *\r\n\t * Emits `Swap` events.\r\n\t */\r\n\tfunction batchSwap(\r\n\t\tSwapKind kind,\r\n\t\tBatchSwapStep[] memory swaps,\r\n\t\tIAsset[] memory assets,\r\n\t\tFundManagement memory funds,\r\n\t\tint256[] memory limits,\r\n\t\tuint256 deadline\r\n\t) external payable returns (int256[] memory);\r\n\r\n\t/**\r\n\t * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\r\n\t * `assets` array passed to that function, and ETH assets are converted to WETH.\r\n\t *\r\n\t * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\r\n\t * from the previous swap, depending on the swap kind.\r\n\t *\r\n\t * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\r\n\t * used to extend swap behavior.\r\n\t */\r\n\tstruct BatchSwapStep {\r\n\t\tbytes32 poolId;\r\n\t\tuint256 assetInIndex;\r\n\t\tuint256 assetOutIndex;\r\n\t\tuint256 amount;\r\n\t\tbytes userData;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Emitted for each individual swap performed by `swap` or `batchSwap`.\r\n\t */\r\n\tevent Swap(\r\n\t\tbytes32 indexed poolId,\r\n\t\tIERC20 indexed tokenIn,\r\n\t\tIERC20 indexed tokenOut,\r\n\t\tuint256 amountIn,\r\n\t\tuint256 amountOut\r\n\t);\r\n\r\n\t/**\r\n\t * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\r\n\t * `recipient` account.\r\n\t *\r\n\t * If the caller is not `sender`, it must be an authorized relayer for them.\r\n\t *\r\n\t * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\r\n\t * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\r\n\t * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\r\n\t * `joinPool`.\r\n\t *\r\n\t * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\r\n\t * transferred. This matches the behavior of `exitPool`.\r\n\t *\r\n\t * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\r\n\t * revert.\r\n\t */\r\n\tstruct FundManagement {\r\n\t\taddress sender;\r\n\t\tbool fromInternalBalance;\r\n\t\taddress payable recipient;\r\n\t\tbool toInternalBalance;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\r\n\t * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\r\n\t *\r\n\t * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\r\n\t * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\r\n\t * receives are the same that an equivalent `batchSwap` call would receive.\r\n\t *\r\n\t * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\r\n\t * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\r\n\t * approve them for the Vault, or even know a user's address.\r\n\t *\r\n\t * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\r\n\t * eth_call instead of eth_sendTransaction.\r\n\t */\r\n\tfunction queryBatchSwap(\r\n\t\tSwapKind kind,\r\n\t\tBatchSwapStep[] memory swaps,\r\n\t\tIAsset[] memory assets,\r\n\t\tFundManagement memory funds\r\n\t) external returns (int256[] memory assetDeltas);\r\n\r\n\t// Flash Loans\r\n\r\n\t/**\r\n\t * @dev Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it,\r\n\t * and then reverting unless the tokens plus a proportional protocol fee have been returned.\r\n\t *\r\n\t * The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount\r\n\t * for each token contract. `tokens` must be sorted in ascending order.\r\n\t *\r\n\t * The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the\r\n\t * `receiveFlashLoan` call.\r\n\t *\r\n\t * Emits `FlashLoan` events.\r\n\t */\r\n\tfunction flashLoan(\r\n\t\tIFlashLoanRecipient recipient,\r\n\t\tIERC20[] memory tokens,\r\n\t\tuint256[] memory amounts,\r\n\t\tbytes memory userData\r\n\t) external;\r\n\r\n\t/**\r\n\t * @dev Emitted for each individual flash loan performed by `flashLoan`.\r\n\t */\r\n\tevent FlashLoan(IFlashLoanRecipient indexed recipient, IERC20 indexed token, uint256 amount, uint256 feeAmount);\r\n\r\n\t// Asset Management\r\n\t//\r\n\t// Each token registered for a Pool can be assigned an Asset Manager, which is able to freely withdraw the Pool's\r\n\t// tokens from the Vault, deposit them, or assign arbitrary values to its `managed` balance (see\r\n\t// `getPoolTokenInfo`). This makes them extremely powerful and dangerous. Even if an Asset Manager only directly\r\n\t// controls one of the tokens in a Pool, a malicious manager could set that token's balance to manipulate the\r\n\t// prices of the other tokens, and then drain the Pool with swaps. The risk of using Asset Managers is therefore\r\n\t// not constrained to the tokens they are managing, but extends to the entire Pool's holdings.\r\n\t//\r\n\t// However, a properly designed Asset Manager smart contract can be safely used for the Pool's benefit,\r\n\t// for example by lending unused tokens out for interest, or using them to participate in voting protocols.\r\n\t//\r\n\t// This concept is unrelated to the IAsset interface.\r\n\r\n\t/**\r\n\t * @dev Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates.\r\n\t *\r\n\t * Pool Balance management features batching, which means a single contract call can be used to perform multiple\r\n\t * operations of different kinds, with different Pools and tokens, at once.\r\n\t *\r\n\t * For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`.\r\n\t */\r\n\tfunction managePoolBalance(PoolBalanceOp[] memory ops) external;\r\n\r\n\tstruct PoolBalanceOp {\r\n\t\tPoolBalanceOpKind kind;\r\n\t\tbytes32 poolId;\r\n\t\tIERC20 token;\r\n\t\tuint256 amount;\r\n\t}\r\n\r\n\t/**\r\n\t * Withdrawals decrease the Pool's cash, but increase its managed balance, leaving the total balance unchanged.\r\n\t *\r\n\t * Deposits increase the Pool's cash, but decrease its managed balance, leaving the total balance unchanged.\r\n\t *\r\n\t * Updates don't affect the Pool's cash balance, but because the managed balance changes, it does alter the total.\r\n\t * The external amount can be either increased or decreased by this call (i.e., reporting a gain or a loss).\r\n\t */\r\n\tenum PoolBalanceOpKind {\r\n\t\tWITHDRAW,\r\n\t\tDEPOSIT,\r\n\t\tUPDATE\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`.\r\n\t */\r\n\tevent PoolBalanceManaged(\r\n\t\tbytes32 indexed poolId,\r\n\t\taddress indexed assetManager,\r\n\t\tIERC20 indexed token,\r\n\t\tint256 cashDelta,\r\n\t\tint256 managedDelta\r\n\t);\r\n}\r\n\r\ninterface IBalancerPool {\r\n\tfunction getPoolId() external returns (bytes32);\r\n}\r\n\r\ncontract BalancerVault is ERC20Upgradeable {\r\n\tusing SafeERC20Upgradeable for ERC20Upgradeable;\r\n\tusing AddressUpgradeable for address;\r\n\r\n\tERC20Upgradeable public token;\r\n\taddress public governance;\r\n\tuint256 public withdrawalFee;\r\n\tuint256 public keeperFee;\r\n\taddress public liquidityGauge;\r\n\tuint256 public accumulatedFee;\r\n\tbytes32 public poolId;\r\n\taddress public constant BALANCER_VAULT = 0xBA12222222228d8Ba445958a75a0704d566BF2C8;\r\n\tuint256 public min;\r\n\tuint256 public constant max = 10000;\r\n\tBalancerStrategy public balancerStrategy;\r\n\tevent Earn(address _token, uint256 _amount);\r\n\tevent Deposit(address _depositor, uint256 _amount);\r\n\tevent Withdraw(address _depositor, uint256 _amount);\r\n\r\n\tfunction init(\r\n\t\tERC20Upgradeable _token,\r\n\t\taddress _governance,\r\n\t\tstring memory name_,\r\n\t\tstring memory symbol_,\r\n\t\tBalancerStrategy _balancerStrategy\r\n\t) public initializer {\r\n\t\t__ERC20_init(name_, symbol_);\r\n\t\ttoken = _token;\r\n\t\tgovernance = _governance;\r\n\t\tmin = 10000;\r\n\t\tkeeperFee = 10; // %0.1\r\n\t\tpoolId = IBalancerPool(address(_token)).getPoolId();\r\n\t\tbalancerStrategy = _balancerStrategy;\r\n\t}\r\n\r\n\t/// @notice function to deposit the BPT token\r\n\t/// @param _staker address to stake for\r\n\t/// @param _amount amount to deposit\r\n\t/// @param _earn earn or not \r\n\tfunction deposit(\r\n\t\taddress _staker,\r\n\t\tuint256 _amount,\r\n\t\tbool _earn\r\n\t) public {\r\n\t\trequire(address(liquidityGauge) != address(0), \"Gauge not yet initialized\");\r\n\t\ttoken.safeTransferFrom(msg.sender, address(this), _amount);\r\n\t\t_deposit(_staker, _amount, _earn);\r\n\t}\r\n\r\n\t/// @notice function to provide liquidity in underlying tokens \r\n\t/// @param _staker address to stake for\r\n\t/// @param _maxAmountsIn amounts for each underlying token\r\n\t/// @param _earn earn or not \r\n\t/// @param _minAmount amount to deposit\r\n\tfunction provideLiquidityAndDeposit(\r\n\t\taddress _staker,\r\n\t\tuint256[] calldata _maxAmountsIn,\r\n\t\tbool _earn,\r\n\t\tuint256 _minAmount\r\n\t) public {\r\n\t\trequire(address(liquidityGauge) != address(0), \"Gauge not yet initialized\");\r\n\t\t(IERC20[] memory tokens, , ) = IBalancerVault(BALANCER_VAULT).getPoolTokens(poolId);\r\n\t\trequire(tokens.length == _maxAmountsIn.length, \"!length\");\r\n\t\taddress[] memory assets = new address[](tokens.length);\r\n\t\tfor (uint256 i; i < tokens.length; i++) {\r\n\t\t\tif (_maxAmountsIn[i] > 0) {\r\n\t\t\t\ttokens[i].transferFrom(msg.sender, address(this), _maxAmountsIn[i]);\r\n\t\t\t\ttokens[i].approve(BALANCER_VAULT, _maxAmountsIn[i]);\r\n\t\t\t}\r\n\t\t\tassets[i] = address(tokens[i]);\r\n\t\t}\r\n\t\tIBalancerVault.JoinPoolRequest memory pr = IBalancerVault.JoinPoolRequest(\r\n\t\t\tassets,\r\n\t\t\t_maxAmountsIn,\r\n\t\t\tabi.encode(1, _maxAmountsIn, _minAmount),\r\n\t\t\tfalse\r\n\t\t);\r\n\t\tuint256 lpBalanceBefore = token.balanceOf(address(this));\r\n\t\tIBalancerVault(BALANCER_VAULT).joinPool(\r\n\t\t\tpoolId, // poolId\r\n\t\t\taddress(this),\r\n\t\t\taddress(this),\r\n\t\t\tpr\r\n\t\t);\r\n\t\tuint256 lpBalanceAfter = token.balanceOf(address(this));\r\n\r\n\t\t_deposit(_staker, lpBalanceAfter - lpBalanceBefore, _earn);\r\n\t}\r\n\r\n\t/// @notice internal deposit function\r\n\t/// @param _staker address to stake for\r\n\t/// @param _amount amount to deposit\r\n\t/// @param _earn earn or not \r\n\tfunction _deposit(\r\n\t\taddress _staker,\r\n\t\tuint256 _amount,\r\n\t\tbool _earn\r\n\t) internal {\r\n\t\tif (!_earn) {\r\n\t\t\tuint256 keeperCut = (_amount * keeperFee) / 10000;\r\n\t\t\t_amount -= keeperCut;\r\n\t\t\taccumulatedFee += keeperCut;\r\n\t\t} else {\r\n\t\t\t_amount += accumulatedFee;\r\n\t\t\taccumulatedFee = 0;\r\n\t\t}\r\n\t\t_mint(address(this), _amount);\r\n\t\tILiquidityGaugeStrat(liquidityGauge).deposit(_amount, _staker);\r\n\t\tif (_earn) {\r\n\t\t\tearn();\r\n\t\t}\r\n\t\temit Deposit(_staker, _amount);\r\n\t}\r\n\r\n\t/// @notice function to withdraw\r\n\t/// @param _shares amount to withdraw\r\n\tfunction withdraw(uint256 _shares) public {\r\n\t\tuint256 userTotalShares = ILiquidityGaugeStrat(liquidityGauge).balanceOf(msg.sender);\r\n\t\trequire(_shares <= userTotalShares, \"Not enough staked\");\r\n\t\tILiquidityGaugeStrat(liquidityGauge).withdraw(_shares, msg.sender, true);\r\n\t\t_burn(address(this), _shares);\r\n\t\tuint256 tokenBalance = token.balanceOf(address(this)) - accumulatedFee;\r\n\t\tuint256 withdrawFee;\r\n\t\tif (_shares > tokenBalance) {\r\n\t\t\tuint256 amountToWithdraw = _shares - tokenBalance;\r\n\t\t\tbalancerStrategy.withdraw(address(token), amountToWithdraw);\r\n\t\t\twithdrawFee = (amountToWithdraw * withdrawalFee) / 10000;\r\n\t\t\tif (withdrawFee > 0) {\r\n\t\t\t\ttoken.safeTransfer(governance, withdrawFee);\r\n\t\t\t}\r\n\t\t}\r\n\t\ttoken.safeTransfer(msg.sender, _shares - withdrawFee);\r\n\t\temit Withdraw(msg.sender, _shares - withdrawFee);\r\n\t}\r\n\r\n\t/// @notice function to set the governance\r\n\t/// @param _governance governance address\r\n\tfunction setGovernance(address _governance) external {\r\n\t\trequire(msg.sender == governance, \"!governance\");\r\n\t\tgovernance = _governance;\r\n\t}\r\n\r\n\t/// @notice function to set the keeper fee\r\n\t/// @param _newFee keeper fee\r\n\tfunction setKeeperFee(uint256 _newFee) external {\r\n\t\trequire(msg.sender == governance, \"!governance\");\r\n\t\tkeeperFee = _newFee;\r\n\t}\r\n\r\n\t/// @notice function to set the gauge multi rewards\r\n\t/// @param _liquidityGauge gauge address\r\n\tfunction setLiquidityGauge(address _liquidityGauge) external {\r\n\t\trequire(msg.sender == governance, \"!governance\");\r\n\t\tliquidityGauge = _liquidityGauge;\r\n\t\tERC20Upgradeable(address(this)).approve(liquidityGauge, type(uint256).max);\r\n\t}\r\n\t\r\n\t/// @notice function to set the balancer strategy\r\n\t/// @param _newStrat balancer strategy infos\r\n\tfunction setBalancerStrategy(BalancerStrategy _newStrat) external {\r\n\t\trequire(msg.sender == governance, \"!governance\");\r\n\t\tbalancerStrategy = _newStrat;\r\n\t}\r\n\r\n\t/// @notice function to return the vault token decimals\r\n\tfunction decimals() public view override returns (uint8) {\r\n\t\treturn token.decimals();\r\n\t}\r\n\r\n\t/// @notice function to set the withdrawn fee\r\n\t/// @param _newFee withdrawn fee\r\n\tfunction setWithdrawnFee(uint256 _newFee) external {\r\n\t\trequire(msg.sender == governance, \"!governance\");\r\n\t\twithdrawalFee = _newFee;\r\n\t}\r\n\r\n\t/// @notice function to set the min\r\n\t/// @param _min min amount\r\n\tfunction setMin(uint256 _min) external {\r\n\t\trequire(msg.sender == governance, \"!governance\");\r\n\t\tmin = _min;\r\n\t}\r\n\r\n\t/// @notice view function to fetch the available amount to send to the strategy\r\n\tfunction available() public view returns (uint256) {\r\n\t\treturn ((token.balanceOf(address(this)) - accumulatedFee) * min) / max;\r\n\t}\r\n\r\n\t/// @notice internal function to move funds to the strategy\r\n\tfunction earn() internal {\r\n\t\tuint256 tokenBalance = available();\r\n\t\ttoken.approve(address(balancerStrategy), 0);\r\n\t\ttoken.approve(address(balancerStrategy), tokenBalance);\r\n\t\tbalancerStrategy.deposit(address(token), tokenBalance);\r\n\t\temit Earn(address(token), tokenBalance);\r\n\t}\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Earn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BALANCER_VAULT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accumulatedFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"available\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerStrategy\",\"outputs\":[{\"internalType\":\"contract BalancerStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_earn\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20Upgradeable\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"contract BalancerStrategy\",\"name\":\"_balancerStrategy\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeperFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"min\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_maxAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_earn\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"}],\"name\":\"provideLiquidityAndDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract BalancerStrategy\",\"name\":\"_newStrat\",\"type\":\"address\"}],\"name\":\"setBalancerStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setKeeperFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityGauge\",\"type\":\"address\"}],\"name\":\"setLiquidityGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"}],\"name\":\"setMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BalancerVault", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://be2d3d3c7e3a105201e6c183f356c48b393460090dc47624809270820c62c9fd"}