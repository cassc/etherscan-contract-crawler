{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\ncontract ProxyStorage {\r\n    address internal _implementation;\r\n}\r\n\r\ncontract ProxyAdmin is ProxyStorage {\r\n    address private _admin;\r\n    \r\n    modifier onlyAdmin() {\r\n        require(msg.sender == _admin, \"Only admin can call this\");\r\n        _;\r\n    }\r\n    \r\n    constructor() {\r\n        _admin = msg.sender;\r\n    }\r\n    \r\n    function upgradeTo(address newImplementation) external onlyAdmin {\r\n        require(newImplementation != address(0), \"New implementation is the zero address\");\r\n        require(newImplementation != _implementation, \"New implementation is the same as the current one\");\r\n        _implementation = newImplementation;\r\n    }\r\n    \r\n    function admin() external view returns (address) {\r\n        return _admin;\r\n    }\r\n}\r\n\r\ncontract UpgradeableProxy is ProxyAdmin {    \r\n    constructor(address initialImplementation) {\r\n        _implementation = initialImplementation;\r\n    }\r\n\r\n    receive() external payable { }\r\n    \r\n    fallback() external payable {\r\n        address impl = _implementation;\r\n        require(impl != address(0), \"Implementation not set\");\r\n        \r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            calldatacopy(ptr, 0, calldatasize())\r\n            let result := delegatecall(gas(), impl, ptr, calldatasize(), 0, 0)\r\n            let size := returndatasize()\r\n            returndatacopy(ptr, 0, size)\r\n            \r\n            switch result\r\n            case 0 { revert(ptr, size) }\r\n            default { return(ptr, size) }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialImplementation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "UpgradeableProxy", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009f63d2fce93a2e1b4ea637804dca4131a10fd259", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a8d388db0e564b0cc75a2742d4d27c9f4c5ed74a2645d41dbf3397336aee829d"}