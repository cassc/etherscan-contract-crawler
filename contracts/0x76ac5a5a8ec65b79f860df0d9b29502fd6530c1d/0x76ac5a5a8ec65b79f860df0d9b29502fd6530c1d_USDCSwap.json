{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/USDCswap_rev4.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\ninterface IERC20 {\\n    function balanceOf(address account) external view returns (uint256);\\n    function decimals() external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient,uint256 amount) external returns (bool);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n    function deposit() external payable;\\n    function withdraw(uint256 wad) external;\\n}\\n\\ninterface IUniswapV2Factory {\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n}\\n\\ncontract USDCSwap {\\n\\n  address public UNISWAP_FACTORY_ADDRESS;\\n  address public UNISWAP_ROUTER_ADDRESS;\\n  address public WETH;\\n  address public usdcAddress;\\n  address public receiverAddress;\\n  \\n  address public owner;\\n\\n  uint256 public donation_id;\\n  uint256 public totalUSDC_donations;\\n\\n  mapping (address => uint256) public totalDonationsByTokens;\\n  mapping (address => mapping(address => uint256)) public totalUserDonationsByToken;\\n\\n  IUniswapV2Router02 uniswapRouter;\\n  IERC20 usdc;\\n  IERC20 wethToken;\\n\\n  modifier onlyOwner {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n  event donated(address indexed _from, uint256 indexed _donation_id, uint256 indexed _order_id, uint256 _value);\\n\\n  constructor(uint256 _chainId) {\\n    owner = msg.sender;\\n\\n    if(_chainId == 1){\\n        //Uniswap - Ethereum - Mainnet\\n        UNISWAP_FACTORY_ADDRESS = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\\n        UNISWAP_ROUTER_ADDRESS = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n        WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; //WETH\\n        usdcAddress = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n        receiverAddress = 0xA7684CDEC9f90E2f352e120861555D234a714cDf; // ETH\\n    }else if (_chainId == 4){\\n        //Uniswap - Ethereum - Rinkeby\\n        UNISWAP_FACTORY_ADDRESS = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\\n        UNISWAP_ROUTER_ADDRESS = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n        WETH = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\\n        usdcAddress = 0xeb8f08a975Ab53E34D8a0330E0D34de942C95926;\\n        receiverAddress = 0xA7684CDEC9f90E2f352e120861555D234a714cDf; // ETH\\n    }else if (_chainId == 137){\\n        //Quickswap - Polygon - Mainnet\\n        UNISWAP_FACTORY_ADDRESS = 0x5757371414417b8C6CAad45bAeF941aBc7d3Ab32;\\n        UNISWAP_ROUTER_ADDRESS = 0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff;\\n        WETH = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270; //WMATIC\\n        usdcAddress = 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174;\\n        receiverAddress = 0x5d9daccCe2A7433cd17E6e1A6Ee5f0763D7edE44; // Polygon\\n    }else if (_chainId == 43114){\\n        //Pangolin - AVAX - Mainnet\\n        UNISWAP_FACTORY_ADDRESS = 0xefa94DE7a4656D787667C749f7E1223D71E9FD88;\\n        UNISWAP_ROUTER_ADDRESS = 0xE54Ca86531e17Ef3616d22Ca28b0D458b6C89106;\\n        WETH = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7; //WAWAX\\n        usdcAddress = 0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E;\\n        receiverAddress = 0xE0537229eF14b81598b30c9Da6b84a65E8Fb34bf; // AVAX\\n    }else if (_chainId == 56){\\n        //PancakeSwap - BSC - Mainnet\\n        UNISWAP_FACTORY_ADDRESS = 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73;\\n        UNISWAP_ROUTER_ADDRESS = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\\n        WETH = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c; //WBNB\\n        usdcAddress = 0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d;\\n        receiverAddress = 0xc0f7765363312C5FBf91b093a95B36dE27F61C38; // BSC\\n    }else if (_chainId == 97){\\n        //PancakeSwap - BSC - Testnet\\n        UNISWAP_FACTORY_ADDRESS = 0xB7926C0430Afb07AA7DEfDE6DA862aE0Bde767bc;\\n        UNISWAP_ROUTER_ADDRESS = 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3;\\n        WETH = 0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd; //WBNB\\n        usdcAddress = 0x70Dc5cD633AE263272670735d35F46213ae0CB08;\\n        receiverAddress = 0xc0f7765363312C5FBf91b093a95B36dE27F61C38; // BSC\\n    }\\n\\n    uniswapRouter = IUniswapV2Router02(UNISWAP_ROUTER_ADDRESS);\\n    usdc = IERC20(usdcAddress);\\n    wethToken = IERC20(WETH);\\n\\n  }\\n\\n  function donateNativeCoin(uint256 _usdAmount, uint256 _orderId) public payable returns(bool){\\n    address _tokenOut = usdcAddress; \\n    \\n    wethToken.deposit{value:msg.value}();\\n    wethToken.approve(UNISWAP_ROUTER_ADDRESS,wethToken.balanceOf(address(this)));\\n    \\n    totalDonationsByTokens[WETH] += wethToken.balanceOf(address(this));\\n    totalUserDonationsByToken[msg.sender][WETH] += wethToken.balanceOf(address(this));\\n    \\n    uint deadline = block.timestamp + 15;\\n    uniswapRouter.swapExactTokensForTokens(wethToken.balanceOf(address(this)), 0, getPathForTokenToToken(WETH,_tokenOut), receiverAddress, deadline);\\n\\n    emit donated(msg.sender, donation_id++, _orderId, _usdAmount);\\n\\n    return true;\\n  }\\n\\n  function donateToken(address _sender, address _tokenIn, uint256 _amount, uint256 _orderId, uint256 _usdAmount) public returns(bool){ //swapTokenToEth\\n  \\n    IERC20 token =  IERC20(_tokenIn);\\n    address _tokenOut = usdcAddress; \\n    uint deadline = block.timestamp + 15;\\n        \\n    uint256 allownace = token.allowance(_sender,address(this));\\n    require( allownace >= _amount, \\\"Not enough allownace to transfer the tokens\\\");\\n    token.transferFrom(_sender, address(this),_amount);\\n    \\n    \\n    token.approve(UNISWAP_ROUTER_ADDRESS, token.balanceOf(address(this)));\\n  \\n    uniswapRouter.swapExactTokensForTokens(token.balanceOf(address(this)), 0, getPathForTokenToToken(_tokenIn,_tokenOut), receiverAddress, deadline);\\n  \\n    totalDonationsByTokens[_tokenIn] += _amount;\\n    totalUserDonationsByToken[msg.sender][_tokenIn] += _amount;\\n\\n    emit donated(msg.sender, donation_id++, _orderId, _usdAmount);\\n\\n    return true;\\n  }\\n\\n  function donateUSDC(address _sender, uint256 _amount, uint256 _orderId, uint256 _usdAmount) public returns(bool){\\n  \\n    IERC20 token =  IERC20(usdcAddress);\\n        \\n    uint256 allownace = token.allowance(_sender,address(this));\\n    require( allownace >= _amount, \\\"Not enough allownace to transfer the tokens\\\");\\n    token.transferFrom(_sender, receiverAddress,_amount);\\n    \\n    totalDonationsByTokens[usdcAddress] += _amount;\\n    totalUserDonationsByToken[msg.sender][usdcAddress] += _amount;\\n\\n    emit donated(msg.sender, donation_id++, _orderId, _usdAmount);\\n\\n    return true;\\n  }\\n  \\n  function getPrice(address _tokenAddress1, address _tokenAddress2, uint256 _amount) public view returns(uint256) {\\n    address pairAddress = IUniswapV2Factory(UNISWAP_FACTORY_ADDRESS).getPair(_tokenAddress1, _tokenAddress2);\\n   \\n    IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\\n\\n    IERC20 token1 = IERC20(pair.token1());\\n    (uint Res0, uint Res1,) = pair.getReserves();\\n\\n    // decimals\\n    uint res0 = Res0*(10**token1.decimals());\\n    return((_amount*res0)/Res1); // return amount of token0 needed to buy token1\\n  }\\n\\n  function getPathForETHtoToken(address _token) public view returns (address[] memory) {\\n    address[] memory path = new address[](2);\\n    path[0] = uniswapRouter.WETH();\\n    path[1] = _token;\\n    \\n    return path;\\n  }\\n\\n  function getPathForTokenToToken(address _tokenIn, address _tokenOut) public view returns (address[] memory) {\\n    address[] memory path = new address[](3);\\n    if (_tokenIn == WETH || _tokenOut == WETH) {\\n      path = new address[](2);\\n      path[0] = _tokenIn;\\n      path[1] = _tokenOut;\\n    } else {\\n      path = new address[](3);\\n      path[0] = _tokenIn;\\n      path[1] = WETH;\\n      path[2] = _tokenOut;\\n    }\\n    return path;\\n  }\\n\\n  function getUSDCAmountOutMinForToken(address _tokenIn, uint _amountIn) external view returns (uint) {\\n    address[] memory path;\\n    address _tokenOut = usdcAddress;\\n    \\n    if (_tokenIn == WETH || _tokenOut == WETH) {\\n      path = new address[](2);\\n      path[0] = _tokenIn;\\n      path[1] = _tokenOut;\\n    } else {\\n      path = new address[](3);\\n      path[0] = _tokenIn;\\n      path[1] = WETH;\\n      path[2] = _tokenOut;\\n    }\\n\\n    // same length as path\\n    uint[] memory amountOutMins = IUniswapV2Router02(UNISWAP_ROUTER_ADDRESS).getAmountsOut(_amountIn, path);\\n\\n    return amountOutMins[path.length - 1];\\n  }\\n\\n  function getTokenAmountOutMinForUSDC(address _tokenOut, uint _amountIn) external view returns (uint) {\\n    address[] memory path;\\n    address _tokenIn = usdcAddress;\\n    \\n    if (_tokenIn == WETH || _tokenOut == WETH) {\\n      path = new address[](2);\\n      path[0] = _tokenIn;\\n      path[1] = _tokenOut;\\n    } else {\\n      path = new address[](3);\\n      path[0] = _tokenIn;\\n      path[1] = WETH;\\n      path[2] = _tokenOut;\\n    }\\n\\n    // same length as path\\n    uint[] memory amountOutMins = IUniswapV2Router02(UNISWAP_ROUTER_ADDRESS).getAmountsOut(_amountIn, path);\\n\\n    return amountOutMins[path.length - 1];\\n  }\\n  \\n  function setReceiverAddress(address _newReceiverAddress) public onlyOwner{\\n    receiverAddress = _newReceiverAddress;\\n  }\\n\\n  function withdrawETH() external onlyOwner {\\n      (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\n      require(success, \\\"Transfer failed.\\\");\\n  }\\n\\n  function withdrawTokens(address _tokenAddress) external onlyOwner {\\n      IERC20 token =  IERC20(_tokenAddress);\\n      bool success = token.transfer(msg.sender, token.balanceOf(address(this)));\\n      require(success, \\\"Token Transfer failed.\\\");\\n  }\\n\\n  function transferOwnership(address _newOwner) public onlyOwner{\\n    owner = _newOwner;\\n  }\\n\\n  // important to receive ETH\\n  receive() payable external {\\n    \\n  }\\n}\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_donation_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_order_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"donated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UNISWAP_FACTORY_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_ROUTER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"donateNativeCoin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_usdAmount\",\"type\":\"uint256\"}],\"name\":\"donateToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_usdAmount\",\"type\":\"uint256\"}],\"name\":\"donateUSDC\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donation_id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getPathForETHtoToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"getPathForTokenToToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"getTokenAmountOutMinForUSDC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"getUSDCAmountOutMinForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newReceiverAddress\",\"type\":\"address\"}],\"name\":\"setReceiverAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalDonationsByTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUSDC_donations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalUserDonationsByToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "USDCSwap", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}