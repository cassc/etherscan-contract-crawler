{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"details\": {\r\n        \"constantOptimizer\": true,\r\n        \"cse\": true,\r\n        \"deduplicate\": true,\r\n        \"inliner\": true,\r\n        \"jumpdestRemover\": true,\r\n        \"orderLiterals\": true,\r\n        \"peephole\": true,\r\n        \"yul\": true,\r\n        \"yulDetails\": {\r\n          \"optimizerSteps\": \"u\",\r\n          \"stackAllocation\": true\r\n        }\r\n      },\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/Structs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport { DCSProduct, DCSVault } from \\\"./cega-strategies/dcs/DCSStructs.sol\\\";\\nimport { IOracleEntry } from \\\"./oracle-entry/interfaces/IOracleEntry.sol\\\";\\n\\nuint32 constant DCS_STRATEGY_ID = 1;\\n\\nstruct DepositQueue {\\n    uint128 queuedDepositsTotalAmount;\\n    uint128 processedIndex;\\n    mapping(address => uint128) amounts;\\n    address[] depositors;\\n}\\n\\nstruct Withdrawer {\\n    address account;\\n    uint32 nextProductId;\\n}\\n\\nstruct ProductMetadata {\\n    string name;\\n    string tradeWinnerNftImage;\\n}\\n\\nstruct WithdrawalQueue {\\n    uint128 queuedWithdrawalSharesAmount;\\n    uint128 processedIndex;\\n    mapping(address => mapping(uint32 => uint256)) amounts;\\n    Withdrawer[] withdrawers;\\n    mapping(address => bool) withdrawingWithProxy;\\n}\\n\\nstruct CegaGlobalStorage {\\n    // Global information\\n    uint32 strategyIdCounter;\\n    uint32 productIdCounter;\\n    uint32[] strategyIds;\\n    mapping(uint32 => uint32) strategyOfProduct;\\n    mapping(uint32 => ProductMetadata) productMetadata;\\n    mapping(address => Vault) vaults;\\n    // DCS information\\n    mapping(uint32 => DCSProduct) dcsProducts;\\n    mapping(uint32 => DepositQueue) dcsDepositQueues;\\n    mapping(address => DCSVault) dcsVaults;\\n    mapping(address => WithdrawalQueue) dcsWithdrawalQueues;\\n    // vaultAddress => (timestamp => price)\\n    mapping(address => mapping(uint40 => uint128)) oraclePriceOverride;\\n}\\n\\nstruct Vault {\\n    uint128 totalAssets;\\n    uint64 auctionWinnerTokenId;\\n    uint16 yieldFeeBps;\\n    uint16 managementFeeBps;\\n    uint32 productId;\\n    address auctionWinner;\\n    uint40 tradeStartDate;\\n    VaultStatus vaultStatus;\\n    IOracleEntry.DataSource dataSource;\\n    bool isInDispute;\\n}\\n\\nenum VaultStatus {\\n    DepositsClosed,\\n    DepositsOpen,\\n    NotTraded,\\n    Traded,\\n    TradeExpired,\\n    FeesCollected,\\n    WithdrawalQueueProcessed,\\n    Zombie\\n}\\n\\nstruct MMNFTMetadata {\\n    address vaultAddress;\\n    uint40 tradeStartDate;\\n    uint40 tradeEndDate;\\n    uint16 aprBps;\\n    uint128 notional;\\n    uint128 initialSpotPrice;\\n    uint128 strikePrice;\\n}\\n\"\r\n    },\r\n    \"contracts/cega-strategies/dcs/DCSStructs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nenum DCSOptionType {\\n    BuyLow,\\n    SellHigh\\n}\\n\\nenum SettlementStatus {\\n    NotAuctioned,\\n    Auctioned,\\n    InitialPremiumPaid,\\n    AwaitingSettlement,\\n    Settled,\\n    Defaulted\\n}\\n\\nstruct DCSProductCreationParams {\\n    uint128 maxUnderlyingAmountLimit;\\n    uint128 minDepositAmount;\\n    uint128 minWithdrawalAmount;\\n    address quoteAssetAddress;\\n    address baseAssetAddress;\\n    DCSOptionType dcsOptionType;\\n    uint8 daysToStartLateFees;\\n    uint8 daysToStartAuctionDefault;\\n    uint8 daysToStartSettlementDefault;\\n    uint16 lateFeeBps;\\n    uint16 strikeBarrierBps;\\n    uint40 tenorInSeconds;\\n    uint8 disputePeriodInHours;\\n    string name;\\n    string tradeWinnerNftImage;\\n}\\n\\nstruct DCSProduct {\\n    uint128 maxUnderlyingAmountLimit;\\n    uint128 minDepositAmount;\\n    uint128 minWithdrawalAmount;\\n    uint128 sumVaultUnderlyingAmounts; //revisit later\\n    address quoteAssetAddress; // should be immutable\\n    uint40 tenorInSeconds;\\n    uint16 lateFeeBps;\\n    uint8 daysToStartLateFees;\\n    address baseAssetAddress; // should be immutable\\n    uint16 strikeBarrierBps;\\n    uint8 daysToStartAuctionDefault;\\n    uint8 daysToStartSettlementDefault;\\n    uint8 disputePeriodInHours;\\n    DCSOptionType dcsOptionType;\\n    bool isDepositQueueOpen;\\n    address[] vaults;\\n}\\n\\nstruct DCSVault {\\n    uint128 initialSpotPrice;\\n    uint128 strikePrice;\\n    uint128 totalYield;\\n    uint16 aprBps;\\n    SettlementStatus settlementStatus;\\n    bool isPayoffInDepositAsset;\\n}\\n\"\r\n    },\r\n    \"contracts/common/ProductViewEntry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport { ProductMetadata } from \\\"../Structs.sol\\\";\\nimport { IProductViewEntry } from \\\"./interfaces/IProductViewEntry.sol\\\";\\nimport { CegaStorage, CegaGlobalStorage } from \\\"../storage/CegaStorage.sol\\\";\\n\\ncontract ProductViewEntry is IProductViewEntry, CegaStorage {\\n    function getStrategyOfProduct(\\n        uint32 productId\\n    ) external view returns (uint32) {\\n        CegaGlobalStorage storage cgs = getStorage();\\n        return cgs.strategyOfProduct[productId];\\n    }\\n\\n    function getLatestProductId() external view returns (uint32) {\\n        CegaGlobalStorage storage cgs = getStorage();\\n        return cgs.productIdCounter;\\n    }\\n\\n    function getProductMetadata(\\n        uint32 productId\\n    ) external view returns (ProductMetadata memory) {\\n        CegaGlobalStorage storage cgs = getStorage();\\n        return cgs.productMetadata[productId];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/interfaces/IProductViewEntry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\nimport { ProductMetadata } from \\\"../../Structs.sol\\\";\\n\\npragma solidity ^0.8.17;\\n\\ninterface IProductViewEntry {\\n    function getStrategyOfProduct(\\n        uint32 productId\\n    ) external view returns (uint32);\\n\\n    function getLatestProductId() external view returns (uint32);\\n\\n    function getProductMetadata(\\n        uint32 productId\\n    ) external view returns (ProductMetadata memory);\\n}\\n\"\r\n    },\r\n    \"contracts/oracle-entry/interfaces/IOracleEntry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IOracleEntry {\\n    enum DataSource {\\n        None,\\n        Pyth\\n    }\\n\\n    event DataSourceAdapterSet(DataSource dataSource, address adapter);\\n\\n    /// @notice Gets `asset` price at `timestamp` in terms of USD using `dataSource`\\n    function getSinglePrice(\\n        address asset,\\n        uint40 timestamp,\\n        DataSource dataSource\\n    ) external view returns (uint128);\\n\\n    /// @notice Gets `baseAsset` price at `timestamp` in terms of `quoteAsset` using `dataSource`\\n    function getPrice(\\n        address baseAsset,\\n        address quoteAsset,\\n        uint40 timestamp,\\n        DataSource dataSource\\n    ) external view returns (uint128);\\n\\n    /// @notice Sets data source adapter\\n    function setDataSourceAdapter(\\n        DataSource dataSource,\\n        address adapter\\n    ) external;\\n\\n    function getTargetDecimals() external pure returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/storage/CegaStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport { CegaGlobalStorage } from \\\"../Structs.sol\\\";\\n\\ncontract CegaStorage {\\n    bytes32 private constant CEGA_STORAGE_POSITION =\\n        bytes32(uint256(keccak256(\\\"cega.global.storage\\\")) - 1);\\n\\n    function getStorage() internal pure returns (CegaGlobalStorage storage ds) {\\n        bytes32 position = CEGA_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"getLatestProductId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"productId\",\"type\":\"uint32\"}],\"name\":\"getProductMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tradeWinnerNftImage\",\"type\":\"string\"}],\"internalType\":\"struct ProductMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"productId\",\"type\":\"uint32\"}],\"name\":\"getStrategyOfProduct\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ProductViewEntry", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}