{"SourceCode": "pragma solidity ^0.5.17;\r\n\r\ninterface ERC20Interface {\r\n  function allowance(address tokenOwner, address spender)\r\n    external\r\n    view\r\n    returns (uint256 remaining);\r\n\r\n  function transfer(address to, uint256 tokens) external returns (bool success);\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokens\r\n  ) external returns (bool success);\r\n}\r\n\r\ninterface Proxy {\r\n    function postOutgoingMessage(\r\n        bytes32 targetChainHash,\r\n        address targetContract,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// @title BrawlerBuyer\r\n// @dev handles purchase of brawlers on mainnet Ethereum\r\n// @author Block Brawlers (https://www.blockbrawlers.com)\r\n// (c) 2022 Block Brawlers LLC. All Rights Reserved. This code is not open source.\r\ncontract BrawlerBuyer {\r\n  address public owner;\r\n  address payable public recipient;\r\n\r\n  Proxy public proxy; // Rinkeby address\r\n  bytes32 public targetChainHash;\r\n  address public targetContract;\r\n\r\n  ERC20Interface[7] currencies;\r\n  uint256[7] prices;\r\n  uint256[7] limits;\r\n  bool _isOnSale = false;\r\n\r\n  mapping(address => mapping(uint256 => uint256)) userPurchased;\r\n  uint256[7] totalPurchased;\r\n\r\n  event Purchase(\r\n    uint256 packType,\r\n    address sender,\r\n    address currency,\r\n    uint256 price,\r\n    uint256 timestamp\r\n  );\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    recipient = msg.sender;\r\n\r\n    // 300 @ 1 eth; start at 10%\r\n    limits[1] = 30;\r\n    prices[1] = 10 ** 18;\r\n    totalPurchased[1] = 10;\r\n     // 5000 @ 0.08 eth\r\n     limits[2] = 500;\r\n     prices[2] = 8 * 10 ** 16;\r\n    totalPurchased[2] = 70;\r\n     // 5000 @ 500 SKL\r\n     limits[3] = 500;\r\n     prices[3] = 500 * 10 ** 18;\r\n     currencies[3] = ERC20Interface(0x00c83aeCC790e8a4453e5dD3B0B4b3680501a7A7); // SKALE\r\n    totalPurchased[3] = 60;\r\n     // 1000 @ 5000 SKL\r\n     limits[4] = 100;\r\n     prices[4] = 5000 * 10 ** 18;\r\n     currencies[4] = ERC20Interface(0x00c83aeCC790e8a4453e5dD3B0B4b3680501a7A7); // SKALE\r\n    totalPurchased[4] = 30;\r\n     // 2000 @ 0.15 eth\r\n     limits[5] = 200;\r\n     prices[5] = 15 * 10 ** 16;\r\n    totalPurchased[5] = 90;\r\n     // 1500 @ 3000 GAME\r\n     limits[6] = 150;\r\n     prices[6] = 3000 * 10 ** 18;\r\n     currencies[6] = ERC20Interface(0x63f88A2298a5c4AEE3c216Aa6D926B184a4b2437); // GAME\r\n    totalPurchased[6] = 50;\r\n  }\r\n\r\n  // @dev Access modifier for Owner-only functionality\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner || msg.sender == recipient, \"onlyOwner\");\r\n    _;\r\n  }\r\n\r\n  // Pack #0 will always show as 0; it doesn't exist.\r\n  function getPacks()\r\n    external\r\n    view\r\n    returns (\r\n      address[7] memory currency,\r\n      uint256[7] memory price,\r\n      uint256[7] memory limit,\r\n      uint256[7] memory purchased,\r\n      bool isOnSale\r\n    )\r\n  {\r\n    for (uint256 i = 1; i < 7; i++) {\r\n      currency[i] = address(currencies[i]);\r\n      limit[i] = limits[i];\r\n      price[i] = prices[i];\r\n      purchased[i] = totalPurchased[i];\r\n    }\r\n    isOnSale = _isOnSale;\r\n  }\r\n\r\n  // Pack #0 will always show as 0; it doesn't exist.\r\n  function getPacksForUser(address user)\r\n    external\r\n    view\r\n    returns (\r\n      address[7] memory currency,\r\n      uint256[7] memory price,\r\n      uint256[7] memory limit,\r\n      uint256[7] memory purchased,\r\n      uint256[7] memory approvals,\r\n      uint256[7] memory hasBought,\r\n      bool isOnSale\r\n    )\r\n  {\r\n    for (uint256 i = 1; i < 7; i++) {\r\n      currency[i] = address(currencies[i]);\r\n      limit[i] = limits[i];\r\n      price[i] = prices[i];\r\n      purchased[i] = totalPurchased[i];\r\n      approvals[i] = address(currencies[i]) == address(0)\r\n        ? 2**256 - 1\r\n        : currencies[i].allowance(user, address(this));\r\n      hasBought[i] = userPurchased[user][i];\r\n    }\r\n    isOnSale = _isOnSale;\r\n  }\r\n\r\n  function setProxyInfo(address _proxy, address _targetContract, string calldata _targetChain)\r\n    external\r\n    onlyOwner\r\n  {\r\n      proxy = Proxy(_proxy);\r\n      targetContract = _targetContract;\r\n      targetChainHash = keccak256(abi.encodePacked(_targetChain));\r\n  }\r\n\r\n  function setRecipient(address recipient_) external onlyOwner {\r\n    recipient = address(uint160(recipient_));\r\n  }\r\n\r\n  function setPackLimits(\r\n    uint256 pack,\r\n    address currency,\r\n    uint256 limit,\r\n    uint256 price\r\n  ) external onlyOwner {\r\n    require(pack >= 1 && pack <= 6, \"valid packs are 1 to 6, inclusive\");\r\n    limits[pack] = limit;\r\n    prices[pack] = price;\r\n    currencies[pack] = ERC20Interface(currency);\r\n  }\r\n\r\n  function setOnSale(bool onSale) external onlyOwner {\r\n    _isOnSale = onSale;\r\n  }\r\n\r\n  function withdrawBalance(uint256 amount) external onlyOwner {\r\n    msg.sender.transfer(amount);\r\n  }\r\n\r\n  function buyBrawlers(uint256 packType) public payable {\r\n    require(_isOnSale, \"must be on sale\");\r\n    require(tx.origin == msg.sender, \"safety; must buy from an EOA\");\r\n    require(\r\n      packType >= 1 && packType <= 6,\r\n      \"valid packs are 1 to 6, inclusive\"\r\n    );\r\n    require(\r\n      userPurchased[msg.sender][packType] == 0,\r\n      \"user must not have pack\"\r\n    );\r\n    uint256 price = prices[packType];\r\n    require(price > 0, \"price must be non zero\");\r\n\r\n    uint256 limit = limits[packType];\r\n    uint256 purchased = totalPurchased[packType];\r\n    require(purchased < limit, \"buy limit reached\");\r\n\r\n    ERC20Interface currency = currencies[packType];\r\n    if (address(currency) == address(0)) {\r\n      require(msg.value == price, \"eth purchase, must send price in value\");\r\n    } else {\r\n      bool isSuccess = currency.transferFrom(msg.sender, recipient, price);\r\n      require(isSuccess, \"transfer must have happened\");\r\n    }\r\n\r\n    emit Purchase(\r\n      packType,\r\n      msg.sender,\r\n      address(currency),\r\n      price,\r\n      block.timestamp\r\n    );\r\n\r\n    userPurchased[msg.sender][packType] = block.timestamp;\r\n    totalPurchased[packType] = purchased + 1;\r\n    proxy.postOutgoingMessage(targetChainHash, targetContract, abi.encode(msg.sender, packType));\r\n  }\r\n\r\n  // @dev Do not allow ETH to be sent here\r\n  function() external payable {\r\n    require(false, \"not payable\");\r\n  }\r\n}", "ABI": "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"packType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"packType\",\"type\":\"uint256\"}],\"name\":\"buyBrawlers\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPacks\",\"outputs\":[{\"internalType\":\"address[7]\",\"name\":\"currency\",\"type\":\"address[7]\"},{\"internalType\":\"uint256[7]\",\"name\":\"price\",\"type\":\"uint256[7]\"},{\"internalType\":\"uint256[7]\",\"name\":\"limit\",\"type\":\"uint256[7]\"},{\"internalType\":\"uint256[7]\",\"name\":\"purchased\",\"type\":\"uint256[7]\"},{\"internalType\":\"bool\",\"name\":\"isOnSale\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPacksForUser\",\"outputs\":[{\"internalType\":\"address[7]\",\"name\":\"currency\",\"type\":\"address[7]\"},{\"internalType\":\"uint256[7]\",\"name\":\"price\",\"type\":\"uint256[7]\"},{\"internalType\":\"uint256[7]\",\"name\":\"limit\",\"type\":\"uint256[7]\"},{\"internalType\":\"uint256[7]\",\"name\":\"purchased\",\"type\":\"uint256[7]\"},{\"internalType\":\"uint256[7]\",\"name\":\"approvals\",\"type\":\"uint256[7]\"},{\"internalType\":\"uint256[7]\",\"name\":\"hasBought\",\"type\":\"uint256[7]\"},{\"internalType\":\"bool\",\"name\":\"isOnSale\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"contract Proxy\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recipient\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"onSale\",\"type\":\"bool\"}],\"name\":\"setOnSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pack\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPackLimits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_targetContract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_targetChain\",\"type\":\"string\"}],\"name\":\"setProxyInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"}],\"name\":\"setRecipient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"targetChainHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"targetContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BrawlerBuyer", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://b1e3c65bbea33a495a583b07e06a94d1bd5da5eec54c8482e4a1ad227ceffb95"}