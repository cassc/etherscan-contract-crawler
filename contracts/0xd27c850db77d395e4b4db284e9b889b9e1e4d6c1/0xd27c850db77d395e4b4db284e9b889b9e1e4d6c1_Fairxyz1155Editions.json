{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AddressUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract MulticallUpgradeable is Initializable {\\n    function __Multicall_init() internal onlyInitializing {\\n    }\\n\\n    function __Multicall_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = AddressUpgradeable.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v2/Editions/Fairxyz1155Editions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// @author: Fair.xyz dev\\n\\npragma solidity 0.8.19;\\n\\nimport {FairxyzEditionsUpgradeable} from \\\"./FairxyzEditionsUpgradeable.sol\\\";\\nimport {Fairxyz1155Upgradeable} from \\\"../ERC1155/Fairxyz1155Upgradeable.sol\\\";\\nimport {FairxyzOperatorFiltererUpgradeable} from \\\"../OperatorFilterer/FairxyzOperatorFiltererUpgradeable.sol\\\";\\n\\nimport {EditionCreateParams} from \\\"../interfaces/IFairxyzEditions.sol\\\";\\nimport {IERC2981Upgradeable} from \\\"../interfaces/IERC2981Upgradeable.sol\\\";\\nimport {IFairxyz1155Editions} from \\\"../interfaces/IFairxyz1155Editions.sol\\\";\\nimport {Stage} from \\\"../interfaces/IFairxyzMintStagesRegistry.sol\\\";\\nimport {ITokenURI} from \\\"../interfaces/ITokenURI.sol\\\";\\n\\n/**\\n * @title Fair.xyz 1155 Editions\\n * @author Fair.xyz Developers\\n *\\n * @dev This contract is the ERC-1155 implementation for the Fair.xyz Editions Collections.\\n * @dev It inherits the FairxyzEditionsUpgradeable contract, adding ERC-1155 specific functionality.\\n * @dev It also inherits the FairxyzOperatorFiltererUpgradeable contract, adding operator filtering functionality for token approvals and transfers.\\n */\\ncontract Fairxyz1155Editions is\\n    Fairxyz1155Upgradeable,\\n    FairxyzOperatorFiltererUpgradeable,\\n    IFairxyz1155Editions,\\n    FairxyzEditionsUpgradeable\\n{\\n    // Token name\\n    string public name;\\n\\n    // Token symbol\\n    string public symbol;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(\\n        address fairxyzStagesRegistry_,\\n        uint256 maxRecipientsPerAirdrop_,\\n        address operatorFilterRegistry_,\\n        address operatorFilterSubscription_\\n    )\\n        FairxyzEditionsUpgradeable(\\n            fairxyzStagesRegistry_,\\n            type(uint40).max,\\n            maxRecipientsPerAirdrop_\\n        )\\n        FairxyzOperatorFiltererUpgradeable(\\n            operatorFilterRegistry_,\\n            operatorFilterSubscription_\\n        )\\n    {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice Initialise the collection.\\n     *\\n     * @param name_ The name of the collection.\\n     * @param symbol_ The symbol of the collection.\\n     * @param owner_ The address which should own the contract after initialization.\\n     * @param defaultRoyalty_ The default royalty fraction/percentage for the collection.\\n     * @param editions_ Initial editions to create.\\n     * @param operatorFilterEnabled_ Whether operator filtering should be enabled.\\n     * @param defaultMintingExtension_ The default minting extension enabled from deployment\\n     * @param defaultRoyaltyExtension_ The default royalty extension enabled from deployment\\n     */\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        address owner_,\\n        uint96 defaultRoyalty_,\\n        EditionCreateParams[] calldata editions_,\\n        bool operatorFilterEnabled_,\\n        address defaultMintingExtension_,\\n        address defaultRoyaltyExtension_\\n    ) external initializer {\\n        __Fairxyz1155_init();\\n        __FairxyzEditions_init(\\n            owner_,\\n            defaultMintingExtension_,\\n            defaultRoyaltyExtension_\\n        );\\n        __FairxyzOperatorFilterer_init(operatorFilterEnabled_);\\n\\n        _batchCreateEditionsWithStages(editions_);\\n\\n        if (defaultRoyalty_ > 0) {\\n            _setDefaultRoyalty(owner_, defaultRoyalty_);\\n        }\\n\\n        name = name_;\\n        symbol = symbol_;\\n    }\\n\\n    // * PUBLIC * //\\n\\n    /**\\n     * @dev See {IFairxyz1155Editions-burn}.\\n     */\\n    function burn(\\n        address from,\\n        uint256 editionId,\\n        uint256 amount\\n    ) external override {\\n        address operator = msg.sender;\\n        if (operator != from && !isApprovedForAll(from, operator))\\n            revert NotApprovedOrOwner();\\n\\n        _burn(from, editionId, amount);\\n        _editionBurnedCount[editionId] += amount;\\n    }\\n\\n    // * OVERRIDES * //\\n\\n    /**\\n     * @dev See {IERC2981Upgradeable-royaltyInfo}.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view override returns (address receiver, uint256 royaltyAmount) {\\n        if (_royaltyExtension != address(0)) {\\n            return\\n                IERC2981Upgradeable(_royaltyExtension).royaltyInfo(\\n                    tokenId,\\n                    salePrice\\n                );\\n        }\\n\\n        Royalty memory royalty = _editionRoyalty[tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyalty;\\n        }\\n\\n        receiver = royalty.receiver;\\n        royaltyAmount =\\n            (salePrice * royalty.royaltyFraction) /\\n            ROYALTY_DENOMINATOR;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     * @dev Modified to check operator against Operator Filter Registry.\\n     */\\n    function setApprovalForAll(\\n        address operator,\\n        bool approved\\n    ) public override onlyAllowedOperatorApproval(operator) {\\n        super.setApprovalForAll(operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC165Upgradeable-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    )\\n        public\\n        view\\n        override(Fairxyz1155Upgradeable, FairxyzEditionsUpgradeable)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IFairxyz1155Editions).interfaceId ||\\n            Fairxyz1155Upgradeable.supportsInterface(interfaceId) ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataUpgradeable-uri}.\\n     */\\n    function uri(uint256 id) external view override returns (string memory) {\\n        if (_editionURIExtension[id] != address(0)) {\\n            return ITokenURI(_editionURIExtension[id]).tokenURI(id);\\n        }\\n        if (!_editionExists(id)) return \\\"\\\";\\n        return _editionURI[id];\\n    }\\n\\n    /**\\n     * @dev See {Fairxyz1155Upgradeable-_beforeTokenTransfer}.\\n     * @dev Modified to check `msg.sender` against Operator Filter Registry.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory,\\n        bytes memory\\n    ) internal virtual override onlyAllowedOperator(operator, from) {\\n        // we only want to implement soulbound guard if the token is being transferred between two non-zero addresses\\n        if (from == address(0) || to == address(0)) {\\n            return;\\n        }\\n\\n        for (uint256 i; i < ids.length; ) {\\n            uint256 id = ids[i];\\n            if (_editions[id].soulbound) {\\n                revert NotTransferable();\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev See {FairxyzEditionsUpgradeable-_emitMetadataUpdateEvent}.\\n     */\\n    function _emitMetadataUpdateEvent(\\n        uint256 editionId,\\n        string memory editionURI\\n    ) internal override {\\n        emit URI(editionURI, editionId);\\n    }\\n\\n    /**\\n     * @dev See {OperatorFiltererUpgradeable-_isOperatorFilterAdmin}.\\n     */\\n    function _isOperatorFilterAdmin(\\n        address sender\\n    ) internal view virtual override returns (bool) {\\n        return sender == owner() || hasRole(DEFAULT_ADMIN_ROLE, sender);\\n    }\\n\\n    /**\\n     * @dev See {FairxyzEditionsUpgradeable-_mintEditionTokens}.\\n     */\\n    function _mintEditionTokens(\\n        address recipient,\\n        uint256 editionId,\\n        uint256 quantity,\\n        uint256\\n    ) internal override {\\n        if (quantity == 0) revert InvalidMintQuantity();\\n\\n        _mint(recipient, editionId, quantity, \\\"\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v2/Editions/FairxyzEditionsBaseUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// @author: Fair.xyz dev\\n\\npragma solidity 0.8.19;\\n\\nimport {AccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {Ownable2StepUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {MulticallUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol\\\";\\n\\n/**\\n * @title Fair.xyz Editions Base Upgradeable\\n * @dev This contract is the base contract for all Fair.xyz Editions contracts.\\n * @dev It inherits the OpenZeppelin AccessControlUpgradeable, Ownable2StepUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable and MulticallUpgradeable contracts.\\n */\\nabstract contract FairxyzEditionsBaseUpgradeable is\\n    Initializable,\\n    AccessControlUpgradeable,\\n    MulticallUpgradeable,\\n    Ownable2StepUpgradeable,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    /**\\n     * @dev See {IERC165Upgradeable-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override returns (bool) {\\n        return AccessControlUpgradeable.supportsInterface(interfaceId);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/v2/Editions/FairxyzEditionsConstants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// @author: Fair.xyz dev\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title Fair.xyz Editions Constants\\n * @dev This contract contains all of the constants and immutable values used in the Fair.xyz Editions contracts.\\n * @dev IMPORTANT: This should not have any variables which use storage slots - as a result it is possible to be inherited by upgradeable contracts without the need for a storage 'gap'.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\ncontract FairxyzEditionsConstants {\\n    // * SIGNATURES * //\\n    bytes32 internal constant EIP712_NAME_HASH = keccak256(\\\"Fair.xyz\\\");\\n    bytes32 internal constant EIP712_VERSION_HASH = keccak256(\\\"2.0.0\\\");\\n    bytes32 internal constant EIP712_DOMAIN_TYPE_HASH =\\n        keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n    bytes32 internal constant EIP712_EDITION_MINT_TYPE_HASH =\\n        keccak256(\\n            \\\"EditionMint(uint256 editionId,address recipient,uint256 quantity,uint256 nonce,uint256 maxMints)\\\"\\n        );\\n\\n    // * ROLES * //\\n    bytes32 internal constant CREATOR_ROLE = keccak256(\\\"CREATOR_ROLE\\\");\\n\\n    bytes32 internal constant EXTERNAL_MINTER_ROLE =\\n        keccak256(\\\"EXTERNAL_MINTER_ROLE\\\");\\n\\n    uint256 internal constant ROYALTY_DENOMINATOR = 10000;\\n    uint256 internal constant SIGNATURE_VALID_BLOCKS = 75;\\n\\n    // * IMMUTABLES * //\\n    address internal immutable FAIRXYZ_STAGES_REGISTRY;\\n\\n    uint256 internal immutable MAX_EDITION_SIZE;\\n    uint256 internal immutable MAX_RECIPIENTS_PER_AIRDROP;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(\\n        address fairxyzStagesRegistry_,\\n        uint256 maxEditionSize_,\\n        uint256 maxRecipientsPerAirdrop_\\n    ) {\\n        FAIRXYZ_STAGES_REGISTRY = fairxyzStagesRegistry_;\\n\\n        MAX_EDITION_SIZE = maxEditionSize_;\\n        MAX_RECIPIENTS_PER_AIRDROP = maxRecipientsPerAirdrop_;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v2/Editions/FairxyzEditionsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// @author: Fair.xyz dev\\n\\npragma solidity 0.8.19;\\n\\nimport {AccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {AddressUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport {ECDSAUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport {IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\nimport {FairxyzEditionsBaseUpgradeable} from \\\"./FairxyzEditionsBaseUpgradeable.sol\\\";\\nimport {FairxyzEditionsConstants} from \\\"./FairxyzEditionsConstants.sol\\\";\\n\\nimport {IERC2981Upgradeable} from \\\"../interfaces/IERC2981Upgradeable.sol\\\";\\nimport {Edition, EditionCreateParams, EditionMinter, EditionMintingHandler, IFairxyzEditions} from \\\"../interfaces/IFairxyzEditions.sol\\\";\\n\\nimport {IFairxyzMintStagesRegistry, Stage, FairxyzParameters} from \\\"../interfaces/IFairxyzMintStagesRegistry.sol\\\";\\n\\nabstract contract FairxyzEditionsUpgradeable is\\n    FairxyzEditionsBaseUpgradeable,\\n    FairxyzEditionsConstants,\\n    IERC2981Upgradeable,\\n    IFairxyzEditions\\n{\\n    using AddressUpgradeable for address payable;\\n    using ECDSAUpgradeable for bytes32;\\n    using StringsUpgradeable for uint256;\\n\\n    address internal _primarySaleReceiver;\\n\\n    Royalty internal _defaultRoyalty;\\n\\n    uint256 private _editionsCount;\\n\\n    mapping(uint256 => Edition) internal _editions;\\n\\n    mapping(uint256 => bool) internal _editionDeleted;\\n\\n    mapping(uint256 => uint256) internal _editionBurnedCount;\\n\\n    mapping(uint256 => uint256) internal _editionMintedCount;\\n\\n    mapping(uint256 => mapping(address => EditionMinter))\\n        private _editionMinters;\\n\\n    mapping(uint256 => Royalty) internal _editionRoyalty;\\n\\n    mapping(uint256 => mapping(uint256 => mapping(address => uint256)))\\n        private _editionStageMints;\\n\\n    mapping(uint256 => string) internal _editionURI;\\n\\n    mapping(uint256 => address) internal _editionURIExtension;\\n\\n    address internal _mintingExtension;\\n\\n    address internal _royaltyExtension;\\n\\n    modifier onlyDefaultAdmin() {\\n        _checkRole(DEFAULT_ADMIN_ROLE);\\n        _;\\n    }\\n\\n    modifier onlyAirdropRoles() {\\n        if (!hasRole(CREATOR_ROLE, msg.sender)) {\\n            _checkRole(EXTERNAL_MINTER_ROLE);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyCreator() {\\n        _checkRole(CREATOR_ROLE);\\n        _;\\n    }\\n\\n    modifier onlyExistingEdition(uint256 editionId) {\\n        if (!_editionExists(editionId)) revert EditionDoesNotExist();\\n        _;\\n    }\\n\\n    modifier onlyValidRoyaltyFraction(uint256 royaltyFraction) {\\n        if (royaltyFraction > ROYALTY_DENOMINATOR)\\n            revert InvalidRoyaltyFraction();\\n        _;\\n    }\\n\\n    receive() external payable virtual {}\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(\\n        address fairxyzStagesRegistry_,\\n        uint256 maxEditionSize_,\\n        uint256 maxRecipientsPerAirdrop_\\n    )\\n        FairxyzEditionsConstants(\\n            fairxyzStagesRegistry_,\\n            maxEditionSize_,\\n            maxRecipientsPerAirdrop_\\n        )\\n    {\\n        _disableInitializers();\\n    }\\n\\n    // * INITIALIZERS * //\\n\\n    function __FairxyzEditions_init(\\n        address owner_,\\n        address defaultMintingExtension_,\\n        address defaultRoyaltyExtension_\\n    ) internal onlyInitializing {\\n        __FairxyzEditions_init_unchained(\\n            owner_,\\n            defaultMintingExtension_,\\n            defaultRoyaltyExtension_\\n        );\\n    }\\n\\n    function __FairxyzEditions_init_unchained(\\n        address owner_,\\n        address defaultMintingExtension_,\\n        address defaultRoyaltyExtension_\\n    ) internal onlyInitializing {\\n        if (owner_ == address(0)) {\\n            revert ZeroAddress();\\n        }\\n\\n        _primarySaleReceiver = owner_;\\n        _transferOwnership(owner_);\\n\\n        if (defaultMintingExtension_ != address(0)) {\\n            _setMintingExtension(defaultMintingExtension_);\\n        }\\n        if (defaultRoyaltyExtension_ != address(0)) {\\n            _setRoyaltyExtension(defaultRoyaltyExtension_);\\n        }\\n    }\\n\\n    // * PUBLIC * //\\n\\n    /**\\n     * @dev See {IFairxyzEditions-mintEdition}.\\n     */\\n\\n    function mintEdition(\\n        uint256 editionId,\\n        address recipient,\\n        uint256 quantity,\\n        uint40 signatureNonce,\\n        uint256 signatureMaxMints,\\n        bytes memory signature\\n    ) external payable override returns (EditionMintingHandler memory handler) {\\n        bool isExtension;\\n\\n        if (_mintingExtension != address(0)) {\\n            if (msg.sender != _mintingExtension) revert SenderIsNotExtension();\\n            isExtension = true;\\n        }\\n\\n        (\\n            FairxyzParameters memory fairxyzParameters,\\n            uint256 stageIndex,\\n            Stage memory stage\\n        ) = _stagesRegistry().viewActiveStage(address(this), editionId);\\n\\n        _checkMintSignature(\\n            editionId,\\n            recipient,\\n            quantity,\\n            signatureNonce,\\n            signatureMaxMints,\\n            stage.signatureReleased,\\n            signature,\\n            fairxyzParameters.fairxyzSigner\\n        );\\n\\n        uint256 costPerToken;\\n\\n        if (!isExtension) {\\n            costPerToken = stage.price + fairxyzParameters.fairxyzFee;\\n            _verifyPayment(quantity, costPerToken);\\n        }\\n\\n        handler = _handleEditionMinting(\\n            editionId,\\n            recipient,\\n            quantity,\\n            signatureNonce,\\n            signatureMaxMints,\\n            stageIndex,\\n            stage\\n        );\\n\\n        if (!isExtension) {\\n            payable(fairxyzParameters.fairxyzWithdrawAddress).sendValue(\\n                fairxyzParameters.fairxyzFee * handler.allowedQuantity\\n            );\\n        }\\n\\n        _handleEmissionAndTransfers(\\n            editionId,\\n            stageIndex,\\n            recipient,\\n            handler.allowedQuantity,\\n            handler.editionMintedTotal,\\n            quantity,\\n            costPerToken\\n        );\\n\\n        return handler;\\n    }\\n\\n    /**\\n     * @dev See {IFairxyzEditions-editionTotalSupply}.\\n     */\\n    function editionTotalSupply(\\n        uint256 editionId\\n    ) public view virtual override returns (uint256) {\\n        return _editionMintedCount[editionId] - _editionBurnedCount[editionId];\\n    }\\n\\n    /**\\n     * @dev See {IFairxyzEditions-getEdition}.\\n     */\\n    function getEdition(\\n        uint256 editionId\\n    )\\n        public\\n        view\\n        virtual\\n        onlyExistingEdition(editionId)\\n        returns (Edition memory)\\n    {\\n        return _editions[editionId];\\n    }\\n\\n    /**\\n     * @dev See {IFairxyzEditions-totalSupply}.\\n     */\\n    function totalSupply()\\n        external\\n        view\\n        virtual\\n        override\\n        returns (uint256 supply)\\n    {\\n        for (uint256 i = 1; i <= _editionsCount; ) {\\n            supply += editionTotalSupply(i);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // * ADMIN * //\\n\\n    /**\\n     * @notice Airdrop Tokens for a Single Edition to Multiple Wallets\\n     * @dev See {IFairEditionsUpgradeable-airdropEdition}.\\n     *\\n     * Requirements:\\n     * - the edition must exist\\n     * - number of recipients must not be greater than `MAX_RECIPIENTS_PER_AIRDROP`\\n     * - quantity must not be greater than `MAX_MINTS_PER_TRANSACTION`\\n     *\\n     * Emits an {EditionAirdrop} event.\\n     */\\n    function airdropEdition(\\n        uint256 editionId,\\n        uint256 quantity,\\n        address[] memory recipients\\n    )\\n        external\\n        virtual\\n        override\\n        onlyAirdropRoles\\n        onlyExistingEdition(editionId)\\n    {\\n        uint256 numberOfRecipients = recipients.length;\\n        if (\\n            numberOfRecipients == 0 ||\\n            numberOfRecipients > _maxRecipientsPerAirdrop()\\n        ) revert InvalidNumberOfRecipients();\\n\\n        // check and update available supply\\n        uint256 totalQuantity = numberOfRecipients * quantity;\\n        uint256 editionMintedTotal = _editionMintedCount[editionId];\\n\\n        if (\\n            totalQuantity + editionMintedTotal >\\n            _editionMintLimit(_editions[editionId].maxSupply)\\n        ) revert NotEnoughSupplyRemaining();\\n\\n        _editionMintedCount[editionId] = editionMintedTotal + totalQuantity;\\n\\n        uint256 i;\\n        do {\\n            address recipient = recipients[i];\\n            _mintEditionTokens(\\n                recipient,\\n                editionId,\\n                quantity,\\n                editionMintedTotal\\n            );\\n\\n            unchecked {\\n                editionMintedTotal += quantity;\\n                ++i;\\n            }\\n        } while (i < numberOfRecipients);\\n\\n        emit EditionAirdrop(\\n            editionId,\\n            _stagesRegistry().viewLatestStageIndex(address(this), editionId), // even though airdrops do not count towards stage mints, it is useful to know at what stage it occurred\\n            recipients,\\n            quantity,\\n            editionMintedTotal\\n        );\\n    }\\n\\n    /**\\n     * @notice Add a New Edition\\n     * @dev See {IFairxyzEditions-createEdition}.\\n     */\\n    function createEditions(\\n        EditionCreateParams[] calldata editions\\n    ) external virtual override onlyCreator {\\n        _batchCreateEditionsWithStages(editions);\\n    }\\n\\n    /**\\n     * @notice Delete Edition\\n     * @dev See {IFairxyzEditions-deleteEdition}.\\n     */\\n    function deleteEdition(\\n        uint256 editionId\\n    ) external virtual override onlyCreator onlyExistingEdition(editionId) {\\n        if (_editionMintedCount[editionId] > 0) revert EditionAlreadyMinted();\\n        _deleteEdition(editionId);\\n    }\\n\\n    /**\\n     * @notice Disable Signature Requirement for an Edition\\n     * @dev See {IFairxyzEditions-releaseEditionSignature}.\\n     */\\n    function releaseEditionSignature(\\n        uint256 editionId\\n    ) external virtual override onlyCreator onlyExistingEdition(editionId) {\\n        if (_editions[editionId].signatureReleased)\\n            revert EditionSignatureAlreadyReleased();\\n        _editions[editionId].signatureReleased = true;\\n        emit EditionSignatureReleased(editionId);\\n    }\\n\\n    /**\\n     * @notice Set Default Royalty\\n     * @dev See {IFairxyzEditions-setDefaultRoyalty}.\\n     *\\n     * Emits a {DefaultRoyalty} event.\\n     */\\n    function setDefaultRoyalty(\\n        address receiver,\\n        uint96 royaltyFraction\\n    ) external virtual override onlyDefaultAdmin {\\n        _setDefaultRoyalty(receiver, royaltyFraction);\\n    }\\n\\n    /**\\n     * @notice Set Edition Maximum Mints Per Wallet\\n     * @dev See {IFairxyzEditions-setEditionMaxMintsPerWallet}.\\n     */\\n    function setEditionMaxMintsPerWallet(\\n        uint256 editionId,\\n        uint40 maxMintsPerWallet\\n    ) external virtual override onlyCreator onlyExistingEdition(editionId) {\\n        _editions[editionId].maxMintsPerWallet = maxMintsPerWallet;\\n        emit EditionMaxMintsPerWallet(editionId, maxMintsPerWallet);\\n    }\\n\\n    /**\\n     * @notice Set Edition Maximum Supply\\n     * @dev See {IFairxyzEditions-setEditionMaxSupply}.\\n     *\\n     * Requirements:\\n     *\\n     * - the new max supply can't be greater than the current max supply\\n     * - the new max supply can't be less than the number of tokens already minted\\n     * - the new max supply can't be less than scheduled in current/upcoming mint stages\\n     */\\n    function setEditionMaxSupply(\\n        uint256 editionId,\\n        uint40 maxSupply\\n    ) external virtual override onlyCreator onlyExistingEdition(editionId) {\\n        if (maxSupply == 0) revert EditionSupplyCanOnlyBeReduced();\\n        if (maxSupply >= _editionMintLimit(_editions[editionId].maxSupply))\\n            revert EditionSupplyCanOnlyBeReduced();\\n\\n        // check that max supply is not less than minted count\\n        // it's possible for the owner to airdrop more than stage phase limits so need to be checked separately\\n        if (maxSupply < _editionMintedCount[editionId])\\n            revert EditionSupplyLessThanMintedCount();\\n\\n        (, Stage memory finalStage) = _stagesRegistry().viewFinalStage(\\n            address(this),\\n            editionId\\n        );\\n\\n        // if final stage has not yet ended, check that max supply is not less than final stage phaseLimit\\n        if (\\n            finalStage.startTime > 0 && // if final stage startTime is 0, it means there is no final stage\\n            (finalStage.endTime >= block.timestamp || finalStage.endTime == 0) // if final stage endTime is 0, it means it never ends\\n        ) {\\n            // if final stage phaseLimit is 0, it means there is no limit and supply can't be reduced\\n            if (finalStage.phaseLimit == 0) {\\n                revert EditionSupplyLessThanScheduledStagesPhaseLimit();\\n            }\\n\\n            if (maxSupply < finalStage.phaseLimit) {\\n                revert EditionSupplyLessThanScheduledStagesPhaseLimit();\\n            }\\n        }\\n\\n        _editions[editionId].maxSupply = maxSupply;\\n        emit EditionMaxSupply(editionId, maxSupply);\\n    }\\n\\n    /**\\n     * @notice Set Edition Royalties\\n     * @dev See {IFairxyzEditions-setEditionRoyalty}.\\n     */\\n    function setEditionRoyalty(\\n        uint256 editionId,\\n        address receiver,\\n        uint96 royaltyFraction\\n    )\\n        external\\n        virtual\\n        override\\n        onlyCreator\\n        onlyExistingEdition(editionId)\\n        onlyValidRoyaltyFraction(royaltyFraction)\\n    {\\n        if (receiver == address(0)) {\\n            delete _editionRoyalty[editionId];\\n            emit EditionRoyalty(editionId, address(0), 0);\\n            return;\\n        }\\n\\n        _editionRoyalty[editionId] = Royalty(receiver, royaltyFraction);\\n        emit EditionRoyalty(editionId, receiver, royaltyFraction);\\n    }\\n\\n    /**\\n     * @notice Set Edition Mint Stages\\n     * @dev See {IFairxyzEditions-setEditionStages}.\\n     * @dev Allows the stages admin to set new stages for an existing edition.\\n     *\\n     * Requirements:\\n     *\\n     * - The edition must already exist.\\n     * - The new stages phase limits must greater than the number of tokens already minted for the edition.\\n     * - The new stages phase limits must be less than or equal to the max supply of the edition.\\n     */\\n    function setEditionStages(\\n        uint256 editionId,\\n        uint256 fromIndex,\\n        Stage[] calldata stages\\n    ) external virtual override onlyCreator onlyExistingEdition(editionId) {\\n        if (stages.length == 0) {\\n            _stagesRegistry().cancelStages(address(this), editionId, fromIndex);\\n        } else {\\n            _stagesRegistry().setStages(\\n                address(this),\\n                editionId,\\n                fromIndex,\\n                stages,\\n                _editionMintedCount[editionId],\\n                _editions[editionId].maxSupply\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Set Edition Metadata URI\\n     * @dev See {IFairxyzEditions-setEditionURI}.\\n     */\\n    function setEditionURI(\\n        uint256 editionId,\\n        string calldata uri\\n    ) external virtual override onlyCreator onlyExistingEdition(editionId) {\\n        _setEditionURI(editionId, uri);\\n\\n        if (_editionMintedCount[editionId] > 0)\\n            _emitMetadataUpdateEvent(editionId, uri);\\n    }\\n\\n    /**\\n     * @notice Set URI Extension for an edition ID\\n     * @dev See {IFairxyzEditions-setEditionURIExtension}.\\n     *\\n     */\\n    function setEditionURIExtension(\\n        uint256 editionId,\\n        address uriExtension\\n    ) external virtual override onlyCreator onlyExistingEdition(editionId) {\\n        _setEditionURIExtension(editionId, uriExtension);\\n    }\\n\\n    /**\\n     * @notice Set Primary Sale Receiver\\n     * @dev See {IFairxyzEditions-setPrimarySaleReceiver}.\\n     *\\n     * Emits a {PrimarySaleReceiver} event.\\n     */\\n    function setPrimarySaleReceiver(\\n        address primarySaleReceiver\\n    ) external virtual override onlyDefaultAdmin {\\n        if (primarySaleReceiver == address(0)) revert ZeroAddress();\\n\\n        _primarySaleReceiver = primarySaleReceiver;\\n        emit PrimarySaleReceiver(primarySaleReceiver);\\n    }\\n\\n    /**\\n     * @notice Set Minting Extension\\n     * @dev See {IFairxyzEditions-setMintingExtension}.\\n     */\\n    function setMintingExtension(\\n        address newMintingExtension\\n    ) external virtual override onlyDefaultAdmin {\\n        _setMintingExtension(newMintingExtension);\\n    }\\n\\n    /**\\n     * @notice Set Royalty Extension\\n     * @dev See {IFairxyzEditions-setRoyaltyExtension}.\\n     */\\n    function setRoyaltyExtension(\\n        address newRoyaltyExtension\\n    ) external virtual override onlyDefaultAdmin {\\n        _setRoyaltyExtension(newRoyaltyExtension);\\n    }\\n\\n    /**\\n     * @dev See {IFairxyzEditions-withdraw}.\\n     */\\n    function withdraw() external override onlyDefaultAdmin {\\n        payable(_primarySaleReceiver).sendValue(address(this).balance);\\n    }\\n\\n    // * OWNER * //\\n\\n    /**\\n     * @dev See {IFairxyzEditions-grantDefaultAdmin}.\\n     */\\n    function grantDefaultAdmin(\\n        address admin\\n    ) external virtual override onlyOwner {\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n    }\\n\\n    // * INTERNAL * //\\n\\n    /**\\n     * @dev Creates multiple editions and stores the mint stages for them if provided.\\n     *\\n     * @param editions the editions to create\\n     */\\n    function _batchCreateEditionsWithStages(\\n        EditionCreateParams[] calldata editions\\n    ) internal {\\n        uint256 editionsCount = _editionsCount;\\n\\n        unchecked {\\n            for (uint256 i; i < editions.length; ) {\\n                // check edition supply is valid\\n                if (editions[i].edition.maxSupply > MAX_EDITION_SIZE) {\\n                    revert EditionSupplyTooLarge();\\n                }\\n\\n                editionsCount++;\\n\\n                // store the edition and emit the created event\\n                Edition memory edition = editions[i].edition;\\n                _editions[editionsCount] = edition;\\n\\n                emit EditionCreated(\\n                    editionsCount,\\n                    editions[i].externalId,\\n                    edition\\n                );\\n\\n                _setEditionURI(editionsCount, editions[i].uri);\\n\\n                // set the initial minting schedule if given for the edition\\n                if (editions[i].mintStages.length > 0) {\\n                    _stagesRegistry().setStages(\\n                        address(this),\\n                        editionsCount,\\n                        0,\\n                        editions[i].mintStages,\\n                        0,\\n                        edition.maxSupply\\n                    );\\n                }\\n\\n                ++i;\\n            }\\n        }\\n\\n        _editionsCount = editionsCount;\\n    }\\n\\n    /**\\n     * @dev Calculates the allowed mint quantity based on the requested quantity and current recipient, edition and stage data\\n     * @dev Reverts if the calculated quantity is zero\\n     *\\n     * @param requestedQuantity the desired quantity\\n     * @param editionId the ID of the edition to mint from\\n     * @param editionMintedTotal the total number of tokens already minted for the edition\\n     * @param stage the stage data\\n     * @param recipientEditionMints the number of tokens already minted to the recipient for the edition\\n     * @param recipientStageMints the number of tokens already minted to the recipient for the stage\\n     * @param signatureMaxMints an additional maximum mints restriction encoded in the signature, specific to the recipient at the time of minting\\n     */\\n    function _calculateAllowedMintQuantity(\\n        uint256 requestedQuantity,\\n        uint256 editionId,\\n        uint256 editionMintedTotal,\\n        Stage memory stage,\\n        uint256 recipientEditionMints,\\n        uint256 recipientStageMints,\\n        uint256 signatureMaxMints\\n    ) internal view virtual returns (uint256 quantity) {\\n        quantity = requestedQuantity;\\n\\n        // recipient stage mints (including previously minted) cannot exceed signature max mints per wallet\\n        if (signatureMaxMints > 0) {\\n            if (recipientStageMints >= signatureMaxMints) {\\n                revert RecipientAllowanceUsed();\\n            }\\n            uint256 recipientRemainingMints = signatureMaxMints -\\n                recipientStageMints;\\n            if (quantity > recipientRemainingMints) {\\n                quantity = recipientRemainingMints;\\n            }\\n        }\\n\\n        // recipient stage mints cannot exceed stage mints per wallet\\n        if (stage.mintsPerWallet > 0) {\\n            if (recipientStageMints >= stage.mintsPerWallet) {\\n                revert RecipientStageAllowanceUsed();\\n            }\\n            uint256 recipientStageRemainingMints = stage.mintsPerWallet -\\n                recipientStageMints;\\n            if (quantity > recipientStageRemainingMints) {\\n                quantity = recipientStageRemainingMints;\\n            }\\n        }\\n\\n        Edition memory edition = getEdition(editionId);\\n\\n        // recipient cannot exceed edition max mints per wallet\\n        if (edition.maxMintsPerWallet > 0) {\\n            if (recipientEditionMints >= edition.maxMintsPerWallet) {\\n                revert RecipientEditionAllowanceUsed();\\n            }\\n            uint256 recipientEditionRemainingMints = edition.maxMintsPerWallet -\\n                recipientEditionMints;\\n            if (quantity > recipientEditionRemainingMints) {\\n                quantity = recipientEditionRemainingMints;\\n            }\\n        }\\n\\n        uint256 stagePhaseLimit = stage.phaseLimit;\\n        if (stagePhaseLimit == 0) {\\n            stagePhaseLimit = MAX_EDITION_SIZE;\\n        }\\n\\n        // quantity cannot exceed stage remaining mints\\n        if (editionMintedTotal >= stagePhaseLimit) {\\n            revert StageSoldOut();\\n        }\\n        uint256 stageRemainingMints = stagePhaseLimit - editionMintedTotal;\\n        if (quantity > stageRemainingMints) {\\n            quantity = stageRemainingMints;\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks the mint signature is valid and also compares nonce to the state of the contract for the recipient.\\n     *\\n     * @param editionId the ID of the edition being minted\\n     * @param recipient the address of the intended recipient of minted tokens\\n     * @param quantity the requested quantity to mint\\n     * @param nonce the blocknumber at the time the signature was generated, used to determine reuse/expiry of the signature\\n     * @param maxMints an additional limitation on the number of max mints for the recipient and stage for this particular signature (0 is unlimited)\\n     * @param signatureReleased whether the signature for the stage has been released\\n     * @param signature the signature to check\\n     */\\n    function _checkMintSignature(\\n        uint256 editionId,\\n        address recipient,\\n        uint256 quantity,\\n        uint256 nonce,\\n        uint256 maxMints,\\n        bool signatureReleased,\\n        bytes memory signature,\\n        address fairxyzsigner\\n    ) internal virtual {\\n        if (signatureReleased || _editions[editionId].signatureReleased) {\\n            return;\\n        }\\n\\n        if (nonce > block.number) {\\n            revert InvalidSignatureNonce();\\n        }\\n\\n        if (nonce + SIGNATURE_VALID_BLOCKS < block.number) {\\n            revert SignatureExpired();\\n        }\\n\\n        if (nonce <= _editionMinters[editionId][recipient].lastUsedNonce) {\\n            revert SignatureAlreadyUsed();\\n        }\\n\\n        bytes32 messageHash = _hashMintParams(\\n            editionId,\\n            recipient,\\n            quantity,\\n            nonce,\\n            maxMints\\n        );\\n\\n        // Ensure the recovered address from the signature is the Fairxyz.xyz signer address\\n        if (messageHash.recover(signature) != fairxyzsigner)\\n            revert InvalidSignature();\\n    }\\n\\n    /**\\n     * @dev Verifies that the provided payment is correct based on the required cost per token.\\n     * Reverts if the payment amount is not as expected.\\n     *\\n     * @param quantity number of tokens intended to be minted\\n     * @param costPerToken cost associated with minting a single token\\n     */\\n    function _verifyPayment(uint256 quantity, uint256 costPerToken) internal {\\n        if (msg.value != quantity * costPerToken) {\\n            revert IncorrectEthValue();\\n        }\\n    }\\n\\n    /**\\n     * @dev Handles the logic for minting editions. Updates the storage, calculates allowed mint quantity, and\\n     * conducts the actual minting operation.\\n     *\\n     * @param editionId unique identifier of the edition\\n     * @param recipient address receiving the minted tokens\\n     * @param quantity number of tokens intended to be minted\\n     * @param signatureNonce nonce associated with the signature\\n     * @param signatureMaxMints maximum number of mints allowed for the signature\\n     * @param stageIndex index of the current stage\\n     * @param stage current stage data\\n     * @return EditionMintingHandler returns a struct with the allowed minting quantity and\\n     * total minted editions\\n     */\\n    function _handleEditionMinting(\\n        uint256 editionId,\\n        address recipient,\\n        uint256 quantity,\\n        uint40 signatureNonce,\\n        uint256 signatureMaxMints,\\n        uint256 stageIndex,\\n        Stage memory stage\\n    ) internal returns (EditionMintingHandler memory) {\\n        EditionMinter memory editionMinter = _editionMinters[editionId][\\n            recipient\\n        ];\\n\\n        uint256 recipientStageMints = _editionStageMints[editionId][stageIndex][\\n            recipient\\n        ];\\n        uint256 editionMintedTotal = _editionMintedCount[editionId];\\n\\n        uint256 allowedQuantity = _calculateAllowedMintQuantity(\\n            quantity,\\n            editionId,\\n            editionMintedTotal,\\n            stage,\\n            editionMinter.mintedCount,\\n            recipientStageMints,\\n            signatureMaxMints\\n        );\\n\\n        unchecked {\\n            _editionMinters[editionId][recipient] = EditionMinter(\\n                editionMinter.mintedCount + uint40(allowedQuantity),\\n                signatureNonce\\n            );\\n\\n            _editionStageMints[editionId][stageIndex][\\n                recipient\\n            ] += allowedQuantity;\\n            _editionMintedCount[editionId] += allowedQuantity;\\n        }\\n\\n        _mintEditionTokens(\\n            recipient,\\n            editionId,\\n            allowedQuantity,\\n            editionMintedTotal\\n        );\\n\\n        return EditionMintingHandler(allowedQuantity, editionMintedTotal);\\n    }\\n\\n    /**\\n     * @dev Manages the emission of events and Ether transfers post-minting. Responsible for\\n     * sending fees and potentially refunding the sender if the full quantity is not minted.\\n     *\\n     * @param editionId - Unique identifier of the edition\\n     * @param stageIndex - Index of the current stage\\n     * @param recipient - Address receiving the minted tokens\\n     * @param allowedQuantity - Number of tokens allowed to be minted based on constraints\\n     * @param editionMintedTotal - Total number of tokens of the edition minted so far\\n     * @param quantity - Number of tokens intended to be minted\\n     * @param costPerToken - Cost associated with minting a single token\\n     */\\n    function _handleEmissionAndTransfers(\\n        uint256 editionId,\\n        uint256 stageIndex,\\n        address recipient,\\n        uint256 allowedQuantity,\\n        uint256 editionMintedTotal,\\n        uint256 quantity,\\n        uint256 costPerToken\\n    ) internal {\\n        emit EditionStageMint(\\n            editionId,\\n            stageIndex,\\n            recipient,\\n            allowedQuantity,\\n            editionMintedTotal + allowedQuantity\\n        );\\n\\n        if (allowedQuantity < quantity) {\\n            uint256 refundAmount = (quantity - allowedQuantity) * costPerToken;\\n            payable(msg.sender).sendValue(refundAmount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the minting extension for the contract\\n     *\\n     * Emits an {MintExtension} event\\n     *\\n     * @param newMintingExtension the new minting extension for the contract\\n     */\\n    function _setMintingExtension(address newMintingExtension) internal {\\n        _mintingExtension = newMintingExtension;\\n        emit MintingExtension(newMintingExtension);\\n    }\\n\\n    /**\\n     * @dev Sets the royalty extension for the contract\\n     *\\n     * Emits an {RoyaltyExtension} event\\n     *\\n     * @param newRoyaltyExtension the new royalty extension for the contract\\n     */\\n    function _setRoyaltyExtension(address newRoyaltyExtension) internal {\\n        _royaltyExtension = newRoyaltyExtension;\\n        emit RoyaltyExtension(newRoyaltyExtension);\\n    }\\n\\n    /**\\n     * @dev Marks an edition as deleted.\\n     * @dev Deleted editions will be considered as none existent.\\n     *\\n     * Requirements:\\n     * - the edition must exist / not have already been deleted.\\n     *\\n     * Emits an {EditionDeleted} event.\\n     *\\n     * @param editionId the ID of the edition\\n     */\\n    function _deleteEdition(uint256 editionId) internal virtual {\\n        _editionDeleted[editionId] = true;\\n        emit EditionDeleted(editionId);\\n    }\\n\\n    /**\\n     * @dev Checks for the existence of an edition based on created and not deleted edition IDs.\\n     *\\n     * @param editionId the ID of the edition to check\\n     */\\n    function _editionExists(uint256 editionId) internal view returns (bool) {\\n        if (\\n            editionId == 0 ||\\n            editionId > _editionsCount ||\\n            _editionDeleted[editionId]\\n        ) return false;\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Calculate the mint limit for an edition.\\n     *\\n     * @param editionMaxSupply the max supply of an edition\\n     *\\n     * @return limit\\n     */\\n    function _editionMintLimit(\\n        uint256 editionMaxSupply\\n    ) internal view virtual returns (uint256 limit) {\\n        if (editionMaxSupply == 0) {\\n            limit = MAX_EDITION_SIZE;\\n        } else {\\n            limit = editionMaxSupply;\\n        }\\n    }\\n\\n    /**\\n     * @dev Emits metadata update event used by marketplaces to refresh token metadata.\\n     * @dev To be overridden by specific token implementation.\\n     *\\n     * - ERC-721 should emit ERC-4906 (Batch)MetadataUpdate event.\\n     * - ERC-1155 should emit the standard URI event.\\n     *\\n     * @param editionId the ID of the edition\\n     * @param uri the new URI\\n     */\\n    function _emitMetadataUpdateEvent(\\n        uint256 editionId,\\n        string memory uri\\n    ) internal virtual;\\n\\n    /**\\n     * @dev Regenerates the expected signature digest for the mint params.\\n     */\\n    function _hashMintParams(\\n        uint256 editionId,\\n        address recipient,\\n        uint256 quantity,\\n        uint256 nonce,\\n        uint256 maxMints\\n    ) internal view returns (bytes32) {\\n        bytes32 digest = _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    EIP712_EDITION_MINT_TYPE_HASH,\\n                    editionId,\\n                    recipient,\\n                    quantity,\\n                    nonce,\\n                    maxMints\\n                )\\n            )\\n        );\\n        return digest;\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     */\\n    function _hashTypedDataV4(\\n        bytes32 structHash\\n    ) internal view returns (bytes32) {\\n        bytes32 domainSeparator = keccak256(\\n            abi.encode(\\n                EIP712_DOMAIN_TYPE_HASH,\\n                EIP712_NAME_HASH,\\n                EIP712_VERSION_HASH,\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n\\n        return ECDSAUpgradeable.toTypedDataHash(domainSeparator, structHash);\\n    }\\n\\n    /**\\n     * @dev Returns the maximum number of recipients that can be minted to in a single airdrop.\\n     */\\n    function _maxRecipientsPerAirdrop()\\n        internal\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        return MAX_RECIPIENTS_PER_AIRDROP;\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens of edition `editionId` to `recipient`.\\n     * @dev Intended to be overridden by inheriting contract which implements a particular token standard.\\n     *\\n     * @param recipient the address the tokens should be minted to\\n     * @param editionId the ID of the edition to mint tokens of\\n     * @param quantity the quantity of tokens to mint\\n     * @param editionMintedCount the number of tokens already minted for the edition\\n     */\\n    function _mintEditionTokens(\\n        address recipient,\\n        uint256 editionId,\\n        uint256 quantity,\\n        uint256 editionMintedCount\\n    ) internal virtual;\\n\\n    /**\\n     * @dev Sets the default royalty details for the collection.\\n     *\\n     * @param receiver the address royalty payments should be sent to\\n     * @param royaltyFraction the numerator used to calculate the royalty percentage of a sale\\n     */\\n    function _setDefaultRoyalty(\\n        address receiver,\\n        uint96 royaltyFraction\\n    ) internal virtual onlyValidRoyaltyFraction(royaltyFraction) {\\n        if (receiver == address(0)) {\\n            delete _defaultRoyalty;\\n            emit DefaultRoyalty(address(0), 0);\\n            return;\\n        }\\n\\n        _defaultRoyalty = Royalty(receiver, royaltyFraction);\\n        emit DefaultRoyalty(receiver, royaltyFraction);\\n    }\\n\\n    /**\\n     * @dev Sets the URI for the edition metadata.\\n     *\\n     * @param editionId the ID of the edition to set the URI for\\n     * @param uri the URI to set for the edition metadata\\n     */\\n    function _setEditionURI(\\n        uint256 editionId,\\n        string memory uri\\n    ) internal virtual {\\n        if (bytes(uri).length == 0) {\\n            revert InvalidURI();\\n        }\\n\\n        _editionURI[editionId] = uri;\\n        emit EditionURI(editionId, uri);\\n    }\\n\\n    /**\\n     * @dev Sets the URI extension for the edition metadata.\\n     *\\n     * Emits an {EditionURIExtension} event.\\n     *\\n     * @param editionId the ID of the edition to set the URI extension for\\n     * @param uriExtension the address of the contract to use for resolving the URI for then edition tokens\\n     */\\n    function _setEditionURIExtension(\\n        uint256 editionId,\\n        address uriExtension\\n    ) internal virtual {\\n        _editionURIExtension[editionId] = uriExtension;\\n        emit EditionURIExtension(editionId, uriExtension);\\n    }\\n\\n    /**\\n     * @dev Returns the stages registry used for managing mint stages.\\n     */\\n    function _stagesRegistry()\\n        internal\\n        view\\n        virtual\\n        returns (IFairxyzMintStagesRegistry)\\n    {\\n        return IFairxyzMintStagesRegistry(FAIRXYZ_STAGES_REGISTRY);\\n    }\\n\\n    // * OVERRIDES * //\\n\\n    /**\\n     * @dev See {IERC165Upgradeable-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    )\\n        public\\n        view\\n        virtual\\n        override(FairxyzEditionsBaseUpgradeable, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IFairxyzEditions).interfaceId ||\\n            interfaceId == type(IERC2981Upgradeable).interfaceId ||\\n            FairxyzEditionsBaseUpgradeable.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IAccessControlUpgradeable-_checkRole}.\\n     * @dev Overriden to supersede any access control roles with contract ownership.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual override {\\n        if (_msgSender() != owner()) _checkRole(role, _msgSender());\\n    }\\n\\n    // * PRIVATE * //\\n\\n    uint256[36] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/v2/ERC1155/Fairxyz1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\nabstract contract Fairxyz1155Upgradeable is\\n    Initializable,\\n    ContextUpgradeable,\\n    ERC165Upgradeable,\\n    IERC1155Upgradeable,\\n    IERC1155MetadataURIUpgradeable\\n{\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    function __Fairxyz1155_init() internal {\\n        __Fairxyz1155_init_unchained();\\n    }\\n\\n    function __Fairxyz1155_init_unchained() internal {}\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    )\\n        public\\n        view\\n        virtual\\n        override(ERC165Upgradeable, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(\\n        address account,\\n        uint256 id\\n    ) public view virtual override returns (uint256) {\\n        require(\\n            account != address(0),\\n            \\\"ERC1155: address zero is not a valid owner\\\"\\n        );\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual override returns (uint256[] memory) {\\n        require(\\n            accounts.length == ids.length,\\n            \\\"ERC1155: accounts and ids length mismatch\\\"\\n        );\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(\\n        address operator,\\n        bool approved\\n    ) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(\\n            fromBalance >= amount,\\n            \\\"ERC1155: insufficient balance for transfer\\\"\\n        );\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(\\n            ids.length == amounts.length,\\n            \\\"ERC1155: ids and amounts length mismatch\\\"\\n        );\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(\\n                fromBalance >= amount,\\n                \\\"ERC1155: insufficient balance for transfer\\\"\\n            );\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(\\n            operator,\\n            from,\\n            to,\\n            ids,\\n            amounts,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(\\n            operator,\\n            address(0),\\n            to,\\n            id,\\n            amount,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual;\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try\\n                IERC1155ReceiverUpgradeable(to).onERC1155Received(\\n                    operator,\\n                    from,\\n                    id,\\n                    amount,\\n                    data\\n                )\\n            returns (bytes4 response) {\\n                if (\\n                    response !=\\n                    IERC1155ReceiverUpgradeable.onERC1155Received.selector\\n                ) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try\\n                IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(\\n                    operator,\\n                    from,\\n                    ids,\\n                    amounts,\\n                    data\\n                )\\n            returns (bytes4 response) {\\n                if (\\n                    response !=\\n                    IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector\\n                ) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(\\n        uint256 element\\n    ) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/v2/interfaces/IERC2981Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    error InvalidRoyaltyFraction();\\n\\n    struct Royalty {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     *\\n     * @param tokenId - the ID of the token being sold\\n     * @param salePrice - the sale price\\n     *\\n     * @return receiver - address of who should be sent the royalty payment\\n     * @return royaltyAmount - the royalty payment amount in the same unit of exchange as salePrice\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/v2/interfaces/IFairxyz1155Editions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// @author: Fair.xyz dev\\n\\npragma solidity 0.8.19;\\n\\ninterface IFairxyz1155Editions {\\n    /**\\n     * @notice Burn Tokens\\n     * @dev Burns an amount of a single edition/token, reducing the balance of `from`.\\n     *\\n     * @param from the address of the owner to burn tokens for\\n     * @param editionId the ID of the edition to burn\\n     * @param amount the number of tokens to burn\\n     */\\n    function burn(address from, uint256 editionId, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/v2/interfaces/IFairxyzEditions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// @author: Fair.xyz dev\\n\\npragma solidity 0.8.19;\\n\\nimport {Stage} from \\\"../interfaces/IFairxyzMintStagesRegistry.sol\\\";\\n\\n/**\\n * @param maxMintsPerWallet the maximum number of tokens that can be minted per wallet/account\\n * @param maxSupply the maximum supply for the edition including paid mints and airdrops\\n * @param burnable_ the burnable state of the edition\\n * @param signatureReleased whether the signature is required to mint tokens for the edition\\n * @param soulbound whether the edition tokens are soulbound\\n */\\nstruct Edition {\\n    uint40 maxMintsPerWallet;\\n    uint40 maxSupply;\\n    bool burnable;\\n    bool signatureReleased;\\n    bool soulbound;\\n}\\n\\n/**\\n * @param externalId the external ID of the edition used to identify it off-chain\\n * @param edition the edition struct\\n * @param uri the URI for the edition/token metadata\\n * @param mintStages the mint stages for the edition\\n */\\nstruct EditionCreateParams {\\n    uint256 externalId;\\n    Edition edition;\\n    string uri;\\n    Stage[] mintStages;\\n}\\n\\nstruct EditionMinter {\\n    uint40 mintedCount;\\n    uint40 lastUsedNonce;\\n}\\n\\nstruct EditionMintingHandler {\\n    uint256 allowedQuantity;\\n    uint256 editionMintedTotal;\\n}\\n\\ninterface IFairxyzEditions {\\n    error EditionAlreadyMinted();\\n    error EditionDoesNotExist();\\n    error EditionSignatureAlreadyReleased();\\n    error EditionSupplyCanOnlyBeReduced();\\n    error EditionSupplyLessThanMintedCount();\\n    error EditionSupplyLessThanScheduledStagesPhaseLimit();\\n    error EditionSupplyTooLarge();\\n    error IncorrectEthValue();\\n    error InvalidMintQuantity();\\n    error InvalidNumberOfRecipients();\\n    error InvalidSignatureNonce();\\n    error InvalidSignature();\\n    error InvalidURI();\\n    error NotApprovedOrOwner();\\n    error NotBurnable();\\n    error NotEnoughSupplyRemaining();\\n    error NotTransferable();\\n    error RecipientAllowanceUsed();\\n    error RecipientEditionAllowanceUsed();\\n    error RecipientStageAllowanceUsed();\\n    error SenderIsNotExtension();\\n    error SignatureAlreadyUsed();\\n    error SignatureExpired();\\n    error StageSoldOut();\\n    error TokenDoesNotExist();\\n    error ZeroAddress();\\n\\n    /// @dev Emitted when the metadata of a range of tokens is changed.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n\\n    /// @dev Emitted when the default royalty details are changed.\\n    event DefaultRoyalty(address receiver, uint96 royaltyFraction);\\n\\n    /// @dev Emitted when edition tokens are airdropped.\\n    event EditionAirdrop(\\n        uint256 indexed editionId,\\n        uint256 indexed stageIndex,\\n        address[] recipients,\\n        uint256 quantity,\\n        uint256 editionMintedCount\\n    );\\n\\n    /// @dev Emitted when the burnable state of an edition is changed.\\n    event EditionBurnable(uint256 indexed editionId, bool burnable);\\n\\n    /// @dev Emitted when a new edition is added.\\n    event EditionCreated(\\n        uint256 indexed editionId,\\n        uint256 externalId,\\n        Edition edition\\n    );\\n\\n    /// @dev Emitted when an edition is deleted and can no longer be minted.\\n    event EditionDeleted(uint256 indexed editionId);\\n\\n    /// @dev Emitted when the maximum mints per wallet for an edition is changed.\\n    event EditionMaxMintsPerWallet(\\n        uint256 indexed editionId,\\n        uint256 maxMintsPerWallet\\n    );\\n\\n    /// @dev Emitted when the maximum supply for an edition is changed.\\n    event EditionMaxSupply(uint256 indexed editionId, uint256 maxSupply);\\n\\n    /// @dev Emitted when the royalty details for an edition are changed.\\n    event EditionRoyalty(\\n        uint256 indexed editionId,\\n        address receiver,\\n        uint96 royaltyFraction\\n    );\\n\\n    /// @dev Emitted when a signature is no longer required to mint tokens for a specific edition.\\n    event EditionSignatureReleased(uint256 indexed editionId);\\n\\n    // /// @dev Emitted when the soulbound state of an edition is changed.\\n    // event EditionSoulbound(uint256 indexed editionId, bool soulbound);\\n\\n    /// @dev Emitted when edition tokens are minted during a mint stage.\\n    event EditionStageMint(\\n        uint256 indexed editionId,\\n        uint256 indexed stageIndex,\\n        address indexed recipient,\\n        uint256 quantity,\\n        uint256 editionMintedCount\\n    );\\n\\n    /// @dev Emitted when the metadata URI for an edition is changed.\\n    event EditionURI(uint256 indexed editionId, string uri);\\n\\n    /// @dev Emitted when the token URI extension for an edition is changed\\n    event EditionURIExtension(uint256 editionId, address uriExtension);\\n\\n    /// @dev Emitted when the metadata of a token is changed.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev Emitted when the mint extension is changed.\\n    event MintingExtension(address mintingExtension);\\n\\n    /// @dev Emitted when the primary sale receiver address is changed.\\n    event PrimarySaleReceiver(address primarySaleReceiver_);\\n\\n    /// @dev Emitted when the royalty extension is updated\\n    event RoyaltyExtension(address royaltyExtension);\\n\\n    /**\\n     * @dev Mints the same quantity of tokens from an edition to multiple recipients.\\n     *\\n     * @param editionId the ID of the edition to mint\\n     * @param quantity the number of tokens to mint to each recipient\\n     * @param recipients addresses to mint to\\n     */\\n    function airdropEdition(\\n        uint256 editionId,\\n        uint256 quantity,\\n        address[] memory recipients\\n    ) external;\\n\\n    /**\\n     * @dev Adds new editions at the next token ID/range (depending on standard implemented)\\n     *\\n     * @param editions the editions to add\\n     */\\n    function createEditions(EditionCreateParams[] calldata editions) external;\\n\\n    /**\\n     * @dev Delete an edition i.e. make it no longer editable or mintable.\\n     *\\n     * @param editionId the ID of the edition to delete\\n     */\\n    function deleteEdition(uint256 editionId) external;\\n\\n    /**\\n     * @dev Returns the current total supply of tokens for an edition, taking both mints and burns into account.\\n     *\\n     * @param editionId the ID of the edition\\n     *\\n     * @return totalSupply the number of tokens in circulation\\n     */\\n    function editionTotalSupply(\\n        uint256 editionId\\n    ) external view returns (uint256 totalSupply);\\n\\n    /**\\n     * @dev Returns the edition with ID `editionId`.\\n     * @dev Should revert if the edition does not exist.\\n     *\\n     * @param editionId the ID of the edition\\n     *\\n     * @return edition\\n     */\\n    function getEdition(\\n        uint256 editionId\\n    ) external view returns (Edition memory);\\n\\n    /**\\n     * @dev Grants the `DEFAULT_ADMIN_ROLE` role to an address.\\n     * @dev Intended to be used only by the contract owner. Other admin management is done via AccessControl contract functions.\\n     *\\n     * @param admin the address to grant the default admin role to\\n     */\\n    function grantDefaultAdmin(address admin) external;\\n\\n    /**\\n     * @dev Mint a quantity of tokens for an edition to a single recipient.\\n     * @dev Can be called by any account with a valid signature and the correct value.\\n     *\\n     * @param editionId the ID of the edition\\n     * @param recipient the address to transfer the minted tokens to\\n     * @param quantity the quantity of tokens to mint\\n     * @param signatureNonce a value that is recorded for signature expiry and reuse prevention, typically a recent block number\\n     * @param signatureMaxMints the maximum number of mints specific to the recipient and validated in the signature\\n     * @param signature a signature containing the other function params for authorizing the execution\\n     */\\n    function mintEdition(\\n        uint256 editionId,\\n        address recipient,\\n        uint256 quantity,\\n        uint40 signatureNonce,\\n        uint256 signatureMaxMints,\\n        bytes memory signature\\n    ) external payable returns (EditionMintingHandler memory handler);\\n\\n    /**\\n     * @dev Turns off signature validation for calls to `mintEdition` for a specific edition i.e. allows signature-less minting.\\n     *\\n     * @param editionId the ID of the edition\\n     */\\n    function releaseEditionSignature(uint256 editionId) external;\\n\\n    /**\\n     * @dev Set the default royalty receiver and fraction for the collection.\\n     *\\n     * @param receiver the address to receive royalties\\n     * @param royaltyFraction the fraction of the sale price to pay as royalties (out of 10000)\\n     */\\n    function setDefaultRoyalty(\\n        address receiver,\\n        uint96 royaltyFraction\\n    ) external;\\n\\n    /**\\n     * @dev Updates the maximum number of tokens each wallet can mint for an edition.\\n     *\\n     * @param editionId the ID of the edition to update\\n     * @param maxMintsPerWallet the new maximum number of mints\\n     */\\n    function setEditionMaxMintsPerWallet(\\n        uint256 editionId,\\n        uint40 maxMintsPerWallet\\n    ) external;\\n\\n    /**\\n     * @dev Updates the maximum supply available for an edition.\\n     *\\n     * @param editionId the ID of the edition to update\\n     * @param maxSupply the new maximum supply of tokens for the edition\\n     */\\n    function setEditionMaxSupply(uint256 editionId, uint40 maxSupply) external;\\n\\n    /**\\n     * @notice Set Edition Royalty\\n     * @dev updates the edition royalty receiver and fraction, which overrides the collection default\\n     *\\n     * @param editionId the ID of the edition to update\\n     * @param receiver the address that should receive royalty payments\\n     * @param royaltyFraction the portion of the defined denominator that the receiver should be sent from a secondary sale\\n     */\\n    function setEditionRoyalty(\\n        uint256 editionId,\\n        address receiver,\\n        uint96 royaltyFraction\\n    ) external;\\n\\n    /**\\n     * @notice Update Edition Mint Stages\\n     * @dev Add and update a range of mint stages for an edition.\\n     *\\n     * @param editionId the ID of the edition\\n     * @param firstStageIndex the index of the first stage being det\\n     * @param newStages the new stage data to set\\n     */\\n    function setEditionStages(\\n        uint256 editionId,\\n        uint256 firstStageIndex,\\n        Stage[] calldata newStages\\n    ) external;\\n\\n    /**\\n     * @notice Set Edition Metadata URI\\n     * @dev updates the edition metadata URI\\n     *\\n     * @param editionId the ID of the edition to update\\n     * @param uri the URI of the metadata for the edition\\n     */\\n    function setEditionURI(uint256 editionId, string calldata uri) external;\\n\\n    /**\\n     * @notice Set Edition URI Extension\\n     * @dev Updates the URI extension address for an edition.\\n     *\\n     * @param editionId the edition ID for which the extension is to be set\\n     * @param uriExtension the new URI extension address for the edition ID\\n     */\\n    function setEditionURIExtension(\\n        uint256 editionId,\\n        address uriExtension\\n    ) external;\\n\\n    /**\\n     * @dev Set the address of an extension contract that can mint tokens.\\n     *\\n     * @param newMintingExtension the new Minting extension address for the edition ID\\n     */\\n    function setMintingExtension(address newMintingExtension) external;\\n\\n    /**\\n     * @dev Updates the address that the contract balance is withdrawn to.\\n     *\\n     * @param primarySaleReceiver_ the address that should receive funds when withdraw is called\\n     */\\n    function setPrimarySaleReceiver(address primarySaleReceiver_) external;\\n\\n    /**\\n     * @dev Updates the royalties extension address for the contract.\\n     *\\n     * @param newRoyaltyExtension the contract address of the new royalty extension\\n     */\\n    function setRoyaltyExtension(address newRoyaltyExtension) external;\\n\\n    /**\\n     * @dev returns the current total supply of tokens for the collection, taking both mints and burns into account.\\n     *\\n     * @return supply the number of tokens in circulation\\n     */\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /**\\n     * @dev Sends the contract balance to the primary sale receiver address stored in the contract.\\n     */\\n    function withdraw() external;\\n}\\n\"\r\n    },\r\n    \"contracts/v2/interfaces/IFairxyzMintStagesRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// @author: Fair.xyz dev\\n\\npragma solidity 0.8.19;\\n\\nstruct Stage {\\n    uint40 startTime;\\n    uint40 endTime;\\n    uint40 mintsPerWallet;\\n    uint40 phaseLimit;\\n    uint96 price;\\n    bool signatureReleased;\\n}\\n\\nstruct FairxyzParameters {\\n    address fairxyzSigner;\\n    address fairxyzWithdrawAddress;\\n    uint256 fairxyzFee;\\n}\\n\\ninterface IFairxyzMintStagesRegistry {\\n    error NoActiveStage();\\n    error NoStages();\\n    error NoStagesSpecified();\\n    error PhaseLimitsOverlap();\\n    error SkippedStages();\\n    error StageDoesNotExist();\\n    error StageHasEnded();\\n    error StageHasAlreadyStarted();\\n    error StageLimitAboveMax();\\n    error StageLimitBelowMin();\\n    error StageTimesOverlap();\\n    error TooManyUpcomingStages();\\n    error Unauthorized();\\n\\n    /// @dev Emitted when a range of stages for a schedule are updated.\\n    event ScheduleStagesUpdated(\\n        address indexed registrant,\\n        uint256 indexed scheduleId,\\n        uint256 startIndex,\\n        Stage[] stages\\n    );\\n\\n    /// @dev Emitted when a range of stages for a schedule are cancelled.\\n    event ScheduleStagesCancelled(\\n        address indexed registrant,\\n        uint256 indexed scheduleId,\\n        uint256 startIndex\\n    );\\n\\n    /**\\n     * @dev Cancels all stages from the specified index onwards.\\n     *\\n     * Requirements:\\n     * - `fromIndex` must be less than the total number of stages\\n     *\\n     * @param registrant the address of the registrant the schedule is managed by\\n     * @param scheduleId the id of the schedule to cancel the stages for\\n     * @param fromIndex the index from which to cancel stages\\n     */\\n    function cancelStages(\\n        address registrant,\\n        uint256 scheduleId,\\n        uint256 fromIndex\\n    ) external;\\n\\n    /**\\n     * @dev Sets the parameters relevant to platform minting on Fair.xyz\\n     *\\n     * Requirements:\\n     * - `msg.sender` must be the contract owner\\n     *\\n     * @param parameters a struct of parameters for Fair.xyz-related platform minting\\n     */\\n    function setFairParameters(FairxyzParameters memory parameters) external;\\n\\n    /**\\n     * @dev Sets a new series of stages, overwriting any existing stages and cancelling any stages after the last new stage.\\n     *\\n     * @param registrant the address of the registrant the schedule is managed by\\n     * @param scheduleId the id of the schedule to update the stages for\\n     * @param firstStageIndex the index from which to update stages\\n     * @param stages array of new stages to add to / overwrite existing stages\\n     * @param minPhaseLimit the minimum phaseLimit for the new stages e.g. current supply of the token the schedule is for\\n     * @param maxPhaseLimit the maximum phaseLimit for the new stages e.g. maximum supply of the token the schedule is for\\n     */\\n    function setStages(\\n        address registrant,\\n        uint256 scheduleId,\\n        uint256 firstStageIndex,\\n        Stage[] calldata stages,\\n        uint256 minPhaseLimit,\\n        uint256 maxPhaseLimit\\n    ) external;\\n\\n    /**\\n     * @dev Finds the active stage for a schedule based on the current time being between the start and end times.\\n     * @dev Reverts if no active stage is found.\\n     *\\n     * @param scheduleId The id of the schedule to find the active stage for\\n     *\\n     * @return fairxyzParameters the parameters around the Fair.xyz signature, withdrawal address and fees\\n     * @return index The index of the active stage\\n     * @return stage The active stage data\\n     */\\n    function viewActiveStage(\\n        address registrant,\\n        uint256 scheduleId\\n    ) external view returns (FairxyzParameters memory fairxyzParameters, uint256 index, Stage memory stage);\\n\\n    /**\\n     * @dev Finds the final stage for a schedule.\\n     * @dev Does not revert. Instead, it returns an empty Stage if no stages exist for the schedule.\\n     *\\n     * @param scheduleId The id of the schedule to find the final stage for\\n     *\\n     * @return index The index of the final stage\\n     * @return stage The final stage data\\n     */\\n    function viewFinalStage(\\n        address registrant,\\n        uint256 scheduleId\\n    ) external view returns (uint256 index, Stage memory stage);\\n\\n    /**\\n     * @dev Finds the index of the current/upcoming stage which has not yet ended.\\n     * @dev A stage may not exist at the returned index if all existing stages have ended.\\n     *\\n     * @param scheduleId The id of the schedule to find the latest stage index for\\n     *\\n     * @return index\\n     */\\n    function viewLatestStageIndex(\\n        address registrant,\\n        uint256 scheduleId\\n    ) external view returns (uint256 index);\\n\\n    /**\\n     * @dev Returns the stage data for the specified schedule id and stage index.\\n     * @dev Reverts if a stage does not exist or has been deleted at the index.\\n     *\\n     * @param scheduleId The id of the schedule to get the stage from\\n     * @param stageIndex The index of the stage to get\\n     *\\n     * @return stage\\n     */\\n    function viewStage(\\n        address registrant,\\n        uint256 scheduleId,\\n        uint256 stageIndex\\n    ) external view returns (Stage memory stage);\\n}\\n\"\r\n    },\r\n    \"contracts/v2/interfaces/IFairxyzOperatorFiltererUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// @author: Fair.xyz dev\\n\\npragma solidity 0.8.19;\\n\\ninterface IFairxyzOperatorFiltererUpgradeable {\\n    error OnlyAdmin();\\n\\n    /// @dev Emitted when the operator filter is disabled/enabled.\\n    event OperatorFilterDisabled(bool disabled);\\n\\n    /**\\n     * @notice Enable/Disable Operator Filter\\n     * @dev Used to turn the operator filter on/off without updating the registry.\\n     */\\n    function toggleOperatorFilterDisabled() external;\\n}\\n\"\r\n    },\r\n    \"contracts/v2/interfaces/ITokenURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface ITokenURI {\\n    /**\\n     * @dev Returns the metadata URI for a given token ID\\n     *\\n     * @param tokenId The id of the token\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/v2/OperatorFilterer/FairxyzOperatorFiltererUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// @author: Fair.xyz dev\\n\\npragma solidity 0.8.19;\\n\\nimport {IOperatorFilterRegistry} from \\\"operator-filter-registry/src/OperatorFilterRegistry.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/IFairxyzOperatorFiltererUpgradeable.sol\\\";\\n\\nabstract contract FairxyzOperatorFiltererUpgradeable is\\n    Initializable,\\n    IFairxyzOperatorFiltererUpgradeable\\n{\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address public immutable REGISTRY_ADDRESS;\\n\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address public immutable DEFAULT_SUBSCRIPTION_ADDRESS;\\n\\n    bool public operatorFilterDisabled;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address registry_, address defaultSubscription_) {\\n        REGISTRY_ADDRESS = registry_;\\n        DEFAULT_SUBSCRIPTION_ADDRESS = defaultSubscription_;\\n    }\\n\\n    function __FairxyzOperatorFilterer_init(\\n        bool enabled\\n    ) internal onlyInitializing {\\n        __FairxyzOperatorFilterer_init_unchained(enabled);\\n    }\\n\\n    function __FairxyzOperatorFilterer_init_unchained(\\n        bool enabled\\n    ) internal onlyInitializing {\\n        if (\\n            enabled &&\\n            REGISTRY_ADDRESS.code.length > 0 &&\\n            DEFAULT_SUBSCRIPTION_ADDRESS != address(0)\\n        ) {\\n            IOperatorFilterRegistry(REGISTRY_ADDRESS).registerAndSubscribe(\\n                address(this),\\n                DEFAULT_SUBSCRIPTION_ADDRESS\\n            );\\n        } else {\\n            operatorFilterDisabled = true;\\n        }\\n    }\\n\\n    // * MODIFIERS * //\\n\\n    /**\\n     * @dev Used to modify transfer functions to check the msg.sender is an allowed operator.\\n     * @dev Checks are bypassed if the filter is disabled or msg.sender owns the tokens.\\n     *\\n     * @param operator the address of the operator that transfer is being attempted by\\n     * @param from the address tokens are being transferred from\\n     */\\n    modifier onlyAllowedOperator(address operator, address from) virtual {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (REGISTRY_ADDRESS.code.length > 0 && !operatorFilterDisabled) {\\n            // Allow spending tokens from addresses with balance\\n            // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\\n            // from an EOA.\\n            if (operator != from) {\\n                // The OperatorFilterRegistry is responsible for checking if the operator is allowed\\n                // Reverts with AddressFiltered() if not.\\n                IOperatorFilterRegistry(REGISTRY_ADDRESS).isOperatorAllowed(\\n                    address(this),\\n                    operator\\n                );\\n            }\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Used to modify approval functions to check the operator is an allowed operator.\\n     * @dev Checks are bypassed if the filter is disabled.\\n     *\\n     * @param operator the address of the operator that approval is being attempted for\\n     */\\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (REGISTRY_ADDRESS.code.length > 0 && !operatorFilterDisabled) {\\n            // The OperatorFilterRegistry is responsible for checking if the operator is allowed\\n            // Reverts with AddressFiltered() if not.\\n            IOperatorFilterRegistry(REGISTRY_ADDRESS).isOperatorAllowed(\\n                address(this),\\n                operator\\n            );\\n        }\\n        _;\\n    }\\n\\n    modifier onlyOperatorFilterAdmin() {\\n        if (!_isOperatorFilterAdmin(msg.sender)) {\\n            revert OnlyAdmin();\\n        }\\n        _;\\n    }\\n\\n    // * ADMIN * //\\n\\n    /**\\n     * @dev See {IFairxyzOperatorFiltererUpgradeable-toggleOperatorFilterDisabled}.\\n     */\\n    function toggleOperatorFilterDisabled()\\n        external\\n        virtual\\n        override\\n        onlyOperatorFilterAdmin\\n    {\\n        bool disabled = !operatorFilterDisabled;\\n        operatorFilterDisabled = disabled;\\n        emit OperatorFilterDisabled(disabled);\\n    }\\n\\n    // * INTERNAL * //\\n\\n    /**\\n     * @dev Inheriting contract is responsible for implementation\\n     */\\n    function _isOperatorFilterAdmin(\\n        address operator\\n    ) internal view virtual returns (bool);\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"operator-filter-registry/src/IOperatorFilterRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IOperatorFilterRegistry {\\n    /**\\n     * @notice Returns true if operator is not filtered for a given token, either by address or codeHash. Also returns\\n     *         true if supplied registrant address is not registered.\\n     */\\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\\n\\n    /**\\n     * @notice Registers an address with the registry. May be called by address itself or by EIP-173 owner.\\n     */\\n    function register(address registrant) external;\\n\\n    /**\\n     * @notice Registers an address with the registry and \\\"subscribes\\\" to another address's filtered operators and codeHashes.\\n     */\\n    function registerAndSubscribe(address registrant, address subscription) external;\\n\\n    /**\\n     * @notice Registers an address with the registry and copies the filtered operators and codeHashes from another\\n     *         address without subscribing.\\n     */\\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\\n\\n    /**\\n     * @notice Unregisters an address with the registry and removes its subscription. May be called by address itself or by EIP-173 owner.\\n     *         Note that this does not remove any filtered addresses or codeHashes.\\n     *         Also note that any subscriptions to this registrant will still be active and follow the existing filtered addresses and codehashes.\\n     */\\n    function unregister(address addr) external;\\n\\n    /**\\n     * @notice Update an operator address for a registered address - when filtered is true, the operator is filtered.\\n     */\\n    function updateOperator(address registrant, address operator, bool filtered) external;\\n\\n    /**\\n     * @notice Update multiple operators for a registered address - when filtered is true, the operators will be filtered. Reverts on duplicates.\\n     */\\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\\n\\n    /**\\n     * @notice Update a codeHash for a registered address - when filtered is true, the codeHash is filtered.\\n     */\\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\\n\\n    /**\\n     * @notice Update multiple codeHashes for a registered address - when filtered is true, the codeHashes will be filtered. Reverts on duplicates.\\n     */\\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\\n\\n    /**\\n     * @notice Subscribe an address to another registrant's filtered operators and codeHashes. Will remove previous\\n     *         subscription if present.\\n     *         Note that accounts with subscriptions may go on to subscribe to other accounts - in this case,\\n     *         subscriptions will not be forwarded. Instead the former subscription's existing entries will still be\\n     *         used.\\n     */\\n    function subscribe(address registrant, address registrantToSubscribe) external;\\n\\n    /**\\n     * @notice Unsubscribe an address from its current subscribed registrant, and optionally copy its filtered operators and codeHashes.\\n     */\\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\\n\\n    /**\\n     * @notice Get the subscription address of a given registrant, if any.\\n     */\\n    function subscriptionOf(address addr) external returns (address registrant);\\n\\n    /**\\n     * @notice Get the set of addresses subscribed to a given registrant.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function subscribers(address registrant) external returns (address[] memory);\\n\\n    /**\\n     * @notice Get the subscriber at a given index in the set of addresses subscribed to a given registrant.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function subscriberAt(address registrant, uint256 index) external returns (address);\\n\\n    /**\\n     * @notice Copy filtered operators and codeHashes from a different registrantToCopy to addr.\\n     */\\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\\n\\n    /**\\n     * @notice Returns true if operator is filtered by a given address or its subscription.\\n     */\\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\\n\\n    /**\\n     * @notice Returns true if the hash of an address's code is filtered by a given address or its subscription.\\n     */\\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\\n\\n    /**\\n     * @notice Returns true if a codeHash is filtered by a given address or its subscription.\\n     */\\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\\n\\n    /**\\n     * @notice Returns a list of filtered operators for a given address or its subscription.\\n     */\\n    function filteredOperators(address addr) external returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the set of filtered codeHashes for a given address or its subscription.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\\n\\n    /**\\n     * @notice Returns the filtered operator at the given index of the set of filtered operators for a given address or\\n     *         its subscription.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\\n\\n    /**\\n     * @notice Returns the filtered codeHash at the given index of the list of filtered codeHashes for a given address or\\n     *         its subscription.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\\n\\n    /**\\n     * @notice Returns true if an address has registered\\n     */\\n    function isRegistered(address addr) external returns (bool);\\n\\n    /**\\n     * @dev Convenience method to compute the code hash of an arbitrary contract\\n     */\\n    function codeHashOf(address addr) external returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"operator-filter-registry/src/OperatorFilterRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport {IOperatorFilterRegistry} from \\\"./IOperatorFilterRegistry.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {OperatorFilterRegistryErrorsAndEvents} from \\\"./OperatorFilterRegistryErrorsAndEvents.sol\\\";\\n\\n/**\\n * @title  OperatorFilterRegistry\\n * @notice Borrows heavily from the QQL BlacklistOperatorFilter contract:\\n *         https://github.com/qql-art/contracts/blob/main/contracts/BlacklistOperatorFilter.sol\\n * @notice This contracts allows tokens or token owners to register specific addresses or codeHashes that may be\\n * *       restricted according to the isOperatorAllowed function.\\n */\\ncontract OperatorFilterRegistry is IOperatorFilterRegistry, OperatorFilterRegistryErrorsAndEvents {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    /// @dev initialized accounts have a nonzero codehash (see https://eips.ethereum.org/EIPS/eip-1052)\\n    /// Note that this will also be a smart contract's codehash when making calls from its constructor.\\n    bytes32 constant EOA_CODEHASH = keccak256(\\\"\\\");\\n\\n    mapping(address => EnumerableSet.AddressSet) private _filteredOperators;\\n    mapping(address => EnumerableSet.Bytes32Set) private _filteredCodeHashes;\\n    mapping(address => address) private _registrations;\\n    mapping(address => EnumerableSet.AddressSet) private _subscribers;\\n\\n    /**\\n     * @notice Restricts method caller to the address or EIP-173 \\\"owner()\\\"\\n     */\\n    modifier onlyAddressOrOwner(address addr) {\\n        if (msg.sender != addr) {\\n            try Ownable(addr).owner() returns (address owner) {\\n                if (msg.sender != owner) {\\n                    revert OnlyAddressOrOwner();\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert NotOwnable();\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns true if operator is not filtered for a given token, either by address or codeHash. Also returns\\n     *         true if supplied registrant address is not registered.\\n     *         Note that this method will *revert* if an operator or its codehash is filtered with an error that is\\n     *         more informational than a false boolean, so smart contracts that query this method for informational\\n     *         purposes will need to wrap in a try/catch or perform a low-level staticcall in order to handle the case\\n     *         that an operator is filtered.\\n     */\\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool) {\\n        address registration = _registrations[registrant];\\n        if (registration != address(0)) {\\n            EnumerableSet.AddressSet storage filteredOperatorsRef;\\n            EnumerableSet.Bytes32Set storage filteredCodeHashesRef;\\n\\n            filteredOperatorsRef = _filteredOperators[registration];\\n            filteredCodeHashesRef = _filteredCodeHashes[registration];\\n\\n            if (filteredOperatorsRef.contains(operator)) {\\n                revert AddressFiltered(operator);\\n            }\\n            if (operator.code.length > 0) {\\n                bytes32 codeHash = operator.codehash;\\n                if (filteredCodeHashesRef.contains(codeHash)) {\\n                    revert CodeHashFiltered(operator, codeHash);\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n\\n    //////////////////\\n    // AUTH METHODS //\\n    //////////////////\\n\\n    /**\\n     * @notice Registers an address with the registry. May be called by address itself or by EIP-173 owner.\\n     */\\n    function register(address registrant) external onlyAddressOrOwner(registrant) {\\n        if (_registrations[registrant] != address(0)) {\\n            revert AlreadyRegistered();\\n        }\\n        _registrations[registrant] = registrant;\\n        emit RegistrationUpdated(registrant, true);\\n    }\\n\\n    /**\\n     * @notice Unregisters an address with the registry and removes its subscription. May be called by address itself or by EIP-173 owner.\\n     *         Note that this does not remove any filtered addresses or codeHashes.\\n     *         Also note that any subscriptions to this registrant will still be active and follow the existing filtered addresses and codehashes.\\n     */\\n    function unregister(address registrant) external onlyAddressOrOwner(registrant) {\\n        address registration = _registrations[registrant];\\n        if (registration == address(0)) {\\n            revert NotRegistered(registrant);\\n        }\\n        if (registration != registrant) {\\n            _subscribers[registration].remove(registrant);\\n            emit SubscriptionUpdated(registrant, registration, false);\\n        }\\n        _registrations[registrant] = address(0);\\n        emit RegistrationUpdated(registrant, false);\\n    }\\n\\n    /**\\n     * @notice Registers an address with the registry and \\\"subscribes\\\" to another address's filtered operators and codeHashes.\\n     */\\n    function registerAndSubscribe(address registrant, address subscription) external onlyAddressOrOwner(registrant) {\\n        address registration = _registrations[registrant];\\n        if (registration != address(0)) {\\n            revert AlreadyRegistered();\\n        }\\n        if (registrant == subscription) {\\n            revert CannotSubscribeToSelf();\\n        }\\n        address subscriptionRegistration = _registrations[subscription];\\n        if (subscriptionRegistration == address(0)) {\\n            revert NotRegistered(subscription);\\n        }\\n        if (subscriptionRegistration != subscription) {\\n            revert CannotSubscribeToRegistrantWithSubscription(subscription);\\n        }\\n\\n        _registrations[registrant] = subscription;\\n        _subscribers[subscription].add(registrant);\\n        emit RegistrationUpdated(registrant, true);\\n        emit SubscriptionUpdated(registrant, subscription, true);\\n    }\\n\\n    /**\\n     * @notice Registers an address with the registry and copies the filtered operators and codeHashes from another\\n     *         address without subscribing.\\n     */\\n    function registerAndCopyEntries(address registrant, address registrantToCopy)\\n        external\\n        onlyAddressOrOwner(registrant)\\n    {\\n        if (registrantToCopy == registrant) {\\n            revert CannotCopyFromSelf();\\n        }\\n        address registration = _registrations[registrant];\\n        if (registration != address(0)) {\\n            revert AlreadyRegistered();\\n        }\\n        address registrantRegistration = _registrations[registrantToCopy];\\n        if (registrantRegistration == address(0)) {\\n            revert NotRegistered(registrantToCopy);\\n        }\\n        _registrations[registrant] = registrant;\\n        emit RegistrationUpdated(registrant, true);\\n        _copyEntries(registrant, registrantToCopy);\\n    }\\n\\n    /**\\n     * @notice Update an operator address for a registered address - when filtered is true, the operator is filtered.\\n     */\\n    function updateOperator(address registrant, address operator, bool filtered)\\n        external\\n        onlyAddressOrOwner(registrant)\\n    {\\n        address registration = _registrations[registrant];\\n        if (registration == address(0)) {\\n            revert NotRegistered(registrant);\\n        }\\n        if (registration != registrant) {\\n            revert CannotUpdateWhileSubscribed(registration);\\n        }\\n        EnumerableSet.AddressSet storage filteredOperatorsRef = _filteredOperators[registrant];\\n\\n        if (!filtered) {\\n            bool removed = filteredOperatorsRef.remove(operator);\\n            if (!removed) {\\n                revert AddressNotFiltered(operator);\\n            }\\n        } else {\\n            bool added = filteredOperatorsRef.add(operator);\\n            if (!added) {\\n                revert AddressAlreadyFiltered(operator);\\n            }\\n        }\\n        emit OperatorUpdated(registrant, operator, filtered);\\n    }\\n\\n    /**\\n     * @notice Update a codeHash for a registered address - when filtered is true, the codeHash is filtered.\\n     *         Note that this will allow adding the bytes32(0) codehash, which could result in unexpected behavior,\\n     *         since calling `isCodeHashFiltered` will return true for bytes32(0), which is the codeHash of any\\n     *         un-initialized account. Since un-initialized accounts have no code, the registry will not validate\\n     *         that an un-initalized account's codeHash is not filtered. By the time an account is able to\\n     *         act as an operator (an account is initialized or a smart contract exclusively in the context of its\\n     *         constructor),  it will have a codeHash of EOA_CODEHASH, which cannot be filtered.\\n     */\\n    function updateCodeHash(address registrant, bytes32 codeHash, bool filtered)\\n        external\\n        onlyAddressOrOwner(registrant)\\n    {\\n        if (codeHash == EOA_CODEHASH) {\\n            revert CannotFilterEOAs();\\n        }\\n        address registration = _registrations[registrant];\\n        if (registration == address(0)) {\\n            revert NotRegistered(registrant);\\n        }\\n        if (registration != registrant) {\\n            revert CannotUpdateWhileSubscribed(registration);\\n        }\\n        EnumerableSet.Bytes32Set storage filteredCodeHashesRef = _filteredCodeHashes[registrant];\\n\\n        if (!filtered) {\\n            bool removed = filteredCodeHashesRef.remove(codeHash);\\n            if (!removed) {\\n                revert CodeHashNotFiltered(codeHash);\\n            }\\n        } else {\\n            bool added = filteredCodeHashesRef.add(codeHash);\\n            if (!added) {\\n                revert CodeHashAlreadyFiltered(codeHash);\\n            }\\n        }\\n        emit CodeHashUpdated(registrant, codeHash, filtered);\\n    }\\n\\n    /**\\n     * @notice Update multiple operators for a registered address - when filtered is true, the operators will be filtered. Reverts on duplicates.\\n     */\\n    function updateOperators(address registrant, address[] calldata operators, bool filtered)\\n        external\\n        onlyAddressOrOwner(registrant)\\n    {\\n        address registration = _registrations[registrant];\\n        if (registration == address(0)) {\\n            revert NotRegistered(registrant);\\n        }\\n        if (registration != registrant) {\\n            revert CannotUpdateWhileSubscribed(registration);\\n        }\\n        EnumerableSet.AddressSet storage filteredOperatorsRef = _filteredOperators[registrant];\\n        uint256 operatorsLength = operators.length;\\n        if (!filtered) {\\n            for (uint256 i = 0; i < operatorsLength;) {\\n                address operator = operators[i];\\n                bool removed = filteredOperatorsRef.remove(operator);\\n                if (!removed) {\\n                    revert AddressNotFiltered(operator);\\n                }\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        } else {\\n            for (uint256 i = 0; i < operatorsLength;) {\\n                address operator = operators[i];\\n                bool added = filteredOperatorsRef.add(operator);\\n                if (!added) {\\n                    revert AddressAlreadyFiltered(operator);\\n                }\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        }\\n        emit OperatorsUpdated(registrant, operators, filtered);\\n    }\\n\\n    /**\\n     * @notice Update multiple codeHashes for a registered address - when filtered is true, the codeHashes will be filtered. Reverts on duplicates.\\n     *         Note that this will allow adding the bytes32(0) codehash, which could result in unexpected behavior,\\n     *         since calling `isCodeHashFiltered` will return true for bytes32(0), which is the codeHash of any\\n     *         un-initialized account. Since un-initialized accounts have no code, the registry will not validate\\n     *         that an un-initalized account's codeHash is not filtered. By the time an account is able to\\n     *         act as an operator (an account is initialized or a smart contract exclusively in the context of its\\n     *         constructor),  it will have a codeHash of EOA_CODEHASH, which cannot be filtered.\\n     */\\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered)\\n        external\\n        onlyAddressOrOwner(registrant)\\n    {\\n        address registration = _registrations[registrant];\\n        if (registration == address(0)) {\\n            revert NotRegistered(registrant);\\n        }\\n        if (registration != registrant) {\\n            revert CannotUpdateWhileSubscribed(registration);\\n        }\\n        EnumerableSet.Bytes32Set storage filteredCodeHashesRef = _filteredCodeHashes[registrant];\\n        uint256 codeHashesLength = codeHashes.length;\\n        if (!filtered) {\\n            for (uint256 i = 0; i < codeHashesLength;) {\\n                bytes32 codeHash = codeHashes[i];\\n                bool removed = filteredCodeHashesRef.remove(codeHash);\\n                if (!removed) {\\n                    revert CodeHashNotFiltered(codeHash);\\n                }\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        } else {\\n            for (uint256 i = 0; i < codeHashesLength;) {\\n                bytes32 codeHash = codeHashes[i];\\n                if (codeHash == EOA_CODEHASH) {\\n                    revert CannotFilterEOAs();\\n                }\\n                bool added = filteredCodeHashesRef.add(codeHash);\\n                if (!added) {\\n                    revert CodeHashAlreadyFiltered(codeHash);\\n                }\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        }\\n        emit CodeHashesUpdated(registrant, codeHashes, filtered);\\n    }\\n\\n    /**\\n     * @notice Subscribe an address to another registrant's filtered operators and codeHashes. Will remove previous\\n     *         subscription if present.\\n     *         Note that accounts with subscriptions may go on to subscribe to other accounts - in this case,\\n     *         subscriptions will not be forwarded. Instead the former subscription's existing entries will still be\\n     *         used.\\n     */\\n    function subscribe(address registrant, address newSubscription) external onlyAddressOrOwner(registrant) {\\n        if (registrant == newSubscription) {\\n            revert CannotSubscribeToSelf();\\n        }\\n        if (newSubscription == address(0)) {\\n            revert CannotSubscribeToZeroAddress();\\n        }\\n        address registration = _registrations[registrant];\\n        if (registration == address(0)) {\\n            revert NotRegistered(registrant);\\n        }\\n        if (registration == newSubscription) {\\n            revert AlreadySubscribed(newSubscription);\\n        }\\n        address newSubscriptionRegistration = _registrations[newSubscription];\\n        if (newSubscriptionRegistration == address(0)) {\\n            revert NotRegistered(newSubscription);\\n        }\\n        if (newSubscriptionRegistration != newSubscription) {\\n            revert CannotSubscribeToRegistrantWithSubscription(newSubscription);\\n        }\\n\\n        if (registration != registrant) {\\n            _subscribers[registration].remove(registrant);\\n            emit SubscriptionUpdated(registrant, registration, false);\\n        }\\n        _registrations[registrant] = newSubscription;\\n        _subscribers[newSubscription].add(registrant);\\n        emit SubscriptionUpdated(registrant, newSubscription, true);\\n    }\\n\\n    /**\\n     * @notice Unsubscribe an address from its current subscribed registrant, and optionally copy its filtered operators and codeHashes.\\n     */\\n    function unsubscribe(address registrant, bool copyExistingEntries) external onlyAddressOrOwner(registrant) {\\n        address registration = _registrations[registrant];\\n        if (registration == address(0)) {\\n            revert NotRegistered(registrant);\\n        }\\n        if (registration == registrant) {\\n            revert NotSubscribed();\\n        }\\n        _subscribers[registration].remove(registrant);\\n        _registrations[registrant] = registrant;\\n        emit SubscriptionUpdated(registrant, registration, false);\\n        if (copyExistingEntries) {\\n            _copyEntries(registrant, registration);\\n        }\\n    }\\n\\n    /**\\n     * @notice Copy filtered operators and codeHashes from a different registrantToCopy to addr.\\n     */\\n    function copyEntriesOf(address registrant, address registrantToCopy) external onlyAddressOrOwner(registrant) {\\n        if (registrant == registrantToCopy) {\\n            revert CannotCopyFromSelf();\\n        }\\n        address registration = _registrations[registrant];\\n        if (registration == address(0)) {\\n            revert NotRegistered(registrant);\\n        }\\n        if (registration != registrant) {\\n            revert CannotUpdateWhileSubscribed(registration);\\n        }\\n        address registrantRegistration = _registrations[registrantToCopy];\\n        if (registrantRegistration == address(0)) {\\n            revert NotRegistered(registrantToCopy);\\n        }\\n        _copyEntries(registrant, registrantToCopy);\\n    }\\n\\n    /// @dev helper to copy entries from registrantToCopy to registrant and emit events\\n    function _copyEntries(address registrant, address registrantToCopy) private {\\n        EnumerableSet.AddressSet storage filteredOperatorsRef = _filteredOperators[registrantToCopy];\\n        EnumerableSet.Bytes32Set storage filteredCodeHashesRef = _filteredCodeHashes[registrantToCopy];\\n        uint256 filteredOperatorsLength = filteredOperatorsRef.length();\\n        uint256 filteredCodeHashesLength = filteredCodeHashesRef.length();\\n        for (uint256 i = 0; i < filteredOperatorsLength;) {\\n            address operator = filteredOperatorsRef.at(i);\\n            bool added = _filteredOperators[registrant].add(operator);\\n            if (added) {\\n                emit OperatorUpdated(registrant, operator, true);\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        for (uint256 i = 0; i < filteredCodeHashesLength;) {\\n            bytes32 codehash = filteredCodeHashesRef.at(i);\\n            bool added = _filteredCodeHashes[registrant].add(codehash);\\n            if (added) {\\n                emit CodeHashUpdated(registrant, codehash, true);\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    //////////////////\\n    // VIEW METHODS //\\n    //////////////////\\n\\n    /**\\n     * @notice Get the subscription address of a given registrant, if any.\\n     */\\n    function subscriptionOf(address registrant) external view returns (address subscription) {\\n        subscription = _registrations[registrant];\\n        if (subscription == address(0)) {\\n            revert NotRegistered(registrant);\\n        } else if (subscription == registrant) {\\n            subscription = address(0);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the set of addresses subscribed to a given registrant.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function subscribers(address registrant) external view returns (address[] memory) {\\n        return _subscribers[registrant].values();\\n    }\\n\\n    /**\\n     * @notice Get the subscriber at a given index in the set of addresses subscribed to a given registrant.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function subscriberAt(address registrant, uint256 index) external view returns (address) {\\n        return _subscribers[registrant].at(index);\\n    }\\n\\n    /**\\n     * @notice Returns true if operator is filtered by a given address or its subscription.\\n     */\\n    function isOperatorFiltered(address registrant, address operator) external view returns (bool) {\\n        address registration = _registrations[registrant];\\n        if (registration != registrant) {\\n            return _filteredOperators[registration].contains(operator);\\n        }\\n        return _filteredOperators[registrant].contains(operator);\\n    }\\n\\n    /**\\n     * @notice Returns true if a codeHash is filtered by a given address or its subscription.\\n     */\\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external view returns (bool) {\\n        address registration = _registrations[registrant];\\n        if (registration != registrant) {\\n            return _filteredCodeHashes[registration].contains(codeHash);\\n        }\\n        return _filteredCodeHashes[registrant].contains(codeHash);\\n    }\\n\\n    /**\\n     * @notice Returns true if the hash of an address's code is filtered by a given address or its subscription.\\n     */\\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external view returns (bool) {\\n        bytes32 codeHash = operatorWithCode.codehash;\\n        address registration = _registrations[registrant];\\n        if (registration != registrant) {\\n            return _filteredCodeHashes[registration].contains(codeHash);\\n        }\\n        return _filteredCodeHashes[registrant].contains(codeHash);\\n    }\\n\\n    /**\\n     * @notice Returns true if an address has registered\\n     */\\n    function isRegistered(address registrant) external view returns (bool) {\\n        return _registrations[registrant] != address(0);\\n    }\\n\\n    /**\\n     * @notice Returns a list of filtered operators for a given address or its subscription.\\n     */\\n    function filteredOperators(address registrant) external view returns (address[] memory) {\\n        address registration = _registrations[registrant];\\n        if (registration != registrant) {\\n            return _filteredOperators[registration].values();\\n        }\\n        return _filteredOperators[registrant].values();\\n    }\\n\\n    /**\\n     * @notice Returns the set of filtered codeHashes for a given address or its subscription.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function filteredCodeHashes(address registrant) external view returns (bytes32[] memory) {\\n        address registration = _registrations[registrant];\\n        if (registration != registrant) {\\n            return _filteredCodeHashes[registration].values();\\n        }\\n        return _filteredCodeHashes[registrant].values();\\n    }\\n\\n    /**\\n     * @notice Returns the filtered operator at the given index of the set of filtered operators for a given address or\\n     *         its subscription.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function filteredOperatorAt(address registrant, uint256 index) external view returns (address) {\\n        address registration = _registrations[registrant];\\n        if (registration != registrant) {\\n            return _filteredOperators[registration].at(index);\\n        }\\n        return _filteredOperators[registrant].at(index);\\n    }\\n\\n    /**\\n     * @notice Returns the filtered codeHash at the given index of the list of filtered codeHashes for a given address or\\n     *         its subscription.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function filteredCodeHashAt(address registrant, uint256 index) external view returns (bytes32) {\\n        address registration = _registrations[registrant];\\n        if (registration != registrant) {\\n            return _filteredCodeHashes[registration].at(index);\\n        }\\n        return _filteredCodeHashes[registrant].at(index);\\n    }\\n\\n    /**\\n     * @dev Convenience method to compute the code hash of an arbitrary contract\\n     */\\n    function codeHashOf(address a) external view returns (bytes32) {\\n        return a.codehash;\\n    }\\n}\\n\"\r\n    },\r\n    \"operator-filter-registry/src/OperatorFilterRegistryErrorsAndEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ncontract OperatorFilterRegistryErrorsAndEvents {\\n    /// @notice Emitted when trying to register an address that has no code.\\n    error CannotFilterEOAs();\\n\\n    /// @notice Emitted when trying to add an address that is already filtered.\\n    error AddressAlreadyFiltered(address operator);\\n\\n    /// @notice Emitted when trying to remove an address that is not filtered.\\n    error AddressNotFiltered(address operator);\\n\\n    /// @notice Emitted when trying to add a codehash that is already filtered.\\n    error CodeHashAlreadyFiltered(bytes32 codeHash);\\n\\n    /// @notice Emitted when trying to remove a codehash that is not filtered.\\n    error CodeHashNotFiltered(bytes32 codeHash);\\n\\n    /// @notice Emitted when the caller is not the address or EIP-173 \\\"owner()\\\"\\n    error OnlyAddressOrOwner();\\n\\n    /// @notice Emitted when the registrant is not registered.\\n    error NotRegistered(address registrant);\\n\\n    /// @notice Emitted when the registrant is already registered.\\n    error AlreadyRegistered();\\n\\n    /// @notice Emitted when the registrant is already subscribed.\\n    error AlreadySubscribed(address subscription);\\n\\n    /// @notice Emitted when the registrant is not subscribed.\\n    error NotSubscribed();\\n\\n    /// @notice Emitted when trying to update a registration where the registrant is already subscribed.\\n    error CannotUpdateWhileSubscribed(address subscription);\\n\\n    /// @notice Emitted when trying to subscribe to itself.\\n    error CannotSubscribeToSelf();\\n\\n    /// @notice Emitted when trying to subscribe to the zero address.\\n    error CannotSubscribeToZeroAddress();\\n\\n    /// @notice Emitted when trying to register and the contract is not ownable (EIP-173 \\\"owner()\\\")\\n    error NotOwnable();\\n\\n    /// @notice Emitted when an address is filtered.\\n    error AddressFiltered(address filtered);\\n\\n    /// @notice Emitted when a codeHash is filtered.\\n    error CodeHashFiltered(address account, bytes32 codeHash);\\n\\n    /// @notice Emited when trying to register to a registrant with a subscription.\\n    error CannotSubscribeToRegistrantWithSubscription(address registrant);\\n\\n    /// @notice Emitted when trying to copy a registration from itself.\\n    error CannotCopyFromSelf();\\n\\n    /// @notice Emitted when a registration is updated.\\n    event RegistrationUpdated(address indexed registrant, bool indexed registered);\\n\\n    /// @notice Emitted when an operator is updated.\\n    event OperatorUpdated(address indexed registrant, address indexed operator, bool indexed filtered);\\n\\n    /// @notice Emitted when multiple operators are updated.\\n    event OperatorsUpdated(address indexed registrant, address[] operators, bool indexed filtered);\\n\\n    /// @notice Emitted when a codeHash is updated.\\n    event CodeHashUpdated(address indexed registrant, bytes32 indexed codeHash, bool indexed filtered);\\n\\n    /// @notice Emitted when multiple codeHashes are updated.\\n    event CodeHashesUpdated(address indexed registrant, bytes32[] codeHashes, bool indexed filtered);\\n\\n    /// @notice Emitted when a subscription is updated.\\n    event SubscriptionUpdated(address indexed registrant, address indexed subscription, bool indexed subscribed);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 300\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fairxyzStagesRegistry_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxRecipientsPerAirdrop_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"operatorFilterRegistry_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operatorFilterSubscription_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EditionAlreadyMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EditionDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EditionSignatureAlreadyReleased\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EditionSupplyCanOnlyBeReduced\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EditionSupplyLessThanMintedCount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EditionSupplyLessThanScheduledStagesPhaseLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EditionSupplyTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectEthValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMintQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidNumberOfRecipients\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRoyaltyFraction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignatureNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidURI\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotApprovedOrOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotBurnable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughSupplyRemaining\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTransferable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RecipientAllowanceUsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RecipientEditionAllowanceUsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RecipientStageAllowanceUsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIsNotExtension\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureAlreadyUsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StageSoldOut\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"royaltyFraction\",\"type\":\"uint96\"}],\"name\":\"DefaultRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stageIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"editionMintedCount\",\"type\":\"uint256\"}],\"name\":\"EditionAirdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"burnable\",\"type\":\"bool\"}],\"name\":\"EditionBurnable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"externalId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint40\",\"name\":\"maxMintsPerWallet\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"maxSupply\",\"type\":\"uint40\"},{\"internalType\":\"bool\",\"name\":\"burnable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"signatureReleased\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"soulbound\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct Edition\",\"name\":\"edition\",\"type\":\"tuple\"}],\"name\":\"EditionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"}],\"name\":\"EditionDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxMintsPerWallet\",\"type\":\"uint256\"}],\"name\":\"EditionMaxMintsPerWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"}],\"name\":\"EditionMaxSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"royaltyFraction\",\"type\":\"uint96\"}],\"name\":\"EditionRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"}],\"name\":\"EditionSignatureReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stageIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"editionMintedCount\",\"type\":\"uint256\"}],\"name\":\"EditionStageMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"EditionURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"uriExtension\",\"type\":\"address\"}],\"name\":\"EditionURIExtension\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mintingExtension\",\"type\":\"address\"}],\"name\":\"MintingExtension\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"disabled\",\"type\":\"bool\"}],\"name\":\"OperatorFilterDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"primarySaleReceiver_\",\"type\":\"address\"}],\"name\":\"PrimarySaleReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"royaltyExtension\",\"type\":\"address\"}],\"name\":\"RoyaltyExtension\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_SUBSCRIPTION_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTRY_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"name\":\"airdropEdition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"externalId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint40\",\"name\":\"maxMintsPerWallet\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"maxSupply\",\"type\":\"uint40\"},{\"internalType\":\"bool\",\"name\":\"burnable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"signatureReleased\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"soulbound\",\"type\":\"bool\"}],\"internalType\":\"struct Edition\",\"name\":\"edition\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint40\",\"name\":\"startTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"endTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"mintsPerWallet\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"phaseLimit\",\"type\":\"uint40\"},{\"internalType\":\"uint96\",\"name\":\"price\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"signatureReleased\",\"type\":\"bool\"}],\"internalType\":\"struct Stage[]\",\"name\":\"mintStages\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EditionCreateParams[]\",\"name\":\"editions\",\"type\":\"tuple[]\"}],\"name\":\"createEditions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"}],\"name\":\"deleteEdition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"}],\"name\":\"editionTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"}],\"name\":\"getEdition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint40\",\"name\":\"maxMintsPerWallet\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"maxSupply\",\"type\":\"uint40\"},{\"internalType\":\"bool\",\"name\":\"burnable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"signatureReleased\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"soulbound\",\"type\":\"bool\"}],\"internalType\":\"struct Edition\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"grantDefaultAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"defaultRoyalty_\",\"type\":\"uint96\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"externalId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint40\",\"name\":\"maxMintsPerWallet\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"maxSupply\",\"type\":\"uint40\"},{\"internalType\":\"bool\",\"name\":\"burnable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"signatureReleased\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"soulbound\",\"type\":\"bool\"}],\"internalType\":\"struct Edition\",\"name\":\"edition\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint40\",\"name\":\"startTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"endTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"mintsPerWallet\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"phaseLimit\",\"type\":\"uint40\"},{\"internalType\":\"uint96\",\"name\":\"price\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"signatureReleased\",\"type\":\"bool\"}],\"internalType\":\"struct Stage[]\",\"name\":\"mintStages\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EditionCreateParams[]\",\"name\":\"editions_\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"operatorFilterEnabled_\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"defaultMintingExtension_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"defaultRoyaltyExtension_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"signatureNonce\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"signatureMaxMints\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mintEdition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"allowedQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"editionMintedTotal\",\"type\":\"uint256\"}],\"internalType\":\"struct EditionMintingHandler\",\"name\":\"handler\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorFilterDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"}],\"name\":\"releaseEditionSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"royaltyFraction\",\"type\":\"uint96\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"maxMintsPerWallet\",\"type\":\"uint40\"}],\"name\":\"setEditionMaxMintsPerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"maxSupply\",\"type\":\"uint40\"}],\"name\":\"setEditionMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"royaltyFraction\",\"type\":\"uint96\"}],\"name\":\"setEditionRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint40\",\"name\":\"startTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"endTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"mintsPerWallet\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"phaseLimit\",\"type\":\"uint40\"},{\"internalType\":\"uint96\",\"name\":\"price\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"signatureReleased\",\"type\":\"bool\"}],\"internalType\":\"struct Stage[]\",\"name\":\"stages\",\"type\":\"tuple[]\"}],\"name\":\"setEditionStages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setEditionURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uriExtension\",\"type\":\"address\"}],\"name\":\"setEditionURIExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMintingExtension\",\"type\":\"address\"}],\"name\":\"setMintingExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"primarySaleReceiver\",\"type\":\"address\"}],\"name\":\"setPrimarySaleReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRoyaltyExtension\",\"type\":\"address\"}],\"name\":\"setRoyaltyExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleOperatorFilterDisabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Fairxyz1155Editions", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "300", "ConstructorArguments": "0000000000000000000000006e51c392067d6276de6a52eb8e1934893b99dc370000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000aaeb6d7670e522a718067333cd4e0000000000000000000000003cc6cdda760b79bafa08df41ecfa224f810dceb6", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}