{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Core.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport {ICore} from \\\"./interfaces/ICore.sol\\\";\\nimport {Dispatcher} from \\\"./base/Dispatcher.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin-contracts/contracts/interfaces/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {LzBridgeData, TokenData} from \\\"./lib/CoreStructs.sol\\\";\\nimport {IStargateReceiver} from \\\"./interfaces/stargate/IStargateReceiver.sol\\\";\\nimport {IStargateRouter} from \\\"./interfaces/stargate/IStargateRouter.sol\\\";\\nimport {IWrappedToken} from \\\"./interfaces/IWrappedToken.sol\\\";\\nimport {FeeOperator} from \\\"./utils/FeeOperator.sol\\\";\\nimport {Context} from \\\"@openzeppelin-contracts/contracts/utils/Context.sol\\\";\\n\\ncontract Core is ICore, FeeOperator, Dispatcher, IStargateReceiver {\\n    constructor(\\n        address _executor,\\n        address _stargateRouter,\\n        address _uniswapRouter,\\n        address _wrappedNative,\\n        address _sgETH,\\n        address _trustedForwarder\\n    ) Dispatcher(_executor, _stargateRouter, _uniswapRouter, _wrappedNative, _sgETH, _trustedForwarder) {}\\n\\n    /**\\n     * @dev Swaps currency from the incoming to the outgoing token and executes a transaction with payment.\\n     * @param target The address of the target contract for the payment transaction.\\n     * @param paymentOperator The operator address for payment transfers requiring erc20 approvals.\\n     * @param tokenData The token swap data and payment transaction payload\\n     */\\n    function swapAndExecute(address target, address paymentOperator, TokenData calldata tokenData)\\n        external\\n        payable\\n        handleFees(0, tokenData.amountIn, tokenData.tokenIn, tokenData.nativeOut)\\n    {\\n        _receiveErc20(tokenData.amountIn, tokenData.tokenIn);\\n        _swapAndExecute(_msgSender(), target, paymentOperator, block.timestamp, tokenData);\\n    }\\n\\n    /**\\n     * @dev Bridges funds in native or erc20 and a payment transaction payload to the destination chain\\n     * @param lzBridgeData The configuration for the cross bridge transaction\\n     * @param tokenData The token swap data and payment transaction payload\\n     * @param lzTxObj The configuration of gas and dust for post bridge execution\\n     */\\n    function bridgeAndExecute(\\n        LzBridgeData calldata lzBridgeData,\\n        TokenData calldata tokenData,\\n        IStargateRouter.lzTxObj calldata lzTxObj\\n    ) external payable handleFees(lzBridgeData.fee, tokenData.amountIn, tokenData.tokenIn, tokenData.nativeOut) {\\n        if (tokenData.nativeOut > 0) {\\n            revert BridgeNativeOutNonZero();\\n        }\\n\\n        _receiveErc20(tokenData.amountIn, tokenData.tokenIn);\\n        address tokenIn = tokenData.tokenIn;\\n        // if we need to wrap token for non sg_eth bridges do so\\n        if (tokenData.tokenIn == address(0) && tokenData.tokenOut != SG_ETH) {\\n            tokenIn = WRAPPED_NATIVE;\\n            IWrappedToken(tokenIn).deposit{value: tokenData.amountIn}();\\n        }\\n        // only swap if we need to (if we pass in eth and tokenOut is SG_ETH, we also don't swap)\\n        if (tokenIn != tokenData.tokenOut && !(tokenIn == address(0) && tokenData.tokenOut == SG_ETH)) {\\n            _swapExactOutput(\\n                _msgSender(), tokenIn, tokenData.amountIn, tokenData.amountOut, block.timestamp, tokenData.path\\n            );\\n        }\\n\\n        if (tokenIn == tokenData.tokenOut && tokenData.amountOut > tokenData.amountIn) {\\n            revert BridgeOutputExceedsInput();\\n        }\\n\\n        _approveAndBridge(tokenData.tokenOut, tokenData.amountOut, lzBridgeData, lzTxObj, tokenData.payload);\\n    }\\n\\n    /*\\n     * @dev Called by the Stargate Router on the destination chain upon bridging funds.\\n     * @dev unused @param _srcChainId The remote chainId sending the tokens.\\n     * @dev unused @param _srcAddress The remote Bridge address.\\n     * @dev unused @param _nonce The message ordering nonce.\\n     * @param _token The token contract on the local chain.\\n     * @param amountLD The qty of local _token contract tokens.\\n     * @param payload The bytes containing the execution paramaters.\\n     */\\n    function sgReceive(\\n        uint16, // _srcChainid\\n        bytes memory, // _srcAddress\\n        uint256, // _nonce\\n        address _token,\\n        uint256 amountLD,\\n        bytes memory payload\\n    ) external override {\\n        if (_msgSender() != address(STARGATE_ROUTER)) {\\n            revert OnlyStargateRouter();\\n        }\\n\\n        (\\n            address sender,\\n            address target,\\n            address _paymentToken,\\n            address paymentOperator,\\n            uint256 _amountOutMin,\\n            bytes memory path,\\n            bytes memory callData\\n        ) = abi.decode(payload, (address, address, address, address, uint256, bytes, bytes));\\n\\n        TokenData memory tokenData = TokenData(amountLD, _amountOutMin, 0, _token, _paymentToken, path, callData);\\n\\n        _swapAndExecute(sender, target, paymentOperator, block.timestamp, tokenData);\\n\\n        emit ReceivedOnDestination(_token, amountLD);\\n    }\\n\\n    function _msgSender() internal view override (Context, Dispatcher) returns (address) {\\n        return Dispatcher._msgSender();\\n    }\\n\\n    function _msgData() internal view override (Context, Dispatcher) returns (bytes calldata) {\\n        return Dispatcher._msgData();\\n    }\\n\\n    function withdraw(IERC20 token) external onlyOwner {\\n        SafeERC20.safeTransfer(token, _msgSender(), token.balanceOf(address(this)));\\n    }\\n\\n    function withdrawEth() external onlyOwner {\\n        (bool success,) = payable(_msgSender()).call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"Could not drain ETH\\\");\\n    }\\n\\n    /// @notice To receive ETH from WETH and NFT protocols\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ICore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport {LzBridgeData, TokenData} from \\\"../lib/CoreStructs.sol\\\";\\nimport {IStargateRouter} from \\\"../interfaces/stargate/IStargateRouter.sol\\\";\\n\\ninterface ICore {\\n    /*\\n     * @dev Only Stargate Router can perform this operation.\\n     */\\n    error OnlyStargateRouter();\\n\\n    /**\\n     * @dev Swaps currency from the incoming to the outgoing token and executes a transaction with payment.\\n     * @param target The address of the target contract for the payment transaction.\\n     * @param paymentOperator The operator address for payment transfers requiring erc20 approvals.\\n     * @param tokenData The token swap data and payment transaction payload\\n     */\\n    function swapAndExecute(address target, address paymentOperator, TokenData calldata tokenData) external payable;\\n\\n    /**\\n     * @dev Bridges funds in native or erc20 and a payment transaction payload to the destination chain\\n     * @param lzBridgeData The configuration for the cross bridge transaction\\n     * @param tokenData The token swap data and payment transaction payload\\n     * @param lzTxObj The configuration of gas and dust for post bridge execution\\n     */\\n    function bridgeAndExecute(\\n        LzBridgeData calldata lzBridgeData,\\n        TokenData calldata tokenData,\\n        IStargateRouter.lzTxObj calldata lzTxObj\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"src/base/Dispatcher.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport {BoxImmutables} from \\\"./BoxImmutables.sol\\\";\\nimport {IWrappedToken} from \\\"../interfaces/IWrappedToken.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin-contracts/contracts/interfaces/IERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport {ISwapRouter} from \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {LzBridgeData, TokenData} from \\\"../lib/CoreStructs.sol\\\";\\nimport {IStargateRouter} from \\\"../interfaces/stargate/IStargateRouter.sol\\\";\\nimport {IExecutor} from \\\"../interfaces/IExecutor.sol\\\";\\nimport {ERC2771Context} from \\\"@openzeppelin-contracts/contracts/metatx/ERC2771Context.sol\\\";\\nimport {Context} from \\\"@openzeppelin-contracts/contracts/utils/Context.sol\\\";\\n\\ncontract Dispatcher is ERC2771Context, BoxImmutables, Ownable {\\n    constructor(\\n        address _executor,\\n        address _stargateRouter,\\n        address _uniswapRouter,\\n        address _wrappedNative,\\n        address _sgEth,\\n        address _trustedForwarder\\n    )\\n        ERC2771Context(_trustedForwarder)\\n        BoxImmutables(_executor, _stargateRouter, _uniswapRouter, _wrappedNative, _sgEth)\\n    {}\\n\\n    function _msgSender() internal view virtual override (Context, ERC2771Context) returns (address) {\\n        return ERC2771Context._msgSender();\\n    }\\n\\n    function _msgData() internal view virtual override (Context, ERC2771Context) returns (bytes calldata) {\\n        return ERC2771Context._msgData();\\n    }\\n\\n    /**\\n     * @dev Internal function to handle receiving erc20 tokens for bridging and swapping.\\n     * @param amountIn The amount of native or erc20 being transferred.\\n     * @param tokenIn The address of the token being transferred.\\n     */\\n    function _receiveErc20(uint256 amountIn, address tokenIn) internal {\\n        if (tokenIn != address(0)) {\\n            SafeERC20.safeTransferFrom(IERC20(tokenIn), _msgSender(), address(this), amountIn);\\n        }\\n    }\\n\\n    event BridgedExecutionUnsuccessful();\\n\\n    event RefundUnsuccessful();\\n\\n    error ExecutionUnsuccessful();\\n\\n    error SwapOutputExceedsInput();\\n\\n    error SwapUnsuccessful();\\n\\n    error BridgeOutputExceedsInput();\\n\\n    error BridgeNativeOutNonZero();\\n\\n    /**\\n     * @dev Internal function to approve an erc20 token and perform a cross chain swap using Stargate Router.\\n     * @param bridgeToken The erc20 which will be approved and transferred.\\n     * @param amountOut The amount of bridge token being transferred.\\n     * @param lzBridgeData The configuration for the cross bridge transaction.\\n     * @param lzTxObj The configuration of gas and dust for post bridge execution.\\n     * @param payload The bytes containing execution parameters for post bridge execution.\\n     */\\n    function _approveAndBridge(\\n        address bridgeToken,\\n        uint256 amountOut,\\n        LzBridgeData calldata lzBridgeData,\\n        IStargateRouter.lzTxObj calldata lzTxObj,\\n        bytes calldata payload\\n    ) internal {\\n        // approve for bridge\\n        if (bridgeToken != SG_ETH) {\\n            SafeERC20.safeIncreaseAllowance(IERC20(bridgeToken), STARGATE_ROUTER, amountOut);\\n        }\\n        IStargateRouter(STARGATE_ROUTER).swap{\\n            value: bridgeToken == SG_ETH ? (lzBridgeData.fee + amountOut) : lzBridgeData.fee\\n        }(\\n            lzBridgeData._dstChainId, // send to LayerZero chainId\\n            lzBridgeData._srcPoolId, // source pool id\\n            lzBridgeData._dstPoolId, // dst pool id\\n            payable(_msgSender()), // refund adddress. extra gas (if any) is returned to this address\\n            amountOut, // quantity to swap\\n            (amountOut * 994) / 1000, // the min qty you would accept on the destination, fee is 6 bips\\n            lzTxObj, // additional gasLimit increase, airdrop, at address\\n            abi.encodePacked(lzBridgeData._bridgeAddress), // the address to send the tokens to on the destination\\n            payload // bytes param, if you wish to send additional payload you can abi.encode() them here\\n        );\\n    }\\n\\n    /**\\n     * @dev Internal function to swap tokens for an exact output amount using Uniswap v3 SwapRouter.\\n     * @param sender The account receiving any refunds, typically the EOA which initiated the transaction.\\n     * @param tokenIn The input token for the swap, use zero address to convert native to erc20 wrapped native.\\n     * @param amountInMaximum The maximum amount allocated to swap for the exact amount out.\\n     * @param amountOut The exact output amount of tokens desired from the swap.\\n     * @param deadline The deadline for execution of the Uniswap transaction.\\n     * @param path The encoded sequences of pools and fees required to perform the swap.\\n     */\\n    function _swapExactOutput(\\n        address sender,\\n        address tokenIn,\\n        uint256 amountInMaximum,\\n        uint256 amountOut,\\n        uint256 deadline,\\n        bytes memory path\\n    ) internal returns (bool success) {\\n        // deposit native into wrapped native if necessary\\n        if (tokenIn == address(0)) {\\n            IWrappedToken(WRAPPED_NATIVE).deposit{value: amountInMaximum}();\\n            tokenIn = WRAPPED_NATIVE;\\n        }\\n\\n        // approve router to use our wrapped native\\n        SafeERC20.safeIncreaseAllowance(IERC20(tokenIn), UNISWAP_ROUTER, amountInMaximum);\\n\\n        // setup the parameters for multi hop swap\\n        ISwapRouter.ExactOutputParams memory params = ISwapRouter.ExactOutputParams({\\n            path: path,\\n            recipient: address(this),\\n            deadline: deadline,\\n            amountOut: amountOut,\\n            amountInMaximum: amountInMaximum\\n        });\\n\\n        success = true;\\n        uint256 refund;\\n\\n        // perform the swap and calculate any excess erc20 funds\\n        if (_msgSender() == STARGATE_ROUTER) {\\n            try ISwapRouter(UNISWAP_ROUTER).exactOutput(params) returns (uint256 amountIn) {\\n                refund = amountInMaximum - amountIn;\\n            } catch {\\n                refund = amountInMaximum;\\n                success = false;\\n            }\\n        } else {\\n            uint256 amountIn = ISwapRouter(UNISWAP_ROUTER).exactOutput(params);\\n            refund = amountInMaximum - amountIn;\\n        }\\n\\n        // refund any excess erc20 funds to sender\\n        if (refund > 0) {\\n            SafeERC20.safeDecreaseAllowance(IERC20(tokenIn), UNISWAP_ROUTER, refund);\\n            SafeERC20.safeTransfer(IERC20(tokenIn), sender, refund);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to swaps currency from the incoming to the outgoing token and execute a transaction with payment.\\n     * @param sender The account receiving any refunds, typically the EOA which initiated the transaction.\\n     * @param target The address of the target contract for the payment transaction.\\n     * @param paymentOperator The operator address for payment transfers requiring erc20 approvals.\\n     * @param deadline The deadline for execution of the uniswap transaction.\\n     * @param data The token swap data and post bridge execution payload.\\n     */\\n    function _swapAndExecute(\\n        address sender,\\n        address target,\\n        address paymentOperator,\\n        uint256 deadline,\\n        TokenData memory data\\n    ) internal {\\n        bool success = true;\\n\\n        // confirm native currency output does not exceed native currency input\\n        if (data.tokenIn == data.tokenOut && data.amountOut > data.amountIn) {\\n            if (_msgSender() == STARGATE_ROUTER) {\\n                _refund(sender, data.tokenIn, data.amountIn);\\n                success = false;\\n            } else {\\n                revert SwapOutputExceedsInput();\\n            }\\n        }\\n\\n        // if necessary, swap incoming and outgoing tokens and unwrap native funds\\n        if (data.tokenIn != data.tokenOut) {\\n            if (data.tokenIn == WRAPPED_NATIVE && data.tokenOut == address(0)) {\\n                // unwrap native funds\\n                IWrappedToken(WRAPPED_NATIVE).withdraw(data.amountOut);\\n            } else if (data.tokenIn != SG_ETH || data.tokenOut != address(0)) {\\n                success = _swapExactOutput(sender, data.tokenIn, data.amountIn, data.amountOut, deadline, data.path);\\n                if (success && data.tokenOut == address(0)) {\\n                    IWrappedToken(WRAPPED_NATIVE).withdraw(data.amountOut);\\n                } else if (!success) {\\n                    if (_msgSender() == STARGATE_ROUTER) {\\n                        _refund(sender, data.tokenIn, data.amountIn);\\n                    } else {\\n                        revert SwapUnsuccessful();\\n                    }\\n                }\\n            }\\n        }\\n\\n        if (success) {\\n            if (data.tokenOut == address(0)) {\\n                // complete payment transaction with native currency\\n                try IExecutor(EXECUTOR).execute{value: data.amountOut + data.nativeOut}(target, paymentOperator, data)\\n                returns (bool executionSuccess) {\\n                    success = executionSuccess;\\n                } catch {\\n                    success = false;\\n                }\\n            } else {\\n                // complete payment transaction with erc20 using executor\\n                SafeERC20.safeIncreaseAllowance(IERC20(data.tokenOut), EXECUTOR, data.amountOut);\\n                try IExecutor(EXECUTOR).execute{value: data.nativeOut}(target, paymentOperator, data) returns (\\n                    bool executionSuccess\\n                ) {\\n                    success = executionSuccess;\\n                } catch {\\n                    success = false;\\n                }\\n            }\\n\\n            if (!success) {\\n                if (_msgSender() == STARGATE_ROUTER) {\\n                    _refund(sender, data.tokenOut, data.amountOut);\\n                    emit BridgedExecutionUnsuccessful();\\n                } else {\\n                    revert ExecutionUnsuccessful();\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to handle refund transfers of native or erc20 to a recipient.\\n     * @param to The recipient of the refund transfer.\\n     * @param token The token being transferred, use zero address for native currency.\\n     * @param amount The amount of native or erc20 being transferred to the recipient.\\n     */\\n    function _refund(address to, address token, uint256 amount) internal {\\n        if (token == address(0)) {\\n            (bool success,) = payable(to).call{value: amount}(\\\"\\\");\\n            if (!success) {\\n                emit RefundUnsuccessful();\\n            }\\n        } else {\\n            SafeERC20.safeTransfer(IERC20(token), to, amount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/lib/CoreStructs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\n/*\\n * @dev A parameter object containing data for bridging funds and an  between chains\\n */\\nstruct LzBridgeData {\\n    uint120 _srcPoolId;\\n    uint120 _dstPoolId;\\n    uint16 _dstChainId;\\n    address _bridgeAddress;\\n    uint96 fee;\\n}\\n\\n/*\\n * @dev A parameter object containing token swap data and a payment transaction payload\\n */\\nstruct TokenData {\\n    uint256 amountIn;\\n    uint256 amountOut;\\n    uint256 nativeOut;\\n    address tokenIn;\\n    address tokenOut;\\n    bytes path;\\n    bytes payload;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/stargate/IStargateReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\ninterface IStargateReceiver {\\n    event ReceivedOnDestination(address token, uint256 amountLD);\\n\\n    /*\\n     * @dev Called by the Stargate Router on the destination chain upon bridging funds\\n     * @dev unused @param _srcChainId The remote chainId sending the tokens\\n     * @dev unused @param _srcAddress The remote Bridge address\\n     * @dev unused @param _nonce The message ordering nonce\\n     * @param _token The token contract on the local chain\\n     * @param amountLD The qty of local _token contract tokens\\n     * @param payload The bytes containing the execution paramaters\\n     */\\n    function sgReceive(\\n        uint16, // _srcChainId\\n        bytes memory, // _srcAddress\\n        uint256, // _nonce\\n        address _token,\\n        uint256 amountLD,\\n        bytes memory payload\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/stargate/IStargateRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\npragma abicoder v2;\\n\\ninterface IStargateRouter {\\n    struct lzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n\\n    function addLiquidity(uint256 _poolId, uint256 _amountLD, address _to) external;\\n\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function redeemRemote(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        uint256 _minAmountLD,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function instantRedeemLocal(uint16 _srcPoolId, uint256 _amountLP, address _to) external returns (uint256);\\n\\n    function redeemLocal(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function sendCredits(uint16 _dstChainId, uint256 _srcPoolId, uint256 _dstPoolId, address payable _refundAddress)\\n        external\\n        payable;\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IWrappedToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\ninterface IWrappedToken {\\n    function withdraw(uint256 wad) external;\\n\\n    function deposit() external payable;\\n}\\n\"\r\n    },\r\n    \"src/utils/FeeOperator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"../interfaces/IFeeManager.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title FeeOperator\\n */\\nabstract contract FeeOperator is Ownable {\\n    /*\\n     * @dev The address of the fee manager.\\n     */\\n    address public feeManager;\\n\\n    /*\\n     * @dev Emitted when the fee manager is updated.\\n     * @param feeManager The address of the new fee manager.\\n     */\\n    event FeeManagerUpdated(address feeManager);\\n\\n    /*\\n     * @dev Insufficient funds to complete the transaction and pay fees.\\n     */\\n    error InsufficientFees();\\n\\n    /*\\n     * @dev Fees were unable to be transferred to the fee manager.\\n     */\\n    error FeeTransferFailed();\\n\\n    /*\\n     * @dev Excess funds were unable to be refunded to the caller.\\n     */\\n    error RefundFailed();\\n\\n    /**\\n     * @dev Function modifier to handle transaction fees for bridging and swapping.\\n     * @param bridgeFee The amount of native being transferred to the bridge protocol.\\n     * @param amountIn The amount of native or erc20 being transferred.\\n     * @param tokenIn The address of the token being transferred, zero address for native currency.\\n     * @param nativeOut The amount of unwrapped native being transferred.\\n     */\\n    modifier handleFees(uint256 bridgeFee, uint256 amountIn, address tokenIn, uint256 nativeOut) {\\n        if (feeManager != address(0)) {\\n            (uint256 fee, uint256 commission) = IFeeManager(feeManager).calculateFees(amountIn, tokenIn);\\n\\n            uint256 boxFees = fee + commission;\\n            uint256 amountRequired =\\n                tokenIn == address(0) ? amountIn + nativeOut + bridgeFee + boxFees : nativeOut + bridgeFee + boxFees;\\n\\n            if (msg.value < amountRequired) {\\n                revert InsufficientFees();\\n            }\\n\\n            _transferFees(boxFees);\\n            _transferRefund(msg.value - amountRequired);\\n        }\\n\\n        _;\\n    }\\n\\n    /**\\n     * @dev Updates the address of the fee manager used for calculating and collecting fees.\\n     * @param _feeManager The address of the new fee manager.\\n     */\\n    function setFeeManager(address _feeManager) external onlyOwner {\\n        feeManager = _feeManager;\\n        emit FeeManagerUpdated(_feeManager);\\n    }\\n\\n    /**\\n     * @dev Internal function to transfer fees to the fee manager.\\n     * @param fees The amount of fees being transferred.\\n     */\\n    function _transferFees(uint256 fees) internal {\\n        (bool success,) = payable(feeManager).call{value: fees}(\\\"\\\");\\n        if (!success) {\\n            revert FeeTransferFailed();\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to transfer excess funds to the caller.\\n     * @param refund The amount of funds to transfer.\\n     */\\n    function _transferRefund(uint256 refund) internal {\\n        if (refund > 0) {\\n            (bool success,) = payable(_msgSender()).call{value: refund}(\\\"\\\");\\n            if (!success) {\\n                revert RefundFailed();\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/base/BoxImmutables.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\ncontract BoxImmutables {\\n    address internal immutable STARGATE_ROUTER;\\n    address internal immutable UNISWAP_ROUTER;\\n    address internal immutable WRAPPED_NATIVE;\\n    address internal immutable SG_ETH;\\n    address internal immutable EXECUTOR;\\n\\n    constructor(\\n        address _executor,\\n        address _stargateRouter,\\n        address _uniswapRouter,\\n        address _wrappedNative,\\n        address _sgEth\\n    ) {\\n        EXECUTOR = _executor;\\n        WRAPPED_NATIVE = _wrappedNative;\\n        SG_ETH = _sgEth;\\n        STARGATE_ROUTER = _stargateRouter;\\n        UNISWAP_ROUTER = _uniswapRouter;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/v3-periphery/contracts/interfaces/ISwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IExecutor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport {TokenData} from \\\"../lib/CoreStructs.sol\\\";\\n\\ninterface IExecutor {\\n    error OnlyCoreAuth();\\n\\n    event CoreUpdated(address newCore);\\n\\n    /**\\n     * @dev executes call from dispatcher, creating additional checks on arbitrary calldata\\n     * @param target The address of the target contract for the payment transaction.\\n     * @param paymentOperator The operator address for payment transfers requiring erc20 approvals.\\n     * @param data The token swap data and post bridge execution payload.\\n     */\\n    function execute(address target, address paymentOperator, TokenData memory data)\\n        external\\n        payable\\n        returns (bool success);\\n\\n    /**\\n     * @dev sets core address\\n     * @param core core implementation address\\n     */\\n    function setCore(address core) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771Context is Context {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _trustedForwarder;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IFeeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\ninterface IFeeManager {\\n    error WithdrawFailed();\\n\\n    function setFees(uint256 _fee, uint256 _commissionBPS) external;\\n\\n    function calculateFees(uint256 amountIn, address tokenIn) external view returns (uint256 fee, uint256 commission);\\n\\n    function redeemFees() external;\\n}\\n\"\r\n    },\r\n    \"lib/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"@uniswap/v3-periphery/=lib/v3-periphery/\",\r\n      \"@uniswap/v3-core/=lib/v3-core/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"v3-core/=lib/v3-core/\",\r\n      \"v3-periphery/=lib/v3-periphery/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stargateRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wrappedNative\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sgETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BridgeNativeOutNonZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeOutputExceedsInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExecutionUnsuccessful\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientFees\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyStargateRouter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RefundFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapOutputExceedsInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapUnsuccessful\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BridgedExecutionUnsuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeManager\",\"type\":\"address\"}],\"name\":\"FeeManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"}],\"name\":\"ReceivedOnDestination\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RefundUnsuccessful\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint120\",\"name\":\"_srcPoolId\",\"type\":\"uint120\"},{\"internalType\":\"uint120\",\"name\":\"_dstPoolId\",\"type\":\"uint120\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_bridgeAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"}],\"internalType\":\"struct LzBridgeData\",\"name\":\"lzBridgeData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nativeOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct TokenData\",\"name\":\"tokenData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dstNativeAddr\",\"type\":\"bytes\"}],\"internalType\":\"struct IStargateRouter.lzTxObj\",\"name\":\"lzTxObj\",\"type\":\"tuple\"}],\"name\":\"bridgeAndExecute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeManager\",\"type\":\"address\"}],\"name\":\"setFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"sgReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentOperator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nativeOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct TokenData\",\"name\":\"tokenData\",\"type\":\"tuple\"}],\"name\":\"swapAndExecute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Core", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c14a5a24a9d415e9b8d22b7aafd18f44f4d20e21000000000000000000000000ecc19e177d24551aa7ed6bc6fe566eca726cc8a9000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000072e2f4830b9e45d52f80ac08cb2bec0fef72ed9c000000000000000000000000d8253782c45a12053594b9deb72d8e8ab2fca54c", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}