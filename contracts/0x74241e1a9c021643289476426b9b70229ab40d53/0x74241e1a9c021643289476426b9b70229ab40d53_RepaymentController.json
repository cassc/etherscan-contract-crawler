{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/RepaymentController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IRepaymentController.sol\\\";\\nimport \\\"./interfaces/IPromissoryNote.sol\\\";\\nimport \\\"./interfaces/ILoanCore.sol\\\";\\nimport \\\"./interfaces/IFeeController.sol\\\";\\n\\nimport \\\"./libraries/InterestCalculator.sol\\\";\\nimport \\\"./libraries/FeeLookups.sol\\\";\\nimport \\\"./libraries/LoanLibrary.sol\\\";\\n\\nimport {\\n    RC_ZeroAddress,\\n    RC_CannotDereference,\\n    RC_InvalidState,\\n    RC_OnlyLender\\n} from \\\"./errors/Lending.sol\\\";\\n\\n/**\\n * @title RepaymentController\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * The Repayment Controller is the entry point for all loan lifecycle\\n * operations in the Arcade.xyz lending protocol once a loan has begun.\\n * This contract allows a caller to calculate an amount due on a loan,\\n * repay an open loan, and claim collateral on a defaulted loan. It\\n * is this contract's responsibility to verify loan conditions before\\n * calling LoanCore.\\n */\\ncontract RepaymentController is IRepaymentController, InterestCalculator, FeeLookups {\\n    using SafeERC20 for IERC20;\\n\\n    // ============================================ STATE ===============================================\\n\\n    ILoanCore private immutable loanCore;\\n    IPromissoryNote private immutable lenderNote;\\n    IFeeController private immutable feeController;\\n\\n    // ========================================= CONSTRUCTOR ============================================\\n\\n    /**\\n     * @notice Creates a new repayment controller contract.\\n     *\\n     * @dev For this controller to work, it needs to be granted the REPAYER_ROLE\\n     *      in loan core after deployment.\\n     *\\n     * @param _loanCore                     The address of the loan core logic of the protocol.\\n     * @param _feeController                The address of the fee logic of the protocol.\\n     */\\n    constructor(address _loanCore, address _feeController) {\\n        if (_loanCore == address(0)) revert RC_ZeroAddress(\\\"loanCore\\\");\\n        if (_feeController == address(0)) revert RC_ZeroAddress(\\\"feeController\\\");\\n\\n        loanCore = ILoanCore(_loanCore);\\n        lenderNote = loanCore.lenderNote();\\n        feeController = IFeeController(_feeController);\\n    }\\n\\n    // ==================================== LIFECYCLE OPERATIONS ========================================\\n\\n    /**\\n     * @notice Repay an active loan, referenced by borrower note ID (equivalent to loan ID). The interest for a loan\\n     *         is calculated, and the principal plus interest is withdrawn from the caller.\\n     *         Anyone can repay a loan. Control is passed to LoanCore to complete repayment.\\n     *\\n     * @param  loanId               The ID of the loan.\\n     */\\n    function repay(uint256 loanId) external override {\\n        (uint256 amountFromBorrower, uint256 amountToLender) = _prepareRepay(loanId);\\n\\n        // call repay function in loan core -  msg.sender will pay the amountFromBorrower\\n        loanCore.repay(loanId, msg.sender, amountFromBorrower, amountToLender);\\n    }\\n\\n    /**\\n     * @notice Repay an active loan, referenced by borrower note ID (equivalent to loan ID). The interest for a loan\\n     *         is calculated, and the principal plus interest is withdrawn from the caller. Anyone can repay a loan.\\n     *         Using forceRepay will not send funds to the lender: instead, those funds will be made\\n     *         available for withdrawal in LoanCore. Can be used in cases where a borrower has funds to repay\\n     *         but the lender is not able to receive those tokens (e.g. token blacklist).\\n     *\\n     * @param  loanId               The ID of the loan.\\n     */\\n    function forceRepay(uint256 loanId) external override {\\n        (uint256 amountFromBorrower, uint256 amountToLender) = _prepareRepay(loanId);\\n\\n        // call repay function in loan core -  msg.sender will pay the amountFromBorrower\\n        loanCore.forceRepay(loanId, msg.sender, amountFromBorrower, amountToLender);\\n    }\\n\\n    /**\\n     * @notice Claim collateral on an active loan, referenced by lender note ID (equivalent to loan ID).\\n     *         The loan must be past the due date. No funds are collected\\n     *         from the borrower.\\n     *\\n     * @param  loanId               The ID of the loan.\\n     */\\n    function claim(uint256 loanId) external override {\\n        LoanLibrary.LoanData memory data = loanCore.getLoan(loanId);\\n        if (data.state == LoanLibrary.LoanState.DUMMY_DO_NOT_USE) revert RC_CannotDereference(loanId);\\n\\n        // make sure that caller owns lender note\\n        // Implicitly checks if loan is active - if inactive, note will not exist\\n        address lender = lenderNote.ownerOf(loanId);\\n        if (lender != msg.sender) revert RC_OnlyLender(lender, msg.sender);\\n\\n        LoanLibrary.LoanTerms memory terms = data.terms;\\n        uint256 interest = getInterestAmount(terms.principal, terms.proratedInterestRate);\\n        uint256 totalOwed = terms.principal + interest;\\n\\n        uint256 claimFee = (totalOwed * data.feeSnapshot.lenderDefaultFee) / BASIS_POINTS_DENOMINATOR;\\n\\n        loanCore.claim(loanId, claimFee);\\n    }\\n\\n    /**\\n     * @notice Redeem a lender note for a completed return in return for funds repaid in an earlier\\n     *         transaction via forceRepay. The lender note must be owned by the caller.\\n     *\\n     * @param loanId                    The ID of the lender note to redeem.\\n     */\\n    function redeemNote(uint256 loanId, address to) external override {\\n        if (to == address(0)) revert RC_ZeroAddress(\\\"to\\\");\\n\\n        LoanLibrary.LoanData memory data = loanCore.getLoan(loanId);\\n        (, uint256 amountOwed) = loanCore.getNoteReceipt(loanId);\\n\\n        if (data.state != LoanLibrary.LoanState.Repaid) revert RC_InvalidState(data.state);\\n        address lender = lenderNote.ownerOf(loanId);\\n        if (lender != msg.sender) revert RC_OnlyLender(lender, msg.sender);\\n\\n        uint256 redeemFee = (amountOwed * feeController.getLendingFee(FL_08)) / BASIS_POINTS_DENOMINATOR;\\n\\n        loanCore.redeemNote(loanId, redeemFee, to);\\n    }\\n\\n    // =========================================== HELPERS ==============================================\\n\\n    /**\\n     * @dev Shared logic to perform validation and calculations for repay and forceRepay.\\n     *\\n     * @param loanId               The ID of the loan.\\n     *\\n     * @return amountFromBorrower   The amount to collect from the borrower.\\n     * @return amountToLender       The amount owed to the lender.\\n     */\\n    function _prepareRepay(uint256 loanId) internal view returns (uint256 amountFromBorrower, uint256 amountToLender) {\\n        LoanLibrary.LoanData memory data = loanCore.getLoan(loanId);\\n        if (data.state == LoanLibrary.LoanState.DUMMY_DO_NOT_USE) revert RC_CannotDereference(loanId);\\n        if (data.state != LoanLibrary.LoanState.Active) revert RC_InvalidState(data.state);\\n\\n        LoanLibrary.LoanTerms memory terms = data.terms;\\n\\n        uint256 interest = getInterestAmount(terms.principal, terms.proratedInterestRate);\\n\\n        uint256 interestFee = (interest * data.feeSnapshot.lenderInterestFee) / BASIS_POINTS_DENOMINATOR;\\n        uint256 principalFee = (terms.principal * data.feeSnapshot.lenderPrincipalFee) / BASIS_POINTS_DENOMINATOR;\\n\\n        amountFromBorrower = terms.principal + interest;\\n        amountToLender = amountFromBorrower - interestFee - principalFee;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRepaymentController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\ninterface IRepaymentController {\\n    // ============== Lifeycle Operations ==============\\n\\n    function repay(uint256 loanId) external;\\n\\n    function forceRepay(uint256 loanId) external;\\n\\n    function claim(uint256 loanId) external;\\n\\n    function redeemNote(uint256 loanId, address to) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPromissoryNote.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\nimport \\\"./INFTWithDescriptor.sol\\\";\\n\\ninterface IPromissoryNote is INFTWithDescriptor, IERC721Enumerable {\\n    // ============== Token Operations ==============\\n\\n    function mint(address to, uint256 loanId) external returns (uint256);\\n\\n    function burn(uint256 tokenId) external;\\n\\n    // ============== Initializer ==============\\n\\n    function initialize(address loanCore) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILoanCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"../libraries/LoanLibrary.sol\\\";\\nimport \\\"./IPromissoryNote.sol\\\";\\n\\ninterface ILoanCore {\\n\\n    // ================ Data Types =================\\n\\n    struct AffiliateSplit {\\n        address affiliate;\\n        uint96 splitBps;\\n    }\\n\\n    struct NoteReceipt {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    // ================ Events =================\\n\\n    event LoanStarted(uint256 loanId, address lender, address borrower);\\n    event LoanRepaid(uint256 loanId);\\n    event ForceRepay(uint256 loanId);\\n    event LoanRolledOver(uint256 oldLoanId, uint256 newLoanId);\\n    event LoanClaimed(uint256 loanId);\\n    event NoteRedeemed(address indexed token, address indexed caller, address indexed to, uint256 tokenId, uint256 amount);\\n    event NonceUsed(address indexed user, uint160 nonce);\\n\\n    event FeesWithdrawn(address indexed token, address indexed caller, address indexed to, uint256 amount);\\n    event AffiliateSet(bytes32 indexed code, address indexed affiliate, uint96 splitBps);\\n\\n    // ============== Lifecycle Operations ==============\\n\\n    function startLoan(\\n        address lender,\\n        address borrower,\\n        LoanLibrary.LoanTerms calldata terms,\\n        uint256 _amountFromLender,\\n        uint256 _amountToBorrower,\\n        LoanLibrary.FeeSnapshot calldata feeSnapshot\\n    ) external returns (uint256 loanId);\\n\\n    function repay(\\n        uint256 loanId,\\n        address payer,\\n        uint256 _amountFromPayer,\\n        uint256 _amountToLender\\n    ) external;\\n\\n    function forceRepay(\\n        uint256 loanId,\\n        address payer,\\n        uint256 _amountFromPayer,\\n        uint256 _amountToLender\\n    ) external;\\n\\n    function claim(\\n        uint256 loanId,\\n        uint256 _amountFromLender\\n    ) external;\\n\\n    function redeemNote(\\n        uint256 loanId,\\n        uint256 _amountFromLender,\\n        address to\\n    ) external;\\n\\n    function rollover(\\n        uint256 oldLoanId,\\n        address borrower,\\n        address lender,\\n        LoanLibrary.LoanTerms calldata terms,\\n        uint256 _settledAmount,\\n        uint256 _amountToOldLender,\\n        uint256 _amountToLender,\\n        uint256 _amountToBorrower\\n    ) external returns (uint256 newLoanId);\\n\\n    // ============== Nonce Management ==============\\n\\n    function consumeNonce(address user, uint160 nonce) external;\\n\\n    function cancelNonce(uint160 nonce) external;\\n\\n    // ============== Fee Management ==============\\n\\n    function withdraw(address token, uint256 amount, address to) external;\\n\\n    function withdrawProtocolFees(address token, address to) external;\\n\\n    // ============== Admin Operations ==============\\n\\n    function setAffiliateSplits(bytes32[] calldata codes, AffiliateSplit[] calldata splits) external;\\n\\n    // ============== View Functions ==============\\n\\n    function getLoan(uint256 loanId) external view returns (LoanLibrary.LoanData calldata loanData);\\n\\n    function getNoteReceipt(uint256 loanId) external view returns (address token, uint256 amount);\\n\\n    function isNonceUsed(address user, uint160 nonce) external view returns (bool);\\n\\n    function borrowerNote() external view returns (IPromissoryNote);\\n\\n    function lenderNote() external view returns (IPromissoryNote);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeeController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\ninterface IFeeController {\\n    // ================ Structs ================\\n\\n    struct FeesOrigination {\\n        uint16 borrowerOriginationFee;\\n        uint16 lenderOriginationFee;\\n        uint16 lenderDefaultFee;\\n        uint16 lenderInterestFee;\\n        uint16 lenderPrincipalFee;\\n    }\\n\\n    struct FeesRollover {\\n        uint16 borrowerRolloverFee;\\n        uint16 lenderRolloverFee;\\n    }\\n\\n    // ================ Events =================\\n\\n    event SetLendingFee(bytes32 indexed id, uint16 fee);\\n\\n    event SetVaultMintFee(uint64 fee);\\n\\n    // ================ Getter/Setter =================\\n\\n    function setLendingFee(bytes32 id, uint16 fee) external;\\n\\n    function setVaultMintFee(uint64 fee) external;\\n\\n    function getLendingFee(bytes32 id) external view returns (uint16);\\n\\n    function getVaultMintFee() external view returns (uint64);\\n\\n    function getFeesOrigination() external view returns (FeesOrigination memory);\\n\\n    function getFeesRollover() external view returns (FeesRollover memory);\\n\\n    function getMaxLendingFee(bytes32 id) external view returns (uint16);\\n\\n    function getMaxVaultMintFee() external view returns (uint64);\\n}\"\r\n    },\r\n    \"contracts/libraries/InterestCalculator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title InterestCalculator\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * Interface for calculating the interest amount\\n * given an interest rate and principal amount. Assumes\\n * that the interestRate is already expressed over the desired\\n * time period.\\n */\\nabstract contract InterestCalculator {\\n    // ============================================ STATE ==============================================\\n\\n    /// @dev The units of precision equal to the minimum interest of 1 basis point.\\n    uint256 public constant INTEREST_RATE_DENOMINATOR = 1e18;\\n\\n    uint256 public constant BASIS_POINTS_DENOMINATOR = 1e4;\\n\\n    // ======================================== CALCULATIONS ===========================================\\n\\n    /**\\n     * @notice Calculate the interest due over a full term.\\n     *\\n     * @dev Interest and principal must be entered with 18 units of\\n     *      precision from the basis point unit (e.g. 1e18 == 0.01%)\\n     *\\n     * @param principal                             Principal amount in the loan terms.\\n     * @param proratedInterestRate                  Interest rate in the loan terms, prorated over loan duration.\\n     *\\n     * @return interest                             The amount of interest due.\\n     */\\n    function getInterestAmount(uint256 principal, uint256 proratedInterestRate) public pure returns (uint256) {\\n        return principal * proratedInterestRate / (INTEREST_RATE_DENOMINATOR * BASIS_POINTS_DENOMINATOR);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/FeeLookups.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title FeeLookups\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * Enumerates unique identifiers for fee identifiers\\n * that the lending protocol uses.\\n */\\nabstract contract FeeLookups {\\n    /// @dev Origination fees: amount in bps, payable in loan token\\n    bytes32 public constant FL_01 = keccak256(\\\"BORROWER_ORIGINATION_FEE\\\");\\n    bytes32 public constant FL_02 = keccak256(\\\"LENDER_ORIGINATION_FEE\\\");\\n\\n    /// @dev Rollover fees: amount in bps, payable in loan token\\n    bytes32 public constant FL_03 = keccak256(\\\"BORROWER_ROLLOVER_FEE\\\");\\n    bytes32 public constant FL_04 = keccak256(\\\"LENDER_ROLLOVER_FEE\\\");\\n\\n    /// @dev Loan closure fees: amount in bps, payable in loan token\\n    bytes32 public constant FL_05 = keccak256(\\\"LENDER_DEFAULT_FEE\\\");\\n    bytes32 public constant FL_06 = keccak256(\\\"LENDER_INTEREST_FEE\\\");\\n    bytes32 public constant FL_07 = keccak256(\\\"LENDER_PRINCIPAL_FEE\\\");\\n    bytes32 public constant FL_08 = keccak256(\\\"LENDER_REDEEM_FEE\\\");\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LoanLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title LoanLibrary\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * Contains all data types used across Arcade lending contracts.\\n */\\nlibrary LoanLibrary {\\n    /**\\n     * @dev Enum describing the current state of a loan.\\n     * State change flow:\\n     * Created -> Active -> Repaid\\n     *                   -> Defaulted\\n     */\\n    enum LoanState {\\n        // We need a default that is not 'Created' - this is the zero value\\n        DUMMY_DO_NOT_USE,\\n        // The loan has been initialized, funds have been delivered to the borrower and the collateral is held.\\n        Active,\\n        // The loan has been repaid, and the collateral has been returned to the borrower. This is a terminal state.\\n        Repaid,\\n        // The loan was delinquent and collateral claimed by the lender. This is a terminal state.\\n        Defaulted\\n    }\\n\\n    /**\\n     * @dev The raw terms of a loan.\\n     */\\n    struct LoanTerms {\\n        // Interest expressed as a rate, unlike V1 gross value.\\n        // Input conversion: 0.01% = (1 * 10**18) ,  10.00% = (1000 * 10**18)\\n        // This represents the rate over the lifetime of the loan, not APR.\\n        // 0.01% is the minimum interest rate allowed by the protocol.\\n        uint256 proratedInterestRate;\\n        /// @dev Full-slot variables\\n        // The amount of principal in terms of the payableCurrency.\\n        uint256 principal;\\n        // The token ID of the address holding the collateral.\\n        /// @dev Can be an AssetVault, or the NFT contract for unbundled collateral\\n        address collateralAddress;\\n        /// @dev Packed variables\\n        // The number of seconds representing relative due date of the loan.\\n        /// @dev Max is 94,608,000, fits in 96 bits\\n        uint96 durationSecs;\\n        // The token ID of the collateral.\\n        uint256 collateralId;\\n        // The payable currency for the loan principal and interest.\\n        address payableCurrency;\\n        // Timestamp for when signature for terms expires\\n        uint96 deadline;\\n        // Affiliate code used to start the loan.\\n        bytes32 affiliateCode;\\n    }\\n\\n    /**\\n     * @dev Modification of loan terms, used for signing only.\\n     *      Instead of a collateralId, a list of predicates\\n     *      is defined by 'bytes' in items.\\n     */\\n    struct LoanTermsWithItems {\\n        // Interest expressed as a rate, unlike V1 gross value.\\n        // Input conversion: 0.01% = (1 * 10**18) ,  10.00% = (1000 * 10**18)\\n        // This represents the rate over the lifetime of the loan, not APR.\\n        // 0.01% is the minimum interest rate allowed by the protocol.\\n        uint256 proratedInterestRate;\\n        /// @dev Full-slot variables\\n        // The amount of principal in terms of the payableCurrency.\\n        uint256 principal;\\n        // The tokenID of the address holding the collateral\\n        address collateralAddress;\\n        /// @dev Packed variables\\n        // The number of seconds representing relative due date of the loan.\\n        /// @dev Max is 94,608,000, fits in 96 bits\\n        uint96 durationSecs;\\n        // An encoded list of predicates, along with their verifiers.\\n        bytes items;\\n        // The payable currency for the loan principal and interest.\\n        address payableCurrency;\\n        // Timestamp for when signature for terms expires\\n        uint96 deadline;\\n        // Affiliate code used to start the loan.\\n        bytes32 affiliateCode;\\n    }\\n\\n    /**\\n     * @dev Predicate for item-based verifications\\n     */\\n    struct Predicate {\\n        // The encoded predicate, to decoded and parsed by the verifier contract.\\n        bytes data;\\n        // The verifier contract.\\n        address verifier;\\n    }\\n\\n    /**\\n     * @dev Snapshot of lending fees at the time of loan creation.\\n     */\\n    struct FeeSnapshot {\\n        // The fee taken when lender claims defaulted collateral.\\n        uint16 lenderDefaultFee;\\n        // The fee taken from the borrower's interest repayment.\\n        uint16 lenderInterestFee;\\n        // The fee taken from the borrower's principal repayment.\\n        uint16 lenderPrincipalFee;\\n    }\\n\\n    /**\\n     * @dev The data of a loan. This is stored once the loan is Active\\n     */\\n    struct LoanData {\\n        /// @dev Packed variables\\n        // The current state of the loan.\\n        LoanState state;\\n        // Start date of the loan, using block.timestamp.\\n        uint160 startDate;\\n        /// @dev Full-slot variables\\n        // The raw terms of the loan.\\n        LoanTerms terms;\\n        // Record of lending fees at the time of loan creation.\\n        FeeSnapshot feeSnapshot;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/errors/Lending.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"../libraries/LoanLibrary.sol\\\";\\n\\n/**\\n * @title LendingErrors\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * This file contains custom errors for the core lending protocol contracts, with errors\\n * prefixed by the contract that throws them (e.g., \\\"OC_\\\" for OriginationController).\\n * Errors located in one place to make it possible to holistically look at all\\n * protocol failure cases.\\n */\\n\\n// ==================================== ORIGINATION CONTROLLER ======================================\\n/// @notice All errors prefixed with OC_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Zero address passed in where not allowed.\\n *\\n * @param addressType                  The name of the parameter for which a zero address was provided.\\n */\\nerror OC_ZeroAddress(string addressType);\\n\\n/**\\n * @notice Ensure valid loan state for loan lifceycle operations.\\n *\\n * @param state                         Current state of a loan according to LoanState enum.\\n */\\nerror OC_InvalidState(LoanLibrary.LoanState state);\\n\\n/**\\n * @notice Loan duration must be greater than 1hr and less than 3yrs.\\n *\\n * @param durationSecs                 Total amount of time in seconds.\\n */\\nerror OC_LoanDuration(uint256 durationSecs);\\n\\n/**\\n * @notice Interest must be greater than 0.01% and less than 10,000%. (interestRate / 1e18 >= 1)\\n *\\n * @param interestRate                  InterestRate with 1e18 multiplier.\\n */\\nerror OC_InterestRate(uint256 interestRate);\\n\\n/**\\n * @notice One of the predicates for item verification failed.\\n *\\n * @param borrower                      The address of the borrower.\\n * @param lender                        The address of the lender.\\n * @param verifier                      The address of the verifier contract.\\n * @param collateralAddress             The address of the collateral token.\\n * @param collateralId                  The token ID of the collateral.\\n * @param data                          The verification data (to be parsed by verifier).\\n */\\nerror OC_PredicateFailed(\\n    address borrower,\\n    address lender,\\n    address verifier,\\n    address collateralAddress,\\n    uint256 collateralId,\\n    bytes data\\n);\\n\\n/**\\n * @notice The predicates array is empty.\\n */\\nerror OC_PredicatesArrayEmpty();\\n\\n/**\\n * @notice A caller attempted to approve themselves.\\n *\\n * @param caller                        The caller of the approve function.\\n */\\nerror OC_SelfApprove(address caller);\\n\\n/**\\n * @notice A caller attempted to originate a loan with their own signature.\\n *\\n * @param caller                        The caller of the approve function, who was also the signer.\\n */\\nerror OC_ApprovedOwnLoan(address caller);\\n\\n/**\\n * @notice The signature could not be recovered to the counterparty or approved party.\\n *\\n * @param target                        The target party of the signature, which should either be the signer,\\n *                                      or someone who has approved the signer.\\n * @param signer                        The signer determined from ECDSA.recover.\\n */\\nerror OC_InvalidSignature(address target, address signer);\\n\\n/**\\n * @notice The verifier contract specified in a predicate has not been whitelisted.\\n *\\n * @param verifier                      The verifier the caller attempted to use.\\n */\\nerror OC_InvalidVerifier(address verifier);\\n\\n/**\\n * @notice The function caller was neither borrower or lender, and was not approved by either.\\n *\\n * @param caller                        The unapproved function caller.\\n */\\nerror OC_CallerNotParticipant(address caller);\\n\\n/**\\n * @notice Signer is attempting to take the wrong side of the loan.\\n *\\n * @param signer                       The address of the external signer.\\n */\\nerror OC_SideMismatch(address signer);\\n\\n/**\\n * @notice Two related parameters for batch operations did not match in length.\\n */\\nerror OC_BatchLengthMismatch();\\n\\n/**\\n * @notice Principal must be greater than 9999 Wei.\\n *\\n * @param principal                     Principal in ether.\\n */\\nerror OC_PrincipalTooLow(uint256 principal);\\n\\n/**\\n * @notice Signature must not be expired.\\n *\\n * @param deadline                      Deadline in seconds.\\n */\\nerror OC_SignatureIsExpired(uint256 deadline);\\n\\n/**\\n * @notice New currency does not match for a loan rollover request.\\n *\\n * @param oldCurrency                   The currency of the active loan.\\n * @param newCurrency                   The currency of the new loan.\\n */\\nerror OC_RolloverCurrencyMismatch(address oldCurrency, address newCurrency);\\n\\n/**\\n * @notice New currency does not match for a loan rollover request.\\n *\\n * @param oldCollateralAddress          The address of the active loan's collateral.\\n * @param newCollateralAddress          The token ID of the active loan's collateral.\\n * @param oldCollateralId               The address of the new loan's collateral.\\n * @param newCollateralId               The token ID of the new loan's collateral.\\n */\\nerror OC_RolloverCollateralMismatch(\\n    address oldCollateralAddress,\\n    uint256 oldCollateralId,\\n    address newCollateralAddress,\\n    uint256 newCollateralId\\n);\\n\\n/**\\n * @notice Provided payable currency address is not approved for lending.\\n *\\n * @param payableCurrency       ERC20 token address supplied in loan terms.\\n */\\nerror OC_InvalidCurrency(address payableCurrency);\\n\\n/**\\n * @notice Provided collateral address is not approved for lending.\\n *\\n * @param collateralAddress       ERC721 or ERC1155 token address supplied in loan terms.\\n */\\nerror OC_InvalidCollateral(address collateralAddress);\\n\\n/**\\n * @notice Provided token array does not hold any token addresses.\\n */\\nerror OC_ZeroArrayElements();\\n\\n/**\\n * @notice Provided token array holds more than 50 token addresses.\\n */\\nerror OC_ArrayTooManyElements();\\n\\n// ==================================== ITEMS VERIFIER ======================================\\n/// @notice All errors prefixed with IV_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice The predicate payload was decoded successfully, but list of predicates is empty.\\n */\\nerror IV_NoPredicates();\\n\\n/**\\n * @notice Provided SignatureItem is missing an address.\\n */\\nerror IV_ItemMissingAddress();\\n\\n/**\\n * @notice Provided SignatureItem has an invalid collateral type.\\n * @dev    Should never actually fire, since cType is defined by an enum, so will fail on decode.\\n *\\n * @param asset                        The NFT contract being checked.\\n * @param cType                        The collateralTytpe provided.\\n */\\nerror IV_InvalidCollateralType(address asset, uint256 cType);\\n\\n/**\\n * @notice Provided signature item with no required amount. For single ERC721s, specify 1.\\n *\\n * @param asset                         The NFT contract being checked.\\n * @param amount                        The amount provided (should be 0).\\n */\\nerror IV_NoAmount(address asset, uint256 amount);\\n\\n/**\\n * @notice Provided a wildcard for a non-ERC721.\\n *\\n * @param asset                         The NFT contract being checked.\\n */\\nerror IV_InvalidWildcard(address asset);\\n\\n/**\\n * @notice The provided token ID is out of bounds for the given collection.\\n *\\n * @param tokenId                       The token ID provided.\\n */\\nerror IV_InvalidTokenId(int256 tokenId);\\n\\n/**\\n * @notice The provided project ID does not exist on the target contract. Only\\n *         used for ArtBlocks.\\n *\\n * @param projectId                     The project ID provided.\\n * @param nextProjectId                 The contract's reported nextProjectId.\\n */\\nerror IV_InvalidProjectId(uint256 projectId, uint256 nextProjectId);\\n\\n/**\\n * @notice The provided collateralId converts to a vault, but\\n *         the vault's address does not convert back to the provided collateralId\\n *         when casted to a uint256.\\n */\\nerror IV_InvalidCollateralId(uint256 collateralId);\\n\\n// ==================================== REPAYMENT CONTROLLER ======================================\\n/// @notice All errors prefixed with RC_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Zero address passed in where not allowed.\\n *\\n * @param addressType                  The name of the parameter for which a zero address was provided.\\n */\\nerror RC_ZeroAddress(string addressType);\\n\\n/**\\n * @notice Could not dereference loan from loan ID.\\n *\\n * @param target                     The loanId being checked.\\n */\\nerror RC_CannotDereference(uint256 target);\\n\\n/**\\n * @notice Ensure valid loan state for loan lifceycle operations.\\n *\\n * @param state                         Current state of a loan according to LoanState enum.\\n */\\nerror RC_InvalidState(LoanLibrary.LoanState state);\\n\\n/**\\n * @notice Caller is not the owner of lender note.\\n *\\n * @param lender                     The owner of the lender note.\\n * @param caller                     Msg.sender of the function call.\\n */\\nerror RC_OnlyLender(address lender, address caller);\\n\\n// ==================================== Loan Core ======================================\\n/// @notice All errors prefixed with LC_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Zero address passed in where not allowed.\\n *\\n * @param addressType                  The name of the parameter for which a zero address was provided.\\n */\\nerror LC_ZeroAddress(string addressType);\\n\\n/// @notice Borrower address is same as lender address.\\nerror LC_ReusedNote();\\n\\n/// @notice Zero amount passed in where not allowed.\\nerror LC_ZeroAmount();\\n\\n/**\\n * @notice Check collateral is not already used in a active loan.\\n *\\n * @param collateralAddress             Address of the collateral.\\n * @param collateralId                  ID of the collateral token.\\n */\\nerror LC_CollateralInUse(address collateralAddress, uint256 collateralId);\\n\\n/**\\n * @notice The reported settlements are invalid, and LoanCore would lose tokens\\n *         attempting to perform the requested operations.\\n *\\n *\\n * @param payout                        Amount of tokens to be paid out.\\n * @param collected                     Amount of tokens to collect - should be fewer than payout.\\n */\\nerror LC_CannotSettle(uint256 payout, uint256 collected);\\n\\n/**\\n * @notice User attempted to withdraw a pending balance that was in excess\\n *         of what is available.\\n *\\n * @param amount                        Amount of tokens to be withdrawn.\\n * @param available                     Amount of tokens available to withdraw.\\n */\\nerror LC_CannotWithdraw(uint256 amount, uint256 available);\\n\\n/**\\n * @notice Two arrays were provided that must be of matching length, but were not.\\n *\\n */\\nerror LC_ArrayLengthMismatch();\\n\\n/**\\n * @notice A proposed affiliate split was submitted that is over the maximum.\\n *\\n * @param splitBps                     The proposed affiliate split.\\n * @param maxSplitBps                  The maximum allowed affiliate split.\\n *\\n */\\nerror LC_OverMaxSplit(uint96 splitBps, uint96 maxSplitBps);\\n\\n/**\\n * @notice Ensure valid loan state for loan lifceycle operations.\\n *\\n * @param state                         Current state of a loan according to LoanState enum.\\n */\\nerror LC_InvalidState(LoanLibrary.LoanState state);\\n\\n/**\\n * @notice Loan duration has not expired.\\n *\\n * @param dueDate                       Timestamp of the end of the loan duration.\\n */\\nerror LC_NotExpired(uint256 dueDate);\\n\\n/**\\n * @notice User address and the specified nonce have already been used.\\n *\\n * @param user                          Address of collateral owner.\\n * @param nonce                         Represents the number of transactions sent by address.\\n */\\nerror LC_NonceUsed(address user, uint160 nonce);\\n\\n/**\\n * @notice Protocol attempted to set an affiliate code which already exists. Affiliate\\n *         codes are immutable.\\n *\\n * @param affiliateCode                 The affiliate code being set.\\n */\\nerror LC_AffiliateCodeAlreadySet(bytes32 affiliateCode);\\n\\n/**\\n * @notice Specified note token ID does not have a redeemable receipt.\\n *\\n * @param loanId                     The loanId being checked.\\n */\\nerror LC_NoReceipt(uint256 loanId);\\n\\n/**\\n * @notice Only Loan Core contract can call this function.\\n */\\nerror LC_CallerNotLoanCore();\\n\\n/**\\n * @notice The loan core contract has been irreversibly shut down.\\n */\\nerror LC_Shutdown();\\n\\n// ==================================== Promissory Note ======================================\\n/// @notice All errors prefixed with PN_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Zero address passed in where not allowed.\\n *\\n * @param addressType                  The name of the parameter for which a zero address was provided.\\n */\\nerror PN_ZeroAddress(string addressType);\\n\\n/**\\n * @notice Caller of mint function must have the MINTER_ROLE in AccessControl.\\n *\\n * @param caller                        Address of the function caller.\\n */\\nerror PN_MintingRole(address caller);\\n\\n/**\\n * @notice Caller of burn function must have the BURNER_ROLE in AccessControl.\\n *\\n * @param caller                        Address of the function caller.\\n */\\nerror PN_BurningRole(address caller);\\n\\n/**\\n * @notice Non-existant token id provided as argument.\\n *\\n * @param tokenId                       The ID of the token to lookup the URI for.\\n */\\nerror PN_DoesNotExist(uint256 tokenId);\\n\\n// ==================================== Fee Controller ======================================\\n/// @notice All errors prefixed with FC_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Caller attempted to set a lending fee which is larger than the global maximum.\\n */\\nerror FC_LendingFeeOverMax(bytes32 selector, uint256 fee, uint256 maxFee);\\n\\n/**\\n * @notice Caller attempted to set a vault mint fee which is larger than the global maximum.\\n */\\nerror FC_VaultMintFeeOverMax(uint256 fee, uint256 maxFee);\\n\\n// ==================================== ERC721 Permit ======================================\\n/// @notice All errors prefixed with ERC721P_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Deadline for the permit has expired.\\n *\\n * @param deadline                      Permit deadline parameter as a timestamp.\\n */\\nerror ERC721P_DeadlineExpired(uint256 deadline);\\n\\n/**\\n * @notice Address of the owner to also be the owner of the tokenId.\\n *\\n * @param owner                        Owner parameter for the function call.\\n */\\nerror ERC721P_NotTokenOwner(address owner);\\n\\n/**\\n * @notice Invalid signature.\\n *\\n * @param signer                        Signer recovered from ECDSA sugnature hash.\\n */\\nerror ERC721P_InvalidSignature(address signer);\\n\\n\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INFTWithDescriptor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\ninterface INFTWithDescriptor {\\n    // ============= Events ==============\\n\\n    event SetDescriptor(address indexed caller, address indexed descriptor);\\n\\n    // ================ Resource Metadata ================\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    function setDescriptor(address descriptor) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loanCore\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"RC_CannotDereference\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum LoanLibrary.LoanState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"RC_InvalidState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"RC_OnlyLender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"addressType\",\"type\":\"string\"}],\"name\":\"RC_ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BASIS_POINTS_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FL_01\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FL_02\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FL_03\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FL_04\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FL_05\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FL_06\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FL_07\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FL_08\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTEREST_RATE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"forceRepay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proratedInterestRate\",\"type\":\"uint256\"}],\"name\":\"getInterestAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"redeemNote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RepaymentController", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000089bc08ba00f135d608bc335f6b33d7a9abcc98af000000000000000000000000f764442856eb3fe68a0828e07246a4b395e800fa", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}