{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/BalanceManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.17;\\n\\n// Internal\\nimport {ITeller} from \\\"./interfaces/ITeller.sol\\\";\\nimport {CommitmentTreeManager} from \\\"./CommitmentTreeManager.sol\\\";\\nimport {Utils} from \\\"./libs/Utils.sol\\\";\\nimport {AssetUtils} from \\\"./libs/AssetUtils.sol\\\";\\nimport {OperationUtils} from \\\"./libs/OperationUtils.sol\\\";\\nimport \\\"./libs/Types.sol\\\";\\n\\n/// @title BalanceManager\\n/// @author Nocturne Labs\\n/// @notice Module containing logic for funding the Handler contract during operation processing and\\n///         handling refunds for any remaining assets left in the Handler after operation execution.\\ncontract BalanceManager is CommitmentTreeManager {\\n    using OperationLib for Operation;\\n\\n    // Teller contract to send/request assets to/from\\n    ITeller public _teller;\\n\\n    // Leftover tokens holder contract\\n    address public _leftoverTokensHolder;\\n\\n    // Gap for upgrade safety\\n    uint256[50] private __GAP;\\n\\n    /// @notice Internal initializer function\\n    /// @param subtreeUpdateVerifier Address of the subtree update verifier contract\\n    /// @param leftoverTokensHolder Address of the leftover tokens holder contract\\n    function __BalanceManager_init(\\n        address subtreeUpdateVerifier,\\n        address leftoverTokensHolder\\n    ) internal onlyInitializing {\\n        __CommitmentTreeManager_init(subtreeUpdateVerifier);\\n        _leftoverTokensHolder = leftoverTokensHolder;\\n    }\\n\\n    /// @notice Set teller contract after initialization\\n    /// @dev Teller and Handler initialization depend on each other's deployments thus we cannot\\n    ///      initialize the Teller and Handler in the same transaction (as we have to deploy one\\n    ///      before the other). We set Teller separately after initialization to avoid\\n    ///      front-running risk.\\n    /// @dev Because we require Teller address is 0x0, this method is only executable once.\\n    /// @param teller Address of the teller contract\\n    function setTeller(address teller) external onlyOwner {\\n        require(address(_teller) == address(0), \\\"Teller already set\\\");\\n        _teller = ITeller(teller);\\n    }\\n\\n    /// @notice For each public and conf joinSplit, check root and nullifier validity against\\n    ///         commitment tree manager, then request joinSplit.publicSpend barring tokens for gas\\n    ///         payment for pubJoinSplits (conf joinSplits are only handled in CTM, no fund\\n    ///         processing since all publicSpends implicitly 0).\\n    /// @dev Before looping through pubJoinSplits, we calculate amount of gas to reserve based on\\n    ///      execution gas, number of pubJoinSplits, and number of refunds. Then we loop through\\n    ///      pubJoinSplits, check root and nullifier validity, and attempt to reserve as much gas\\n    ///      asset.\\n    ///      as possible until we have gotten as the reserve amount we originally calculated. If we\\n    ///      have not reserved enough gas asset after looping through all pubJoinSplits, we revert.\\n    /// @dev We attempt to group asset transfers to handler by contiguous subarrays of pubJoinSplits\\n    ///      for same asset. User can group however they like but contiguous group saves them gas\\n    ///      by reducing number of teller.requestAsset calls.\\n    /// @param op Operation to process pubJoinSplits for\\n    /// @param perJoinSplitVerifyGas Gas cost of verifying a single joinSplit proof, calculated by\\n    ///                              teller during (batch) proof verification\\n    function _processJoinSplitsReservingFee(\\n        Operation calldata op,\\n        uint256 perJoinSplitVerifyGas\\n    ) internal returns (uint256 numJoinSplitAssets) {\\n        // process nullifiers and insert new noteCommitments for each joinSplit\\n        // will throw an error if nullifiers are invalid or tree root invalid\\n        // NOTE: we handle both public and conf joinSplits here, all code below though is\\n        // only called on public joinSplits\\n        _handleJoinSplits(op);\\n\\n        // Get gas asset and amount to reserve\\n        EncodedAsset calldata encodedGasAsset = op.encodedGasAsset;\\n        uint256 gasAssetToReserve = op.maxGasAssetCost(perJoinSplitVerifyGas);\\n\\n        // Loop through pubJoinSplits and gather assets, reserving gas asset as needed\\n        EncodedAsset calldata encodedAsset;\\n        uint256 numJoinSplits = op.pubJoinSplits.length;\\n        for (\\n            uint256 subarrayStartIndex = 0;\\n            subarrayStartIndex < numJoinSplits;\\n\\n        ) {\\n            uint8 joinSplitAssetIndex = op\\n                .pubJoinSplits[subarrayStartIndex]\\n                .assetIndex;\\n            encodedAsset = op.trackedAssets[joinSplitAssetIndex].encodedAsset;\\n\\n            // Get largest possible subarray for current asset and sum of publicSpend\\n            uint256 subarrayEndIndex = _getHighestContiguousJoinSplitIndex(\\n                op.pubJoinSplits,\\n                subarrayStartIndex\\n            );\\n\\n            uint256 valueToGatherForSubarray = _sumJoinSplitPublicSpendsInclusive(\\n                    op.pubJoinSplits,\\n                    subarrayStartIndex,\\n                    subarrayEndIndex\\n                );\\n\\n            if (\\n                gasAssetToReserve > 0 &&\\n                AssetUtils.eq(encodedGasAsset, encodedAsset)\\n            ) {\\n                uint256 reserveValue = Utils.min(\\n                    valueToGatherForSubarray,\\n                    gasAssetToReserve\\n                );\\n\\n                valueToGatherForSubarray -= reserveValue;\\n                gasAssetToReserve -= reserveValue;\\n            }\\n\\n            subarrayStartIndex = subarrayEndIndex + 1;\\n            numJoinSplitAssets++; // NOTE: if joinsplits not sorted contiguously by asset, this number will be higher than the actual number of joinsplits\\n\\n            // If value to transfer is 0, skip the transfer\\n            if (valueToGatherForSubarray > 0) {\\n                _teller.requestAsset(encodedAsset, valueToGatherForSubarray);\\n            }\\n        }\\n\\n        require(gasAssetToReserve == 0, \\\"Too few gas tokens\\\");\\n    }\\n\\n    /// @notice Gather reserved gas assets and pay bundler calculated amount.\\n    /// @dev Bundler can be paid less than reserved amount. Reserved amount is refunded to user's\\n    /// stealth address in this case.\\n    /// @dev If the amount of gas asset remaining after bundler payout is less than the operation's\\n    ///      gasAssetRefundThreshold, we just give the remaining amount to bundler. This is because\\n    ///      the cost of handling refund for dust note and later proving ownership of the dust note\\n    ///      will outweigh the actual value of the note.\\n    /// @param op Operation, which contains info on how much gas was reserved\\n    /// @param opResult OperationResult, which contains info on how much gas was actually spent\\n    /// @param perJoinSplitVerifyGas Gas cost of verifying a single joinSplit proof\\n    /// @param bundler Address of the bundler to pay\\n    function _gatherReservedGasAssetAndPayBundler(\\n        Operation calldata op,\\n        OperationResult memory opResult,\\n        uint256 perJoinSplitVerifyGas,\\n        address bundler\\n    ) internal {\\n        EncodedAsset calldata encodedGasAsset = op.encodedGasAsset;\\n        uint256 gasAssetReserved = op.maxGasAssetCost(perJoinSplitVerifyGas);\\n\\n        if (gasAssetReserved > 0) {\\n            // Request reserved gasAssetReserved from teller.\\n            /// @dev This is safe because _processJoinSplitsReservingFee is\\n            /// guaranteed to have reserved gasAssetReserved since it didn't throw.\\n            _teller.requestAsset(encodedGasAsset, gasAssetReserved);\\n\\n            uint256 bundlerPayout = OperationUtils\\n                .calculateBundlerGasAssetPayout(op, opResult);\\n            if (gasAssetReserved - bundlerPayout < op.gasAssetRefundThreshold) {\\n                bundlerPayout = gasAssetReserved; // Give all to bundler if under threshold\\n            }\\n\\n            AssetUtils.transferAssetTo(encodedGasAsset, bundler, bundlerPayout);\\n        }\\n    }\\n\\n    /// @notice Ensure all joinsplit and refund assets start with empty balances (0 or 1).\\n    /// @dev If any asset has a balance > 1, we transfer the excess to the leftover tokens contract\\n    ///      and return the amount transferred.\\n    /// @dev This is to ensure a user cannot bypass deposit limits by sending tokens to the handler\\n    ///      externally then creating an operation to claim those funds via refunds.\\n    /// @param op Operation to ensure zeroed balances for\\n    function _ensureZeroedBalances(Operation calldata op) internal {\\n        uint256 numTrackedAssets = op.trackedAssets.length;\\n        for (uint256 i = 0; i < numTrackedAssets; i++) {\\n            _transferOutstandingAssetToAndReturnAmount(\\n                op.trackedAssets[i].encodedAsset,\\n                _leftoverTokensHolder\\n            );\\n        }\\n    }\\n\\n    /// @notice Ensure all tracked assets have a balance >= minRefundValue and return number of\\n    ///         refunds to handle. If any asset has a balance < minRefundValue, call reverts.\\n    /// @param op Operation to ensure min refund values for\\n    function _ensureMinRefundValues(\\n        Operation calldata op\\n    ) internal view returns (uint256 numRefundsToHandle) {\\n        bool gasAssetAlreadyInRefunds = false;\\n        uint256 numTrackedAssets = op.trackedAssets.length;\\n        for (uint256 i = 0; i < numTrackedAssets; i++) {\\n            uint256 refundValue = _ensureMinRefundValueForTrackedAsset(\\n                op.trackedAssets[i]\\n            );\\n\\n            if (refundValue > 0) {\\n                numRefundsToHandle++;\\n\\n                if (\\n                    !gasAssetAlreadyInRefunds &&\\n                    AssetUtils.eq(\\n                        op.trackedAssets[i].encodedAsset,\\n                        op.encodedGasAsset\\n                    )\\n                ) {\\n                    gasAssetAlreadyInRefunds = true;\\n                }\\n            }\\n        }\\n\\n        // If we withheld gas asset and there is no existing refund of the same type as the gas\\n        // asset, we add an additional refund to numRefundsToHandle to reflect the potential for\\n        // additional refund of gas asset after bundler compensation.\\n        // NOTE: the only time numRefundsToHandle gets over-counted is when the bundler\\n        // takes all reserved gas asset, leaving none for refund. The max over-estimate though\\n        // is the cost of the one extra refund.\\n        if (!gasAssetAlreadyInRefunds && op.gasPrice > 0) {\\n            numRefundsToHandle++;\\n        }\\n\\n        return numRefundsToHandle;\\n    }\\n\\n    /// @notice Ensure tracked asset has a balance >= minRefundValue and return true if a refund\\n    ///         is required. If asset has a balance < minRefundValue, call reverts.\\n    /// @param trackedAsset Tracked asset to ensure min refund value for\\n    function _ensureMinRefundValueForTrackedAsset(\\n        TrackedAsset calldata trackedAsset\\n    ) internal view returns (uint256 refundValue) {\\n        EncodedAsset calldata encodedAsset = trackedAsset.encodedAsset;\\n        uint256 currentBalance = AssetUtils.balanceOfAsset(encodedAsset);\\n\\n        // We want to guarantee that the minRefundValue check is exact, so we account for\\n        // the token prefills gas optimization that attempts to keep balance of Handler = 1 for\\n        // erc20s\\n        (AssetType assetType, , ) = AssetUtils.decodeAsset(encodedAsset);\\n        uint256 amountToWithhold = assetType == AssetType.ERC20 ? 1 : 0;\\n\\n        refundValue = currentBalance > amountToWithhold\\n            ? currentBalance - amountToWithhold\\n            : 0;\\n\\n        require(\\n            refundValue >= trackedAsset.minRefundValue,\\n            \\\"!min refund value\\\"\\n        );\\n\\n        return refundValue;\\n    }\\n\\n    /// @notice Handle all refunds for an operation, potentially sending back any leftover assets\\n    ///         to the Teller and inserting new note commitments for the sent back assets.\\n    /// @dev Checks for refunds in op.trackedAssets. A refund occurs if any of the checked assets\\n    ///      have outstanding balance > 0 in the Handler. If a refund occurs, the Handler will\\n    ///      transfer the asset back to the Teller and insert a new\\n    ///      note commitment into the commitment tree.\\n    /// @param op Operation to handle refunds for\\n    function _handleAllRefunds(Operation calldata op) internal {\\n        EncodedAsset calldata encodedAsset;\\n\\n        uint256 numTrackedAssets = op.trackedAssets.length;\\n        for (uint256 i = 0; i < numTrackedAssets; i++) {\\n            encodedAsset = op.trackedAssets[i].encodedAsset;\\n            uint256 refundAmount = _transferOutstandingAssetToAndReturnAmount(\\n                encodedAsset,\\n                address(_teller)\\n            );\\n            if (refundAmount > 0) {\\n                _handleRefundNote(encodedAsset, op.refundAddr, refundAmount);\\n            }\\n        }\\n    }\\n\\n    /// @notice Refund Teller for a single asset\\n    /// @dev Checks if asset has outstanding balance in the Handler. If so, transfers the asset\\n    ///      back to the Teller and returns the amount transferred.\\n    /// @dev To prevent clearing the handler's token balances to 0 each time for erc20s, we attempt\\n    ///      to withold 1 token from the refund each time if the handler's current balance is 0.\\n    ///      This saves gas for future users because it avoids writing to a zeroed out storage slot\\n    ///      each time for the handler's balance. This single token can technically be taken by any\\n    ///      user. The goal is to keep the handler's balance non-zero as often as possible to save\\n    ///      on user gas.\\n    /// @param encodedAsset Encoded asset to check for refund\\n    function _transferOutstandingAssetToAndReturnAmount(\\n        EncodedAsset memory encodedAsset,\\n        address to\\n    ) internal returns (uint256) {\\n        require(\\n            to == address(_teller) || to == address(_leftoverTokensHolder),\\n            \\\"Invalid to addr\\\"\\n        );\\n\\n        uint256 currentBalance = AssetUtils.balanceOfAsset(encodedAsset);\\n\\n        (AssetType assetType, , ) = AssetUtils.decodeAsset(encodedAsset);\\n        uint256 amountToWithhold = assetType == AssetType.ERC20 ? 1 : 0;\\n\\n        uint256 difference = currentBalance > amountToWithhold\\n            ? currentBalance - amountToWithhold\\n            : 0;\\n\\n        if (difference > 0) {\\n            // Token callback safe since we know leftoverTokensHandler and Teller have no receiver hooks currently\\n            AssetUtils.transferAssetTo(encodedAsset, to, difference);\\n            return difference;\\n        }\\n\\n        return 0;\\n    }\\n\\n    /// @notice Get highest index for contiguous subarray of joinsplits of same encodedAssetType\\n    /// @dev Used so we can take sum(subarray) make single call teller.requestAsset(asset, sum)\\n    ///      instead of calling teller.requestAsset multiple times for the same asset\\n    /// @param pubJoinSplits Joinsplits\\n    /// @param startIndex Index to start searching from\\n    function _getHighestContiguousJoinSplitIndex(\\n        PublicJoinSplit[] calldata pubJoinSplits,\\n        uint256 startIndex\\n    ) private pure returns (uint256) {\\n        uint256 startAssetIndex = pubJoinSplits[startIndex].assetIndex;\\n\\n        uint256 numJoinSplits = pubJoinSplits.length;\\n        uint256 highestIndex = startIndex;\\n        while (\\n            highestIndex + 1 < numJoinSplits &&\\n            startAssetIndex == pubJoinSplits[highestIndex + 1].assetIndex\\n        ) {\\n            highestIndex++;\\n        }\\n\\n        return highestIndex;\\n    }\\n\\n    /// @notice Get sum of public spends for a contiguous subarray of joinsplits\\n    /// @param pubJoinSplits op pubJoinSplits\\n    /// @param startIndex Index to start summing from\\n    /// @param endIndex Index to end summing at (inclusive)\\n    function _sumJoinSplitPublicSpendsInclusive(\\n        PublicJoinSplit[] calldata pubJoinSplits,\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) private pure returns (uint256) {\\n        uint256 sum = 0;\\n        for (uint256 i = startIndex; i <= endIndex; i++) {\\n            sum += pubJoinSplits[i].publicSpend;\\n        }\\n        return sum;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/CommitmentTreeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.17;\\n\\n// External\\nimport {Ownable2StepUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n// Internal\\nimport {LibOffchainMerkleTree, OffchainMerkleTree} from \\\"./libs/OffchainMerkleTree.sol\\\";\\nimport {Utils} from \\\"./libs/Utils.sol\\\";\\nimport {Validation} from \\\"./libs/Validation.sol\\\";\\nimport {TreeUtils} from \\\"./libs/TreeUtils.sol\\\";\\nimport \\\"./libs/Types.sol\\\";\\n\\n/// @title CommitmentTreeManager\\n/// @author Nocturne Labs\\n/// @notice Manages the commitment tree, keeps track of past roots, and keeps track of used\\n///         nullifiers.\\ncontract CommitmentTreeManager is\\n    Initializable,\\n    Ownable2StepUpgradeable,\\n    PausableUpgradeable\\n{\\n    using LibOffchainMerkleTree for OffchainMerkleTree;\\n    using OperationLib for Operation;\\n\\n    // Set of past roots of the merkle tree\\n    mapping(uint256 => bool) public _pastRoots;\\n\\n    // Set of used nullifiers\\n    mapping(uint256 => bool) public _nullifierSet;\\n\\n    // Offchain merkle tree struct\\n    OffchainMerkleTree internal _merkle;\\n\\n    // Set of addressed allowed to fill subtree batches with zeros\\n    mapping(address => bool) public _subtreeBatchFillers;\\n\\n    // Gap for upgrade safety\\n    uint256[50] private __GAP;\\n\\n    /// @notice Event emitted when a subtree batch filler is given/revoked permission\\n    event SubtreeBatchFillerPermissionSet(address filler, bool permission);\\n\\n    /// @notice Event emitted when a refund is processed\\n    /// @dev Refund means any outstanding assets left in the handler during execution\\n    ///      or a new deposit\\n    event RefundProcessed(\\n        CompressedStealthAddress refundAddr,\\n        uint256 nonce,\\n        uint256 encodedAssetAddr,\\n        uint256 encodedAssetId,\\n        uint256 value,\\n        uint128 merkleIndex\\n    );\\n\\n    /// @notice Event emitted when a joinsplit is processed\\n    event JoinSplitProcessed(\\n        uint256 indexed oldNoteANullifier,\\n        uint256 indexed oldNoteBNullifier,\\n        uint128 newNoteAIndex,\\n        uint128 newNoteBIndex,\\n        uint256 newNoteACommitment,\\n        uint256 newNoteBCommitment,\\n        uint256 senderCommitment,\\n        uint256 joinSplitInfoCommitment,\\n        EncryptedNote newNoteAEncrypted,\\n        EncryptedNote newNoteBEncrypted\\n    );\\n\\n    /// @notice Event emitted when a subtree batch is filled with zeros\\n    event FilledBatchWithZeros(uint256 startIndex, uint256 numZeros);\\n\\n    /// @notice Event emitted when a subtree (and subsequently the main tree's root) are updated\\n    event SubtreeUpdate(uint256 newRoot, uint256 subtreeBatchOffset);\\n\\n    /// @notice Internal initialization function\\n    /// @param subtreeUpdateVerifier Address of the subtree update verifier contract\\n    function __CommitmentTreeManager_init(\\n        address subtreeUpdateVerifier\\n    ) internal onlyInitializing {\\n        __Ownable2Step_init();\\n        __Pausable_init();\\n        _merkle.initialize(subtreeUpdateVerifier);\\n        _pastRoots[TreeUtils.EMPTY_TREE_ROOT] = true;\\n    }\\n\\n    /// @notice Require caller is permissioned batch filler\\n    modifier onlySubtreeBatchFiller() {\\n        require(_subtreeBatchFillers[msg.sender], \\\"Only subtree batch filler\\\");\\n        _;\\n    }\\n\\n    /// @notice Owner-only function, sets address permission to call `fillBatchesWithZeros`\\n    /// @param filler Address to set permission for\\n    /// @param permission Permission to set\\n    function setSubtreeBatchFillerPermission(\\n        address filler,\\n        bool permission\\n    ) external onlyOwner {\\n        _subtreeBatchFillers[filler] = permission;\\n        emit SubtreeBatchFillerPermissionSet(filler, permission);\\n    }\\n\\n    /// @notice Inserts a batch of zero refund notes into the commitment tree\\n    /// @dev This function allows the an entity to expedite process of being able to update\\n    ///      the merkle tree root. The caller of this function\\n    function fillBatchWithZeros() external onlySubtreeBatchFiller {\\n        uint256 batchLen = _merkle.getBatchLen();\\n        require(batchLen > 0, \\\"!zero fill empty batch\\\");\\n\\n        uint256 startIndex = _merkle.getTotalCount();\\n        uint256 numZeros = TreeUtils.BATCH_SIZE - batchLen;\\n\\n        _merkle.fillBatchWithZeros();\\n\\n        emit FilledBatchWithZeros(startIndex, numZeros);\\n    }\\n\\n    /// @notice Attempts to update the tree's root given a subtree update proof\\n    /// @param newRoot The new root of the Merkle tree after the subtree update\\n    /// @param proof The proof for the subtree update\\n    function applySubtreeUpdate(\\n        uint256 newRoot,\\n        uint256[8] calldata proof\\n    ) external whenNotPaused {\\n        require(!_pastRoots[newRoot], \\\"newRoot already a past root\\\");\\n\\n        uint256 subtreeBatchOffset = _merkle.getCount();\\n        _merkle.applySubtreeUpdate(newRoot, proof);\\n        _pastRoots[newRoot] = true;\\n\\n        emit SubtreeUpdate(newRoot, subtreeBatchOffset);\\n    }\\n\\n    /// @notice Returns current root of the merkle tree\\n    function root() public view returns (uint256) {\\n        return _merkle.getRoot();\\n    }\\n\\n    /// @notice Returns count of the merkle tree under the current root\\n    function count() public view returns (uint128) {\\n        return _merkle.getCount();\\n    }\\n\\n    /// @notice Returns the count of the merkle tree including leaves that have not yet been\\n    ///         included in a subtree update\\n    function totalCount() public view returns (uint128) {\\n        return _merkle.getTotalCount();\\n    }\\n\\n    /// @notice Inserts note into commitment tree\\n    /// @param note note to insert\\n    function _insertNote(EncodedNote memory note) internal {\\n        // ensure note can be decommitted by subtree update circuit + addrs are valid\\n        Validation.validateNote(note);\\n        _merkle.insertNote(note);\\n    }\\n\\n    /// @notice Inserts several note commitments into the tree\\n    /// @param ncs Note commitments to insert\\n    function _insertNoteCommitments(uint256[] memory ncs) internal {\\n        _merkle.insertNoteCommitments(ncs);\\n    }\\n\\n    /// @notice Process an op's pubJoinSplits, assuming that their proofs have already been\\n    ///         verified.\\n    ///         Ensures joinSplit commitment tree root is up to date, that nullifiers are not\\n    ///         reused, adds the new NFs to the nullifier set, and inserts the new note NCs.\\n    /// @dev This function should be re-entry safe. Nullifiers are be marked\\n    ///      used as soon as they are checked to be valid.\\n    /// @param op Operation with joinsplits\\n    function _handleJoinSplits(Operation calldata op) internal {\\n        uint256 totalNumJoinSplits = op.totalNumJoinSplits();\\n        uint256[] memory newNoteCommitments = new uint256[](\\n            totalNumJoinSplits * 2\\n        );\\n        uint128 offset = _merkle.getTotalCount();\\n\\n        JoinSplit calldata joinSplit;\\n        for (uint256 i = 0; i < totalNumJoinSplits; i++) {\\n            joinSplit = i < op.pubJoinSplits.length\\n                ? op.pubJoinSplits[i].joinSplit\\n                : op.confJoinSplits[i - op.pubJoinSplits.length];\\n\\n            // Check commitment tree root is valid\\n            require(\\n                _pastRoots[joinSplit.commitmentTreeRoot],\\n                \\\"Tree root not past root\\\"\\n            );\\n\\n            // Check both NFs are not already used and don't match\\n            require(\\n                !_nullifierSet[joinSplit.nullifierA],\\n                \\\"Nullifier A already used\\\"\\n            );\\n            require(\\n                !_nullifierSet[joinSplit.nullifierB],\\n                \\\"Nullifier B already used\\\"\\n            );\\n            require(\\n                joinSplit.nullifierA != joinSplit.nullifierB,\\n                \\\"2 nfs should !equal\\\"\\n            );\\n\\n            // Mark NFs used\\n            _nullifierSet[joinSplit.nullifierA] = true;\\n            _nullifierSet[joinSplit.nullifierB] = true;\\n\\n            // Compute newNote indices in the merkle tree\\n            uint128 newNoteIndexA = offset + uint128(2 * i);\\n            uint128 newNoteIndexB = offset + uint128(2 * i + 1);\\n\\n            // Insert new note commitments\\n            newNoteCommitments[i * 2] = joinSplit.newNoteACommitment;\\n            newNoteCommitments[i * 2 + 1] = joinSplit.newNoteBCommitment;\\n\\n            emit JoinSplitProcessed(\\n                joinSplit.nullifierA,\\n                joinSplit.nullifierB,\\n                newNoteIndexA,\\n                newNoteIndexB,\\n                joinSplit.newNoteACommitment,\\n                joinSplit.newNoteBCommitment,\\n                joinSplit.senderCommitment,\\n                joinSplit.joinSplitInfoCommitment,\\n                joinSplit.newNoteAEncrypted,\\n                joinSplit.newNoteBEncrypted\\n            );\\n        }\\n\\n        _insertNoteCommitments(newNoteCommitments);\\n    }\\n\\n    /// @notice Inserts a single refund note into the commitment tree\\n    /// @param encodedAsset Encoded asset refund note is being created for\\n    /// @param refundAddr Stealth address refund note is created to\\n    /// @param value Value of refund note for given asset\\n    function _handleRefundNote(\\n        EncodedAsset memory encodedAsset,\\n        CompressedStealthAddress calldata refundAddr,\\n        uint256 value\\n    ) internal returns (uint128 merkleIndex) {\\n        merkleIndex = _merkle.getTotalCount();\\n        EncodedNote memory note = EncodedNote({\\n            ownerH1: refundAddr.h1,\\n            ownerH2: refundAddr.h2,\\n            nonce: uint256(merkleIndex),\\n            encodedAssetAddr: encodedAsset.encodedAssetAddr,\\n            encodedAssetId: encodedAsset.encodedAssetId,\\n            value: value\\n        });\\n\\n        _insertNote(note);\\n\\n        emit RefundProcessed(\\n            refundAddr,\\n            note.nonce,\\n            encodedAsset.encodedAssetAddr,\\n            encodedAsset.encodedAssetId,\\n            value,\\n            merkleIndex\\n        );\\n\\n        return merkleIndex;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Handler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.17;\\n\\n// Internal\\nimport {IHandler} from \\\"./interfaces/IHandler.sol\\\";\\nimport {BalanceManager} from \\\"./BalanceManager.sol\\\";\\nimport {NocturneReentrancyGuard} from \\\"./NocturneReentrancyGuard.sol\\\";\\nimport {Utils} from \\\"./libs/Utils.sol\\\";\\nimport {OperationUtils} from \\\"./libs/OperationUtils.sol\\\";\\nimport {Groth16} from \\\"./libs/Groth16.sol\\\";\\nimport {AssetUtils} from \\\"./libs/AssetUtils.sol\\\";\\nimport \\\"./libs/Types.sol\\\";\\n\\n/// @title Handler\\n/// @author Nocturne Labs\\n/// @notice Handler contract for processing and executing operations.\\ncontract Handler is IHandler, BalanceManager, NocturneReentrancyGuard {\\n    using OperationLib for Operation;\\n\\n    bytes4 public constant ERC20_APPROVE_SELECTOR = bytes4(0x095ea7b3);\\n    uint256 public constant ERC_20_APPROVE_FN_DATA_LENGTH = 4 + 32 + 32;\\n\\n    // Set of supported contracts\\n    mapping(address => bool) public _supportedContracts;\\n\\n    // Set of callable protocol methods (key = address | selector)\\n    // NOTE: If an upgradeable contract with malicious admins is whitelisted, the contract could be\\n    // upgraded to add a new method that has a selector clash with an already-whitelisted method.\\n    // This would allow a malicious admin to make methods not intended to be called callable. This\\n    // scenario would allow for bypassing of deposit limits if new method allows for large inflow\\n    // of funds.\\n    mapping(uint192 => bool) public _supportedContractMethods;\\n\\n    // Gap for upgrade safety\\n    uint256[50] private __GAP;\\n\\n    /// @notice Event emitted when a contract is given/revoked allowlist permission\\n    event ContractMethodPermissionSet(\\n        address contractAddress,\\n        bytes4 selector,\\n        bool permission\\n    );\\n\\n    /// @notice Event emitted when a token is given/revoked allowlist permission\\n    event ContractPermissionSet(address contractAddress, bool permission);\\n\\n    /// @notice Initialization function\\n    /// @param subtreeUpdateVerifier Address of the subtree update verifier contract\\n    /// @param leftoverTokensHolder Address of the leftover tokens holder contract\\n    function initialize(\\n        address subtreeUpdateVerifier,\\n        address leftoverTokensHolder\\n    ) external initializer {\\n        __NocturneReentrancyGuard_init();\\n        __BalanceManager_init(subtreeUpdateVerifier, leftoverTokensHolder);\\n    }\\n\\n    /// @notice Only callable by the handler itself (used so handler can message call itself)\\n    modifier onlyThis() {\\n        require(msg.sender == address(this), \\\"Only this\\\");\\n        _;\\n    }\\n\\n    /// @notice Only callable by the Teller contract\\n    modifier onlyTeller() {\\n        require(msg.sender == address(_teller), \\\"Only teller\\\");\\n        _;\\n    }\\n\\n    /// @notice Pauses the contract, only callable by owner\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @notice Unpauses the contract, only callable by owner\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /// @notice Sets allowlist permission of the given contract, only callable by owner\\n    /// @param contractAddress Address of the contract to add\\n    /// @param permission Whether to enable or revoke permission\\n    /// @dev This whitelists the contract but none of its methods. This is used for checks such as\\n    ///      checks that a token is supported or when checking that a spender being approved for an\\n    ///      erc20 is allowed.\\n    function setContractPermission(\\n        address contractAddress,\\n        bool permission\\n    ) external onlyOwner {\\n        _supportedContracts[contractAddress] = permission;\\n        emit ContractPermissionSet(contractAddress, permission);\\n    }\\n\\n    /// @notice Sets allowlist permission of the given contract, only callable by owner\\n    /// @param contractAddress Address of the contract to add\\n    /// @param permission Whether to enable or revoke permission\\n    function setContractMethodPermission(\\n        address contractAddress,\\n        bytes4 selector,\\n        bool permission\\n    ) external onlyOwner {\\n        uint192 addressAndSelector = _addressAndSelector(\\n            contractAddress,\\n            selector\\n        );\\n        _supportedContractMethods[addressAndSelector] = permission;\\n        emit ContractMethodPermissionSet(contractAddress, selector, permission);\\n    }\\n\\n    /// @notice Handles deposit call from Teller. Inserts new note commitment for deposit.\\n    /// @dev This method is only callable by the Teller contract when contract is not paused.\\n    /// @dev Function checks asset is on the allowlist to avoid unsupported tokens getting stuck.\\n    /// @param deposit Deposit to handle\\n    function handleDeposit(\\n        Deposit calldata deposit\\n    ) external override whenNotPaused onlyTeller returns (uint128 merkleIndex) {\\n        // Ensure deposit asset is supported\\n        EncodedAsset memory encodedAsset = deposit.encodedAsset;\\n        (, address assetAddr, ) = AssetUtils.decodeAsset(encodedAsset);\\n        require(_supportedContracts[assetAddr], \\\"!supported deposit asset\\\");\\n\\n        merkleIndex = _handleRefundNote(\\n            encodedAsset,\\n            deposit.depositAddr,\\n            deposit.value\\n        );\\n\\n        return merkleIndex;\\n    }\\n\\n    /// @notice Handles an operation after proofs have been verified by the Teller. Checks\\n    ///         joinSplits, requests proven funds from the Teller, executes op.actions, compensates\\n    ///         the bundler, then handles refunds.\\n    /// @dev This method is only callable by the Teller contract when contract is not paused.\\n    /// @dev There are 3 call nested call contexts used to isolate different types of errors:\\n    ///         1. handleOperation: A revert here means the bundler failed to perform standard\\n    ///            checks that are predictable (e.g. valid chainid, valid deadline, enough gas\\n    ///            assets, etc). The bundler is not compensated when reverts happen here because\\n    ///            the revert happens before _gatherReservedGasAssetAndPayBundler is called.\\n    ///         2. executeActions: A revert here can be due to unpredictable reasons, mainly if\\n    ///            there is not enough executionGas for the actions or if after executing actions,\\n    ///            there are fewer refund tokens than what was specified in trackedAssets\\n    ///            minRefundValues.\\n    ///         3. _makeExternalCall: A revert here only leads to top level revert if\\n    ///            op.atomicActions = true (requires all actions to succeed atomically or none at\\n    ///            all).\\n    /// @param op Operation to handle\\n    /// @param perJoinSplitVerifyGas Gas usage for verifying a single joinSplit proof\\n    /// @param bundler Address of the bundler\\n    function handleOperation(\\n        Operation calldata op,\\n        uint256 perJoinSplitVerifyGas,\\n        address bundler\\n    )\\n        external\\n        whenNotPaused\\n        onlyTeller\\n        handleOperationGuard\\n        returns (OperationResult memory opResult)\\n    {\\n        // Ensure all assets supported\\n        uint256 numTrackedAssets = op.trackedAssets.length;\\n        for (uint256 i = 0; i < numTrackedAssets; i++) {\\n            (, address assetAddr, ) = AssetUtils.decodeAsset(\\n                op.trackedAssets[i].encodedAsset\\n            );\\n            require(_supportedContracts[assetAddr], \\\"!supported asset\\\");\\n        }\\n\\n        // Ensure all token balances of tokens to be used are zeroed out\\n        _ensureZeroedBalances(op);\\n\\n        // Mark merkle count pre operation\\n        opResult.preOpMerkleCount = totalCount();\\n\\n        // Handle all joinsplits\\n        uint256 numJoinSplitAssets = _processJoinSplitsReservingFee(\\n            op,\\n            perJoinSplitVerifyGas\\n        );\\n\\n        // If reached this point, assets have been unwrapped and will have refunds to handle\\n        opResult.assetsUnwrapped = true;\\n\\n        uint256 preExecutionGas = gasleft();\\n        try this.executeActions{gas: op.executionGasLimit}(op) returns (\\n            bool[] memory successes,\\n            bytes[] memory results,\\n            uint256 numRefundsToHandle\\n        ) {\\n            opResult.opProcessed = true;\\n            opResult.callSuccesses = successes;\\n            opResult.callResults = results;\\n            opResult.numRefunds = numRefundsToHandle;\\n        } catch (bytes memory reason) {\\n            // Indicates revert because of one of the following reasons:\\n            // 1. `executeActions` yielded fewer refund tokens than expected in\\n            //    trackedAssets\\n            // 2. `executeActions` exceeded `executionGasLimit`, but in its outer call context\\n            //    (i.e. while not making an external call)\\n            // 3. There was a revert when executing actions (e.g. atomic actions, unsupported\\n            //    contract call, etc)\\n\\n            // We explicitly catch cases 1 and 3 in `executeActions`, so if `executeActions` failed\\n            // silently, then it must be case 2.\\n            string memory revertMsg = OperationUtils.getRevertMsg(reason);\\n            if (bytes(revertMsg).length == 0) {\\n                opResult.failureReason = \\\"exceeded `executionGasLimit`\\\";\\n            } else {\\n                opResult.failureReason = revertMsg;\\n            }\\n\\n            // In case that action execution reverted, num refunds to handle will be number of\\n            // joinSplit assets. NOTE that this could be higher estimate than actual if joinsplits\\n            // are not organized in contiguous subarrays by user.\\n            opResult.numRefunds = numJoinSplitAssets;\\n        }\\n\\n        // Set verification and execution gas after getting opResult\\n        opResult.verificationGas =\\n            perJoinSplitVerifyGas *\\n            op.totalNumJoinSplits();\\n        opResult.executionGas = Utils.min(\\n            op.executionGasLimit,\\n            preExecutionGas - gasleft()\\n        );\\n\\n        // Gather reserved gas asset and process gas payment to bundler\\n        _gatherReservedGasAssetAndPayBundler(\\n            op,\\n            opResult,\\n            perJoinSplitVerifyGas,\\n            bundler\\n        );\\n\\n        _handleAllRefunds(op);\\n\\n        // Mark new merkle count post operation\\n        opResult.postOpMerkleCount = totalCount();\\n\\n        return opResult;\\n    }\\n\\n    /// @notice Executes an array of actions for an operation.\\n    /// @dev This function is only callable by the Handler itself when not paused.\\n    /// @dev This function can revert if any of the below occur (revert not within action itself):\\n    ///         1. The call runs out of gas in the outer call context (OOG)\\n    ///         2. The executed actions result in fewer refunds than expected in\\n    ///            trackedAssets\\n    ///         3. An action reverts and atomicActions is set to true\\n    ///         4. A call to an unsupported protocol is attempted\\n    ///         5. An action attempts to re-enter by calling the Teller contract\\n    /// @param op Operation to execute actions for\\n    function executeActions(\\n        Operation calldata op\\n    )\\n        external\\n        whenNotPaused\\n        onlyThis\\n        executeActionsGuard\\n        returns (\\n            bool[] memory successes,\\n            bytes[] memory results,\\n            uint256 numRefundsToHandle\\n        )\\n    {\\n        uint256 numActions = op.actions.length;\\n        successes = new bool[](numActions);\\n        results = new bytes[](numActions);\\n\\n        // Execute each external call\\n        for (uint256 i = 0; i < numActions; i++) {\\n            (successes[i], results[i]) = _makeExternalCall(op.actions[i]);\\n            if (op.atomicActions && !successes[i]) {\\n                string memory revertMsg = OperationUtils.getRevertMsg(\\n                    results[i]\\n                );\\n                if (bytes(revertMsg).length == 0) {\\n                    // TODO maybe say which action?\\n                    revert(\\\"action silently reverted\\\");\\n                } else {\\n                    revert(revertMsg);\\n                }\\n            }\\n        }\\n\\n        // NOTE: if any tokens have < expected refund value, the below call will revert. This causes\\n        // executeActions to revert, undoing all state changes in this call context. The user still\\n        // ends up compensating the bundler for gas in this case.\\n        numRefundsToHandle = _ensureMinRefundValues(op);\\n    }\\n\\n    /// @notice Makes an external call to execute a single action\\n    /// @dev Reverts if caller attempts to call unsupported contract OR if caller tries\\n    ///      to re-enter by calling the Teller contract.\\n    /// @dev There is a special check on methods with the erc20.approve selector that ensures only\\n    ///      whitelisted protocols can be approved as `spender` for erc20 tokens. Without this\\n    ///      check, users can call erc20.approve(amount, spender) from the Handler contract to\\n    ///      approve arbitrary spenders.\\n    function _makeExternalCall(\\n        Action calldata action\\n    ) internal returns (bool success, bytes memory result) {\\n        // Ensure contract exists\\n        require(action.contractAddress.code.length != 0, \\\"!zero code\\\");\\n\\n        // Block re-entrancy from teller calling self\\n        require(\\n            action.contractAddress != address(_teller),\\n            \\\"Cannot call the Nocturne Teller\\\"\\n        );\\n\\n        // Ensure contract and method to call are supported\\n        bytes4 selector = _extractFunctionSelector(action.encodedFunction);\\n        uint192 addressAndSelector = _addressAndSelector(\\n            action.contractAddress,\\n            selector\\n        );\\n        require(\\n            _supportedContractMethods[addressAndSelector],\\n            \\\"Cannot call non-allowed protocol method\\\"\\n        );\\n\\n        // NOTE: If an allowed protocol has a selector clash with erc20.approve, then abi.decode\\n        // will yield whatever data is formatted at bytes 4:23 for spender. This will likely revert\\n        // and cause the clashing function to not be callable. If 1st argument happens to be a\\n        // whitelisted address, then the clashing function will be callable. Selector clashes,\\n        // however, are not an issue here, as this check is only meant to ensure the normal case\\n        // (erc20s with standard approve fn signature) have protection against arbitrary approvals\\n        // and is not intended to have any bearing on other non-erc20 or non-approve cases. Worst\\n        // case outcome is that small number of functions with signature clash will not be callable.\\n        if (selector == ERC20_APPROVE_SELECTOR) {\\n            require(\\n                action.encodedFunction.length == ERC_20_APPROVE_FN_DATA_LENGTH,\\n                \\\"!approve fn length\\\"\\n            );\\n            (address spender, ) = abi.decode(\\n                action.encodedFunction[4:],\\n                (address, uint256)\\n            );\\n            require(_supportedContracts[spender], \\\"!approve spender\\\");\\n        }\\n\\n        (success, result) = action.contractAddress.call(action.encodedFunction);\\n    }\\n\\n    /// @notice Extract function selector from encoded function data\\n    /// @param encodedFunctionData Encoded function data\\n    function _extractFunctionSelector(\\n        bytes calldata encodedFunctionData\\n    ) internal pure returns (bytes4 selector) {\\n        require(encodedFunctionData.length >= 4, \\\"!encoded fn length\\\");\\n        return bytes4(encodedFunctionData[:4]);\\n    }\\n\\n    /// @notice Concat address and selector as key to contract allowlist\\n    /// @param contractAddress Address of the contract\\n    /// @param selector Selector of the function\\n    function _addressAndSelector(\\n        address contractAddress,\\n        bytes4 selector\\n    ) internal pure returns (uint192) {\\n        return (uint192(uint160(contractAddress)) << 32) | uint32(selector);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"../libs/Types.sol\\\";\\n\\ninterface IHandler {\\n    function handleOperation(\\n        Operation calldata op,\\n        uint256 perJoinSplitVerifyGas,\\n        address bundler\\n    ) external returns (OperationResult memory);\\n\\n    function handleDeposit(\\n        Deposit calldata deposit\\n    ) external returns (uint128 merkleIndex);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISubtreeUpdateVerifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport {IVerifier} from \\\"./IVerifier.sol\\\";\\n\\n/// @title Verifier interface.\\n/// @dev Interface of Verifier contract.\\ninterface ISubtreeUpdateVerifier is IVerifier {\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITeller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"../libs/Types.sol\\\";\\n\\ninterface ITeller {\\n    function processBundle(\\n        Bundle calldata bundle\\n    )\\n        external\\n        returns (\\n            uint256[] memory opDigests,\\n            OperationResult[] memory opResults\\n        );\\n\\n    function depositFunds(\\n        Deposit calldata deposit\\n    ) external returns (uint128 merkleIndex);\\n\\n    function requestAsset(\\n        EncodedAsset calldata encodedAsset,\\n        uint256 value\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVerifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.17;\\nimport {Groth16} from \\\"../libs/Groth16.sol\\\";\\n\\n/// @title interface for verifiers that support batch verification.\\n/// @dev Interface for verifiers that support batch verification.\\ninterface IVerifier {\\n    /// @param proof: the proof to verify\\n    /// @param pis: an array of containing the public inputs for the proof\\n    function verifyProof(\\n        uint256[8] memory proof,\\n        uint256[] memory pis\\n    ) external view returns (bool);\\n\\n    /// @param proofs: an array containing the proofs to verify\\n    /// @param pis: an array of length `NUM_PIS * numProofs` containing the PIs for each proof concatenated together\\n    function batchVerifyProofs(\\n        uint256[8][] memory proofs,\\n        uint256[][] memory pis\\n    ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/libs/AssetUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\nimport {Utils} from \\\"../libs/Utils.sol\\\";\\nimport \\\"../libs/Types.sol\\\";\\n\\nlibrary AssetUtils {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 constant MASK_111 = 7;\\n    uint256 constant MASK_11 = 3;\\n    uint256 constant BITS_250_TO_252_MASK = (MASK_111 << 250);\\n    uint256 constant BOTTOM_253_MASK = (1 << 253) - 1;\\n    uint256 constant BOTTOM_160_MASK = (1 << 160) - 1;\\n\\n    function encodeAsset(\\n        AssetType assetType,\\n        address assetAddr,\\n        uint256 id\\n    ) internal pure returns (EncodedAsset memory encodedAsset) {\\n        uint256 encodedAssetId = id & BOTTOM_253_MASK;\\n        uint256 assetTypeBits;\\n        if (assetType == AssetType.ERC20) {\\n            assetTypeBits = uint256(0);\\n        } else if (assetType == AssetType.ERC721) {\\n            assetTypeBits = uint256(1);\\n        } else if (assetType == AssetType.ERC1155) {\\n            assetTypeBits = uint256(2);\\n        } else {\\n            revert(\\\"Invalid assetType\\\");\\n        }\\n\\n        uint256 encodedAssetAddr = ((id >> 3) & BITS_250_TO_252_MASK) |\\n            (assetTypeBits << 160) |\\n            (uint256(uint160(assetAddr)));\\n\\n        return\\n            EncodedAsset({\\n                encodedAssetAddr: encodedAssetAddr,\\n                encodedAssetId: encodedAssetId\\n            });\\n    }\\n\\n    function decodeAsset(\\n        EncodedAsset memory encodedAsset\\n    )\\n        internal\\n        pure\\n        returns (AssetType assetType, address assetAddr, uint256 id)\\n    {\\n        id =\\n            ((encodedAsset.encodedAssetAddr & BITS_250_TO_252_MASK) << 3) |\\n            encodedAsset.encodedAssetId;\\n        assetAddr = address(\\n            uint160(encodedAsset.encodedAssetAddr & BOTTOM_160_MASK)\\n        );\\n        uint256 assetTypeBits = (encodedAsset.encodedAssetAddr >> 160) &\\n            MASK_11;\\n        if (assetTypeBits == 0) {\\n            assetType = AssetType.ERC20;\\n        } else if (assetTypeBits == 1) {\\n            assetType = AssetType.ERC721;\\n        } else if (assetTypeBits == 2) {\\n            assetType = AssetType.ERC1155;\\n        } else {\\n            revert(\\\"Invalid encodedAssetAddr\\\");\\n        }\\n        return (assetType, assetAddr, id);\\n    }\\n\\n    function hashEncodedAsset(\\n        EncodedAsset memory encodedAsset\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    encodedAsset.encodedAssetAddr,\\n                    encodedAsset.encodedAssetId\\n                )\\n            );\\n    }\\n\\n    function balanceOfAsset(\\n        EncodedAsset memory encodedAsset\\n    ) internal view returns (uint256) {\\n        (AssetType assetType, address assetAddr, uint256 id) = AssetUtils\\n            .decodeAsset(encodedAsset);\\n        uint256 value = 0;\\n        if (assetType == AssetType.ERC20) {\\n            value = IERC20(assetAddr).balanceOf(address(this));\\n        } else if (assetType == AssetType.ERC721) {\\n            // If erc721 not minted, return balance = 0\\n            try IERC721(assetAddr).ownerOf(id) returns (address owner) {\\n                if (owner == address(this)) {\\n                    value = 1;\\n                }\\n            } catch {}\\n        } else if (assetType == AssetType.ERC1155) {\\n            value = IERC1155(assetAddr).balanceOf(address(this), id);\\n        } else {\\n            revert(\\\"Invalid asset\\\");\\n        }\\n\\n        return value;\\n    }\\n\\n    /**\\n      @dev Transfer asset to receiver. Throws if unsuccssful.\\n    */\\n    function transferAssetTo(\\n        EncodedAsset memory encodedAsset,\\n        address receiver,\\n        uint256 value\\n    ) internal {\\n        (AssetType assetType, address assetAddr, ) = decodeAsset(encodedAsset);\\n        if (assetType == AssetType.ERC20) {\\n            IERC20(assetAddr).safeTransfer(receiver, value);\\n        } else if (assetType == AssetType.ERC721) {\\n            revert(\\\"!supported\\\");\\n        } else if (assetType == AssetType.ERC1155) {\\n            revert(\\\"!supported\\\");\\n        } else {\\n            revert(\\\"Invalid asset\\\");\\n        }\\n    }\\n\\n    /**\\n      @dev Transfer asset from spender. Throws if unsuccssful.\\n    */\\n    function transferAssetFrom(\\n        EncodedAsset memory encodedAsset,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        (AssetType assetType, address assetAddr, ) = decodeAsset(encodedAsset);\\n        if (assetType == AssetType.ERC20) {\\n            IERC20(assetAddr).safeTransferFrom(spender, address(this), value);\\n        } else if (assetType == AssetType.ERC721) {\\n            revert(\\\"!supported\\\");\\n        } else if (assetType == AssetType.ERC1155) {\\n            revert(\\\"!supported\\\");\\n        } else {\\n            revert(\\\"Invalid asset\\\");\\n        }\\n    }\\n\\n    /**\\n      @dev Approve asset to spender for value. Throws if unsuccssful.\\n    */\\n    function approveAsset(\\n        EncodedAsset memory encodedAsset,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        (AssetType assetType, address assetAddr, ) = decodeAsset(encodedAsset);\\n\\n        if (assetType == AssetType.ERC20) {\\n            // TODO: next OZ release will add SafeERC20.forceApprove\\n            IERC20(assetAddr).approve(spender, 0);\\n            IERC20(assetAddr).approve(spender, value);\\n        } else if (assetType == AssetType.ERC721) {\\n            revert(\\\"!supported\\\");\\n        } else if (assetType == AssetType.ERC1155) {\\n            revert(\\\"!supported\\\");\\n        } else {\\n            revert(\\\"Invalid asset\\\");\\n        }\\n    }\\n\\n    function eq(\\n        EncodedAsset calldata assetA,\\n        EncodedAsset calldata assetB\\n    ) internal pure returns (bool) {\\n        return\\n            (assetA.encodedAssetAddr == assetB.encodedAssetAddr) &&\\n            (assetA.encodedAssetId == assetB.encodedAssetId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/Groth16.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.17;\\nimport {Pairing} from \\\"./Pairing.sol\\\";\\nimport {Utils} from \\\"./Utils.sol\\\";\\n\\nlibrary Groth16 {\\n    struct VerifyingKey {\\n        Pairing.G1Point alpha1;\\n        Pairing.G2Point beta2;\\n        Pairing.G2Point gamma2;\\n        Pairing.G2Point delta2;\\n        Pairing.G1Point[] IC;\\n    }\\n\\n    struct Proof {\\n        Pairing.G1Point A;\\n        Pairing.G2Point B;\\n        Pairing.G1Point C;\\n    }\\n\\n    // Verifying a single Groth16 proof\\n    function verifyProof(\\n        VerifyingKey memory vk,\\n        uint256[8] memory proof8,\\n        uint256[] memory pi\\n    ) internal view returns (bool) {\\n        require(vk.IC.length == pi.length + 1, \\\"Public input length mismatch.\\\");\\n        Pairing.G1Point memory vk_x = vk.IC[0];\\n        for (uint i = 0; i < pi.length; i++) {\\n            require(\\n                pi[i] < Utils.BN254_SCALAR_FIELD_MODULUS,\\n                \\\"Malformed public input.\\\"\\n            );\\n            vk_x = Pairing.addition(\\n                vk_x,\\n                Pairing.scalar_mul(vk.IC[i + 1], pi[i])\\n            );\\n        }\\n\\n        Proof memory proof = _proof8ToStruct(proof8);\\n\\n        return\\n            Pairing.pairingProd4(\\n                Pairing.negate(proof.A),\\n                proof.B,\\n                vk.alpha1,\\n                vk.beta2,\\n                vk_x,\\n                vk.gamma2,\\n                proof.C,\\n                vk.delta2\\n            );\\n    }\\n\\n    function accumulate(\\n        Proof[] memory proofs,\\n        uint256[][] memory allPis\\n    )\\n        internal\\n        view\\n        returns (\\n            Pairing.G1Point[] memory proofAsandAggegateC,\\n            uint256[] memory publicInputAccumulators\\n        )\\n    {\\n        uint256 allPisLength = allPis.length;\\n        uint256 numProofs = proofs.length;\\n\\n        uint256 numPublicInputs = allPis[0].length;\\n        for (uint256 i = 1; i < allPisLength; i++) {\\n            require(\\n                numPublicInputs == allPis[i].length,\\n                \\\"Public input mismatch during batch verification.\\\"\\n            );\\n        }\\n        uint256[] memory entropy = new uint256[](numProofs);\\n        publicInputAccumulators = new uint256[](numPublicInputs + 1);\\n\\n        // Generate entropy for each proof and accumulate each PI\\n        // seed a challenger by hashing all of the proofs and the current blockhash togethre\\n        uint256 challengerState = uint256(\\n            keccak256(abi.encode(proofs, blockhash(block.number - 1)))\\n        );\\n        for (uint256 proofIndex = 0; proofIndex < numProofs; proofIndex++) {\\n            if (proofIndex == 0) {\\n                entropy[proofIndex] = 1;\\n            } else {\\n                challengerState = uint256(\\n                    keccak256(abi.encodePacked(challengerState))\\n                );\\n                entropy[proofIndex] = challengerState;\\n            }\\n            require(entropy[proofIndex] != 0, \\\"Entropy should not be zero\\\");\\n            // here multiplication by 1 is implied\\n            publicInputAccumulators[0] = addmod(\\n                publicInputAccumulators[0],\\n                entropy[proofIndex],\\n                Utils.BN254_SCALAR_FIELD_MODULUS\\n            );\\n            for (uint256 i = 0; i < numPublicInputs; i++) {\\n                require(\\n                    allPis[proofIndex][i] < Utils.BN254_SCALAR_FIELD_MODULUS,\\n                    \\\"Malformed public input\\\"\\n                );\\n                // accumulate the exponent with extra entropy mod Utils.BN254_SCALAR_FIELD_MODULUS\\n                publicInputAccumulators[i + 1] = addmod(\\n                    publicInputAccumulators[i + 1],\\n                    mulmod(\\n                        entropy[proofIndex],\\n                        allPis[proofIndex][i],\\n                        Utils.BN254_SCALAR_FIELD_MODULUS\\n                    ),\\n                    Utils.BN254_SCALAR_FIELD_MODULUS\\n                );\\n            }\\n        }\\n\\n        proofAsandAggegateC = new Pairing.G1Point[](numProofs + 1);\\n        proofAsandAggegateC[0] = proofs[0].A;\\n\\n        // raise As from each proof to entropy[i]\\n        for (uint256 proofIndex = 1; proofIndex < numProofs; proofIndex++) {\\n            uint256 s = entropy[proofIndex];\\n            proofAsandAggegateC[proofIndex] = Pairing.scalar_mul(\\n                proofs[proofIndex].A,\\n                s\\n            );\\n        }\\n\\n        // MSM(proofCs, entropy)\\n        Pairing.G1Point memory msmProduct = proofs[0].C;\\n        for (uint256 proofIndex = 1; proofIndex < numProofs; proofIndex++) {\\n            uint256 s = entropy[proofIndex];\\n            Pairing.G1Point memory term = Pairing.scalar_mul(\\n                proofs[proofIndex].C,\\n                s\\n            );\\n            msmProduct = Pairing.addition(msmProduct, term);\\n        }\\n\\n        proofAsandAggegateC[numProofs] = msmProduct;\\n\\n        return (proofAsandAggegateC, publicInputAccumulators);\\n    }\\n\\n    function batchVerifyProofs(\\n        VerifyingKey memory vk,\\n        uint256[8][] memory proof8s,\\n        uint256[][] memory allPis\\n    ) internal view returns (bool success) {\\n        uint256 proof8sLength = proof8s.length;\\n        require(\\n            allPis.length == proof8sLength,\\n            \\\"Invalid inputs length for a batch\\\"\\n        );\\n\\n        Proof[] memory proofs = new Proof[](proof8sLength);\\n        for (uint256 i = 0; i < proof8sLength; i++) {\\n            proofs[i] = _proof8ToStruct(proof8s[i]);\\n        }\\n\\n        // strategy is to accumulate entropy separately for some proof elements\\n        // (accumulate only for G1, can't in G2) of the pairing equation, as well as input verification key,\\n        // postpone scalar multiplication as much as possible and check only one equation\\n        // by using 3 + proofs.length pairings only plus 2*proofs.length + (num_inputs+1) + 1 scalar multiplications compared to naive\\n        // 4*proofs.length pairings and proofs.length*(num_inputs+1) scalar multiplications\\n\\n        (\\n            Pairing.G1Point[] memory proofAsandAggegateC,\\n            uint256[] memory publicInputAccumulators\\n        ) = accumulate(proofs, allPis);\\n\\n        Pairing.G1Point[2] memory finalVKAlphaAndX = _prepareBatch(\\n            vk,\\n            publicInputAccumulators\\n        );\\n\\n        Pairing.G1Point[] memory p1s = new Pairing.G1Point[](proofs.length + 3);\\n        Pairing.G2Point[] memory p2s = new Pairing.G2Point[](proofs.length + 3);\\n\\n        // first proofs.length pairings e(ProofA, ProofB)\\n        for (\\n            uint256 proofNumber = 0;\\n            proofNumber < proofs.length;\\n            proofNumber++\\n        ) {\\n            p1s[proofNumber] = proofAsandAggegateC[proofNumber];\\n            p2s[proofNumber] = proofs[proofNumber].B;\\n        }\\n\\n        // second pairing e(-finalVKaplha, vk.beta)\\n        p1s[proofs.length] = Pairing.negate(finalVKAlphaAndX[0]);\\n        p2s[proofs.length] = vk.beta2;\\n\\n        // third pairing e(-finalVKx, vk.gamma)\\n        p1s[proofs.length + 1] = Pairing.negate(finalVKAlphaAndX[1]);\\n        p2s[proofs.length + 1] = vk.gamma2;\\n\\n        // fourth pairing e(-proof.C, vk.delta)\\n        p1s[proofs.length + 2] = Pairing.negate(\\n            proofAsandAggegateC[proofs.length]\\n        );\\n        p2s[proofs.length + 2] = vk.delta2;\\n\\n        return Pairing.pairing(p1s, p2s);\\n    }\\n\\n    function _prepareBatch(\\n        VerifyingKey memory vk,\\n        uint256[] memory publicInputAccumulators\\n    ) internal view returns (Pairing.G1Point[2] memory finalVKAlphaAndX) {\\n        // Compute the linear combination vk_x using accumulator\\n\\n        // Performs an MSM(vkIC, publicInputAccumulators)\\n        Pairing.G1Point memory msmProduct = Pairing.scalar_mul(\\n            vk.IC[0],\\n            publicInputAccumulators[0]\\n        );\\n\\n        uint256 piAccumulatorsLength = publicInputAccumulators.length;\\n        for (uint256 i = 1; i < piAccumulatorsLength; i++) {\\n            Pairing.G1Point memory product = Pairing.scalar_mul(\\n                vk.IC[i],\\n                publicInputAccumulators[i]\\n            );\\n            msmProduct = Pairing.addition(msmProduct, product);\\n        }\\n\\n        finalVKAlphaAndX[1] = msmProduct;\\n\\n        // add one extra memory slot for scalar for multiplication usage\\n        Pairing.G1Point memory finalVKalpha = vk.alpha1;\\n        finalVKalpha = Pairing.scalar_mul(\\n            finalVKalpha,\\n            publicInputAccumulators[0]\\n        );\\n        finalVKAlphaAndX[0] = finalVKalpha;\\n\\n        return finalVKAlphaAndX;\\n    }\\n\\n    function _proof8ToStruct(\\n        uint256[8] memory proof\\n    ) internal pure returns (Proof memory) {\\n        return\\n            Groth16.Proof(\\n                Pairing.G1Point(proof[0], proof[1]),\\n                Pairing.G2Point([proof[2], proof[3]], [proof[4], proof[5]]),\\n                Pairing.G1Point(proof[6], proof[7])\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/OffchainMerkleTree.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"../interfaces/ISubtreeUpdateVerifier.sol\\\";\\nimport {Groth16} from \\\"../libs/Groth16.sol\\\";\\nimport \\\"../libs/Types.sol\\\";\\nimport {ITeller} from \\\"../interfaces/ITeller.sol\\\";\\nimport {ISubtreeUpdateVerifier} from \\\"../interfaces/ISubtreeUpdateVerifier.sol\\\";\\nimport {Utils} from \\\"./Utils.sol\\\";\\nimport {TreeUtils} from \\\"./TreeUtils.sol\\\";\\nimport {QueueLib} from \\\"./Queue.sol\\\";\\n\\nenum InsertionType {\\n    Note,\\n    Commitment\\n}\\n\\nstruct OffchainMerkleTree {\\n    // number of non-zero leaves in the tree\\n    // INVARIANT: bottom `LOG2_BATCH_SIZE` bits of `count` should all be zero\\n    uint128 count;\\n    // number of leaves in the batch, plus one\\n    // when this gets to TreeUtils.BATCH_SIZE + 1, we compute accumulatorHash and push te the accumulatorQueue\\n    // we store batch size + 1 to avoid \\\"clearing\\\" the storage slot and save gas\\n    uint64 batchLenPlusOne;\\n    // a bitmap representing whether or not each leaf in the batch is a note or a note commitment\\n    // the bitmap is kept in big-endian order\\n    // that is, the bit corresponding to the 0th leaf in the batch is the \\\"leftmost bit\\\" of the bitmap, i.e. the bit with value 2^63\\n    // and hte bit corresponding to the ith leaf in the batch is the bit with value 2^(63 - i)\\n    // 0 = note commitment, 1 = note\\n    uint64 bitmap;\\n    // root of the merkle tree\\n    uint256 root;\\n    // buffer containing uncommitted update hashes\\n    // each hash can either be the sha256 hash of a publically revealed note (e.g. in thecase of a deposit)\\n    // or the note commitment (i.e. poseidon hash computed off-chain) of a note that hasn't been revealed\\n    // when the buffer is filled, the sha256 hash of the batch is pushed to the accumulatorQueue, \\\"accumulating\\\" the batch of updates\\n    // ! solidity doesn't allow us to use `TreeUtils.BATCH_SIZE` here unfortunately.\\n    uint256[16] batch;\\n    // queue containing accumulator hashes of batches of updates\\n    // each accumulator commits to an update (a set of note commitments) that will be applied to the tree\\n    // via the commitSubtree() method\\n    QueueLib.Queue accumulatorQueue;\\n    ISubtreeUpdateVerifier subtreeUpdateVerifier;\\n}\\n\\nlibrary LibOffchainMerkleTree {\\n    using QueueLib for QueueLib.Queue;\\n\\n    function initialize(\\n        OffchainMerkleTree storage self,\\n        address subtreeUpdateVerifier\\n    ) internal {\\n        // root starts as the root of the empty depth-32 tree.\\n        self.root = TreeUtils.EMPTY_TREE_ROOT;\\n        self.count = 0;\\n        self.bitmap = 0;\\n        _setBatchLen(self, 0);\\n\\n        self.subtreeUpdateVerifier = ISubtreeUpdateVerifier(\\n            subtreeUpdateVerifier\\n        );\\n        self.accumulatorQueue.initialize();\\n\\n        for (uint256 i = 0; i < TreeUtils.BATCH_SIZE; i++) {\\n            self.batch[i] = TreeUtils.ZERO_VALUE;\\n        }\\n    }\\n\\n    function insertNote(\\n        OffchainMerkleTree storage self,\\n        EncodedNote memory note\\n    ) internal {\\n        uint256 noteHash = TreeUtils.sha256Note(note);\\n        _insertUpdate(self, noteHash, InsertionType.Note);\\n    }\\n\\n    function insertNoteCommitments(\\n        OffchainMerkleTree storage self,\\n        uint256[] memory ncs\\n    ) internal {\\n        for (uint256 i = 0; i < ncs.length; i++) {\\n            _insertUpdate(self, ncs[i], InsertionType.Commitment);\\n        }\\n    }\\n\\n    function applySubtreeUpdate(\\n        OffchainMerkleTree storage self,\\n        uint256 newRoot,\\n        uint256[8] memory proof\\n    ) internal {\\n        uint256[] memory pis = _calculatePublicInputs(self, newRoot);\\n\\n        // 1) this library computes accumulatorHash on its own,\\n        // the definition of accumulatorHash prevents collisions (different batch with same hash),\\n        // and the subtree update circuit guarantees `accumulatorHash` is re-computed correctly,\\n        // so if the circuit accepts, the only possible batch the updater could be inserting is precisely\\n        // the batch we've enqueued here on-chain\\n        // 2) the subtree update circuit guarantees that the new root is computed correctly,\\n        //    so due to (1), the only possible newRoot is the newRoot that results from inserting\\n        //    the batch we've enqueued here on-chain\\n        require(\\n            self.subtreeUpdateVerifier.verifyProof(proof, pis),\\n            \\\"subtree update proof invalid\\\"\\n        );\\n\\n        self.accumulatorQueue.dequeue();\\n        self.root = newRoot;\\n        self.count += uint128(TreeUtils.BATCH_SIZE);\\n    }\\n\\n    // returns the current root of the tree\\n    function getRoot(\\n        OffchainMerkleTree storage self\\n    ) internal view returns (uint256) {\\n        return self.root;\\n    }\\n\\n    // returns the current number of leaves in the tree\\n    function getCount(\\n        OffchainMerkleTree storage self\\n    ) internal view returns (uint128) {\\n        return self.count;\\n    }\\n\\n    // returns the number of leaves in the tree plus the number of leaves waiting in the queue\\n    function getTotalCount(\\n        OffchainMerkleTree storage self\\n    ) internal view returns (uint128) {\\n        return\\n            self.count +\\n            uint128(getBatchLen(self)) +\\n            uint128(TreeUtils.BATCH_SIZE) *\\n            uint128(self.accumulatorQueue.length());\\n    }\\n\\n    function getAccumulatorHash(\\n        OffchainMerkleTree storage self\\n    ) external view returns (uint256) {\\n        return self.accumulatorQueue.peek();\\n    }\\n\\n    function getBatchLen(\\n        OffchainMerkleTree storage self\\n    ) internal view returns (uint64) {\\n        return self.batchLenPlusOne - 1;\\n    }\\n\\n    function _setBatchLen(\\n        OffchainMerkleTree storage self,\\n        uint64 batchLen\\n    ) internal {\\n        self.batchLenPlusOne = batchLen + 1;\\n    }\\n\\n    function _calculatePublicInputs(\\n        OffchainMerkleTree storage self,\\n        uint256 newRoot\\n    ) internal view returns (uint256[] memory) {\\n        uint256 accumulatorHash = self.accumulatorQueue.peek();\\n        (uint256 hi, uint256 lo) = TreeUtils.uint256ToFieldElemLimbs(\\n            accumulatorHash\\n        );\\n        uint256 encodedPathAndHash = TreeUtils.encodePathAndHash(\\n            self.count,\\n            hi\\n        );\\n\\n        uint256[] memory pis = new uint256[](4);\\n        pis[0] = self.root;\\n        pis[1] = newRoot;\\n        pis[2] = encodedPathAndHash;\\n        pis[3] = lo;\\n\\n        return pis;\\n    }\\n\\n    // H(updates || bitmap)\\n    // claim: it's impossible to have a collision between two different sets of updates\\n    // argument: order matters because of hash function. The only way two different sequences of note commitments\\n    // could result in the same accumulatorHash would be if the inner hashes - either note commitments or note sha256 hashes -\\n    // were the same, but the insertion kinds were mismatched. That is, there's a sha256 hash \\\"masquerading\\\" as a note commitment\\n    // in the batch. But this is impossible because we also include the bitmap in the hash - which this library ensures is consistent with the\\n    // order and kind of insertinos in the batch.\\n    function _computeAccumulatorHash(\\n        OffchainMerkleTree storage self\\n    ) internal view returns (uint256) {\\n        uint256 batchLen = getBatchLen(self);\\n        uint256[] memory accumulatorInputs = new uint256[](\\n            TreeUtils.BATCH_SIZE + 1\\n        );\\n        for (uint256 i = 0; i < batchLen; i++) {\\n            accumulatorInputs[i] = self.batch[i];\\n        }\\n        for (uint256 i = batchLen; i < TreeUtils.BATCH_SIZE; i++) {\\n            accumulatorInputs[i] = TreeUtils.ZERO_VALUE;\\n        }\\n\\n        // shift over to pad input out to a multiple of 256 bits\\n        accumulatorInputs[TreeUtils.BATCH_SIZE] = uint256(self.bitmap) << 192;\\n\\n        return uint256(TreeUtils.sha256U256ArrayBE(accumulatorInputs));\\n    }\\n\\n    function fillBatchWithZeros(OffchainMerkleTree storage self) internal {\\n        _accumulateAndResetBatchLen(self);\\n    }\\n\\n    function _accumulateAndResetBatchLen(\\n        OffchainMerkleTree storage self\\n    ) internal {\\n        uint256 accumulatorHash = _computeAccumulatorHash(self);\\n        self.accumulatorQueue.enqueue(accumulatorHash);\\n        self.bitmap = 0;\\n        _setBatchLen(self, 0);\\n    }\\n\\n    function _insertUpdate(\\n        OffchainMerkleTree storage self,\\n        uint256 update,\\n        InsertionType insertionType\\n    ) internal {\\n        uint64 batchLen = getBatchLen(self);\\n        self.batch[batchLen] = update;\\n\\n        self.bitmap |= insertionType == InsertionType.Note\\n            ? uint64(1) << (63 - batchLen)\\n            : uint64(0);\\n\\n        uint64 newBatchLen = batchLen + 1;\\n        _setBatchLen(self, newBatchLen);\\n\\n        if (newBatchLen == TreeUtils.BATCH_SIZE) {\\n            _accumulateAndResetBatchLen(self);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/OperationUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.17;\\nimport {Groth16} from \\\"../libs/Groth16.sol\\\";\\nimport {Utils} from \\\"../libs/Utils.sol\\\";\\nimport \\\"../libs/Types.sol\\\";\\n\\n// Helpers for extracting data / formatting operations\\nlibrary OperationUtils {\\n    function extractJoinSplitProofsAndPis(\\n        Operation[] calldata ops,\\n        uint256[] memory digests\\n    )\\n        internal\\n        pure\\n        returns (uint256[8][] memory proofs, uint256[][] memory allPis)\\n    {\\n        // compute number of joinsplits in the bundle\\n        uint256 totalNumJoinSplits = 0;\\n        uint256 numOps = ops.length;\\n        for (uint256 i = 0; i < numOps; i++) {\\n            totalNumJoinSplits += (ops[i].pubJoinSplits.length +\\n                ops[i].confJoinSplits.length);\\n        }\\n\\n        proofs = new uint256[8][](totalNumJoinSplits);\\n        allPis = new uint256[][](totalNumJoinSplits);\\n\\n        // current index into proofs and pis\\n        uint256 totalIndex = 0;\\n\\n        // Batch verify all the joinsplit proofs\\n        for (uint256 j = 0; j < numOps; j++) {\\n            (\\n                uint256[8][] memory proofsForOp,\\n                uint256[][] memory pisForOp\\n            ) = extractProofsAndPisFromOperation(ops[j], digests[j]);\\n\\n            for (uint256 i = 0; i < proofsForOp.length; i++) {\\n                proofs[totalIndex] = proofsForOp[i];\\n                allPis[totalIndex] = pisForOp[i];\\n                totalIndex++;\\n            }\\n        }\\n\\n        return (proofs, allPis);\\n    }\\n\\n    function extractProofsAndPisFromOperation(\\n        Operation calldata op,\\n        uint256 opDigest\\n    )\\n        internal\\n        pure\\n        returns (uint256[8][] memory proofs, uint256[][] memory allPis)\\n    {\\n        uint256 numJoinSplitsForOp = OperationLib.totalNumJoinSplits(op);\\n        proofs = new uint256[8][](numJoinSplitsForOp);\\n        allPis = new uint256[][](numJoinSplitsForOp);\\n\\n        (uint256 refundAddrH1SignBit, uint256 refundAddrH1YCoordinate) = Utils\\n            .decomposeCompressedPoint(op.refundAddr.h1);\\n        (uint256 refundAddrH2SignBit, uint256 refundAddrH2YCoordinate) = Utils\\n            .decomposeCompressedPoint(op.refundAddr.h2);\\n\\n        for (uint256 i = 0; i < numJoinSplitsForOp; i++) {\\n            bool isPublicJoinSplit = i < op.pubJoinSplits.length;\\n            JoinSplit calldata joinSplit = isPublicJoinSplit\\n                ? op.pubJoinSplits[i].joinSplit\\n                : op.confJoinSplits[i - op.pubJoinSplits.length];\\n            EncodedAsset memory encodedAsset = isPublicJoinSplit\\n                ? op.trackedAssets[op.pubJoinSplits[i].assetIndex].encodedAsset\\n                : EncodedAsset(0, 0);\\n            uint256 publicSpend = isPublicJoinSplit\\n                ? op.pubJoinSplits[i].publicSpend\\n                : 0;\\n\\n            uint256 encodedAssetAddrWithSignBits = encodeEncodedAssetAddrWithSignBitsPI(\\n                    encodedAsset.encodedAssetAddr,\\n                    refundAddrH1SignBit,\\n                    refundAddrH2SignBit\\n                );\\n\\n            proofs[i] = joinSplit.proof;\\n            allPis[i] = new uint256[](13);\\n            allPis[i][0] = joinSplit.newNoteACommitment;\\n            allPis[i][1] = joinSplit.newNoteBCommitment;\\n            allPis[i][2] = joinSplit.commitmentTreeRoot;\\n            allPis[i][3] = publicSpend;\\n            allPis[i][4] = joinSplit.nullifierA;\\n            allPis[i][5] = joinSplit.nullifierB;\\n            allPis[i][6] = joinSplit.senderCommitment;\\n            allPis[i][7] = joinSplit.joinSplitInfoCommitment;\\n            allPis[i][8] = opDigest;\\n            allPis[i][9] = encodedAsset.encodedAssetId;\\n            allPis[i][10] = encodedAssetAddrWithSignBits;\\n            allPis[i][11] = refundAddrH1YCoordinate;\\n            allPis[i][12] = refundAddrH2YCoordinate;\\n        }\\n    }\\n\\n    function encodeEncodedAssetAddrWithSignBitsPI(\\n        uint256 encodedAssetAddr,\\n        uint256 h1SignBit,\\n        uint256 h2SignBit\\n    ) internal pure returns (uint256) {\\n        return encodedAssetAddr | (h1SignBit << 248) | (h2SignBit << 249);\\n    }\\n\\n    function calculateBundlerGasAssetPayout(\\n        Operation calldata op,\\n        OperationResult memory opResult\\n    ) internal pure returns (uint256) {\\n        uint256 handleJoinSplitGas = OperationLib.totalNumJoinSplits(op) *\\n            GAS_PER_JOINSPLIT_HANDLE;\\n        uint256 refundGas = opResult.numRefunds *\\n            (GAS_PER_INSERTION_ENQUEUE + GAS_PER_INSERTION_SUBTREE_UPDATE);\\n\\n        return\\n            op.gasPrice *\\n            (opResult.verificationGas +\\n                handleJoinSplitGas +\\n                opResult.executionGas +\\n                refundGas +\\n                GAS_PER_OPERATION_MISC);\\n    }\\n\\n    // From https://ethereum.stackexchange.com/questions/83528\\n    // returns empty string if no revert message\\n    function getRevertMsg(\\n        bytes memory reason\\n    ) internal pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (reason.length < 68) {\\n            return \\\"\\\";\\n        }\\n\\n        assembly {\\n            // Slice the sighash.\\n            reason := add(reason, 0x04)\\n        }\\n        return abi.decode(reason, (string)); // All that remains is the revert string\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/Pairing.sol\": {\r\n      \"content\": \"// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\\"Software\\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n//\\n// 2019 OKIMS\\n//      ported to solidity 0.6\\n//      fixed linter warnings\\n//      added requiere error messages\\n//\\n//\\n// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.2;\\n\\nlibrary Pairing {\\n    struct G1Point {\\n        uint256 X;\\n        uint256 Y;\\n    }\\n    // Encoding of field elements is: X[0] * z + X[1]\\n    struct G2Point {\\n        uint256[2] X;\\n        uint256[2] Y;\\n    }\\n\\n    /// @return the generator of G1\\n    function P1() internal pure returns (G1Point memory) {\\n        return G1Point(1, 2);\\n    }\\n\\n    /// @return the generator of G2\\n    function P2() internal pure returns (G2Point memory) {\\n        // Original code point\\n        return\\n            G2Point(\\n                [\\n                    11559732032986387107991004021392285783925812861821192530917403151452391805634,\\n                    10857046999023057135944570762232829481370756359578518086990519993285655852781\\n                ],\\n                [\\n                    4082367875863433681332203403145435568316851327593401208105741076214120093531,\\n                    8495653923123431417604973247489272438418190587263600148770280649306958101930\\n                ]\\n            );\\n\\n        /*\\n        // Changed by Jordi point\\n        return G2Point(\\n            [10857046999023057135944570762232829481370756359578518086990519993285655852781,\\n             11559732032986387107991004021392285783925812861821192530917403151452391805634],\\n            [8495653923123431417604973247489272438418190587263600148770280649306958101930,\\n             4082367875863433681332203403145435568316851327593401208105741076214120093531]\\n        );\\n*/\\n    }\\n\\n    /// @return r the negation of p, i.e. p.addition(p.negate()) should be zero.\\n    function negate(G1Point memory p) internal pure returns (G1Point memory r) {\\n        // The prime q in the base field F_q for G1\\n        uint256 q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n        if (p.X == 0 && p.Y == 0) return G1Point(0, 0);\\n        return G1Point(p.X, q - (p.Y % q));\\n    }\\n\\n    /// @return r the sum of two points of G1\\n    function addition(\\n        G1Point memory p1,\\n        G1Point memory p2\\n    ) internal view returns (G1Point memory r) {\\n        uint256[4] memory input;\\n        input[0] = p1.X;\\n        input[1] = p1.Y;\\n        input[2] = p2.X;\\n        input[3] = p2.Y;\\n        bool success;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n            case 0 {\\n                invalid()\\n            }\\n        }\\n        require(success, \\\"pairing-add-failed\\\");\\n    }\\n\\n    /// @return r the product of a point on G1 and a scalar, i.e.\\n    /// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.\\n    function scalar_mul(\\n        G1Point memory p,\\n        uint256 s\\n    ) internal view returns (G1Point memory r) {\\n        uint256[3] memory input;\\n        input[0] = p.X;\\n        input[1] = p.Y;\\n        input[2] = s;\\n        bool success;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n            case 0 {\\n                invalid()\\n            }\\n        }\\n        require(success, \\\"pairing-mul-failed\\\");\\n    }\\n\\n    /// @return the result of computing the pairing check\\n    /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n    /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should\\n    /// return true.\\n    function pairing(\\n        G1Point[] memory p1,\\n        G2Point[] memory p2\\n    ) internal view returns (bool) {\\n        require(p1.length == p2.length, \\\"pairing-lengths-failed\\\");\\n        uint256 elements = p1.length;\\n        uint256 inputSize = elements * 6;\\n        uint256[] memory input = new uint256[](inputSize);\\n        for (uint256 i = 0; i < elements; i++) {\\n            input[i * 6 + 0] = p1[i].X;\\n            input[i * 6 + 1] = p1[i].Y;\\n            input[i * 6 + 2] = p2[i].X[0];\\n            input[i * 6 + 3] = p2[i].X[1];\\n            input[i * 6 + 4] = p2[i].Y[0];\\n            input[i * 6 + 5] = p2[i].Y[1];\\n        }\\n        uint256[1] memory out;\\n        bool success;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(\\n                sub(gas(), 2000),\\n                8,\\n                add(input, 0x20),\\n                mul(inputSize, 0x20),\\n                out,\\n                0x20\\n            )\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n            case 0 {\\n                invalid()\\n            }\\n        }\\n        require(success, \\\"pairing-opcode-failed\\\");\\n        return out[0] != 0;\\n    }\\n\\n    /// Convenience method for a pairing check for two pairs.\\n    function pairingProd2(\\n        G1Point memory a1,\\n        G2Point memory a2,\\n        G1Point memory b1,\\n        G2Point memory b2\\n    ) internal view returns (bool) {\\n        G1Point[] memory p1 = new G1Point[](2);\\n        G2Point[] memory p2 = new G2Point[](2);\\n        p1[0] = a1;\\n        p1[1] = b1;\\n        p2[0] = a2;\\n        p2[1] = b2;\\n        return pairing(p1, p2);\\n    }\\n\\n    /// Convenience method for a pairing check for three pairs.\\n    function pairingProd3(\\n        G1Point memory a1,\\n        G2Point memory a2,\\n        G1Point memory b1,\\n        G2Point memory b2,\\n        G1Point memory c1,\\n        G2Point memory c2\\n    ) internal view returns (bool) {\\n        G1Point[] memory p1 = new G1Point[](3);\\n        G2Point[] memory p2 = new G2Point[](3);\\n        p1[0] = a1;\\n        p1[1] = b1;\\n        p1[2] = c1;\\n        p2[0] = a2;\\n        p2[1] = b2;\\n        p2[2] = c2;\\n        return pairing(p1, p2);\\n    }\\n\\n    /// Convenience method for a pairing check for four pairs.\\n    function pairingProd4(\\n        G1Point memory a1,\\n        G2Point memory a2,\\n        G1Point memory b1,\\n        G2Point memory b2,\\n        G1Point memory c1,\\n        G2Point memory c2,\\n        G1Point memory d1,\\n        G2Point memory d2\\n    ) internal view returns (bool) {\\n        G1Point[] memory p1 = new G1Point[](4);\\n        G2Point[] memory p2 = new G2Point[](4);\\n        p1[0] = a1;\\n        p1[1] = b1;\\n        p1[2] = c1;\\n        p1[3] = d1;\\n        p2[0] = a2;\\n        p2[1] = b2;\\n        p2[2] = c2;\\n        p2[3] = d2;\\n        return pairing(p1, p2);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/Queue.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.17;\\n\\n// Derived from: https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Queue.sol\\nlibrary QueueLib {\\n    /**\\n     * @notice Queue struct\\n     * @dev Internally keeps track of the `first` and `last` elements through\\n     * indices and a mapping of indices to enqueued elements.\\n     **/\\n    struct Queue {\\n        uint128 first;\\n        uint128 last;\\n        mapping(uint256 => uint256) queue;\\n    }\\n\\n    /**\\n     * @notice Initializes the queue\\n     * @dev Empty state denoted by self.first > q.last. Queue initialized\\n     * with self.first = 1 and self.last = 0.\\n     **/\\n    function initialize(Queue storage self) internal {\\n        if (self.first == 0) {\\n            self.first = 1;\\n        }\\n    }\\n\\n    /**\\n     * @notice Enqueues a single new element\\n     * @param item New element to be enqueued\\n     * @return last Index of newly enqueued element\\n     **/\\n    function enqueue(\\n        Queue storage self,\\n        uint256 item\\n    ) internal returns (uint128 last) {\\n        last = self.last + 1;\\n        self.last = last;\\n        if (item != uint256(0)) {\\n            // saves gas if we're queueing 0\\n            self.queue[last] = item;\\n        }\\n    }\\n\\n    /**\\n     * @notice Dequeues element at front of queue\\n     * @dev Removes dequeued element from storage\\n     * @return item Dequeued element\\n     **/\\n    function dequeue(Queue storage self) internal returns (uint256 item) {\\n        uint128 last = self.last;\\n        uint128 first = self.first;\\n        require(_length(last, first) != 0, \\\"Empty\\\");\\n        item = self.queue[first];\\n        if (item != uint256(0)) {\\n            // saves gas if we're dequeuing 0\\n            delete self.queue[first];\\n        }\\n        self.first = first + 1;\\n    }\\n\\n    /**\\n     * @notice Batch enqueues several elements\\n     * @param items Array of elements to be enqueued\\n     * @return last Index of last enqueued element\\n     **/\\n    function enqueue(\\n        Queue storage self,\\n        uint256[] memory items\\n    ) internal returns (uint128 last) {\\n        last = self.last;\\n        uint256 numItems = items.length;\\n        for (uint256 i = 0; i < numItems; i += 1) {\\n            last += 1;\\n            uint256 item = items[i];\\n            if (item != uint256(0)) {\\n                self.queue[last] = item;\\n            }\\n        }\\n        self.last = last;\\n    }\\n\\n    /**\\n     * @notice Batch dequeues `_number` elements\\n     * @dev Reverts if `_number` > queue length\\n     * @param _number Number of elements to dequeue\\n     * @return Array of dequeued elements\\n     **/\\n    function dequeue(\\n        Queue storage _q,\\n        uint256 _number\\n    ) internal returns (uint256[] memory) {\\n        uint128 _last = _q.last;\\n        uint128 _first = _q.first;\\n        // Cannot underflow unless state is corrupted\\n        require(_length(_last, _first) >= _number, \\\"Insufficient\\\");\\n\\n        uint256[] memory _items = new uint256[](_number);\\n\\n        for (uint256 i = 0; i < _number; i++) {\\n            _items[i] = _q.queue[_first];\\n            delete _q.queue[_first];\\n            _first++;\\n        }\\n        _q.first = _first;\\n        return _items;\\n    }\\n\\n    /**\\n     * @notice Returns true if `item` is in the queue and false if otherwise\\n     * @dev Linearly scans from self.first to self.last looking for `item`\\n     * @param item Item being searched for in queue\\n     * @return True if `item` currently exists in queue, false if otherwise\\n     **/\\n    function contains(\\n        Queue storage self,\\n        uint256 item\\n    ) internal view returns (bool) {\\n        uint256 last = self.last;\\n        for (uint256 i = self.first; i <= last; i++) {\\n            if (self.queue[i] == item) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Returns last item in queue\\n    /// @dev Returns uint256(0) if queue empty\\n    function lastItem(Queue storage self) internal view returns (uint256) {\\n        return self.queue[self.last];\\n    }\\n\\n    /// @notice Returns element at front of queue without removing element\\n    /// @dev Reverts if queue is empty\\n    function peek(Queue storage self) internal view returns (uint256 item) {\\n        require(!isEmpty(self), \\\"Queue is empty\\\");\\n        item = self.queue[self.first];\\n    }\\n\\n    /// @notice Returns true if queue is empty and false if otherwise\\n    function isEmpty(Queue storage self) internal view returns (bool) {\\n        return self.last < self.first;\\n    }\\n\\n    /// @notice Returns number of elements in queue\\n    function length(Queue storage self) internal view returns (uint256) {\\n        uint128 last = self.last;\\n        uint128 first = self.first;\\n        // Cannot underflow unless state is corrupted\\n        return _length(last, first);\\n    }\\n\\n    /// @notice Returns number of elements between `last` and `first` (used internally)\\n    function _length(\\n        uint128 last,\\n        uint128 first\\n    ) internal pure returns (uint256) {\\n        return uint256(last + 1 - first);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/TreeUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.17;\\nimport {ITeller} from \\\"../interfaces/ITeller.sol\\\";\\nimport \\\"./Types.sol\\\";\\n\\n// helpers for converting to/from field elems, uint256s, and/or bytes, and hashing them\\nlibrary TreeUtils {\\n    uint256 public constant DEPTH = 16;\\n    uint256 public constant BATCH_SIZE = 16;\\n    uint256 public constant BATCH_SUBTREE_DEPTH = 2;\\n\\n    // uint256(keccak256(\\\"nocturne\\\")) % BN254_SCALAR_FIELD_MODULUS\\n    uint256 public constant ZERO_VALUE =\\n        11826002903343228749062904299844230482823860030613873531382924534593825466831;\\n    uint256 public constant EMPTY_TREE_ROOT =\\n        14425423529089750832921210739722026857026797579827942712639385657619324990872;\\n\\n    // packs a field element for the `encodedPathAndHash` input to the subtree update verifier\\n    // `subtreeIdx` is the index of the subtree's leftmost element in the tree\\n    // `accumulatorHashHi` is the top 3 bits of `accumulatorHash` gotten from `uint256ToFieldElemLimbs`\\n    function encodePathAndHash(\\n        uint128 subtreeIdx,\\n        uint256 accumulatorHashHi\\n    ) internal pure returns (uint256) {\\n        require(\\n            subtreeIdx % BATCH_SIZE == 0,\\n            \\\"subtreeIdx not multiple of BATCH_SIZE\\\"\\n        );\\n\\n        // we shift by 2 * depth because the tree is quaternary\\n        uint256 encodedPathAndHash = uint256(subtreeIdx) >>\\n            (2 * BATCH_SUBTREE_DEPTH);\\n        encodedPathAndHash |=\\n            accumulatorHashHi <<\\n            (2 * (DEPTH - BATCH_SUBTREE_DEPTH));\\n\\n        return encodedPathAndHash;\\n    }\\n\\n    // hash array of uint256s as big-endian bytes with sha256\\n    function sha256U256ArrayBE(\\n        uint256[] memory elems\\n    ) internal pure returns (bytes32) {\\n        return sha256(abi.encodePacked(elems));\\n    }\\n\\n    function sha256Note(\\n        EncodedNote memory note\\n    ) internal pure returns (uint256) {\\n        uint256[] memory elems = new uint256[](6);\\n        elems[0] = note.ownerH1;\\n        elems[1] = note.ownerH2;\\n        elems[2] = note.nonce;\\n        elems[3] = note.encodedAssetAddr;\\n        elems[4] = note.encodedAssetId;\\n        elems[5] = note.value;\\n        return uint256(sha256U256ArrayBE(elems));\\n    }\\n\\n    // return uint256 as two limbs - one uint256 containing the 3 hi bits, the\\n    // other containing the lower 253 bits\\n    function uint256ToFieldElemLimbs(\\n        uint256 n\\n    ) internal pure returns (uint256, uint256) {\\n        return _splitUint256ToLimbs(n, 253);\\n    }\\n\\n    // split a uint256 into 2 limbs, one containing the high (256 - lowerBits)\\n    // bits, the other containing the lower `lowerBits` bits\\n    function _splitUint256ToLimbs(\\n        uint256 n,\\n        uint256 lowerBits\\n    ) internal pure returns (uint256, uint256) {\\n        uint256 hi = n >> lowerBits;\\n        uint256 lo = n & ((1 << lowerBits) - 1);\\n        return (hi, lo);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/Types.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.17;\\n\\nuint256 constant GAS_PER_JOINSPLIT_HANDLE = 110_000; // two 20k SSTOREs from NF insertions, ~70k for merkle tree checks + NF mapping checks + processing joinsplits not including tree insertions\\nuint256 constant GAS_PER_INSERTION_SUBTREE_UPDATE = 25_000; // Full 16 leaf non-zero subtree update = 320k / 16 = 20k per insertion (+5k buffer)\\nuint256 constant GAS_PER_INSERTION_ENQUEUE = 25_000; // 20k for enqueueing note commitment not including subtree update cost (+5k buffer)\\nuint256 constant GAS_PER_OPERATION_MISC = 100_000; // remaining gas cost for operation including  miscellaneous costs such as sending gas tokens to bundler, requesting assets from teller, sending tokens back for refunds, calldata, event, etc.\\n\\nuint256 constant ERC20_ID = 0;\\n\\nenum AssetType {\\n    ERC20,\\n    ERC721,\\n    ERC1155\\n}\\n\\nstruct EncodedAsset {\\n    uint256 encodedAssetAddr;\\n    uint256 encodedAssetId;\\n}\\n\\nstruct CompressedStealthAddress {\\n    uint256 h1;\\n    uint256 h2;\\n}\\n\\nstruct EncryptedNote {\\n    bytes ciphertextBytes;\\n    bytes encapsulatedSecretBytes;\\n}\\n\\nstruct PublicJoinSplit {\\n    JoinSplit joinSplit;\\n    uint8 assetIndex; // Index in op.joinSplitAssets\\n    uint256 publicSpend;\\n}\\n\\nstruct JoinSplit {\\n    uint256 commitmentTreeRoot;\\n    uint256 nullifierA;\\n    uint256 nullifierB;\\n    uint256 newNoteACommitment;\\n    uint256 newNoteBCommitment;\\n    uint256 senderCommitment;\\n    uint256 joinSplitInfoCommitment;\\n    uint256[8] proof;\\n    EncryptedNote newNoteAEncrypted;\\n    EncryptedNote newNoteBEncrypted;\\n}\\n\\nstruct JoinSplitInfo {\\n    uint256 compressedSenderCanonAddr;\\n    uint256 compressedReceiverCanonAddr;\\n    uint256 oldMerkleIndicesWithSignBits;\\n    uint256 newNoteValueA;\\n    uint256 newNoteValueB;\\n    uint256 nonce;\\n}\\n\\nstruct EncodedNote {\\n    uint256 ownerH1;\\n    uint256 ownerH2;\\n    uint256 nonce;\\n    uint256 encodedAssetAddr;\\n    uint256 encodedAssetId;\\n    uint256 value;\\n}\\n\\nstruct DepositRequest {\\n    address spender;\\n    EncodedAsset encodedAsset;\\n    uint256 value;\\n    CompressedStealthAddress depositAddr;\\n    uint256 nonce;\\n    uint256 gasCompensation;\\n}\\n\\nstruct Deposit {\\n    address spender;\\n    EncodedAsset encodedAsset;\\n    uint256 value;\\n    CompressedStealthAddress depositAddr;\\n}\\n\\nstruct Action {\\n    address contractAddress;\\n    bytes encodedFunction;\\n}\\n\\nstruct TrackedAsset {\\n    EncodedAsset encodedAsset;\\n    uint256 minRefundValue;\\n}\\n\\nstruct Operation {\\n    PublicJoinSplit[] pubJoinSplits;\\n    JoinSplit[] confJoinSplits;\\n    CompressedStealthAddress refundAddr;\\n    TrackedAsset[] trackedAssets;\\n    Action[] actions;\\n    EncodedAsset encodedGasAsset;\\n    uint256 gasAssetRefundThreshold;\\n    uint256 executionGasLimit;\\n    uint256 gasPrice;\\n    uint256 deadline;\\n    bool atomicActions;\\n}\\n\\n// An operation is processed if its joinsplitTxs are processed.\\n// If an operation is processed, the following is guaranteeed to happen:\\n// 1. Encoded calls are attempted (not necessarily successfully)\\n// 2. The bundler is compensated verification and execution gas\\n// Bundlers should only be submitting operations that can be processed.\\nstruct OperationResult {\\n    bool opProcessed;\\n    bool assetsUnwrapped;\\n    string failureReason;\\n    bool[] callSuccesses;\\n    bytes[] callResults;\\n    uint256 verificationGas;\\n    uint256 executionGas;\\n    uint256 numRefunds;\\n    uint128 preOpMerkleCount;\\n    uint128 postOpMerkleCount;\\n}\\n\\nstruct Bundle {\\n    Operation[] operations;\\n}\\n\\nstruct CanonAddrRegistryEntry {\\n    address ethAddress;\\n    uint256 compressedCanonAddr;\\n    uint256 perCanonAddrNonce;\\n}\\n\\nlibrary OperationLib {\\n    function maxGasLimit(\\n        Operation calldata self,\\n        uint256 perJoinSplitVerifyGas\\n    ) internal pure returns (uint256) {\\n        uint256 numJoinSplits = totalNumJoinSplits(self);\\n        return\\n            self.executionGasLimit +\\n            ((perJoinSplitVerifyGas + GAS_PER_JOINSPLIT_HANDLE) *\\n                numJoinSplits) +\\n            ((GAS_PER_INSERTION_SUBTREE_UPDATE + GAS_PER_INSERTION_ENQUEUE) *\\n                (self.trackedAssets.length + (numJoinSplits * 2))) + // NOTE: assume refund for every asset\\n            GAS_PER_OPERATION_MISC;\\n    }\\n\\n    function maxGasAssetCost(\\n        Operation calldata self,\\n        uint256 perJoinSplitVerifyGas\\n    ) internal pure returns (uint256) {\\n        return self.gasPrice * maxGasLimit(self, perJoinSplitVerifyGas);\\n    }\\n\\n    function totalNumJoinSplits(\\n        Operation calldata self\\n    ) internal pure returns (uint256) {\\n        return self.pubJoinSplits.length + self.confJoinSplits.length;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/Utils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.17;\\nimport {ITeller} from \\\"../interfaces/ITeller.sol\\\";\\nimport {Groth16} from \\\"../libs/Groth16.sol\\\";\\nimport {Pairing} from \\\"../libs/Pairing.sol\\\";\\nimport \\\"../libs/Types.sol\\\";\\n\\n// helpers for converting to/from field elems, uint256s, and/or bytes, and hashing them\\nlibrary Utils {\\n    uint256 public constant BN254_SCALAR_FIELD_MODULUS =\\n        21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n    uint256 constant COMPRESSED_POINT_SIGN_MASK = 1 << 254;\\n\\n    // takes a compressed point and extracts the sign bit and y coordinate\\n    // returns (sign, y)\\n    function decomposeCompressedPoint(\\n        uint256 compressedPoint\\n    ) internal pure returns (uint256 sign, uint256 y) {\\n        sign = (compressedPoint & COMPRESSED_POINT_SIGN_MASK) >> 254;\\n        y = compressedPoint & (COMPRESSED_POINT_SIGN_MASK - 1);\\n        return (sign, y);\\n    }\\n\\n    // return the minimum of the two values\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a >= b) ? b : a;\\n    }\\n\\n    function sum(uint256[] calldata arr) internal pure returns (uint256) {\\n        uint256 total = 0;\\n        uint256 arrLength = arr.length;\\n        for (uint256 i = 0; i < arrLength; i++) {\\n            total += arr[i];\\n        }\\n        return total;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/Validation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Types.sol\\\";\\nimport \\\"./Utils.sol\\\";\\nimport {AssetUtils} from \\\"./AssetUtils.sol\\\";\\n\\nlibrary Validation {\\n    uint256 constant MAX_NOTE_VALUE = (1 << 252) - 1; // value must fit in 252 bits\\n    uint256 constant ENCODED_ASSET_ADDR_MASK = ((1 << 163) - 1) | (7 << 249);\\n    uint256 constant MAX_ASSET_ID = (1 << 253) - 1;\\n\\n    uint256 constant CURVE_A = 168700;\\n    uint256 constant CURVE_D = 168696;\\n    uint256 constant COMPRESSED_POINT_Y_MASK = ~uint256(1 << 254);\\n\\n    function validateOperation(Operation calldata op) internal view {\\n        uint256 numPubJoinSplits = op.pubJoinSplits.length;\\n        require(numPubJoinSplits + op.confJoinSplits.length > 0, \\\"!JoinSplits\\\");\\n\\n        // Ensure public spend > 0 for public joinsplit. Ensures handler only deals\\n        // with assets that are actually unwrappable. If asset has > 0 public spend, then\\n        // circuit guarantees that note with the _revealed_ asset is included in the tree is\\n        // unwrappable. If asset has public spend = 0, circuit guarantees that the note with the\\n        // _masked_ asset is included in the tree and unwrappable, but the revealed asset for public\\n        // spend = 0 is (0,0) and is not unwrappable.\\n        for (uint256 i = 0; i < numPubJoinSplits; i++) {\\n            require(op.pubJoinSplits[i].publicSpend > 0, \\\"0 public spend\\\");\\n        }\\n\\n        // Ensure timestamp for op has not already expired\\n        require(block.timestamp <= op.deadline, \\\"expired deadline\\\");\\n\\n        // Ensure gas asset is erc20 to ensure transfers to bundler retain control flow (no\\n        // callbacks/receiver hooks)\\n        (AssetType assetType, , ) = AssetUtils.decodeAsset(op.encodedGasAsset);\\n        require(assetType == AssetType.ERC20, \\\"!gas erc20\\\");\\n    }\\n\\n    // Ensure note fields are also valid as circuit inputs\\n    function validateNote(EncodedNote memory note) internal pure {\\n        require(\\n            // nonce is a valid field element\\n            note.nonce < Utils.BN254_SCALAR_FIELD_MODULUS &&\\n                // encodedAssetAddr is a valid field element\\n                note.encodedAssetAddr < Utils.BN254_SCALAR_FIELD_MODULUS &&\\n                // encodedAssetAddr doesn't have any bits set outside bits 0-162 and 250-252\\n                note.encodedAssetAddr & (~ENCODED_ASSET_ADDR_MASK) == 0 &&\\n                // encodedAssetId is a 253 bit number (and therefore a valid field element)\\n                note.encodedAssetId <= MAX_ASSET_ID &&\\n                // value is < the 2^252 limit (and therefore a valid field element)\\n                note.value <= MAX_NOTE_VALUE,\\n            \\\"invalid note\\\"\\n        );\\n\\n        validateCompressedBJJPoint(note.ownerH1);\\n        validateCompressedBJJPoint(note.ownerH2);\\n    }\\n\\n    function validateCompressedBJJPoint(uint256 p) internal pure {\\n        // Clear X-sign bit. Leaves MSB untouched for the next check.\\n        uint256 y = p & COMPRESSED_POINT_Y_MASK;\\n        // Simultaneously check that the high-bit is unset and Y is a canonical field element\\n        // this works because y >= Utils.BN254_SCALAR_FIELD_MODULUS if high bit is set or y is not a valid field element\\n        require(y < Utils.BN254_SCALAR_FIELD_MODULUS, \\\"invalid point\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/NocturneReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.17;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/// @title NocturneReentrancyGuard\\n/// @author Nocturne Labs\\n/// @notice Custom reentrancy guard that track stages of operation processing/execution.\\n/// @dev Modified from OpenZeppelin ReentrancyGuard.sol\\ncontract NocturneReentrancyGuard is Initializable {\\n    // No operation entered (before Teller calls handler.handleOperation)\\n    uint256 public constant NOT_ENTERED = 1;\\n    // Once an operation is entered for processing (after Teller calls handler.handleOperation)\\n    uint256 public constant ENTERED_HANDLE_OPERATION = 2;\\n    // Once an operation is entered for execution (after Teller calls handler.executeActions)\\n    uint256 public constant ENTERED_EXECUTE_ACTIONS = 3;\\n\\n    // Operation stage\\n    uint256 private _operationStage;\\n\\n    // Gap for upgrade safety\\n    uint256[50] private __GAP;\\n\\n    /// @notice Internal initializer\\n    function __NocturneReentrancyGuard_init() internal onlyInitializing {\\n        _operationStage = NOT_ENTERED;\\n    }\\n\\n    /// @notice Requires current stage to be NOT_ENTERED.\\n    /// @dev Moves stage to ENTERED_HANDLE_OPERATION before function execution, then resets stage\\n    ///      to NOT_ENTERED at end of call context.\\n    modifier handleOperationGuard() {\\n        require(_operationStage == NOT_ENTERED, \\\"Reentry into handleOperation\\\");\\n        _operationStage = ENTERED_HANDLE_OPERATION;\\n\\n        _;\\n\\n        _operationStage = NOT_ENTERED;\\n    }\\n\\n    /// @notice Requires current stage to be ENTERED_HANDLE_OPERATION.\\n    /// @dev Moves stage to ENTERED_EXECUTE_ACTIONS before function execution, then resets stage to\\n    ///      ENTERED_HANDLE_OPERATION at end of call context.\\n    modifier executeActionsGuard() {\\n        require(\\n            _operationStage == ENTERED_HANDLE_OPERATION,\\n            \\\"Reentry into executeActions\\\"\\n        );\\n        _operationStage = ENTERED_EXECUTE_ACTIONS;\\n\\n        _;\\n\\n        _operationStage = ENTERED_HANDLE_OPERATION;\\n    }\\n\\n    /// @notice Returns current operation stage\\n    function reentrancyGuardStage() public view returns (uint256) {\\n        return _operationStage;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 500\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"permission\",\"type\":\"bool\"}],\"name\":\"ContractMethodPermissionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"permission\",\"type\":\"bool\"}],\"name\":\"ContractPermissionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numZeros\",\"type\":\"uint256\"}],\"name\":\"FilledBatchWithZeros\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldNoteANullifier\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldNoteBNullifier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"newNoteAIndex\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"newNoteBIndex\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNoteACommitment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNoteBCommitment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"senderCommitment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"joinSplitInfoCommitment\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"ciphertextBytes\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encapsulatedSecretBytes\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct EncryptedNote\",\"name\":\"newNoteAEncrypted\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"ciphertextBytes\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encapsulatedSecretBytes\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct EncryptedNote\",\"name\":\"newNoteBEncrypted\",\"type\":\"tuple\"}],\"name\":\"JoinSplitProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"h2\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct CompressedStealthAddress\",\"name\":\"refundAddr\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"encodedAssetAddr\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"encodedAssetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"merkleIndex\",\"type\":\"uint128\"}],\"name\":\"RefundProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"filler\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"permission\",\"type\":\"bool\"}],\"name\":\"SubtreeBatchFillerPermissionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRoot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subtreeBatchOffset\",\"type\":\"uint256\"}],\"name\":\"SubtreeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ENTERED_EXECUTE_ACTIONS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENTERED_HANDLE_OPERATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC20_APPROVE_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC_20_APPROVE_FN_DATA_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NOT_ENTERED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_leftoverTokensHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_nullifierSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_pastRoots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_subtreeBatchFillers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"name\":\"_supportedContractMethods\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_supportedContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_teller\",\"outputs\":[{\"internalType\":\"contract ITeller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint256[8]\",\"name\":\"proof\",\"type\":\"uint256[8]\"}],\"name\":\"applySubtreeUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"commitmentTreeRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifierA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifierB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newNoteACommitment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newNoteBCommitment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"senderCommitment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"joinSplitInfoCommitment\",\"type\":\"uint256\"},{\"internalType\":\"uint256[8]\",\"name\":\"proof\",\"type\":\"uint256[8]\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"ciphertextBytes\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encapsulatedSecretBytes\",\"type\":\"bytes\"}],\"internalType\":\"struct EncryptedNote\",\"name\":\"newNoteAEncrypted\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"ciphertextBytes\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encapsulatedSecretBytes\",\"type\":\"bytes\"}],\"internalType\":\"struct EncryptedNote\",\"name\":\"newNoteBEncrypted\",\"type\":\"tuple\"}],\"internalType\":\"struct JoinSplit\",\"name\":\"joinSplit\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"assetIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"publicSpend\",\"type\":\"uint256\"}],\"internalType\":\"struct PublicJoinSplit[]\",\"name\":\"pubJoinSplits\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"commitmentTreeRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifierA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifierB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newNoteACommitment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newNoteBCommitment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"senderCommitment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"joinSplitInfoCommitment\",\"type\":\"uint256\"},{\"internalType\":\"uint256[8]\",\"name\":\"proof\",\"type\":\"uint256[8]\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"ciphertextBytes\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encapsulatedSecretBytes\",\"type\":\"bytes\"}],\"internalType\":\"struct EncryptedNote\",\"name\":\"newNoteAEncrypted\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"ciphertextBytes\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encapsulatedSecretBytes\",\"type\":\"bytes\"}],\"internalType\":\"struct EncryptedNote\",\"name\":\"newNoteBEncrypted\",\"type\":\"tuple\"}],\"internalType\":\"struct JoinSplit[]\",\"name\":\"confJoinSplits\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"h2\",\"type\":\"uint256\"}],\"internalType\":\"struct CompressedStealthAddress\",\"name\":\"refundAddr\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"encodedAssetAddr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"encodedAssetId\",\"type\":\"uint256\"}],\"internalType\":\"struct EncodedAsset\",\"name\":\"encodedAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"minRefundValue\",\"type\":\"uint256\"}],\"internalType\":\"struct TrackedAsset[]\",\"name\":\"trackedAssets\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"encodedFunction\",\"type\":\"bytes\"}],\"internalType\":\"struct Action[]\",\"name\":\"actions\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"encodedAssetAddr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"encodedAssetId\",\"type\":\"uint256\"}],\"internalType\":\"struct EncodedAsset\",\"name\":\"encodedGasAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"gasAssetRefundThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"atomicActions\",\"type\":\"bool\"}],\"internalType\":\"struct Operation\",\"name\":\"op\",\"type\":\"tuple\"}],\"name\":\"executeActions\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"successes\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"numRefundsToHandle\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fillBatchWithZeros\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"encodedAssetAddr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"encodedAssetId\",\"type\":\"uint256\"}],\"internalType\":\"struct EncodedAsset\",\"name\":\"encodedAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"h2\",\"type\":\"uint256\"}],\"internalType\":\"struct CompressedStealthAddress\",\"name\":\"depositAddr\",\"type\":\"tuple\"}],\"internalType\":\"struct Deposit\",\"name\":\"deposit\",\"type\":\"tuple\"}],\"name\":\"handleDeposit\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"merkleIndex\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"commitmentTreeRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifierA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifierB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newNoteACommitment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newNoteBCommitment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"senderCommitment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"joinSplitInfoCommitment\",\"type\":\"uint256\"},{\"internalType\":\"uint256[8]\",\"name\":\"proof\",\"type\":\"uint256[8]\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"ciphertextBytes\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encapsulatedSecretBytes\",\"type\":\"bytes\"}],\"internalType\":\"struct EncryptedNote\",\"name\":\"newNoteAEncrypted\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"ciphertextBytes\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encapsulatedSecretBytes\",\"type\":\"bytes\"}],\"internalType\":\"struct EncryptedNote\",\"name\":\"newNoteBEncrypted\",\"type\":\"tuple\"}],\"internalType\":\"struct JoinSplit\",\"name\":\"joinSplit\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"assetIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"publicSpend\",\"type\":\"uint256\"}],\"internalType\":\"struct PublicJoinSplit[]\",\"name\":\"pubJoinSplits\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"commitmentTreeRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifierA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifierB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newNoteACommitment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newNoteBCommitment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"senderCommitment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"joinSplitInfoCommitment\",\"type\":\"uint256\"},{\"internalType\":\"uint256[8]\",\"name\":\"proof\",\"type\":\"uint256[8]\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"ciphertextBytes\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encapsulatedSecretBytes\",\"type\":\"bytes\"}],\"internalType\":\"struct EncryptedNote\",\"name\":\"newNoteAEncrypted\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"ciphertextBytes\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encapsulatedSecretBytes\",\"type\":\"bytes\"}],\"internalType\":\"struct EncryptedNote\",\"name\":\"newNoteBEncrypted\",\"type\":\"tuple\"}],\"internalType\":\"struct JoinSplit[]\",\"name\":\"confJoinSplits\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"h1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"h2\",\"type\":\"uint256\"}],\"internalType\":\"struct CompressedStealthAddress\",\"name\":\"refundAddr\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"encodedAssetAddr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"encodedAssetId\",\"type\":\"uint256\"}],\"internalType\":\"struct EncodedAsset\",\"name\":\"encodedAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"minRefundValue\",\"type\":\"uint256\"}],\"internalType\":\"struct TrackedAsset[]\",\"name\":\"trackedAssets\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"encodedFunction\",\"type\":\"bytes\"}],\"internalType\":\"struct Action[]\",\"name\":\"actions\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"encodedAssetAddr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"encodedAssetId\",\"type\":\"uint256\"}],\"internalType\":\"struct EncodedAsset\",\"name\":\"encodedGasAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"gasAssetRefundThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"atomicActions\",\"type\":\"bool\"}],\"internalType\":\"struct Operation\",\"name\":\"op\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"perJoinSplitVerifyGas\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bundler\",\"type\":\"address\"}],\"name\":\"handleOperation\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"opProcessed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"assetsUnwrapped\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"failureReason\",\"type\":\"string\"},{\"internalType\":\"bool[]\",\"name\":\"callSuccesses\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"callResults\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"verificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numRefunds\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"preOpMerkleCount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"postOpMerkleCount\",\"type\":\"uint128\"}],\"internalType\":\"struct OperationResult\",\"name\":\"opResult\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subtreeUpdateVerifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"leftoverTokensHolder\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reentrancyGuardStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"permission\",\"type\":\"bool\"}],\"name\":\"setContractMethodPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"permission\",\"type\":\"bool\"}],\"name\":\"setContractPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"filler\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"permission\",\"type\":\"bool\"}],\"name\":\"setSubtreeBatchFillerPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teller\",\"type\":\"address\"}],\"name\":\"setTeller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCount\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Handler", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "500", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}