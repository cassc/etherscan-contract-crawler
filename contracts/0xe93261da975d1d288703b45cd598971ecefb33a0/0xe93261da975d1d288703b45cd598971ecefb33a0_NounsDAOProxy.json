{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/governance/NounsDAOProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\r\\n\\r\\n/// @title The Nouns DAO proxy contract\\r\\n\\r\\n/*********************************\\r\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 *\\r\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 *\\r\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591 *\\r\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2591 *\\r\\n * \u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2591 *\\r\\n * \u2591\u2591\u2588\u2588\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2591 *\\r\\n * \u2591\u2591\u2588\u2588\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2591 *\\r\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591 *\\r\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 *\\r\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 *\\r\\n *********************************/\\r\\n\\r\\n// LICENSE\\r\\n// NounsDAOProxy.sol is a modified version of Compound Lab's GovernorBravoDelegator.sol:\\r\\n// https://github.com/compound-finance/compound-protocol/blob/b9b14038612d846b83f8a009a82c38974ff2dcfe/contracts/Governance/GovernorBravoDelegator.sol\\r\\n//\\r\\n// GovernorBravoDelegator.sol source code Copyright 2020 Compound Labs, Inc. licensed under the BSD-3-Clause license.\\r\\n// With modifications by Nounders DAO.\\r\\n//\\r\\n// Additional conditions of BSD-3-Clause can be found here: https://opensource.org/licenses/BSD-3-Clause\\r\\n//\\r\\n//\\r\\n// NounsDAOProxy.sol uses parts of Open Zeppelin's Proxy.sol:\\r\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/5c8746f56b4bed8cc9e0e044f5f69ab2f9428ce1/contracts/proxy/Proxy.sol\\r\\n//\\r\\n// Proxy.sol source code licensed under MIT License.\\r\\n//\\r\\n// MODIFICATIONS\\r\\n// The fallback() and receive() functions of Proxy.sol have been used to allow Solidity > 0.6.0 compatibility\\r\\n\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\nimport './NounsDAOInterfaces.sol';\\r\\n\\r\\ncontract NounsDAOProxy is NounsDAOProxyStorage, NounsDAOEvents {\\r\\n    constructor(\\r\\n        address timelock_,\\r\\n        address nouns_,\\r\\n        address vetoer_,\\r\\n        address admin_,\\r\\n        address implementation_,\\r\\n        uint256 votingPeriod_,\\r\\n        uint256 votingDelay_,\\r\\n        uint256 proposalThresholdBPS_,\\r\\n        uint256 quorumVotesBPS_\\r\\n    ) {\\r\\n        // Admin set to msg.sender for initialization\\r\\n        admin = msg.sender;\\r\\n\\r\\n        delegateTo(\\r\\n            implementation_,\\r\\n            abi.encodeWithSignature(\\r\\n                'initialize(address,address,address,uint256,uint256,uint256,uint256)',\\r\\n                timelock_,\\r\\n                nouns_,\\r\\n                vetoer_,\\r\\n                votingPeriod_,\\r\\n                votingDelay_,\\r\\n                proposalThresholdBPS_,\\r\\n                quorumVotesBPS_\\r\\n            )\\r\\n        );\\r\\n\\r\\n        _setImplementation(implementation_);\\r\\n\\r\\n        admin = admin_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Called by the admin to update the implementation of the delegator\\r\\n     * @param implementation_ The address of the new implementation for delegation\\r\\n     */\\r\\n    function _setImplementation(address implementation_) public {\\r\\n        require(msg.sender == admin, 'NounsDAOProxy::_setImplementation: admin only');\\r\\n        require(implementation_ != address(0), 'NounsDAOProxy::_setImplementation: invalid implementation address');\\r\\n\\r\\n        address oldImplementation = implementation;\\r\\n        implementation = implementation_;\\r\\n\\r\\n        emit NewImplementation(oldImplementation, implementation);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal method to delegate execution to another contract\\r\\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\\r\\n     * @param callee The contract to delegatecall\\r\\n     * @param data The raw data to delegatecall\\r\\n     */\\r\\n    function delegateTo(address callee, bytes memory data) internal {\\r\\n        (bool success, bytes memory returnData) = callee.delegatecall(data);\\r\\n        assembly {\\r\\n            if eq(success, 0) {\\r\\n                revert(add(returnData, 0x20), returndatasize())\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Delegates execution to an implementation contract.\\r\\n     * It returns to the external caller whatever the implementation returns\\r\\n     * or forwards reverts.\\r\\n     */\\r\\n    function _fallback() internal {\\r\\n        // delegate all other functions to current implementation\\r\\n        (bool success, ) = implementation.delegatecall(msg.data);\\r\\n\\r\\n        assembly {\\r\\n            let free_mem_ptr := mload(0x40)\\r\\n            returndatacopy(free_mem_ptr, 0, returndatasize())\\r\\n\\r\\n            switch success\\r\\n            case 0 {\\r\\n                revert(free_mem_ptr, returndatasize())\\r\\n            }\\r\\n            default {\\r\\n                return(free_mem_ptr, returndatasize())\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fallback function that delegates calls to the `implementation`. Will run if no other\\r\\n     * function in the contract matches the call data.\\r\\n     */\\r\\n    fallback() external payable {\\r\\n        _fallback();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fallback function that delegates calls to `implementation`. Will run if call data\\r\\n     * is empty.\\r\\n     */\\r\\n    receive() external payable {\\r\\n        _fallback();\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/governance/NounsDAOInterfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\r\\n\\r\\n/// @title Nouns DAO Logic interfaces and events\\r\\n\\r\\n/*********************************\\r\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 *\\r\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 *\\r\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591 *\\r\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2591 *\\r\\n * \u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2591 *\\r\\n * \u2591\u2591\u2588\u2588\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2591 *\\r\\n * \u2591\u2591\u2588\u2588\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2591 *\\r\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591 *\\r\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 *\\r\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 *\\r\\n *********************************/\\r\\n\\r\\n// LICENSE\\r\\n// NounsDAOInterfaces.sol is a modified version of Compound Lab's GovernorBravoInterfaces.sol:\\r\\n// https://github.com/compound-finance/compound-protocol/blob/b9b14038612d846b83f8a009a82c38974ff2dcfe/contracts/Governance/GovernorBravoInterfaces.sol\\r\\n//\\r\\n// GovernorBravoInterfaces.sol source code Copyright 2020 Compound Labs, Inc. licensed under the BSD-3-Clause license.\\r\\n// With modifications by Nounders DAO.\\r\\n//\\r\\n// Additional conditions of BSD-3-Clause can be found here: https://opensource.org/licenses/BSD-3-Clause\\r\\n//\\r\\n// MODIFICATIONS\\r\\n// NounsDAOEvents, NounsDAOProxyStorage, NounsDAOStorageV1 adds support for changes made by Nouns DAO to GovernorBravo.sol\\r\\n// See NounsDAOLogicV1.sol for more details.\\r\\n\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\ncontract NounsDAOEvents {\\r\\n    /// @notice An event emitted when a new proposal is created\\r\\n    event ProposalCreated(\\r\\n        uint256 id,\\r\\n        address proposer,\\r\\n        address[] targets,\\r\\n        uint256[] values,\\r\\n        string[] signatures,\\r\\n        bytes[] calldatas,\\r\\n        uint256 startBlock,\\r\\n        uint256 endBlock,\\r\\n        string description\\r\\n    );\\r\\n\\r\\n    event ProposalCreatedWithRequirements(\\r\\n        uint256 id,\\r\\n        address proposer,\\r\\n        address[] targets,\\r\\n        uint256[] values,\\r\\n        string[] signatures,\\r\\n        bytes[] calldatas,\\r\\n        uint256 startBlock,\\r\\n        uint256 endBlock,\\r\\n        uint256 proposalThreshold,\\r\\n        uint256 quorumVotes,\\r\\n        string description\\r\\n    );\\r\\n\\r\\n    /// @notice An event emitted when a vote has been cast on a proposal\\r\\n    /// @param voter The address which casted a vote\\r\\n    /// @param proposalId The proposal id which was voted on\\r\\n    /// @param support Support value for the vote. 0=against, 1=for, 2=abstain\\r\\n    /// @param votes Number of votes which were cast by the voter\\r\\n    /// @param reason The reason given for the vote by the voter\\r\\n    event VoteCast(address indexed voter, uint256 proposalId, uint8 support, uint256 votes, string reason);\\r\\n\\r\\n    /// @notice An event emitted when a proposal has been canceled\\r\\n    event ProposalCanceled(uint256 id);\\r\\n\\r\\n    /// @notice An event emitted when a proposal has been queued in the NounsDAOExecutor\\r\\n    event ProposalQueued(uint256 id, uint256 eta);\\r\\n\\r\\n    /// @notice An event emitted when a proposal has been executed in the NounsDAOExecutor\\r\\n    event ProposalExecuted(uint256 id);\\r\\n\\r\\n    /// @notice An event emitted when a proposal has been vetoed by vetoAddress\\r\\n    event ProposalVetoed(uint256 id);\\r\\n\\r\\n    /// @notice An event emitted when the voting delay is set\\r\\n    event VotingDelaySet(uint256 oldVotingDelay, uint256 newVotingDelay);\\r\\n\\r\\n    /// @notice An event emitted when the voting period is set\\r\\n    event VotingPeriodSet(uint256 oldVotingPeriod, uint256 newVotingPeriod);\\r\\n\\r\\n    /// @notice Emitted when implementation is changed\\r\\n    event NewImplementation(address oldImplementation, address newImplementation);\\r\\n\\r\\n    /// @notice Emitted when proposal threshold basis points is set\\r\\n    event ProposalThresholdBPSSet(uint256 oldProposalThresholdBPS, uint256 newProposalThresholdBPS);\\r\\n\\r\\n    /// @notice Emitted when quorum votes basis points is set\\r\\n    event QuorumVotesBPSSet(uint256 oldQuorumVotesBPS, uint256 newQuorumVotesBPS);\\r\\n\\r\\n    /// @notice Emitted when pendingAdmin is changed\\r\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\r\\n\\r\\n    /// @notice Emitted when pendingAdmin is accepted, which means admin is updated\\r\\n    event NewAdmin(address oldAdmin, address newAdmin);\\r\\n\\r\\n    /// @notice Emitted when vetoer is changed\\r\\n    event NewVetoer(address oldVetoer, address newVetoer);\\r\\n}\\r\\n\\r\\ncontract NounsDAOProxyStorage {\\r\\n    /// @notice Administrator for this contract\\r\\n    address public admin;\\r\\n\\r\\n    /// @notice Pending administrator for this contract\\r\\n    address public pendingAdmin;\\r\\n\\r\\n    /// @notice Active brains of Governor\\r\\n    address public implementation;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Storage for Governor Bravo Delegate\\r\\n * @notice For future upgrades, do not change NounsDAOStorageV1. Create a new\\r\\n * contract which implements NounsDAOStorageV1 and following the naming convention\\r\\n * NounsDAOStorageVX.\\r\\n */\\r\\ncontract NounsDAOStorageV1 is NounsDAOProxyStorage {\\r\\n    /// @notice Vetoer who has the ability to veto any proposal\\r\\n    address public vetoer;\\r\\n\\r\\n    /// @notice The delay before voting on a proposal may take place, once proposed, in blocks\\r\\n    uint256 public votingDelay;\\r\\n\\r\\n    /// @notice The duration of voting on a proposal, in blocks\\r\\n    uint256 public votingPeriod;\\r\\n\\r\\n    /// @notice The basis point number of votes required in order for a voter to become a proposer. *DIFFERS from GovernerBravo\\r\\n    uint256 public proposalThresholdBPS;\\r\\n\\r\\n    /// @notice The basis point number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed. *DIFFERS from GovernerBravo\\r\\n    uint256 public quorumVotesBPS;\\r\\n\\r\\n    /// @notice The total number of proposals\\r\\n    uint256 public proposalCount;\\r\\n\\r\\n    /// @notice The address of the Nouns DAO Executor NounsDAOExecutor\\r\\n    INounsDAOExecutor public timelock;\\r\\n\\r\\n    /// @notice The address of the Nouns tokens\\r\\n    NounsTokenLike public nouns;\\r\\n\\r\\n    /// @notice The official record of all proposals ever proposed\\r\\n    mapping(uint256 => Proposal) public proposals;\\r\\n\\r\\n    /// @notice The latest proposal for each proposer\\r\\n    mapping(address => uint256) public latestProposalIds;\\r\\n\\r\\n    struct Proposal {\\r\\n        /// @notice Unique id for looking up a proposal\\r\\n        uint256 id;\\r\\n        /// @notice Creator of the proposal\\r\\n        address proposer;\\r\\n        /// @notice The number of votes needed to create a proposal at the time of proposal creation. *DIFFERS from GovernerBravo\\r\\n        uint256 proposalThreshold;\\r\\n        /// @notice The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed at the time of proposal creation. *DIFFERS from GovernerBravo\\r\\n        uint256 quorumVotes;\\r\\n        /// @notice The timestamp that the proposal will be available for execution, set once the vote succeeds\\r\\n        uint256 eta;\\r\\n        /// @notice the ordered list of target addresses for calls to be made\\r\\n        address[] targets;\\r\\n        /// @notice The ordered list of values (i.e. msg.value) to be passed to the calls to be made\\r\\n        uint256[] values;\\r\\n        /// @notice The ordered list of function signatures to be called\\r\\n        string[] signatures;\\r\\n        /// @notice The ordered list of calldata to be passed to each call\\r\\n        bytes[] calldatas;\\r\\n        /// @notice The block at which voting begins: holders must delegate their votes prior to this block\\r\\n        uint256 startBlock;\\r\\n        /// @notice The block at which voting ends: votes must be cast prior to this block\\r\\n        uint256 endBlock;\\r\\n        /// @notice Current number of votes in favor of this proposal\\r\\n        uint256 forVotes;\\r\\n        /// @notice Current number of votes in opposition to this proposal\\r\\n        uint256 againstVotes;\\r\\n        /// @notice Current number of votes for abstaining for this proposal\\r\\n        uint256 abstainVotes;\\r\\n        /// @notice Flag marking whether the proposal has been canceled\\r\\n        bool canceled;\\r\\n        /// @notice Flag marking whether the proposal has been vetoed\\r\\n        bool vetoed;\\r\\n        /// @notice Flag marking whether the proposal has been executed\\r\\n        bool executed;\\r\\n        /// @notice Receipts of ballots for the entire set of voters\\r\\n        mapping(address => Receipt) receipts;\\r\\n    }\\r\\n\\r\\n    /// @notice Ballot receipt record for a voter\\r\\n    struct Receipt {\\r\\n        /// @notice Whether or not a vote has been cast\\r\\n        bool hasVoted;\\r\\n        /// @notice Whether or not the voter supports the proposal or abstains\\r\\n        uint8 support;\\r\\n        /// @notice The number of votes the voter had, which were cast\\r\\n        uint96 votes;\\r\\n    }\\r\\n\\r\\n    /// @notice Possible states that a proposal may be in\\r\\n    enum ProposalState {\\r\\n        Pending,\\r\\n        Active,\\r\\n        Canceled,\\r\\n        Defeated,\\r\\n        Succeeded,\\r\\n        Queued,\\r\\n        Expired,\\r\\n        Executed,\\r\\n        Vetoed\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface INounsDAOExecutor {\\r\\n    function delay() external view returns (uint256);\\r\\n\\r\\n    function GRACE_PERIOD() external view returns (uint256);\\r\\n\\r\\n    function acceptAdmin() external;\\r\\n\\r\\n    function queuedTransactions(bytes32 hash) external view returns (bool);\\r\\n\\r\\n    function queueTransaction(\\r\\n        address target,\\r\\n        uint256 value,\\r\\n        string calldata signature,\\r\\n        bytes calldata data,\\r\\n        uint256 eta\\r\\n    ) external returns (bytes32);\\r\\n\\r\\n    function cancelTransaction(\\r\\n        address target,\\r\\n        uint256 value,\\r\\n        string calldata signature,\\r\\n        bytes calldata data,\\r\\n        uint256 eta\\r\\n    ) external;\\r\\n\\r\\n    function executeTransaction(\\r\\n        address target,\\r\\n        uint256 value,\\r\\n        string calldata signature,\\r\\n        bytes calldata data,\\r\\n        uint256 eta\\r\\n    ) external payable returns (bytes memory);\\r\\n}\\r\\n\\r\\ninterface NounsTokenLike {\\r\\n    function getPriorVotes(address account, uint256 blockNumber) external view returns (uint96);\\r\\n\\r\\n    function totalSupply() external view returns (uint96);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"timelock_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nouns_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vetoer_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPeriod_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingDelay_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposalThresholdBPS_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quorumVotesBPS_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldImplementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"NewImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"NewPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldVetoer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newVetoer\",\"type\":\"address\"}],\"name\":\"NewVetoer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quorumVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalCreatedWithRequirements\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"ProposalQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldProposalThresholdBPS\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProposalThresholdBPS\",\"type\":\"uint256\"}],\"name\":\"ProposalThresholdBPSSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalVetoed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldQuorumVotesBPS\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newQuorumVotesBPS\",\"type\":\"uint256\"}],\"name\":\"QuorumVotesBPSSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldVotingDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotingDelay\",\"type\":\"uint256\"}],\"name\":\"VotingDelaySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldVotingPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotingPeriod\",\"type\":\"uint256\"}],\"name\":\"VotingPeriodSet\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"name\":\"_setImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NounsDAOProxy", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "0000000000000000000000009d2ced71cd9e63861f8dfdf577d8f95d1e837634000000000000000000000000ef5c76cdecbef826299c15d70a43dd450bf538a20000000000000000000000009f34386a1e5a68b04e8567447632cc0b9724a6910000000000000000000000009d2ced71cd9e63861f8dfdf577d8f95d1e837634000000000000000000000000aeb1b039ea477f71c22761ece82e726ddcfe6e820000000000000000000000000000000000000000000000000000000000004380000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000001f400000000000000000000000000000000000000000000000000000000000003e8", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "1", "Implementation": "0xc7188f90f82c03292803ad076a3736a41c62cfe4", "SwarmSource": ""}