{"SourceCode": "// hevm: flattened sources of src/fab.sol\r\npragma solidity ^0.4.18;\r\n\r\n////// lib/ds-guard/lib/ds-auth/src/auth.sol\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.4.13; */\r\n\r\ncontract DSAuthority {\r\n    function canCall(\r\n        address src, address dst, bytes4 sig\r\n    ) public view returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n\r\n    function DSAuth() public {\r\n        owner = msg.sender;\r\n        LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_)\r\n        public\r\n        auth\r\n    {\r\n        owner = owner_;\r\n        LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_)\r\n        public\r\n        auth\r\n    {\r\n        authority = authority_;\r\n        LogSetAuthority(authority);\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, this, sig);\r\n        }\r\n    }\r\n}\r\n\r\n////// lib/ds-guard/src/guard.sol\r\n// guard.sol -- simple whitelist implementation of DSAuthority\r\n\r\n// Copyright (C) 2017  DappHub, LLC\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.4.13; */\r\n\r\n/* import \"ds-auth/auth.sol\"; */\r\n\r\ncontract DSGuardEvents {\r\n    event LogPermit(\r\n        bytes32 indexed src,\r\n        bytes32 indexed dst,\r\n        bytes32 indexed sig\r\n    );\r\n\r\n    event LogForbid(\r\n        bytes32 indexed src,\r\n        bytes32 indexed dst,\r\n        bytes32 indexed sig\r\n    );\r\n}\r\n\r\ncontract DSGuard is DSAuth, DSAuthority, DSGuardEvents {\r\n    bytes32 constant public ANY = bytes32(uint(-1));\r\n\r\n    mapping (bytes32 => mapping (bytes32 => mapping (bytes32 => bool))) acl;\r\n\r\n    function canCall(\r\n        address src_, address dst_, bytes4 sig\r\n    ) public view returns (bool) {\r\n        var src = bytes32(src_);\r\n        var dst = bytes32(dst_);\r\n\r\n        return acl[src][dst][sig]\r\n            || acl[src][dst][ANY]\r\n            || acl[src][ANY][sig]\r\n            || acl[src][ANY][ANY]\r\n            || acl[ANY][dst][sig]\r\n            || acl[ANY][dst][ANY]\r\n            || acl[ANY][ANY][sig]\r\n            || acl[ANY][ANY][ANY];\r\n    }\r\n\r\n    function permit(bytes32 src, bytes32 dst, bytes32 sig) public auth {\r\n        acl[src][dst][sig] = true;\r\n        LogPermit(src, dst, sig);\r\n    }\r\n\r\n    function forbid(bytes32 src, bytes32 dst, bytes32 sig) public auth {\r\n        acl[src][dst][sig] = false;\r\n        LogForbid(src, dst, sig);\r\n    }\r\n\r\n    function permit(address src, address dst, bytes32 sig) public {\r\n        permit(bytes32(src), bytes32(dst), sig);\r\n    }\r\n    function forbid(address src, address dst, bytes32 sig) public {\r\n        forbid(bytes32(src), bytes32(dst), sig);\r\n    }\r\n\r\n}\r\n\r\ncontract DSGuardFactory {\r\n    mapping (address => bool)  public  isGuard;\r\n\r\n    function newGuard() public returns (DSGuard guard) {\r\n        guard = new DSGuard();\r\n        guard.setOwner(msg.sender);\r\n        isGuard[guard] = true;\r\n    }\r\n}\r\n\r\n////// lib/ds-roles/src/roles.sol\r\n// roles.sol - roled based authentication\r\n\r\n// Copyright (C) 2017  DappHub, LLC\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.4.13; */\r\n\r\n/* import 'ds-auth/auth.sol'; */\r\n\r\ncontract DSRoles is DSAuth, DSAuthority\r\n{\r\n    mapping(address=>bool) _root_users;\r\n    mapping(address=>bytes32) _user_roles;\r\n    mapping(address=>mapping(bytes4=>bytes32)) _capability_roles;\r\n    mapping(address=>mapping(bytes4=>bool)) _public_capabilities;\r\n\r\n    function getUserRoles(address who)\r\n        public\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return _user_roles[who];\r\n    }\r\n\r\n    function getCapabilityRoles(address code, bytes4 sig)\r\n        public\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return _capability_roles[code][sig];\r\n    }\r\n\r\n    function isUserRoot(address who)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _root_users[who];\r\n    }\r\n\r\n    function isCapabilityPublic(address code, bytes4 sig)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _public_capabilities[code][sig];\r\n    }\r\n\r\n    function hasUserRole(address who, uint8 role)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        bytes32 roles = getUserRoles(who);\r\n        bytes32 shifted = bytes32(uint256(uint256(2) ** uint256(role)));\r\n        return bytes32(0) != roles & shifted;\r\n    }\r\n\r\n    function canCall(address caller, address code, bytes4 sig)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        if( isUserRoot(caller) || isCapabilityPublic(code, sig) ) {\r\n            return true;\r\n        } else {\r\n            var has_roles = getUserRoles(caller);\r\n            var needs_one_of = getCapabilityRoles(code, sig);\r\n            return bytes32(0) != has_roles & needs_one_of;\r\n        }\r\n    }\r\n\r\n    function BITNOT(bytes32 input) internal pure returns (bytes32 output) {\r\n        return (input ^ bytes32(uint(-1)));\r\n    }\r\n\r\n    function setRootUser(address who, bool enabled)\r\n        public\r\n        auth\r\n    {\r\n        _root_users[who] = enabled;\r\n    }\r\n\r\n    function setUserRole(address who, uint8 role, bool enabled)\r\n        public\r\n        auth\r\n    {\r\n        var last_roles = _user_roles[who];\r\n        bytes32 shifted = bytes32(uint256(uint256(2) ** uint256(role)));\r\n        if( enabled ) {\r\n            _user_roles[who] = last_roles | shifted;\r\n        } else {\r\n            _user_roles[who] = last_roles & BITNOT(shifted);\r\n        }\r\n    }\r\n\r\n    function setPublicCapability(address code, bytes4 sig, bool enabled)\r\n        public\r\n        auth\r\n    {\r\n        _public_capabilities[code][sig] = enabled;\r\n    }\r\n\r\n    function setRoleCapability(uint8 role, address code, bytes4 sig, bool enabled)\r\n        public\r\n        auth\r\n    {\r\n        var last_roles = _capability_roles[code][sig];\r\n        bytes32 shifted = bytes32(uint256(uint256(2) ** uint256(role)));\r\n        if( enabled ) {\r\n            _capability_roles[code][sig] = last_roles | shifted;\r\n        } else {\r\n            _capability_roles[code][sig] = last_roles & BITNOT(shifted);\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n////// lib/ds-spell/lib/ds-note/src/note.sol\r\n/// note.sol -- the `note' modifier, for logging calls as events\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.4.13; */\r\n\r\ncontract DSNote {\r\n    event LogNote(\r\n        bytes4   indexed  sig,\r\n        address  indexed  guy,\r\n        bytes32  indexed  foo,\r\n        bytes32  indexed  bar,\r\n        uint              wad,\r\n        bytes             fax\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        bytes32 foo;\r\n        bytes32 bar;\r\n\r\n        assembly {\r\n            foo := calldataload(4)\r\n            bar := calldataload(36)\r\n        }\r\n\r\n        LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\r\n\r\n        _;\r\n    }\r\n}\r\n\r\n////// lib/ds-thing/lib/ds-math/src/math.sol\r\n/// math.sol -- mixin for inline numerical wizardry\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.4.13; */\r\n\r\ncontract DSMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n    function imin(int x, int y) internal pure returns (int z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function imax(int x, int y) internal pure returns (int z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint x, uint n) internal pure returns (uint z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n////// lib/ds-thing/src/thing.sol\r\n// thing.sol - `auth` with handy mixins. your things should be DSThings\r\n\r\n// Copyright (C) 2017  DappHub, LLC\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.4.13; */\r\n\r\n/* import 'ds-auth/auth.sol'; */\r\n/* import 'ds-note/note.sol'; */\r\n/* import 'ds-math/math.sol'; */\r\n\r\ncontract DSThing is DSAuth, DSNote, DSMath {\r\n\r\n    function S(string s) internal pure returns (bytes4) {\r\n        return bytes4(keccak256(s));\r\n    }\r\n\r\n}\r\n\r\n////// lib/ds-token/lib/ds-stop/src/stop.sol\r\n/// stop.sol -- mixin for enable/disable functionality\r\n\r\n// Copyright (C) 2017  DappHub, LLC\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.4.13; */\r\n\r\n/* import \"ds-auth/auth.sol\"; */\r\n/* import \"ds-note/note.sol\"; */\r\n\r\ncontract DSStop is DSNote, DSAuth {\r\n\r\n    bool public stopped;\r\n\r\n    modifier stoppable {\r\n        require(!stopped);\r\n        _;\r\n    }\r\n    function stop() public auth note {\r\n        stopped = true;\r\n    }\r\n    function start() public auth note {\r\n        stopped = false;\r\n    }\r\n\r\n}\r\n\r\n////// lib/ds-token/lib/erc20/src/erc20.sol\r\n/// erc20.sol -- API for the ERC20 token standard\r\n\r\n// See <https://github.com/ethereum/EIPs/issues/20>.\r\n\r\n// This file likely does not meet the threshold of originality\r\n// required for copyright to apply.  As a result, this is free and\r\n// unencumbered software belonging to the public domain.\r\n\r\n/* pragma solidity ^0.4.8; */\r\n\r\ncontract ERC20Events {\r\n    event Approval(address indexed src, address indexed guy, uint wad);\r\n    event Transfer(address indexed src, address indexed dst, uint wad);\r\n}\r\n\r\ncontract ERC20 is ERC20Events {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address guy) public view returns (uint);\r\n    function allowance(address src, address guy) public view returns (uint);\r\n\r\n    function approve(address guy, uint wad) public returns (bool);\r\n    function transfer(address dst, uint wad) public returns (bool);\r\n    function transferFrom(\r\n        address src, address dst, uint wad\r\n    ) public returns (bool);\r\n}\r\n\r\n////// lib/ds-token/src/base.sol\r\n/// base.sol -- basic ERC20 implementation\r\n\r\n// Copyright (C) 2015, 2016, 2017  DappHub, LLC\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.4.13; */\r\n\r\n/* import \"erc20/erc20.sol\"; */\r\n/* import \"ds-math/math.sol\"; */\r\n\r\ncontract DSTokenBase is ERC20, DSMath {\r\n    uint256                                            _supply;\r\n    mapping (address => uint256)                       _balances;\r\n    mapping (address => mapping (address => uint256))  _approvals;\r\n\r\n    function DSTokenBase(uint supply) public {\r\n        _balances[msg.sender] = supply;\r\n        _supply = supply;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return _supply;\r\n    }\r\n    function balanceOf(address src) public view returns (uint) {\r\n        return _balances[src];\r\n    }\r\n    function allowance(address src, address guy) public view returns (uint) {\r\n        return _approvals[src][guy];\r\n    }\r\n\r\n    function transfer(address dst, uint wad) public returns (bool) {\r\n        return transferFrom(msg.sender, dst, wad);\r\n    }\r\n\r\n    function transferFrom(address src, address dst, uint wad)\r\n        public\r\n        returns (bool)\r\n    {\r\n        if (src != msg.sender) {\r\n            _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\r\n        }\r\n\r\n        _balances[src] = sub(_balances[src], wad);\r\n        _balances[dst] = add(_balances[dst], wad);\r\n\r\n        Transfer(src, dst, wad);\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve(address guy, uint wad) public returns (bool) {\r\n        _approvals[msg.sender][guy] = wad;\r\n\r\n        Approval(msg.sender, guy, wad);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n////// lib/ds-token/src/token.sol\r\n/// token.sol -- ERC20 implementation with minting and burning\r\n\r\n// Copyright (C) 2015, 2016, 2017  DappHub, LLC\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.4.13; */\r\n\r\n/* import \"ds-stop/stop.sol\"; */\r\n\r\n/* import \"./base.sol\"; */\r\n\r\ncontract DSToken is DSTokenBase(0), DSStop {\r\n\r\n    bytes32  public  symbol;\r\n    uint256  public  decimals = 18; // standard token precision. override to customize\r\n\r\n    function DSToken(bytes32 symbol_) public {\r\n        symbol = symbol_;\r\n    }\r\n\r\n    event Mint(address indexed guy, uint wad);\r\n    event Burn(address indexed guy, uint wad);\r\n\r\n    function approve(address guy) public stoppable returns (bool) {\r\n        return super.approve(guy, uint(-1));\r\n    }\r\n\r\n    function approve(address guy, uint wad) public stoppable returns (bool) {\r\n        return super.approve(guy, wad);\r\n    }\r\n\r\n    function transferFrom(address src, address dst, uint wad)\r\n        public\r\n        stoppable\r\n        returns (bool)\r\n    {\r\n        if (src != msg.sender && _approvals[src][msg.sender] != uint(-1)) {\r\n            _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\r\n        }\r\n\r\n        _balances[src] = sub(_balances[src], wad);\r\n        _balances[dst] = add(_balances[dst], wad);\r\n\r\n        Transfer(src, dst, wad);\r\n\r\n        return true;\r\n    }\r\n\r\n    function push(address dst, uint wad) public {\r\n        transferFrom(msg.sender, dst, wad);\r\n    }\r\n    function pull(address src, uint wad) public {\r\n        transferFrom(src, msg.sender, wad);\r\n    }\r\n    function move(address src, address dst, uint wad) public {\r\n        transferFrom(src, dst, wad);\r\n    }\r\n\r\n    function mint(uint wad) public {\r\n        mint(msg.sender, wad);\r\n    }\r\n    function burn(uint wad) public {\r\n        burn(msg.sender, wad);\r\n    }\r\n    function mint(address guy, uint wad) public auth stoppable {\r\n        _balances[guy] = add(_balances[guy], wad);\r\n        _supply = add(_supply, wad);\r\n        Mint(guy, wad);\r\n    }\r\n    function burn(address guy, uint wad) public auth stoppable {\r\n        if (guy != msg.sender && _approvals[guy][msg.sender] != uint(-1)) {\r\n            _approvals[guy][msg.sender] = sub(_approvals[guy][msg.sender], wad);\r\n        }\r\n\r\n        _balances[guy] = sub(_balances[guy], wad);\r\n        _supply = sub(_supply, wad);\r\n        Burn(guy, wad);\r\n    }\r\n\r\n    // Optional token name\r\n    bytes32   public  name = \"\";\r\n\r\n    function setName(bytes32 name_) public auth {\r\n        name = name_;\r\n    }\r\n}\r\n\r\n////// lib/ds-value/src/value.sol\r\n/// value.sol - a value is a simple thing, it can be get and set\r\n\r\n// Copyright (C) 2017  DappHub, LLC\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.4.13; */\r\n\r\n/* import 'ds-thing/thing.sol'; */\r\n\r\ncontract DSValue is DSThing {\r\n    bool    has;\r\n    bytes32 val;\r\n    function peek() public view returns (bytes32, bool) {\r\n        return (val,has);\r\n    }\r\n    function read() public view returns (bytes32) {\r\n        var (wut, haz) = peek();\r\n        assert(haz);\r\n        return wut;\r\n    }\r\n    function poke(bytes32 wut) public note auth {\r\n        val = wut;\r\n        has = true;\r\n    }\r\n    function void() public note auth {  // unset the value\r\n        has = false;\r\n    }\r\n}\r\n\r\n////// src/vox.sol\r\n/// vox.sol -- target price feed\r\n\r\n// Copyright (C) 2016, 2017  Nikolai Mushegian <nikolai@dapphub.com>\r\n// Copyright (C) 2016, 2017  Daniel Brockman <daniel@dapphub.com>\r\n// Copyright (C) 2017        Rain Break <rainbreak@riseup.net>\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.4.18; */\r\n\r\n/* import \"ds-thing/thing.sol\"; */\r\n\r\ncontract SaiVox is DSThing {\r\n    uint256  _par;\r\n    uint256  _way;\r\n\r\n    uint256  public  fix;\r\n    uint256  public  how;\r\n    uint256  public  tau;\r\n\r\n    function SaiVox(uint par_) public {\r\n        _par = fix = par_;\r\n        _way = RAY;\r\n        tau  = era();\r\n    }\r\n\r\n    function era() public view returns (uint) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function mold(bytes32 param, uint val) public note auth {\r\n        if (param == 'way') _way = val;\r\n    }\r\n\r\n    // Dai Target Price (ref per dai)\r\n    function par() public returns (uint) {\r\n        prod();\r\n        return _par;\r\n    }\r\n    function way() public returns (uint) {\r\n        prod();\r\n        return _way;\r\n    }\r\n\r\n    function tell(uint256 ray) public note auth {\r\n        fix = ray;\r\n    }\r\n    function tune(uint256 ray) public note auth {\r\n        how = ray;\r\n    }\r\n\r\n    function prod() public note {\r\n        var age = era() - tau;\r\n        if (age == 0) return;  // optimised\r\n        tau = era();\r\n\r\n        if (_way != RAY) _par = rmul(_par, rpow(_way, age));  // optimised\r\n\r\n        if (how == 0) return;  // optimised\r\n        var wag = int128(how * age);\r\n        _way = inj(prj(_way) + (fix < _par ? wag : -wag));\r\n    }\r\n\r\n    function inj(int128 x) internal pure returns (uint256) {\r\n        return x >= 0 ? uint256(x) + RAY\r\n            : rdiv(RAY, RAY + uint256(-x));\r\n    }\r\n    function prj(uint256 x) internal pure returns (int128) {\r\n        return x >= RAY ? int128(x - RAY)\r\n            : int128(RAY) - int128(rdiv(RAY, x));\r\n    }\r\n}\r\n\r\n////// src/tub.sol\r\n/// tub.sol -- simplified CDP engine (baby brother of `vat')\r\n\r\n// Copyright (C) 2017  Nikolai Mushegian <nikolai@dapphub.com>\r\n// Copyright (C) 2017  Daniel Brockman <daniel@dapphub.com>\r\n// Copyright (C) 2017  Rain Break <rainbreak@riseup.net>\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.4.18; */\r\n\r\n/* import \"ds-thing/thing.sol\"; */\r\n/* import \"ds-token/token.sol\"; */\r\n/* import \"ds-value/value.sol\"; */\r\n\r\n/* import \"./vox.sol\"; */\r\n\r\ncontract SaiTubEvents {\r\n    event LogNewCup(address indexed lad, bytes32 cup);\r\n}\r\n\r\ncontract SaiTub is DSThing, SaiTubEvents {\r\n    DSToken  public  sai;  // Stablecoin\r\n    DSToken  public  sin;  // Debt (negative sai)\r\n\r\n    DSToken  public  skr;  // Abstracted collateral\r\n    ERC20    public  gem;  // Underlying collateral\r\n\r\n    DSToken  public  gov;  // Governance token\r\n\r\n    SaiVox   public  vox;  // Target price feed\r\n    DSValue  public  pip;  // Reference price feed\r\n    DSValue  public  pep;  // Governance price feed\r\n\r\n    address  public  tap;  // Liquidator\r\n    address  public  pit;  // Governance Vault\r\n\r\n    uint256  public  axe;  // Liquidation penalty\r\n    uint256  public  cap;  // Debt ceiling\r\n    uint256  public  mat;  // Liquidation ratio\r\n    uint256  public  tax;  // Stability fee\r\n    uint256  public  fee;  // Governance fee\r\n    uint256  public  gap;  // Join-Exit Spread\r\n\r\n    bool     public  off;  // Cage flag\r\n    bool     public  out;  // Post cage exit\r\n\r\n    uint256  public  fit;  // REF per SKR (just before settlement)\r\n\r\n    uint256  public  rho;  // Time of last drip\r\n    uint256         _chi;  // Accumulated Tax Rates\r\n    uint256         _rhi;  // Accumulated Tax + Fee Rates\r\n    uint256  public  rum;  // Total normalised debt\r\n\r\n    uint256                   public  cupi;\r\n    mapping (bytes32 => Cup)  public  cups;\r\n\r\n    struct Cup {\r\n        address  lad;      // CDP owner\r\n        uint256  ink;      // Locked collateral (in SKR)\r\n        uint256  art;      // Outstanding normalised debt (tax only)\r\n        uint256  ire;      // Outstanding normalised debt\r\n    }\r\n\r\n    function lad(bytes32 cup) public view returns (address) {\r\n        return cups[cup].lad;\r\n    }\r\n    function ink(bytes32 cup) public view returns (uint) {\r\n        return cups[cup].ink;\r\n    }\r\n    function tab(bytes32 cup) public returns (uint) {\r\n        return rmul(cups[cup].art, chi());\r\n    }\r\n    function rap(bytes32 cup) public returns (uint) {\r\n        return sub(rmul(cups[cup].ire, rhi()), tab(cup));\r\n    }\r\n\r\n    // Total CDP Debt\r\n    function din() public returns (uint) {\r\n        return rmul(rum, chi());\r\n    }\r\n    // Backing collateral\r\n    function air() public view returns (uint) {\r\n        return skr.balanceOf(this);\r\n    }\r\n    // Raw collateral\r\n    function pie() public view returns (uint) {\r\n        return gem.balanceOf(this);\r\n    }\r\n\r\n    //------------------------------------------------------------------\r\n\r\n    function SaiTub(\r\n        DSToken  sai_,\r\n        DSToken  sin_,\r\n        DSToken  skr_,\r\n        ERC20    gem_,\r\n        DSToken  gov_,\r\n        DSValue  pip_,\r\n        DSValue  pep_,\r\n        SaiVox   vox_,\r\n        address  pit_\r\n    ) public {\r\n        gem = gem_;\r\n        skr = skr_;\r\n\r\n        sai = sai_;\r\n        sin = sin_;\r\n\r\n        gov = gov_;\r\n        pit = pit_;\r\n\r\n        pip = pip_;\r\n        pep = pep_;\r\n        vox = vox_;\r\n\r\n        axe = RAY;\r\n        mat = RAY;\r\n        tax = RAY;\r\n        fee = RAY;\r\n        gap = WAD;\r\n\r\n        _chi = RAY;\r\n        _rhi = RAY;\r\n\r\n        rho = era();\r\n    }\r\n\r\n    function era() public constant returns (uint) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    //--Risk-parameter-config-------------------------------------------\r\n\r\n    function mold(bytes32 param, uint val) public note auth {\r\n        if      (param == 'cap') cap = val;\r\n        else if (param == 'mat') { require(val >= RAY); mat = val; }\r\n        else if (param == 'tax') { require(val >= RAY); drip(); tax = val; }\r\n        else if (param == 'fee') { require(val >= RAY); drip(); fee = val; }\r\n        else if (param == 'axe') { require(val >= RAY); axe = val; }\r\n        else if (param == 'gap') { require(val >= WAD); gap = val; }\r\n        else return;\r\n    }\r\n\r\n    //--Price-feed-setters----------------------------------------------\r\n\r\n    function setPip(DSValue pip_) public note auth {\r\n        pip = pip_;\r\n    }\r\n    function setPep(DSValue pep_) public note auth {\r\n        pep = pep_;\r\n    }\r\n    function setVox(SaiVox vox_) public note auth {\r\n        vox = vox_;\r\n    }\r\n\r\n    //--Tap-setter------------------------------------------------------\r\n    function turn(address tap_) public note {\r\n        require(tap  == 0);\r\n        require(tap_ != 0);\r\n        tap = tap_;\r\n    }\r\n\r\n    //--Collateral-wrapper----------------------------------------------\r\n\r\n    // Wrapper ratio (gem per skr)\r\n    function per() public view returns (uint ray) {\r\n        return skr.totalSupply() == 0 ? RAY : rdiv(pie(), skr.totalSupply());\r\n    }\r\n    // Join price (gem per skr)\r\n    function ask(uint wad) public view returns (uint) {\r\n        return rmul(wad, wmul(per(), gap));\r\n    }\r\n    // Exit price (gem per skr)\r\n    function bid(uint wad) public view returns (uint) {\r\n        return rmul(wad, wmul(per(), sub(2 * WAD, gap)));\r\n    }\r\n    function join(uint wad) public note {\r\n        require(!off);\r\n        require(ask(wad) > 0);\r\n        require(gem.transferFrom(msg.sender, this, ask(wad)));\r\n        skr.mint(msg.sender, wad);\r\n    }\r\n    function exit(uint wad) public note {\r\n        require(!off || out);\r\n        require(gem.transfer(msg.sender, bid(wad)));\r\n        skr.burn(msg.sender, wad);\r\n    }\r\n\r\n    //--Stability-fee-accumulation--------------------------------------\r\n\r\n    // Accumulated Rates\r\n    function chi() public returns (uint) {\r\n        drip();\r\n        return _chi;\r\n    }\r\n    function rhi() public returns (uint) {\r\n        drip();\r\n        return _rhi;\r\n    }\r\n    function drip() public note {\r\n        if (off) return;\r\n\r\n        var rho_ = era();\r\n        var age = rho_ - rho;\r\n        if (age == 0) return;    // optimised\r\n        rho = rho_;\r\n\r\n        var inc = RAY;\r\n\r\n        if (tax != RAY) {  // optimised\r\n            var _chi_ = _chi;\r\n            inc = rpow(tax, age);\r\n            _chi = rmul(_chi, inc);\r\n            sai.mint(tap, rmul(sub(_chi, _chi_), rum));\r\n        }\r\n\r\n        // optimised\r\n        if (fee != RAY) inc = rmul(inc, rpow(fee, age));\r\n        if (inc != RAY) _rhi = rmul(_rhi, inc);\r\n    }\r\n\r\n\r\n    //--CDP-risk-indicator----------------------------------------------\r\n\r\n    // Abstracted collateral price (ref per skr)\r\n    function tag() public view returns (uint wad) {\r\n        return off ? fit : wmul(per(), uint(pip.read()));\r\n    }\r\n    // Returns true if cup is well-collateralized\r\n    function safe(bytes32 cup) public returns (bool) {\r\n        var pro = rmul(tag(), ink(cup));\r\n        var con = rmul(vox.par(), tab(cup));\r\n        var min = rmul(con, mat);\r\n        return pro >= min;\r\n    }\r\n\r\n\r\n    //--CDP-operations--------------------------------------------------\r\n\r\n    function open() public note returns (bytes32 cup) {\r\n        require(!off);\r\n        cupi = add(cupi, 1);\r\n        cup = bytes32(cupi);\r\n        cups[cup].lad = msg.sender;\r\n        LogNewCup(msg.sender, cup);\r\n    }\r\n    function give(bytes32 cup, address guy) public note {\r\n        require(msg.sender == cups[cup].lad);\r\n        require(guy != 0);\r\n        cups[cup].lad = guy;\r\n    }\r\n\r\n    function lock(bytes32 cup, uint wad) public note {\r\n        require(!off);\r\n        cups[cup].ink = add(cups[cup].ink, wad);\r\n        skr.pull(msg.sender, wad);\r\n        require(cups[cup].ink == 0 || cups[cup].ink > 0.005 ether);\r\n    }\r\n    function free(bytes32 cup, uint wad) public note {\r\n        require(msg.sender == cups[cup].lad);\r\n        cups[cup].ink = sub(cups[cup].ink, wad);\r\n        skr.push(msg.sender, wad);\r\n        require(safe(cup));\r\n        require(cups[cup].ink == 0 || cups[cup].ink > 0.005 ether);\r\n    }\r\n\r\n    function draw(bytes32 cup, uint wad) public note {\r\n        require(!off);\r\n        require(msg.sender == cups[cup].lad);\r\n        require(rdiv(wad, chi()) > 0);\r\n\r\n        cups[cup].art = add(cups[cup].art, rdiv(wad, chi()));\r\n        rum = add(rum, rdiv(wad, chi()));\r\n\r\n        cups[cup].ire = add(cups[cup].ire, rdiv(wad, rhi()));\r\n        sai.mint(cups[cup].lad, wad);\r\n\r\n        require(safe(cup));\r\n        require(sai.totalSupply() <= cap);\r\n    }\r\n    function wipe(bytes32 cup, uint wad) public note {\r\n        require(!off);\r\n\r\n        var owe = rmul(wad, rdiv(rap(cup), tab(cup)));\r\n\r\n        cups[cup].art = sub(cups[cup].art, rdiv(wad, chi()));\r\n        rum = sub(rum, rdiv(wad, chi()));\r\n\r\n        cups[cup].ire = sub(cups[cup].ire, rdiv(add(wad, owe), rhi()));\r\n        sai.burn(msg.sender, wad);\r\n\r\n        var (val, ok) = pep.peek();\r\n        if (ok && val != 0) gov.move(msg.sender, pit, wdiv(owe, uint(val)));\r\n    }\r\n\r\n    function shut(bytes32 cup) public note {\r\n        require(!off);\r\n        require(msg.sender == cups[cup].lad);\r\n        if (tab(cup) != 0) wipe(cup, tab(cup));\r\n        if (ink(cup) != 0) free(cup, ink(cup));\r\n        delete cups[cup];\r\n    }\r\n\r\n    function bite(bytes32 cup) public note {\r\n        require(!safe(cup) || off);\r\n\r\n        // Take on all of the debt, except unpaid fees\r\n        var rue = tab(cup);\r\n        sin.mint(tap, rue);\r\n        rum = sub(rum, cups[cup].art);\r\n        cups[cup].art = 0;\r\n        cups[cup].ire = 0;\r\n\r\n        // Amount owed in SKR, including liquidation penalty\r\n        var owe = rdiv(rmul(rmul(rue, axe), vox.par()), tag());\r\n\r\n        if (owe > cups[cup].ink) {\r\n            owe = cups[cup].ink;\r\n        }\r\n\r\n        skr.push(tap, owe);\r\n        cups[cup].ink = sub(cups[cup].ink, owe);\r\n    }\r\n\r\n    //------------------------------------------------------------------\r\n\r\n    function cage(uint fit_, uint jam) public note auth {\r\n        require(!off && fit_ != 0);\r\n        off = true;\r\n        axe = RAY;\r\n        gap = WAD;\r\n        fit = fit_;         // ref per skr\r\n        require(gem.transfer(tap, jam));\r\n    }\r\n    function flow() public note auth {\r\n        require(off);\r\n        out = true;\r\n    }\r\n}\r\n\r\n////// src/tap.sol\r\n/// tap.sol -- liquidation engine (see also `vow`)\r\n\r\n// Copyright (C) 2017  Nikolai Mushegian <nikolai@dapphub.com>\r\n// Copyright (C) 2017  Daniel Brockman <daniel@dapphub.com>\r\n// Copyright (C) 2017  Rain Break <rainbreak@riseup.net>\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.4.18; */\r\n\r\n/* import \"./tub.sol\"; */\r\n\r\ncontract SaiTap is DSThing {\r\n    DSToken  public  sai;\r\n    DSToken  public  sin;\r\n    DSToken  public  skr;\r\n\r\n    SaiVox   public  vox;\r\n    SaiTub   public  tub;\r\n\r\n    uint256  public  gap;  // Boom-Bust Spread\r\n    bool     public  off;  // Cage flag\r\n    uint256  public  fix;  // Cage price\r\n\r\n    // Surplus\r\n    function joy() public view returns (uint) {\r\n        return sai.balanceOf(this);\r\n    }\r\n    // Bad debt\r\n    function woe() public view returns (uint) {\r\n        return sin.balanceOf(this);\r\n    }\r\n    // Collateral pending liquidation\r\n    function fog() public view returns (uint) {\r\n        return skr.balanceOf(this);\r\n    }\r\n\r\n\r\n    function SaiTap(SaiTub tub_) public {\r\n        tub = tub_;\r\n\r\n        sai = tub.sai();\r\n        sin = tub.sin();\r\n        skr = tub.skr();\r\n\r\n        vox = tub.vox();\r\n\r\n        gap = WAD;\r\n    }\r\n\r\n    function mold(bytes32 param, uint val) public note auth {\r\n        if (param == 'gap') gap = val;\r\n    }\r\n\r\n    // Cancel debt\r\n    function heal() public note {\r\n        if (joy() == 0 || woe() == 0) return;  // optimised\r\n        var wad = min(joy(), woe());\r\n        sai.burn(wad);\r\n        sin.burn(wad);\r\n    }\r\n\r\n    // Feed price (sai per skr)\r\n    function s2s() public returns (uint) {\r\n        var tag = tub.tag();    // ref per skr\r\n        var par = vox.par();    // ref per sai\r\n        return rdiv(tag, par);  // sai per skr\r\n    }\r\n    // Boom price (sai per skr)\r\n    function bid(uint wad) public returns (uint) {\r\n        return rmul(wad, wmul(s2s(), sub(2 * WAD, gap)));\r\n    }\r\n    // Bust price (sai per skr)\r\n    function ask(uint wad) public returns (uint) {\r\n        return rmul(wad, wmul(s2s(), gap));\r\n    }\r\n    function flip(uint wad) internal {\r\n        require(ask(wad) > 0);\r\n        skr.push(msg.sender, wad);\r\n        sai.pull(msg.sender, ask(wad));\r\n        heal();\r\n    }\r\n    function flop(uint wad) internal {\r\n        skr.mint(sub(wad, fog()));\r\n        flip(wad);\r\n        require(joy() == 0);  // can't flop into surplus\r\n    }\r\n    function flap(uint wad) internal {\r\n        heal();\r\n        sai.push(msg.sender, bid(wad));\r\n        skr.burn(msg.sender, wad);\r\n    }\r\n    function bust(uint wad) public note {\r\n        require(!off);\r\n        if (wad > fog()) flop(wad);\r\n        else flip(wad);\r\n    }\r\n    function boom(uint wad) public note {\r\n        require(!off);\r\n        flap(wad);\r\n    }\r\n\r\n    //------------------------------------------------------------------\r\n\r\n    function cage(uint fix_) public note auth {\r\n        require(!off);\r\n        off = true;\r\n        fix = fix_;\r\n    }\r\n    function cash(uint wad) public note {\r\n        require(off);\r\n        sai.burn(msg.sender, wad);\r\n        require(tub.gem().transfer(msg.sender, rmul(wad, fix)));\r\n    }\r\n    function mock(uint wad) public note {\r\n        require(off);\r\n        sai.mint(msg.sender, wad);\r\n        require(tub.gem().transferFrom(msg.sender, this, rmul(wad, fix)));\r\n    }\r\n    function vent() public note {\r\n        require(off);\r\n        skr.burn(fog());\r\n    }\r\n}\r\n\r\n////// src/top.sol\r\n/// top.sol -- global settlement manager\r\n\r\n// Copyright (C) 2017  Nikolai Mushegian <nikolai@dapphub.com>\r\n// Copyright (C) 2017  Daniel Brockman <daniel@dapphub.com>\r\n// Copyright (C) 2017  Rain Break <rainbreak@riseup.net>\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.4.18; */\r\n\r\n/* import \"./tub.sol\"; */\r\n/* import \"./tap.sol\"; */\r\n\r\ncontract SaiTop is DSThing {\r\n    SaiVox   public  vox;\r\n    SaiTub   public  tub;\r\n    SaiTap   public  tap;\r\n\r\n    DSToken  public  sai;\r\n    DSToken  public  sin;\r\n    DSToken  public  skr;\r\n    ERC20    public  gem;\r\n\r\n    uint256  public  fix;  // sai cage price (gem per sai)\r\n    uint256  public  fit;  // skr cage price (ref per skr)\r\n    uint256  public  caged;\r\n    uint256  public  cooldown = 6 hours;\r\n\r\n    function SaiTop(SaiTub tub_, SaiTap tap_) public {\r\n        tub = tub_;\r\n        tap = tap_;\r\n\r\n        vox = tub.vox();\r\n\r\n        sai = tub.sai();\r\n        sin = tub.sin();\r\n        skr = tub.skr();\r\n        gem = tub.gem();\r\n    }\r\n\r\n    function era() public view returns (uint) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    // force settlement of the system at a given price (sai per gem).\r\n    // This is nearly the equivalent of biting all cups at once.\r\n    // Important consideration: the gems associated with free skr can\r\n    // be tapped to make sai whole.\r\n    function cage(uint price) internal {\r\n        require(!tub.off() && price != 0);\r\n        caged = era();\r\n\r\n        tub.drip();  // collect remaining fees\r\n        tap.heal();  // absorb any pending fees\r\n\r\n        fit = rmul(wmul(price, vox.par()), tub.per());\r\n        // Most gems we can get per sai is the full balance of the tub.\r\n        // If there is no sai issued, we should still be able to cage.\r\n        if (sai.totalSupply() == 0) {\r\n            fix = rdiv(WAD, price);\r\n        } else {\r\n            fix = min(rdiv(WAD, price), rdiv(tub.pie(), sai.totalSupply()));\r\n        }\r\n\r\n        tub.cage(fit, rmul(fix, sai.totalSupply()));\r\n        tap.cage(fix);\r\n\r\n        tap.vent();    // burn pending sale skr\r\n    }\r\n    // cage by reading the last value from the feed for the price\r\n    function cage() public note auth {\r\n        cage(rdiv(uint(tub.pip().read()), vox.par()));\r\n    }\r\n\r\n    function flow() public note {\r\n        require(tub.off());\r\n        var empty = tub.din() == 0 && tap.fog() == 0;\r\n        var ended = era() > caged + cooldown;\r\n        require(empty || ended);\r\n        tub.flow();\r\n    }\r\n\r\n    function setCooldown(uint cooldown_) public auth {\r\n        cooldown = cooldown_;\r\n    }\r\n}\r\n\r\n////// src/mom.sol\r\n/// mom.sol -- admin manager\r\n\r\n// Copyright (C) 2017  Nikolai Mushegian <nikolai@dapphub.com>\r\n// Copyright (C) 2017  Daniel Brockman <daniel@dapphub.com>\r\n// Copyright (C) 2017  Rain <rainbreak@riseup.net>\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.4.18; */\r\n\r\n/* import 'ds-thing/thing.sol'; */\r\n/* import './tub.sol'; */\r\n/* import './top.sol'; */\r\n/* import './tap.sol'; */\r\n\r\ncontract SaiMom is DSThing {\r\n    SaiTub  public  tub;\r\n    SaiTap  public  tap;\r\n    SaiVox  public  vox;\r\n\r\n    function SaiMom(SaiTub tub_, SaiTap tap_, SaiVox vox_) public {\r\n        tub = tub_;\r\n        tap = tap_;\r\n        vox = vox_;\r\n    }\r\n    // Debt ceiling\r\n    function setCap(uint wad) public note auth {\r\n        tub.mold(\"cap\", wad);\r\n    }\r\n    // Liquidation ratio\r\n    function setMat(uint ray) public note auth {\r\n        tub.mold(\"mat\", ray);\r\n        var axe = tub.axe();\r\n        var mat = tub.mat();\r\n        require(axe >= RAY && axe <= mat);\r\n    }\r\n    // Stability fee\r\n    function setTax(uint ray) public note auth {\r\n        tub.mold(\"tax\", ray);\r\n        var tax = tub.tax();\r\n        require(RAY <= tax);\r\n        require(tax < 1000001100000000000000000000);  // 10% / day\r\n    }\r\n    // Governance fee\r\n    function setFee(uint ray) public note auth {\r\n        tub.mold(\"fee\", ray);\r\n        var fee = tub.fee();\r\n        require(RAY <= fee);\r\n        require(fee < 1000001100000000000000000000);  // 10% / day\r\n    }\r\n    // Liquidation fee\r\n    function setAxe(uint ray) public note auth {\r\n        tub.mold(\"axe\", ray);\r\n        var axe = tub.axe();\r\n        var mat = tub.mat();\r\n        require(axe >= RAY && axe <= mat);\r\n    }\r\n    // Join/Exit Spread\r\n    function setTubGap(uint wad) public note auth {\r\n        tub.mold(\"gap\", wad);\r\n    }\r\n    // ETH/USD Feed\r\n    function setPip(DSValue pip_) public note auth {\r\n        tub.setPip(pip_);\r\n    }\r\n    // MKR/USD Feed\r\n    function setPep(DSValue pep_) public note auth {\r\n        tub.setPep(pep_);\r\n    }\r\n    // TRFM\r\n    function setVox(SaiVox vox_) public note auth {\r\n        tub.setVox(vox_);\r\n    }\r\n    // Boom/Bust Spread\r\n    function setTapGap(uint wad) public note auth {\r\n        tap.mold(\"gap\", wad);\r\n        var gap = tap.gap();\r\n        require(gap <= 1.05 ether);\r\n        require(gap >= 0.95 ether);\r\n    }\r\n    // Rate of change of target price (per second)\r\n    function setWay(uint ray) public note auth {\r\n        require(ray < 1000001100000000000000000000);  // 10% / day\r\n        require(ray >  999998800000000000000000000);\r\n        vox.mold(\"way\", ray);\r\n    }\r\n    function setHow(uint ray) public note auth {\r\n        vox.tune(ray);\r\n    }\r\n}\r\n\r\n////// src/fab.sol\r\n/* pragma solidity ^0.4.18; */\r\n\r\n/* import \"ds-auth/auth.sol\"; */\r\n/* import 'ds-token/token.sol'; */\r\n/* import 'ds-guard/guard.sol'; */\r\n/* import 'ds-roles/roles.sol'; */\r\n/* import 'ds-value/value.sol'; */\r\n\r\n/* import './mom.sol'; */\r\n\r\ncontract GemFab {\r\n    function newTok(bytes32 name) public returns (DSToken token) {\r\n        token = new DSToken(name);\r\n        token.setOwner(msg.sender);\r\n    }\r\n}\r\n\r\ncontract VoxFab {\r\n    function newVox() public returns (SaiVox vox) {\r\n        vox = new SaiVox(10 ** 27);\r\n        vox.setOwner(msg.sender);\r\n    }\r\n}\r\n\r\ncontract TubFab {\r\n    function newTub(DSToken sai, DSToken sin, DSToken skr, ERC20 gem, DSToken gov, DSValue pip, DSValue pep, SaiVox vox, address pit) public returns (SaiTub tub) {\r\n        tub = new SaiTub(sai, sin, skr, gem, gov, pip, pep, vox, pit);\r\n        tub.setOwner(msg.sender);\r\n    }\r\n}\r\n\r\ncontract TapFab {\r\n    function newTap(SaiTub tub) public returns (SaiTap tap) {\r\n        tap = new SaiTap(tub);\r\n        tap.setOwner(msg.sender);\r\n    }\r\n}\r\n\r\ncontract TopFab {\r\n    function newTop(SaiTub tub, SaiTap tap) public returns (SaiTop top) {\r\n        top = new SaiTop(tub, tap);\r\n        top.setOwner(msg.sender);\r\n    }\r\n}\r\n\r\ncontract MomFab {\r\n    function newMom(SaiTub tub, SaiTap tap, SaiVox vox) public returns (SaiMom mom) {\r\n        mom = new SaiMom(tub, tap, vox);\r\n        mom.setOwner(msg.sender);\r\n    }\r\n}\r\n\r\ncontract DadFab {\r\n    function newDad() public returns (DSGuard dad) {\r\n        dad = new DSGuard();\r\n        dad.setOwner(msg.sender);\r\n    }\r\n}\r\n\r\ncontract DaiFab is DSAuth {\r\n    GemFab public gemFab;\r\n    VoxFab public voxFab;\r\n    TapFab public tapFab;\r\n    TubFab public tubFab;\r\n    TopFab public topFab;\r\n    MomFab public momFab;\r\n    DadFab public dadFab;\r\n\r\n    DSToken public sai;\r\n    DSToken public sin;\r\n    DSToken public skr;\r\n\r\n    SaiVox public vox;\r\n    SaiTub public tub;\r\n    SaiTap public tap;\r\n    SaiTop public top;\r\n\r\n    SaiMom public mom;\r\n    DSGuard public dad;\r\n\r\n    uint8 public step = 0;\r\n\r\n    function DaiFab(GemFab gemFab_, VoxFab voxFab_, TubFab tubFab_, TapFab tapFab_, TopFab topFab_, MomFab momFab_, DadFab dadFab_) public {\r\n        gemFab = gemFab_;\r\n        voxFab = voxFab_;\r\n        tubFab = tubFab_;\r\n        tapFab = tapFab_;\r\n        topFab = topFab_;\r\n        momFab = momFab_;\r\n        dadFab = dadFab_;\r\n    }\r\n\r\n    function makeTokens() public auth {\r\n        require(step == 0);\r\n        sai = gemFab.newTok('DAI');\r\n        sin = gemFab.newTok('SIN');\r\n        skr = gemFab.newTok('PETH');\r\n        sai.setName('Dai Stablecoin v1.0');\r\n        sin.setName('SIN');\r\n        skr.setName('Pooled Ether');\r\n        step += 1;\r\n    }\r\n\r\n    function makeVoxTub(ERC20 gem, DSToken gov, DSValue pip, DSValue pep, address pit) public auth {\r\n        require(step == 1);\r\n        require(address(gem) != 0x0);\r\n        require(address(gov) != 0x0);\r\n        require(address(pip) != 0x0);\r\n        require(address(pep) != 0x0);\r\n        require(pit != 0x0);\r\n        vox = voxFab.newVox();\r\n        tub = tubFab.newTub(sai, sin, skr, gem, gov, pip, pep, vox, pit);\r\n        step += 1;\r\n    }\r\n\r\n    function makeTapTop() public auth {\r\n        require(step == 2);\r\n        tap = tapFab.newTap(tub);\r\n        tub.turn(tap);\r\n        top = topFab.newTop(tub, tap);\r\n        step += 1;\r\n    }\r\n\r\n    function S(string s) internal pure returns (bytes4) {\r\n        return bytes4(keccak256(s));\r\n    }\r\n\r\n    function ray(uint256 wad) internal pure returns (uint256) {\r\n        return wad * 10 ** 9;\r\n    }\r\n\r\n    // Liquidation Ratio   150%\r\n    // Liquidation Penalty 13%\r\n    // Stability Fee       0.05%\r\n    // PETH Fee            0%\r\n    // Boom/Bust Spread   -3%\r\n    // Join/Exit Spread    0%\r\n    // Debt Ceiling        0\r\n    function configParams() public auth {\r\n        require(step == 3);\r\n\r\n        tub.mold(\"cap\", 0);\r\n        tub.mold(\"mat\", ray(1.5  ether));\r\n        tub.mold(\"axe\", ray(1.13 ether));\r\n        tub.mold(\"fee\", 1000000000158153903837946257);  // 0.5% / year\r\n        tub.mold(\"tax\", ray(1 ether));\r\n        tub.mold(\"gap\", 1 ether);\r\n\r\n        tap.mold(\"gap\", 0.97 ether);\r\n\r\n        step += 1;\r\n    }\r\n\r\n    function verifyParams() public auth {\r\n        require(step == 4);\r\n\r\n        require(tub.cap() == 0);\r\n        require(tub.mat() == 1500000000000000000000000000);\r\n        require(tub.axe() == 1130000000000000000000000000);\r\n        require(tub.fee() == 1000000000158153903837946257);\r\n        require(tub.tax() == 1000000000000000000000000000);\r\n        require(tub.gap() == 1000000000000000000);\r\n\r\n        require(tap.gap() == 970000000000000000);\r\n\r\n        require(vox.par() == 1000000000000000000000000000);\r\n        require(vox.how() == 0);\r\n\r\n        step += 1;\r\n    }\r\n\r\n    function configAuth(DSAuthority authority) public auth {\r\n        require(step == 5);\r\n        require(address(authority) != 0x0);\r\n\r\n        mom = momFab.newMom(tub, tap, vox);\r\n        dad = dadFab.newDad();\r\n\r\n        vox.setAuthority(dad);\r\n        vox.setOwner(0);\r\n        tub.setAuthority(dad);\r\n        tub.setOwner(0);\r\n        tap.setAuthority(dad);\r\n        tap.setOwner(0);\r\n        sai.setAuthority(dad);\r\n        sai.setOwner(0);\r\n        sin.setAuthority(dad);\r\n        sin.setOwner(0);\r\n        skr.setAuthority(dad);\r\n        skr.setOwner(0);\r\n\r\n        top.setAuthority(authority);\r\n        top.setOwner(0);\r\n        mom.setAuthority(authority);\r\n        mom.setOwner(0);\r\n\r\n        dad.permit(top, tub, S(\"cage(uint256,uint256)\"));\r\n        dad.permit(top, tub, S(\"flow()\"));\r\n        dad.permit(top, tap, S(\"cage(uint256)\"));\r\n\r\n        dad.permit(tub, skr, S('mint(address,uint256)'));\r\n        dad.permit(tub, skr, S('burn(address,uint256)'));\r\n\r\n        dad.permit(tub, sai, S('mint(address,uint256)'));\r\n        dad.permit(tub, sai, S('burn(address,uint256)'));\r\n\r\n        dad.permit(tub, sin, S('mint(address,uint256)'));\r\n\r\n        dad.permit(tap, sai, S('mint(address,uint256)'));\r\n        dad.permit(tap, sai, S('burn(address,uint256)'));\r\n        dad.permit(tap, sai, S('burn(uint256)'));\r\n        dad.permit(tap, sin, S('burn(uint256)'));\r\n\r\n        dad.permit(tap, skr, S('mint(uint256)'));\r\n        dad.permit(tap, skr, S('burn(uint256)'));\r\n        dad.permit(tap, skr, S('burn(address,uint256)'));\r\n\r\n        dad.permit(mom, vox, S(\"mold(bytes32,uint256)\"));\r\n        dad.permit(mom, vox, S(\"tune(uint256)\"));\r\n        dad.permit(mom, tub, S(\"mold(bytes32,uint256)\"));\r\n        dad.permit(mom, tap, S(\"mold(bytes32,uint256)\"));\r\n        dad.permit(mom, tub, S(\"setPip(address)\"));\r\n        dad.permit(mom, tub, S(\"setPep(address)\"));\r\n        dad.permit(mom, tub, S(\"setVox(address)\"));\r\n\r\n        dad.setOwner(0);\r\n        step += 1;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"momFab\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"skr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tubFab\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"verifyParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tub\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mom\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tapFab\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vox\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dad\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dadFab\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"topFab\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"voxFab\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"configParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sai\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"configAuth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gemFab\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"makeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"step\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"makeTapTop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gem\",\"type\":\"address\"},{\"name\":\"gov\",\"type\":\"address\"},{\"name\":\"pip\",\"type\":\"address\"},{\"name\":\"pep\",\"type\":\"address\"},{\"name\":\"pit\",\"type\":\"address\"}],\"name\":\"makeVoxTub\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tap\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"top\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"gemFab_\",\"type\":\"address\"},{\"name\":\"voxFab_\",\"type\":\"address\"},{\"name\":\"tubFab_\",\"type\":\"address\"},{\"name\":\"tapFab_\",\"type\":\"address\"},{\"name\":\"topFab_\",\"type\":\"address\"},{\"name\":\"momFab_\",\"type\":\"address\"},{\"name\":\"dadFab_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"}]", "ContractName": "DaiFab", "CompilerVersion": "v0.4.19+commit.c4cbbb05", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000552f355ccb9b91c8fb47d9c011abad5b72ec30e900000000000000000000000068fd0899fedeeee08b77c189d2f8ac38466ea216000000000000000000000000ec4d29fd22066e75746eb68cb51d8a7df7d28356000000000000000000000000c2baca5300b95ab18eddd9ef3070a0945298ab500000000000000000000000000eda20f7499aae7bdadc4e52fd72e49663733ed4000000000000000000000000141a206ece672e3198086c5d21f7858ad03669ea00000000000000000000000001c1103d765f62a0d909499d7b615c382cdb072d", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://58c6c40202739855d80b09a35b125539573c108d725a772ae80beb3626c9c983"}