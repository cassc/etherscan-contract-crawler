{"SourceCode": "// File: contracts/ERC721/ERC721ReceiverDraft.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/// @title ERC721ReceiverDraft\r\n/// @dev Interface for any contract that wants to support safeTransfers from\r\n///  ERC721 asset contracts.\r\n/// @dev Note: this is the interface defined from \r\n///  https://github.com/ethereum/EIPs/commit/2bddd126def7c046e1e62408dc2b51bdd9e57f0f\r\n///  to https://github.com/ethereum/EIPs/commit/27788131d5975daacbab607076f2ee04624f9dbb \r\n///  and is not the final interface.\r\n///  Due to the extended period of time this revision was specified in the draft,\r\n///  we are supporting both this and the newer (final) interface in order to be \r\n///  compatible with any ERC721 implementations that may have used this interface.\r\ncontract ERC721ReceiverDraft {\r\n\r\n    /// @dev Magic value to be returned upon successful reception of an NFT\r\n    ///  Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`,\r\n    ///  which can be also obtained as `ERC721ReceiverDraft(0).onERC721Received.selector`\r\n    /// @dev see https://github.com/ethereum/EIPs/commit/2bddd126def7c046e1e62408dc2b51bdd9e57f0f\r\n    bytes4 internal constant ERC721_RECEIVED_DRAFT = 0xf0b9e5ba;\r\n\r\n    /// @notice Handle the receipt of an NFT\r\n    /// @dev The ERC721 smart contract calls this function on the recipient\r\n    ///  after a `transfer`. This function MAY throw to revert and reject the\r\n    ///  transfer. This function MUST use 50,000 gas or less. Return of other\r\n    ///  than the magic value MUST result in the transaction being reverted.\r\n    ///  Note: the contract address is always the message sender.\r\n    /// @param _from The sending address \r\n    /// @param _tokenId The NFT identifier which is being transfered\r\n    /// @param data Additional data with no specified format\r\n    /// @return `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\r\n    ///  unless throwing\r\n    function onERC721Received(address _from, uint256 _tokenId, bytes data) external returns(bytes4);\r\n}\r\n\r\n// File: contracts/ERC721/ERC721ReceiverFinal.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/// @title ERC721ReceiverFinal\r\n/// @notice Interface for any contract that wants to support safeTransfers from\r\n///  ERC721 asset contracts.\r\n///  @dev Note: this is the final interface as defined at http://erc721.org\r\ncontract ERC721ReceiverFinal {\r\n\r\n    /// @dev Magic value to be returned upon successful reception of an NFT\r\n    ///  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\r\n    ///  which can be also obtained as `ERC721ReceiverFinal(0).onERC721Received.selector`\r\n    /// @dev see https://github.com/OpenZeppelin/openzeppelin-solidity/blob/v1.12.0/contracts/token/ERC721/ERC721Receiver.sol\r\n    bytes4 internal constant ERC721_RECEIVED_FINAL = 0x150b7a02;\r\n\r\n    /// @notice Handle the receipt of an NFT\r\n    /// @dev The ERC721 smart contract calls this function on the recipient\r\n    /// after a `safetransfer`. This function MAY throw to revert and reject the\r\n    /// transfer. Return of other than the magic value MUST result in the\r\n    /// transaction being reverted.\r\n    /// Note: the contract address is always the message sender.\r\n    /// @param _operator The address which called `safeTransferFrom` function\r\n    /// @param _from The address which previously owned the token\r\n    /// @param _tokenId The NFT identifier which is being transferred\r\n    /// @param _data Additional data with no specified format\r\n    /// @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n    function onERC721Received(\r\n        address _operator,\r\n        address _from,\r\n        uint256 _tokenId,\r\n        bytes _data\r\n    )\r\n    public\r\n        returns (bytes4);\r\n}\r\n\r\n// File: contracts/ERC721/ERC721Receivable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/// @title ERC721Receivable handles the reception of ERC721 tokens\r\n///  See ERC721 specification\r\n/// @author Christopher Scott\r\n/// @dev These functions are public, and could be called by anyone, even in the case\r\n///  where no NFTs have been transferred. Since it's not a reliable source of\r\n///  truth about ERC721 tokens being transferred, we save the gas and don't\r\n///  bother emitting a (potentially spurious) event as found in \r\n///  https://github.com/OpenZeppelin/openzeppelin-solidity/blob/5471fc808a17342d738853d7bf3e9e5ef3108074/contracts/mocks/ERC721ReceiverMock.sol\r\ncontract ERC721Receivable is ERC721ReceiverDraft, ERC721ReceiverFinal {\r\n\r\n    /// @notice Handle the receipt of an NFT\r\n    /// @dev The ERC721 smart contract calls this function on the recipient\r\n    ///  after a `transfer`. This function MAY throw to revert and reject the\r\n    ///  transfer. This function MUST use 50,000 gas or less. Return of other\r\n    ///  than the magic value MUST result in the transaction being reverted.\r\n    ///  Note: the contract address is always the message sender.\r\n    /// @param _from The sending address \r\n    /// @param _tokenId The NFT identifier which is being transfered\r\n    /// @param data Additional data with no specified format\r\n    /// @return `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\r\n    ///  unless throwing\r\n    function onERC721Received(address _from, uint256 _tokenId, bytes data) external returns(bytes4) {\r\n        _from;\r\n        _tokenId;\r\n        data;\r\n\r\n        // emit ERC721Received(_operator, _from, _tokenId, _data, gasleft());\r\n\r\n        return ERC721_RECEIVED_DRAFT;\r\n    }\r\n\r\n    /// @notice Handle the receipt of an NFT\r\n    /// @dev The ERC721 smart contract calls this function on the recipient\r\n    /// after a `safetransfer`. This function MAY throw to revert and reject the\r\n    /// transfer. Return of other than the magic value MUST result in the\r\n    /// transaction being reverted.\r\n    /// Note: the contract address is always the message sender.\r\n    /// @param _operator The address which called `safeTransferFrom` function\r\n    /// @param _from The address which previously owned the token\r\n    /// @param _tokenId The NFT identifier which is being transferred\r\n    /// @param _data Additional data with no specified format\r\n    /// @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n    function onERC721Received(\r\n        address _operator,\r\n        address _from,\r\n        uint256 _tokenId,\r\n        bytes _data\r\n    )\r\n        public\r\n        returns(bytes4)\r\n    {\r\n        _operator;\r\n        _from;\r\n        _tokenId;\r\n        _data;\r\n\r\n        // emit ERC721Received(_operator, _from, _tokenId, _data, gasleft());\r\n\r\n        return ERC721_RECEIVED_FINAL;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/ERC223/ERC223Receiver.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/// @title ERC223Receiver ensures we are ERC223 compatible\r\n/// @author Christopher Scott\r\ncontract ERC223Receiver {\r\n    \r\n    bytes4 public constant ERC223_ID = 0xc0ee0b8a;\r\n\r\n    struct TKN {\r\n        address sender;\r\n        uint value;\r\n        bytes data;\r\n        bytes4 sig;\r\n    }\r\n    \r\n    /// @notice tokenFallback is called from an ERC223 compatible contract\r\n    /// @param _from the address from which the token was sent\r\n    /// @param _value the amount of tokens sent\r\n    /// @param _data the data sent with the transaction\r\n    function tokenFallback(address _from, uint _value, bytes _data) public pure {\r\n        _from;\r\n        _value;\r\n        _data;\r\n    //   TKN memory tkn;\r\n    //   tkn.sender = _from;\r\n    //   tkn.value = _value;\r\n    //   tkn.data = _data;\r\n    //   uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\r\n    //   tkn.sig = bytes4(u);\r\n      \r\n      /* tkn variable is analogue of msg variable of Ether transaction\r\n      *  tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\r\n      *  tkn.value the number of tokens that were sent   (analogue of msg.value)\r\n      *  tkn.data is data of token transaction   (analogue of msg.data)\r\n      *  tkn.sig is 4 bytes signature of function\r\n      *  if data of token transaction is a function execution\r\n      */\r\n\r\n    }\r\n}\r\n\r\n// File: contracts/ERC1271/ERC1271.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\ncontract ERC1271 {\r\n\r\n    /// @dev bytes4(keccak256(\"isValidSignature(bytes32,bytes)\")\r\n    bytes4 internal constant ERC1271_VALIDSIGNATURE = 0x1626ba7e;\r\n\r\n    /// @dev Should return whether the signature provided is valid for the provided data\r\n    /// @param hash 32-byte hash of the data that is signed\r\n    /// @param _signature Signature byte array associated with _data\r\n    ///  MUST return the bytes4 magic value 0x1626ba7e when function passes.\r\n    ///  MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\r\n    ///  MUST allow external calls\r\n    function isValidSignature(\r\n        bytes32 hash, \r\n        bytes _signature)\r\n        external\r\n        view \r\n        returns (bytes4);\r\n}\r\n\r\n// File: contracts/ECDSA.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/// @title ECDSA is a library that contains useful methods for working with ECDSA signatures\r\nlibrary ECDSA {\r\n\r\n    /// @notice Extracts the r, s, and v components from the `sigData` field starting from the `offset`\r\n    /// @dev Note: does not do any bounds checking on the arguments!\r\n    /// @param sigData the signature data; could be 1 or more packed signatures.\r\n    /// @param offset the offset in sigData from which to start unpacking the signature components.\r\n    function extractSignature(bytes sigData, uint256 offset) internal pure returns  (bytes32 r, bytes32 s, uint8 v) {\r\n        // Divide the signature in r, s and v variables\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n             let dataPointer := add(sigData, offset)\r\n             r := mload(add(dataPointer, 0x20))\r\n             s := mload(add(dataPointer, 0x40))\r\n             v := byte(0, mload(add(dataPointer, 0x60)))\r\n        }\r\n    \r\n        return (r, s, v);\r\n    }\r\n}\r\n\r\n// File: contracts/Wallet/CoreWallet.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title Core Wallet\r\n/// @notice A basic smart contract wallet with cosigner functionality. The notion of \"cosigner\" is\r\n///  the simplest possible multisig solution, a two-of-two signature scheme. It devolves nicely\r\n///  to \"one-of-one\" (i.e. singlesig) by simply having the cosigner set to the same value as\r\n///  the main signer.\r\n/// \r\n///  Most \"advanced\" functionality (deadman's switch, multiday recovery flows, blacklisting, etc)\r\n///  can be implemented externally to this smart contract, either as an additional smart contract\r\n///  (which can be tracked as a signer without cosigner, or as a cosigner) or as an off-chain flow\r\n///  using a public/private key pair as cosigner. Of course, the basic cosigning functionality could\r\n///  also be implemented in this way, but (A) the complexity and gas cost of two-of-two multisig (as\r\n///  implemented here) is negligable even if you don't need the cosigner functionality, and\r\n///  (B) two-of-two multisig (as implemented here) handles a lot of really common use cases, most\r\n///  notably third-party gas payment and off-chain blacklisting and fraud detection.\r\ncontract CoreWallet is ERC721Receivable, ERC223Receiver, ERC1271  {\r\n\r\n    using ECDSA for bytes;\r\n\r\n    /// @notice We require that presigned transactions use the EIP-191 signing format.\r\n    ///  See that EIP for more info: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-191.md\r\n    byte public constant EIP191_VERSION_DATA = byte(0);\r\n    byte public constant EIP191_PREFIX = byte(0x19);\r\n\r\n    /// @notice This is the version of the contract.\r\n    string public constant VERSION = \"1.0.0\";\r\n\r\n    /// @notice A pre-shifted \"1\", used to increment the authVersion, so we can \"prepend\"\r\n    ///  the authVersion to an address (for lookups in the authorizations mapping)\r\n    ///  by using the '+' operator (which is cheaper than a shift and a mask). See the\r\n    ///  comment on the `authorizations` variable for how this is used.\r\n    uint256 public constant AUTH_VERSION_INCREMENTOR = (1 << 160);\r\n    \r\n    /// @notice The pre-shifted authVersion (to get the current authVersion as an integer,\r\n    ///  shift this value right by 160 bits). Starts as `1 << 160` (`AUTH_VERSION_INCREMENTOR`)\r\n    ///  See the comment on the `authorizations` variable for how this is used.\r\n    uint256 public authVersion;\r\n\r\n    /// @notice A mapping containing all of the addresses that are currently authorized to manage\r\n    ///  the assets owned by this wallet.\r\n    ///\r\n    ///  The keys in this mapping are authorized addresses with a version number prepended,\r\n    ///  like so: (authVersion,96)(address,160). The current authVersion MUST BE included\r\n    ///  for each look-up; this allows us to effectively clear the entire mapping of its\r\n    ///  contents merely by incrementing the authVersion variable. (This is important for\r\n    ///  the emergencyRecovery() method.) Inspired by https://ethereum.stackexchange.com/a/42540\r\n    ///\r\n    ///  The values in this mapping are 256bit words, whose lower 20 bytes constitute \"cosigners\"\r\n    ///  for each address. If an address maps to itself, then that address is said to have no cosigner.\r\n    ///\r\n    ///  The upper 12 bytes are reserved for future meta-data purposes.  The meta-data could refer\r\n    ///  to the key (authorized address) or the value (cosigner) of the mapping.\r\n    ///\r\n    ///  Addresses that map to a non-zero cosigner in the current authVersion are called\r\n    ///  \"authorized addresses\".\r\n    mapping(uint256 => uint256) public authorizations;\r\n\r\n    /// @notice A per-key nonce value, incremented each time a transaction is processed with that key.\r\n    ///  Used for replay prevention. The nonce value in the transaction must exactly equal the current\r\n    ///  nonce value in the wallet for that key. (This mirrors the way Ethereum's transaction nonce works.)\r\n    mapping(address => uint256) public nonces;\r\n\r\n    /// @notice A special address that is authorized to call `emergencyRecovery()`. That function\r\n    ///  resets ALL authorization for this wallet, and must therefore be treated with utmost security.\r\n    ///  Reasonable choices for recoveryAddress include:\r\n    ///       - the address of a private key in cold storage\r\n    ///       - a physically secured hardware wallet\r\n    ///       - a multisig smart contract, possibly with a time-delayed challenge period\r\n    ///       - the zero address, if you like performing without a safety net ;-)\r\n    address public recoveryAddress;\r\n\r\n    /// @notice Used to track whether or not this contract instance has been initialized. This\r\n    ///  is necessary since it is common for this wallet smart contract to be used as the \"library\r\n    ///  code\" for an clone contract. See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1167.md\r\n    ///  for more information about clone contracts.\r\n    bool public initialized;\r\n    \r\n    /// @notice Used to decorate methods that can only be called directly by the recovery address.\r\n    modifier onlyRecoveryAddress() {\r\n        require(msg.sender == recoveryAddress, \"sender must be recovery address\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Used to decorate the `init` function so this can only be called one time. Necessary\r\n    ///  since this contract will often be used as a \"clone\". (See above.)\r\n    modifier onlyOnce() {\r\n        require(!initialized, \"must not already be initialized\");\r\n        initialized = true;\r\n        _;\r\n    }\r\n    \r\n    /// @notice Used to decorate methods that can only be called indirectly via an `invoke()` method.\r\n    ///  In practice, it means that those methods can only be called by a signer/cosigner\r\n    ///  pair that is currently authorized. Theoretically, we could factor out the\r\n    ///  signer/cosigner verification code and use it explicitly in this modifier, but that\r\n    ///  would either result in duplicated code, or additional overhead in the invoke()\r\n    ///  calls (due to the stack manipulation for calling into the shared verification function).\r\n    ///  Doing it this way makes calling the administration functions more expensive (since they\r\n    ///  go through a explict call() instead of just branching within the contract), but it\r\n    ///  makes invoke() more efficient. We assume that invoke() will be used much, much more often\r\n    ///  than any of the administration functions.\r\n    modifier onlyInvoked() {\r\n        require(msg.sender == address(this), \"must be called from `invoke()`\");\r\n        _;\r\n    }\r\n    \r\n    /// @notice Emitted when an authorized address is added, removed, or modified. When an\r\n    ///  authorized address is removed (\"deauthorized\"), cosigner will be address(0) in\r\n    ///  this event.\r\n    ///  \r\n    ///  NOTE: When emergencyRecovery() is called, all existing addresses are deauthorized\r\n    ///  WITHOUT Authorized(addr, 0) being emitted. If you are keeping an off-chain mirror of\r\n    ///  authorized addresses, you must also watch for EmergencyRecovery events.\r\n    /// @dev hash is 0xf5a7f4fb8a92356e8c8c4ae7ac3589908381450500a7e2fd08c95600021ee889\r\n    /// @param authorizedAddress the address to authorize or unauthorize\r\n    /// @param cosigner the 2-of-2 signatory (optional).\r\n    event Authorized(address authorizedAddress, uint256 cosigner);\r\n    \r\n    /// @notice Emitted when an emergency recovery has been performed. If this event is fired,\r\n    ///  ALL previously authorized addresses have been deauthorized and the only authorized\r\n    ///  address is the authorizedAddress indicated in this event.\r\n    /// @dev hash is 0xe12d0bbeb1d06d7a728031056557140afac35616f594ef4be227b5b172a604b5\r\n    /// @param authorizedAddress the new authorized address\r\n    /// @param cosigner the cosigning address for `authorizedAddress`\r\n    event EmergencyRecovery(address authorizedAddress, uint256 cosigner);\r\n\r\n    /// @notice Emitted when the recovery address changes. Either (but not both) of the\r\n    ///  parameters may be zero.\r\n    /// @dev hash is 0x568ab3dedd6121f0385e007e641e74e1f49d0fa69cab2957b0b07c4c7de5abb6\r\n    /// @param previousRecoveryAddress the previous recovery address\r\n    /// @param newRecoveryAddress the new recovery address\r\n    event RecoveryAddressChanged(address previousRecoveryAddress, address newRecoveryAddress);\r\n\r\n    /// @dev Emitted when this contract receives a non-zero amount ether via the fallback function\r\n    ///  (i.e. This event is not fired if the contract receives ether as part of a method invocation)\r\n    /// @param from the address which sent you ether\r\n    /// @param value the amount of ether sent\r\n    event Received(address from, uint value);\r\n\r\n    /// @notice Emitted whenever a transaction is processed sucessfully from this wallet. Includes\r\n    ///  both simple send ether transactions, as well as other smart contract invocations.\r\n    /// @dev hash is 0x101214446435ebbb29893f3348e3aae5ea070b63037a3df346d09d3396a34aee\r\n    /// @param hash The hash of the entire operation set. 0 is returned when emitted from `invoke0()`.\r\n    /// @param result A bitfield of the results of the operations. A bit of 0 means success, and 1 means failure.\r\n    /// @param numOperations A count of the number of operations processed\r\n    event InvocationSuccess(\r\n        bytes32 hash,\r\n        uint256 result,\r\n        uint256 numOperations\r\n    );\r\n\r\n    /// @notice The shared initialization code used to setup the contract state regardless of whether or\r\n    ///  not the clone pattern is being used.\r\n    /// @param _authorizedAddress the initial authorized address, must not be zero!\r\n    /// @param _cosigner the initial cosigning address for `_authorizedAddress`, can be equal to `_authorizedAddress`\r\n    /// @param _recoveryAddress the initial recovery address for the wallet, can be address(0)\r\n    function init(address _authorizedAddress, uint256 _cosigner, address _recoveryAddress) public onlyOnce {\r\n        require(_authorizedAddress != _recoveryAddress, \"Do not use the recovery address as an authorized address.\");\r\n        require(address(_cosigner) != _recoveryAddress, \"Do not use the recovery address as a cosigner.\");\r\n        require(_authorizedAddress != address(0), \"Authorized addresses must not be zero.\");\r\n        require(address(_cosigner) != address(0), \"Initial cosigner must not be zero.\");\r\n        \r\n        recoveryAddress = _recoveryAddress;\r\n        // set initial authorization value\r\n        authVersion = AUTH_VERSION_INCREMENTOR;\r\n        // add initial authorized address\r\n        authorizations[authVersion + uint256(_authorizedAddress)] = _cosigner;\r\n        \r\n        emit Authorized(_authorizedAddress, _cosigner);\r\n    }\r\n\r\n    /// @notice The fallback function, invoked whenever we receive a transaction that doesn't call any of our\r\n    ///  named functions. In particular, this method is called when we are the target of a simple send transaction\r\n    ///  or when someone tries to call a method that we don't implement. We assume that a \"correct\" invocation of\r\n    ///  this method only occurs when someone is trying to transfer ether to this wallet, in which case and the\r\n    ///  `msg.data.length` will be 0.\r\n    ///\r\n    ///  NOTE: Some smart contracts send 0 eth as part of a more complex\r\n    ///  operation (-cough- CryptoKitties -cough-) ; ideally, we'd `require(msg.value > 0)` here, but to work\r\n    ///  with those kinds of smart contracts, we accept zero sends and just skip logging in that case.\r\n    function() external payable {\r\n        require(msg.data.length == 0, \"Invalid transaction.\");\r\n        if (msg.value > 0) {\r\n            emit Received(msg.sender, msg.value);\r\n        }\r\n    }\r\n    \r\n    /// @notice Configures an authorizable address. Can be used in four ways:\r\n    ///   - Add a new signer/cosigner pair (cosigner must be non-zero)\r\n    ///   - Set or change the cosigner for an existing signer (if authorizedAddress != cosigner)\r\n    ///   - Remove the cosigning requirement for a signer (if authorizedAddress == cosigner)\r\n    ///   - Remove a signer (if cosigner == address(0))\r\n    /// @dev Must be called through `invoke()`\r\n    /// @param _authorizedAddress the address to configure authorization\r\n    /// @param _cosigner the corresponding cosigning address\r\n    function setAuthorized(address _authorizedAddress, uint256 _cosigner) external onlyInvoked {\r\n        // TODO: Allowing a signer to remove itself is actually pretty terrible; it could result in the user\r\n        //  removing their only available authorized key. Unfortunately, due to how the invocation forwarding\r\n        //  works, we don't actually _know_ which signer was used to call this method, so there's no easy way\r\n        //  to prevent this.\r\n        \r\n        // TODO: Allowing the backup key to be set as an authorized address bypasses the recovery mechanisms.\r\n        //  Dapper can prevent this with offchain logic and the cosigner, but it would be nice to have \r\n        //  this enforced by the smart contract logic itself.\r\n        \r\n        require(_authorizedAddress != address(0), \"Authorized addresses must not be zero.\");\r\n        require(_authorizedAddress != recoveryAddress, \"Do not use the recovery address as an authorized address.\");\r\n        require(address(_cosigner) == address(0) || address(_cosigner) != recoveryAddress, \"Do not use the recovery address as a cosigner.\");\r\n \r\n        authorizations[authVersion + uint256(_authorizedAddress)] = _cosigner;\r\n        emit Authorized(_authorizedAddress, _cosigner);\r\n    }\r\n    \r\n    /// @notice Performs an emergency recovery operation, removing all existing authorizations and setting\r\n    ///  a sole new authorized address with optional cosigner. THIS IS A SCORCHED EARTH SOLUTION, and great\r\n    ///  care should be taken to ensure that this method is never called unless it is a last resort. See the\r\n    ///  comments above about the proper kinds of addresses to use as the recoveryAddress to ensure this method\r\n    ///  is not trivially abused.\r\n    /// @param _authorizedAddress the new and sole authorized address\r\n    /// @param _cosigner the corresponding cosigner address, can be equal to _authorizedAddress\r\n    function emergencyRecovery(address _authorizedAddress, uint256 _cosigner) external onlyRecoveryAddress {\r\n        require(_authorizedAddress != address(0), \"Authorized addresses must not be zero.\");\r\n        require(_authorizedAddress != recoveryAddress, \"Do not use the recovery address as an authorized address.\");\r\n        require(address(_cosigner) != address(0), \"The cosigner must not be zero.\");\r\n\r\n        // Incrementing the authVersion number effectively erases the authorizations mapping. See the comments\r\n        // on the authorizations variable (above) for more information.\r\n        authVersion += AUTH_VERSION_INCREMENTOR;\r\n\r\n        // Store the new signer/cosigner pair as the only remaining authorized address\r\n        authorizations[authVersion + uint256(_authorizedAddress)] = _cosigner;\r\n        emit EmergencyRecovery(_authorizedAddress, _cosigner);\r\n    }\r\n\r\n    /// @notice Sets the recovery address, which can be zero (indicating that no recovery is possible)\r\n    ///  Can be updated by any authorized address. This address should be set with GREAT CARE. See the\r\n    ///  comments above about the proper kinds of addresses to use as the recoveryAddress to ensure this\r\n    ///  mechanism is not trivially abused.\r\n    /// @dev Must be called through `invoke()`\r\n    /// @param _recoveryAddress the new recovery address\r\n    function setRecoveryAddress(address _recoveryAddress) external onlyInvoked {\r\n        require(\r\n            address(authorizations[authVersion + uint256(_recoveryAddress)]) == address(0),\r\n            \"Do not use an authorized address as the recovery address.\"\r\n        );\r\n \r\n        address previous = recoveryAddress;\r\n        recoveryAddress = _recoveryAddress;\r\n\r\n        emit RecoveryAddressChanged(previous, recoveryAddress);\r\n    }\r\n\r\n    /// @notice Allows ANY caller to recover gas by way of deleting old authorization keys after\r\n    ///  a recovery operation. Anyone can call this method to delete the old unused storage and\r\n    ///  get themselves a bit of gas refund in the bargin.\r\n    /// @dev keys must be known to caller or else nothing is refunded\r\n    /// @param _version the version of the mapping which you want to delete (unshifted)\r\n    /// @param _keys the authorization keys to delete \r\n    function recoverGas(uint256 _version, address[] _keys) external {\r\n        // TODO: should this be 0xffffffffffffffffffffffff ?\r\n        require(_version > 0 && _version < 0xffffffff, \"Invalid version number.\");\r\n        \r\n        uint256 shiftedVersion = _version << 160;\r\n\r\n        require(shiftedVersion < authVersion, \"You can only recover gas from expired authVersions.\");\r\n\r\n        for (uint256 i = 0; i < _keys.length; ++i) {\r\n            delete(authorizations[shiftedVersion + uint256(_keys[i])]);\r\n        }\r\n    }\r\n\r\n    /// @notice Should return whether the signature provided is valid for the provided data\r\n    ///  See https://github.com/ethereum/EIPs/issues/1271\r\n    /// @dev This function meets the following conditions as per the EIP:\r\n    ///  MUST return the bytes4 magic value `0x1626ba7e` when function passes.\r\n    ///  MUST NOT modify state (using `STATICCALL` for solc < 0.5, `view` modifier for solc > 0.5)\r\n    ///  MUST allow external calls\r\n    /// @param hash A 32 byte hash of the signed data.  The actual hash that is hashed however is the\r\n    ///  the following tightly packed arguments: `0x19,0x0,wallet_address,hash`\r\n    /// @param _signature Signature byte array associated with `_data`\r\n    /// @return Magic value `0x1626ba7e` upon success, 0 otherwise.\r\n    function isValidSignature(bytes32 hash, bytes _signature) external view returns (bytes4) {\r\n        \r\n        // We 'hash the hash' for the following reasons:\r\n        // 1. `hash` is not the hash of an Ethereum transaction\r\n        // 2. signature must target this wallet to avoid replaying the signature for another wallet\r\n        // with the same key\r\n        // 3. Gnosis does something similar: \r\n        // https://github.com/gnosis/safe-contracts/blob/102e632d051650b7c4b0a822123f449beaf95aed/contracts/GnosisSafe.sol\r\n        bytes32 operationHash = keccak256(\r\n            abi.encodePacked(\r\n            EIP191_PREFIX,\r\n            EIP191_VERSION_DATA,\r\n            this,\r\n            hash));\r\n\r\n        bytes32[2] memory r;\r\n        bytes32[2] memory s;\r\n        uint8[2] memory v;\r\n        address signer;\r\n        address cosigner;\r\n\r\n        // extract 1 or 2 signatures depending on length\r\n        if (_signature.length == 65) {\r\n            (r[0], s[0], v[0]) = _signature.extractSignature(0);\r\n            signer = ecrecover(operationHash, v[0], r[0], s[0]);\r\n            cosigner = signer;\r\n        } else if (_signature.length == 130) {\r\n            (r[0], s[0], v[0]) = _signature.extractSignature(0);\r\n            (r[1], s[1], v[1]) = _signature.extractSignature(65);\r\n            signer = ecrecover(operationHash, v[0], r[0], s[0]);\r\n            cosigner = ecrecover(operationHash, v[1], r[1], s[1]);\r\n        } else {\r\n            return 0;\r\n        }\r\n            \r\n        // check for valid signature\r\n        if (signer == address(0)) {\r\n            return 0;\r\n        }\r\n\r\n        // check for valid signature\r\n        if (cosigner == address(0)) {\r\n            return 0;\r\n        }\r\n\r\n        // check to see if this is an authorized key\r\n        if (address(authorizations[authVersion + uint256(signer)]) != cosigner) {\r\n            return 0;\r\n        }\r\n\r\n        return ERC1271_VALIDSIGNATURE;\r\n    }\r\n\r\n    /// @notice Query if a contract implements an interface\r\n    /// @param interfaceID The interface identifier, as specified in ERC-165\r\n    /// @dev Interface identification is specified in ERC-165. This function\r\n    ///  uses less than 30,000 gas.\r\n    /// @return `true` if the contract implements `interfaceID` and\r\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\r\n    function supportsInterface(bytes4 interfaceID) external pure returns (bool) {\r\n        // I am not sure why the linter is complaining about the whitespace\r\n        return\r\n            interfaceID == this.supportsInterface.selector || // ERC165\r\n            interfaceID == ERC721_RECEIVED_FINAL || // ERC721 Final\r\n            interfaceID == ERC721_RECEIVED_DRAFT || // ERC721 Draft\r\n            interfaceID == ERC223_ID || // ERC223\r\n            interfaceID == ERC1271_VALIDSIGNATURE; // ERC1271\r\n    }\r\n\r\n    /// @notice A version of `invoke()` that has no explicit signatures, and uses msg.sender\r\n    ///  as both the signer and cosigner. Will only succeed if `msg.sender` is an authorized\r\n    ///  signer for this wallet, with no cosigner, saving transaction size and gas in that case.\r\n    /// @param data The data containing the transactions to be invoked; see internalInvoke for details.\r\n    function invoke0(bytes data) external {\r\n        // The nonce doesn't need to be incremented for transactions that don't include explicit signatures;\r\n        // the built-in nonce of the native ethereum transaction will protect against replay attacks, and we\r\n        // can save the gas that would be spent updating the nonce variable\r\n\r\n        // The operation should be approved if the signer address has no cosigner (i.e. signer == cosigner)\r\n        require(address(authorizations[authVersion + uint256(msg.sender)]) == msg.sender, \"Invalid authorization.\");\r\n\r\n        internalInvoke(0, data);\r\n    }\r\n\r\n    /// @notice A version of `invoke()` that has one explicit signature which is used to derive the authorized\r\n    ///  address. Uses `msg.sender` as the cosigner.\r\n    /// @param v the v value for the signature; see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-155.md\r\n    /// @param r the r value for the signature\r\n    /// @param s the s value for the signature\r\n    /// @param nonce the nonce value for the signature\r\n    /// @param authorizedAddress the address of the authorization key; this is used here so that cosigner signatures are interchangeable\r\n    ///  between this function and `invoke2()`\r\n    /// @param data The data containing the transactions to be invoked; see internalInvoke for details.\r\n    function invoke1CosignerSends(uint8 v, bytes32 r, bytes32 s, uint256 nonce, address authorizedAddress, bytes data) external {\r\n        // check signature version\r\n        require(v == 27 || v == 28, \"Invalid signature version.\");\r\n\r\n        // calculate hash\r\n        bytes32 operationHash = keccak256(\r\n            abi.encodePacked(\r\n            EIP191_PREFIX,\r\n            EIP191_VERSION_DATA,\r\n            this,\r\n            nonce,\r\n            authorizedAddress,\r\n            data));\r\n \r\n        // recover signer\r\n        address signer = ecrecover(operationHash, v, r, s);\r\n\r\n        // check for valid signature\r\n        require(signer != address(0), \"Invalid signature.\");\r\n\r\n        // check nonce\r\n        require(nonce == nonces[signer], \"must use correct nonce\");\r\n\r\n        // check signer\r\n        require(signer == authorizedAddress, \"authorized addresses must be equal\");\r\n\r\n        // Get cosigner\r\n        address requiredCosigner = address(authorizations[authVersion + uint256(signer)]);\r\n        \r\n        // The operation should be approved if the signer address has no cosigner (i.e. signer == cosigner) or\r\n        // if the actual cosigner matches the required cosigner.\r\n        require(requiredCosigner == signer || requiredCosigner == msg.sender, \"Invalid authorization.\");\r\n\r\n        // increment nonce to prevent replay attacks\r\n        nonces[signer] = nonce + 1;\r\n\r\n        // call internal function\r\n        internalInvoke(operationHash, data);\r\n    }\r\n\r\n    /// @notice A version of `invoke()` that has one explicit signature which is used to derive the cosigning\r\n    ///  address. Uses `msg.sender` as the authorized address.\r\n    /// @param v the v value for the signature; see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-155.md\r\n    /// @param r the r value for the signature\r\n    /// @param s the s value for the signature\r\n    /// @param data The data containing the transactions to be invoked; see internalInvoke for details.\r\n    function invoke1SignerSends(uint8 v, bytes32 r, bytes32 s, bytes data) external {\r\n        // check signature version\r\n        // `ecrecover` will infact return 0 if given invalid\r\n        // so perhaps this check is redundant\r\n        require(v == 27 || v == 28, \"Invalid signature version.\");\r\n        \r\n        uint256 nonce = nonces[msg.sender];\r\n\r\n        // calculate hash\r\n        bytes32 operationHash = keccak256(\r\n            abi.encodePacked(\r\n            EIP191_PREFIX,\r\n            EIP191_VERSION_DATA,\r\n            this,\r\n            nonce,\r\n            msg.sender,\r\n            data));\r\n \r\n        // recover cosigner\r\n        address cosigner = ecrecover(operationHash, v, r, s);\r\n        \r\n        // check for valid signature\r\n        require(cosigner != address(0), \"Invalid signature.\");\r\n\r\n        // Get required cosigner\r\n        address requiredCosigner = address(authorizations[authVersion + uint256(msg.sender)]);\r\n        \r\n        // The operation should be approved if the signer address has no cosigner (i.e. signer == cosigner) or\r\n        // if the actual cosigner matches the required cosigner.\r\n        require(requiredCosigner == cosigner || requiredCosigner == msg.sender, \"Invalid authorization.\");\r\n\r\n        // increment nonce to prevent replay attacks\r\n        nonces[msg.sender] = nonce + 1;\r\n \r\n        internalInvoke(operationHash, data);\r\n    }\r\n\r\n    /// @notice A version of `invoke()` that has two explicit signatures, the first is used to derive the authorized\r\n    ///  address, the second to derive the cosigner. The value of `msg.sender` is ignored.\r\n    /// @param v the v values for the signatures\r\n    /// @param r the r values for the signatures\r\n    /// @param s the s values for the signatures\r\n    /// @param nonce the nonce value for the signature\r\n    /// @param authorizedAddress the address of the signer; forces the signature to be unique and tied to the signers nonce \r\n    /// @param data The data containing the transactions to be invoked; see internalInvoke for details.\r\n    function invoke2(uint8[2] v, bytes32[2] r, bytes32[2] s, uint256 nonce, address authorizedAddress, bytes data) external {\r\n        // check signature versions\r\n        // `ecrecover` will infact return 0 if given invalid\r\n        // so perhaps these checks are redundant\r\n        require(v[0] == 27 || v[0] == 28, \"invalid signature version v[0]\");\r\n        require(v[1] == 27 || v[1] == 28, \"invalid signature version v[1]\");\r\n \r\n        bytes32 operationHash = keccak256(\r\n            abi.encodePacked(\r\n            EIP191_PREFIX,\r\n            EIP191_VERSION_DATA,\r\n            this,\r\n            nonce,\r\n            authorizedAddress,\r\n            data));\r\n \r\n        // recover signer and cosigner\r\n        address signer = ecrecover(operationHash, v[0], r[0], s[0]);\r\n        address cosigner = ecrecover(operationHash, v[1], r[1], s[1]);\r\n\r\n        // check for valid signatures\r\n        require(signer != address(0), \"Invalid signature for signer.\");\r\n        require(cosigner != address(0), \"Invalid signature for cosigner.\");\r\n\r\n        // check signer address\r\n        require(signer == authorizedAddress, \"authorized addresses must be equal\");\r\n\r\n        // check nonces\r\n        require(nonce == nonces[signer], \"must use correct nonce for signer\");\r\n\r\n        // Get Mapping\r\n        address requiredCosigner = address(authorizations[authVersion + uint256(signer)]);\r\n        \r\n        // The operation should be approved if the signer address has no cosigner (i.e. signer == cosigner) or\r\n        // if the actual cosigner matches the required cosigner.\r\n        require(requiredCosigner == signer || requiredCosigner == cosigner, \"Invalid authorization.\");\r\n\r\n        // increment nonce to prevent replay attacks\r\n        nonces[signer]++;\r\n\r\n        internalInvoke(operationHash, data);\r\n    }\r\n\r\n    /// @dev Internal invoke call, \r\n    /// @param operationHash The hash of the operation\r\n    /// @param data The data to send to the `call()` operation\r\n    ///  The data is prefixed with a global 1 byte revert flag\r\n    ///  If revert is 1, then any revert from a `call()` operation is rethrown.\r\n    ///  Otherwise, the error is recorded in the `result` field of the `InvocationSuccess` event.\r\n    ///  Immediately following the revert byte (no padding), the data format is then is a series\r\n    ///  of 1 or more tightly packed tuples:\r\n    ///  `<target(20),amount(32),datalength(32),data>`\r\n    ///  If `datalength == 0`, the data field must be omitted\r\n    function internalInvoke(bytes32 operationHash, bytes data) internal {\r\n        // keep track of the number of operations processed\r\n        uint256 numOps;\r\n        // keep track of the result of each operation as a bit\r\n        uint256 result;\r\n\r\n        // We need to store a reference to this string as a variable so we can use it as an argument to\r\n        // the revert call from assembly.\r\n        string memory invalidLengthMessage = \"Data field too short\";\r\n        string memory callFailed = \"Call failed\";\r\n\r\n        // At an absolute minimum, the data field must be at least 85 bytes\r\n        // <revert(1), to_address(20), value(32), data_length(32)>\r\n        require(data.length >= 85, invalidLengthMessage);\r\n\r\n        // Forward the call onto its actual target. Note that the target address can be `self` here, which is\r\n        // actually the required flow for modifying the configuration of the authorized keys and recovery address.\r\n        //\r\n        // The assembly code below loads data directly from memory, so the enclosing function must be marked `internal`\r\n        assembly {\r\n            // A cursor pointing to the revert flag, starts after the length field of the data object\r\n            let memPtr := add(data, 32)\r\n\r\n            // The revert flag is the leftmost byte from memPtr\r\n            let revertFlag := byte(0, mload(memPtr))\r\n\r\n            // A pointer to the end of the data object\r\n            let endPtr := add(memPtr, mload(data))\r\n\r\n            // Now, memPtr is a cursor pointing to the begining of the current sub-operation\r\n            memPtr := add(memPtr, 1)\r\n\r\n            // Loop through data, parsing out the various sub-operations\r\n            for { } lt(memPtr, endPtr) { } {\r\n                // Load the length of the call data of the current operation\r\n                // 52 = to(20) + value(32)\r\n                let len := mload(add(memPtr, 52))\r\n                \r\n                // Compute a pointer to the end of the current operation\r\n                // 84 = to(20) + value(32) + size(32)\r\n                let opEnd := add(len, add(memPtr, 84))\r\n\r\n                // Bail if the current operation's data overruns the end of the enclosing data buffer\r\n                // NOTE: Comment out this bit of code and uncomment the next section if you want\r\n                // the solidity-coverage tool to work.\r\n                // See https://github.com/sc-forks/solidity-coverage/issues/287\r\n                if gt(opEnd, endPtr) {\r\n                    // The computed end of this operation goes past the end of the data buffer. Not good!\r\n                    revert(add(invalidLengthMessage, 32), mload(invalidLengthMessage))\r\n                }\r\n                // NOTE: Code that is compatible with solidity-coverage\r\n                // switch gt(opEnd, endPtr)\r\n                // case 1 {\r\n                //     revert(add(invalidLengthMessage, 32), mload(invalidLengthMessage))\r\n                // }\r\n\r\n                // This line of code packs in a lot of functionality!\r\n                //  - load the target address from memPtr, the address is only 20-bytes but mload always grabs 32-bytes,\r\n                //    so we have to divide the result by 2^96 to effectively right-shift by 12 bytes.\r\n                //  - load the value field, stored at memPtr+20\r\n                //  - pass a pointer to the call data, stored at memPtr+84\r\n                //  - use the previously loaded len field as the size of the call data\r\n                //  - make the call (passing all remaining gas to the child call)\r\n                //  - check the result (0 == reverted)\r\n                if eq(0, call(gas, div(mload(memPtr), exp(2, 96)), mload(add(memPtr, 20)), add(memPtr, 84), len, 0, 0)) {\r\n                    \r\n                    switch revertFlag\r\n                    case 1 {\r\n                        revert(add(callFailed, 32), mload(callFailed))\r\n                    }\r\n                    default {\r\n                        // mark this operation as failed\r\n                        // create the appropriate bit, 'or' with previous\r\n                        result := or(result, exp(2, numOps))\r\n                    }\r\n                }\r\n\r\n                // increment our counter\r\n                numOps := add(numOps, 1)\r\n             \r\n                // Update mem pointer to point to the next sub-operation\r\n                memPtr := opEnd\r\n            }\r\n        }\r\n\r\n        // emit single event upon success\r\n        emit InvocationSuccess(operationHash, result, numOps);\r\n    }\r\n}\r\n\r\n// File: contracts/Wallet/CloneableWallet.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/// @title Cloneable Wallet\r\n/// @notice This contract represents a complete but non working wallet.  \r\n///  It is meant to be deployed and serve as the contract that you clone\r\n///  in an EIP 1167 clone setup.\r\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1167.md\r\n/// @dev Currently, we are seeing approximatley 933 gas overhead for using\r\n///  the clone wallet; use `FullWallet` if you think users will overtake\r\n///  the transaction threshold over the lifetime of the wallet.\r\ncontract CloneableWallet is CoreWallet {\r\n\r\n    /// @dev An empty constructor that deploys a NON-FUNCTIONAL version\r\n    ///  of `CoreWallet`\r\n    constructor () public {\r\n        initialized = true;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC223_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EIP191_VERSION_DATA\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes1\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"authorizations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"v\",\"type\":\"uint8[2]\"},{\"name\":\"r\",\"type\":\"bytes32[2]\"},{\"name\":\"s\",\"type\":\"bytes32[2]\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"authorizedAddress\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"invoke2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_authorizedAddress\",\"type\":\"address\"},{\"name\":\"_cosigner\",\"type\":\"uint256\"},{\"name\":\"_recoveryAddress\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recoveryAddress\",\"type\":\"address\"}],\"name\":\"setRecoveryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"invoke1SignerSends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recoveryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_authorizedAddress\",\"type\":\"address\"},{\"name\":\"_cosigner\",\"type\":\"uint256\"}],\"name\":\"emergencyRecovery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AUTH_VERSION_INCREMENTOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"authorizedAddress\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"invoke1CosignerSends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"invoke0\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_authorizedAddress\",\"type\":\"address\"},{\"name\":\"_cosigner\",\"type\":\"uint256\"}],\"name\":\"setAuthorized\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EIP191_PREFIX\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes1\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_version\",\"type\":\"uint256\"},{\"name\":\"_keys\",\"type\":\"address[]\"}],\"name\":\"recoverGas\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"authorizedAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cosigner\",\"type\":\"uint256\"}],\"name\":\"Authorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"authorizedAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cosigner\",\"type\":\"uint256\"}],\"name\":\"EmergencyRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousRecoveryAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newRecoveryAddress\",\"type\":\"address\"}],\"name\":\"RecoveryAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"numOperations\",\"type\":\"uint256\"}],\"name\":\"InvocationSuccess\",\"type\":\"event\"}]", "ContractName": "CloneableWallet", "CompilerVersion": "v0.4.25+commit.59dbf8f1", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://91a6b5865e883a2e9be38c5581387c160b05ecf81713af1511c2d40e2f11d1bf"}