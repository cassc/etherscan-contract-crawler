{"SourceCode": "pragma solidity ^0.4.25;\r\n\r\n/**\r\n\r\n\r\n\t\t\t\t\t.----------------.  .----------------.  .----------------.  .----------------. \r\n\t\t\t\t\t| .--------------. || .--------------. || .--------------. || .--------------. |\r\n\t\t\t\t\t| |  ____  ____  | || |     ____     | || |   _____      | || |  ________    | |\r\n\t\t\t\t\t| | |_   ||   _| | || |   .'    `.   | || |  |_   _|     | || | |_   ___ `.  | |\r\n\t\t\t\t\t| |   | |__| |   | || |  /  .--.  \\  | || |    | |       | || |   | |   `. \\ | |\r\n\t\t\t\t\t| |   |  __  |   | || |  | |    | |  | || |    | |   _   | || |   | |    | | | |\r\n\t\t\t\t\t| |  _| |  | |_  | || |  \\  `--'  /  | || |   _| |__/ |  | || |  _| |___.' / | |\r\n\t\t\t\t\t| | |____||____| | || |   `.____.'   | || |  |________|  | || | |________.'  | |\r\n\t\t\t\t\t| |              | || |              | || |              | || |              | |\r\n\t\t\t\t\t| '--------------' || '--------------' || '--------------' || '--------------' |\r\n\t\t\t\t\t'----------------'  '----------------'  '----------------'  '----------------' \r\n\r\n \r\n*/\r\n\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint _value);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint _value);\r\n    event Burn(address indexed from, address indexed to, uint _value);\r\n}\r\n\r\ncontract OOOOOO {\r\n    address public owner;\r\n\t\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\tmodifier restricted {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\t\r\n}\r\n\r\ncontract HOLD is ERC20Interface, OOOOOO {\r\n\t\r\n    string \tpublic symbol;\r\n    string \tpublic name;\r\n    uint8 \tpublic decimals;\r\n    uint256 private _totalSupply;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\t\r\n\t/*==============================\r\n    =          CONSTRUCTOR         =\r\n    ==============================*/  \r\n\t\r\n    constructor() public {\r\n        symbol = \"HOLD\";\r\n        name = \"HOLDPLATFORM\";\r\n        decimals = 18;\r\n        _totalSupply = 20000000000000000000000000;\t// 20,000,000\r\n\t\t\r\n        balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    function transfer(address to, uint256 _value) public returns (bool success) {\r\n\t\tif (to == 0x0) revert();                               \r\n\t\tif (_value <= 0) revert(); \r\n        if (balances[msg.sender] < _value) revert();           \t\t\r\n        if (balances[to] + _value < balances[to]) revert(); \t\t\r\n\t\t\r\n        balances[msg.sender] \t\t= sub(balances[msg.sender], _value);\r\n        balances[to] \t\t\t\t= add(balances[to], _value);\r\n        emit Transfer(msg.sender, to, _value);\r\n        return true;\r\n    }\r\n\t\r\n    function approve(address spender, uint256 _value) public returns (bool success) {\r\n\t\tif (_value <= 0) revert(); \r\n        allowed[msg.sender][spender] = _value;\r\n        emit Approval(msg.sender, spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 _value) public returns (bool success) {\r\n\t\tif (to == 0x0) revert();                                \t\t\t\t\t\t\r\n\t\tif (_value <= 0) revert(); \r\n        if (balances[from] < _value) revert();                 \t\t\t\t\t\r\n        if (balances[to]  + _value < balances[to]) revert();  \t\t\t\t\t\r\n        if (_value > allowed[from][msg.sender]) revert();     \t\t\t\t\t\t\r\n\t\t\r\n        balances[from] \t\t\t\t= sub(balances[from], _value);\r\n        allowed[from][msg.sender] \t= sub(allowed[from][msg.sender], _value);\r\n        balances[to] \t\t\t\t= add(balances[to], _value);\r\n        emit Transfer(from, to, _value);\r\n        return true;\r\n    }\r\n\t\r\n\tfunction burn(uint256 _value) public returns (bool success) {\r\n        if (balances[msg.sender] < _value) revert();            \t\t\t\t\t\t\r\n\t\tif (_value <= 0) revert(); \r\n        balances[msg.sender] \t= sub(balances[msg.sender], _value);                     \r\n        _totalSupply \t\t\t= sub(_totalSupply, _value);\r\n\t\t\r\n        emit Transfer(msg.sender, address(0), _value);\t\t\r\n        emit Burn(msg.sender, address(0), _value);\t\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(address TokenAddress, address spender) public constant returns (uint remaining) {\r\n        return allowed[TokenAddress][spender];\r\n    }\r\n\t\r\n\tfunction totalSupply() public constant returns (uint) {\r\n        return _totalSupply  - balances[address(0)];\r\n    }\r\n\r\n    function balanceOf(address TokenAddress) public constant returns (uint balance) {\r\n        return balances[TokenAddress];\r\n\t\t\r\n    }\r\n\t\r\n\t\r\n\t/*==============================\r\n    =           ADDITIONAL         =\r\n    ==============================*/ \r\n\t\r\n\r\n    function () public payable {\r\n    }\r\n\t\r\n    function WithdrawEth() restricted public {\r\n        require(address(this).balance > 0); \r\n\t\tuint256 amount = address(this).balance;\r\n        \r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    function TransferERC20Token(address tokenAddress, uint256 _value) public restricted returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, _value);\r\n    }\r\n\t\r\n\t\r\n\t/*==============================\r\n    =      SAFE MATH FUNCTIONS     =\r\n    ==============================*/  \t\r\n\t\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b; \r\n\t\trequire(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b > 0); \r\n\t\tuint256 c = a / b;\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b <= a);\r\n\t\tuint256 c = a - b;\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a);\r\n\t\treturn c;\r\n\t}\r\n\t\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"TokenAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"WithdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"TokenAddress\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]", "ContractName": "HOLD", "CompilerVersion": "v0.4.25+commit.59dbf8f1", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://9d7bb8325732db28c4805afbd7be60b35015fa995a285a1ee03583bda58973a5"}