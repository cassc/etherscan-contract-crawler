{"SourceCode": "// SPDX-License-Identifier: MIT\r\n/**\r\n\r\n\r\nhttps://t.me/grokbonk\r\n\r\n\r\n**/\r\n\r\npragma solidity 0.8.18;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\ncontract Token is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private bots;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n    bool public transferDelayEnabled = true;\r\n    address payable public _taxWallet;\r\n\r\n    uint256 private _initialBuyTax = 20;\r\n    uint256 private _initialSellTax = 35;\r\n    uint256 private _finalBuyTax = 2;\r\n    uint256 private _finalSellTax = 2;\r\n    uint256 private _reduceBuyTaxAt = 25;\r\n    uint256 private _reduceSellTaxAt = 30;\r\n    uint256 private _preventSwapBefore = 1;\r\n    uint256 private _buyCount = 0;\r\n\r\n    uint8 private _decimals;\r\n    uint256 private _tTotal;\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    uint256 public _maxTxAmount;\r\n    uint256 public _maxWalletSize;\r\n    uint256 public _taxSwapThreshold;\r\n    uint256 public _maxTaxSwap;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n\r\n    event MaxTxAmountUpdated(uint256 _maxTxAmount);\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor(\r\n        uint256 _conSupply,\r\n        uint8 _conDecimals,\r\n        string memory _conName,\r\n        string memory _conSymbol,\r\n        address owneraddy\r\n    ) {\r\n        _decimals = _conDecimals;\r\n        _tTotal = _conSupply * 10**_decimals;\r\n        _name = _conName;\r\n        _symbol = _conSymbol;\r\n        _taxWallet = payable(owneraddy);\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_taxWallet] = true;\r\n\r\n        _maxTxAmount = 2 * (_conSupply / 100) * 10**_decimals;\r\n        _maxWalletSize = 2 * (_conSupply / 100) * 10**_decimals;\r\n        _taxSwapThreshold = 2 * (_conSupply / 100) * 10**_decimals;\r\n        _maxTaxSwap = 2 * (_conSupply / 100) * 10**_decimals;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 taxAmount = 0;\r\n        if (from != owner() && to != owner()) {\r\n            require(!bots[from] && !bots[to]);\r\n            taxAmount = amount\r\n                .mul(\r\n                    (_buyCount > _reduceBuyTaxAt)\r\n                        ? _finalBuyTax\r\n                        : _initialBuyTax\r\n                )\r\n                .div(100);\r\n\r\n            if (transferDelayEnabled) {\r\n                if (\r\n                    to != address(uniswapV2Router) &&\r\n                    to != address(uniswapV2Pair)\r\n                ) {\r\n                    require(\r\n                        _holderLastTransferTimestamp[tx.origin] < block.number,\r\n                        \"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\"\r\n                    );\r\n                    _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                }\r\n            }\r\n\r\n            if (\r\n                from == uniswapV2Pair &&\r\n                to != address(uniswapV2Router) &&\r\n                !_isExcludedFromFee[to]\r\n            ) {\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                require(\r\n                    balanceOf(to) + amount <= _maxWalletSize,\r\n                    \"Exceeds the maxWalletSize.\"\r\n                );\r\n                _buyCount++;\r\n            }\r\n\r\n            if (to == uniswapV2Pair && from != address(this)) {\r\n                taxAmount = amount\r\n                    .mul(\r\n                        (_buyCount > _reduceSellTaxAt)\r\n                            ? _finalSellTax\r\n                            : _initialSellTax\r\n                    )\r\n                    .div(100);\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (\r\n                !inSwap &&\r\n                to == uniswapV2Pair &&\r\n                swapEnabled &&\r\n                contractTokenBalance > _taxSwapThreshold &&\r\n                _buyCount > _preventSwapBefore\r\n            ) {\r\n                swapTokensForEth(\r\n                    min(amount, min(contractTokenBalance, _maxTaxSwap))\r\n                );\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if (contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (taxAmount > 0) {\r\n            _balances[address(this)] = _balances[address(this)].add(taxAmount);\r\n            emit Transfer(from, address(this), taxAmount);\r\n        }\r\n        _balances[from] = _balances[from].sub(amount);\r\n        _balances[to] = _balances[to].add(amount.sub(taxAmount));\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return (a > b) ? b : a;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function removeLimits() external onlyOwner {\r\n        _maxTxAmount = _tTotal;\r\n        _maxWalletSize = _tTotal;\r\n        transferDelayEnabled = false;\r\n        emit MaxTxAmountUpdated(_tTotal);\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n\r\n    function addBots(address[] memory bots_) public onlyOwner {\r\n        for (uint256 i = 0; i < bots_.length; i++) {\r\n            bots[bots_[i]] = true;\r\n        }\r\n    }\r\n\r\n    function delBots(address[] memory notbot) public onlyOwner {\r\n        for (uint256 i = 0; i < notbot.length; i++) {\r\n            bots[notbot[i]] = false;\r\n        }\r\n    }\r\n\r\n    function isBot(address a) public view returns (bool) {\r\n        return bots[a];\r\n    }\r\n\r\n    function openTrading() external onlyOwner {\r\n        require(!tradingOpen, \"trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\r\n            address(this),\r\n            uniswapV2Router.WETH()\r\n        );\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            balanceOf(address(this)),\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n        IERC20(uniswapV2Pair).approve(\r\n            address(uniswapV2Router),\r\n            type(uint256).max\r\n        );\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n    }\r\n\r\n    function reduceFee(uint256 _newFee) external {\r\n        require(_msgSender() == _taxWallet);\r\n        require(_newFee <= _finalBuyTax && _newFee <= _finalSellTax);\r\n        _finalBuyTax = _newFee;\r\n        _finalSellTax = _newFee;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function manualSwap() external {\r\n        require(_msgSender() == _taxWallet);\r\n        uint256 tokenBalance = balanceOf(address(this));\r\n        if (tokenBalance > 0) {\r\n            swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance = address(this).balance;\r\n        if (ethBalance > 0) {\r\n            sendETHToFee(ethBalance);\r\n        }\r\n    }\r\n}\r\n\r\ncontract GrokPad is Ownable {\r\n    using SafeMath for uint256;\r\n    address payable public Recipient1;\r\n    address payable public Recipient2;\r\n    address payable public Recipient3;\r\n    address payable public Recipient4;\r\n    address payable public Recipient5;\r\n    address payable public Recipient6;\r\n    address payable public Recipient7;\r\n    address payable public Recipient8;\r\n    address payable public Recipient9;\r\n\r\n    function setRecipient1(address payable _recipient) public onlyOwner {\r\n        Recipient1 = _recipient;\r\n    }\r\n\r\n    function setRecipient2(address payable _recipient) public onlyOwner {\r\n        Recipient2 = _recipient;\r\n    }\r\n\r\n    function setRecipient3(address payable _recipient) public onlyOwner {\r\n        Recipient3 = _recipient;\r\n    }\r\n\r\n    function setRecipient4(address payable _recipient) public onlyOwner {\r\n        Recipient4 = _recipient;\r\n    }\r\n\r\n    function setRecipient5(address payable _recipient) public onlyOwner {\r\n        Recipient5 = _recipient;\r\n    }\r\n\r\n    function setRecipient6(address payable _recipient) public onlyOwner {\r\n        Recipient6 = _recipient;\r\n    }\r\n\r\n    function setRecipient7(address payable _recipient) public onlyOwner {\r\n        Recipient7 = _recipient;\r\n    }\r\n\r\n    function setRecipient8(address payable _recipient) public onlyOwner {\r\n        Recipient8 = _recipient;\r\n    }\r\n\r\n    function setRecipient9(address payable _recipient) public onlyOwner {\r\n        Recipient9 = _recipient;\r\n    }\r\n\r\n    // Event to log when a new token is created\r\n    event TokenCreated(address indexed owner, address indexed token);\r\n\r\n    // Function to create a new StandardToken\r\n    function createTaxToken(\r\n        uint256 _conSupply,\r\n        uint8 _conDecimals,\r\n        string memory _conName,\r\n        string memory _conSymbol,\r\n        address owneraddy\r\n    ) public payable {\r\n        require(msg.value >= 0.042069 ether, \"Insufficient payment\");\r\n        uint256 feeperuser = msg.value / 10;\r\n        // uint256 halfValue = msg.value / 2;\r\n        payable(owner()).transfer(feeperuser);\r\n        Recipient1.transfer(feeperuser);\r\n        Recipient2.transfer(feeperuser);\r\n        Recipient3.transfer(feeperuser);\r\n        Recipient4.transfer(feeperuser);\r\n        Recipient5.transfer(feeperuser);\r\n        Recipient6.transfer(feeperuser);\r\n        Recipient7.transfer(feeperuser);\r\n        Recipient8.transfer(feeperuser);\r\n        Recipient9.transfer(feeperuser);\r\n\r\n        Token newToken = new Token(\r\n            _conSupply,\r\n            _conDecimals,\r\n            _conName,\r\n            _conSymbol,\r\n            owneraddy\r\n        );\r\n\r\n        // Transfer ownership of the new token to the deployer\r\n        newToken.transferOwnership(msg.sender);\r\n        newToken.transfer(msg.sender, _conSupply * 10**_conDecimals); // Add this line\r\n\r\n        // Emit an event to log the creation of the new token\r\n        emit TokenCreated(msg.sender, address(newToken));\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Recipient1\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Recipient2\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Recipient3\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Recipient4\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Recipient5\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Recipient6\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Recipient7\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Recipient8\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Recipient9\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_conSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_conDecimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_conName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_conSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owneraddy\",\"type\":\"address\"}],\"name\":\"createTaxToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"setRecipient1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"setRecipient2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"setRecipient3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"setRecipient4\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"setRecipient5\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"setRecipient6\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"setRecipient7\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"setRecipient8\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"setRecipient9\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GrokPad", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "99999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://592ec8c8a1c5e93620e0b33f48bae38b7747e3b0f7c3bc86adc3e207c701f85a"}