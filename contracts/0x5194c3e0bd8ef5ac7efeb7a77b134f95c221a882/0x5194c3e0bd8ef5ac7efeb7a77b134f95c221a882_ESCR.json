{"SourceCode": "/**\r\n\r\nEat Sleep Compound Repeat ($ESCR) || ESCR.finance\r\n\r\nBy the people, for the people.\r\nWe invest and farm on the whole Defi ecosystem, bring infinity compound yield to $ESCR holders.\r\n\r\nSocials:\r\n\r\nTwitter: https://twitter.com/ESCRFinance\r\nTelegram: https://t.me/ESCRFinance\r\nWebsite: https://ESCR.finance\r\nMedium: https://medium.com/@ESCRFinance\r\n\r\n**/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.10 >=0.8.0 <0.9.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns (address) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns (bytes calldata) {\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n\taddress private _owner;\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\t/**\r\n\t * @dev Initializes the contract setting the deployer as the initial owner.\r\n\t */\r\n\tconstructor() {\r\n\t\t_transferOwnership(_msgSender());\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the address of the current owner.\r\n\t */\r\n\tfunction owner() public view virtual returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Throws if called by any account other than the owner.\r\n\t */\r\n\tmodifier onlyOwner() {\r\n\t\trequire(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Leaves the contract without owner. It will not be possible to call\r\n\t * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n\t *\r\n\t * NOTE: Renouncing ownership will leave the contract without an owner,\r\n\t * thereby removing any functionality that is only available to the owner.\r\n\t */\r\n\tfunction renounceOwnership() public virtual onlyOwner {\r\n\t\t_transferOwnership(address(0));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t * Can only be called by the current owner.\r\n\t */\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t\t_transferOwnership(newOwner);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t * Internal function without access restriction.\r\n\t */\r\n\tfunction _transferOwnership(address newOwner) internal virtual {\r\n\t\taddress oldOwner = _owner;\r\n\t\t_owner = newOwner;\r\n\t\temit OwnershipTransferred(oldOwner, newOwner);\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n\t/**\r\n\t * @dev Returns the amount of tokens in existence.\r\n\t */\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Returns the amount of tokens owned by `account`.\r\n\t */\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Returns the remaining number of tokens that `spender` will be\r\n\t * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n\t * zero by default.\r\n\t *\r\n\t * This value changes when {approve} or {transferFrom} are called.\r\n\t */\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n\t * that someone may use both the old and the new allowance by unfortunate\r\n\t * transaction ordering. One possible solution to mitigate this race\r\n\t * condition is to first reduce the spender's allowance to 0 and set the\r\n\t * desired value afterwards:\r\n\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t *\r\n\t * Emits an {Approval} event.\r\n\t */\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n\t * allowance mechanism. `amount` is then deducted from the caller's\r\n\t * allowance.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n\t * another (`to`).\r\n\t *\r\n\t * Note that `value` may be zero.\r\n\t */\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\t/**\r\n\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n\t * a call to {approve}. `value` is the new allowance.\r\n\t */\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n\t/**\r\n\t * @dev Returns the name of the token.\r\n\t */\r\n\tfunction name() external view returns (string memory);\r\n\r\n\t/**\r\n\t * @dev Returns the symbol of the token.\r\n\t */\r\n\tfunction symbol() external view returns (string memory);\r\n\r\n\t/**\r\n\t * @dev Returns the decimals places of the token.\r\n\t */\r\n\tfunction decimals() external view returns (uint8);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n\tmapping(address => uint256) private _balances;\r\n\r\n\tmapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n\tuint256 private _totalSupply;\r\n\r\n\tstring private _name;\r\n\tstring private _symbol;\r\n\r\n\t/**\r\n\t * @dev Sets the values for {name} and {symbol}.\r\n\t *\r\n\t * The default value of {decimals} is 18. To select a different value for\r\n\t * {decimals} you should overload it.\r\n\t *\r\n\t * All two of these values are immutable: they can only be set once during\r\n\t * construction.\r\n\t */\r\n\tconstructor(string memory name_, string memory symbol_) {\r\n\t\t_name = name_;\r\n\t\t_symbol = symbol_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the name of the token.\r\n\t */\r\n\tfunction name() public view virtual override returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the symbol of the token, usually a shorter version of the\r\n\t * name.\r\n\t */\r\n\tfunction symbol() public view virtual override returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the number of decimals used to get its user representation.\r\n\t * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n\t * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n\t *\r\n\t * Tokens usually opt for a value of 18, imitating the relationship between\r\n\t * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n\t * overridden;\r\n\t *\r\n\t * NOTE: This information is only used for _display_ purposes: it in\r\n\t * no way affects any of the arithmetic of the contract, including\r\n\t * {IERC20-balanceOf} and {IERC20-transfer}.\r\n\t */\r\n\tfunction decimals() public view virtual override returns (uint8) {\r\n\t\treturn 18;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-totalSupply}.\r\n\t */\r\n\tfunction totalSupply() public view virtual override returns (uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-balanceOf}.\r\n\t */\r\n\tfunction balanceOf(address account) public view virtual override returns (uint256) {\r\n\t\treturn _balances[account];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-transfer}.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `recipient` cannot be the zero address.\r\n\t * - the caller must have a balance of at least `amount`.\r\n\t */\r\n\tfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n\t\t_transfer(_msgSender(), recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-allowance}.\r\n\t */\r\n\tfunction allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n\t\treturn _allowances[owner][spender];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-approve}.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `spender` cannot be the zero address.\r\n\t */\r\n\tfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n\t\t_approve(_msgSender(), spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-transferFrom}.\r\n\t *\r\n\t * Emits an {Approval} event indicating the updated allowance. This is not\r\n\t * required by the EIP. See the note at the beginning of {ERC20}.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `sender` and `recipient` cannot be the zero address.\r\n\t * - `sender` must have a balance of at least `amount`.\r\n\t * - the caller must have allowance for ``sender``'s tokens of at least\r\n\t * `amount`.\r\n\t */\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) public virtual override returns (bool) {\r\n\t\t_transfer(sender, recipient, amount);\r\n\r\n\t\tuint256 currentAllowance = _allowances[sender][_msgSender()];\r\n\t\trequire(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n\t\tunchecked {\r\n\t\t\t_approve(sender, _msgSender(), currentAllowance - amount);\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n\t *\r\n\t * This is an alternative to {approve} that can be used as a mitigation for\r\n\t * problems described in {IERC20-approve}.\r\n\t *\r\n\t * Emits an {Approval} event indicating the updated allowance.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `spender` cannot be the zero address.\r\n\t */\r\n\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n\t *\r\n\t * This is an alternative to {approve} that can be used as a mitigation for\r\n\t * problems described in {IERC20-approve}.\r\n\t *\r\n\t * Emits an {Approval} event indicating the updated allowance.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `spender` cannot be the zero address.\r\n\t * - `spender` must have allowance for the caller of at least\r\n\t * `subtractedValue`.\r\n\t */\r\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n\t\tuint256 currentAllowance = _allowances[_msgSender()][spender];\r\n\t\trequire(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n\t\tunchecked {\r\n\t\t\t_approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n\t *\r\n\t * This internal function is equivalent to {transfer}, and can be used to\r\n\t * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `sender` cannot be the zero address.\r\n\t * - `recipient` cannot be the zero address.\r\n\t * - `sender` must have a balance of at least `amount`.\r\n\t */\r\n\tfunction _transfer(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) internal virtual {\r\n\t\trequire(sender != address(0), \"ERC20: transfer from the zero address\");\r\n\t\trequire(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n\t\t_beforeTokenTransfer(sender, recipient, amount);\r\n\r\n\t\tuint256 senderBalance = _balances[sender];\r\n\t\trequire(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n\t\tunchecked {\r\n\t\t\t_balances[sender] = senderBalance - amount;\r\n\t\t}\r\n\t\t_balances[recipient] += amount;\r\n\r\n\t\temit Transfer(sender, recipient, amount);\r\n\r\n\t\t_afterTokenTransfer(sender, recipient, amount);\r\n\t}\r\n\r\n\t/** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n\t * the total supply.\r\n\t *\r\n\t * Emits a {Transfer} event with `from` set to the zero address.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `account` cannot be the zero address.\r\n\t */\r\n\tfunction _mint(address account, uint256 amount) internal virtual {\r\n\t\trequire(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n\t\t_beforeTokenTransfer(address(0), account, amount);\r\n\r\n\t\t_totalSupply += amount;\r\n\t\t_balances[account] += amount;\r\n\t\temit Transfer(address(0), account, amount);\r\n\r\n\t\t_afterTokenTransfer(address(0), account, amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Destroys `amount` tokens from `account`, reducing the\r\n\t * total supply.\r\n\t *\r\n\t * Emits a {Transfer} event with `to` set to the zero address.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `account` cannot be the zero address.\r\n\t * - `account` must have at least `amount` tokens.\r\n\t */\r\n\tfunction _burn(address account, uint256 amount) internal virtual {\r\n\t\trequire(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n\t\t_beforeTokenTransfer(account, address(0), amount);\r\n\r\n\t\tuint256 accountBalance = _balances[account];\r\n\t\trequire(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n\t\tunchecked {\r\n\t\t\t_balances[account] = accountBalance - amount;\r\n\t\t}\r\n\t\t_totalSupply -= amount;\r\n\r\n\t\temit Transfer(account, address(0), amount);\r\n\r\n\t\t_afterTokenTransfer(account, address(0), amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n\t *\r\n\t * This internal function is equivalent to `approve`, and can be used to\r\n\t * e.g. set automatic allowances for certain subsystems, etc.\r\n\t *\r\n\t * Emits an {Approval} event.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `owner` cannot be the zero address.\r\n\t * - `spender` cannot be the zero address.\r\n\t */\r\n\tfunction _approve(\r\n\t\taddress owner,\r\n\t\taddress spender,\r\n\t\tuint256 amount\r\n\t) internal virtual {\r\n\t\trequire(owner != address(0), \"ERC20: approve from the zero address\");\r\n\t\trequire(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n\t\t_allowances[owner][spender] = amount;\r\n\t\temit Approval(owner, spender, amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Hook that is called before any transfer of tokens. This includes\r\n\t * minting and burning.\r\n\t *\r\n\t * Calling conditions:\r\n\t *\r\n\t * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n\t * will be transferred to `to`.\r\n\t * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n\t * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n\t * - `from` and `to` are never both zero.\r\n\t *\r\n\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n\t */\r\n\tfunction _beforeTokenTransfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t) internal virtual {}\r\n\r\n\t/**\r\n\t * @dev Hook that is called after any transfer of tokens. This includes\r\n\t * minting and burning.\r\n\t *\r\n\t * Calling conditions:\r\n\t *\r\n\t * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n\t * has been transferred to `to`.\r\n\t * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n\t * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n\t * - `from` and `to` are never both zero.\r\n\t *\r\n\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n\t */\r\n\tfunction _afterTokenTransfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t) internal virtual {}\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n\t/**\r\n\t * @dev Returns true if `account` is a contract.\r\n\t *\r\n\t * [IMPORTANT]\r\n\t * ====\r\n\t * It is unsafe to assume that an address for which this function returns\r\n\t * false is an externally-owned account (EOA) and not a contract.\r\n\t *\r\n\t * Among others, `isContract` will return false for the following\r\n\t * types of addresses:\r\n\t *\r\n\t *  - an externally-owned account\r\n\t *  - a contract in construction\r\n\t *  - an address where a contract will be created\r\n\t *  - an address where a contract lived, but was destroyed\r\n\t * ====\r\n\t */\r\n\tfunction isContract(address account) internal view returns (bool) {\r\n\t\t// This method relies on extcodesize, which returns 0 for contracts in\r\n\t\t// construction, since the code is only stored at the end of the\r\n\t\t// constructor execution.\r\n\r\n\t\tuint256 size;\r\n\t\tassembly {\r\n\t\t\tsize := extcodesize(account)\r\n\t\t}\r\n\t\treturn size > 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n\t * `recipient`, forwarding all available gas and reverting on errors.\r\n\t *\r\n\t * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n\t * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n\t * imposed by `transfer`, making them unable to receive funds via\r\n\t * `transfer`. {sendValue} removes this limitation.\r\n\t *\r\n\t * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n\t *\r\n\t * IMPORTANT: because control is transferred to `recipient`, care must be\r\n\t * taken to not create reentrancy vulnerabilities. Consider using\r\n\t * {ReentrancyGuard} or the\r\n\t * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n\t */\r\n\tfunction sendValue(address payable recipient, uint256 amount) internal {\r\n\t\trequire(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n\t\t(bool success, ) = recipient.call{ value: amount }(\"\");\r\n\t\trequire(success, \"Address: unable to send value, recipient may have reverted\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Performs a Solidity function call using a low level `call`. A\r\n\t * plain `call` is an unsafe replacement for a function call: use this\r\n\t * function instead.\r\n\t *\r\n\t * If `target` reverts with a revert reason, it is bubbled up by this\r\n\t * function (like regular Solidity function calls).\r\n\t *\r\n\t * Returns the raw returned data. To convert to the expected return value,\r\n\t * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `target` must be a contract.\r\n\t * - calling `target` with `data` must not revert.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n\t\treturn functionCall(target, data, \"Address: low-level call failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n\t * `errorMessage` as a fallback revert reason when `target` reverts.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCall(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tstring memory errorMessage\r\n\t) internal returns (bytes memory) {\r\n\t\treturn functionCallWithValue(target, data, 0, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\t * but also transferring `value` wei to `target`.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - the calling contract must have an ETH balance of at least `value`.\r\n\t * - the called Solidity function must be `payable`.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCallWithValue(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tuint256 value\r\n\t) internal returns (bytes memory) {\r\n\t\treturn functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n\t * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCallWithValue(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tuint256 value,\r\n\t\tstring memory errorMessage\r\n\t) internal returns (bytes memory) {\r\n\t\trequire(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n\t\trequire(isContract(target), \"Address: call to non-contract\");\r\n\r\n\t\t(bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n\t\treturn verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\t * but performing a static call.\r\n\t *\r\n\t * _Available since v3.3._\r\n\t */\r\n\tfunction functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n\t\treturn functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n\t * but performing a static call.\r\n\t *\r\n\t * _Available since v3.3._\r\n\t */\r\n\tfunction functionStaticCall(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tstring memory errorMessage\r\n\t) internal view returns (bytes memory) {\r\n\t\trequire(isContract(target), \"Address: static call to non-contract\");\r\n\r\n\t\t(bool success, bytes memory returndata) = target.staticcall(data);\r\n\t\treturn verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\t * but performing a delegate call.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n\t\treturn functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n\t * but performing a delegate call.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction functionDelegateCall(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tstring memory errorMessage\r\n\t) internal returns (bytes memory) {\r\n\t\trequire(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n\t\t(bool success, bytes memory returndata) = target.delegatecall(data);\r\n\t\treturn verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n\t * revert reason using the provided one.\r\n\t *\r\n\t * _Available since v4.3._\r\n\t */\r\n\tfunction verifyCallResult(\r\n\t\tbool success,\r\n\t\tbytes memory returndata,\r\n\t\tstring memory errorMessage\r\n\t) internal pure returns (bytes memory) {\r\n\t\tif (success) {\r\n\t\t\treturn returndata;\r\n\t\t} else {\r\n\t\t\t// Look for revert reason and bubble it up if present\r\n\t\t\tif (returndata.length > 0) {\r\n\t\t\t\t// The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n\t\t\t\tassembly {\r\n\t\t\t\t\tlet returndata_size := mload(returndata)\r\n\t\t\t\t\trevert(add(32, returndata), returndata_size)\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\trevert(errorMessage);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n\t/**\r\n\t * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n\t\tunchecked {\r\n\t\t\tuint256 c = a + b;\r\n\t\t\tif (c < a) return (false, 0);\r\n\t\t\treturn (true, c);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n\t\tunchecked {\r\n\t\t\tif (b > a) return (false, 0);\r\n\t\t\treturn (true, a - b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n\t\tunchecked {\r\n\t\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\t\t\t// benefit is lost if 'b' is also tested.\r\n\t\t\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n\t\t\tif (a == 0) return (true, 0);\r\n\t\t\tuint256 c = a * b;\r\n\t\t\tif (c / a != b) return (false, 0);\r\n\t\t\treturn (true, c);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n\t\tunchecked {\r\n\t\t\tif (b == 0) return (false, 0);\r\n\t\t\treturn (true, a / b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n\t\tunchecked {\r\n\t\t\tif (b == 0) return (false, 0);\r\n\t\t\treturn (true, a % b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the addition of two unsigned integers, reverting on\r\n\t * overflow.\r\n\t *\r\n\t * Counterpart to Solidity's `+` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Addition cannot overflow.\r\n\t */\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn a + b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the subtraction of two unsigned integers, reverting on\r\n\t * overflow (when the result is negative).\r\n\t *\r\n\t * Counterpart to Solidity's `-` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Subtraction cannot overflow.\r\n\t */\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the multiplication of two unsigned integers, reverting on\r\n\t * overflow.\r\n\t *\r\n\t * Counterpart to Solidity's `*` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Multiplication cannot overflow.\r\n\t */\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn a * b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the integer division of two unsigned integers, reverting on\r\n\t * division by zero. The result is rounded towards zero.\r\n\t *\r\n\t * Counterpart to Solidity's `/` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn a / b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\t * reverting when dividing by zero.\r\n\t *\r\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\t * invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn a % b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n\t * overflow (when the result is negative).\r\n\t *\r\n\t * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n\t * message unnecessarily. For custom revert reasons use {trySub}.\r\n\t *\r\n\t * Counterpart to Solidity's `-` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Subtraction cannot overflow.\r\n\t */\r\n\tfunction sub(\r\n\t\tuint256 a,\r\n\t\tuint256 b,\r\n\t\tstring memory errorMessage\r\n\t) internal pure returns (uint256) {\r\n\t\tunchecked {\r\n\t\t\trequire(b <= a, errorMessage);\r\n\t\t\treturn a - b;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n\t * division by zero. The result is rounded towards zero.\r\n\t *\r\n\t * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\t * uses an invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction div(\r\n\t\tuint256 a,\r\n\t\tuint256 b,\r\n\t\tstring memory errorMessage\r\n\t) internal pure returns (uint256) {\r\n\t\tunchecked {\r\n\t\t\trequire(b > 0, errorMessage);\r\n\t\t\treturn a / b;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\t * reverting with custom message when dividing by zero.\r\n\t *\r\n\t * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n\t * message unnecessarily. For custom revert reasons use {tryMod}.\r\n\t *\r\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\t * invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction mod(\r\n\t\tuint256 a,\r\n\t\tuint256 b,\r\n\t\tstring memory errorMessage\r\n\t) internal pure returns (uint256) {\r\n\t\tunchecked {\r\n\t\t\trequire(b > 0, errorMessage);\r\n\t\t\treturn a % b;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n////// src/IUniswapV2Factory.sol\r\n/* pragma solidity 0.8.10; */\r\n/* pragma experimental ABIEncoderV2; */\r\n\r\ninterface IUniswapV2Factory {\r\n\tevent PairCreated(address indexed token0, address indexed token1, address pair, uint256);\r\n\r\n\tfunction feeTo() external view returns (address);\r\n\r\n\tfunction feeToSetter() external view returns (address);\r\n\r\n\tfunction getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n\tfunction allPairs(uint256) external view returns (address pair);\r\n\r\n\tfunction allPairsLength() external view returns (uint256);\r\n\r\n\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n\tfunction setFeeTo(address) external;\r\n\r\n\tfunction setFeeToSetter(address) external;\r\n}\r\n\r\n////// src/IUniswapV2Pair.sol\r\n/* pragma solidity 0.8.10; */\r\n/* pragma experimental ABIEncoderV2; */\r\n\r\ninterface IUniswapV2Pair {\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\tfunction name() external pure returns (string memory);\r\n\r\n\tfunction symbol() external pure returns (string memory);\r\n\r\n\tfunction decimals() external pure returns (uint8);\r\n\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\tfunction balanceOf(address owner) external view returns (uint256);\r\n\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\tfunction approve(address spender, uint256 value) external returns (bool);\r\n\r\n\tfunction transfer(address to, uint256 value) external returns (bool);\r\n\r\n\tfunction transferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 value\r\n\t) external returns (bool);\r\n\r\n\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n\tfunction PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n\tfunction nonces(address owner) external view returns (uint256);\r\n\r\n\tfunction permit(\r\n\t\taddress owner,\r\n\t\taddress spender,\r\n\t\tuint256 value,\r\n\t\tuint256 deadline,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) external;\r\n\r\n\tevent Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n\tevent Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\r\n\tevent Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\r\n\tevent Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n\tfunction MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n\tfunction factory() external view returns (address);\r\n\r\n\tfunction token0() external view returns (address);\r\n\r\n\tfunction token1() external view returns (address);\r\n\r\n\tfunction getReserves()\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (\r\n\t\t\tuint112 reserve0,\r\n\t\t\tuint112 reserve1,\r\n\t\t\tuint32 blockTimestampLast\r\n\t\t);\r\n\r\n\tfunction price0CumulativeLast() external view returns (uint256);\r\n\r\n\tfunction price1CumulativeLast() external view returns (uint256);\r\n\r\n\tfunction kLast() external view returns (uint256);\r\n\r\n\tfunction mint(address to) external returns (uint256 liquidity);\r\n\r\n\tfunction burn(address to) external returns (uint256 amount0, uint256 amount1);\r\n\r\n\tfunction swap(\r\n\t\tuint256 amount0Out,\r\n\t\tuint256 amount1Out,\r\n\t\taddress to,\r\n\t\tbytes calldata data\r\n\t) external;\r\n\r\n\tfunction skim(address to) external;\r\n\r\n\tfunction sync() external;\r\n\r\n\tfunction initialize(address, address) external;\r\n}\r\n\r\n////// src/IUniswapV2Router02.sol\r\n/* pragma solidity 0.8.10; */\r\n/* pragma experimental ABIEncoderV2; */\r\n\r\ninterface IUniswapV2Router02 {\r\n\tfunction factory() external pure returns (address);\r\n\r\n\tfunction WETH() external pure returns (address);\r\n\r\n\tfunction addLiquidity(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB,\r\n\t\tuint256 amountADesired,\r\n\t\tuint256 amountBDesired,\r\n\t\tuint256 amountAMin,\r\n\t\tuint256 amountBMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t)\r\n\t\texternal\r\n\t\treturns (\r\n\t\t\tuint256 amountA,\r\n\t\t\tuint256 amountB,\r\n\t\t\tuint256 liquidity\r\n\t\t);\r\n\r\n\tfunction addLiquidityETH(\r\n\t\taddress token,\r\n\t\tuint256 amountTokenDesired,\r\n\t\tuint256 amountTokenMin,\r\n\t\tuint256 amountETHMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t)\r\n\t\texternal\r\n\t\tpayable\r\n\t\treturns (\r\n\t\t\tuint256 amountToken,\r\n\t\t\tuint256 amountETH,\r\n\t\t\tuint256 liquidity\r\n\t\t);\r\n\r\n\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external;\r\n\r\n\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external payable;\r\n\r\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external;\r\n}\r\n\r\ncontract ESCR is Ownable, IERC20 {\r\n\taddress UNISWAPROUTER = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\taddress DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\taddress ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n\tstring private _name = \"Eat Sleep Compound Repeat\";\r\n\tstring private _symbol = \"ESCR\";\r\n\r\n\tuint256 public treasuryFeeBPS = 1800;\r\n\tuint256 public liquidityFeeBPS = 100;\r\n\tuint256 public dividendFeeBPS = 100;\r\n\tuint256 public totalFeeBPS = 2000;\r\n\r\n\tuint256 public swapTokensAtAmount = 100000 * (10**18);\r\n\tuint256 public lastSwapTime;\r\n\tbool swapAllToken = true;\r\n\r\n\tbool public swapEnabled = true;\r\n\tbool public taxEnabled = true;\r\n\tbool public compoundingEnabled = true;\r\n\r\n\tuint256 private _totalSupply;\r\n\tbool private swapping;\r\n\r\n\taddress marketingWallet;\r\n\taddress liquidityWallet;\r\n\r\n\tmapping(address => uint256) private _balances;\r\n\tmapping(address => mapping(address => uint256)) private _allowances;\r\n\tmapping(address => bool) private _isExcludedFromFees;\r\n\tmapping(address => bool) public automatedMarketMakerPairs;\r\n\tmapping(address => bool) private _whiteList;\r\n\tmapping(address => bool) isBlacklisted;\r\n\r\n\tevent SwapAndAddLiquidity(uint256 tokensSwapped, uint256 nativeReceived, uint256 tokensIntoLiquidity);\r\n\tevent SendDividends(uint256 tokensSwapped, uint256 amount);\r\n\tevent ExcludeFromFees(address indexed account, bool isExcluded);\r\n\tevent SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n\tevent UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);\r\n\tevent SwapEnabled(bool enabled);\r\n\tevent TaxEnabled(bool enabled);\r\n\tevent CompoundingEnabled(bool enabled);\r\n\tevent BlacklistEnabled(bool enabled);\r\n\r\n\tDividendTracker public dividendTracker;\r\n\tIUniswapV2Router02 public uniswapV2Router;\r\n\r\n\taddress public uniswapV2Pair;\r\n\r\n\tuint256 public maxTxBPS = 49;\r\n\tuint256 public maxWalletBPS = 200;\r\n\r\n\tbool isOpen = false;\r\n\r\n\tmapping(address => bool) private _isExcludedFromMaxTx;\r\n\tmapping(address => bool) private _isExcludedFromMaxWallet;\r\n\r\n\tconstructor(\r\n\t\taddress _marketingWallet,\r\n\t\taddress _liquidityWallet,\r\n\t\taddress[] memory whitelistAddress\r\n\t) {\r\n\t\tmarketingWallet = _marketingWallet;\r\n\t\tliquidityWallet = _liquidityWallet;\r\n\t\tincludeToWhiteList(whitelistAddress);\r\n\r\n\t\tdividendTracker = new DividendTracker(address(this), UNISWAPROUTER);\r\n\r\n\t\tIUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(UNISWAPROUTER);\r\n\r\n\t\taddress _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n\t\tuniswapV2Router = _uniswapV2Router;\r\n\t\tuniswapV2Pair = _uniswapV2Pair;\r\n\r\n\t\t_setAutomatedMarketMakerPair(_uniswapV2Pair, true);\r\n\r\n\t\tdividendTracker.excludeFromDividends(address(dividendTracker), true);\r\n\t\tdividendTracker.excludeFromDividends(address(this), true);\r\n\t\tdividendTracker.excludeFromDividends(owner(), true);\r\n\t\tdividendTracker.excludeFromDividends(address(_uniswapV2Router), true);\r\n\r\n\t\texcludeFromFees(owner(), true);\r\n\t\texcludeFromFees(address(this), true);\r\n\t\texcludeFromFees(address(dividendTracker), true);\r\n\r\n\t\texcludeFromMaxTx(owner(), true);\r\n\t\texcludeFromMaxTx(address(this), true);\r\n\t\texcludeFromMaxTx(address(dividendTracker), true);\r\n\r\n\t\texcludeFromMaxWallet(owner(), true);\r\n\t\texcludeFromMaxWallet(address(this), true);\r\n\t\texcludeFromMaxWallet(address(dividendTracker), true);\r\n\r\n\t\t_mint(owner(), 10000000000 * (10**18));\r\n\t}\r\n\r\n\treceive() external payable {}\r\n\r\n\tfunction name() public view returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\tfunction symbol() public view returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\tfunction decimals() public pure returns (uint8) {\r\n\t\treturn 18;\r\n\t}\r\n\r\n\tfunction totalSupply() public view virtual override returns (uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\tfunction balanceOf(address account) public view virtual override returns (uint256) {\r\n\t\treturn _balances[account];\r\n\t}\r\n\r\n\tfunction allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n\t\treturn _allowances[owner][spender];\r\n\t}\r\n\r\n\tfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n\t\t_approve(_msgSender(), spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n\t\tuint256 currentAllowance = _allowances[_msgSender()][spender];\r\n\t\trequire(currentAllowance >= subtractedValue, \"ESCR: decreased allowance below zero\");\r\n\t\t_approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n\t\t_transfer(_msgSender(), recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) public virtual override returns (bool) {\r\n\t\t_transfer(sender, recipient, amount);\r\n\t\tuint256 currentAllowance = _allowances[sender][_msgSender()];\r\n\t\trequire(currentAllowance >= amount, \"ESCR: transfer amount exceeds allowance\");\r\n\t\t_approve(sender, _msgSender(), currentAllowance - amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction openTrading() external onlyOwner {\r\n\t\tisOpen = true;\r\n\t}\r\n\r\n\tfunction _transfer(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) internal {\r\n\t\trequire(isOpen || sender == owner() || recipient == owner() || _whiteList[sender] || _whiteList[recipient], \"Not Open\");\r\n\r\n\t\trequire(!isBlacklisted[sender], \"ESCR: Sender is blacklisted\");\r\n\t\trequire(!isBlacklisted[recipient], \"ESCR: Recipient is blacklisted\");\r\n\r\n\t\trequire(sender != address(0), \"ESCR: transfer from the zero address\");\r\n\t\trequire(recipient != address(0), \"ESCR: transfer to the zero address\");\r\n\r\n\t\tuint256 _maxTxAmount = (totalSupply() * maxTxBPS) / 10000;\r\n\t\tuint256 _maxWallet = (totalSupply() * maxWalletBPS) / 10000;\r\n\t\trequire(amount <= _maxTxAmount || _isExcludedFromMaxTx[sender], \"TX Limit Exceeded\");\r\n\r\n\t\tif (sender != owner() && recipient != address(this) && recipient != address(DEAD) && recipient != uniswapV2Pair) {\r\n\t\t\tuint256 currentBalance = balanceOf(recipient);\r\n\t\t\trequire(_isExcludedFromMaxWallet[recipient] || (currentBalance + amount <= _maxWallet));\r\n\t\t}\r\n\r\n\t\tuint256 senderBalance = _balances[sender];\r\n\t\trequire(senderBalance >= amount, \"ESCR: transfer amount exceeds balance\");\r\n\r\n\t\tuint256 contractTokenBalance = balanceOf(address(this));\r\n\t\tuint256 contractNativeBalance = address(this).balance;\r\n\r\n\t\tbool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n\r\n\t\tif (\r\n\t\t\tswapEnabled && // True\r\n\t\t\tcanSwap && // true\r\n\t\t\t!swapping && // swapping=false !false true\r\n\t\t\t!automatedMarketMakerPairs[sender] && // no swap on remove liquidity step 1 or DEX buy\r\n\t\t\tsender != address(uniswapV2Router) && // no swap on remove liquidity step 2\r\n\t\t\tsender != owner() &&\r\n\t\t\trecipient != owner()\r\n\t\t) {\r\n\t\t\tswapping = true;\r\n\r\n\t\t\tif (!swapAllToken) {\r\n\t\t\t\tcontractTokenBalance = swapTokensAtAmount;\r\n\t\t\t}\r\n\t\t\t_executeSwap(contractTokenBalance, contractNativeBalance);\r\n\r\n\t\t\tlastSwapTime = block.timestamp;\r\n\t\t\tswapping = false;\r\n\t\t}\r\n\r\n\t\tbool takeFee;\r\n\r\n\t\tif (sender == address(uniswapV2Pair) || recipient == address(uniswapV2Pair)) {\r\n\t\t\ttakeFee = true;\r\n\t\t}\r\n\r\n\t\tif (_isExcludedFromFees[sender] || _isExcludedFromFees[recipient]) {\r\n\t\t\ttakeFee = false;\r\n\t\t}\r\n\r\n\t\tif (swapping || !taxEnabled) {\r\n\t\t\ttakeFee = false;\r\n\t\t}\r\n\r\n\t\tif (takeFee) {\r\n\t\t\tuint256 fees = (amount * totalFeeBPS) / 10000;\r\n\t\t\tamount -= fees;\r\n\t\t\t_executeTransfer(sender, address(this), fees);\r\n\t\t}\r\n\r\n\t\t_executeTransfer(sender, recipient, amount);\r\n\r\n\t\tdividendTracker.setBalance(payable(sender), balanceOf(sender));\r\n\t\tdividendTracker.setBalance(payable(recipient), balanceOf(recipient));\r\n\t}\r\n\r\n\tfunction _executeTransfer(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) private {\r\n\t\trequire(sender != address(0), \"ESCR: transfer from the zero address\");\r\n\t\trequire(recipient != address(0), \"ESCR: transfer to the zero address\");\r\n\t\tuint256 senderBalance = _balances[sender];\r\n\t\trequire(senderBalance >= amount, \"ESCR: transfer amount exceeds balance\");\r\n\t\t_balances[sender] = senderBalance - amount;\r\n\t\t_balances[recipient] += amount;\r\n\t\temit Transfer(sender, recipient, amount);\r\n\t}\r\n\r\n\tfunction _approve(\r\n\t\taddress owner,\r\n\t\taddress spender,\r\n\t\tuint256 amount\r\n\t) private {\r\n\t\trequire(owner != address(0), \"ESCR: approve from the zero address\");\r\n\t\trequire(spender != address(0), \"ESCR: approve to the zero address\");\r\n\t\t_allowances[owner][spender] = amount;\r\n\t\temit Approval(owner, spender, amount);\r\n\t}\r\n\r\n\tfunction _mint(address account, uint256 amount) private {\r\n\t\trequire(account != address(0), \"ESCR: mint to the zero address\");\r\n\t\t_totalSupply += amount;\r\n\t\t_balances[account] += amount;\r\n\t\temit Transfer(address(0), account, amount);\r\n\t}\r\n\r\n\tfunction _burn(address account, uint256 amount) private {\r\n\t\trequire(account != address(0), \"ESCR: burn from the zero address\");\r\n\t\tuint256 accountBalance = _balances[account];\r\n\t\trequire(accountBalance >= amount, \"ESCR: burn amount exceeds balance\");\r\n\t\t_balances[account] = accountBalance - amount;\r\n\t\t_totalSupply -= amount;\r\n\t\temit Transfer(account, address(0), amount);\r\n\t}\r\n\r\n\tfunction swapTokensForNative(uint256 tokens) private {\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = uniswapV2Router.WETH();\r\n\t\t_approve(address(this), address(uniswapV2Router), tokens);\r\n\t\tuniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\t\ttokens,\r\n\t\t\t0, // accept any amount of native\r\n\t\t\tpath,\r\n\t\t\taddress(this),\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n\r\n\tfunction addLiquidity(uint256 tokens, uint256 native) private {\r\n\t\t_approve(address(this), address(uniswapV2Router), tokens);\r\n\t\tuniswapV2Router.addLiquidityETH{ value: native }(\r\n\t\t\taddress(this),\r\n\t\t\ttokens,\r\n\t\t\t0, // slippage unavoidable\r\n\t\t\t0, // slippage unavoidable\r\n\t\t\tliquidityWallet,\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n\r\n\tfunction includeToWhiteList(address[] memory _users) private {\r\n\t\tfor (uint8 i = 0; i < _users.length; i++) {\r\n\t\t\t_whiteList[_users[i]] = true;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _executeSwap(uint256 tokens, uint256 native) private {\r\n\t\tif (tokens <= 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tuint256 swapTokensMarketing;\r\n\t\tif (address(marketingWallet) != address(0)) {\r\n\t\t\tswapTokensMarketing = (tokens * treasuryFeeBPS) / totalFeeBPS;\r\n\t\t}\r\n\r\n\t\tuint256 swapTokensDividends;\r\n\t\tif (dividendTracker.totalSupply() > 0) {\r\n\t\t\tswapTokensDividends = (tokens * dividendFeeBPS) / totalFeeBPS;\r\n\t\t}\r\n\r\n\t\tuint256 tokensForLiquidity = tokens - swapTokensMarketing - swapTokensDividends;\r\n\t\tuint256 swapTokensLiquidity = tokensForLiquidity / 2;\r\n\t\tuint256 addTokensLiquidity = tokensForLiquidity - swapTokensLiquidity;\r\n\t\tuint256 swapTokensTotal = swapTokensMarketing + swapTokensDividends + swapTokensLiquidity;\r\n\r\n\t\tuint256 initNativeBal = address(this).balance;\r\n\t\tswapTokensForNative(swapTokensTotal);\r\n\t\tuint256 nativeSwapped = (address(this).balance - initNativeBal) + native;\r\n\r\n\t\tuint256 nativeMarketing = (nativeSwapped * swapTokensMarketing) / swapTokensTotal;\r\n\t\tuint256 nativeDividends = (nativeSwapped * swapTokensDividends) / swapTokensTotal;\r\n\t\tuint256 nativeLiquidity = nativeSwapped - nativeMarketing - nativeDividends;\r\n\r\n\t\tif (nativeMarketing > 0) {\r\n\t\t\tpayable(marketingWallet).transfer(nativeMarketing);\r\n\t\t}\r\n\r\n\t\taddLiquidity(addTokensLiquidity, nativeLiquidity);\r\n\t\temit SwapAndAddLiquidity(swapTokensLiquidity, nativeLiquidity, addTokensLiquidity);\r\n\r\n\t\tif (nativeDividends > 0) {\r\n\t\t\t(bool success, ) = address(dividendTracker).call{ value: nativeDividends }(\"\");\r\n\t\t\tif (success) {\r\n\t\t\t\temit SendDividends(swapTokensDividends, nativeDividends);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction excludeFromFees(address account, bool excluded) public onlyOwner {\r\n\t\trequire(_isExcludedFromFees[account] != excluded, \"ESCR: account is already set to requested state\");\r\n\t\t_isExcludedFromFees[account] = excluded;\r\n\t\temit ExcludeFromFees(account, excluded);\r\n\t}\r\n\r\n\tfunction isExcludedFromFees(address account) public view returns (bool) {\r\n\t\treturn _isExcludedFromFees[account];\r\n\t}\r\n\r\n\tfunction manualSendDividend(uint256 amount, address holder) external onlyOwner {\r\n\t\tdividendTracker.manualSendDividend(amount, holder);\r\n\t}\r\n\r\n\tfunction excludeFromDividends(address account, bool excluded) public onlyOwner {\r\n\t\tdividendTracker.excludeFromDividends(account, excluded);\r\n\t}\r\n\r\n\tfunction isExcludedFromDividends(address account) public view returns (bool) {\r\n\t\treturn dividendTracker.isExcludedFromDividends(account);\r\n\t}\r\n\r\n\tfunction setWallet(address payable _marketingWallet, address payable _liquidityWallet) external onlyOwner {\r\n\t\tmarketingWallet = _marketingWallet;\r\n\t\tliquidityWallet = _liquidityWallet;\r\n\t}\r\n\r\n\tfunction setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\r\n\t\trequire(pair != uniswapV2Pair, \"ESCR: DEX pair can not be removed\");\r\n\t\t_setAutomatedMarketMakerPair(pair, value);\r\n\t}\r\n\r\n\tfunction setFee(\r\n\t\tuint256 _treasuryFee,\r\n\t\tuint256 _liquidityFee,\r\n\t\tuint256 _dividendFee\r\n\t) external onlyOwner {\r\n\t\ttreasuryFeeBPS = _treasuryFee;\r\n\t\tliquidityFeeBPS = _liquidityFee;\r\n\t\tdividendFeeBPS = _dividendFee;\r\n\t\ttotalFeeBPS = _treasuryFee + _liquidityFee + _dividendFee;\r\n\t}\r\n\r\n\tfunction _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n\t\trequire(automatedMarketMakerPairs[pair] != value, \"ESCR: automated market maker pair is already set to that value\");\r\n\t\tautomatedMarketMakerPairs[pair] = value;\r\n\t\tif (value) {\r\n\t\t\tdividendTracker.excludeFromDividends(pair, true);\r\n\t\t}\r\n\t\temit SetAutomatedMarketMakerPair(pair, value);\r\n\t}\r\n\r\n\tfunction updateUniswapV2Router(address newAddress) public onlyOwner {\r\n\t\trequire(newAddress != address(uniswapV2Router), \"ESCR: the router is already set to the new address\");\r\n\t\temit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));\r\n\t\tuniswapV2Router = IUniswapV2Router02(newAddress);\r\n\t\taddress _uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n\t\tuniswapV2Pair = _uniswapV2Pair;\r\n\t}\r\n\r\n\tfunction claim() public {\r\n\t\tdividendTracker.processAccount(payable(_msgSender()));\r\n\t}\r\n\r\n\tfunction compound() public {\r\n\t\trequire(compoundingEnabled, \"ESCR: compounding is not enabled\");\r\n\t\tdividendTracker.compoundAccount(payable(_msgSender()));\r\n\t}\r\n\r\n\tfunction withdrawableDividendOf(address account) public view returns (uint256) {\r\n\t\treturn dividendTracker.withdrawableDividendOf(account);\r\n\t}\r\n\r\n\tfunction withdrawnDividendOf(address account) public view returns (uint256) {\r\n\t\treturn dividendTracker.withdrawnDividendOf(account);\r\n\t}\r\n\r\n\tfunction totalDividendsWithdrawn() public view returns (uint256) {\r\n\t\treturn dividendTracker.totalDividendsWithdrawn();\r\n\t}\r\n\r\n\tfunction totalDividendsDistributed() public view returns (uint256) {\r\n\t\treturn dividendTracker.totalDividendsDistributed();\r\n\t}\r\n\r\n\tfunction accumulativeDividendOf(address account) public view returns (uint256) {\r\n\t\treturn dividendTracker.accumulativeDividendOf(account);\r\n\t}\r\n\r\n\tfunction getAccountInfo(address account)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (\r\n\t\t\taddress,\r\n\t\t\tuint256,\r\n\t\t\tuint256,\r\n\t\t\tuint256,\r\n\t\t\tuint256\r\n\t\t)\r\n\t{\r\n\t\treturn dividendTracker.getAccountInfo(account);\r\n\t}\r\n\r\n\tfunction getLastClaimTime(address account) public view returns (uint256) {\r\n\t\treturn dividendTracker.getLastClaimTime(account);\r\n\t}\r\n\r\n\tfunction setSwapEnabled(bool _enabled) external onlyOwner {\r\n\t\tswapEnabled = _enabled;\r\n\t\temit SwapEnabled(_enabled);\r\n\t}\r\n\r\n\tfunction setTaxEnabled(bool _enabled) external onlyOwner {\r\n\t\ttaxEnabled = _enabled;\r\n\t\temit TaxEnabled(_enabled);\r\n\t}\r\n\r\n\tfunction setCompoundingEnabled(bool _enabled) external onlyOwner {\r\n\t\tcompoundingEnabled = _enabled;\r\n\t\temit CompoundingEnabled(_enabled);\r\n\t}\r\n\r\n\tfunction updateDividendSettings(\r\n\t\tbool _swapEnabled,\r\n\t\tuint256 _swapTokensAtAmount,\r\n\t\tbool _swapAllToken\r\n\t) external onlyOwner {\r\n\t\tswapEnabled = _swapEnabled;\r\n\t\tswapTokensAtAmount = _swapTokensAtAmount;\r\n\t\tswapAllToken = _swapAllToken;\r\n\t}\r\n\r\n\tfunction setMaxTxBPS(uint256 bps) external onlyOwner {\r\n\t\trequire(bps >= 75 && bps <= 10000, \"BPS must be between 75 and 10000\");\r\n\t\tmaxTxBPS = bps;\r\n\t}\r\n\r\n\tfunction excludeFromMaxTx(address account, bool excluded) public onlyOwner {\r\n\t\t_isExcludedFromMaxTx[account] = excluded;\r\n\t}\r\n\r\n\tfunction isExcludedFromMaxTx(address account) public view returns (bool) {\r\n\t\treturn _isExcludedFromMaxTx[account];\r\n\t}\r\n\r\n\tfunction setMaxWalletBPS(uint256 bps) external onlyOwner {\r\n\t\trequire(bps >= 175 && bps <= 10000, \"BPS must be between 175 and 10000\");\r\n\t\tmaxWalletBPS = bps;\r\n\t}\r\n\r\n\tfunction excludeFromMaxWallet(address account, bool excluded) public onlyOwner {\r\n\t\t_isExcludedFromMaxWallet[account] = excluded;\r\n\t}\r\n\r\n\tfunction isExcludedFromMaxWallet(address account) public view returns (bool) {\r\n\t\treturn _isExcludedFromMaxWallet[account];\r\n\t}\r\n\r\n\tfunction rescueToken(address _token, uint256 _amount) external onlyOwner {\r\n\t\tIERC20(_token).transfer(msg.sender, _amount);\r\n\t}\r\n\r\n\tfunction rescueETH(uint256 _amount) external onlyOwner {\r\n\t\tpayable(msg.sender).transfer(_amount);\r\n\t}\r\n\r\n\tfunction blackList(address _user) public onlyOwner {\r\n\t\trequire(!isBlacklisted[_user], \"user already blacklisted\");\r\n\t\tisBlacklisted[_user] = true;\r\n\t\t// events?\r\n\t}\r\n\r\n\tfunction removeFromBlacklist(address _user) public onlyOwner {\r\n\t\trequire(isBlacklisted[_user], \"user already whitelisted\");\r\n\t\tisBlacklisted[_user] = false;\r\n\t\t//events?\r\n\t}\r\n\r\n\tfunction blackListMany(address[] memory _users) public onlyOwner {\r\n\t\tfor (uint8 i = 0; i < _users.length; i++) {\r\n\t\t\tisBlacklisted[_users[i]] = true;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction unBlackListMany(address[] memory _users) public onlyOwner {\r\n\t\tfor (uint8 i = 0; i < _users.length; i++) {\r\n\t\t\tisBlacklisted[_users[i]] = false;\r\n\t\t}\r\n\t}\r\n}\r\n\r\ncontract DividendTracker is Ownable, IERC20 {\r\n\taddress UNISWAPROUTER;\r\n\r\n\tstring private _name = \"ESCR_DividendTracker\";\r\n\tstring private _symbol = \"ESCR_DividendTracker\";\r\n\r\n\tuint256 public lastProcessedIndex;\r\n\r\n\tuint256 private _totalSupply;\r\n\tmapping(address => uint256) private _balances;\r\n\r\n\tuint256 private constant magnitude = 2**128;\r\n\tuint256 public immutable minTokenBalanceForDividends;\r\n\tuint256 private magnifiedDividendPerShare;\r\n\tuint256 public totalDividendsDistributed;\r\n\tuint256 public totalDividendsWithdrawn;\r\n\r\n\taddress public tokenAddress;\r\n\r\n\tmapping(address => bool) public excludedFromDividends;\r\n\tmapping(address => int256) private magnifiedDividendCorrections;\r\n\tmapping(address => uint256) private withdrawnDividends;\r\n\tmapping(address => uint256) private lastClaimTimes;\r\n\r\n\tevent DividendsDistributed(address indexed from, uint256 weiAmount);\r\n\tevent DividendWithdrawn(address indexed to, uint256 weiAmount);\r\n\tevent ExcludeFromDividends(address indexed account, bool excluded);\r\n\tevent Claim(address indexed account, uint256 amount);\r\n\tevent Compound(address indexed account, uint256 amount, uint256 tokens);\r\n\r\n\tstruct AccountInfo {\r\n\t\taddress account;\r\n\t\tuint256 withdrawableDividends;\r\n\t\tuint256 totalDividends;\r\n\t\tuint256 lastClaimTime;\r\n\t}\r\n\r\n\tconstructor(address _tokenAddress, address _uniswapRouter) {\r\n\t\tminTokenBalanceForDividends = 10000 * (10**18);\r\n\t\ttokenAddress = _tokenAddress;\r\n\t\tUNISWAPROUTER = _uniswapRouter;\r\n\t}\r\n\r\n\treceive() external payable {\r\n\t\tdistributeDividends();\r\n\t}\r\n\r\n\tfunction distributeDividends() public payable {\r\n\t\trequire(_totalSupply > 0);\r\n\t\tif (msg.value > 0) {\r\n\t\t\tmagnifiedDividendPerShare = magnifiedDividendPerShare + ((msg.value * magnitude) / _totalSupply);\r\n\t\t\temit DividendsDistributed(msg.sender, msg.value);\r\n\t\t\ttotalDividendsDistributed += msg.value;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction setBalance(address payable account, uint256 newBalance) external onlyOwner {\r\n\t\tif (excludedFromDividends[account]) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (newBalance >= minTokenBalanceForDividends) {\r\n\t\t\t_setBalance(account, newBalance);\r\n\t\t} else {\r\n\t\t\t_setBalance(account, 0);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction excludeFromDividends(address account, bool excluded) external onlyOwner {\r\n\t\trequire(excludedFromDividends[account] != excluded, \"ESCR_DividendTracker: account already set to requested state\");\r\n\t\texcludedFromDividends[account] = excluded;\r\n\t\tif (excluded) {\r\n\t\t\t_setBalance(account, 0);\r\n\t\t} else {\r\n\t\t\tuint256 newBalance = IERC20(tokenAddress).balanceOf(account);\r\n\t\t\tif (newBalance >= minTokenBalanceForDividends) {\r\n\t\t\t\t_setBalance(account, newBalance);\r\n\t\t\t} else {\r\n\t\t\t\t_setBalance(account, 0);\r\n\t\t\t}\r\n\t\t}\r\n\t\temit ExcludeFromDividends(account, excluded);\r\n\t}\r\n\r\n\tfunction isExcludedFromDividends(address account) public view returns (bool) {\r\n\t\treturn excludedFromDividends[account];\r\n\t}\r\n\r\n\tfunction manualSendDividend(uint256 amount, address holder) external onlyOwner {\r\n\t\tuint256 contractETHBalance = address(this).balance;\r\n\t\tpayable(holder).transfer(amount > 0 ? amount : contractETHBalance);\r\n\t}\r\n\r\n\tfunction _setBalance(address account, uint256 newBalance) internal {\r\n\t\tuint256 currentBalance = _balances[account];\r\n\t\tif (newBalance > currentBalance) {\r\n\t\t\tuint256 addAmount = newBalance - currentBalance;\r\n\t\t\t_mint(account, addAmount);\r\n\t\t} else if (newBalance < currentBalance) {\r\n\t\t\tuint256 subAmount = currentBalance - newBalance;\r\n\t\t\t_burn(account, subAmount);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _mint(address account, uint256 amount) private {\r\n\t\trequire(account != address(0), \"ESCR_DividendTracker: mint to the zero address\");\r\n\t\t_totalSupply += amount;\r\n\t\t_balances[account] += amount;\r\n\t\temit Transfer(address(0), account, amount);\r\n\t\tmagnifiedDividendCorrections[account] = magnifiedDividendCorrections[account] - int256(magnifiedDividendPerShare * amount);\r\n\t}\r\n\r\n\tfunction _burn(address account, uint256 amount) private {\r\n\t\trequire(account != address(0), \"ESCR_DividendTracker: burn from the zero address\");\r\n\t\tuint256 accountBalance = _balances[account];\r\n\t\trequire(accountBalance >= amount, \"ESCR_DividendTracker: burn amount exceeds balance\");\r\n\t\t_balances[account] = accountBalance - amount;\r\n\t\t_totalSupply -= amount;\r\n\t\temit Transfer(account, address(0), amount);\r\n\t\tmagnifiedDividendCorrections[account] = magnifiedDividendCorrections[account] + int256(magnifiedDividendPerShare * amount);\r\n\t}\r\n\r\n\tfunction processAccount(address payable account) public onlyOwner returns (bool) {\r\n\t\tuint256 amount = _withdrawDividendOfUser(account);\r\n\t\tif (amount > 0) {\r\n\t\t\tlastClaimTimes[account] = block.timestamp;\r\n\t\t\temit Claim(account, amount);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tfunction _withdrawDividendOfUser(address payable account) private returns (uint256) {\r\n\t\tuint256 _withdrawableDividend = withdrawableDividendOf(account);\r\n\t\tif (_withdrawableDividend > 0) {\r\n\t\t\twithdrawnDividends[account] += _withdrawableDividend;\r\n\t\t\ttotalDividendsWithdrawn += _withdrawableDividend;\r\n\t\t\temit DividendWithdrawn(account, _withdrawableDividend);\r\n\t\t\t(bool success, ) = account.call{ value: _withdrawableDividend, gas: 3000 }(\"\");\r\n\t\t\tif (!success) {\r\n\t\t\t\twithdrawnDividends[account] -= _withdrawableDividend;\r\n\t\t\t\ttotalDividendsWithdrawn -= _withdrawableDividend;\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\treturn _withdrawableDividend;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tfunction compoundAccount(address payable account) public onlyOwner returns (bool) {\r\n\t\t(uint256 amount, uint256 tokens) = _compoundDividendOfUser(account);\r\n\t\tif (amount > 0) {\r\n\t\t\tlastClaimTimes[account] = block.timestamp;\r\n\t\t\temit Compound(account, amount, tokens);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tfunction _compoundDividendOfUser(address payable account) private returns (uint256, uint256) {\r\n\t\tuint256 _withdrawableDividend = withdrawableDividendOf(account);\r\n\t\tif (_withdrawableDividend > 0) {\r\n\t\t\twithdrawnDividends[account] += _withdrawableDividend;\r\n\t\t\ttotalDividendsWithdrawn += _withdrawableDividend;\r\n\t\t\temit DividendWithdrawn(account, _withdrawableDividend);\r\n\r\n\t\t\tIUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(UNISWAPROUTER);\r\n\r\n\t\t\taddress[] memory path = new address[](2);\r\n\t\t\tpath[0] = uniswapV2Router.WETH();\r\n\t\t\tpath[1] = address(tokenAddress);\r\n\r\n\t\t\tbool success;\r\n\t\t\tuint256 tokens;\r\n\r\n\t\t\tuint256 initTokenBal = IERC20(tokenAddress).balanceOf(account);\r\n\t\t\ttry uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{ value: _withdrawableDividend }(0, path, address(account), block.timestamp) {\r\n\t\t\t\tsuccess = true;\r\n\t\t\t\ttokens = IERC20(tokenAddress).balanceOf(account) - initTokenBal;\r\n\t\t\t} catch Error(\r\n\t\t\t\tstring memory /*err*/\r\n\t\t\t) {\r\n\t\t\t\tsuccess = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (!success) {\r\n\t\t\t\twithdrawnDividends[account] -= _withdrawableDividend;\r\n\t\t\t\ttotalDividendsWithdrawn -= _withdrawableDividend;\r\n\t\t\t\treturn (0, 0);\r\n\t\t\t}\r\n\r\n\t\t\treturn (_withdrawableDividend, tokens);\r\n\t\t}\r\n\t\treturn (0, 0);\r\n\t}\r\n\r\n\tfunction withdrawableDividendOf(address account) public view returns (uint256) {\r\n\t\treturn accumulativeDividendOf(account) - withdrawnDividends[account];\r\n\t}\r\n\r\n\tfunction withdrawnDividendOf(address account) public view returns (uint256) {\r\n\t\treturn withdrawnDividends[account];\r\n\t}\r\n\r\n\tfunction accumulativeDividendOf(address account) public view returns (uint256) {\r\n\t\tint256 a = int256(magnifiedDividendPerShare * balanceOf(account));\r\n\t\tint256 b = magnifiedDividendCorrections[account]; // this is an explicit int256 (signed)\r\n\t\treturn uint256(a + b) / magnitude;\r\n\t}\r\n\r\n\tfunction getAccountInfo(address account)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (\r\n\t\t\taddress,\r\n\t\t\tuint256,\r\n\t\t\tuint256,\r\n\t\t\tuint256,\r\n\t\t\tuint256\r\n\t\t)\r\n\t{\r\n\t\tAccountInfo memory info;\r\n\t\tinfo.account = account;\r\n\t\tinfo.withdrawableDividends = withdrawableDividendOf(account);\r\n\t\tinfo.totalDividends = accumulativeDividendOf(account);\r\n\t\tinfo.lastClaimTime = lastClaimTimes[account];\r\n\t\treturn (info.account, info.withdrawableDividends, info.totalDividends, info.lastClaimTime, totalDividendsWithdrawn);\r\n\t}\r\n\r\n\tfunction getLastClaimTime(address account) public view returns (uint256) {\r\n\t\treturn lastClaimTimes[account];\r\n\t}\r\n\r\n\tfunction name() public view returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\tfunction symbol() public view returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\tfunction decimals() public pure returns (uint8) {\r\n\t\treturn 18;\r\n\t}\r\n\r\n\tfunction totalSupply() public view override returns (uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\tfunction balanceOf(address account) public view override returns (uint256) {\r\n\t\treturn _balances[account];\r\n\t}\r\n\r\n\tfunction transfer(address, uint256) public pure override returns (bool) {\r\n\t\trevert(\"ESCR_DividendTracker: method not implemented\");\r\n\t}\r\n\r\n\tfunction allowance(address, address) public pure override returns (uint256) {\r\n\t\trevert(\"ESCR_DividendTracker: method not implemented\");\r\n\t}\r\n\r\n\tfunction approve(address, uint256) public pure override returns (bool) {\r\n\t\trevert(\"ESCR_DividendTracker: method not implemented\");\r\n\t}\r\n\r\n\tfunction transferFrom(\r\n\t\taddress,\r\n\t\taddress,\r\n\t\tuint256\r\n\t) public pure override returns (bool) {\r\n\t\trevert(\"ESCR_DividendTracker: method not implemented\");\r\n\t}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityWallet\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"whitelistAddress\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"BlacklistEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"CompoundingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndAddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"TaxEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accumulativeDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"blackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"blackListMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compoundingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendFeeBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract DividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLastClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromDividends\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSwapTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFeeBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"manualSendDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeFromBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setCompoundingEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dividendFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bps\",\"type\":\"uint256\"}],\"name\":\"setMaxTxBPS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bps\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletBPS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setTaxEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_marketingWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_liquidityWallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDividendsWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFeeBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"unBlackListMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_swapEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_swapTokensAtAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_swapAllToken\",\"type\":\"bool\"}],\"name\":\"updateDividendSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawnDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ESCR", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000011fe99c903d4deb02065a1f60d8a8f2a3f105a1500000000000000000000000011fe99c903d4deb02065a1f60d8a8f2a3f105a150000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000011fe99c903d4deb02065a1f60d8a8f2a3f105a15", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://75cd1b84204604920e655c682dfc23099c074af9ad1fc43c1fe213dc8d5fafad"}