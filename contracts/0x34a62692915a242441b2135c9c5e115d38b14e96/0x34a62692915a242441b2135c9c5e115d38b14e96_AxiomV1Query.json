{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/AxiomV1Query.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {AccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport {AxiomV1Access} from \\\"./AxiomV1Access.sol\\\";\\nimport {IAxiomV1State} from \\\"./interfaces/core/IAxiomV1State.sol\\\";\\nimport {IAxiomV1Verifier} from \\\"./interfaces/core/IAxiomV1Verifier.sol\\\";\\nimport {IAxiomV1Query, QUERY_MERKLE_DEPTH} from \\\"./interfaces/IAxiomV1Query.sol\\\";\\nimport {MerkleTree} from \\\"./libraries/MerkleTree.sol\\\";\\nimport \\\"./libraries/configuration/AxiomV1Configuration.sol\\\";\\n\\n/// @title  AxiomV1Query\\n/// @notice Axiom smart contract that verifies batch queries into block headers, accounts, and storage slots.\\n/// @dev    Is a UUPS upgradeable contract.\\ncontract AxiomV1Query is IAxiomV1Query, AxiomV1Access, UUPSUpgradeable {\\n    using Address for address payable;\\n\\n    address public axiomAddress; // address of deployed AxiomV1 contract\\n    address public mmrVerifierAddress; // address of deployed ZKP verifier for MMR query verification\\n\\n    mapping(bytes32 => bool) public verifiedKeccakResults;\\n    mapping(bytes32 => bool) public verifiedPoseidonResults;\\n\\n    uint256 public minQueryPrice;\\n    uint256 public maxQueryPrice;\\n    uint32 public queryDeadlineInterval;\\n    mapping(bytes32 => AxiomQueryMetadata) public queries;\\n\\n    error BlockHashNotValidatedInCache();\\n    error BlockMerkleRootDoesNotMatchProof();\\n    error ProofVerificationFailed();\\n    error MMRProofVerificationFailed();\\n    error MMREndBlockNotRecent();\\n    error BlockHashWitnessNotRecent();\\n    error ClaimedMMRDoesNotMatchRecent();\\n\\n    error HistoricalMMRKeccakDoesNotMatchProof();   \\n    error KeccakQueryResponseDoesNotMatchProof();\\n\\n    error QueryNotInactive();\\n    error PriceNotPaid();\\n    error PriceTooHigh();\\n    error CannotRefundIfNotActive();\\n    error CannotRefundBeforeDeadline();\\n    error CannotFulfillIfNotActive();\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    /// @notice Prevents the implementation contract from being initialized outside of the upgradeable proxy.\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address _axiomAddress, address _mmrVerifierAddress, uint256 _minQueryPrice, uint256 _maxQueryPrice, uint32 _queryDeadlineInterval, address timelock, address guardian)\\n        public\\n        initializer\\n    {\\n        __UUPSUpgradeable_init();\\n        __AxiomV1Access_init_unchained();\\n\\n        require(_axiomAddress != address(0), \\\"AxiomV1Query: Axiom address is zero\\\");\\n        require(_mmrVerifierAddress != address(0), \\\"AxiomV1Query: MMR verifier address is zero\\\");\\n        require(timelock != address(0), \\\"AxiomV1Query: timelock address is zero\\\");\\n        require(guardian != address(0), \\\"AxiomV1Query: guardian address is zero\\\");\\n\\n        axiomAddress = _axiomAddress;\\n        mmrVerifierAddress = _mmrVerifierAddress;\\n        emit UpdateAxiomAddress(_axiomAddress);\\n        emit UpdateMMRVerifierAddress(_mmrVerifierAddress);\\n\\n        minQueryPrice = _minQueryPrice;\\n        maxQueryPrice = _maxQueryPrice;\\n        queryDeadlineInterval = _queryDeadlineInterval;\\n        emit UpdateMinQueryPrice(_minQueryPrice);\\n        emit UpdateMaxQueryPrice(_maxQueryPrice);\\n        emit UpdateQueryDeadlineInterval(_queryDeadlineInterval);\\n\\n        // prover is initialized to the contract deployer\\n        _grantRole(PROVER_ROLE, msg.sender);\\n        _grantRole(DEFAULT_ADMIN_ROLE, timelock);\\n        _grantRole(TIMELOCK_ROLE, timelock);\\n        _grantRole(GUARDIAN_ROLE, guardian);\\n    }\\n\\n    /// @notice Updates the address of the AxiomV1Core contract used to validate blockhashes, governed by a 'timelock'.\\n    /// @param  _axiomAddress the new address\\n    function updateAxiomAddress(address _axiomAddress) external onlyRole(TIMELOCK_ROLE) {\\n        axiomAddress = _axiomAddress;\\n        emit UpdateAxiomAddress(_axiomAddress);\\n    }\\n\\n    /// @notice Updates the address of the MMR SNARK verifier contract, governed by a 'timelock'.\\n    /// @param  _mmrVerifierAddress the new address\\n    function updateMMRVerifierAddress(address _mmrVerifierAddress) external onlyRole(TIMELOCK_ROLE) {\\n        mmrVerifierAddress = _mmrVerifierAddress;\\n        emit UpdateMMRVerifierAddress(_mmrVerifierAddress);\\n    }\\n\\n    /// @notice Set the price of a query, governed by a 'timelock'.\\n    /// @param  _minQueryPrice query price in wei\\n    function updateMinQueryPrice(uint256 _minQueryPrice) external onlyRole(TIMELOCK_ROLE) {\\n        minQueryPrice = _minQueryPrice;\\n        emit UpdateMinQueryPrice(_minQueryPrice);\\n    }\\n\\n    /// @notice Set the price of a query, governed by a 'timelock'.\\n    /// @param  _maxQueryPrice query price in wei\\n    function updateMaxQueryPrice(uint256 _maxQueryPrice) external onlyRole(TIMELOCK_ROLE) {\\n        maxQueryPrice = _maxQueryPrice;\\n        emit UpdateMaxQueryPrice(_maxQueryPrice);\\n    }    \\n\\n    /// @notice Set the query deadline interval, governed by a 'timelock'.\\n    /// @param  _queryDeadlineInterval interval in blocks\\n    function updateQueryDeadlineInterval(uint32 _queryDeadlineInterval) external onlyRole(TIMELOCK_ROLE) {\\n        queryDeadlineInterval = _queryDeadlineInterval;\\n        emit UpdateQueryDeadlineInterval(_queryDeadlineInterval);\\n    }\\n\\n    function verifyResultVsMMR(\\n        uint32 mmrIdx,\\n        RecentMMRWitness calldata mmrWitness, \\n        bytes calldata proof) external onlyProver {\\n        requireNotFrozen();\\n        _verifyResultVsMMR(mmrIdx, mmrWitness, proof);\\n    }\\n\\n    function sendQuery(bytes32 keccakQueryResponse, address payable refundee, bytes calldata query) external payable {\\n        requireNotFrozen();\\n        // Check for minimum payment        \\n        if (msg.value < minQueryPrice) {\\n            revert PriceNotPaid();\\n        }\\n        // Check for maximum payment\\n        if (msg.value > maxQueryPrice) {\\n            revert PriceTooHigh();\\n        }\\n        _sendQuery(keccakQueryResponse, msg.value, refundee);\\n        bytes32 queryHash = keccak256(query);\\n        emit QueryInitiatedOnchain(keccakQueryResponse, msg.value, uint32(block.number) + queryDeadlineInterval, refundee, queryHash);\\n    }\\n\\n    function sendOffchainQuery(bytes32 keccakQueryResponse, address payable refundee, bytes32 ipfsHash) external payable {\\n        requireNotFrozen();\\n        // Check for minimum payment        \\n        if (msg.value < minQueryPrice) {\\n            revert PriceNotPaid();\\n        }\\n        // Check for maximum payment\\n        if (msg.value > maxQueryPrice) {\\n            revert PriceTooHigh();\\n        }        \\n        _sendQuery(keccakQueryResponse, msg.value, refundee);\\n        emit QueryInitiatedOffchain(keccakQueryResponse, msg.value, uint32(block.number) + queryDeadlineInterval, refundee, ipfsHash);        \\n    }\\n\\n    function fulfillQueryVsMMR(\\n        bytes32 keccakQueryResponse, \\n        address payable payee, \\n        uint32 mmrIdx, \\n        RecentMMRWitness calldata mmrWitness,\\n        bytes calldata proof\\n    ) external onlyProver {\\n        requireNotFrozen();\\n\\n        if (queries[keccakQueryResponse].state != AxiomQueryState.Active) {\\n            revert CannotFulfillIfNotActive();\\n        }\\n\\n        bytes32 proofKeccakQueryResponse = _verifyResultVsMMR(mmrIdx, mmrWitness, proof);\\n\\n        if (proofKeccakQueryResponse != keccakQueryResponse) {\\n            revert KeccakQueryResponseDoesNotMatchProof();\\n        }\\n\\n        AxiomQueryMetadata memory newMetadata = AxiomQueryMetadata({\\n            payment:queries[keccakQueryResponse].payment,\\n            state:AxiomQueryState.Fulfilled,\\n            deadlineBlockNumber:queries[keccakQueryResponse].deadlineBlockNumber,\\n            refundee:queries[keccakQueryResponse].refundee\\n        });\\n        queries[keccakQueryResponse] = newMetadata;\\n\\n        payee.sendValue(queries[keccakQueryResponse].payment);\\n        emit QueryFulfilled(keccakQueryResponse, queries[keccakQueryResponse].payment, payee);\\n    }\\n\\n    function collectRefund(bytes32 keccakQueryResponse) external {\\n        AxiomQueryMetadata memory queryMetadata = queries[keccakQueryResponse];\\n        if (queryMetadata.state != AxiomQueryState.Active) {\\n            revert CannotRefundIfNotActive();\\n        }\\n        if (block.number <= queryMetadata.deadlineBlockNumber) {\\n            revert CannotRefundBeforeDeadline();\\n        }\\n\\n        AxiomQueryMetadata memory newMetadata = AxiomQueryMetadata({\\n            payment:0,\\n            state:AxiomQueryState.Inactive,\\n            deadlineBlockNumber:0,\\n            refundee:payable(address(0))\\n        });\\n        queries[keccakQueryResponse] = newMetadata;\\n\\n        queryMetadata.refundee.sendValue(queryMetadata.payment);\\n        emit QueryRefunded(keccakQueryResponse, queryMetadata.payment, queryMetadata.deadlineBlockNumber, queryMetadata.refundee);\\n    }            \\n\\n    function isKeccakResultValid(bytes32 keccakBlockResponse, bytes32 keccakAccountResponse, bytes32 keccakStorageResponse)\\n        external\\n        view\\n        returns (bool) \\n    {\\n        return verifiedKeccakResults[keccak256(abi.encodePacked(keccakBlockResponse, keccakAccountResponse, keccakStorageResponse))];\\n    }\\n\\n    function isPoseidonResultValid(bytes32 poseidonBlockResponse, bytes32 poseidonAccountResponse, bytes32 poseidonStorageResponse)\\n        external\\n        view\\n        returns (bool) \\n    {\\n        return verifiedPoseidonResults[keccak256(abi.encodePacked(poseidonBlockResponse, poseidonAccountResponse, poseidonStorageResponse))];\\n    }    \\n\\n    function areResponsesValid(\\n        bytes32 keccakBlockResponse,\\n        bytes32 keccakAccountResponse,\\n        bytes32 keccakStorageResponse,\\n        BlockResponse[] calldata blockResponses,\\n        AccountResponse[] calldata accountResponses,\\n        StorageResponse[] calldata storageResponses\\n    ) external view returns (bool) {\\n        if (!verifiedKeccakResults[keccak256(abi.encodePacked(keccakBlockResponse, keccakAccountResponse, keccakStorageResponse))]) {\\n            return false;\\n        }\\n\\n        for (uint32 idx = 0; idx < blockResponses.length; idx++) {\\n            bytes32 leaf = keccak256(abi.encodePacked(\\n                blockResponses[idx].blockHash,\\n                blockResponses[idx].blockNumber\\n            ));\\n            if (!isMerklePathValid(keccakBlockResponse, leaf, blockResponses[idx].proof, blockResponses[idx].leafIdx)) {\\n                return false;\\n            }\\n        }\\n\\n        // `keccakAccountResponse` is the Merkle root of the packed addresses:\\n        //    * `keccak(blockNumber . addr . keccak(nonce . balance . storageRoot . codeHash))`.\\n        for (uint32 idx = 0; idx < accountResponses.length; idx++) {\\n            bytes32 leaf = keccak256(abi.encodePacked(\\n                accountResponses[idx].blockNumber,\\n                accountResponses[idx].addr,\\n                keccak256(abi.encodePacked(\\n                    accountResponses[idx].nonce,\\n                    accountResponses[idx].balance,\\n                    accountResponses[idx].storageRoot,\\n                    accountResponses[idx].codeHash\\n                ))\\n            ));\\n            if (!isMerklePathValid(keccakAccountResponse, leaf, accountResponses[idx].proof, accountResponses[idx].leafIdx)) {\\n                return false;\\n            }\\n        }\\n\\n        for (uint32 idx = 0; idx < storageResponses.length; idx++) {\\n            bytes32 leaf = keccak256(abi.encodePacked(\\n                storageResponses[idx].blockNumber,\\n                storageResponses[idx].addr,\\n                storageResponses[idx].slot,\\n                storageResponses[idx].value\\n            ));\\n            if (!isMerklePathValid(keccakStorageResponse, leaf, storageResponses[idx].proof, storageResponses[idx].leafIdx)) {\\n                return false;\\n            }\\n        }\\n        return true;            \\n    } \\n\\n    /// @notice Record on-chain query.\\n    /// @param  keccakQueryResponse The hash of the query response.\\n    /// @param  payment The payment offered, in wei.\\n    /// @param  refundee The address to send any refund to.\\n    function _sendQuery(bytes32 keccakQueryResponse, uint256 payment, address payable refundee) internal {\\n        if (queries[keccakQueryResponse].state != AxiomQueryState.Inactive) {\\n            revert QueryNotInactive();\\n        }\\n\\n        AxiomQueryMetadata memory queryMetadata = AxiomQueryMetadata({\\n            payment:payment,\\n            state:AxiomQueryState.Active,\\n            deadlineBlockNumber:uint32(block.number) + queryDeadlineInterval,\\n            refundee:refundee\\n        });\\n        queries[keccakQueryResponse] = queryMetadata;   \\n    }\\n\\n    /// @notice Verify a query result on-chain.\\n    /// @param  mmrIdx The index of the cached MMR to verify against.\\n    /// @param  mmrWitness Witness data to reconcile `recentMMR` against `historicalRoots`.\\n    /// @param  proof The ZK proof data.\\n    function _verifyResultVsMMR(\\n        uint32 mmrIdx,\\n        RecentMMRWitness calldata mmrWitness,\\n        bytes calldata proof\\n    ) internal returns (bytes32) {\\n        requireNotFrozen(); \\n        require(mmrIdx < MMR_RING_BUFFER_SIZE);\\n\\n        AxiomMMRQueryResponse memory response = getMMRQueryData(proof);        \\n\\n        // Check that the historical MMR matches a cached value in `mmrRingBuffer`\\n        if (IAxiomV1State(axiomAddress).mmrRingBuffer(mmrIdx) != response.historicalMMRKeccak) {\\n            revert HistoricalMMRKeccakDoesNotMatchProof();\\n        }\\n\\n        // recentMMRKeccak = keccak(mmr[0] . mmr[1] . ... . mmr[9]), where mmr[idx] is either bytes32(0) or the Merkle root of 2 ** idx hashes\\n        // historicalRoots(startBlockNumber) = keccak256(prevHash . root . numFinal) \\n        //         - root is the keccak Merkle root of hash(i) for i in [0, 1024), where\\n        //             hash(i) is the blockhash of block `startBlockNumber + i` if i < numFinal,\\n        //             hash(i) = bytes32(0x0) if i >= numFinal\\n        // We check that `recentMMRPeaks` is included in `historicalRoots[startBlockNumber].root` via `mmrComplementOrPeaks`\\n        // This proves that all block hashes committed to in `recentMMRPeaks` are part of the canonical chain.\\n        {\\n            bytes32 historicalRoot = IAxiomV1State(axiomAddress).historicalRoots(mmrWitness.startBlockNumber); \\n            require(historicalRoot == keccak256(abi.encodePacked(mmrWitness.prevHash, mmrWitness.root, mmrWitness.numFinal)));\\n        }\\n\\n        require(response.recentMMRKeccak == keccak256(abi.encodePacked(mmrWitness.recentMMRPeaks)));\\n        uint32 mmrLen = 0;\\n        for (uint32 idx = 0; idx < 10; idx++) {\\n            if (mmrWitness.recentMMRPeaks[idx] != bytes32(0)) {\\n                mmrLen = mmrLen + uint32(1 << idx);\\n            }\\n        }\\n\\n        // if `mmrLen == 0`, there is no check necessary against blocks\\n        if (mmrLen > 0 && mmrLen <= mmrWitness.numFinal) {\\n            // In this case, the full `mmrWitness` should be committed to in `mmrWitness.root`\\n            // In this branch, `mmrWitness.mmrComplementOrPeaks` holds the complementary MMR which completes `mmrWitness`\\n            // We check that \\n            //    * The MMR in `mmrWitness` can be completed to `mmrWitness.root`\\n            // This proves that the MMR in `mmrWitness` is the MMR of authentic block hashes with 0's appended.\\n            // Under the random oracle assumption, 0 can never be achieved as keccak of an erroenous block header,\\n            // so there is no soundness risk here.\\n            (bytes32 runningHash, ) = getMMRComplementRoot(mmrWitness.recentMMRPeaks, mmrWitness.mmrComplementOrPeaks);\\n            require(mmrWitness.root == runningHash);            \\n        } else if (mmrLen > mmrWitness.numFinal) {\\n            // Some of the claimed block hashes in `mmrWitness` were not committed to in `mmrWitness`\\n            // In this branch, `mmrWitness.mmrComplementOrPeaks` holds the MMR values of the non-zero hashes in `root`\\n            // We check that\\n            //    * block hashes for numbers [startBlockNumber + numFinal, startBlockNumber + mmrLen) are recent\\n            //    * appending these block hashes to the committed MMR in `mmrWitness` (without 0-padding) yields the MMR in `mmrWitness`\\n            if (mmrWitness.startBlockNumber + mmrLen > block.number) {\\n                revert MMREndBlockNotRecent();\\n            }\\n            if (mmrWitness.startBlockNumber + mmrWitness.numFinal < block.number - 256) {\\n                revert BlockHashWitnessNotRecent();\\n            }\\n\\n            // zeroHashes[idx] is the Merkle root of a tree of depth idx with 0's as leaves\\n            bytes32[10] memory zeroHashes = [\\n                bytes32(0x0000000000000000000000000000000000000000000000000000000000000000),\\n                bytes32(0xad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5),\\n                bytes32(0xb4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30),\\n                bytes32(0x21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85),\\n                bytes32(0xe58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344),\\n                bytes32(0x0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d),\\n                bytes32(0x887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968),\\n                bytes32(0xffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83),\\n                bytes32(0x9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af),\\n                bytes32(0xcefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0)\\n            ];\\n            // read the committed MMR without zero-padding\\n            (bytes32 runningHash, uint32 runningSize) = getMMRComplementRoot(mmrWitness.mmrComplementOrPeaks, zeroHashes);\\n            require(mmrWitness.numFinal == runningSize);\\n            require(mmrWitness.root == runningHash);            \\n\\n            // check appending to the committed MMR with recent blocks will yield the claimed MMR\\n            {\\n                bytes32[] memory append = new bytes32[](mmrLen - mmrWitness.numFinal);\\n                for (uint32 idx = 0; idx < mmrLen - mmrWitness.numFinal; idx++) {\\n                    append[idx] = blockhash(mmrWitness.startBlockNumber + mmrWitness.numFinal + idx);\\n                }\\n                uint32 appendLeft = mmrLen - mmrWitness.numFinal;\\n                uint32 height = 0;\\n                uint32 insert = 0;\\n                while (appendLeft > 0) {\\n                    insert = (mmrWitness.numFinal >> height) & 1;\\n                    for (uint32 idx = 0; idx < (appendLeft + insert) / 2; idx++) {\\n                        bytes32 left;\\n                        bytes32 right;\\n                        if (insert == 1) {\\n                            left = (idx == 0 ? mmrWitness.mmrComplementOrPeaks[height] : append[2 * idx - 1]);\\n                            right = append[2 * idx];\\n                        } else {\\n                            left = append[2 * idx];\\n                            right = append[2 * idx + 1];\\n                        }\\n                        append[idx] = keccak256(abi.encodePacked(left, right));\\n                    }\\n                    if ((appendLeft + insert) % 2 == 1) {                  \\n                        if (append[appendLeft - 1] != mmrWitness.recentMMRPeaks[height]) {\\n                            revert ClaimedMMRDoesNotMatchRecent();\\n                        }\\n                    } else {\\n                        // This should not be possible, but leaving this revert in for safety.\\n                        if (mmrWitness.recentMMRPeaks[height] != 0) {\\n                            revert ClaimedMMRDoesNotMatchRecent();\\n                        }\\n                    }\\n                    height = height + 1;\\n                    appendLeft = (appendLeft + insert) / 2;\\n                }\\n            }\\n        }\\n\\n        // verify the ZKP itself\\n        (bool success, ) = mmrVerifierAddress.call(proof);\\n        if (!success) {\\n            revert MMRProofVerificationFailed();\\n        }\\n\\n        // update the cache\\n        bytes32 keccakQueryResponse = keccak256(abi.encodePacked(response.keccakBlockResponse, response.keccakAccountResponse, response.keccakStorageResponse));\\n\\n        verifiedKeccakResults[keccakQueryResponse] = true;\\n        verifiedPoseidonResults[keccak256(abi.encodePacked(response.poseidonBlockResponse, response.poseidonAccountResponse, response.poseidonStorageResponse))] = true;\\n        emit KeccakResultEvent(response.keccakBlockResponse, response.keccakAccountResponse, response.keccakStorageResponse);\\n        emit PoseidonResultEvent(response.poseidonBlockResponse, response.poseidonAccountResponse, response.poseidonStorageResponse);\\n        return keccakQueryResponse;\\n    }\\n\\n    /// @dev    Given a non-empty MMR `mmr`, compute its `size` and the Merkle root of its completion to 1024 leaves using `mmrComplement`\\n    /// @param  mmr The peaks of a MMR, where `mmr[idx]` is either `bytes32(0x0)` or the Merkle root of a tree of depth `idx`.  \\n    ///         At least one peak is guaranteed to be non-zero.\\n    /// @param  mmrComplement Entries which contain peaks of a complementary MMR, where `mmrComplement[idx]` is either `bytes32(0x0)` or the\\n    ///         Merkle root of a tree of depth `idx`.  Only the relevant indices are accessed.\\n    /// @dev    As an example, if `mmr` has peaks of depth 9 8 6 3, then `mmrComplement` has peaks of depth 3 4 5 7\\n    ///         In this example, the peaks of `mmr` are Merkle roots of the first 2^9 leaves, then the next 2^8 leaves, and so on.\\n    ///         The peaks of `mmrComplement` are Merkle roots of the first 2^3 leaves after `mmr`, then the next 2^4 leaves, and so on.\\n    /// @return root The Merkle root of the completion of `mmr`.\\n    /// @return size The number of leaves contained in `mmr`.\\n    function getMMRComplementRoot(bytes32[10] memory mmr, bytes32[10] memory mmrComplement) internal pure returns (bytes32 root, uint32 size) {\\n        bool started = false;\\n        root = bytes32(0x0);\\n        size = 0;\\n        for (uint32 peakIdx = 0; peakIdx < 10; peakIdx++) {\\n            if (!started && mmr[peakIdx] != bytes32(0x0)) {\\n                root = mmrComplement[peakIdx];\\n                started = true;\\n            }\\n            if (started) {\\n                if (mmr[peakIdx] != bytes32(0x0)) {\\n                    root = keccak256(abi.encodePacked(mmr[peakIdx], root));\\n                    size = size + uint32(1 << peakIdx);\\n                } else {\\n                    root = keccak256(abi.encodePacked(root, mmrComplement[peakIdx]));\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev   Verify a Merkle inclusion proof into a Merkle tree with (1 << proof.length) leaves\\n    /// @param root The Merkle root.\\n    /// @param leaf The claimed leaf in the tree.\\n    /// @param proof The Merkle proof, where index 0 corresponds to a leaf in the tree.\\n    /// @param leafIdx The claimed index of the leaf in the tree, where index 0 corresponds to the leftmost leaf.\\n    function isMerklePathValid(bytes32 root, bytes32 leaf, bytes32[QUERY_MERKLE_DEPTH] memory proof, uint32 leafIdx) internal pure returns (bool) {\\n        bytes32 runningHash = leaf;\\n        for (uint32 idx = 0; idx < proof.length; idx++) {\\n            if ((leafIdx >> idx) & 1 == 0) {\\n                runningHash = keccak256(abi.encodePacked(runningHash, proof[idx]));\\n            } else {\\n                runningHash = keccak256(abi.encodePacked(proof[idx], runningHash));\\n            }\\n        }\\n        return (root == runningHash);\\n    }\\n\\n    /// @dev   Extract public instances from proof.\\n    /// @param proof The ZK proof.\\n    // The public instances are laid out in the proof calldata as follows:\\n    //   ** First 4 * 3 * 32 = 384 bytes are reserved for proof verification data used with the pairing precompile\\n    //   ** The next blocks of 13 groups of 32 bytes each are:\\n    //   ** `poseidonBlockResponse`            as a field element\\n    //   ** `keccakBlockResponse`              as 2 field elements, in hi-lo form\\n    //   ** `poseidonAccountResponse`          as a field element\\n    //   ** `keccakAccountResponse`            as 2 field elements, in hi-lo form\\n    //   ** `poseidonStorageResponse`          as a field element\\n    //   ** `keccakStorageResponse`            as 2 field elements, in hi-lo form\\n    //   ** `historicalMMRKeccak` which is `keccak256(abi.encodePacked(mmr[10:]))` as 2 field elements in hi-lo form.\\n    //   ** `recentMMRKeccak`     which is `keccak256(abi.encodePacked(mmr[:10]))` as 2 field elements in hi-lo form.\\n    // Here:\\n    //   ** `{keccak, poseidon}{Block, Account, Storage}Response` are defined as in `AxiomMMRQueryResponse`.\\n    //   ** hi-lo form means a uint256 `(a << 128) + b` is represented as two uint256's `a` and `b`, each of which is\\n    //      guaranteed to contain a uint128.\\n    //   ** `mmr` is a variable length array of bytes32 containing the Merkle Mountain Range that `proof` is proving into.\\n    //      `mmr[idx]` is either `bytes32(0)` or the Merkle root of `1 << idx` block hashes.\\n    //   ** `mmr` is guaranteed to have length at least `10` and at most `32`.\\n    function getMMRQueryData(bytes calldata proof)\\n        internal \\n        pure\\n        returns (AxiomMMRQueryResponse memory)\\n    {\\n        return AxiomMMRQueryResponse({\\n            poseidonBlockResponse:bytes32(proof[384:384 + 32]),\\n            keccakBlockResponse:bytes32(uint256(bytes32(proof[384 + 32: 384 + 2 * 32])) << 128 | uint256(bytes32(proof[384 + 2 * 32: 384 + 3 * 32]))),\\n            poseidonAccountResponse:bytes32(proof[384 + 3 * 32:384 + 4 * 32]),\\n            keccakAccountResponse:bytes32(uint256(bytes32(proof[384 + 4 * 32: 384 + 5 * 32])) << 128 | uint256(bytes32(proof[384 + 5 * 32: 384 + 6 * 32]))),\\n            poseidonStorageResponse:bytes32(proof[384 + 6 * 32:384 + 7 * 32]),\\n            keccakStorageResponse:bytes32(uint256(bytes32(proof[384 + 7 * 32: 384 + 8 * 32])) << 128 | uint256(bytes32(proof[384 + 8 * 32: 384 + 9 * 32]))),\\n            historicalMMRKeccak:bytes32(uint256(bytes32(proof[384 + 9 * 32: 384 + 10 * 32])) << 128 | uint256(bytes32(proof[384 + 10 * 32: 384 + 11 * 32]))),\\n            recentMMRKeccak:bytes32(uint256(bytes32(proof[384 + 11 * 32: 384 + 12 * 32])) << 128 | uint256(bytes32(proof[384 + 12 * 32: 384 + 13 * 32])))\\n        });\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(AccessControlUpgradeable)\\n        returns (bool) {\\n        return interfaceId == type(IAxiomV1Query).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _authorizeUpgrade(address) internal override onlyRole(TIMELOCK_ROLE) {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[40] private __gap;    \\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/AxiomV1Access.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {AccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/// @title  Axiom V1 Access\\n/// @notice Abstract contract controlling permissions of AxiomV1\\n/// @dev    For use in a UUPS upgradeable contract.\\nabstract contract AxiomV1Access is Initializable, AccessControlUpgradeable {\\n    bool public frozen;\\n\\n    /// @notice Storage slot for the address with the permission of a 'timelock'.\\n    bytes32 public constant TIMELOCK_ROLE = keccak256(\\\"TIMELOCK_ROLE\\\");\\n\\n    /// @notice Storage slot for the addresses with the permission of a 'guardian'.\\n    bytes32 public constant GUARDIAN_ROLE = keccak256(\\\"GUARDIAN_ROLE\\\");\\n\\n    /// @notice Storage slot for the addresses with the permission of a 'prover'.\\n    bytes32 public constant PROVER_ROLE = keccak256(\\\"PROVER_ROLE\\\");\\n\\n    /// @notice Emitted when the `freezeAll` is called\\n    event FreezeAll();\\n\\n    /// @notice Emitted when the `unfreezeAll` is called\\n    event UnfreezeAll();\\n\\n    /// @notice Error when trying to call contract while it is frozen\\n    error ContractIsFrozen();\\n\\n    /// @notice Error when trying to call contract from address without 'prover' role\\n    error NotProverRole();\\n\\n    /**\\n     * @dev Modifier to make a function callable only by the 'prover' role.\\n     * As an initial safety mechanism, the 'update_' functions are only callable by the 'prover' role.\\n     * Granting the prover role to `address(0)` will enable this role for everyone.\\n     */\\n    modifier onlyProver() {\\n        if (!hasRole(PROVER_ROLE, address(0)) && !hasRole(PROVER_ROLE, _msgSender())) {\\n            revert NotProverRole();\\n        }\\n        _;\\n    }\\n\\n    function __AxiomV1Access_init() internal onlyInitializing {\\n        __AxiomV1Access_init_unchained();\\n    }\\n\\n    function __AxiomV1Access_init_unchained() internal onlyInitializing {\\n        frozen = false;\\n    }\\n\\n    function freezeAll() external onlyRole(GUARDIAN_ROLE) {\\n        frozen = true;\\n        emit FreezeAll();\\n    }\\n\\n    function unfreezeAll() external onlyRole(GUARDIAN_ROLE) {\\n        frozen = false;\\n        emit UnfreezeAll();\\n    }\\n\\n    /// @notice Checks that the contract is not frozen.\\n    function requireNotFrozen() internal view {\\n        if (frozen) {\\n            revert ContractIsFrozen();\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[40] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/core/IAxiomV1State.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IAxiomV1State {\\n    /// @notice Returns the hash of a batch of consecutive blocks previously verified by the contract\\n    /// @dev    The reads here will match the emitted #UpdateEvent\\n    /// @return historicalRoots(startBlockNumber) is 0 unless (startBlockNumber % 1024 == 0)\\n    ///         historicalRoots(startBlockNumber) = 0 if block `startBlockNumber` is not verified\\n    ///         historicalRoots(startBlockNumber) = keccak256(prevHash || root || numFinal) where || is concatenation\\n    ///         - prevHash is the parent hash of block `startBlockNumber`\\n    ///         - root is the keccak Merkle root of hash(i) for i in [0, 1024), where\\n    ///             hash(i) is the blockhash of block `startBlockNumber + i` if i < numFinal,\\n    ///             hash(i) = bytes32(0x0) if i >= numFinal\\n    ///         - 0 < numFinal <= 1024 is the number of verified consecutive roots in [startBlockNumber, startBlockNumber + numFinal)\\n    function historicalRoots(uint32 startBlockNumber) external view returns (bytes32);\\n\\n    /// @notice Returns metadata about the number of consecutive blocks from genesis stored in the contract\\n    ///         The Merkle mountain range stores a commitment to the variable length list where `list[i]` is the Merkle root of the binary tree with leaves the blockhashes of blocks [1024 * i, 1024 * (i + 1))\\n    /// @return numPeaks = bit_length(len) is the number of peaks in the Merkle mountain range\\n    /// @return len indicates that the historicalMMR commits to blockhashes of blocks [0, 1024 * len)\\n    /// @return index the current index in the ring buffer storing commitments to historicalMMRs\\n    function historicalMMR() external view returns (uint32 numPeaks, uint32 len, uint32 index);\\n\\n    /// @notice Returns the i-th Merkle root in the historical Merkle Mountain Range\\n    /// @param  i The index, `peaks[i] = root(list[((len >> i) << i) - 2^i : ((len >> i) << i)])` if 2^i & len != 0, otherwise 0\\n    ///         where root(single element) = single element,\\n    ///         list is the variable length list where `list[i]` is the Merkle root of the binary tree with leaves the blockhashes of blocks [1024 * i, 1024 * (i + 1))\\n    function historicalMMRPeaks(uint32 i) external view returns (bytes32);\\n\\n    /// @notice A ring buffer storing commitments to past historicalMMR states\\n    /// @param  index The index in the ring buffer\\n    function mmrRingBuffer(uint256 index) external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/core/IAxiomV1Verifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {BLOCK_BATCH_DEPTH} from \\\"../../libraries/configuration/AxiomV1Configuration.sol\\\";\\n\\ninterface IAxiomV1Verifier {\\n    /// @notice A merkle proof to verify a block against the verified blocks cached by Axiom\\n    /// @dev    `BLOCK_BATCH_DEPTH = 10`\\n    struct BlockHashWitness {\\n        uint32 blockNumber;\\n        bytes32 claimedBlockHash;\\n        bytes32 prevHash;\\n        uint32 numFinal;\\n        bytes32[BLOCK_BATCH_DEPTH] merkleProof;\\n    }\\n\\n    /// @notice Verify the blockhash of block blockNumber equals claimedBlockHash. Assumes that blockNumber is within the last 256 most recent blocks.\\n    /// @param  blockNumber The block number to verify\\n    /// @param  claimedBlockHash The claimed blockhash of block blockNumber\\n    function isRecentBlockHashValid(uint32 blockNumber, bytes32 claimedBlockHash) external view returns (bool);\\n\\n    /// @notice Verify the blockhash of block witness.blockNumber equals witness.claimedBlockHash by checking against Axiom's cache of #historicalRoots.\\n    /// @dev    For block numbers within the last 256, use #isRecentBlockHashValid instead.\\n    /// @param  witness The block hash to verify and the Merkle proof to verify it\\n    ///         witness.blockNumber is the block number to verify\\n    ///         witness.claimedBlockHash is the claimed blockhash of block witness.blockNumber\\n    ///         witness.prevHash is the prevHash stored in #historicalRoots(witness.blockNumber - witness.blockNumber % 1024)\\n    ///         witness.numFinal is the numFinal stored in #historicalRoots(witness.blockNumber - witness.blockNumber % 1024)\\n    ///         witness.merkleProof is the Merkle inclusion proof of witness.claimedBlockHash to the root stored in #historicalRoots(witness.blockNumber - witness.blockNumber % 1024)\\n    ///         witness.merkleProof[i] is the sibling of the Merkle node at depth 10 - i, for i = 0, ..., 10\\n    function isBlockHashValid(BlockHashWitness calldata witness) external view returns (bool);\\n\\n    /// @notice Verify the blockhash of block blockNumber equals claimedBlockHash by checking against Axiom's cache of historical Merkle mountain ranges in #mmrRingBuffer.\\n    /// @dev    Use event logs to determine the correct bufferId and get the MMR at that index in the ring buffer.\\n    /// @param  mmr The Merkle mountain range commited to in #mmrRingBuffer(bufferId), must be correct length\\n    /// @param  bufferId The index in the ring buffer of #mmrRingBuffer\\n    /// @param  blockNumber The block number to verify\\n    /// @param  claimedBlockHash The claimed blockhash of block blockNumber\\n    /// @param  merkleProof The Merkle inclusion proof of claimedBlockHash to the corresponding peak in mmr. The correct peak is calculated from mmr.length and blockNumber.\\n    function mmrVerifyBlockHash(\\n        bytes32[] calldata mmr,\\n        uint8 bufferId,\\n        uint32 blockNumber,\\n        bytes32 claimedBlockHash,\\n        bytes32[] calldata merkleProof\\n    ) external view;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAxiomV1Query.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"./core/IAxiomV1Verifier.sol\\\";\\n\\n// The depth of the Merkle root of queries in:\\n//   `keccakBlockResponse`, `keccakAccountResponse`, and `keccakStorageResponse`\\nuint32 constant QUERY_MERKLE_DEPTH = 6;\\n\\ninterface IAxiomV1Query {\\n    /// @notice States of an on-chain query\\n    /// @param  Inactive The query has not been made or was refunded.\\n    /// @param  Active The query has been requested, but not fulfilled.\\n    /// @param  Fulfilled The query was successfully fulfilled.\\n    enum AxiomQueryState {\\n        Inactive,\\n        Active,\\n        Fulfilled\\n    }\\n\\n    /// @notice Stores metadata about a query \\n    /// @param  payment The ETH payment received, in wei. \\n    /// @param  state The state of the query.\\n    /// @param  deadlineBlockNumber The deadline (in block number) after which a refund may be granted.\\n    /// @param  refundee The address funds should be returned to if the query is not fulfilled.\\n    struct AxiomQueryMetadata {\\n        uint256 payment;\\n        AxiomQueryState state; \\n        uint32 deadlineBlockNumber;\\n        address payable refundee;\\n    }\\n\\n    /// @notice Response values read from ZK proof for query.\\n    /// @param  poseidonBlockResponse Poseidon Merkle root of `poseidon(blockHash . blockNumber . poseidon_tree_root(block_header))`\\n    /// @param  keccakBlockResponse Keccak Merkle root of `keccak(blockHash . blockNumber)` \\n    /// @param  poseidonAccountResponse Poseidon Merkle root of `poseidon(poseidonBlockResponseRow . poseidon(stateRoot . addr . poseidon_tree_root(account_state)))`\\n    /// @param  keccakAccountResponse Keccak Merkle root of `keccak(blockNumber . addr . keccak(nonce . balance . storageRoot . codeHash))`\\n    /// @param  poseidonStorageResponse Poseidon Merkle root of `poseidon(poseidonBlockResponseRow . poseidonAccountResponseRow . poseidon(storageRoot . slot . value))`\\n    /// @param  keccakStorageResponse Keccak Merkle root of `keccak(blockNumber . addr . slot . value)`\\n    /// @param  historicalMMRKeccak `keccak256(abi.encodePacked(mmr[10:]))`\\n    /// @param  recentMMRKeccak `keccak256(abi.encodePacked(mmr[:10]))`\\n    //  Detailed documentation on format here: https://hackmd.io/@axiom/S17K2drf2\\n    //  ** `poseidonBlockResponseRow = poseidon(blockHash . blockNumber . poseidon_tree_root(block_header))`\\n    //  ** `poseidonAccountResponseRow = poseidon(stateRoot . addr . poseidon_tree_root(account_state)))`\\n    //  ** `mmr` is a variable length array of bytes32 containing the Merkle Mountain Range the ZK proof is proving into.\\n    //     `mmr[idx]` is either `bytes32(0)` or the Merkle root of `1 << idx` block hashes.\\n    //  ** `mmr` is guaranteed to have length at least `10` and at most `32`.\\n    struct AxiomMMRQueryResponse {\\n        bytes32 poseidonBlockResponse;\\n        bytes32 keccakBlockResponse;\\n        bytes32 poseidonAccountResponse; \\n        bytes32 keccakAccountResponse;\\n        bytes32 poseidonStorageResponse;\\n        bytes32 keccakStorageResponse;\\n        bytes32 historicalMMRKeccak;\\n        bytes32 recentMMRKeccak;\\n    }\\n\\n    /// @notice Stores witness data for checking MMRs\\n    /// @param  prevHash The `prevHash` as in `IAxiomV1State`.\\n    /// @param  root The `root` as in `IAxiomV1State`.\\n    /// @param  numFinal The `numFinal` as in `IAxiomV1State`.  \\n    /// @param  startBlockNumber The `startBlockNumber` as in `IAxiomV1State`.\\n    /// @param  recentMMRPeaks Peaks of the MMR committed to in the public input `recentMMRKeccak` of the ZK proof.\\n    /// @param  mmrComplementOrPeaks If `len(recentMMRPeaks) <= numFinal`, then this is a complementary MMR containing  \\n    ///         the complement of `recentMMRPeaks` which together with `recentMMRPeaks` forms `root`.  \\n    ///         If `len(recentMMRPeaks) > numFinal`, then this is the MMR peaks of the `numFinal` blockhashes commited\\n    ///         to in `root`.\\n    struct RecentMMRWitness {\\n        bytes32 prevHash;\\n        bytes32 root;\\n        uint32 numFinal;\\n        uint32 startBlockNumber;        \\n        bytes32[10] recentMMRPeaks;\\n        bytes32[10] mmrComplementOrPeaks;\\n    }\\n\\n    /// @notice Store a query result into a single block\\n    /// @param  blockNumber The block number.\\n    /// @param  blockHash The block hash.\\n    /// @param  leafIdx The position of this result in the Merkle tree committed to by `keccakBlockResponse`.\\n    /// @param  proof A Merkle proof into `keccakBlockResponse`.\\n    struct BlockResponse {\\n        uint32 blockNumber;\\n        bytes32 blockHash;\\n\\n        uint32 leafIdx;\\n        bytes32[QUERY_MERKLE_DEPTH] proof;\\n    }\\n\\n    /// @notice Store a query result into a single block\\n    /// @param  blockNumber The block number.\\n    /// @param  addr The address.\\n    /// @param  nonce The nonce.\\n    /// @param  balance The balance.\\n    /// @param  storageRoot The storage root.\\n    /// @param  codeHash The code hash.\\n    /// @param  leafIdx The position of this result in the Merkle tree committed to by `keccakAccountResponse`.\\n    /// @param  proof A Merkle proof into `keccakAccountResponse`.\\n    //  Note: Fields are zero-padded by prefixing with zero bytes to:\\n    //    * `nonce`: 8 bytes\\n    //    * `balance`: 12 bytes\\n    //    * `storageRoot`: 32 bytes\\n    //    * `codeHash`: 32 bytes    \\n    struct AccountResponse {\\n        uint32 blockNumber;        \\n        address addr;\\n        uint64 nonce;\\n        uint96 balance;\\n        bytes32 storageRoot;\\n        bytes32 codeHash;\\n\\n        uint32 leafIdx;\\n        bytes32[QUERY_MERKLE_DEPTH] proof;\\n    }\\n\\n    /// @notice Store a query result into a single block\\n    /// @param  blockNumber The block number.\\n    /// @param  addr The address.\\n    /// @param  slot The storage slot index. \\n    /// @param  value The storage slot value.\\n    /// @param  leafIdx The position of this result in the Merkle tree committed to by `keccakStorageResponse`.\\n    /// @param  proof A Merkle proof into `keccakStorageResponse`.\\n    struct StorageResponse {\\n        uint32 blockNumber;\\n        address addr;\\n        uint256 slot;\\n        uint256 value;\\n\\n        uint32 leafIdx;\\n        bytes32[QUERY_MERKLE_DEPTH] proof;\\n    }    \\n\\n    /// @notice Read the set of verified query responses in Keccak form.\\n    /// @param  hash `verifiedKeccakResults(keccak256(keccakBlockResponse . keccakAccountResponse . keccakStorageResponse)) == true` \\n    ///         if and only if each of `keccakBlockResponse`, `keccakAccountResponse`, and `keccakStorageResponse` have been verified\\n    ///         on-chain by a ZK proof.\\n    function verifiedKeccakResults(bytes32 hash) external view returns (bool);\\n\\n    /// @notice Read the set of verified query responses in Poseidon form.\\n    /// @param  hash `verifiedPoseidonResults(keccak256(poseidonBlockResponse . poseidonAccountResponse . poseidonStorageResponse)) == true` \\n    ///         if and only if each of `poseidonBlockResponse`, `poseidonAccountResponse`, and `poseidonStorageResponse` have been\\n    ///         verified on-chain by a ZK proof.\\n    function verifiedPoseidonResults(bytes32 hash) external view returns (bool);\\n\\n    /// @notice Returns the metadata associated to a query\\n    /// @param  keccakQueryResponse The hash of the query response.\\n    function queries(bytes32 keccakQueryResponse) external view \\n        returns (\\n            uint256 payment,\\n            AxiomQueryState state,\\n            uint32 deadlineBlockNumber,\\n            address payable refundee\\n        );\\n\\n    /// @notice Emitted when the `AxiomV1Core` address is updated.\\n    /// @param  newAddress The updated address.\\n    event UpdateAxiomAddress(address newAddress);\\n\\n    /// @notice Emitted when the batch query verifier address is updated.\\n    /// @param  newAddress The updated address.\\n    event UpdateMMRVerifierAddress(address newAddress);\\n\\n    /// @notice Emitted when a Keccak result is recorded\\n    /// @param  keccakBlockResponse As documented in `AxiomMMRQueryResponse`.\\n    /// @param  keccakAccountResponse As documented in `AxiomMMRQueryResponse`.\\n    /// @param  keccakStorageResponse As documented in `AxiomMMRQueryResponse`.\\n    event KeccakResultEvent(bytes32 keccakBlockResponse, bytes32 keccakAccountResponse, bytes32 keccakStorageResponse);\\n\\n    /// @notice Emitted when a Poseidon result is recorded\\n    /// @param  poseidonBlockResponse As documented in `AxiomMMRQueryResponse`.\\n    /// @param  poseidonAccountResponse As documented in `AxiomMMRQueryResponse`.\\n    /// @param  poseidonStorageResponse As documented in `AxiomMMRQueryResponse`.\\n    event PoseidonResultEvent(bytes32 poseidonBlockResponse, bytes32 poseidonAccountResponse, bytes32 poseidonStorageResponse);\\n\\n    /// @notice Emitted when the `minQueryPrice` is updated.\\n    /// @param  minQueryPrice The new `minQueryPrice`.\\n    event UpdateMinQueryPrice(uint256 minQueryPrice);\\n\\n    /// @notice Emitted when the `maxQueryPrice` is updated.\\n    /// @param  maxQueryPrice The new `maxQueryPrice`.\\n    event UpdateMaxQueryPrice(uint256 maxQueryPrice);\\n\\n    /// @notice Emitted when the `queryDeadlineInterval` is updated.\\n    /// @param  queryDeadlineInterval The new `queryDeadlineInterval`.\\n    event UpdateQueryDeadlineInterval(uint32 queryDeadlineInterval);\\n\\n    /// @notice Emitted when a new query with off-chain data availability is requested.\\n    /// @param  keccakQueryResponse The hash of the claimed query response.\\n    /// @param  payment The ETH payment offered, in wei.\\n    /// @param  deadlineBlockNumber The deadline block number after which a refund is possible.\\n    /// @param  refundee The address of the refundee.\\n    /// @param  ipfsHash A content-addressed hash on IPFS where the query spec may be found.\\n    event QueryInitiatedOffchain(bytes32 keccakQueryResponse, uint256 payment, uint32 deadlineBlockNumber, address refundee, bytes32 ipfsHash);\\n\\n    /// @notice Emitted when a new query with on-chain data availability is requested.\\n    /// @param  keccakQueryResponse The hash of the claimed query response.\\n    /// @param  payment The ETH payment offered, in wei.\\n    /// @param  deadlineBlockNumber The deadline block number after which a refund is possible.\\n    /// @param  refundee The address of the refundee.\\n    /// @param  queryHash The hash of the on-chain query.    \\n    event QueryInitiatedOnchain(bytes32 keccakQueryResponse, uint256 payment, uint32 deadlineBlockNumber, address refundee, bytes32 queryHash);\\n\\n    /// @notice Emitted when a query is fulfilled.\\n    /// @param  keccakQueryResponse The hash of the query response.\\n    /// @param  payment The ETH payment collected, in wei.\\n    /// @param  prover The address of the prover collecting payment.\\n    event QueryFulfilled(bytes32 keccakQueryResponse, uint256 payment, address prover);\\n\\n    /// @notice Emitted when a query is refunded.\\n    /// @param  keccakQueryResponse The hash of the query response.\\n    /// @param  payment The ETH payment refunded minus gas, in wei.\\n    /// @param  refundee The address collecting the refund.    \\n    event QueryRefunded(bytes32 keccakQueryResponse, uint256 payment, uint32 deadlineBlockNumber, address refundee);\\n\\n    /// @notice Verify a query result on-chain.\\n    /// @param  mmrIdx The index of the cached MMR to verify against.\\n    /// @param  mmrWitness Witness data to reconcile `recentMMR` against `historicalRoots`.\\n    /// @param  proof The ZK proof data.\\n    function verifyResultVsMMR(\\n        uint32 mmrIdx, \\n        RecentMMRWitness calldata mmrWitness,                   \\n        bytes calldata proof\\n    ) external;                \\n\\n    /// @notice Request proof for query with on-chain query data availability.\\n    /// @param  keccakQueryResponse The Keccak-encoded query response.\\n    /// @param  refundee The address refunds should be sent to.\\n    /// @param  query The serialized query.\\n    function sendQuery(bytes32 keccakQueryResponse, address payable refundee, bytes calldata query) external payable;\\n\\n    /// @notice Request proof for query with off-chain query data availability.\\n    /// @param  keccakQueryResponse The Keccak-encoded query response.\\n    /// @param  refundee The address refunds should be sent to.\\n    /// @param  ipfsHash The IPFS hash the query should optionally be posted to.\\n    function sendOffchainQuery(bytes32 keccakQueryResponse, address payable refundee, bytes32 ipfsHash) external payable;\\n\\n    /// @notice Fulfill a query request on-chain.\\n    /// @param  keccakQueryResponse The hashed query response.\\n    /// @param  payee The address to send payment to.\\n    /// @param  mmrIdx The index of the cached MMR to verify against.\\n    /// @param  mmrWitness Witness data to reconcile `recentMMR` against `historicalRoots`.\\n    /// @param  proof The ZK proof data.\\n    function fulfillQueryVsMMR(\\n        bytes32 keccakQueryResponse, \\n        address payable payee, \\n        uint32 mmrIdx, \\n        RecentMMRWitness calldata mmrWitness,          \\n        bytes calldata proof\\n    ) external;\\n\\n    /// @notice Trigger refund collection for a query after the deadline has expired.\\n    /// @param keccakQueryResponse THe hashed query response.\\n    function collectRefund(bytes32 keccakQueryResponse) external;\\n\\n    /// @notice Checks whether an unpacked query response has already been verified.\\n    /// @param  keccakBlockResponse As documented in `AxiomMMRQueryResponse`.\\n    /// @param  keccakAccountResponse As documented in `AxiomMMRQueryResponse`.\\n    /// @param  keccakStorageResponse As documented in `AxiomMMRQueryResponse`.\\n    function isKeccakResultValid(bytes32 keccakBlockResponse, bytes32 keccakAccountResponse, bytes32 keccakStorageResponse)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @notice Checks whether an unpacked query response has already been verified.\\n    /// @param  poseidonBlockResponse As documented in `AxiomMMRQueryResponse`.\\n    /// @param  poseidonAccountResponse As documented in `AxiomMMRQueryResponse`.\\n    /// @param  poseidonStorageResponse As documented in `AxiomMMRQueryResponse`.\\n    function isPoseidonResultValid(bytes32 poseidonBlockResponse, bytes32 poseidonAccountResponse, bytes32 poseidonStorageResponse)\\n        external\\n        view\\n        returns (bool);        \\n\\n    /// @notice Verify block, account, and storage data against responses which have already been proven.\\n    /// @param  keccakBlockResponse As documented in `AxiomMMRQueryResponse`.\\n    /// @param  keccakAccountResponse As documented in `AxiomMMRQueryResponse`.\\n    /// @param  keccakStorageResponse As documented in `AxiomMMRQueryResponse`.\\n    /// @param  blockResponses The list of block results.\\n    /// @param  accountResponses The list of account results.\\n    /// @param  storageResponses The list of storage results.\\n    // block_response = keccak(blockHash . blockNumber)\\n    // account_response = hash(blockNumber . address . hash_tree_root(account_state))\\n    // storage_response = hash(blockNumber . address . slot . value)\\n    function areResponsesValid(\\n        bytes32 keccakBlockResponse,\\n        bytes32 keccakAccountResponse,\\n        bytes32 keccakStorageResponse,\\n        BlockResponse[] calldata blockResponses,\\n        AccountResponse[] calldata accountResponses,\\n        StorageResponse[] calldata storageResponses\\n    ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/MerkleTree.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {HISTORICAL_NUM_ROOTS} from \\\"./configuration/AxiomV1Configuration.sol\\\";\\n\\n/// @title Merkle Tree\\n/// @notice Helper functions for computing Merkle roots of Merkle trees\\nlibrary MerkleTree {\\n    /// @notice Compute the Merkle root of a Merkle tree with HISTORICAL_NUM_ROOTS leaves\\n    /// @param  leaves The HISTORICAL_NUM_ROOTS leaves of the Merkle tree\\n    function merkleRoot(bytes32[HISTORICAL_NUM_ROOTS] memory leaves) internal pure returns (bytes32) {\\n        // we create a new array to avoid mutating `leaves`, which is passed by reference\\n        // unnecessary if calldata `leaves` is passed in since it is automatically copied to memory\\n        bytes32[] memory hashes = new bytes32[](HISTORICAL_NUM_ROOTS / 2);\\n        for (uint256 i = 0; i < HISTORICAL_NUM_ROOTS / 2; i++) {\\n            hashes[i] = keccak256(abi.encodePacked(leaves[i << 1], leaves[(i << 1) | 1]));\\n        }\\n        uint256 len = HISTORICAL_NUM_ROOTS / 4;\\n        while (len != 0) {\\n            for (uint256 i = 0; i < len; i++) {\\n                hashes[i] = keccak256(abi.encodePacked(hashes[i << 1], hashes[(i << 1) | 1]));\\n            }\\n            len >>= 1;\\n        }\\n        return hashes[0];\\n    }\\n\\n    /// @notice Compute the Merkle root of a Merkle tree with 2^depth leaves all equal to bytes32(0x0)\\n    /// @param depth The depth of the Merkle tree, 0 <= depth < BLOCK_BATCH_DEPTH.\\n    function getEmptyHash(uint256 depth) internal pure returns (bytes32) {\\n        // emptyHashes[idx] is the Merkle root of a tree of depth idx with 0's as leaves\\n        if (depth == 0) {\\n            return bytes32(0x0000000000000000000000000000000000000000000000000000000000000000);\\n        } else if (depth == 1) {\\n            return bytes32(0xad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5);\\n        } else if (depth == 2) {\\n            return bytes32(0xb4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30);\\n        } else if (depth == 3) {\\n            return bytes32(0x21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85);\\n        } else if (depth == 4) {\\n            return bytes32(0xe58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344);\\n        } else if (depth == 5) {\\n            return bytes32(0x0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d);\\n        } else if (depth == 6) {\\n            return bytes32(0x887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968);\\n        } else if (depth == 7) {\\n            return bytes32(0xffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83);\\n        } else if (depth == 8) {\\n            return bytes32(0x9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af);\\n        } else if (depth == 9) {\\n            return bytes32(0xcefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0);\\n        } else {\\n            revert(\\\"depth must be in range [0, 10)\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/configuration/AxiomV1Configuration.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n// Constants and free functions to be inlined into by AxiomV1Core\\n\\n// ZK circuit constants:\\n\\n// AxiomV1 caches blockhashes in batches, stored as Merkle roots of binary Merkle trees\\nuint32 constant BLOCK_BATCH_SIZE = 1024;\\nuint32 constant BLOCK_BATCH_DEPTH = 10;\\n\\n// constants for batch import of historical block hashes\\n// historical uploads a bigger batch of block hashes, stored as Merkle roots of binary Merkle trees\\nuint32 constant HISTORICAL_BLOCK_BATCH_SIZE = 131072; // 2 ** 17\\nuint32 constant HISTORICAL_BLOCK_BATCH_DEPTH = 17;\\n// we will consider the historical Merkle tree of blocks as a Merkle tree of the block batch roots\\nuint32 constant HISTORICAL_NUM_ROOTS = 128; // HISTORICAL_BATCH_SIZE / BLOCK_BATCH_SIZE\\n\\n// The first 4 * 3 * 32 bytes of proof calldata are reserved for two BN254 G1 points for a pairing check\\n// It will then be followed by (7 + BLOCK_BATCH_DEPTH * 2) * 32 bytes of public inputs/outputs\\nuint32 constant AUX_PEAKS_START_IDX = 608; // PUBLIC_BYTES_START_IDX + 7 * 32\\n\\n// Historical MMR Ring Buffer constants\\nuint32 constant MMR_RING_BUFFER_SIZE = 8;\\n\\n/// @dev proofData stores bytes32 and uint256 values in hi-lo format as two uint128 values because the BN254 scalar field is 254 bits\\n/// @dev The first 12 * 32 bytes of proofData are reserved for ZK proof verification data\\n// Extract public instances from proof\\n// The public instances are laid out in the proof calldata as follows:\\n// First 4 * 3 * 32 = 384 bytes are reserved for proof verification data used with the pairing precompile\\n// 384..384 + 32 * 2: prevHash (32 bytes) as two uint128 cast to uint256, because zk proof uses 254 bit field and cannot fit uint256 into a single element\\n// 384 + 32 * 2..384 + 32 * 4: endHash (32 bytes) as two uint128 cast to uint256\\n// 384 + 32 * 4..384 + 32 * 5: startBlockNumber (uint32: 4 bytes) and endBlockNumber (uint32: 4 bytes) are concatenated as `startBlockNumber . endBlockNumber` (8 bytes) and then cast to uint256\\n// 384 + 32 * 5..384 + 32 * 7: root (32 bytes) as two uint128 cast to uint256, this is the highest peak of the MMR if endBlockNumber - startBlockNumber == 1023, otherwise 0\\nfunction getBoundaryBlockData(bytes calldata proofData)\\n    pure\\n    returns (bytes32 prevHash, bytes32 endHash, uint32 startBlockNumber, uint32 endBlockNumber, bytes32 root)\\n{\\n    prevHash = bytes32(uint256(bytes32(proofData[384:416])) << 128 | uint256(bytes32(proofData[416:448])));\\n    endHash = bytes32(uint256(bytes32(proofData[448:480])) << 128 | uint256(bytes32(proofData[480:512])));\\n    startBlockNumber = uint32(bytes4(proofData[536:540]));\\n    endBlockNumber = uint32(bytes4(proofData[540:544]));\\n    root = bytes32(uint256(bytes32(proofData[544:576])) << 128 | uint256(bytes32(proofData[576:608])));\\n}\\n\\n// We have a Merkle mountain range of max depth BLOCK_BATCH_DEPTH (so length BLOCK_BATCH_DEPTH + 1 total) ordered in **decreasing** order of peak size, so:\\n// `root` from `getBoundaryBlockData` is the peak for depth BLOCK_BATCH_DEPTH\\n// `getAuxMmrPeak(proofData, i)` is the peaks for depth BLOCK_BATCH_DEPTH - 1 - i\\n// 384 + 32 * 7 + 32 * 2 * i .. 384 + 32 * 7 + 32 * 2 * (i + 1): (32 bytes) as two uint128 cast to uint256, same as blockHash\\n// Note that the decreasing ordering is *different* than the convention in library MerkleMountainRange\\nfunction getAuxMmrPeak(bytes calldata proofData, uint256 i) pure returns (bytes32) {\\n    return bytes32(\\n        uint256(bytes32(proofData[AUX_PEAKS_START_IDX + i * 64:AUX_PEAKS_START_IDX + i * 64 + 32])) << 128\\n            | uint256(bytes32(proofData[AUX_PEAKS_START_IDX + i * 64 + 32:AUX_PEAKS_START_IDX + (i + 1) * 64]))\\n    );\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.3) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC1967Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.3) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.9._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000,\r\n      \"details\": {\r\n        \"constantOptimizer\": false,\r\n        \"yul\": false\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BlockHashNotValidatedInCache\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BlockHashWitnessNotRecent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BlockMerkleRootDoesNotMatchProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotFulfillIfNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotRefundBeforeDeadline\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotRefundIfNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimedMMRDoesNotMatchRecent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractIsFrozen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HistoricalMMRKeccakDoesNotMatchProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"KeccakQueryResponseDoesNotMatchProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MMREndBlockNotRecent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MMRProofVerificationFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotProverRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceNotPaid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProofVerificationFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QueryNotInactive\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FreezeAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"keccakBlockResponse\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"keccakAccountResponse\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"keccakStorageResponse\",\"type\":\"bytes32\"}],\"name\":\"KeccakResultEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"poseidonBlockResponse\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"poseidonAccountResponse\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"poseidonStorageResponse\",\"type\":\"bytes32\"}],\"name\":\"PoseidonResultEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"keccakQueryResponse\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prover\",\"type\":\"address\"}],\"name\":\"QueryFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"keccakQueryResponse\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"deadlineBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"refundee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ipfsHash\",\"type\":\"bytes32\"}],\"name\":\"QueryInitiatedOffchain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"keccakQueryResponse\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"deadlineBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"refundee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"queryHash\",\"type\":\"bytes32\"}],\"name\":\"QueryInitiatedOnchain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"keccakQueryResponse\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"deadlineBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"refundee\",\"type\":\"address\"}],\"name\":\"QueryRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UnfreezeAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"UpdateAxiomAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"UpdateMMRVerifierAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxQueryPrice\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxQueryPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minQueryPrice\",\"type\":\"uint256\"}],\"name\":\"UpdateMinQueryPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"queryDeadlineInterval\",\"type\":\"uint32\"}],\"name\":\"UpdateQueryDeadlineInterval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUARDIAN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROVER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIMELOCK_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keccakBlockResponse\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"keccakAccountResponse\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"keccakStorageResponse\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"leafIdx\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[6]\",\"name\":\"proof\",\"type\":\"bytes32[6]\"}],\"internalType\":\"struct IAxiomV1Query.BlockResponse[]\",\"name\":\"blockResponses\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"bytes32\",\"name\":\"storageRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"codeHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"leafIdx\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[6]\",\"name\":\"proof\",\"type\":\"bytes32[6]\"}],\"internalType\":\"struct IAxiomV1Query.AccountResponse[]\",\"name\":\"accountResponses\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"leafIdx\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[6]\",\"name\":\"proof\",\"type\":\"bytes32[6]\"}],\"internalType\":\"struct IAxiomV1Query.StorageResponse[]\",\"name\":\"storageResponses\",\"type\":\"tuple[]\"}],\"name\":\"areResponsesValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"axiomAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keccakQueryResponse\",\"type\":\"bytes32\"}],\"name\":\"collectRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keccakQueryResponse\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"payee\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"mmrIdx\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"numFinal\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[10]\",\"name\":\"recentMMRPeaks\",\"type\":\"bytes32[10]\"},{\"internalType\":\"bytes32[10]\",\"name\":\"mmrComplementOrPeaks\",\"type\":\"bytes32[10]\"}],\"internalType\":\"struct IAxiomV1Query.RecentMMRWitness\",\"name\":\"mmrWitness\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"fulfillQueryVsMMR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_axiomAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mmrVerifierAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minQueryPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxQueryPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_queryDeadlineInterval\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"timelock\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keccakBlockResponse\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"keccakAccountResponse\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"keccakStorageResponse\",\"type\":\"bytes32\"}],\"name\":\"isKeccakResultValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poseidonBlockResponse\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"poseidonAccountResponse\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"poseidonStorageResponse\",\"type\":\"bytes32\"}],\"name\":\"isPoseidonResultValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxQueryPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minQueryPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mmrVerifierAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"queries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"enum IAxiomV1Query.AxiomQueryState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"deadlineBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"address payable\",\"name\":\"refundee\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queryDeadlineInterval\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keccakQueryResponse\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"refundee\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ipfsHash\",\"type\":\"bytes32\"}],\"name\":\"sendOffchainQuery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keccakQueryResponse\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"refundee\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"query\",\"type\":\"bytes\"}],\"name\":\"sendQuery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unfreezeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_axiomAddress\",\"type\":\"address\"}],\"name\":\"updateAxiomAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mmrVerifierAddress\",\"type\":\"address\"}],\"name\":\"updateMMRVerifierAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxQueryPrice\",\"type\":\"uint256\"}],\"name\":\"updateMaxQueryPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minQueryPrice\",\"type\":\"uint256\"}],\"name\":\"updateMinQueryPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_queryDeadlineInterval\",\"type\":\"uint32\"}],\"name\":\"updateQueryDeadlineInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"verifiedKeccakResults\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"verifiedPoseidonResults\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"mmrIdx\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"numFinal\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[10]\",\"name\":\"recentMMRPeaks\",\"type\":\"bytes32[10]\"},{\"internalType\":\"bytes32[10]\",\"name\":\"mmrComplementOrPeaks\",\"type\":\"bytes32[10]\"}],\"internalType\":\"struct IAxiomV1Query.RecentMMRWitness\",\"name\":\"mmrWitness\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"verifyResultVsMMR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AxiomV1Query", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}