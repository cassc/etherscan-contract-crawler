{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ncontract FeeRecipientCommission is ReentrancyGuard {\r\n    address adminAddress;\r\n    address mainAddress;\r\n    address commissionAddress;\r\n\r\n    address proposedNewAdminAddress;\r\n    address proposedNewMainAddress;\r\n    address proposedNewCommissionAddress;\r\n\r\n    uint256 commissionPercent;\r\n    uint256 constant one_hundred = 100;\r\n\r\n    event NewAdminAddressProposed(address _address);\r\n    event NewMainAddressProposed(address _address);\r\n    event NewCommissionAddressProposed(address _address);\r\n\r\n    event NewAdminAddressConfirmed(address _old, address _new);\r\n    event NewMainAddressConfirmed(address _old, address _new);\r\n    event NewCommissionAddressConfirmed(address _old, address _new);\r\n\r\n    event Distribute(address mainAddress, address commissionAddress, uint256 _mainAmount, uint256 _commissionAmount, uint256 commissionPercent);\r\n    event ETHReceived(address _from, uint256 _amount);\r\n    event ETHRecovered(address _to, uint256 _amount);\r\n    event ERC20Recovered(address _to, address _tokenAddress, uint256 _amount);\r\n    event CommissionPercentageUpdated(uint256 _old, uint256 _new);\r\n    \r\n    constructor(address _admin, address _main, address _commission, uint256 _percent) {\r\n        adminAddress = _admin;\r\n        mainAddress = _main;\r\n        commissionAddress = _commission;\r\n        commissionPercent = _percent;\r\n    }\r\n\r\n    receive() external payable {\r\n        emit ETHReceived(msg.sender, msg.value);\r\n    }\r\n\r\n    modifier isValidAddress(address _address) {\r\n        require(_address != address(0), \"Invalid address.\");\r\n        _;\r\n    }\r\n\r\n    modifier isAdmin(address _address) {\r\n        require(adminAddress == _address, \"Is not admin.\");\r\n        _;\r\n    }\r\n\r\n    modifier isAdminOrMainAddress(address _address) {\r\n        require(mainAddress == _address || adminAddress == _address, \"Is not admin or main address.\");\r\n        _;\r\n    }\r\n\r\n    modifier isAdminOrCommissionAddress(address _address) {\r\n        require(commissionAddress == _address || adminAddress == _address, \"Is not admin or commission address.\");\r\n        _;\r\n    }\r\n\r\n    modifier isProposedNewAdminAddress(address _address) {\r\n        require(proposedNewAdminAddress == _address, \"Is not the proposed new admin address.\");\r\n        _;\r\n    }\r\n\r\n    modifier isProposedNewMainAddress(address _address) {\r\n        require(proposedNewMainAddress == _address, \"Is not the proposed new main address.\");\r\n        _;\r\n    }\r\n\r\n    modifier isProposedNewCommissionAddress(address _address) {\r\n        require(proposedNewCommissionAddress == _address, \"Is not the proposed new commission address.\");\r\n        _;\r\n    }\r\n\r\n    modifier isAdminMainOrCommissionAddress(address _address) {\r\n        require(adminAddress == _address || mainAddress == _address || commissionAddress == _address, \"Is not a user of this contract.\");\r\n        _;\r\n    }\r\n\r\n    function updateAdminAddress(address _address) isAdmin(msg.sender) isValidAddress(_address) public {\r\n        proposedNewAdminAddress = _address;\r\n\r\n        emit NewAdminAddressProposed(_address);\r\n    }\r\n\r\n    function updateMainAddress(address _address) isAdminOrMainAddress(msg.sender) isValidAddress(_address) public {\r\n        proposedNewMainAddress = _address;\r\n\r\n        emit NewMainAddressProposed(_address);\r\n    }\r\n\r\n    function updateCommissionAddress(address _address) isAdminOrCommissionAddress(msg.sender) isValidAddress(_address) public {\r\n        proposedNewCommissionAddress = _address;\r\n\r\n        emit NewCommissionAddressProposed(_address);\r\n    }\r\n\r\n    function updateCommissionPercentage(uint256 _newCommissionPercentage) isAdmin(msg.sender) public {\r\n        uint256 oldCommissionPercentage = commissionPercent;\r\n        commissionPercent = _newCommissionPercentage;\r\n\r\n        emit CommissionPercentageUpdated(oldCommissionPercentage, commissionPercent);\r\n    }\r\n\r\n    function confirmAdminAddress() isProposedNewAdminAddress(msg.sender) public {\r\n        address oldAdminAddress = adminAddress;\r\n        adminAddress = proposedNewAdminAddress;\r\n        proposedNewAdminAddress = address(0);\r\n\r\n        emit NewAdminAddressConfirmed(oldAdminAddress, adminAddress);\r\n    }\r\n\r\n    function confirmMainAddress() isProposedNewMainAddress(msg.sender) public {\r\n        address oldMainAddress = mainAddress;\r\n        mainAddress = proposedNewMainAddress;\r\n        proposedNewMainAddress = address(0);\r\n\r\n        emit NewMainAddressConfirmed(oldMainAddress, mainAddress);\r\n    }\r\n\r\n    function confirmCommissionAddress() isProposedNewCommissionAddress(msg.sender) public {\r\n        address oldCommissionAddress = commissionAddress;\r\n        commissionAddress = proposedNewCommissionAddress;\r\n        proposedNewCommissionAddress = address(0);\r\n\r\n        emit NewCommissionAddressConfirmed(oldCommissionAddress, commissionAddress);\r\n    }\r\n\r\n    function getAdminAddress() public view returns (address)  {\r\n        return adminAddress;\r\n    }\r\n\r\n    function getCommissionAddress() public view returns (address)  {\r\n        return commissionAddress;\r\n    }\r\n\r\n    function getMainAddress() public view returns (address)  {\r\n        return mainAddress;\r\n    }\r\n\r\n    function getCommissionPercentage() public view returns (uint256) {\r\n        return commissionPercent;\r\n    }\r\n\r\n    function getProposedNewAdminAddress() public view returns (address)  {\r\n        return proposedNewAdminAddress;\r\n    }\r\n\r\n    function getProposedNewCommissionAddress() public view returns (address)  {\r\n        return proposedNewCommissionAddress;\r\n    }\r\n\r\n    function getProposedNewMainAddress() public view returns (address)  {\r\n        return proposedNewMainAddress;\r\n    }\r\n\r\n    function distribute() nonReentrant public {\r\n        uint256 balance = address(this).balance;\r\n        require(balance > 0, \"No ETH to transfer.\");\r\n\r\n        uint256 commissionAmount = balance * commissionPercent / one_hundred;\r\n        (bool commissionSuccess, ) = commissionAddress.call{value: commissionAmount}(\"\");\r\n        require(commissionSuccess, \"Failed to transfer commission.\");\r\n\r\n        uint256 mainAmount = balance - commissionAmount;\r\n        (bool mainSuccess, ) = mainAddress.call{value: mainAmount}(\"\");\r\n        require(mainSuccess, \"Failed to transfer main balance.\");\r\n\r\n        emit Distribute(mainAddress, commissionAddress, mainAmount, commissionAmount, commissionPercent);\r\n    }\r\n\r\n    function recoverERC20(address _tokenAddress) isAdmin(msg.sender) public {\r\n        IERC20 token = IERC20(_tokenAddress);\r\n\r\n        uint256 balance = token.balanceOf(address(this));\r\n        require(balance > 0, \"This token has no balance.\");\r\n\r\n        bool success = token.transfer(adminAddress, balance);\r\n        require(success, \"Token transfer failed.\");\r\n\r\n        emit ERC20Recovered(adminAddress, _tokenAddress, balance);\r\n    }\r\n\r\n    function recoverETH() isAdmin(msg.sender) public {\r\n        uint256 balance = address(this).balance;\r\n        require(balance > 0, \"No ETH to transfer.\");\r\n\r\n        (bool success,) = adminAddress.call{value: balance}(\"\");\r\n        require(success, \"ETH transfer failed.\");\r\n\r\n        emit ETHRecovered(adminAddress, balance);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_main\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_commission\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_old\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"CommissionPercentageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mainAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"commissionAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_mainAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_commissionAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commissionPercent\",\"type\":\"uint256\"}],\"name\":\"Distribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ETHReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ETHRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_old\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"NewAdminAddressConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"NewAdminAddressProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_old\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"NewCommissionAddressConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"NewCommissionAddressProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_old\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"NewMainAddressConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"NewMainAddressProposed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"confirmAdminAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmCommissionAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmMainAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdminAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommissionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommissionPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMainAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProposedNewAdminAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProposedNewCommissionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProposedNewMainAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateAdminAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateCommissionAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCommissionPercentage\",\"type\":\"uint256\"}],\"name\":\"updateCommissionPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateMainAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FeeRecipientCommission", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000474bf4a2f9507c393e36c6547b298f01e24a3f34000000000000000000000000dd8863ab221e01b94d9222dc7457974d33b49cd4000000000000000000000000e1b106ba915e197616d7a625f6478983cae3cec5000000000000000000000000000000000000000000000000000000000000000f", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU LGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7f01d3013f83f38daa4ab63a48e901b555a81ce64baec5e3daee0d14c1cdfdf0"}