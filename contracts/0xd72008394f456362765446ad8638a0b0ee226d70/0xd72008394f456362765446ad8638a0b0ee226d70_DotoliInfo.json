{"SourceCode": "{\"DotoliInfo.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Inspired by Uniswap\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\u0027./Token.sol\\u0027;\\nimport \\u0027./IDotoliInfo.sol\\u0027;\\n\\ncontract DotoliInfo is Token, IDotoliInfo {\\n    \\n    address public override owner;\\n\\n    mapping(uint256 =\\u003e address) public override manager;                    // manager[fundId]\\n    mapping(uint256 =\\u003e uint256) public investorCount;                       // investorCount[fundId]\\n    uint256 public override fundIdCount = 0;\\n\\n    // fundId\\n    mapping(address =\\u003e uint256) public override managingFund;               // managingFund[manager]\\n    mapping(address =\\u003e mapping(uint256 =\\u003e uint256)) public investingFunds;  // investingFunds[investor]\\n    mapping(address =\\u003e uint256) public investingFundCount;\\n\\n    // Token\\n    mapping(uint256 =\\u003e Token[]) public fundTokens;                          // fundTokens[fundId]\\n    mapping(uint256 =\\u003e Token[]) public feeTokens;                           // feeTokens[fundId]\\n    mapping(uint256 =\\u003e mapping(address =\\u003e Token[])) public investorTokens;  // investorTokens[fundId][investor]\\n\\n    // uniswap v3 liquidity pool tokenId\\n    mapping(uint256 =\\u003e mapping(address =\\u003e uint256[])) public tokenIds;      // tokenIds[fundId][investor]\\n    mapping(uint256 =\\u003e address) public override tokenIdOwner;               // tokenIdOwner[tokenId] =\\u003e owner of uniswap v3 liquidity position\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\u0027NO\\u0027);\\n        _;\\n    }\\n\\n    constructor() {\\n        owner = msg.sender;\\n        emit InfoCreated();\\n    }\\n\\n    function setOwner(address newOwner) external override onlyOwner {\\n        owner = newOwner;\\n        emit OwnerChanged(owner, newOwner);\\n    }\\n\\n    function getFundTokens(uint256 fundId) external override view returns (Token[] memory) {\\n        return fundTokens[fundId];\\n    }\\n\\n    function getInvestorTokens(uint256 fundId, address investor) external override view returns (Token[] memory) {\\n        return investorTokens[fundId][investor];\\n    }\\n\\n    function getFeeTokens(uint256 fundId) external override view returns (Token[] memory) {\\n        return feeTokens[fundId];\\n    }\\n\\n    function getFundTokenAmount(uint256 fundId, address token) public override view returns (uint256) {\\n        Token[] memory tokens = fundTokens[fundId];\\n        for (uint256 i=0; i\\u003ctokens.length; i++) {\\n            if (tokens[i].token == token) {\\n                return tokens[i].amount;\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    function getInvestorTokenAmount(uint256 fundId, address investor, address token) public override view returns (uint256) {\\n        Token[] memory tokens = investorTokens[fundId][investor];\\n        for (uint256 i=0; i\\u003ctokens.length; i++) {\\n            if (tokens[i].token == token) {\\n                return tokens[i].amount;\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    function getTokenIds(uint256 fundId, address investor) external override view returns (uint256[] memory _tokenIds) {\\n        _tokenIds = tokenIds[fundId][investor];\\n    }\\n\\n    function createFund() external override returns (uint256 fundId) {\\n        require(managingFund[msg.sender] == 0, \\u0027EXIST\\u0027);\\n        fundId = ++fundIdCount;\\n        managingFund[msg.sender] = fundId;\\n        uint256 fundCount = investingFundCount[msg.sender];\\n        investingFunds[msg.sender][fundCount] = fundId;\\n        investingFundCount[msg.sender] += 1;\\n        manager[fundId] = msg.sender;\\n        emit FundCreated(fundId, msg.sender);\\n    }\\n\\n    function isSubscribed(address investor, uint256 fundId) public override view returns (bool) {\\n        uint256 fundCount = investingFundCount[investor];\\n        for (uint256 i=0; i\\u003cfundCount; i++) {\\n            if (fundId == investingFunds[investor][i]) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function subscribedFunds(address investor) external override view returns (uint256[] memory){\\n        uint256 fundCount = investingFundCount[investor];\\n        uint256[] memory fundIds;\\n        fundIds = new uint256[](fundCount);\\n        for (uint256 i=0; i\\u003cfundCount; i++) {\\n            fundIds[i] = investingFunds[investor][i];\\n        }\\n        return fundIds;\\n    }\\n\\n    function subscribe(uint256 fundId) external override {\\n        require(!isSubscribed(msg.sender, fundId), \\u0027EXIST\\u0027);\\n        uint256 fundCount = investingFundCount[msg.sender];\\n        investingFunds[msg.sender][fundCount] = fundId;\\n        investingFundCount[msg.sender] += 1;\\n        investorCount[fundId] += 1;\\n        emit Subscribe(fundId, msg.sender);\\n    }\\n\\n    function addTokenId(uint256 fundId, address investor, uint256 tokenId) external override onlyOwner {\\n        tokenIds[fundId][investor].push(tokenId);\\n        tokenIdOwner[tokenId] = investor;\\n    }\\n\\n    function increaseFundToken(uint256 fundId, address token, uint256 amount) external override onlyOwner {\\n        increaseToken(fundTokens[fundId], token, amount);\\n    }\\n\\n    function decreaseFundToken(uint256 fundId, address token, uint256 amount) external override onlyOwner returns (bool) {\\n        return decreaseToken(fundTokens[fundId], token, amount);\\n    }\\n\\n    function increaseInvestorToken(uint256 fundId, address investor, address token, uint256 amount) external override onlyOwner {\\n        increaseToken(investorTokens[fundId][investor], token, amount);\\n    }\\n\\n    function decreaseInvestorToken(uint256 fundId, address investor, address token, uint256 amount) external override onlyOwner returns (bool) {\\n        return decreaseToken(investorTokens[fundId][investor], token, amount);\\n    }\\n\\n    function increaseFeeToken(uint256 fundId, address token, uint256 amount) external override onlyOwner {\\n        increaseToken(feeTokens[fundId], token, amount);\\n    }\\n\\n    function decreaseFeeToken(uint256 fundId, address token, uint256 amount) external override onlyOwner returns (bool) {\\n        return decreaseToken(feeTokens[fundId], token, amount);\\n    }\\n\\n}\"},\"IDotoliInfo.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n// Inspired by Uniswap\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\u0027./IToken.sol\\u0027;\\n\\ninterface IDotoliInfo is IToken {\\n    event InfoCreated();\\n    event OwnerChanged(address owner, address newOwner);\\n    event FundCreated(uint256 fundId, address indexed manager);\\n    event Subscribe(uint256 fundId, address indexed investor);\\n    \\n    function owner() external view returns (address _owner);\\n    function manager(uint256 fundId) external view returns (address _manager);\\n    function managingFund(address _manager) external view returns (uint256 fundId);\\n    function tokenIdOwner(uint256 tokenId) external view returns (address _owner);\\n    function fundIdCount() external view returns (uint256 fundCount);\\n\\n    function setOwner(address newOwner) external;\\n    function createFund() external returns (uint256 fundId);\\n    function isSubscribed(address investor, uint256 fundId) external view returns (bool);\\n    function subscribedFunds(address investor) external view returns (uint256[] memory);\\n    function subscribe(uint256 fundId) external;\\n\\n    function getFundTokens(uint256 fundId) external view returns (Token[] memory);\\n    function getInvestorTokens(uint256 fundId, address investor) external view returns (Token[] memory);\\n    function getFeeTokens(uint256 fundId) external view returns (Token[] memory);\\n    function getFundTokenAmount(uint256 fundId, address token) external view returns (uint256);\\n    function getInvestorTokenAmount(uint256 fundId, address investor, address token) external view returns (uint256);\\n    function getTokenIds(uint256 fundId, address investor) external view returns (uint256[] memory);\\n\\n    function addTokenId(uint256 fundId, address investor, uint256 tokenId) external;\\n    function increaseFundToken(uint256 fundId, address token, uint256 amount) external;\\n    function decreaseFundToken(uint256 fundId, address token, uint256 amount) external returns (bool);\\n    function increaseInvestorToken(uint256 fundId, address investor, address token, uint256 amount) external;\\n    function decreaseInvestorToken(uint256 fundId, address investor, address token, uint256 amount) external returns (bool);\\n    function increaseFeeToken(uint256 fundId, address token, uint256 amount) external;\\n    function decreaseFeeToken(uint256 fundId, address token, uint256 amount) external returns (bool);\\n}\"},\"IToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\ninterface IToken {\\n    struct Token {\\n        address token;\\n        uint256 amount;\\n    }\\n}\\n\"},\"Token.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\u0027./IToken.sol\\u0027;\\n\\nabstract contract Token is IToken {\\n\\n    function getTokenAmount(Token[] memory tokens, address token) internal pure returns (uint256) {\\n        for (uint256 i=0; i\\u003ctokens.length; i++) {\\n            if (tokens[i].token == token) {\\n                return tokens[i].amount;\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    function increaseToken(Token[] storage tokens, address token, uint256 amount) internal {\\n        bool isNewToken = true;\\n        for (uint256 i=0; i\\u003ctokens.length; i++) {\\n            if (tokens[i].token == token) {\\n                isNewToken = false;\\n                tokens[i].amount += amount;\\n                break;\\n            }\\n        }\\n        if (isNewToken) {\\n            tokens.push(Token(token, amount));\\n        }\\n    }\\n\\n    function decreaseToken(Token[] storage tokens, address token, uint256 amount) internal returns (bool) {\\n        for (uint256 i=0; i\\u003ctokens.length; i++) {\\n            if (tokens[i].token == token) {\\n                require(tokens[i].amount \\u003e= amount, \\u0027NET\\u0027);\\n                tokens[i].amount -= amount;\\n                if (tokens[i].amount == 0) {\\n                    uint256 lastIndex = tokens.length-1;\\n                    address lastToken = tokens[lastIndex].token;\\n                    uint256 lastTokenAmount = tokens[lastIndex].amount;\\n                    tokens[i].token = lastToken;\\n                    tokens[i].amount = lastTokenAmount;\\n                    tokens.pop();\\n                }\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"FundCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"InfoCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"Subscribe\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"addTokenId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fundId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseFeeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseFundToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseInvestorToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feeTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundIdCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fundTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundId\",\"type\":\"uint256\"}],\"name\":\"getFeeTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IToken.Token[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getFundTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundId\",\"type\":\"uint256\"}],\"name\":\"getFundTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IToken.Token[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getInvestorTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"getInvestorTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IToken.Token[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"getTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseFeeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseFundToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseInvestorToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investingFundCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investingFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investorTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundId\",\"type\":\"uint256\"}],\"name\":\"isSubscribed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"managingFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundId\",\"type\":\"uint256\"}],\"name\":\"subscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"subscribedFunds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DotoliInfo", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "3000000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv2", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ec7d1ea48d20c42f0f7cb7841624157019014a0a740bdbf30b4c70bd5a26bff8"}