{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/bases/ArcBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {Ownable2Step} from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * Provides set of properties, functions, and modifiers to help with \\n * security and access control of extending contracts\\n */\\ncontract ArcBase is Ownable2Step, Pausable, ReentrancyGuard\\n{\\n    function pause() public onlyOwner\\n    {\\n        _pause();\\n    }\\n    \\n    function unpause() public onlyOwner\\n    {\\n        _unpause();\\n    }\\n\\n    function withdrawNative(address beneficiary) public onlyOwner {\\n        uint256 amount = address(this).balance;\\n        (bool sent, ) = beneficiary.call{value: amount}(\\\"\\\");\\n        require(sent, 'Unable to withdraw');\\n    }\\n\\n    function withdrawToken(address beneficiary, address token) public onlyOwner {\\n        uint256 amount = IERC20(token).balanceOf(address(this));\\n        IERC20(token).transfer(beneficiary, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/bases/ArcBaseWithRainbowRoad.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {ArcBase} from \\\"./ArcBase.sol\\\";\\nimport {IRainbowRoad} from \\\"../interfaces/IRainbowRoad.sol\\\";\\n\\n/**\\n * Extends the ArcBase contract to provide\\n * for interactions with the Rainbow Road\\n */\\ncontract ArcBaseWithRainbowRoad is ArcBase\\n{\\n    IRainbowRoad public rainbowRoad;\\n    \\n    constructor(address _rainbowRoad)\\n    {\\n        require(_rainbowRoad != address(0), 'Rainbow Road cannot be zero address');\\n        rainbowRoad = IRainbowRoad(_rainbowRoad);\\n    }\\n    \\n    function setRainbowRoad(address _rainbowRoad) external onlyOwner\\n    {\\n        require(_rainbowRoad != address(0), 'Rainbow Road cannot be zero address');\\n        rainbowRoad = IRainbowRoad(_rainbowRoad);\\n    }\\n    \\n    /// @dev Only calls from the Rainbow Road are accepted.\\n    modifier onlyRainbowRoad() \\n    {\\n        require(msg.sender == address(rainbowRoad), 'Must be called by Rainbow Road');\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/handlers/VeArcTransferHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {ArcBaseWithRainbowRoad} from \\\"../bases/ArcBaseWithRainbowRoad.sol\\\";\\nimport {IArc} from \\\"../interfaces/IArc.sol\\\";\\nimport {IHandler} from \\\"../interfaces/IHandler.sol\\\";\\nimport {IMintBurn} from \\\"../interfaces/IMintBurn.sol\\\";\\nimport {IVotingEscrow} from \\\"../interfaces/IVotingEscrow.sol\\\";\\n\\n/**\\n * Dex Weekly Update Handler\\n */\\ncontract VeArcTransferHandler is ArcBaseWithRainbowRoad, IHandler\\n{\\n    uint internal constant WEEK = 1 weeks;\\n    uint internal constant MAXTIME = 4 * 365 * 86400;\\n    IVotingEscrow public veArc;\\n    \\n    event VeArcMinted(address indexed account, uint fromTokenId, uint toTokenId, uint amount, uint fromLockEnd, uint toLockEnd);\\n    event VeArcReceived(address indexed operator, address indexed from, uint tokenId, bytes data);\\n    \\n    constructor(address _rainbowRoad, address _veArc) ArcBaseWithRainbowRoad(_rainbowRoad)\\n    {\\n        require(_veArc != address(0), 'veArc cannot be zero address');\\n        veArc = IVotingEscrow(_veArc);\\n    }\\n    \\n    function setVeArc(address _veArc) external onlyOwner\\n    {\\n        require(_veArc != address(0), 'veArc cannot be zero address');\\n        veArc = IVotingEscrow(_veArc);\\n    }\\n    \\n    function encodePayload(uint tokenId) view external returns (bytes memory payload)\\n    {\\n        uint lockedAmount = veArc.locked__amount(tokenId);\\n        uint lockedEnd = veArc.locked__end(tokenId);\\n        uint blockTimestamp = block.timestamp;\\n        \\n        uint lockDuration = lockedEnd - blockTimestamp;\\n        require(lockDuration > 0, 'veArc cannot be expired');\\n        \\n        uint unlockTime = (blockTimestamp + lockDuration) / WEEK * WEEK; // Locktime is rounded down to weeks\\n        require(unlockTime > blockTimestamp, 'Lock cannot expire soon');\\n        require(unlockTime <= blockTimestamp + MAXTIME, 'Cannot be locked for more than 4 years');\\n        \\n        return abi.encode(tokenId, lockedAmount, lockedEnd);\\n    }\\n    \\n    function handleSend(address target, bytes calldata payload) external onlyRainbowRoad whenNotPaused\\n    {\\n        (uint tokenId, uint lockedAmount, uint lockedEnd) = abi.decode(payload, (uint, uint, uint));\\n        \\n        uint currentLockedAmount = veArc.locked__amount(tokenId);\\n        require(currentLockedAmount == lockedAmount, 'Locked amount for veArc is invalid');\\n        \\n        uint currentLockedEnd = veArc.locked__end(tokenId);\\n        require(currentLockedEnd == lockedEnd, 'Locked end for veArc is invalid');\\n        \\n        uint blockTimestamp = block.timestamp;\\n        uint lockDuration = lockedEnd - blockTimestamp;\\n        require(lockDuration > 0, 'veArc cannot be expired');\\n        \\n        uint unlockTime = (blockTimestamp + lockDuration) / WEEK * WEEK; // Locktime is rounded down to weeks\\n        require(unlockTime > blockTimestamp, 'Lock cannot expire soon');\\n        require(unlockTime <= blockTimestamp + MAXTIME, 'Cannot be locked for more than 4 years');\\n        \\n        veArc.safeTransferFrom(target, address(this), tokenId);\\n        veArc.burn(tokenId);\\n    }\\n    \\n    function handleReceive(address target, bytes calldata payload) external onlyRainbowRoad whenNotPaused\\n    {\\n        (uint tokenId, uint lockedAmount, uint lockedEnd) = abi.decode(payload, (uint, uint, uint));\\n        \\n        uint blockTimestamp = block.timestamp;\\n        uint newLockDuration = lockedEnd - blockTimestamp;\\n        \\n        IArc arc = rainbowRoad.arc();\\n        \\n        arc.mint(address(this), lockedAmount);\\n        arc.approve(address(veArc), lockedAmount);\\n        uint newTokenId = veArc.create_lock_for(lockedAmount, newLockDuration, target);\\n        emit VeArcMinted(target, tokenId, newTokenId, lockedAmount, lockedEnd, newLockDuration + blockTimestamp);\\n    }\\n    \\n    function onERC721Received(address operator, address from, uint tokenId, bytes calldata data) external returns (bytes4) {\\n        emit VeArcReceived(operator, from, tokenId, data);\\n        return this.onERC721Received.selector;\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IArc.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\ninterface IArc {\\n    function approve(address _spender, uint _value) external returns (bool);\\n    function burn(uint amount) external;\\n    function mint(address account, uint amount) external;\\n    function transfer(address, uint) external returns (bool);\\n    function transferFrom(address _from, address _to, uint _value) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\ninterface IHandler {\\n    function handleReceive(address target, bytes calldata payload) external;\\n    function handleSend(address target, bytes calldata payload) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IMintBurn.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\ninterface IMintBurn {\\n    function burn(uint amount) external;\\n    function mint(address account, uint amount) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IRainbowRoad.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {IArc} from \\\"./IArc.sol\\\";\\n\\ninterface IRainbowRoad {\\n    \\n    function acceptTeam() external;\\n    function actionHandlers(string calldata action) external view returns (address);\\n    function arc() external view returns (IArc);\\n    function blockToken(address tokenAddress) external;\\n    function disableFeeManager(address feeManager) external;\\n    function disableOpenTokenWhitelisting() external;\\n    function disableReceiver(address receiver) external;\\n    function disableSender(address sender) external;\\n    function disableSendFeeBurn() external;\\n    function disableSendFeeCharge() external;\\n    function disableWhitelistingFeeBurn() external;\\n    function disableWhitelistingFeeCharge() external;\\n    function enableFeeManager(address feeManager) external;\\n    function enableOpenTokenWhitelisting() external;\\n    function enableReceiver(address receiver) external;\\n    function enableSendFeeBurn() external;\\n    function enableSender(address sender) external;\\n    function enableSendFeeCharge() external;\\n    function enableWhitelistingFeeBurn() external;\\n    function enableWhitelistingFeeCharge() external;\\n    function sendFee() external view returns (uint256);\\n    function whitelistingFee() external view returns (uint256);\\n    function chargeSendFee() external view returns (bool);\\n    function chargeWhitelistingFee() external view returns (bool);\\n    function burnSendFee() external view returns (bool);\\n    function burnWhitelistingFee() external view returns (bool);\\n    function openTokenWhitelisting() external view returns (bool);\\n    function config(string calldata configName) external view returns (bytes memory);\\n    function blockedTokens(address tokenAddress) external view returns (bool);\\n    function feeManagers(address feeManager) external view returns (bool);\\n    function receiveAction(string calldata action, address to, bytes calldata payload) external;\\n    function sendAction(string calldata action, address from, bytes calldata payload) external;\\n    function setActionHandler(string memory action, address handler) external;\\n    function setArc(address _arc) external;\\n    function setSendFee(uint256 _fee) external;\\n    function setTeam(address _team) external;\\n    function setTeamRate(uint256 _teamRate) external;\\n    function setToken(string calldata tokenSymbol, address tokenAddress) external;\\n    function setWhitelistingFee(uint256 _fee) external;\\n    function team() external view returns (address);\\n    function teamRate() external view returns (uint256);\\n    function tokens(string calldata tokenSymbol) external view returns (address);\\n    function MAX_TEAM_RATE() external view returns (uint256);\\n    function receivers(address receiver) external view returns (bool);\\n    function senders(address sender) external view returns (bool);\\n    function unblockToken(address tokenAddress) external;\\n    function whitelist(address tokenAddress) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IVotingEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IVotingEscrow {\\n\\n    struct Point {\\n        int128 bias;\\n        int128 slope; // # -dweight / dt\\n        uint256 ts;\\n        uint256 blk; // block\\n    }\\n\\n    function user_point_epoch(uint tokenId) external view returns (uint);\\n    function epoch() external view returns (uint);\\n    function user_point_history(uint tokenId, uint loc) external view returns (Point memory);\\n    function point_history(uint loc) external view returns (Point memory);\\n    function checkpoint() external;\\n    function deposit_for(uint tokenId, uint value) external;\\n    function token() external view returns (address);\\n    function user_point_history__ts(uint tokenId, uint idx) external view returns (uint);\\n    function locked__end(uint _tokenId) external view returns (uint);\\n    function locked__amount(uint _tokenId) external view returns (uint);\\n    function approve(address spender, uint tokenId) external;\\n    function balanceOfNFT(uint) external view returns (uint);\\n    function isApprovedOrOwner(address, uint) external view returns (bool);\\n    function ownerOf(uint) external view returns (address);\\n    function transferFrom(address, address, uint) external;\\n    function totalSupply() external view returns (uint);\\n    function supply() external view returns (uint);\\n    function create_lock_for(uint, uint, address) external returns (uint);\\n    function lockVote(uint tokenId) external;\\n    function isVoteExpired(uint tokenId) external view returns (bool);\\n    function voteExpiry(uint _tokenId) external view returns (uint);\\n    function attach(uint tokenId) external;\\n    function detach(uint tokenId) external;\\n    function voting(uint tokenId) external;\\n    function abstain(uint tokenId) external;\\n    function voted(uint tokenId) external view returns (bool);\\n    function withdraw(uint tokenId) external;\\n    function create_lock(uint value, uint duration) external returns (uint);\\n    function setVoter(address voter) external;\\n    function balanceOf(address owner) external view returns (uint);\\n    function safeTransferFrom(address from, address to, uint tokenId) external;\\n    function burn(uint _tokenId) external;\\n    function setAdmin(address _admin) external;\\n    function setArtProxy(address _proxy) external;\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rainbowRoad\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_veArc\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromLockEnd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toLockEnd\",\"type\":\"uint256\"}],\"name\":\"VeArcMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"VeArcReceived\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"encodePayload\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"handleReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"handleSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rainbowRoad\",\"outputs\":[{\"internalType\":\"contract IRainbowRoad\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rainbowRoad\",\"type\":\"address\"}],\"name\":\"setRainbowRoad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_veArc\",\"type\":\"address\"}],\"name\":\"setVeArc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veArc\",\"outputs\":[{\"internalType\":\"contract IVotingEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VeArcTransferHandler", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "00000000000000000000000026417f1c915cd4178b23b44c4dad7d3067faa5200000000000000000000000000361a173dc338c32e57079b2c51cef36f8a982f1", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}