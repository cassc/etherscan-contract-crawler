{"SourceCode": "// File: @laborx/solidity-shared-contracts/contracts/ERC20Interface.sol\r\n\r\n/**\r\n* Copyright 2017\u20132018, LaborX PTY\r\n* Licensed under the AGPL Version 3 license.\r\n*/\r\n\r\npragma solidity ^0.4.23;\r\n\r\n\r\n/// @title Defines an interface for EIP20 token smart contract\r\ncontract ERC20 {\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed from, address indexed spender, uint256 value);\r\n\r\n    string public symbol;\r\n\r\n    function decimals() public view returns (uint8);\r\n    function totalSupply() public view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n}\r\n\r\n// File: @laborx/solidity-eventshistory-contracts/contracts/EventsHistorySourceAdapter.sol\r\n\r\n/**\r\n* Copyright 2017\u20132018, LaborX PTY\r\n* Licensed under the AGPL Version 3 license.\r\n*/\r\n\r\npragma solidity ^0.4.21;\r\n\r\n\r\n/**\r\n * @title EventsHistory Source Adapter.\r\n */\r\ncontract EventsHistorySourceAdapter {\r\n\r\n    // It is address of MultiEventsHistory caller assuming we are inside of delegate call.\r\n    function _self()\r\n    internal\r\n    view\r\n    returns (address)\r\n    {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\n// File: @laborx/solidity-eventshistory-contracts/contracts/MultiEventsHistoryAdapter.sol\r\n\r\n/**\r\n* Copyright 2017\u20132018, LaborX PTY\r\n* Licensed under the AGPL Version 3 license.\r\n*/\r\n\r\npragma solidity ^0.4.21;\r\n\r\n\r\n\r\n/**\r\n * @title General MultiEventsHistory user.\r\n */\r\ncontract MultiEventsHistoryAdapter is EventsHistorySourceAdapter {\r\n\r\n    address internal localEventsHistory;\r\n\r\n    event ErrorCode(address indexed self, uint errorCode);\r\n\r\n    function getEventsHistory()\r\n    public\r\n    view\r\n    returns (address)\r\n    {\r\n        address _eventsHistory = localEventsHistory;\r\n        return _eventsHistory != 0x0 ? _eventsHistory : this;\r\n    }\r\n\r\n    function emitErrorCode(uint _errorCode) public {\r\n        emit ErrorCode(_self(), _errorCode);\r\n    }\r\n\r\n    function _setEventsHistory(address _eventsHistory) internal returns (bool) {\r\n        localEventsHistory = _eventsHistory;\r\n        return true;\r\n    }\r\n    \r\n    function _emitErrorCode(uint _errorCode) internal returns (uint) {\r\n        MultiEventsHistoryAdapter(getEventsHistory()).emitErrorCode(_errorCode);\r\n        return _errorCode;\r\n    }\r\n}\r\n\r\n// File: contracts/ChronoBankPlatformEmitter.sol\r\n\r\n/**\r\n * Copyright 2017\u20132018, LaborX PTY\r\n * Licensed under the AGPL Version 3 license.\r\n */\r\n\r\npragma solidity ^0.4.21;\r\n\r\n\r\n\r\n/// @title ChronoBank Platform Emitter.\r\n///\r\n/// Contains all the original event emitting function definitions and events.\r\n/// In case of new events needed later, additional emitters can be developed.\r\n/// All the functions is meant to be called using delegatecall.\r\ncontract ChronoBankPlatformEmitter is MultiEventsHistoryAdapter {\r\n\r\n    event Transfer(address indexed from, address indexed to, bytes32 indexed symbol, uint value, string reference);\r\n    event Issue(bytes32 indexed symbol, uint value, address indexed by);\r\n    event Revoke(bytes32 indexed symbol, uint value, address indexed by);\r\n    event RevokeExternal(bytes32 indexed symbol, uint value, address indexed by, string externalReference);\r\n    event OwnershipChange(address indexed from, address indexed to, bytes32 indexed symbol);\r\n    event Approve(address indexed from, address indexed spender, bytes32 indexed symbol, uint value);\r\n    event Recovery(address indexed from, address indexed to, address by);\r\n\r\n    function emitTransfer(address _from, address _to, bytes32 _symbol, uint _value, string _reference) public {\r\n        emit Transfer(_from, _to, _symbol, _value, _reference);\r\n    }\r\n\r\n    function emitIssue(bytes32 _symbol, uint _value, address _by) public {\r\n        emit Issue(_symbol, _value, _by);\r\n    }\r\n\r\n    function emitRevoke(bytes32 _symbol, uint _value, address _by) public {\r\n        emit Revoke(_symbol, _value, _by);\r\n    }\r\n\r\n    function emitRevokeExternal(bytes32 _symbol, uint _value, address _by, string _externalReference) public {\r\n        emit RevokeExternal(_symbol, _value, _by, _externalReference);\r\n    }\r\n\r\n    function emitOwnershipChange(address _from, address _to, bytes32 _symbol) public {\r\n        emit OwnershipChange(_from, _to, _symbol);\r\n    }\r\n\r\n    function emitApprove(address _from, address _spender, bytes32 _symbol, uint _value) public {\r\n        emit Approve(_from, _spender, _symbol, _value);\r\n    }\r\n\r\n    function emitRecovery(address _from, address _to, address _by) public {\r\n        emit Recovery(_from, _to, _by);\r\n    }\r\n}\r\n\r\n// File: contracts/ChronoBankPlatformInterface.sol\r\n\r\n/**\r\n * Copyright 2017\u20132018, LaborX PTY\r\n * Licensed under the AGPL Version 3 license.\r\n */\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\n\r\ncontract ChronoBankPlatform is ChronoBankPlatformEmitter {\r\n    mapping(bytes32 => address) public proxies;\r\n\r\n    function symbols(uint _idx) public view returns (bytes32);\r\n    function symbolsCount() public view returns (uint);\r\n    function isCreated(bytes32 _symbol) public view returns(bool);\r\n    function isOwner(address _owner, bytes32 _symbol) public view returns(bool);\r\n    function owner(bytes32 _symbol) public view returns(address);\r\n\r\n    function setProxy(address _address, bytes32 _symbol) public returns(uint errorCode);\r\n\r\n    function name(bytes32 _symbol) public view returns(string);\r\n\r\n    function totalSupply(bytes32 _symbol) public view returns(uint);\r\n    function balanceOf(address _holder, bytes32 _symbol) public view returns(uint);\r\n    function allowance(address _from, address _spender, bytes32 _symbol) public view returns(uint);\r\n    function baseUnit(bytes32 _symbol) public view returns(uint8);\r\n    function description(bytes32 _symbol) public view returns(string);\r\n    function isReissuable(bytes32 _symbol) public view returns(bool);\r\n    function blockNumber(bytes32 _symbol) public view returns (uint);\r\n\r\n    function proxyTransferWithReference(address _to, uint _value, bytes32 _symbol, string _reference, address _sender) public returns(uint errorCode);\r\n    function proxyTransferFromWithReference(address _from, address _to, uint _value, bytes32 _symbol, string _reference, address _sender) public returns(uint errorCode);\r\n\r\n    function proxyApprove(address _spender, uint _value, bytes32 _symbol, address _sender) public returns(uint errorCode);\r\n\r\n    function issueAsset(bytes32 _symbol, uint _value, string _name, string _description, uint8 _baseUnit, bool _isReissuable, uint _blockNumber) public returns(uint errorCode);\r\n    function issueAssetWithInitialReceiver(bytes32 _symbol, uint _value, string _name, string _description, uint8 _baseUnit, bool _isReissuable, uint _blockNumber, address _account) public returns(uint errorCode);\r\n\r\n    function reissueAsset(bytes32 _symbol, uint _value) public returns(uint errorCode);\r\n    function reissueAssetToRecepient(bytes32 _symbol, uint _value, address _to) public returns (uint);\r\n\r\n    function revokeAsset(bytes32 _symbol, uint _value) public returns(uint errorCode);\r\n    function revokeAssetWithExternalReference(bytes32 _symbol, uint _value, string _externalReference) public returns (uint);\r\n\r\n    function hasAssetRights(address _owner, bytes32 _symbol) public view returns (bool);\r\n    function isDesignatedAssetManager(address _account, bytes32 _symbol) public view returns (bool);\r\n    function changeOwnership(bytes32 _symbol, address _newOwner) public returns(uint errorCode);\r\n}\r\n\r\n// File: contracts/ChronoBankAssetInterface.sol\r\n\r\n/**\r\n * Copyright 2017\u20132018, LaborX PTY\r\n * Licensed under the AGPL Version 3 license.\r\n */\r\n\r\npragma solidity ^0.4.21;\r\n\r\n\r\ncontract ChronoBankAsset {\r\n    function __transferWithReference(address _to, uint _value, string _reference, address _sender) public returns (bool);\r\n    function __transferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) public returns (bool);\r\n    function __approve(address _spender, uint _value, address _sender) public returns(bool);\r\n    function __process(bytes /*_data*/, address /*_sender*/) public payable {\r\n        revert(\"ASSET_PROCESS_NOT_SUPPORTED\");\r\n    }\r\n}\r\n\r\n// File: contracts/ChronoBankAssetProxy.sol\r\n\r\n/**\r\n * Copyright 2017\u20132018, LaborX PTY\r\n * Licensed under the AGPL Version 3 license.\r\n */\r\n\r\npragma solidity ^0.4.21;\r\n\r\n\r\n\r\n\r\n\r\n/// @title ChronoBank Asset Proxy.\r\n///\r\n/// Proxy implements ERC20 interface and acts as a gateway to a single platform asset.\r\n/// Proxy adds symbol and caller(sender) when forwarding requests to platform.\r\n/// Every request that is made by caller first sent to the specific asset implementation\r\n/// contract, which then calls back to be forwarded onto platform.\r\n///\r\n/// Calls flow: Caller ->\r\n///             Proxy.func(...) ->\r\n///             Asset.__func(..., Caller.address) ->\r\n///             Proxy.__func(..., Caller.address) ->\r\n///             Platform.proxyFunc(..., symbol, Caller.address)\r\n///\r\n/// Asset implementation contract is mutable, but each user have an option to stick with\r\n/// old implementation, through explicit decision made in timely manner, if he doesn't agree\r\n/// with new rules.\r\n/// Each user have a possibility to upgrade to latest asset contract implementation, without the\r\n/// possibility to rollback.\r\n///\r\n/// Note: all the non constant functions return false instead of throwing in case if state change\r\n/// didn't happen yet.\r\ncontract ChronoBankAssetProxy is ERC20 {\r\n\r\n    /// @dev Supports ChronoBankPlatform ability to return error codes from methods\r\n    uint constant OK = 1;\r\n\r\n    /// @dev Assigned platform, immutable.\r\n    ChronoBankPlatform public chronoBankPlatform;\r\n\r\n    /// @dev Assigned symbol, immutable.\r\n    bytes32 public smbl;\r\n\r\n    /// @dev Assigned name, immutable.\r\n    string public name;\r\n\r\n    /// @dev Assigned symbol (from ERC20 standard), immutable\r\n    string public symbol;\r\n\r\n    /// @notice Sets platform address, assigns symbol and name.\r\n    /// Can be set only once.\r\n    /// @param _chronoBankPlatform platform contract address.\r\n    /// @param _symbol assigned symbol.\r\n    /// @param _name assigned name.\r\n    /// @return success.\r\n    function init(ChronoBankPlatform _chronoBankPlatform, string _symbol, string _name) public returns (bool) {\r\n        if (address(chronoBankPlatform) != 0x0) {\r\n            return false;\r\n        }\r\n\r\n        chronoBankPlatform = _chronoBankPlatform;\r\n        symbol = _symbol;\r\n        smbl = stringToBytes32(_symbol);\r\n        name = _name;\r\n        return true;\r\n    }\r\n\r\n    function stringToBytes32(string memory source) public pure returns (bytes32 result) {\r\n        assembly {\r\n           result := mload(add(source, 32))\r\n        }\r\n    }\r\n\r\n    /// @dev Only platform is allowed to call.\r\n    modifier onlyChronoBankPlatform {\r\n        if (msg.sender == address(chronoBankPlatform)) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /// @dev Only current asset owner is allowed to call.\r\n    modifier onlyAssetOwner {\r\n        if (chronoBankPlatform.isOwner(msg.sender, smbl)) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns asset implementation contract for current caller.\r\n    /// @return asset implementation contract.\r\n    function _getAsset() internal view returns (ChronoBankAsset) {\r\n        return ChronoBankAsset(getVersionFor(msg.sender));\r\n    }\r\n\r\n    /// @notice Returns asset total supply.\r\n    /// @return asset total supply.\r\n    function totalSupply() public view returns (uint) {\r\n        return chronoBankPlatform.totalSupply(smbl);\r\n    }\r\n\r\n    /// @notice Returns asset balance for a particular holder.\r\n    /// @param _owner holder address.\r\n    /// @return holder balance.\r\n    function balanceOf(address _owner) public view returns (uint) {\r\n        return chronoBankPlatform.balanceOf(_owner, smbl);\r\n    }\r\n\r\n    /// @notice Returns asset allowance from one holder to another.\r\n    /// @param _from holder that allowed spending.\r\n    /// @param _spender holder that is allowed to spend.\r\n    /// @return holder to spender allowance.\r\n    function allowance(address _from, address _spender) public view returns (uint) {\r\n        return chronoBankPlatform.allowance(_from, _spender, smbl);\r\n    }\r\n\r\n    /// @notice Returns asset decimals.\r\n    /// @return asset decimals.\r\n    function decimals() public view returns (uint8) {\r\n        return chronoBankPlatform.baseUnit(smbl);\r\n    }\r\n\r\n    /// @notice Transfers asset balance from the caller to specified receiver.\r\n    /// @param _to holder address to give to.\r\n    /// @param _value amount to transfer.\r\n    /// @return success.\r\n    function transfer(address _to, uint _value) public returns (bool) {\r\n        if (_to != 0x0) {\r\n            return _transferWithReference(_to, _value, \"\");\r\n        }\r\n    }\r\n\r\n    /// @notice Transfers asset balance from the caller to specified receiver adding specified comment.\r\n    /// @param _to holder address to give to.\r\n    /// @param _value amount to transfer.\r\n    /// @param _reference transfer comment to be included in a platform's Transfer event.\r\n    /// @return success.\r\n    function transferWithReference(address _to, uint _value, string _reference) public returns (bool) {\r\n        if (_to != 0x0) {\r\n            return _transferWithReference(_to, _value, _reference);\r\n        }\r\n    }\r\n\r\n    /// @notice Resolves asset implementation contract for the caller and forwards there arguments along with\r\n    /// the caller address.\r\n    /// @return success.\r\n    function _transferWithReference(address _to, uint _value, string _reference) internal returns (bool) {\r\n        return _getAsset().__transferWithReference(_to, _value, _reference, msg.sender);\r\n    }\r\n\r\n    /// @notice Performs transfer call on the platform by the name of specified sender.\r\n    ///\r\n    /// Can only be called by asset implementation contract assigned to sender.\r\n    ///\r\n    /// @param _to holder address to give to.\r\n    /// @param _value amount to transfer.\r\n    /// @param _reference transfer comment to be included in a platform's Transfer event.\r\n    /// @param _sender initial caller.\r\n    ///\r\n    /// @return success.\r\n    function __transferWithReference(\r\n        address _to,\r\n        uint _value,\r\n        string _reference,\r\n        address _sender\r\n    )\r\n    onlyAccess(_sender)\r\n    public\r\n    returns (bool)\r\n    {\r\n        return chronoBankPlatform.proxyTransferWithReference(_to, _value, smbl, _reference, _sender) == OK;\r\n    }\r\n\r\n    /// @notice Performs allowance transfer of asset balance between holders.\r\n    /// @param _from holder address to take from.\r\n    /// @param _to holder address to give to.\r\n    /// @param _value amount to transfer.\r\n    /// @return success.\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\r\n        if (_to != 0x0) {\r\n            return _getAsset().__transferFromWithReference(_from, _to, _value, \"\", msg.sender);\r\n        }\r\n    }\r\n\r\n    /// @notice Performs allowance transfer call on the platform by the name of specified sender.\r\n    ///\r\n    /// Can only be called by asset implementation contract assigned to sender.\r\n    ///\r\n    /// @param _from holder address to take from.\r\n    /// @param _to holder address to give to.\r\n    /// @param _value amount to transfer.\r\n    /// @param _reference transfer comment to be included in a platform's Transfer event.\r\n    /// @param _sender initial caller.\r\n    ///\r\n    /// @return success.\r\n    function __transferFromWithReference(\r\n        address _from,\r\n        address _to,\r\n        uint _value,\r\n        string _reference,\r\n        address _sender\r\n    )\r\n    onlyAccess(_sender)\r\n    public\r\n    returns (bool)\r\n    {\r\n        return chronoBankPlatform.proxyTransferFromWithReference(_from, _to, _value, smbl, _reference, _sender) == OK;\r\n    }\r\n\r\n    /// @notice Sets asset spending allowance for a specified spender.\r\n    /// @param _spender holder address to set allowance to.\r\n    /// @param _value amount to allow.\r\n    /// @return success.\r\n    function approve(address _spender, uint _value) public returns (bool) {\r\n        if (_spender != 0x0) {\r\n            return _getAsset().__approve(_spender, _value, msg.sender);\r\n        }\r\n    }\r\n\r\n    /// @notice Performs allowance setting call on the platform by the name of specified sender.\r\n    /// Can only be called by asset implementation contract assigned to sender.\r\n    /// @param _spender holder address to set allowance to.\r\n    /// @param _value amount to allow.\r\n    /// @param _sender initial caller.\r\n    /// @return success.\r\n    function __approve(address _spender, uint _value, address _sender) onlyAccess(_sender) public returns (bool) {\r\n        return chronoBankPlatform.proxyApprove(_spender, _value, smbl, _sender) == OK;\r\n    }\r\n\r\n    /// @notice Emits ERC20 Transfer event on this contract.\r\n    /// Can only be, and, called by assigned platform when asset transfer happens.\r\n    function emitTransfer(address _from, address _to, uint _value) onlyChronoBankPlatform public {\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /// @notice Emits ERC20 Approval event on this contract.\r\n    /// Can only be, and, called by assigned platform when asset allowance set happens.\r\n    function emitApprove(address _from, address _spender, uint _value) onlyChronoBankPlatform public {\r\n        emit Approval(_from, _spender, _value);\r\n    }\r\n\r\n    /// @notice Resolves asset implementation contract for the caller and forwards there transaction data,\r\n    /// along with the value. This allows for proxy interface growth.\r\n    function () public payable {\r\n        _getAsset().__process.value(msg.value)(msg.data, msg.sender);\r\n    }\r\n\r\n    /// @dev Indicates an upgrade freeze-time start, and the next asset implementation contract.\r\n    event UpgradeProposal(address newVersion);\r\n\r\n    /// @dev Current asset implementation contract address.\r\n    address latestVersion;\r\n\r\n    /// @dev Proposed next asset implementation contract address.\r\n    address pendingVersion;\r\n\r\n    /// @dev Upgrade freeze-time start.\r\n    uint pendingVersionTimestamp;\r\n\r\n    /// @dev Timespan for users to review the new implementation and make decision.\r\n    uint constant UPGRADE_FREEZE_TIME = 3 days;\r\n\r\n    /// @dev Asset implementation contract address that user decided to stick with.\r\n    /// 0x0 means that user uses latest version.\r\n    mapping(address => address) userOptOutVersion;\r\n\r\n    /// @dev Only asset implementation contract assigned to sender is allowed to call.\r\n    modifier onlyAccess(address _sender) {\r\n        if (msg.sender == getVersionFor(_sender)) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /// @notice Returns asset implementation contract address assigned to sender.\r\n    /// @param _sender sender address.\r\n    /// @return asset implementation contract address.\r\n    function getVersionFor(address _sender) public view returns (address) {\r\n        return userOptOutVersion[_sender] == 0 ? latestVersion : userOptOutVersion[_sender];\r\n    }\r\n\r\n    /// @notice Returns current asset implementation contract address.\r\n    /// @return asset implementation contract address.\r\n    function getLatestVersion() public view returns (address) {\r\n        return latestVersion;\r\n    }\r\n\r\n    /// @notice Returns proposed next asset implementation contract address.\r\n    /// @return asset implementation contract address.\r\n    function getPendingVersion() public view returns (address) {\r\n        return pendingVersion;\r\n    }\r\n\r\n    /// @notice Returns upgrade freeze-time start.\r\n    /// @return freeze-time start.\r\n    function getPendingVersionTimestamp() public view returns (uint) {\r\n        return pendingVersionTimestamp;\r\n    }\r\n\r\n    /// @notice Propose next asset implementation contract address.\r\n    /// Can only be called by current asset owner.\r\n    /// Note: freeze-time should not be applied for the initial setup.\r\n    /// @param _newVersion asset implementation contract address.\r\n    /// @return success.\r\n    function proposeUpgrade(address _newVersion) onlyAssetOwner public returns (bool) {\r\n        // Should not already be in the upgrading process.\r\n        if (pendingVersion != 0x0) {\r\n            return false;\r\n        }\r\n\r\n        // New version address should be other than 0x0.\r\n        if (_newVersion == 0x0) {\r\n            return false;\r\n        }\r\n\r\n        // Don't apply freeze-time for the initial setup.\r\n        if (latestVersion == 0x0) {\r\n            latestVersion = _newVersion;\r\n            return true;\r\n        }\r\n\r\n        pendingVersion = _newVersion;\r\n        pendingVersionTimestamp = now;\r\n\r\n        emit UpgradeProposal(_newVersion);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Cancel the pending upgrade process.\r\n    /// Can only be called by current asset owner.\r\n    /// @return success.\r\n    function purgeUpgrade() public onlyAssetOwner returns (bool) {\r\n        if (pendingVersion == 0x0) {\r\n            return false;\r\n        }\r\n\r\n        delete pendingVersion;\r\n        delete pendingVersionTimestamp;\r\n        return true;\r\n    }\r\n\r\n    /// @notice Finalize an upgrade process setting new asset implementation contract address.\r\n    /// Can only be called after an upgrade freeze-time.\r\n    /// @return success.\r\n    function commitUpgrade() public returns (bool) {\r\n        if (pendingVersion == 0x0) {\r\n            return false;\r\n        }\r\n\r\n        if (pendingVersionTimestamp + UPGRADE_FREEZE_TIME > now) {\r\n            return false;\r\n        }\r\n\r\n        latestVersion = pendingVersion;\r\n        delete pendingVersion;\r\n        delete pendingVersionTimestamp;\r\n        return true;\r\n    }\r\n\r\n    /// @notice Disagree with proposed upgrade, and stick with current asset implementation\r\n    /// until further explicit agreement to upgrade.\r\n    /// @return success.\r\n    function optOut() public returns (bool) {\r\n        if (userOptOutVersion[msg.sender] != 0x0) {\r\n            return false;\r\n        }\r\n        userOptOutVersion[msg.sender] = latestVersion;\r\n        return true;\r\n    }\r\n\r\n    /// @notice Implicitly agree to upgrade to current and future asset implementation upgrades,\r\n    /// until further explicit disagreement.\r\n    /// @return success.\r\n    function optIn() public returns (bool) {\r\n        delete userOptOutVersion[msg.sender];\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"commitUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLatestVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"emitApprove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"emitTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chronoBankPlatform\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPendingVersionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purgeUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"optIn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"__transferWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"__approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPendingVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"transferWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_chronoBankPlatform\",\"type\":\"address\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"init\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newVersion\",\"type\":\"address\"}],\"name\":\"proposeUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"smbl\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"source\",\"type\":\"string\"}],\"name\":\"stringToBytes32\",\"outputs\":[{\"name\":\"result\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"optOut\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"__transferFromWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getVersionFor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newVersion\",\"type\":\"address\"}],\"name\":\"UpgradeProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "ChronoBankAssetProxy", "CompilerVersion": "v0.4.25+commit.59dbf8f1", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU LGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://eb2ef2d2a0baba5a5957e251e7eee3df602cea3bcc5936605373c59ef5e0155e"}