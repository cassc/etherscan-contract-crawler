{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/lib/contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/synth-core/interfaces/IBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface IBridge {\\n  function transmitRequestV2(\\n    bytes memory _callData,\\n    address _receiveSide,\\n    address _oppositeBridge,\\n    uint256 _chainId\\n  ) external;\\n  \\n  function receiveRequestV2(\\n    bytes memory _callData,\\n    address _receiveSide\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/synth-core/interfaces/IWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface IWrapper {\\n    function deposit() external payable;\\n    function withdraw(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/synth-core/metarouter/interfaces/IMetaRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../MetaRouteStructs.sol\\\";\\n\\ninterface IMetaRouter {\\n    function metaRoute(\\n        MetaRouteStructs.MetaRouteTransaction calldata _metarouteTransaction\\n    ) external payable;\\n\\n    function externalCall(\\n        address _token,\\n        uint256 _amount,\\n        address _receiveSide,\\n        bytes calldata _calldata,\\n        uint256 _offset,\\n        address _revertableAddress\\n    ) external;\\n\\n    function returnSwap(\\n        address _token,\\n        uint256 _amount,\\n        address _router,\\n        bytes calldata _swapCalldata,\\n        address _burnToken,\\n        address _synthesis,\\n        bytes calldata _burnCalldata\\n    ) external;\\n\\n    function metaMintSwap(\\n        MetaRouteStructs.MetaMintTransaction calldata _metaMintTransaction\\n    ) external;\\n}\"\r\n    },\r\n    \"contracts/synth-core/metarouter/MetaRouteStructs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nlibrary MetaRouteStructs {\\n    struct MetaBurnTransaction {\\n        uint256 stableBridgingFee;\\n        uint256 amount;\\n        address syntCaller;\\n        address finalReceiveSide;\\n        address sToken;\\n        bytes finalCallData;\\n        uint256 finalOffset;\\n        address chain2address;\\n        address receiveSide;\\n        address oppositeBridge;\\n        address revertableAddress;\\n        uint256 chainID;\\n        bytes32 clientID;\\n    }\\n\\n    struct MetaMintTransaction {\\n        uint256 stableBridgingFee;\\n        uint256 amount;\\n        bytes32 externalID;\\n        address tokenReal;\\n        uint256 chainID;\\n        address to;\\n        address[] swapTokens;\\n        address secondDexRouter;\\n        bytes secondSwapCalldata;\\n        address finalReceiveSide;\\n        bytes finalCalldata;\\n        uint256 finalOffset;\\n    }\\n\\n    struct MetaRouteTransaction {\\n        bytes firstSwapCalldata;\\n        bytes secondSwapCalldata;\\n        address[] approvedTokens;\\n        address firstDexRouter;\\n        address secondDexRouter;\\n        uint256 amount;\\n        bool nativeIn;\\n        address relayRecipient;\\n        bytes otherSideCalldata;\\n    }\\n\\n    struct MetaSynthesizeTransaction {\\n        uint256 stableBridgingFee;\\n        uint256 amount;\\n        address rtoken;\\n        address chain2address;\\n        address receiveSide;\\n        address oppositeBridge;\\n        address syntCaller;\\n        uint256 chainID;\\n        address[] swapTokens;\\n        address secondDexRouter;\\n        bytes secondSwapCalldata;\\n        address finalReceiveSide;\\n        bytes finalCalldata;\\n        uint256 finalOffset;\\n        address revertableAddress;\\n        bytes32 clientID;\\n    }\\n\\n    struct MetaRevertTransaction {\\n        uint256 stableBridgingFee;\\n        bytes32 internalID;\\n        address receiveSide;\\n        address managerChainBridge;\\n        address sourceChainBridge;\\n        uint256 managerChainId;\\n        uint256 sourceChainId;\\n        address router;\\n        bytes swapCalldata;\\n        address sourceChainSynthesis;\\n        address burnToken;\\n        bytes burnCalldata;\\n        bytes32 clientID;\\n    }\\n}\"\r\n    },\r\n    \"contracts/synth-core/Portal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"./interfaces/IBridge.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"../utils/RelayRecipientUpgradeable.sol\\\";\\nimport \\\"./interfaces/IWrapper.sol\\\";\\nimport \\\"./metarouter/interfaces/IMetaRouter.sol\\\";\\n\\n/**\\n * @title A contract that synthesizes tokens\\n * @notice In order to create a synthetic representation on another network, the user must call synthesize function here\\n * @dev All function calls are currently implemented without side effects\\n */\\ncontract Portal is RelayRecipientUpgradeable {\\n    /// ** PUBLIC states **\\n\\n    address public wrapper;\\n    address public bridge;\\n    uint256 public requestCount;\\n    bool public paused;\\n    mapping(bytes32 => TxState) public requests;\\n    mapping(bytes32 => UnsynthesizeState) public unsynthesizeStates;\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => uint256) public tokenThreshold;\\n    mapping(address => bool) public tokenWhitelist;\\n\\n    IMetaRouter public metaRouter;\\n\\n    /// ** STRUCTS **\\n\\n    enum RequestState {\\n        Default,\\n        Sent,\\n        Reverted\\n    }\\n    enum UnsynthesizeState {\\n        Default,\\n        Unsynthesized,\\n        RevertRequest\\n    }\\n\\n    struct TxState {\\n        address recipient;\\n        address chain2address;\\n        uint256 amount;\\n        address rtoken;\\n        RequestState state;\\n    }\\n\\n    struct SynthesizeWithPermitTransaction {\\n        uint256 stableBridgingFee;\\n        bytes approvalData;\\n        address token;\\n        uint256 amount;\\n        address chain2address;\\n        address receiveSide;\\n        address oppositeBridge;\\n        address revertableAddress;\\n        uint256 chainID;\\n        bytes32 clientID;\\n    }\\n\\n    /// ** EVENTS **\\n\\n    event SynthesizeRequest(\\n        bytes32 id,\\n        address indexed from,\\n        uint256 indexed chainID,\\n        address indexed revertableAddress,\\n        address to,\\n        uint256 amount,\\n        address token\\n    );\\n\\n    event RevertBurnRequest(bytes32 indexed id, address indexed to);\\n\\n    event ClientIdLog(bytes32 requestId, bytes32 indexed clientId);\\n\\n    event MetaRevertRequest(bytes32 indexed id, address indexed to);\\n\\n    event BurnCompleted(\\n        bytes32 indexed id,\\n        address indexed to,\\n        uint256 amount,\\n        uint256 bridgingFee,\\n        address token\\n    );\\n\\n    event RevertSynthesizeCompleted(\\n        bytes32 indexed id,\\n        address indexed to,\\n        uint256 amount,\\n        uint256 bridgingFee,\\n        address token\\n    );\\n\\n    event Paused(address account);\\n\\n    event Unpaused(address account);\\n\\n    event SetWhitelistToken(address token, bool activate);\\n\\n    event SetTokenThreshold(address token, uint256 threshold);\\n\\n    event SetMetaRouter(address metaRouter);\\n\\n    /// ** MODIFIERs **\\n\\n    modifier onlyBridge() {\\n        require(bridge == msg.sender, \\\"Symb: caller is not the bridge\\\");\\n        _;\\n    }\\n\\n    modifier whenNotPaused() {\\n        require(!paused, \\\"Symb: paused\\\");\\n        _;\\n    }\\n\\n    /// ** INITIALIZER **\\n\\n    /**\\n     * init\\n     */\\n    function initialize(\\n        address _bridge,\\n        address _trustedForwarder,\\n        address _wrapper,\\n        address _whitelistedToken,\\n        IMetaRouter _metaRouter\\n    ) public virtual initializer {\\n        __RelayRecipient_init(_trustedForwarder);\\n        bridge = _bridge;\\n        wrapper = _wrapper;\\n        metaRouter = _metaRouter;\\n\\n        if (_whitelistedToken != address(0)) {\\n            tokenWhitelist[_whitelistedToken] = true;\\n        }\\n    }\\n\\n    /// ** EXTERNAL PURE functions **\\n\\n    /**\\n     * @notice Returns version\\n     */\\n    function versionRecipient() external pure returns (string memory) {\\n        return \\\"2.0.1\\\";\\n    }\\n\\n    // ** EXTERNAL functions **\\n\\n    /**\\n     * @notice Sends synthesize request\\n     * @dev Token -> sToken on a second chain\\n     * @param _stableBridgingFee Bridging fee on another network\\n     * @param _token The address of the token that the user wants to synthesize\\n     * @param _amount Number of tokens to synthesize\\n     * @param _chain2address The address to which the user wants to receive the synth asset on another network\\n     * @param _receiveSide Synthesis address on another network\\n     * @param _oppositeBridge Bridge address on another network\\n     * @param _revertableAddress An address on another network that allows the user to revert a stuck request\\n     * @param _chainID Chain id of the network where synthesization will take place\\n     */\\n    function synthesize(\\n        uint256 _stableBridgingFee,\\n        address _token,\\n        uint256 _amount,\\n        address _chain2address,\\n        address _receiveSide,\\n        address _oppositeBridge,\\n        address _revertableAddress,\\n        uint256 _chainID,\\n        bytes32 _clientID\\n    ) external whenNotPaused returns (bytes32) {\\n        require(tokenWhitelist[_token], \\\"Symb: unauthorized token\\\");\\n        require(_amount >= tokenThreshold[_token], \\\"Symb: amount under threshold\\\");\\n        TransferHelper.safeTransferFrom(\\n            _token,\\n            _msgSender(),\\n            address(this),\\n            _amount\\n        );\\n\\n        return\\n        sendSynthesizeRequest(\\n            _stableBridgingFee,\\n            _token,\\n            _amount,\\n            _chain2address,\\n            _receiveSide,\\n            _oppositeBridge,\\n            _revertableAddress,\\n            _chainID,\\n            _clientID\\n        );\\n    }\\n\\n    /**\\n     * @notice Sends metaSynthesizeOffchain request\\n     * @dev Token -> sToken on a second chain -> final token on a second chain\\n     * @param _metaSynthesizeTransaction metaSynthesize offchain transaction data\\n     */\\n    function metaSynthesize(\\n        MetaRouteStructs.MetaSynthesizeTransaction\\n        memory _metaSynthesizeTransaction\\n    ) external whenNotPaused returns (bytes32) {\\n        require(tokenWhitelist[_metaSynthesizeTransaction.rtoken], \\\"Symb: unauthorized token\\\");\\n        require(_metaSynthesizeTransaction.amount >= tokenThreshold[_metaSynthesizeTransaction.rtoken],\\n            \\\"Symb: amount under threshold\\\");\\n\\n        TransferHelper.safeTransferFrom(\\n            _metaSynthesizeTransaction.rtoken,\\n            _msgSender(),\\n            address(this),\\n            _metaSynthesizeTransaction.amount\\n        );\\n\\n        return sendMetaSynthesizeRequest(_metaSynthesizeTransaction);\\n    }\\n\\n    /**\\n     * @notice Native -> sToken on a second chain\\n     * @param _stableBridgingFee Bridging fee on another network\\n     * @param _chain2address The address to which the user wants to receive the synth asset on another network\\n     * @param _receiveSide Synthesis address on another network\\n     * @param _oppositeBridge Bridge address on another network\\n     * @param _chainID Chain id of the network where synthesization will take place\\n     */\\n    function synthesizeNative(\\n        uint256 _stableBridgingFee,\\n        address _chain2address,\\n        address _receiveSide,\\n        address _oppositeBridge,\\n        address _revertableAddress,\\n        uint256 _chainID,\\n        bytes32 _clientID\\n    ) external payable whenNotPaused returns (bytes32) {\\n        require(tokenWhitelist[wrapper], \\\"Symb: unauthorized token\\\");\\n        require(msg.value >= tokenThreshold[wrapper], \\\"Symb: amount under threshold\\\");\\n\\n        IWrapper(wrapper).deposit{value : msg.value}();\\n\\n        return\\n        sendSynthesizeRequest(\\n            _stableBridgingFee,\\n            wrapper,\\n            msg.value,\\n            _chain2address,\\n            _receiveSide,\\n            _oppositeBridge,\\n            _revertableAddress,\\n            _chainID,\\n            _clientID\\n        );\\n    }\\n\\n    /**\\n     * @notice Token -> sToken on a second chain withPermit\\n     * @param _syntWithPermitTx SynthesizeWithPermit offchain transaction data\\n     */\\n    function synthesizeWithPermit(\\n        SynthesizeWithPermitTransaction memory _syntWithPermitTx\\n    ) external whenNotPaused returns (bytes32) {\\n        require(tokenWhitelist[_syntWithPermitTx.token], \\\"Symb: unauthorized token\\\");\\n        require(_syntWithPermitTx.amount >= tokenThreshold[_syntWithPermitTx.token], \\\"Symb: amount under threshold\\\");\\n        {\\n            (\\n            address owner,\\n            uint256 value,\\n            uint256 deadline,\\n            uint8 v,\\n            bytes32 r,\\n            bytes32 s\\n            ) = abi.decode(\\n                _syntWithPermitTx.approvalData,\\n                (address, uint256, uint256, uint8, bytes32, bytes32)\\n            );\\n            IERC20Permit(_syntWithPermitTx.token).permit(\\n                owner,\\n                address(this),\\n                value,\\n                deadline,\\n                v,\\n                r,\\n                s\\n            );\\n        }\\n\\n        TransferHelper.safeTransferFrom(\\n            _syntWithPermitTx.token,\\n            _msgSender(),\\n            address(this),\\n            _syntWithPermitTx.amount\\n        );\\n\\n        return\\n        sendSynthesizeRequest(\\n            _syntWithPermitTx.stableBridgingFee,\\n            _syntWithPermitTx.token,\\n            _syntWithPermitTx.amount,\\n            _syntWithPermitTx.chain2address,\\n            _syntWithPermitTx.receiveSide,\\n            _syntWithPermitTx.oppositeBridge,\\n            _syntWithPermitTx.revertableAddress,\\n            _syntWithPermitTx.chainID,\\n            _syntWithPermitTx.clientID\\n        );\\n    }\\n\\n    /**\\n     * @notice Emergency unsynthesize\\n     * @dev Can called only by bridge after initiation on a second chain\\n     * @dev If a transaction arrives at the synthesization chain with an already completed revert synthesize contract will fail this transaction,\\n     * since the state was changed during the call to the desynthesis request\\n     * @param _stableBridgingFee Bridging fee\\n     * @param _externalID the synthesize transaction that was received from the event when it was originally called synthesize on the Portal contract\\n     */\\n    function revertSynthesize(uint256 _stableBridgingFee, bytes32 _externalID) external onlyBridge whenNotPaused {\\n        TxState storage txState = requests[_externalID];\\n        require(\\n            txState.state == RequestState.Sent,\\n            \\\"Symb: state not open or tx does not exist\\\"\\n        );\\n        txState.state = RequestState.Reverted;\\n        // close\\n        balanceOf[txState.rtoken] = balanceOf[txState.rtoken] - txState.amount;\\n\\n        TransferHelper.safeTransfer(\\n            txState.rtoken,\\n            txState.recipient,\\n            txState.amount - _stableBridgingFee\\n        );\\n\\n        TransferHelper.safeTransfer(\\n            txState.rtoken,\\n            bridge,\\n            _stableBridgingFee\\n        );\\n\\n        emit RevertSynthesizeCompleted(\\n            _externalID,\\n            txState.recipient,\\n            txState.amount - _stableBridgingFee,\\n            _stableBridgingFee,\\n            txState.rtoken\\n        );\\n    }\\n\\n    /**\\n     * @notice Revert synthesize\\n     * @dev After revertSynthesizeRequest in Synthesis this method is called\\n     * @param _stableBridgingFee Bridging fee\\n     * @param _externalID the burn transaction that was received from the event when it was originally called burn on the Synthesis contract\\n     * @param _token The address of the token to unsynthesize\\n     * @param _amount Number of tokens to unsynthesize\\n     * @param _to The address to receive tokens\\n     */\\n    function unsynthesize(\\n        uint256 _stableBridgingFee,\\n        bytes32 _externalID,\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyBridge whenNotPaused {\\n        require(\\n            unsynthesizeStates[_externalID] == UnsynthesizeState.Default,\\n            \\\"Symb: synthetic tokens emergencyUnburn\\\"\\n        );\\n        balanceOf[_token] = balanceOf[_token] - _amount;\\n        unsynthesizeStates[_externalID] = UnsynthesizeState.Unsynthesized;\\n        TransferHelper.safeTransfer(_token, _to, _amount - _stableBridgingFee);\\n        TransferHelper.safeTransfer(_token, bridge, _stableBridgingFee);\\n        emit BurnCompleted(_externalID, _to, _amount - _stableBridgingFee, _stableBridgingFee, _token);\\n    }\\n\\n    /**\\n     * @notice Unsynthesize and final call on second chain\\n     * @dev Token -> sToken on a first chain -> final token on a second chain\\n     * @param _stableBridgingFee Number of tokens to send to bridge (fee)\\n     * @param _externalID the metaBurn transaction that was received from the event when it was originally called metaBurn on the Synthesis contract\\n     * @param _to The address to receive tokens\\n     * @param _amount Number of tokens to unsynthesize\\n     * @param _rToken The address of the token to unsynthesize\\n     * @param _finalReceiveSide router for final call\\n     * @param _finalCalldata encoded call of a final function\\n     * @param _finalOffset offset to patch _amount to _finalCalldata\\n     */\\n    function metaUnsynthesize(\\n        uint256 _stableBridgingFee,\\n        bytes32 _externalID,\\n        address _to,\\n        uint256 _amount,\\n        address _rToken,\\n        address _finalReceiveSide,\\n        bytes memory _finalCalldata,\\n        uint256 _finalOffset\\n    ) external onlyBridge whenNotPaused {\\n        require(\\n            unsynthesizeStates[_externalID] == UnsynthesizeState.Default,\\n            \\\"Symb: synthetic tokens emergencyUnburn\\\"\\n        );\\n\\n        balanceOf[_rToken] = balanceOf[_rToken] - _amount;\\n        unsynthesizeStates[_externalID] = UnsynthesizeState.Unsynthesized;\\n        TransferHelper.safeTransfer(_rToken, bridge, _stableBridgingFee);\\n        _amount = _amount - _stableBridgingFee;\\n\\n        if (_finalCalldata.length == 0) {\\n            TransferHelper.safeTransfer(_rToken, _to, _amount);\\n            emit BurnCompleted(_externalID, address(this), _amount, _stableBridgingFee, _rToken);\\n            return;\\n        }\\n\\n        // transfer ERC20 tokens to MetaRouter\\n        TransferHelper.safeTransfer(\\n            _rToken,\\n            address(metaRouter),\\n            _amount\\n        );\\n\\n        // metaRouter call\\n        metaRouter.externalCall(_rToken, _amount, _finalReceiveSide, _finalCalldata, _finalOffset, _to);\\n\\n        emit BurnCompleted(_externalID, address(this), _amount, _stableBridgingFee, _rToken);\\n    }\\n\\n    /**\\n     * @notice Revert burnSyntheticToken() operation\\n     * @dev Can called only by bridge after initiation on a second chain\\n     * @dev Further, this transaction also enters the relay network and is called on the other side under the method \\\"revertBurn\\\"\\n     * @param _stableBridgingFee Bridging fee on another network\\n     * @param _internalID the synthesize transaction that was received from the event when it was originally called burn on the Synthesize contract\\n     * @param _receiveSide Synthesis address on another network\\n     * @param _oppositeBridge Bridge address on another network\\n     * @param _chainId Chain id of the network\\n     */\\n    function revertBurnRequest(\\n        uint256 _stableBridgingFee,\\n        bytes32 _internalID,\\n        address _receiveSide,\\n        address _oppositeBridge,\\n        uint256 _chainId,\\n        bytes32 _clientID\\n    ) external whenNotPaused {\\n        bytes32 externalID = keccak256(abi.encodePacked(_internalID, address(this), _msgSender(), block.chainid));\\n\\n        require(\\n            unsynthesizeStates[externalID] != UnsynthesizeState.Unsynthesized,\\n            \\\"Symb: Real tokens already transfered\\\"\\n        );\\n        unsynthesizeStates[externalID] = UnsynthesizeState.RevertRequest;\\n\\n        {\\n            bytes memory out = abi.encodeWithSelector(\\n                bytes4(keccak256(bytes(\\\"revertBurn(uint256,bytes32)\\\"))),\\n                _stableBridgingFee,\\n                externalID\\n            );\\n            IBridge(bridge).transmitRequestV2(\\n                out,\\n                _receiveSide,\\n                _oppositeBridge,\\n                _chainId\\n            );\\n        }\\n\\n        emit RevertBurnRequest(_internalID, _msgSender());\\n        emit ClientIdLog(_internalID, _clientID);\\n    }\\n\\n    function metaRevertRequest(\\n        MetaRouteStructs.MetaRevertTransaction memory _metaRevertTransaction\\n    ) external whenNotPaused {\\n        if (_metaRevertTransaction.swapCalldata.length != 0){\\n            bytes32 externalID = keccak256(abi.encodePacked(_metaRevertTransaction.internalID, address(this), _msgSender(), block.chainid));\\n\\n            require(\\n                unsynthesizeStates[externalID] != UnsynthesizeState.Unsynthesized,\\n                \\\"Symb: Real tokens already transfered\\\"\\n            );\\n\\n            unsynthesizeStates[externalID] = UnsynthesizeState.RevertRequest;\\n\\n            {\\n                bytes memory out = abi.encodeWithSelector(\\n                    bytes4(keccak256(bytes(\\\"revertMetaBurn(uint256,bytes32,address,bytes,address,address,bytes)\\\"))),\\n                    _metaRevertTransaction.stableBridgingFee,\\n                    externalID,\\n                    _metaRevertTransaction.router,\\n                    _metaRevertTransaction.swapCalldata,\\n                    _metaRevertTransaction.sourceChainSynthesis,\\n                    _metaRevertTransaction.burnToken,\\n                    _metaRevertTransaction.burnCalldata\\n                );\\n\\n                IBridge(bridge).transmitRequestV2(\\n                    out,\\n                    _metaRevertTransaction.receiveSide,\\n                    _metaRevertTransaction.managerChainBridge,\\n                    _metaRevertTransaction.managerChainId\\n                );\\n                emit RevertBurnRequest(_metaRevertTransaction.internalID, _msgSender());\\n                emit ClientIdLog(_metaRevertTransaction.internalID, _metaRevertTransaction.clientID);\\n            }\\n        } else {\\n            if (_metaRevertTransaction.burnCalldata.length != 0){\\n                bytes32 externalID = keccak256(abi.encodePacked(_metaRevertTransaction.internalID, address(this), _msgSender(), block.chainid));\\n\\n                require(\\n                    unsynthesizeStates[externalID] != UnsynthesizeState.Unsynthesized,\\n                    \\\"Symb: Real tokens already transfered\\\"\\n                );\\n\\n                unsynthesizeStates[externalID] = UnsynthesizeState.RevertRequest;\\n\\n                bytes memory out = abi.encodeWithSelector(\\n                    bytes4(keccak256(bytes(\\\"revertBurnAndBurn(uint256,bytes32,address,address,uint256,address)\\\"))),\\n                    _metaRevertTransaction.stableBridgingFee,\\n                    externalID,\\n                    address(this),\\n                    _metaRevertTransaction.sourceChainBridge,\\n                    block.chainid,\\n                    _msgSender()\\n                );\\n\\n                IBridge(bridge).transmitRequestV2(\\n                    out,\\n                    _metaRevertTransaction.sourceChainSynthesis,\\n                    _metaRevertTransaction.managerChainBridge,\\n                    _metaRevertTransaction.managerChainId\\n                );\\n                emit RevertBurnRequest(_metaRevertTransaction.internalID, _msgSender());\\n                emit ClientIdLog(_metaRevertTransaction.internalID, _metaRevertTransaction.clientID);\\n            } else {\\n                bytes memory out = abi.encodeWithSelector(\\n                    bytes4(keccak256(bytes(\\\"revertSynthesizeRequestByBridge(uint256,bytes32,address,address,uint256,address,bytes32)\\\"))),\\n                    _metaRevertTransaction.stableBridgingFee,\\n                    _metaRevertTransaction.internalID,\\n                    _metaRevertTransaction.receiveSide,\\n                    _metaRevertTransaction.sourceChainBridge,\\n                    block.chainid,\\n                    _msgSender(),\\n                    _metaRevertTransaction.clientID\\n                );\\n\\n                IBridge(bridge).transmitRequestV2(\\n                    out,\\n                    _metaRevertTransaction.sourceChainSynthesis,\\n                    _metaRevertTransaction.managerChainBridge,\\n                    _metaRevertTransaction.managerChainId\\n                );\\n            }\\n        }\\n        emit MetaRevertRequest(_metaRevertTransaction.internalID, _msgSender());\\n    }\\n\\n    // ** ONLYOWNER functions **\\n\\n    /**\\n     * @notice Set paused flag to true\\n     */\\n    function pause() external onlyOwner {\\n        paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @notice Set paused flag to false\\n     */\\n    function unpause() external onlyOwner {\\n        paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @notice Sets token to tokenWhitelist\\n     * @param _token Address of token to add to whitelist\\n     * @param _activate true - add to whitelist, false - remove from whitelist\\n     */\\n    function setWhitelistToken(address _token, bool _activate) external onlyOwner {\\n        tokenWhitelist[_token] = _activate;\\n        emit SetWhitelistToken(_token, _activate);\\n    }\\n\\n    /**\\n     * @notice Sets minimal price for token\\n     * @param _token Address of token to set threshold\\n     * @param _threshold threshold to set\\n     */\\n    function setTokenThreshold(address _token, uint256 _threshold) external onlyOwner {\\n        tokenThreshold[_token] = _threshold;\\n        emit SetTokenThreshold(_token, _threshold);\\n    }\\n\\n    /**\\n     * @notice Sets MetaRouter address\\n     * @param _metaRouter Address of metaRouter\\n     */\\n    function setMetaRouter(IMetaRouter _metaRouter) external onlyOwner {\\n        require(address(_metaRouter) != address(0), \\\"Symb: metaRouter cannot be zero address\\\");\\n        metaRouter = _metaRouter;\\n        emit SetMetaRouter(address(_metaRouter));\\n    }\\n\\n    /// ** INTERNAL functions **\\n\\n    /**\\n     * @dev Sends synthesize request\\n     * @dev Internal function used in synthesize, synthesizeNative, synthesizeWithPermit\\n     */\\n    function sendSynthesizeRequest(\\n        uint256 _stableBridgingFee,\\n        address _token,\\n        uint256 _amount,\\n        address _chain2address,\\n        address _receiveSide,\\n        address _oppositeBridge,\\n        address _revertableAddress,\\n        uint256 _chainID,\\n        bytes32 _clientID\\n    ) internal returns (bytes32 internalID) {\\n        balanceOf[_token] = balanceOf[_token] + _amount;\\n\\n        if (_revertableAddress == address(0)) {\\n            _revertableAddress = _chain2address;\\n        }\\n\\n        internalID = keccak256(abi.encodePacked(this, requestCount, block.chainid));\\n        {\\n            bytes32 externalID = keccak256(abi.encodePacked(internalID, _receiveSide, _revertableAddress, _chainID));\\n\\n            {\\n                bytes memory out = abi.encodeWithSelector(\\n                    bytes4(\\n                        keccak256(\\n                            bytes(\\n                                \\\"mintSyntheticToken(uint256,bytes32,address,uint256,uint256,address)\\\"\\n                            )\\n                        )\\n                    ),\\n                    _stableBridgingFee,\\n                    externalID,\\n                    _token,\\n                    block.chainid,\\n                    _amount,\\n                    _chain2address\\n                );\\n\\n                requests[externalID] = TxState({\\n                    recipient : _msgSender(),\\n                    chain2address : _chain2address,\\n                    rtoken : _token,\\n                    amount : _amount,\\n                    state : RequestState.Sent\\n                });\\n\\n                requestCount++;\\n                IBridge(bridge).transmitRequestV2(\\n                    out,\\n                    _receiveSide,\\n                    _oppositeBridge,\\n                    _chainID\\n                );\\n            }\\n        }\\n\\n        emit SynthesizeRequest(\\n            internalID,\\n            _msgSender(),\\n            _chainID,\\n            _revertableAddress,\\n            _chain2address,\\n            _amount,\\n            _token\\n        );\\n        emit ClientIdLog(internalID, _clientID);\\n    }\\n\\n    /**\\n     * @dev Sends metaSynthesizeOffchain request\\n     * @dev Internal function used in metaSynthesizeOffchain\\n     */\\n    function sendMetaSynthesizeRequest(\\n        MetaRouteStructs.MetaSynthesizeTransaction\\n        memory _metaSynthesizeTransaction\\n    ) internal returns (bytes32 internalID) {\\n        balanceOf[_metaSynthesizeTransaction.rtoken] =\\n        balanceOf[_metaSynthesizeTransaction.rtoken] +\\n        _metaSynthesizeTransaction.amount;\\n\\n        if (_metaSynthesizeTransaction.revertableAddress == address(0)) {\\n            _metaSynthesizeTransaction.revertableAddress = _metaSynthesizeTransaction.chain2address;\\n        }\\n\\n        internalID = keccak256(abi.encodePacked(this, requestCount, block.chainid));\\n        bytes32 externalID = keccak256(\\n            abi.encodePacked(internalID, _metaSynthesizeTransaction.receiveSide, _metaSynthesizeTransaction.revertableAddress, _metaSynthesizeTransaction.chainID)\\n        );\\n\\n        MetaRouteStructs.MetaMintTransaction\\n        memory _metaMintTransaction = MetaRouteStructs.MetaMintTransaction(\\n            _metaSynthesizeTransaction.stableBridgingFee,\\n            _metaSynthesizeTransaction.amount,\\n            externalID,\\n            _metaSynthesizeTransaction.rtoken,\\n            block.chainid,\\n            _metaSynthesizeTransaction.chain2address,\\n            _metaSynthesizeTransaction.swapTokens,\\n            _metaSynthesizeTransaction.secondDexRouter,\\n            _metaSynthesizeTransaction.secondSwapCalldata,\\n            _metaSynthesizeTransaction.finalReceiveSide,\\n            _metaSynthesizeTransaction.finalCalldata,\\n            _metaSynthesizeTransaction.finalOffset\\n        );\\n\\n        {\\n            bytes memory out = abi.encodeWithSignature(\\n                \\\"metaMintSyntheticToken((uint256,uint256,bytes32,address,uint256,address,address[],\\\"\\n                \\\"address,bytes,address,bytes,uint256))\\\",\\n                _metaMintTransaction\\n            );\\n\\n            requests[externalID] = TxState({\\n                recipient : _metaSynthesizeTransaction.syntCaller,\\n                chain2address : _metaSynthesizeTransaction.chain2address,\\n                rtoken : _metaSynthesizeTransaction.rtoken,\\n                amount : _metaSynthesizeTransaction.amount,\\n                state : RequestState.Sent\\n            });\\n\\n            requestCount++;\\n            IBridge(bridge).transmitRequestV2(\\n                out,\\n                _metaSynthesizeTransaction.receiveSide,\\n                _metaSynthesizeTransaction.oppositeBridge,\\n                _metaSynthesizeTransaction.chainID\\n            );\\n        }\\n\\n        emit SynthesizeRequest(\\n            internalID,\\n            _metaSynthesizeTransaction.syntCaller,\\n            _metaSynthesizeTransaction.chainID,\\n            _metaSynthesizeTransaction.revertableAddress,\\n            _metaSynthesizeTransaction.chain2address,\\n            _metaSynthesizeTransaction.amount,\\n            _metaSynthesizeTransaction.rtoken\\n        );\\n        emit ClientIdLog(internalID, _metaSynthesizeTransaction.clientID);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/RelayRecipientUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract RelayRecipientUpgradeable is OwnableUpgradeable {\\n    address private _trustedForwarder;\\n\\n    function __RelayRecipient_init(address trustedForwarder)\\n        internal\\n        onlyInitializing\\n    {\\n        __Ownable_init();\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder)\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address sender)\\n    {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (bytes calldata)\\n    {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bridgingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BurnCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"clientId\",\"type\":\"bytes32\"}],\"name\":\"ClientIdLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"MetaRevertRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"RevertBurnRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bridgingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RevertSynthesizeCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"metaRouter\",\"type\":\"address\"}],\"name\":\"SetMetaRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"SetTokenThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"activate\",\"type\":\"bool\"}],\"name\":\"SetWhitelistToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revertableAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SynthesizeRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelistedToken\",\"type\":\"address\"},{\"internalType\":\"contract IMetaRouter\",\"name\":\"_metaRouter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stableBridgingFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"internalID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"receiveSide\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"managerChainBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sourceChainBridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"managerChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapCalldata\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"sourceChainSynthesis\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"burnToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"burnCalldata\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"clientID\",\"type\":\"bytes32\"}],\"internalType\":\"struct MetaRouteStructs.MetaRevertTransaction\",\"name\":\"_metaRevertTransaction\",\"type\":\"tuple\"}],\"name\":\"metaRevertRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metaRouter\",\"outputs\":[{\"internalType\":\"contract IMetaRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stableBridgingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rtoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"chain2address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiveSide\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oppositeBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"syntCaller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"swapTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"secondDexRouter\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"secondSwapCalldata\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"finalReceiveSide\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"finalCalldata\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"finalOffset\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"revertableAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"clientID\",\"type\":\"bytes32\"}],\"internalType\":\"struct MetaRouteStructs.MetaSynthesizeTransaction\",\"name\":\"_metaSynthesizeTransaction\",\"type\":\"tuple\"}],\"name\":\"metaSynthesize\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stableBridgingFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_externalID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_finalReceiveSide\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_finalCalldata\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_finalOffset\",\"type\":\"uint256\"}],\"name\":\"metaUnsynthesize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"chain2address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rtoken\",\"type\":\"address\"},{\"internalType\":\"enum Portal.RequestState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stableBridgingFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_internalID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_receiveSide\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oppositeBridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_clientID\",\"type\":\"bytes32\"}],\"name\":\"revertBurnRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stableBridgingFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_externalID\",\"type\":\"bytes32\"}],\"name\":\"revertSynthesize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMetaRouter\",\"name\":\"_metaRouter\",\"type\":\"address\"}],\"name\":\"setMetaRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setTokenThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_activate\",\"type\":\"bool\"}],\"name\":\"setWhitelistToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stableBridgingFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_chain2address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiveSide\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oppositeBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_revertableAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chainID\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_clientID\",\"type\":\"bytes32\"}],\"name\":\"synthesize\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stableBridgingFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_chain2address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiveSide\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oppositeBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_revertableAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chainID\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_clientID\",\"type\":\"bytes32\"}],\"name\":\"synthesizeNative\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stableBridgingFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"approvalData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"chain2address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiveSide\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oppositeBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"revertableAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"clientID\",\"type\":\"bytes32\"}],\"internalType\":\"struct Portal.SynthesizeWithPermitTransaction\",\"name\":\"_syntWithPermitTx\",\"type\":\"tuple\"}],\"name\":\"synthesizeWithPermit\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stableBridgingFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_externalID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"unsynthesize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"unsynthesizeStates\",\"outputs\":[{\"internalType\":\"enum Portal.UnsynthesizeState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Portal", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}