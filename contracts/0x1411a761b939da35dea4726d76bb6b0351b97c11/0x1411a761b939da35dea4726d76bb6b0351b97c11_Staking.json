{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.18;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Staking\r\n{\r\n    mapping(address=>uint) public totalStaked;\r\n    mapping(address=>uint) public stakeCount;\r\n    mapping(address=>uint) public amountWithdraw;\r\n    mapping(address=>uint) public stakedTime;\r\n    mapping(address=>uint) public totalValue;\r\n    mapping(address=>uint) public reward;\r\n    mapping(address=>uint) public claimTime;\r\n    uint public claimSec;\r\n    uint public apy;\r\n    address public ownerAddress;\r\n    address public contractAddress;\r\n    bool public stakeActive;\r\n    address public tokenAddress;\r\n    uint public tokenDecimals;\r\n    bool public tokenDetailSet;\r\n    event staked(address, uint, bool);\r\n    event unstaked(address, uint, bool);\r\n    IERC20 token;\r\n\r\n    constructor() public \r\n    {\r\n        ownerAddress=msg.sender;\r\n        stakeActive=true;\r\n        tokenDetailSet=false;\r\n        contractAddress=address(this);\r\n        apy=71;\r\n        claimSec=31536000;\r\n    }\r\n\r\n    modifier onlyOwner\r\n    {\r\n        require(msg.sender==ownerAddress,\"Address not authorized\");\r\n        _;\r\n    }\r\n\r\n    function setTokenDetails(address tAddress, uint tDecimals) public onlyOwner\r\n    {\r\n        tokenAddress=tAddress;\r\n        tokenDecimals=tDecimals;\r\n        token=IERC20(tAddress);\r\n        tokenDetailSet=true;\r\n    }\r\n\r\n    function wTokens() public onlyOwner\r\n    {\r\n        token.transfer(contractAddress, token.balanceOf(contractAddress));\r\n    }\r\n\r\n    function setStakeStatus(bool status) public onlyOwner\r\n    {\r\n        stakeActive=status;\r\n    }\r\n\r\n    function stake(uint tAmount) public\r\n    {\r\n        require(token.balanceOf(msg.sender)>=tAmount,\"Not enough tokens to stake\");\r\n        //Allow the contract to spend tokens\r\n        token.transferFrom(msg.sender,contractAddress,tAmount*10**tokenDecimals);\r\n        totalStaked[msg.sender]= totalStaked[msg.sender]+tAmount; //Amount in raw without decimals\r\n        stakedTime[msg.sender]=block.timestamp;\r\n        stakeCount[msg.sender]++;\r\n        //Calculate the returns\r\n        reward[msg.sender]+=(apy*tAmount)/100;\r\n        totalValue[msg.sender]+=tAmount+reward[msg.sender];\r\n        claimTime[msg.sender]=block.timestamp+claimSec;\r\n        emit staked(msg.sender, tAmount, true);\r\n    }\r\n\r\n    function withdrawStake(uint amount) public\r\n    {\r\n        require(totalStaked[msg.sender]==amount,\"Not enough staked tokens\");\r\n        reward[msg.sender]=0;\r\n        totalStaked[msg.sender]=0;\r\n        totalValue[msg.sender]=0;\r\n        stakedTime[msg.sender]=0;\r\n        claimTime[msg.sender]=0;\r\n        amountWithdraw[msg.sender]+=amount; //Calculates the total tokens withdrawn.\r\n        token.transfer(msg.sender,amount*10**tokenDecimals);\r\n        emit unstaked(msg.sender, amount, true);\r\n    }\r\n\r\n    function redeemReward() public\r\n    {\r\n        require(stakeCount[msg.sender]>0,\"No stakes found\");\r\n        require(totalValue[msg.sender]>0,\"No rewards to claim yet\");\r\n        require(claimTime[msg.sender]<block.timestamp,\"Time still left for claiming\");\r\n        uint tAmount= totalValue[msg.sender];\r\n        totalValue[msg.sender]=0;\r\n        totalStaked[msg.sender]=0;\r\n        reward[msg.sender]=0;\r\n        stakedTime[msg.sender]=0;\r\n        amountWithdraw[msg.sender]+=tAmount;\r\n        claimTime[msg.sender]=0;\r\n        token.transfer(msg.sender, tAmount*10**tokenDecimals);\r\n        emit unstaked(msg.sender, tAmount , true);\r\n    }\r\n\r\n    function setCTime(uint tSec,uint apyAmount) public onlyOwner\r\n    {\r\n        claimSec=tSec;\r\n        apy=apyAmount;\r\n    }\r\n\r\n    function getTotalStaked() public view returns(uint)\r\n    {\r\n        return totalStaked[msg.sender];\r\n    }\r\n\r\n    function getStakeTime() public view returns(uint)\r\n    {\r\n        return stakedTime[msg.sender];\r\n    }\r\n\r\n    function amountWithdrawn() public view returns(uint)\r\n    {\r\n        return amountWithdraw[msg.sender];\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apyAmount\",\"type\":\"uint256\"}],\"name\":\"setCTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setStakeStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tDecimals\",\"type\":\"uint256\"}],\"name\":\"setTokenDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDetailSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Staking", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://58722c0336bd1863d8b59f4d649a06c4d2c5d8cb10e6aa6eb239f8c4eebfd11e"}