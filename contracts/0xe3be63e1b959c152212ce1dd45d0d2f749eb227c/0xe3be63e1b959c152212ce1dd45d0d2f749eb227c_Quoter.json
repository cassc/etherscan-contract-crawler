{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"periphery/Quoter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.18;\\n\\nimport {IVault} from \\\"src/interfaces/IVault.sol\\\";\\nimport {fmul} from \\\"src/lib/FixedPoint.sol\\\";\\nimport {TokenInfo} from \\\"src/Common.sol\\\";\\nimport {IInvokeableBounty, Bounty} from \\\"src/interfaces/IInvokeableBounty.sol\\\";\\n\\ncontract Quoter {\\n    IVault immutable vault;\\n\\n    constructor(address _vault) {\\n        vault = IVault(_vault);\\n    }\\n\\n    /// @notice Quote the amount of underlying tokens needed to issue index tokens\\n    /// @param amount The amount of index tokens to issue\\n    /// @return tokens The underlying tokens and amounts needed to issue index tokens\\n    /// @dev Does not check for revert cases\\n    function quoteIssue(\\n        uint256 amount\\n    ) external view returns (TokenInfo[] memory) {\\n        TokenInfo[] memory tokens = vault.virtualUnits();\\n\\n        for (uint256 i; i < tokens.length; i++) {\\n            uint256 underlyingAmount = fmul(tokens[i].units + 1, amount) + 1;\\n\\n            tokens[i].units = underlyingAmount;\\n        }\\n\\n        return tokens;\\n    }\\n\\n    /// @notice Quote the amount of underlying tokens to be be received upon redemption of index tokens\\n    /// @param amount The amount of index tokens to redeem\\n    /// @return tokens The underlying tokens and amounts to be received upon redemption of index tokens\\n    /// @dev Does not check for revert cases\\n    function quoteRedeem(\\n        uint256 amount\\n    ) external view returns (TokenInfo[] memory) {\\n        TokenInfo[] memory tokens = vault.virtualUnits();\\n\\n        for (uint256 i; i < tokens.length; i++) {\\n            uint256 underlyingAmount = fmul(tokens[i].units, amount);\\n\\n            tokens[i].units = underlyingAmount;\\n        }\\n\\n        return tokens;\\n    }\\n\\n    /// @notice Quote a bounty, returns the ins and outs\\n    /// @dev The units in the bounty are the target units, i.e. amount of units per 1e18 amkt\\n    /// @dev Does not check for revert cases\\n    /// @param bounty The bounty to quote\\n    /// @param tokenSupply The total supply of the index token to quote for\\n    /// @return outs The tokens and amounts to send to the bounty fulfiller\\n    /// @return ins The tokens and amounts to receive from the bounty fulfiller\\n    function quoteFulfillBounty(\\n        Bounty calldata bounty,\\n        uint256 tokenSupply\\n    ) external view returns (TokenInfo[] memory outs, TokenInfo[] memory ins) {\\n        TokenInfo[] memory targets = bounty.infos;\\n\\n        outs = new TokenInfo[](targets.length);\\n\\n        ins = new TokenInfo[](targets.length);\\n\\n        uint256 lenOuts;\\n        uint256 lenIns;\\n\\n        for (uint256 i; i < targets.length; i++) {\\n            address token = targets[i].token;\\n\\n            uint256 targetUnits = targets[i].units;\\n\\n            uint256 virtualUnits = vault.virtualUnits(token);\\n\\n            if (virtualUnits > targetUnits) {\\n                outs[lenOuts] = TokenInfo(\\n                    token,\\n                    fmul(virtualUnits - targetUnits, tokenSupply)\\n                );\\n\\n                unchecked {\\n                    lenOuts++;\\n                }\\n            } else if (targetUnits > virtualUnits) {\\n                ins[lenIns] = TokenInfo(\\n                    token,\\n                    fmul(targetUnits - virtualUnits + 1, tokenSupply) + 1\\n                );\\n\\n                unchecked {\\n                    lenIns++;\\n                }\\n            } else {\\n                continue;\\n            }\\n        }\\n\\n        assembly {\\n            mstore(outs, lenOuts)\\n            mstore(ins, lenIns)\\n        }\\n\\n        return (outs, ins);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.18;\\n\\nimport {TokenInfo} from \\\"src/Common.sol\\\";\\nimport {IIndexToken} from \\\"src/interfaces/IIndexToken.sol\\\";\\n\\ninterface IVault {\\n    error AMKTVaultOnlyInvokers();\\n    error AMKTVaultOnly(address who);\\n    error AMKTVaultInflationRateTooLarge();\\n    error AMKTVaultFeeTooEarly();\\n    error AMKTVaultFeeTooSmall();\\n    error AMKTVaultEmergency();\\n    error VaultInvariant();\\n    error VaultZeroCheck();\\n\\n    event VaultIssuanceSet(address issuance);\\n    event VaultRebalancerSet(address rebalancer);\\n    event VaultFeeRecipientSet(address feeRecipient);\\n    event VaultEmergencyResponderSet(address emergencyResponder);\\n    event VaultInflationRateSet(uint256 inflationRate);\\n    event VaultEmergencySet(bool emergency);\\n    event VaultFeeMinted(address indexed to, uint256 amount);\\n\\n    struct InvokeERC20Args {\\n        address token;\\n        address to;\\n        uint256 amount;\\n    }\\n\\n    struct SetNominalArgs {\\n        address token;\\n        uint256 virtualUnits;\\n    }\\n\\n    function issuance() external view returns (address);\\n\\n    function rebalancer() external view returns (address);\\n\\n    function tryInflation() external;\\n\\n    function inflationRate() external view returns (uint256);\\n\\n    function feeRecipient() external view returns (address);\\n\\n    function lastKnownTimestamp() external view returns (uint256);\\n\\n    function invokeERC20s(InvokeERC20Args[] calldata args) external;\\n\\n    function invokeSetNominals(SetNominalArgs[] calldata args) external;\\n\\n    function virtualUnits(address token) external view returns (uint256);\\n\\n    function virtualUnits() external view returns (TokenInfo[] memory);\\n\\n    function invariantCheck() external view;\\n\\n    function isUnderlying(address target) external view returns (bool);\\n\\n    function underlying() external view returns (address[] memory);\\n\\n    function underlyingLength() external view returns (uint256);\\n\\n    function invokeMint(address to, uint256 amount) external;\\n\\n    function invokeBurn(address from, uint256 amount) external;\\n\\n    function indexToken() external view returns (IIndexToken);\\n}\\n\"\r\n    },\r\n    \"src/lib/FixedPoint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.18;\\n\\nuint256 constant SCALAR = 1e18;\\n\\nfunction fmul(uint256 a, uint256 b) pure returns (uint256 ret) {\\n    ret = (a * b) / SCALAR;\\n}\\n\\nfunction fdiv(uint256 a, uint256 b) pure returns (uint256 ret) {\\n    ret = (a * SCALAR) / b;\\n}\\n\\nfunction finv(uint256 a) pure returns (uint256 ret) {\\n    ret = fdiv(SCALAR, a);\\n}\\n\"\r\n    },\r\n    \"src/Common.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.18;\\n\\nstruct TokenInfo {\\n    address token;\\n    uint256 units;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IInvokeableBounty.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.18;\\n\\nimport {TokenInfo} from \\\"src/Common.sol\\\";\\n\\nstruct Bounty {\\n    TokenInfo[] infos;\\n    address fulfiller;\\n    uint256 deadline;\\n    bytes32 salt;\\n}\\n\\nstruct QuoteInput {\\n    TokenInfo[] targets;\\n    uint256 supply;\\n}\\n\\ninterface IInvokeableBounty {\\n    error BountyInvalidHash();\\n    error BountyAlreadyCompleted();\\n    error BountyPastDeadline();\\n    error BountyAMKTSupplyChange();\\n    error BountyReentrant();\\n    error BountyMustIncludeAllUnderlyings();\\n    error BountyInvalidFulfiller();\\n    error BountyInvalidToken();\\n\\n    event BountyFulfilled(Bounty bounty, bool callback);\\n\\n    function fulfillBounty(Bounty memory bounty, bool callback) external;\\n\\n    function hashBounty(\\n        Bounty memory bounty\\n    ) external view returns (bytes32 hash);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IIndexToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.18;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\\\";\\n\\ninterface IIndexToken is IERC20Upgradeable {\\n    event MinterSet(address indexed minter);\\n\\n    ///=============================================================================================\\n    /// Initializer\\n    ///=============================================================================================\\n\\n    function initialize(address _minter) external;\\n\\n    ///=============================================================================================\\n    /// State\\n    ///=============================================================================================\\n\\n    function minter() external view returns (address);\\n\\n    ///=============================================================================================\\n    /// Mint Logic\\n    ///=============================================================================================\\n\\n    /// @notice External mint function\\n    /// @dev Mint function can only be called externally by the controller\\n    /// @param to address\\n    /// @param amount uint256\\n    function mint(address to, uint256 amount) external;\\n\\n    /// @notice External burn function\\n    /// @dev burn function can only be called externally by the controller\\n    /// @param from address\\n    /// @param amount uint256\\n    function burn(address from, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"src/=src/\",\r\n      \"test/=test/\",\r\n      \"invoke-modules/=src/invoke/\",\r\n      \"core-libs/=src/lib/\",\r\n      \"core-test/=test/core/\",\r\n      \"mocks/=test/mocks/\",\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"halmost-cheatcodes/=lib/halmos-cheatcodes/src/\",\r\n      \"halmos-cheatcodes/=lib/halmos-cheatcodes/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenInfo[]\",\"name\":\"infos\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"fulfiller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"internalType\":\"struct Bounty\",\"name\":\"bounty\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenSupply\",\"type\":\"uint256\"}],\"name\":\"quoteFulfillBounty\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenInfo[]\",\"name\":\"outs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenInfo[]\",\"name\":\"ins\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"quoteIssue\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"quoteRedeem\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Quoter", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000f3bcedab2998933c6aad1cb31430d8bab329dd8c", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}