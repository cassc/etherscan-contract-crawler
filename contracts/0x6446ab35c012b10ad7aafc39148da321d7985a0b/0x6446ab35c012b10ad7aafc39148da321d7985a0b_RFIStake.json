{"SourceCode": "// File: openzeppelin-solidity\\contracts\\math\\SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity\\contracts\\utils\\ReentrancyGuard.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts\\ITREASURY.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\ninterface ITREASURY {\r\n\r\n    function token() external view returns (IERC20);\r\n\r\n    function fundsAvailable() external view returns (uint256);\r\n\r\n    function release() external;\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\utils\\Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity\\contracts\\access\\Ownable.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts\\TokenPool.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title A simple holder of tokens.\r\n * This is a simple contract to hold tokens. It's useful in the case where a separate contract\r\n * needs to hold multiple distinct pools of the same token.\r\n */\r\ncontract TokenPool is Ownable {\r\n    IERC20 public token;\r\n\r\n    constructor(IERC20 _token) public {\r\n        token = _token;\r\n    }\r\n\r\n    function balance() external view returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function transfer(address to, uint256 value) external onlyOwner returns (bool) {\r\n        return token.transfer(to, value);\r\n    }\r\n}\r\n\r\n// File: contracts\\ReflectiveStake.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\ncontract ReflectiveStake is ReentrancyGuard{\r\n    using SafeMath for uint256;\r\n\r\n    event Staked(address indexed user, uint256 amount, uint256 total, bytes data);\r\n    event Unstaked(address indexed user, uint256 amount, uint256 total, bytes data);\r\n    event TokensClaimed(address indexed user, uint256 amount);\r\n    event TokensLocked(uint256 amount, uint256 durationSec, uint256 total);\r\n    event TokensUnlocked(uint256 amount, uint256 total);\r\n\r\n    TokenPool private _stakingPool;\r\n    TokenPool private _unlockedPool;\r\n    ITREASURY private _reflectiveTreasury;\r\n\r\n    uint256 public constant BONUS_DECIMALS = 2;\r\n    uint256 public startBonus = 0;\r\n    uint256 public bonusPeriodSec = 0;\r\n    uint256 public lockupSec = 0;\r\n\r\n    uint256 public totalStakingShares = 0;\r\n    uint256 public totalStakingShareSeconds = 0;\r\n    uint256 public lastAccountingTimestampSec = block.timestamp;\r\n    uint256 private _initialSharesPerToken = 0;\r\n\r\n    struct Stake {\r\n        uint256 stakingShares;\r\n        uint256 timestampSec;\r\n    }\r\n\r\n    struct UserTotals {\r\n        uint256 stakingShares;\r\n        uint256 stakingShareSeconds;\r\n        uint256 lastAccountingTimestampSec;\r\n    }\r\n\r\n    mapping(address => UserTotals) private _userTotals;\r\n\r\n    mapping(address => Stake[]) private _userStakes;\r\n\r\n    /**\r\n     * @param stakingToken The token users deposit as stake.\r\n     * @param distributionToken The token users receive as they unstake.\r\n     * @param reflectiveTreasury The address of the treasury contract that will fund the rewards.\r\n     * @param startBonus_ Starting time bonus, BONUS_DECIMALS fixed point.\r\n     *                    e.g. 25% means user gets 25% of max distribution tokens.\r\n     * @param bonusPeriodSec_ Length of time for bonus to increase linearly to max.\r\n     * @param initialSharesPerToken Number of shares to mint per staking token on first stake.\r\n     * @param lockupSec_ Lockup period after staking.\r\n     */\r\n    constructor(IERC20 stakingToken, IERC20 distributionToken, ITREASURY reflectiveTreasury,\r\n                uint256 startBonus_, uint256 bonusPeriodSec_, uint256 initialSharesPerToken, uint256 lockupSec_) public {\r\n        // The start bonus must be some fraction of the max. (i.e. <= 100%)\r\n        require(startBonus_ <= 10**BONUS_DECIMALS, 'ReflectiveStake: start bonus too high');\r\n        // If no period is desired, instead set startBonus = 100%\r\n        // and bonusPeriod to a small value like 1sec.\r\n        require(bonusPeriodSec_ > 0, 'ReflectiveStake: bonus period is zero');\r\n        require(initialSharesPerToken > 0, 'ReflectiveStake: initialSharesPerToken is zero');\r\n\r\n        _stakingPool = new TokenPool(stakingToken);\r\n        _unlockedPool = new TokenPool(distributionToken);\r\n        _reflectiveTreasury = reflectiveTreasury;\r\n        require(_unlockedPool.token() == _reflectiveTreasury.token(), 'ReflectiveStake: distribution token does not match treasury token');\r\n        startBonus = startBonus_;\r\n        bonusPeriodSec = bonusPeriodSec_;\r\n        _initialSharesPerToken = initialSharesPerToken;\r\n        lockupSec = lockupSec_;\r\n    }\r\n\r\n    function getStakingToken() public view returns (IERC20) {\r\n        return _stakingPool.token();\r\n    }\r\n\r\n    function getDistributionToken() external view returns (IERC20) {\r\n        return _unlockedPool.token();\r\n    }\r\n\r\n    function stake(uint256 amount) external nonReentrant {\r\n        require(amount > 0, 'ReflectiveStake: stake amount is zero');\r\n        require(totalStakingShares == 0 || totalStaked() > 0,\r\n                'ReflectiveStake: Invalid state. Staking shares exist, but no staking tokens do');\r\n\r\n        // Get Actual Amount here minus TX fee\r\n        uint256 transferAmount = _applyFee(amount);\r\n\r\n        uint256 mintedStakingShares = (totalStakingShares > 0)\r\n            ? totalStakingShares.mul(transferAmount).div(totalStaked())\r\n            : transferAmount.mul(_initialSharesPerToken);\r\n        require(mintedStakingShares > 0, 'ReflectiveStake: Stake amount is too small');\r\n\r\n        updateAccounting();\r\n\r\n        // 1. User Accounting\r\n        UserTotals storage totals = _userTotals[msg.sender];\r\n        totals.stakingShares = totals.stakingShares.add(mintedStakingShares);\r\n        totals.lastAccountingTimestampSec = block.timestamp;\r\n\r\n        Stake memory newStake = Stake(mintedStakingShares, block.timestamp);\r\n        _userStakes[msg.sender].push(newStake);\r\n\r\n        // 2. Global Accounting\r\n        totalStakingShares = totalStakingShares.add(mintedStakingShares);\r\n\r\n        // interactions\r\n        require(_stakingPool.token().transferFrom(msg.sender, address(_stakingPool), amount),\r\n            'ReflectiveStake: transfer into staking pool failed');\r\n\r\n        emit Staked(msg.sender, transferAmount, totalStakedFor(msg.sender), \"\");\r\n    }\r\n\r\n    /**\r\n     * @notice Applies token fee.  Override for tokens other than ELE.\r\n     */\r\n    function _applyFee(uint256 amount) internal pure virtual returns (uint256) {\r\n        uint256 tFeeHalf = amount.div(200);\r\n        uint256 tFee = tFeeHalf.mul(2);\r\n        uint256 tTransferAmount = amount.sub(tFee); \r\n        return tTransferAmount;\r\n    }\r\n\r\n    function unstake(uint256 amount) external nonReentrant returns (uint256) {\r\n        updateAccounting();\r\n        return _unstake(amount);\r\n    }\r\n\r\n    function unstakeMax() external nonReentrant returns (uint256) {\r\n        updateAccounting();\r\n        return _unstake(totalStakedFor(msg.sender));\r\n    }\r\n\r\n    function _unstake(uint256 amount) private returns (uint256) {\r\n        // checks\r\n        require(amount > 0, 'ReflectiveStake: unstake amount is zero');\r\n        require(totalStakedFor(msg.sender) >= amount,\r\n            'ReflectiveStake: unstake amount is greater than total user stakes');\r\n        uint256 stakingSharesToBurn = totalStakingShares.mul(amount).div(totalStaked());\r\n        require(stakingSharesToBurn > 0, 'ReflectiveStake: Unable to unstake amount this small');\r\n\r\n        // 1. User Accounting\r\n        UserTotals storage totals = _userTotals[msg.sender];\r\n        Stake[] storage accountStakes = _userStakes[msg.sender];\r\n\r\n        Stake memory mostRecentStake = accountStakes[accountStakes.length - 1];\r\n        require(block.timestamp.sub(mostRecentStake.timestampSec) > lockupSec, 'ReflectiveStake: Cannot unstake before the lockup period has expired');\r\n\r\n        // Redeem from most recent stake and go backwards in time.\r\n        uint256 stakingShareSecondsToBurn = 0;\r\n        uint256 sharesLeftToBurn = stakingSharesToBurn;\r\n        uint256 rewardAmount = 0;\r\n        while (sharesLeftToBurn > 0) {\r\n            Stake storage lastStake = accountStakes[accountStakes.length - 1];\r\n            uint256 stakeTimeSec = block.timestamp.sub(lastStake.timestampSec);\r\n            uint256 newStakingShareSecondsToBurn = 0;\r\n            if (lastStake.stakingShares <= sharesLeftToBurn) {\r\n                // fully redeem a past stake\r\n                newStakingShareSecondsToBurn = lastStake.stakingShares.mul(stakeTimeSec);\r\n                rewardAmount = computeNewReward(rewardAmount, newStakingShareSecondsToBurn, stakeTimeSec);\r\n                stakingShareSecondsToBurn = stakingShareSecondsToBurn.add(newStakingShareSecondsToBurn);\r\n                sharesLeftToBurn = sharesLeftToBurn.sub(lastStake.stakingShares);\r\n                accountStakes.pop();\r\n            } else {\r\n                // partially redeem a past stake\r\n                newStakingShareSecondsToBurn = sharesLeftToBurn.mul(stakeTimeSec);\r\n                rewardAmount = computeNewReward(rewardAmount, newStakingShareSecondsToBurn, stakeTimeSec);\r\n                stakingShareSecondsToBurn = stakingShareSecondsToBurn.add(newStakingShareSecondsToBurn);\r\n                lastStake.stakingShares = lastStake.stakingShares.sub(sharesLeftToBurn);\r\n                sharesLeftToBurn = 0;\r\n            }\r\n        }\r\n        totals.stakingShareSeconds = totals.stakingShareSeconds.sub(stakingShareSecondsToBurn);\r\n        totals.stakingShares = totals.stakingShares.sub(stakingSharesToBurn);\r\n\r\n        // 2. Global Accounting\r\n        totalStakingShareSeconds = totalStakingShareSeconds.sub(stakingShareSecondsToBurn);\r\n        totalStakingShares = totalStakingShares.sub(stakingSharesToBurn);\r\n\r\n        // interactions\r\n        require(_stakingPool.transfer(msg.sender, amount),\r\n            'ReflectiveStake: transfer out of staking pool failed');\r\n\r\n        if (rewardAmount > 0) {\r\n            require(_unlockedPool.transfer(msg.sender, rewardAmount),\r\n                'ReflectiveStake: transfer out of unlocked pool failed');\r\n        }\r\n\r\n\r\n        emit Unstaked(msg.sender, amount, totalStakedFor(msg.sender), \"\");\r\n        emit TokensClaimed(msg.sender, rewardAmount);\r\n\r\n        require(totalStakingShares == 0 || totalStaked() > 0,\r\n                \"ReflectiveStake: Error unstaking. Staking shares exist, but no staking tokens do\");\r\n        return rewardAmount;\r\n    }\r\n\r\n    function computeNewReward(uint256 currentRewardTokens,\r\n                                uint256 stakingShareSeconds,\r\n                                uint256 stakeTimeSec) private view returns (uint256) {\r\n\r\n        uint256 newRewardTokens =\r\n            totalUnlocked()\r\n            .mul(stakingShareSeconds)\r\n            .div(totalStakingShareSeconds);\r\n\r\n        if (stakeTimeSec >= bonusPeriodSec) {\r\n            return currentRewardTokens.add(newRewardTokens);\r\n        }\r\n\r\n        uint256 oneHundredPct = 10**BONUS_DECIMALS;\r\n        uint256 bonusedReward =\r\n            startBonus\r\n            .add(oneHundredPct.sub(startBonus).mul(stakeTimeSec).div(bonusPeriodSec))\r\n            .mul(newRewardTokens)\r\n            .div(oneHundredPct);\r\n        return currentRewardTokens.add(bonusedReward);\r\n    }\r\n\r\n    function getUserStakes(address addr) external view returns (Stake[] memory){\r\n        Stake[] memory userStakes = _userStakes[addr];\r\n        return userStakes;\r\n    }\r\n\r\n    function getUserTotals(address addr) external view returns (UserTotals memory) {\r\n        UserTotals memory userTotals = _userTotals[addr];\r\n        return userTotals;\r\n    }\r\n\r\n    function totalStakedFor(address addr) public view returns (uint256) {\r\n        return totalStakingShares > 0 ?\r\n            totalStaked().mul(_userTotals[addr].stakingShares).div(totalStakingShares) : 0;\r\n    }\r\n\r\n    function totalStaked() public view returns (uint256) {\r\n        return _stakingPool.balance();\r\n    }\r\n\r\n    function token() external view returns (address) {\r\n        return address(getStakingToken());\r\n    }\r\n\r\n    function treasuryTarget() external view returns (address) {\r\n        return address(_unlockedPool);\r\n    }\r\n\r\n    function updateAccounting() private returns (\r\n        uint256, uint256, uint256, uint256, uint256, uint256) {\r\n\r\n        unlockTokens();\r\n\r\n        // Global accounting\r\n        uint256 newStakingShareSeconds =\r\n            block.timestamp\r\n            .sub(lastAccountingTimestampSec)\r\n            .mul(totalStakingShares);\r\n        totalStakingShareSeconds = totalStakingShareSeconds.add(newStakingShareSeconds);\r\n        lastAccountingTimestampSec = block.timestamp;\r\n\r\n        // User Accounting\r\n        UserTotals storage totals = _userTotals[msg.sender];\r\n        uint256 newUserStakingShareSeconds =\r\n            block.timestamp\r\n            .sub(totals.lastAccountingTimestampSec)\r\n            .mul(totals.stakingShares);\r\n        totals.stakingShareSeconds =\r\n            totals.stakingShareSeconds\r\n            .add(newUserStakingShareSeconds);\r\n        totals.lastAccountingTimestampSec = block.timestamp;\r\n\r\n        uint256 totalUserRewards = (totalStakingShareSeconds > 0)\r\n            ? totalUnlocked().mul(totals.stakingShareSeconds).div(totalStakingShareSeconds)\r\n            : 0;\r\n\r\n        return (\r\n            totalPending(),\r\n            totalUnlocked(),\r\n            totals.stakingShareSeconds,\r\n            totalStakingShareSeconds,\r\n            totalUserRewards,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function isUnlocked(address account) external view returns (bool) {\r\n        if (totalStakedFor(account) == 0) return false;\r\n        Stake[] memory accountStakes = _userStakes[account];\r\n        Stake memory mostRecentStake = accountStakes[accountStakes.length - 1];\r\n        return block.timestamp.sub(mostRecentStake.timestampSec) > lockupSec;\r\n    }\r\n\r\n    function totalPending() public view returns (uint256) {\r\n        return _reflectiveTreasury.fundsAvailable();\r\n    }\r\n\r\n    function totalUnlocked() public view returns (uint256) {\r\n        return _unlockedPool.balance();\r\n    }\r\n\r\n    function totalAvailable() external view returns (uint256) {\r\n        return totalUnlocked().add(totalPending());\r\n    }\r\n\r\n    function unlockTokens() public {\r\n        if (totalPending() > 0) _reflectiveTreasury.release();\r\n    }\r\n}\r\n\r\n// File: contracts\\RFIStake.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\ncontract RFIStake is ReflectiveStake {\r\n    using SafeMath for uint256;\r\n\r\n    constructor(IERC20 stakingToken, IERC20 distributionToken, ITREASURY reflectiveTreasury,\r\n    uint256 startBonus_, uint256 bonusPeriodSec_, uint256 initialSharesPerToken, uint256 lockupSec_)\r\n    ReflectiveStake(stakingToken, distributionToken, reflectiveTreasury, startBonus_, bonusPeriodSec_, initialSharesPerToken, lockupSec_)\r\n    public {}\r\n\r\n    function _applyFee(uint256 amount) internal pure override returns (uint256) {\r\n        uint256 tFee = amount.div(100);\r\n        uint256 tTransferAmount = amount.sub(tFee);\r\n        return tTransferAmount;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"distributionToken\",\"type\":\"address\"},{\"internalType\":\"contract ITREASURY\",\"name\":\"reflectiveTreasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startBonus_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusPeriodSec_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialSharesPerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupSec_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"durationSec\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"TokensLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"TokensUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusPeriodSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDistributionToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampSec\",\"type\":\"uint256\"}],\"internalType\":\"struct ReflectiveStake.Stake[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserTotals\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingShareSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastAccountingTimestampSec\",\"type\":\"uint256\"}],\"internalType\":\"struct ReflectiveStake.UserTotals\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastAccountingTimestampSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockupSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"totalStakedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakingShareSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakingShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnlocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryTarget\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RFIStake", "CompilerVersion": "v0.6.2+commit.bacdbe57", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a1afffe3f4d611d252010e3eaf6f4d77088b0cd700000000000000000000000048be867b240d2ffaff69e0746130f2c027d8d3d200000000000000000000000039b63af6414eef6947ca5952d0d99e99f976c2320000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000076a70000000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000013c680", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b72b7a7205d3c3eef261b0a721511400df98ff5a1ea3996987c7870ab976d702"}