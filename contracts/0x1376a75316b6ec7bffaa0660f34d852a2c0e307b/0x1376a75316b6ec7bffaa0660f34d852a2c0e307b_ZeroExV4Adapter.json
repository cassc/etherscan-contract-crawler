{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/release/extensions/integration-manager/integrations/adapters/ZeroExV4Adapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {IZeroExV4} from \\\"../../../../../external-interfaces/IZeroExV4.sol\\\";\\nimport {IAddressListRegistry} from \\\"../../../../../persistent/address-list-registry/IAddressListRegistry.sol\\\";\\nimport {MathHelpers} from \\\"../../../../../utils/0.6.12/MathHelpers.sol\\\";\\nimport {IIntegrationManager} from \\\"../../IIntegrationManager.sol\\\";\\nimport {ZeroExV4ActionsMixin} from \\\"../utils/0.6.12/actions/ZeroExV4ActionsMixin.sol\\\";\\nimport {AdapterBase} from \\\"../utils/0.6.12/AdapterBase.sol\\\";\\n\\n/// @title ZeroExV4Adapter Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Adapter to 0xV4 Exchange Contract\\ncontract ZeroExV4Adapter is AdapterBase, MathHelpers, ZeroExV4ActionsMixin {\\n    enum OrderType {\\n        Limit,\\n        Rfq,\\n        Otc\\n    }\\n\\n    IAddressListRegistry private immutable ADDRESS_LIST_REGISTRY_CONTRACT;\\n    uint256 private immutable ALLOWED_MAKERS_LIST_ID;\\n\\n    /// @dev _allowedMakersListId of 0 is treated as a special case that allows any maker.\\n    constructor(\\n        address _integrationManager,\\n        address _exchange,\\n        address _addressListRegistry,\\n        uint256 _allowedMakersListId\\n    ) public AdapterBase(_integrationManager) ZeroExV4ActionsMixin(_exchange) {\\n        ADDRESS_LIST_REGISTRY_CONTRACT = IAddressListRegistry(_addressListRegistry);\\n        ALLOWED_MAKERS_LIST_ID = _allowedMakersListId;\\n    }\\n\\n    // EXTERNAL FUNCTIONS\\n\\n    /// @notice Take an order on 0x\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    /// @param _actionData Data specific to this action\\n    /// @param _assetData Parsed spend assets and incoming assets data for this action\\n    function takeOrder(address _vaultProxy, bytes calldata _actionData, bytes calldata _assetData)\\n        external\\n        postActionIncomingAssetsTransferHandler(_vaultProxy, _assetData)\\n    {\\n        (bytes memory encodedZeroExOrderArgs, uint128 takerAssetFillAmount, OrderType orderType) =\\n            __decodeTakeOrderCallArgs(_actionData);\\n\\n        if (orderType == OrderType.Limit) {\\n            (IZeroExV4.LimitOrder memory order, IZeroExV4.Signature memory signature) =\\n                __decodeZeroExLimitOrderArgs(encodedZeroExOrderArgs);\\n\\n            __zeroExV4TakeLimitOrder({_order: order, _signature: signature, _takerAssetFillAmount: takerAssetFillAmount});\\n        } else if (orderType == OrderType.Rfq) {\\n            (IZeroExV4.RfqOrder memory order, IZeroExV4.Signature memory signature) =\\n                __decodeZeroExRfqOrderArgs(encodedZeroExOrderArgs);\\n            __zeroExV4TakeRfqOrder({_order: order, _signature: signature, _takerAssetFillAmount: takerAssetFillAmount});\\n        } else if (orderType == OrderType.Otc) {\\n            (IZeroExV4.OtcOrder memory order, IZeroExV4.Signature memory signature) =\\n                __decodeZeroExOtcOrderArgs(encodedZeroExOrderArgs);\\n            __zeroExV4TakeOtcOrder({_order: order, _signature: signature, _takerAssetFillAmount: takerAssetFillAmount});\\n        }\\n    }\\n\\n    /////////////////////////////\\n    // PARSE ASSETS FOR METHOD //\\n    /////////////////////////////\\n\\n    /// @notice Parses the expected assets in a particular action\\n    /// @param _selector The function selector for the callOnIntegration\\n    /// @param _actionData Data specific to this action\\n    /// @return spendAssetsHandleType_ A type that dictates how to handle granting\\n    /// the adapter access to spend assets (`None` by default)\\n    /// @return spendAssets_ The assets to spend in the call\\n    /// @return spendAssetAmounts_ The max asset amounts to spend in the call\\n    /// @return incomingAssets_ The assets to receive in the call\\n    /// @return minIncomingAssetAmounts_ The min asset amounts to receive in the call\\n    function parseAssetsForAction(address, bytes4 _selector, bytes calldata _actionData)\\n        external\\n        view\\n        override\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        require(_selector == TAKE_ORDER_SELECTOR, \\\"parseAssetsForAction: _selector invalid\\\");\\n\\n        (bytes memory encodedZeroExOrderArgs, uint256 takerAssetFillAmount, OrderType orderType) =\\n            __decodeTakeOrderCallArgs(_actionData);\\n\\n        incomingAssets_ = new address[](1);\\n        minIncomingAssetAmounts_ = new uint256[](1);\\n        spendAssets_ = new address[](1);\\n        spendAssetAmounts_ = new uint256[](1);\\n\\n        address maker;\\n        uint256 makerAmount;\\n        uint256 takerAmount;\\n        uint256 takerTokenFeeAmount;\\n\\n        if (orderType == OrderType.Limit) {\\n            (IZeroExV4.LimitOrder memory order,) = __decodeZeroExLimitOrderArgs(encodedZeroExOrderArgs);\\n\\n            maker = order.maker;\\n            makerAmount = order.makerAmount;\\n            incomingAssets_[0] = order.makerToken;\\n            spendAssets_[0] = order.takerToken;\\n            takerAmount = order.takerAmount;\\n            takerTokenFeeAmount = order.takerTokenFeeAmount;\\n        } else if (orderType == OrderType.Rfq) {\\n            (IZeroExV4.RfqOrder memory order,) = __decodeZeroExRfqOrderArgs(encodedZeroExOrderArgs);\\n            maker = order.maker;\\n            makerAmount = order.makerAmount;\\n            incomingAssets_[0] = order.makerToken;\\n            spendAssets_[0] = order.takerToken;\\n            takerAmount = order.takerAmount;\\n        } else if (orderType == OrderType.Otc) {\\n            (IZeroExV4.OtcOrder memory order,) = __decodeZeroExOtcOrderArgs(encodedZeroExOrderArgs);\\n            maker = order.maker;\\n            makerAmount = order.makerAmount;\\n            incomingAssets_[0] = order.makerToken;\\n            spendAssets_[0] = order.takerToken;\\n            takerAmount = order.takerAmount;\\n        }\\n\\n        require(isAllowedMaker(maker), \\\"parseAssetsForAction: Order maker is not allowed\\\");\\n\\n        if (takerTokenFeeAmount > 0) {\\n            // Fee is always in takerToken\\n            // Fee calculated relative to taker fill amount\\n            spendAssetAmounts_[0] = takerAssetFillAmount.add(\\n                __calcRelativeQuantity({\\n                    _quantity1: takerAmount,\\n                    _quantity2: takerTokenFeeAmount,\\n                    _relativeQuantity1: takerAssetFillAmount\\n                })\\n            );\\n        } else {\\n            spendAssetAmounts_[0] = takerAssetFillAmount;\\n        }\\n\\n        minIncomingAssetAmounts_[0] = __calcRelativeQuantity({\\n            _quantity1: takerAmount,\\n            _quantity2: makerAmount,\\n            _relativeQuantity1: takerAssetFillAmount\\n        });\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.Transfer,\\n            spendAssets_,\\n            spendAssetAmounts_,\\n            incomingAssets_,\\n            minIncomingAssetAmounts_\\n        );\\n    }\\n\\n    // PRIVATE FUNCTIONS\\n\\n    /// @dev Decode the parameters of a takeOrder call\\n    /// @param _actionData Encoded parameters passed from client side\\n    /// @return encodedZeroExOrderArgs_ Encoded args of the 0x order\\n    /// @return takerAssetFillAmount_ Amount of taker asset to fill\\n    function __decodeTakeOrderCallArgs(bytes memory _actionData)\\n        private\\n        pure\\n        returns (bytes memory encodedZeroExOrderArgs_, uint128 takerAssetFillAmount_, OrderType orderType)\\n    {\\n        return abi.decode(_actionData, (bytes, uint128, OrderType));\\n    }\\n\\n    /// @dev Decode the parameters of a 0x limit order\\n    function __decodeZeroExLimitOrderArgs(bytes memory _encodedZeroExOrderArgs)\\n        private\\n        pure\\n        returns (IZeroExV4.LimitOrder memory order_, IZeroExV4.Signature memory signature_)\\n    {\\n        return abi.decode(_encodedZeroExOrderArgs, (IZeroExV4.LimitOrder, IZeroExV4.Signature));\\n    }\\n\\n    /// @dev Decode the parameters of a 0x rfq order\\n    function __decodeZeroExRfqOrderArgs(bytes memory _encodedZeroExOrderArgs)\\n        private\\n        pure\\n        returns (IZeroExV4.RfqOrder memory order_, IZeroExV4.Signature memory signature_)\\n    {\\n        return abi.decode(_encodedZeroExOrderArgs, (IZeroExV4.RfqOrder, IZeroExV4.Signature));\\n    }\\n\\n    /// @dev Decode the parameters of a 0x otc order\\n    function __decodeZeroExOtcOrderArgs(bytes memory _encodedZeroExOrderArgs)\\n        private\\n        pure\\n        returns (IZeroExV4.OtcOrder memory order_, IZeroExV4.Signature memory signature_)\\n    {\\n        return abi.decode(_encodedZeroExOrderArgs, (IZeroExV4.OtcOrder, IZeroExV4.Signature));\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Checks whether an account is an allowed maker of 0x orders\\n    /// @param _who The account to check\\n    /// @return isAllowedMaker_ True if _who is an allowed maker\\n    function isAllowedMaker(address _who) public view returns (bool isAllowedMaker_) {\\n        return ALLOWED_MAKERS_LIST_ID == 0 || ADDRESS_LIST_REGISTRY_CONTRACT.isInList(ALLOWED_MAKERS_LIST_ID, _who);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/external-interfaces/IZeroExV4.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\n/// @title IZeroExV4 Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IZeroExV4 {\\n    enum SignatureType {\\n        ILLEGAL,\\n        INVALID,\\n        EIP712,\\n        ETHSIGN,\\n        PRESIGNED\\n    }\\n\\n    struct LimitOrder {\\n        address makerToken;\\n        address takerToken;\\n        uint128 makerAmount;\\n        uint128 takerAmount;\\n        uint128 takerTokenFeeAmount;\\n        address maker;\\n        address taker;\\n        address sender;\\n        address feeRecipient;\\n        bytes32 pool;\\n        uint64 expiry;\\n        uint256 salt;\\n    }\\n\\n    struct RfqOrder {\\n        address makerToken;\\n        address takerToken;\\n        uint128 makerAmount;\\n        uint128 takerAmount;\\n        address maker;\\n        address taker;\\n        address txOrigin;\\n        bytes32 pool;\\n        uint64 expiry;\\n        uint256 salt;\\n    }\\n\\n    struct OtcOrder {\\n        address makerToken;\\n        address takerToken;\\n        uint128 makerAmount;\\n        uint128 takerAmount;\\n        address maker;\\n        address taker;\\n        address txOrigin;\\n        uint256 expiryAndNonce;\\n    }\\n\\n    struct Signature {\\n        SignatureType signatureType;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    function fillOrKillLimitOrder(LimitOrder memory _order, Signature memory _signature, uint128 _takerTokenFillAmount)\\n        external\\n        payable\\n        returns (uint128 makerTokenFilledAmount_);\\n\\n    function fillOrKillRfqOrder(RfqOrder memory _order, Signature memory _signature, uint128 _takerTokenFillAmount)\\n        external\\n        returns (uint128 makerTokenFilledAmount_);\\n\\n    function fillOtcOrder(OtcOrder memory _order, Signature memory _signature, uint128 _takerTokenFillAmount)\\n        external\\n        returns (uint128 takerTokenFilledAmount_, uint128 makerTokenFilledAmount_);\\n}\\n\"\r\n    },\r\n    \"contracts/persistent/address-list-registry/IAddressListRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\n/// @title IAddressListRegistry Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IAddressListRegistry {\\n    enum UpdateType {\\n        None,\\n        AddOnly,\\n        RemoveOnly,\\n        AddAndRemove\\n    }\\n\\n    /////////////////////\\n    // LIST MANAGEMENT //\\n    /////////////////////\\n\\n    function addToList(uint256 _id, address[] calldata _items) external;\\n\\n    function attestLists(uint256[] calldata _ids, string[] calldata _descriptions) external;\\n\\n    function createList(address _owner, UpdateType _updateType, address[] calldata _initialItems)\\n        external\\n        returns (uint256 id_);\\n\\n    function removeFromList(uint256 _id, address[] calldata _items) external;\\n\\n    function setListOwner(uint256 _id, address _nextOwner) external;\\n\\n    function setListUpdateType(uint256 _id, UpdateType _nextUpdateType) external;\\n\\n    /////////////////\\n    // LIST SEARCH //\\n    /////////////////\\n\\n    function areAllInAllLists(uint256[] memory _ids, address[] memory _items)\\n        external\\n        view\\n        returns (bool areAllInAllLists_);\\n\\n    function areAllInList(uint256 _id, address[] memory _items) external view returns (bool areAllInList_);\\n\\n    function areAllInSomeOfLists(uint256[] memory _ids, address[] memory _items)\\n        external\\n        view\\n        returns (bool areAllInSomeOfLists_);\\n\\n    function areAllNotInAnyOfLists(uint256[] memory _ids, address[] memory _items)\\n        external\\n        view\\n        returns (bool areAllNotInAnyOfLists_);\\n\\n    function areAllNotInList(uint256 _id, address[] memory _items) external view returns (bool areAllNotInList_);\\n\\n    function isInAllLists(uint256[] memory _ids, address _item) external view returns (bool isInAllLists_);\\n\\n    function isInList(uint256 _id, address _item) external view returns (bool isInList_);\\n\\n    function isInSomeOfLists(uint256[] memory _ids, address _item) external view returns (bool isInSomeOfLists_);\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    function getListCount() external view returns (uint256 count_);\\n\\n    function getListOwner(uint256 _id) external view returns (address owner_);\\n\\n    function getListUpdateType(uint256 _id) external view returns (UpdateType updateType_);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/0.6.12/MathHelpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport {SafeMath} from \\\"openzeppelin-solc-0.6/math/SafeMath.sol\\\";\\n\\n/// @title MathHelpers Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Helper functions for common math operations\\nabstract contract MathHelpers {\\n    using SafeMath for uint256;\\n\\n    /// @dev Calculates a proportional value relative to a known ratio.\\n    /// Caller is responsible as-necessary for:\\n    /// 1. validating _quantity1 to be non-zero\\n    /// 2. validating relativeQuantity2_ to be non-zero\\n    function __calcRelativeQuantity(uint256 _quantity1, uint256 _quantity2, uint256 _relativeQuantity1)\\n        internal\\n        pure\\n        returns (uint256 relativeQuantity2_)\\n    {\\n        return _relativeQuantity1.mul(_quantity2).div(_quantity1);\\n    }\\n\\n    /// @dev Helper to subtract uint amounts, but returning zero on underflow instead of reverting\\n    function __subOrZero(uint256 _amountA, uint256 _amountB) internal pure returns (uint256 res_) {\\n        if (_amountA > _amountB) {\\n            return _amountA - _amountB;\\n        }\\n\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/release/extensions/integration-manager/IIntegrationManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/// @title IIntegrationManager interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for the IntegrationManager\\ninterface IIntegrationManager {\\n    enum SpendAssetsHandleType {\\n        None,\\n        Approve,\\n        Transfer\\n    }\\n\\n    function getPolicyManager() external view returns (address policyManager_);\\n}\\n\"\r\n    },\r\n    \"contracts/release/extensions/integration-manager/integrations/utils/0.6.12/actions/ZeroExV4ActionsMixin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {IZeroExV4} from \\\"../../../../../../../external-interfaces/IZeroExV4.sol\\\";\\nimport {AssetHelpers} from \\\"../../../../../../../utils/0.6.12/AssetHelpers.sol\\\";\\n\\n/// @title ZeroExV4ActionsMixin Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Mixin contract for interacting with the ZeroExV4 exchange functions\\nabstract contract ZeroExV4ActionsMixin is AssetHelpers {\\n    address internal immutable ZERO_EX_V4_EXCHANGE;\\n\\n    constructor(address _exchange) public {\\n        ZERO_EX_V4_EXCHANGE = _exchange;\\n    }\\n\\n    /// @dev Helper to execute fillLimitOrder\\n    function __zeroExV4TakeLimitOrder(\\n        IZeroExV4.LimitOrder memory _order,\\n        IZeroExV4.Signature memory _signature,\\n        uint128 _takerAssetFillAmount\\n    ) internal {\\n        // Approve spend assets as needed\\n        __approveAssetMaxAsNeeded({\\n            _asset: _order.takerToken,\\n            _target: ZERO_EX_V4_EXCHANGE,\\n            _neededAmount: uint256(_takerAssetFillAmount).add(_order.takerTokenFeeAmount)\\n        });\\n\\n        // Execute order\\n        IZeroExV4(ZERO_EX_V4_EXCHANGE).fillOrKillLimitOrder({\\n            _order: _order,\\n            _signature: _signature,\\n            _takerTokenFillAmount: _takerAssetFillAmount\\n        });\\n    }\\n\\n    /// @dev Helper to execute fillRfqOrder\\n    function __zeroExV4TakeRfqOrder(\\n        IZeroExV4.RfqOrder memory _order,\\n        IZeroExV4.Signature memory _signature,\\n        uint128 _takerAssetFillAmount\\n    ) internal {\\n        // Approve spend assets as needed\\n        __approveAssetMaxAsNeeded({\\n            _asset: _order.takerToken,\\n            _target: ZERO_EX_V4_EXCHANGE,\\n            _neededAmount: _takerAssetFillAmount\\n        });\\n\\n        // Execute order\\n        IZeroExV4(ZERO_EX_V4_EXCHANGE).fillOrKillRfqOrder({\\n            _order: _order,\\n            _signature: _signature,\\n            _takerTokenFillAmount: _takerAssetFillAmount\\n        });\\n    }\\n\\n    /// @dev Helper to execute fillOtcOrder\\n    function __zeroExV4TakeOtcOrder(\\n        IZeroExV4.OtcOrder memory _order,\\n        IZeroExV4.Signature memory _signature,\\n        uint128 _takerAssetFillAmount\\n    ) internal {\\n        // Approve spend assets as needed\\n        __approveAssetMaxAsNeeded({\\n            _asset: _order.takerToken,\\n            _target: ZERO_EX_V4_EXCHANGE,\\n            _neededAmount: _takerAssetFillAmount\\n        });\\n\\n        // Execute order\\n        (uint128 takerTokenFilledAmount,) = IZeroExV4(ZERO_EX_V4_EXCHANGE).fillOtcOrder({\\n            _order: _order,\\n            _signature: _signature,\\n            _takerTokenFillAmount: _takerAssetFillAmount\\n        });\\n\\n        // Must have filled exactly the amount requested (replicates the fillAndKill behavior of the other order types)\\n        require(\\n            takerTokenFilledAmount == _takerAssetFillAmount, \\\"__zeroExV4TakeOtcOrder: insufficient taker asset filled\\\"\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/release/extensions/integration-manager/integrations/utils/0.6.12/AdapterBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport {ERC20} from \\\"openzeppelin-solc-0.6/token/ERC20/ERC20.sol\\\";\\nimport {SafeERC20} from \\\"openzeppelin-solc-0.6/token/ERC20/SafeERC20.sol\\\";\\nimport {AssetHelpers} from \\\"../../../../../../utils/0.6.12/AssetHelpers.sol\\\";\\nimport {IIntegrationAdapter} from \\\"../../../IIntegrationAdapter.sol\\\";\\nimport {IntegrationSelectors} from \\\"./../IntegrationSelectors.sol\\\";\\n\\n/// @title AdapterBase Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A base contract for integration adapters\\nabstract contract AdapterBase is IIntegrationAdapter, IntegrationSelectors, AssetHelpers {\\n    using SafeERC20 for ERC20;\\n\\n    address internal immutable INTEGRATION_MANAGER;\\n\\n    /// @dev Provides a standard implementation for transferring incoming assets\\n    /// from an adapter to a VaultProxy at the end of an adapter action\\n    modifier postActionIncomingAssetsTransferHandler(address _vaultProxy, bytes memory _assetData) {\\n        _;\\n\\n        (,, address[] memory incomingAssets) = __decodeAssetData(_assetData);\\n\\n        __pushFullAssetBalances(_vaultProxy, incomingAssets);\\n    }\\n\\n    /// @dev Provides a standard implementation for transferring unspent spend assets\\n    /// from an adapter to a VaultProxy at the end of an adapter action\\n    modifier postActionSpendAssetsTransferHandler(address _vaultProxy, bytes memory _assetData) {\\n        _;\\n\\n        (address[] memory spendAssets,,) = __decodeAssetData(_assetData);\\n\\n        __pushFullAssetBalances(_vaultProxy, spendAssets);\\n    }\\n\\n    modifier onlyIntegrationManager() {\\n        require(msg.sender == INTEGRATION_MANAGER, \\\"Only the IntegrationManager can call this function\\\");\\n        _;\\n    }\\n\\n    constructor(address _integrationManager) public {\\n        INTEGRATION_MANAGER = _integrationManager;\\n    }\\n\\n    // INTERNAL FUNCTIONS\\n\\n    /// @dev Helper to decode the _assetData param passed to adapter call\\n    function __decodeAssetData(bytes memory _assetData)\\n        internal\\n        pure\\n        returns (address[] memory spendAssets_, uint256[] memory spendAssetAmounts_, address[] memory incomingAssets_)\\n    {\\n        return abi.decode(_assetData, (address[], uint256[], address[]));\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `INTEGRATION_MANAGER` variable\\n    /// @return integrationManager_ The `INTEGRATION_MANAGER` variable value\\n    function getIntegrationManager() external view returns (address integrationManager_) {\\n        return INTEGRATION_MANAGER;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-solc-0.6/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/0.6.12/AssetHelpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport {SafeMath} from \\\"openzeppelin-solc-0.6/math/SafeMath.sol\\\";\\nimport {ERC20} from \\\"openzeppelin-solc-0.6/token/ERC20/ERC20.sol\\\";\\nimport {SafeERC20} from \\\"openzeppelin-solc-0.6/token/ERC20/SafeERC20.sol\\\";\\n\\n/// @title AssetHelpers Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A util contract for common token actions\\nabstract contract AssetHelpers {\\n    using SafeERC20 for ERC20;\\n    using SafeMath for uint256;\\n\\n    /// @dev Helper to aggregate amounts of the same assets\\n    function __aggregateAssetAmounts(address[] memory _rawAssets, uint256[] memory _rawAmounts)\\n        internal\\n        pure\\n        returns (address[] memory aggregatedAssets_, uint256[] memory aggregatedAmounts_)\\n    {\\n        if (_rawAssets.length == 0) {\\n            return (aggregatedAssets_, aggregatedAmounts_);\\n        }\\n\\n        uint256 aggregatedAssetCount = 1;\\n        for (uint256 i = 1; i < _rawAssets.length; i++) {\\n            bool contains;\\n            for (uint256 j; j < i; j++) {\\n                if (_rawAssets[i] == _rawAssets[j]) {\\n                    contains = true;\\n                    break;\\n                }\\n            }\\n            if (!contains) {\\n                aggregatedAssetCount++;\\n            }\\n        }\\n\\n        aggregatedAssets_ = new address[](aggregatedAssetCount);\\n        aggregatedAmounts_ = new uint256[](aggregatedAssetCount);\\n        uint256 aggregatedAssetIndex;\\n        for (uint256 i; i < _rawAssets.length; i++) {\\n            bool contains;\\n            for (uint256 j; j < aggregatedAssetIndex; j++) {\\n                if (_rawAssets[i] == aggregatedAssets_[j]) {\\n                    contains = true;\\n\\n                    aggregatedAmounts_[j] += _rawAmounts[i];\\n\\n                    break;\\n                }\\n            }\\n            if (!contains) {\\n                aggregatedAssets_[aggregatedAssetIndex] = _rawAssets[i];\\n                aggregatedAmounts_[aggregatedAssetIndex] = _rawAmounts[i];\\n                aggregatedAssetIndex++;\\n            }\\n        }\\n\\n        return (aggregatedAssets_, aggregatedAmounts_);\\n    }\\n\\n    /// @dev Helper to approve a target account with the max amount of an asset.\\n    /// This is helpful for fully trusted contracts, such as adapters that\\n    /// interact with external protocol like Uniswap, Compound, etc.\\n    function __approveAssetMaxAsNeeded(address _asset, address _target, uint256 _neededAmount) internal {\\n        uint256 allowance = ERC20(_asset).allowance(address(this), _target);\\n        if (allowance < _neededAmount) {\\n            if (allowance > 0) {\\n                ERC20(_asset).safeApprove(_target, 0);\\n            }\\n            ERC20(_asset).safeApprove(_target, type(uint256).max);\\n        }\\n    }\\n\\n    /// @dev Helper to transfer full asset balance from the current contract to a target\\n    function __pushFullAssetBalance(address _target, address _asset) internal returns (uint256 amountTransferred_) {\\n        amountTransferred_ = ERC20(_asset).balanceOf(address(this));\\n        if (amountTransferred_ > 0) {\\n            ERC20(_asset).safeTransfer(_target, amountTransferred_);\\n        }\\n\\n        return amountTransferred_;\\n    }\\n\\n    /// @dev Helper to transfer full asset balances from the current contract to a target\\n    function __pushFullAssetBalances(address _target, address[] memory _assets)\\n        internal\\n        returns (uint256[] memory amountsTransferred_)\\n    {\\n        amountsTransferred_ = new uint256[](_assets.length);\\n        for (uint256 i; i < _assets.length; i++) {\\n            ERC20 assetContract = ERC20(_assets[i]);\\n            amountsTransferred_[i] = assetContract.balanceOf(address(this));\\n            if (amountsTransferred_[i] > 0) {\\n                assetContract.safeTransfer(_target, amountsTransferred_[i]);\\n            }\\n        }\\n\\n        return amountsTransferred_;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-solc-0.6/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-solc-0.6/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/release/extensions/integration-manager/IIntegrationAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\nimport {IIntegrationManager} from \\\"./IIntegrationManager.sol\\\";\\n\\n/// @title Integration Adapter interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for all integration adapters\\ninterface IIntegrationAdapter {\\n    function parseAssetsForAction(address _vaultProxy, bytes4 _selector, bytes calldata _encodedCallArgs)\\n        external\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/release/extensions/integration-manager/integrations/utils/IntegrationSelectors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/// @title IntegrationSelectors Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Selectors for integration actions\\n/// @dev Selectors are created from their signatures rather than hardcoded for easy verification\\nabstract contract IntegrationSelectors {\\n    // Trading\\n    bytes4 public constant TAKE_MULTIPLE_ORDERS_SELECTOR = bytes4(keccak256(\\\"takeMultipleOrders(address,bytes,bytes)\\\"));\\n    bytes4 public constant TAKE_ORDER_SELECTOR = bytes4(keccak256(\\\"takeOrder(address,bytes,bytes)\\\"));\\n\\n    // Lending\\n    bytes4 public constant LEND_SELECTOR = bytes4(keccak256(\\\"lend(address,bytes,bytes)\\\"));\\n    bytes4 public constant REDEEM_SELECTOR = bytes4(keccak256(\\\"redeem(address,bytes,bytes)\\\"));\\n\\n    // Staking\\n    bytes4 public constant STAKE_SELECTOR = bytes4(keccak256(\\\"stake(address,bytes,bytes)\\\"));\\n    bytes4 public constant UNSTAKE_SELECTOR = bytes4(keccak256(\\\"unstake(address,bytes,bytes)\\\"));\\n\\n    // Rewards\\n    bytes4 public constant CLAIM_REWARDS_SELECTOR = bytes4(keccak256(\\\"claimRewards(address,bytes,bytes)\\\"));\\n\\n    // Combined\\n    bytes4 public constant LEND_AND_STAKE_SELECTOR = bytes4(keccak256(\\\"lendAndStake(address,bytes,bytes)\\\"));\\n    bytes4 public constant UNSTAKE_AND_REDEEM_SELECTOR = bytes4(keccak256(\\\"unstakeAndRedeem(address,bytes,bytes)\\\"));\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-solc-0.6/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-solc-0.6/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-solc-0.6/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-solc-0.6/contracts/\",\r\n      \"@uniswap/v3-core/=lib/uniswap-v3-core/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-solc-0.6/=lib/openzeppelin-solc-0.6/contracts/\",\r\n      \"openzeppelin-solc-0.7/=lib/openzeppelin-solc-0.7/contracts/\",\r\n      \"openzeppelin-solc-0.8/=lib/openzeppelin-solc-0.8/contracts/\",\r\n      \"uniswap-v3-core/=lib/uniswap-v3-core/\",\r\n      \"uniswap-v3-core-0.8/=lib/uniswap-v3-core-0.8/\",\r\n      \"uniswap-v3-periphery/=lib/uniswap-v3-periphery/contracts/\",\r\n      \"uniswap-v3-periphery-0.8/=lib/uniswap-v3-periphery-0.8/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yul\": false\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_integrationManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressListRegistry\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allowedMakersListId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CLAIM_REWARDS_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEND_AND_STAKE_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEND_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDEEM_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TAKE_MULTIPLE_ORDERS_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TAKE_ORDER_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE_AND_REDEEM_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIntegrationManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"integrationManager_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"isAllowedMaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAllowedMaker_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_selector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"}],\"name\":\"parseAssetsForAction\",\"outputs\":[{\"internalType\":\"enum IIntegrationManager.SpendAssetsHandleType\",\"name\":\"spendAssetsHandleType_\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"spendAssets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"spendAssetAmounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"incomingAssets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minIncomingAssetAmounts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_assetData\",\"type\":\"bytes\"}],\"name\":\"takeOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ZeroExV4Adapter", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000031329024f1a3e4a4b3336e0b1dfa74cc3fec633e000000000000000000000000def1c0ded9bec7f1a1670819833240f027b25eff0000000000000000000000004eb4c7babfb5d54ab4857265b482fb6512d22dff00000000000000000000000000000000000000000000000000000000000001e7", "EVMVersion": "istanbul", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}