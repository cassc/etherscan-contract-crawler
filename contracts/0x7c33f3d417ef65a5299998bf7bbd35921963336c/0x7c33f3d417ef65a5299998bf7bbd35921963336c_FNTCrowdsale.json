{"SourceCode": "/*************************************************************************\r\n * This contract has been merged with solidify\r\n * https://github.com/tiesnetwork/solidify\r\n *************************************************************************/\r\n \r\n pragma solidity ^0.4.18;\r\n\r\n\r\n/*************************************************************************\r\n * import \"zeppelin-solidity/contracts/token/TokenTimelock.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n/*************************************************************************\r\n * import \"./ERC20Basic.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n/*************************************************************************\r\n * import \"./ERC20Basic.sol\" : end\r\n *************************************************************************/\r\n/*************************************************************************\r\n * import \"../token/SafeERC20.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n/*************************************************************************\r\n * import \"./ERC20.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n/*************************************************************************\r\n * import \"./ERC20.sol\" : end\r\n *************************************************************************/\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n/*************************************************************************\r\n * import \"../token/SafeERC20.sol\" : end\r\n *************************************************************************/\r\n\r\n/**\r\n * @title TokenTimelock\r\n * @dev TokenTimelock is a token holder contract that will allow a\r\n * beneficiary to extract the tokens after a given release time\r\n */\r\ncontract TokenTimelock {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  // ERC20 basic token contract being held\r\n  ERC20Basic public token;\r\n\r\n  // beneficiary of tokens after they are released\r\n  address public beneficiary;\r\n\r\n  // timestamp when token release is enabled\r\n  uint256 public releaseTime;\r\n\r\n  function TokenTimelock(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\r\n    require(_releaseTime > now);\r\n    token = _token;\r\n    beneficiary = _beneficiary;\r\n    releaseTime = _releaseTime;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers tokens held by timelock to beneficiary.\r\n   */\r\n  function release() public {\r\n    require(now >= releaseTime);\r\n\r\n    uint256 amount = token.balanceOf(this);\r\n    require(amount > 0);\r\n\r\n    token.safeTransfer(beneficiary, amount);\r\n  }\r\n}\r\n/*************************************************************************\r\n * import \"zeppelin-solidity/contracts/token/TokenTimelock.sol\" : end\r\n *************************************************************************/\r\n/*************************************************************************\r\n * import \"./FNTRefundableCrowdsale.sol\" : start\r\n *************************************************************************/\r\n\r\n/*************************************************************************\r\n * import \"zeppelin-solidity/contracts/crowdsale/RefundableCrowdsale.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n/*************************************************************************\r\n * import \"../math/SafeMath.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n/*************************************************************************\r\n * import \"../math/SafeMath.sol\" : end\r\n *************************************************************************/\r\n/*************************************************************************\r\n * import \"./FinalizableCrowdsale.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n/*************************************************************************\r\n * import \"../ownership/Ownable.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n/*************************************************************************\r\n * import \"../ownership/Ownable.sol\" : end\r\n *************************************************************************/\r\n/*************************************************************************\r\n * import \"./Crowdsale.sol\" : start\r\n *************************************************************************/\r\n\r\n/*************************************************************************\r\n * import \"../token/MintableToken.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n/*************************************************************************\r\n * import \"./StandardToken.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n/*************************************************************************\r\n * import \"./BasicToken.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n/*************************************************************************\r\n * import \"./BasicToken.sol\" : end\r\n *************************************************************************/\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n/*************************************************************************\r\n * import \"./StandardToken.sol\" : end\r\n *************************************************************************/\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n/*************************************************************************\r\n * import \"../token/MintableToken.sol\" : end\r\n *************************************************************************/\r\n\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  MintableToken public token;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public rate;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\r\n  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\r\n    require(_startTime >= now);\r\n    require(_endTime >= _startTime);\r\n    require(_rate > 0);\r\n    require(_wallet != address(0));\r\n\r\n    token = createTokenContract();\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n  }\r\n\r\n  // creates the token to be sold.\r\n  // override this method to have crowdsale of a specific mintable token.\r\n  function createTokenContract() internal returns (MintableToken) {\r\n    return new MintableToken();\r\n  }\r\n\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != address(0));\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = weiAmount.mul(rate);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    token.mint(beneficiary, tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n    forwardFunds();\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal view returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public view returns (bool) {\r\n    return now > endTime;\r\n  }\r\n\r\n\r\n}\r\n/*************************************************************************\r\n * import \"./Crowdsale.sol\" : end\r\n *************************************************************************/\r\n\r\n/**\r\n * @title FinalizableCrowdsale\r\n * @dev Extension of Crowdsale where an owner can do extra work\r\n * after finishing.\r\n */\r\ncontract FinalizableCrowdsale is Crowdsale, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  bool public isFinalized = false;\r\n\r\n  event Finalized();\r\n\r\n  /**\r\n   * @dev Must be called after crowdsale ends, to do some extra finalization\r\n   * work. Calls the contract's finalization function.\r\n   */\r\n  function finalize() onlyOwner public {\r\n    require(!isFinalized);\r\n    require(hasEnded());\r\n\r\n    finalization();\r\n    Finalized();\r\n\r\n    isFinalized = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Can be overridden to add finalization logic. The overriding function\r\n   * should call super.finalization() to ensure the chain of finalization is\r\n   * executed entirely.\r\n   */\r\n  function finalization() internal {\r\n  }\r\n}\r\n/*************************************************************************\r\n * import \"./FinalizableCrowdsale.sol\" : end\r\n *************************************************************************/\r\n/*************************************************************************\r\n * import \"./RefundVault.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n\r\n\r\n/**\r\n * @title RefundVault\r\n * @dev This contract is used for storing funds while a crowdsale\r\n * is in progress. Supports refunding the money if crowdsale fails,\r\n * and forwarding it if crowdsale is successful.\r\n */\r\ncontract RefundVault is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  enum State { Active, Refunding, Closed }\r\n\r\n  mapping (address => uint256) public deposited;\r\n  address public wallet;\r\n  State public state;\r\n\r\n  event Closed();\r\n  event RefundsEnabled();\r\n  event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n  function RefundVault(address _wallet) public {\r\n    require(_wallet != address(0));\r\n    wallet = _wallet;\r\n    state = State.Active;\r\n  }\r\n\r\n  function deposit(address investor) onlyOwner public payable {\r\n    require(state == State.Active);\r\n    deposited[investor] = deposited[investor].add(msg.value);\r\n  }\r\n\r\n  function close() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Closed;\r\n    Closed();\r\n    wallet.transfer(this.balance);\r\n  }\r\n\r\n  function enableRefunds() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Refunding;\r\n    RefundsEnabled();\r\n  }\r\n\r\n  function refund(address investor) public {\r\n    require(state == State.Refunding);\r\n    uint256 depositedValue = deposited[investor];\r\n    deposited[investor] = 0;\r\n    investor.transfer(depositedValue);\r\n    Refunded(investor, depositedValue);\r\n  }\r\n}\r\n/*************************************************************************\r\n * import \"./RefundVault.sol\" : end\r\n *************************************************************************/\r\n\r\n\r\n/**\r\n * @title RefundableCrowdsale\r\n * @dev Extension of Crowdsale contract that adds a funding goal, and\r\n * the possibility of users getting a refund if goal is not met.\r\n * Uses a RefundVault as the crowdsale's vault.\r\n */\r\ncontract RefundableCrowdsale is FinalizableCrowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // minimum amount of funds to be raised in weis\r\n  uint256 public goal;\r\n\r\n  // refund vault used to hold funds while crowdsale is running\r\n  RefundVault public vault;\r\n\r\n  function RefundableCrowdsale(uint256 _goal) public {\r\n    require(_goal > 0);\r\n    vault = new RefundVault(wallet);\r\n    goal = _goal;\r\n  }\r\n\r\n  // We're overriding the fund forwarding from Crowdsale.\r\n  // In addition to sending the funds, we want to call\r\n  // the RefundVault deposit function\r\n  function forwardFunds() internal {\r\n    vault.deposit.value(msg.value)(msg.sender);\r\n  }\r\n\r\n  // if crowdsale is unsuccessful, investors can claim refunds here\r\n  function claimRefund() public {\r\n    require(isFinalized);\r\n    require(!goalReached());\r\n\r\n    vault.refund(msg.sender);\r\n  }\r\n\r\n  // vault finalization task, called when owner calls finalize()\r\n  function finalization() internal {\r\n    if (goalReached()) {\r\n      vault.close();\r\n    } else {\r\n      vault.enableRefunds();\r\n    }\r\n\r\n    super.finalization();\r\n  }\r\n\r\n  function goalReached() public view returns (bool) {\r\n    return weiRaised >= goal;\r\n  }\r\n\r\n}\r\n/*************************************************************************\r\n * import \"zeppelin-solidity/contracts/crowdsale/RefundableCrowdsale.sol\" : end\r\n *************************************************************************/\r\n\r\n\r\n/**\r\n * @title FNTRefundableCrowdsale\r\n * @dev Extension of teh RefundableCrowdsale form zeppelin to allow vault to be\r\n * closed once soft cap is reached\r\n */\r\ncontract FNTRefundableCrowdsale is RefundableCrowdsale {\r\n\r\n  // if the vault was closed before finalization\r\n  bool public vaultClosed = false;\r\n\r\n  // close vault call\r\n  function closeVault() public onlyOwner {\r\n    require(!vaultClosed);\r\n    require(goalReached());\r\n    vault.close();\r\n    vaultClosed = true;\r\n  }\r\n\r\n  // We're overriding the fund forwarding from Crowdsale.\r\n  // In addition to sending the funds, we want to call\r\n  // the RefundVault deposit function if the vault is not closed,\r\n  // if it is closed we forward teh funds to the wallet\r\n  function forwardFunds() internal {\r\n    if (!vaultClosed) {\r\n      vault.deposit.value(msg.value)(msg.sender);\r\n    } else {\r\n      wallet.transfer(msg.value);\r\n    }\r\n  }\r\n\r\n  // vault finalization task, called when owner calls finalize()\r\n  function finalization() internal {\r\n    if (!vaultClosed && goalReached()) {\r\n      vault.close();\r\n      vaultClosed = true;\r\n    } else if (!goalReached()) {\r\n      vault.enableRefunds();\r\n    }\r\n  }\r\n}\r\n/*************************************************************************\r\n * import \"./FNTRefundableCrowdsale.sol\" : end\r\n *************************************************************************/\r\n/*************************************************************************\r\n * import \"./FNTToken.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n/*************************************************************************\r\n * import \"zeppelin-solidity/contracts/token/BurnableToken.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public {\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(burner, _value);\r\n    }\r\n}\r\n/*************************************************************************\r\n * import \"zeppelin-solidity/contracts/token/BurnableToken.sol\" : end\r\n *************************************************************************/\r\n/*************************************************************************\r\n * import \"zeppelin-solidity/contracts/token/PausableToken.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n/*************************************************************************\r\n * import \"../lifecycle/Pausable.sol\" : start\r\n *************************************************************************/\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n/*************************************************************************\r\n * import \"../lifecycle/Pausable.sol\" : end\r\n *************************************************************************/\r\n\r\n/**\r\n * @title Pausable token\r\n *\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\n\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n/*************************************************************************\r\n * import \"zeppelin-solidity/contracts/token/PausableToken.sol\" : end\r\n *************************************************************************/\r\n\r\n/**\r\n   @title FNTToken, the Friend token\r\n\r\n   Implementation of FRND, the ERC20 token for Friend, with extra methods\r\n   to transfer value and data to execute a call on transfer.\r\n   Uses OpenZeppelin BurnableToken, MintableToken and PausableToken.\r\n */\r\ncontract FNTToken is BurnableToken, MintableToken, PausableToken {\r\n  // Token Name\r\n  string public constant NAME = \"Friend Network Token\";\r\n\r\n  // Token Symbol\r\n  string public constant SYMBOL = \"FRND\";\r\n\r\n  // Token decimals\r\n  uint8 public constant DECIMALS = 18;\r\n\r\n}\r\n/*************************************************************************\r\n * import \"./FNTToken.sol\" : end\r\n *************************************************************************/\r\n\r\n/**\r\n * @title FNTCrowdsale\r\n * @dev The crowdsale of the Firend Token network\r\n * The Friend token network will have a max total supply of 2000000000\r\n * The minimun cap for the sale is 25000 ETH\r\n * The crowdsale is capped in tokens total supply\r\n * If the minimun cap is not reached the ETH raised is returned\r\n */\r\ncontract FNTCrowdsale is FNTRefundableCrowdsale {\r\n\r\n  uint256 public maxICOSupply;\r\n\r\n  uint256 public maxTotalSupply;\r\n\r\n  uint256 public minFunding;\r\n\r\n  uint256 public mediumFunding;\r\n\r\n  uint256 public highFunding;\r\n\r\n  uint256 public presaleWei;\r\n\r\n  address public teamAddress;\r\n\r\n  address public FSNASAddress;\r\n\r\n  mapping(address => bool) public whitelist;\r\n\r\n  event WhitelistedAddressAdded(address addr);\r\n  event WhitelistedAddressRemoved(address addr);\r\n  event VestedTeamTokens(address first, address second, address thrid, address fourth);\r\n\r\n  /**\r\n   * @dev Throws if called by any account that's not whitelisted.\r\n   */\r\n  modifier onlyWhitelisted() {\r\n    require(whitelist[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Constructor\r\n   * Creates a Refundable Crowdsale and set the funding, max supply and addresses\r\n   * to distribute tokens at the end of the crowdsale.\r\n   * @param _startTime address, when the crowdsale starts\r\n   * @param _endTime address, when the crowdsale ends\r\n   * @param _rate address, crowdsale rate without bonus\r\n   * @param _minFunding address, soft cap\r\n   * @param _mediumFunding address, medium funding stage\r\n   * @param _highFunding address, high funding stage\r\n   * @param _wallet address, wallet to receive ETH raised\r\n   * @param _maxTotalSupply address, maximun token supply\r\n   * @param _teamAddress address, team's address\r\n   * @param _FSNASAddress address, fsnas address\r\n   */\r\n  function FNTCrowdsale(\r\n    uint256 _startTime, uint256 _endTime, uint256 _rate, uint256 _minFunding,\r\n    uint256 _mediumFunding, uint256 _highFunding, address _wallet,\r\n    uint256 _maxTotalSupply, address _teamAddress, address _FSNASAddress\r\n  ) public\r\n    RefundableCrowdsale(_minFunding)\r\n    Crowdsale(_startTime, _endTime, _rate, _wallet)\r\n  {\r\n    require(_maxTotalSupply > 0);\r\n    require(_minFunding > 0);\r\n    require(_mediumFunding > _minFunding);\r\n    require(_highFunding > _mediumFunding);\r\n    require(_teamAddress != address(0));\r\n    require(_FSNASAddress != address(0));\r\n    minFunding = _minFunding;\r\n    mediumFunding = _mediumFunding;\r\n    highFunding = _highFunding;\r\n    maxTotalSupply = _maxTotalSupply;\r\n    maxICOSupply = maxTotalSupply.mul(82).div(100);\r\n    teamAddress = _teamAddress;\r\n    FSNASAddress = _FSNASAddress;\r\n    FNTToken(token).pause();\r\n  }\r\n\r\n  // Internal function that returns a MintableToken, FNTToken is mintable\r\n  function createTokenContract() internal returns (MintableToken) {\r\n    return new FNTToken();\r\n  }\r\n\r\n  /**\r\n   * @dev Buy tokens fallback function, overrides zeppelin buyTokens function\r\n   * @param beneficiary address, the address that will receive the tokens\r\n   *\r\n   * ONLY send from a ERC20 compatible wallet like myetherwallet.com\r\n   *\r\n   */\r\n  function buyTokens(address beneficiary) public onlyWhitelisted payable {\r\n    require(beneficiary != address(0));\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = 0;\r\n    if (weiRaised < minFunding) {\r\n\r\n      // If the weiRaised go from less than min funding to more than high funding\r\n      if (weiRaised.add(weiAmount) > highFunding) {\r\n        tokens = minFunding.sub(weiRaised)\r\n          .mul(rate).mul(115).div(100);\r\n        tokens = tokens.add(\r\n          mediumFunding.sub(minFunding).mul(rate).mul(110).div(100)\r\n        );\r\n        tokens = tokens.add(\r\n          highFunding.sub(mediumFunding).mul(rate).mul(105).div(100)\r\n        );\r\n        tokens = tokens.add(\r\n          weiRaised.add(weiAmount).sub(highFunding).mul(rate)\r\n        );\r\n\r\n      // If the weiRaised go from less than min funding to more than medium funding\r\n      } else if (weiRaised.add(weiAmount) > mediumFunding) {\r\n        tokens = minFunding.sub(weiRaised)\r\n          .mul(rate).mul(115).div(100);\r\n        tokens = tokens.add(\r\n          mediumFunding.sub(minFunding).mul(rate).mul(110).div(100)\r\n        );\r\n        tokens = tokens.add(\r\n          weiRaised.add(weiAmount).sub(mediumFunding).mul(rate).mul(105).div(100)\r\n        );\r\n\r\n      // If the weiRaised go from less than min funding to more than min funding\r\n      // but less than medium\r\n      } else if (weiRaised.add(weiAmount) > minFunding) {\r\n        tokens = minFunding.sub(weiRaised)\r\n          .mul(rate).mul(115).div(100);\r\n        tokens = tokens.add(\r\n          weiRaised.add(weiAmount).sub(minFunding).mul(rate).mul(110).div(100)\r\n        );\r\n\r\n      // If the weiRaised still continues being less than min funding\r\n      } else {\r\n        tokens = weiAmount.mul(rate).mul(115).div(100);\r\n      }\r\n\r\n    } else if ((weiRaised >= minFunding) && (weiRaised < mediumFunding)) {\r\n\r\n      // If the weiRaised go from more than min funding and less than min funding\r\n      // to more than high funding\r\n      if (weiRaised.add(weiAmount) > highFunding) {\r\n        tokens = mediumFunding.sub(weiRaised)\r\n          .mul(rate).mul(110).div(100);\r\n        tokens = tokens.add(\r\n          highFunding.sub(mediumFunding).mul(rate).mul(105).div(100)\r\n        );\r\n        tokens = tokens.add(\r\n          weiRaised.add(weiAmount).sub(highFunding).mul(rate)\r\n        );\r\n\r\n      // If the weiRaised go from more than min funding and less than min funding\r\n      // to more than medium funding\r\n      } else if (weiRaised.add(weiAmount) > mediumFunding) {\r\n        tokens = mediumFunding.sub(weiRaised)\r\n          .mul(rate).mul(110).div(100);\r\n        tokens = tokens.add(\r\n          weiRaised.add(weiAmount).sub(mediumFunding).mul(rate).mul(105).div(100)\r\n        );\r\n\r\n      // If the weiRaised still continues being less than medium funding\r\n      } else {\r\n        tokens = weiAmount.mul(rate).mul(110).div(100);\r\n      }\r\n\r\n    } else if ((weiRaised >= mediumFunding) && (weiRaised < highFunding)) {\r\n\r\n      // If the weiRaised go from more than medium funding and less than high funding\r\n      // to more than high funding\r\n      if (weiRaised.add(weiAmount) > highFunding) {\r\n        tokens = highFunding.sub(weiRaised)\r\n          .mul(rate).mul(105).div(100);\r\n        tokens = tokens.add(\r\n          weiRaised.add(weiAmount).sub(highFunding).mul(rate)\r\n        );\r\n\r\n      // If the weiRaised still continues being less than high funding\r\n      } else {\r\n        tokens = weiAmount.mul(rate).mul(105).div(100);\r\n      }\r\n\r\n    // If the weiRaised still continues being more than high funding\r\n    } else {\r\n      tokens = weiAmount.mul(rate);\r\n    }\r\n\r\n    // Check not to sold more than maxICOSupply\r\n    require(token.totalSupply().add(tokens) <= maxICOSupply);\r\n\r\n    // Take in count wei received\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    // Mint the token to the buyer\r\n    token.mint(beneficiary, tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n    // Forward funds to vault\r\n    forwardFunds();\r\n  }\r\n\r\n  /**\r\n   * @dev Distribute tokens to a batch of addresses, called only by owner\r\n   * @param addrs address[], the addresses where tokens will be issued\r\n   * @param values uint256[], the value in wei to be added\r\n   * @param rate uint256, the rate of tokens per ETH used\r\n   */\r\n  function addPresaleTokens(\r\n    address[] addrs, uint256[] values, uint256 rate\r\n  ) onlyOwner external {\r\n    require(now < endTime);\r\n    require(addrs.length == values.length);\r\n    require(rate > 0);\r\n\r\n    uint256 totalTokens = 0;\r\n\r\n    for(uint256 i = 0; i < addrs.length; i ++) {\r\n      token.mint(addrs[i], values[i].mul(rate));\r\n      totalTokens = totalTokens.add(values[i].mul(rate));\r\n\r\n      // Take in count wei received\r\n      weiRaised = weiRaised.add(values[i]);\r\n      presaleWei = presaleWei.add(values[i]);\r\n    }\r\n\r\n    // Check not to issue more than maxICOSupply\r\n    require(token.totalSupply() <= maxICOSupply);\r\n  }\r\n\r\n  /**\r\n   * @dev add an address to the whitelist\r\n   * @param addrs address[] addresses to be added in whitelist\r\n   */\r\n  function addToWhitelist(address[] addrs) onlyOwner external {\r\n    for(uint256 i = 0; i < addrs.length; i ++) {\r\n      require(!whitelist[addrs[i]]);\r\n      whitelist[addrs[i]] = true;\r\n      WhitelistedAddressAdded(addrs[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address from the whitelist\r\n   * @param addrs address[] addresses to be removed from whitelist\r\n   */\r\n  function removeFromWhitelist(address[] addrs) onlyOwner public {\r\n    for(uint256 i = 0; i < addrs.length; i ++) {\r\n      require(whitelist[addrs[i]]);\r\n      whitelist[addrs[i]] = false;\r\n      WhitelistedAddressRemoved(addrs[i]);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Must be called after crowdsale ends, to do some extra finalization\r\n   * work. Calls the contract's finalization function.\r\n   */\r\n  function finalize() onlyOwner public {\r\n    require(!isFinalized);\r\n    \r\n    if( goalReached() )\r\n    {\r\n\t    finalization();\r\n\t    Finalized();\r\n\t\r\n\t    isFinalized = true;\r\n    }\r\n\telse\r\n\t{\r\n\t\tif( hasEnded() )\r\n\t\t{\r\n\t\t    vault.enableRefunds();\r\n\t\t    \r\n\t\t    Finalized();\r\n\t\t    isFinalized = true;\r\n\t\t}\r\n\t}    \r\n  }\r\n\r\n  /**\r\n   * @dev Finalize the crowdsale and token minting, and transfer ownership of\r\n   * the token, can be called only by owner\r\n   */\r\n  function finalization() internal {\r\n    super.finalization();\r\n\r\n    // Multiplying tokens sold by 0,219512195122\r\n    // 18 / 82 = 0,219512195122 , which means that for every token sold in ICO\r\n    // 0,219512195122 extra tokens will be issued.\r\n    uint256 extraTokens = token.totalSupply().mul(219512195122).div(1000000000000);\r\n    uint256 teamTokens = extraTokens.div(3);\r\n    uint256 FSNASTokens = extraTokens.div(3).mul(2);\r\n\r\n    // Mint toke time locks to team\r\n    TokenTimelock firstBatch = new TokenTimelock(token, teamAddress, now.add(30 days));\r\n    token.mint(firstBatch, teamTokens.div(2));\r\n\r\n    TokenTimelock secondBatch = new TokenTimelock(token, teamAddress, now.add(1 years));\r\n    token.mint(secondBatch, teamTokens.div(2).div(3));\r\n\r\n    TokenTimelock thirdBatch = new TokenTimelock(token, teamAddress, now.add(2 years));\r\n    token.mint(thirdBatch, teamTokens.div(2).div(3));\r\n\r\n    TokenTimelock fourthBatch = new TokenTimelock(token, teamAddress, now.add(3 years));\r\n    token.mint(fourthBatch, teamTokens.div(2).div(3));\r\n\r\n    VestedTeamTokens(firstBatch, secondBatch, thirdBatch, fourthBatch);\r\n\r\n    // Mint FSNAS tokens\r\n    token.mint(FSNASAddress, FSNASTokens);\r\n\r\n    // Finsih the minting\r\n    token.finishMinting();\r\n\r\n    // Transfer ownership of token to company wallet\r\n    token.transferOwnership(wallet);\r\n\r\n  }\r\n\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[],\"name\":\"closeVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minFunding\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highFunding\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaultClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FSNASAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxICOSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"addPresaleTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mediumFunding\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_minFunding\",\"type\":\"uint256\"},{\"name\":\"_mediumFunding\",\"type\":\"uint256\"},{\"name\":\"_highFunding\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_maxTotalSupply\",\"type\":\"uint256\"},{\"name\":\"_teamAddress\",\"type\":\"address\"},{\"name\":\"_FSNASAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WhitelistedAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WhitelistedAddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"first\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"second\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"thrid\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"fourth\",\"type\":\"address\"}],\"name\":\"VestedTeamTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]", "ContractName": "FNTCrowdsale", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000005b2363f0000000000000000000000000000000000000000000000000000000005c1cf1e00000000000000000000000000000000000000000000000000000000000004e2000000000000000000000000000000000000000000000021e19e0c9bab240000000000000000000000000000000000000000000000000054b40b1f852bda00000000000000000000000000000000000000000000000000a968163f0a57b400000000000000000000000000000d8d3b694907a0ea26db1bc91ad4f36b3a89cb1cb000000000000000000000000000000000000000006765c793fa10079d00000000000000000000000000000003BD976B3b67f5EC9569C9d969Af2BAc622Db98020000000000000000000000001991803a9797beb4325b74a537056e21326a4485", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://89203944f6fe7ed3b2a885a7ebf94b1d3108cd91956e4b636fb27d38adf71a57"}