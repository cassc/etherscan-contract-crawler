{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/UglyDogToken.sol\": {\r\n      \"content\": \"\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\r\\n}\\r\\n\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _transfer(owner, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        address spender = _msgSender();\\r\\n        _spendAllowance(from, spender, amount);\\r\\n        _transfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(\\r\\n        address spender,\\r\\n        uint256 subtractedValue\\r\\n    ) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n        unchecked {\\r\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, amount);\\r\\n\\r\\n        uint256 fromBalance = _balances[from];\\r\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[from] = fromBalance - amount;\\r\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\r\\n            // decrementing then incrementing.\\r\\n            _balances[to] += amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, to, amount);\\r\\n\\r\\n        _afterTokenTransfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        unchecked {\\r\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\r\\n            _balances[account] += amount;\\r\\n        }\\r\\n        emit Transfer(address(0), account, amount);\\r\\n\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\r\\n            _totalSupply -= amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        if (currentAllowance != type(uint256).max) {\\r\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\r\\n            unchecked {\\r\\n                _approve(owner, spender, currentAllowance - amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\r\\n\\r\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactETH(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokens(\\r\\n        uint amountOut,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n\\r\\n    function getAmountOut(\\r\\n        uint amountIn,\\r\\n        uint reserveIn,\\r\\n        uint reserveOut\\r\\n    ) external pure returns (uint amountOut);\\r\\n\\r\\n    function getAmountIn(\\r\\n        uint amountOut,\\r\\n        uint reserveIn,\\r\\n        uint reserveOut\\r\\n    ) external pure returns (uint amountIn);\\r\\n\\r\\n    function getAmountsOut(\\r\\n        uint amountIn,\\r\\n        address[] calldata path\\r\\n    ) external view returns (uint[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(\\r\\n        uint amountOut,\\r\\n        address[] calldata path\\r\\n    ) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract UglyDogToken is ERC20, Ownable {\\r\\n    event TransferFee(uint256 makertingTax, uint256 devTax, uint256 indexed lpTax);\\r\\n    event MarketingWalletUpdated(address newWallet, address oldWallet);\\r\\n    event DevWalletUpdated(address newWallet, address oldWallet);\\r\\n\\r\\n    struct TokenInfo {\\r\\n        string name;\\r\\n        string symbol;\\r\\n        address marketingFeeReceiver;\\r\\n        address devFeeReceiver;\\r\\n        uint256 marketingTaxBuy;\\r\\n        uint256 marketingTaxSell;\\r\\n        uint256 devTaxSell;\\r\\n        uint256 devTaxBuy;\\r\\n        uint256 lpTaxBuy;\\r\\n        uint256 lpTaxSell;\\r\\n        uint256 totalSupply;\\r\\n        uint256 maxPercentageForWallet;\\r\\n        uint256 maxPercentageForTx;\\r\\n        address swapRouter;\\r\\n        address newOwner;\\r\\n    }\\r\\n\\r\\n    TokenInfo private tokenInfo;\\r\\n\\r\\n    mapping(address => bool) public isExcludeFromFee;\\r\\n    mapping(address => bool) public isExcludeFromTxLimit;\\r\\n    mapping(address => bool) public isExcludeFromWalletLimit;\\r\\n\\r\\n    address deployer;\\r\\n    address public swapPair;\\r\\n    address public weth;\\r\\n    uint256 private deployerTax;\\r\\n    uint256 public maxAmountForWallet;\\r\\n    uint256 public maxAmountForTx;\\r\\n\\r\\n    bool public swapping;\\r\\n\\r\\n    uint256 public tokensForMarketing;\\r\\n    uint256 public tokensForDev;\\r\\n    uint256 public tokensForLiquidity;\\r\\n    uint256 public tokensForDeployer;\\r\\n\\r\\n    modifier onlySwapping() {\\r\\n        swapping = true;\\r\\n        _;\\r\\n        swapping = false;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        TokenInfo memory _tokenInfo,\\r\\n        uint256 _deployerTax,\\r\\n        address _deployFeeReceiver\\r\\n    ) ERC20(_tokenInfo.name, _tokenInfo.symbol) {\\r\\n        deployer = _deployFeeReceiver;\\r\\n        tokenInfo = _tokenInfo;\\r\\n        deployerTax = _deployerTax;\\r\\n\\r\\n        require(\\r\\n            _tokenInfo.maxPercentageForTx >= 0 ether && _tokenInfo.maxPercentageForTx <= 100 ether,\\r\\n            \\\"Value must be between 0% and 100%\\\"\\r\\n        );\\r\\n        require(\\r\\n            _tokenInfo.maxPercentageForWallet >= 0 ether &&\\r\\n                _tokenInfo.maxPercentageForWallet <= 100 ether,\\r\\n            \\\"Value must be between 0% and 100%\\\"\\r\\n        );\\r\\n\\r\\n        uint256 uBuyFee = tokenInfo.devTaxBuy + tokenInfo.lpTaxBuy + tokenInfo.marketingTaxBuy;\\r\\n        uint256 uSellFee = tokenInfo.devTaxSell + tokenInfo.lpTaxSell + tokenInfo.marketingTaxSell;\\r\\n        require(uBuyFee <= 15 ether && uSellFee <= 15 ether, \\\"Total tax fees exceed 15%\\\");\\r\\n\\r\\n        maxAmountForWallet = (_tokenInfo.maxPercentageForWallet * _tokenInfo.totalSupply) / 100 ether;\\r\\n        maxAmountForTx = (_tokenInfo.maxPercentageForTx * _tokenInfo.totalSupply) / 100 ether;\\r\\n\\r\\n        address swapFactory = IUniswapV2Router02(_tokenInfo.swapRouter).factory();\\r\\n        weth = IUniswapV2Router02(_tokenInfo.swapRouter).WETH();\\r\\n        swapPair = IUniswapV2Factory(swapFactory).createPair(address(this), weth);\\r\\n\\r\\n        isExcludeFromFee[address(this)] = true;\\r\\n        isExcludeFromFee[_tokenInfo.newOwner] = true;\\r\\n        isExcludeFromFee[_tokenInfo.marketingFeeReceiver] = true;\\r\\n        isExcludeFromFee[_tokenInfo.devFeeReceiver] = true;\\r\\n\\r\\n        isExcludeFromTxLimit[address(this)] = true;\\r\\n        isExcludeFromTxLimit[_tokenInfo.newOwner] = true;\\r\\n        isExcludeFromTxLimit[tokenInfo.swapRouter] = true;\\r\\n        isExcludeFromTxLimit[_tokenInfo.marketingFeeReceiver] = true;\\r\\n        isExcludeFromTxLimit[_tokenInfo.devFeeReceiver] = true;\\r\\n\\r\\n        isExcludeFromWalletLimit[address(this)] = true;\\r\\n        isExcludeFromWalletLimit[_tokenInfo.newOwner] = true;\\r\\n        isExcludeFromWalletLimit[tokenInfo.swapRouter] = true;\\r\\n        isExcludeFromWalletLimit[_tokenInfo.marketingFeeReceiver] = true;\\r\\n        isExcludeFromWalletLimit[_tokenInfo.devFeeReceiver] = true;\\r\\n        isExcludeFromWalletLimit[swapPair] = true;\\r\\n\\r\\n        super._transferOwnership(_tokenInfo.newOwner);\\r\\n        super._mint(_tokenInfo.newOwner, _tokenInfo.totalSupply);\\r\\n        _approve(address(this), tokenInfo.swapRouter, type(uint256).max);\\r\\n    }\\r\\n\\r\\n    function getTokenInfo() public view returns (TokenInfo memory _tokenInfo) {\\r\\n        _tokenInfo = tokenInfo;\\r\\n    }\\r\\n\\r\\n    function totalBuyTaxFees() public view returns (uint256) {\\r\\n        return tokenInfo.devTaxBuy + tokenInfo.lpTaxBuy + tokenInfo.marketingTaxBuy;\\r\\n    }\\r\\n\\r\\n    function totalSellTaxFees() public view returns (uint256) {\\r\\n        return tokenInfo.devTaxSell + tokenInfo.lpTaxSell + tokenInfo.marketingTaxSell;\\r\\n    }\\r\\n\\r\\n    function totalTaxFees() public view returns (uint256) {\\r\\n        return totalBuyTaxFees() + totalSellTaxFees();\\r\\n    }\\r\\n\\r\\n    function getMarketingBuyTax() external view returns (uint256) {\\r\\n        return tokenInfo.marketingTaxBuy;\\r\\n    }\\r\\n\\r\\n    function getMarketingSellTax() external view returns (uint256) {\\r\\n        return tokenInfo.marketingTaxSell;\\r\\n    }\\r\\n\\r\\n    function getDevBuyTax() external view returns (uint256) {\\r\\n        return tokenInfo.devTaxBuy;\\r\\n    }\\r\\n\\r\\n    function getDevSellTax() external view returns (uint256) {\\r\\n        return tokenInfo.devTaxSell;\\r\\n    }\\r\\n\\r\\n    function getLpBuyTax() external view returns (uint256) {\\r\\n        return tokenInfo.lpTaxBuy;\\r\\n    }\\r\\n\\r\\n    function getLpSellTax() external view returns (uint256) {\\r\\n        return tokenInfo.lpTaxSell;\\r\\n    }\\r\\n\\r\\n    function setExclusionFromFee(address account, bool value) public onlyOwner {\\r\\n        isExcludeFromFee[account] = value;\\r\\n    }\\r\\n\\r\\n    function setExclusionFromTxLimit(address account, bool value) public onlyOwner {\\r\\n        isExcludeFromTxLimit[account] = value;\\r\\n    }\\r\\n\\r\\n    function setExclusionFromWalletLimit(address account, bool value) public onlyOwner {\\r\\n        isExcludeFromWalletLimit[account] = value;\\r\\n    }\\r\\n\\r\\n    function updateMarketingWallet(address newWallet) external onlyOwner {\\r\\n        address oldWallet = tokenInfo.marketingFeeReceiver;\\r\\n        tokenInfo.marketingFeeReceiver = newWallet;\\r\\n\\r\\n        emit MarketingWalletUpdated(newWallet, oldWallet);\\r\\n    }\\r\\n\\r\\n    function updateDevWallet(address newWallet) external onlyOwner {\\r\\n        address oldWallet = tokenInfo.devFeeReceiver;\\r\\n        tokenInfo.devFeeReceiver = newWallet;\\r\\n\\r\\n        emit DevWalletUpdated(newWallet, oldWallet);\\r\\n    }\\r\\n\\r\\n    function updateMarketingBuyTax(uint256 tax) external onlyOwner {\\r\\n        tokenInfo.marketingTaxBuy = tax;\\r\\n        require(totalBuyTaxFees() <= 15 ether, \\\"Total tax fees exceed 15%\\\");\\r\\n    }\\r\\n\\r\\n    function updateMarketingSellTax(uint256 tax) external onlyOwner {\\r\\n        tokenInfo.marketingTaxSell = tax;\\r\\n        require(totalSellTaxFees() <= 15 ether, \\\"Total tax fees exceed 15%\\\");\\r\\n    }\\r\\n\\r\\n    function updateDevBuyTax(uint256 tax) external onlyOwner {\\r\\n        tokenInfo.devTaxBuy = tax;\\r\\n        require(totalBuyTaxFees() <= 15 ether, \\\"Total tax fees exceed 15%\\\");\\r\\n    }\\r\\n\\r\\n    function updateDevSellTax(uint256 tax) external onlyOwner {\\r\\n        tokenInfo.devTaxSell = tax;\\r\\n        require(totalSellTaxFees() <= 15 ether, \\\"Total tax fees exceed 15%\\\");\\r\\n    }\\r\\n\\r\\n    function updateLpBuyTax(uint256 tax) external onlyOwner {\\r\\n        tokenInfo.lpTaxBuy = tax;\\r\\n        require(totalBuyTaxFees() <= 15 ether, \\\"Total tax fees exceed 15%\\\");\\r\\n    }\\r\\n\\r\\n    function updateLpSellTax(uint256 tax) external onlyOwner {\\r\\n        tokenInfo.lpTaxSell = tax;\\r\\n        require(totalSellTaxFees() <= 15 ether, \\\"Total tax fees exceed 15%\\\");\\r\\n    }\\r\\n\\r\\n    function updateMaxWalletAmount(uint256 maxWallet) external onlyOwner {\\r\\n        require(maxWallet <= 100 ether && maxWallet >= 0 ether, \\\"Value must be between 0% and 100%\\\");\\r\\n        tokenInfo.maxPercentageForWallet = maxWallet;\\r\\n        maxAmountForWallet = (maxWallet * tokenInfo.totalSupply) / 100 ether;\\r\\n    }\\r\\n\\r\\n    function updateMaxTransactionAmount(uint256 maxTx) external onlyOwner {\\r\\n        require(maxTx <= 100 ether && maxTx >= 0 ether, \\\"Value must be between 0% and 100%\\\");\\r\\n        tokenInfo.maxPercentageForTx = maxTx;\\r\\n        maxAmountForTx = (maxTx * tokenInfo.totalSupply) / 100 ether;\\r\\n    }\\r\\n\\r\\n    function _swapAndAddLiquidity() internal onlySwapping {\\r\\n        uint256 totalFees = tokensForMarketing + tokensForDev + tokensForLiquidity + tokensForDeployer;\\r\\n\\r\\n        require(totalFees > 0);\\r\\n\\r\\n        address swapRouter = tokenInfo.swapRouter;\\r\\n        uint256 halfLpFee = tokensForLiquidity / 2;\\r\\n        totalFees -= halfLpFee;\\r\\n\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = weth;\\r\\n\\r\\n        uint256 beforeEthBalance = address(this).balance;\\r\\n\\r\\n        IUniswapV2Router02(swapRouter).swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            totalFees,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp + 60\\r\\n        );\\r\\n\\r\\n        uint256 ethBalance = address(this).balance - beforeEthBalance;\\r\\n\\r\\n        uint256 lpTaxFeeETH = (ethBalance * halfLpFee) / totalFees;\\r\\n        uint256 marketingTaxFeeETH = (ethBalance * tokensForMarketing) / totalFees;\\r\\n        uint256 devTaxFeeETH = (ethBalance * tokensForDev) / totalFees;\\r\\n        uint256 taxFeeForDeployer = ethBalance - lpTaxFeeETH - marketingTaxFeeETH - devTaxFeeETH;\\r\\n\\r\\n        if (marketingTaxFeeETH > 0) {\\r\\n            payable(tokenInfo.marketingFeeReceiver).transfer(marketingTaxFeeETH);\\r\\n        }\\r\\n        if (devTaxFeeETH > 0) {\\r\\n            payable(tokenInfo.devFeeReceiver).transfer(devTaxFeeETH);\\r\\n        }\\r\\n        if (taxFeeForDeployer > 0) {\\r\\n            payable(deployer).transfer(taxFeeForDeployer);\\r\\n        }\\r\\n\\r\\n        if (lpTaxFeeETH > 0 && halfLpFee > 0) {\\r\\n            IUniswapV2Router02(swapRouter).addLiquidityETH{ value: lpTaxFeeETH }(\\r\\n                address(this),\\r\\n                halfLpFee,\\r\\n                0,\\r\\n                0,\\r\\n                owner(),\\r\\n                block.timestamp + 60\\r\\n            );\\r\\n        }\\r\\n\\r\\n        tokensForMarketing = 0;\\r\\n        tokensForDev = 0;\\r\\n        tokensForLiquidity = 0;\\r\\n        tokensForDeployer = 0;\\r\\n\\r\\n        emit TransferFee(tokensForMarketing, tokensForDev, tokensForLiquidity);\\r\\n    }\\r\\n\\r\\n    function _transfer(address from, address to, uint256 amount) internal override {\\r\\n        if (!isExcludeFromTxLimit[from] && !isExcludeFromTxLimit[to])\\r\\n            require(maxAmountForTx >= amount, \\\"Transfer amount exceeds max allowed per transaction\\\");\\r\\n        if (!isExcludeFromWalletLimit[to])\\r\\n            require((balanceOf(to) + amount) <= maxAmountForWallet, \\\"Recipient's balance after transfer exceeds max allowed per wallet\\\");\\r\\n\\r\\n        if (amount == 0) {\\r\\n            super._transfer(from, to, 0);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 fees;\\r\\n        if (\\r\\n            !swapping &&\\r\\n            !isExcludeFromFee[from] &&\\r\\n            !isExcludeFromFee[to] &&\\r\\n            (from == swapPair || to == swapPair)\\r\\n        ) {\\r\\n            uint256 uBuyFee = totalBuyTaxFees() + deployerTax;\\r\\n            uint256 uSellFee = totalSellTaxFees() + deployerTax;\\r\\n\\r\\n            if (from == swapPair && uBuyFee > 0) {\\r\\n                fees = (amount * uBuyFee) / (100 ether);\\r\\n                tokensForDeployer += (fees * deployerTax) / uBuyFee;\\r\\n                tokensForDev += (fees * tokenInfo.devTaxBuy) / uBuyFee;\\r\\n                tokensForLiquidity += (fees * tokenInfo.lpTaxBuy) / uBuyFee;\\r\\n                tokensForMarketing += (fees * tokenInfo.marketingTaxBuy) / uBuyFee;\\r\\n            }\\r\\n            if (to == swapPair && uSellFee > 0) {\\r\\n                fees = (amount * uSellFee) / (100 ether);\\r\\n                tokensForDeployer += (fees * deployerTax) / uSellFee;\\r\\n                tokensForDev += (fees * tokenInfo.devTaxSell) / uSellFee;\\r\\n                tokensForLiquidity += (fees * tokenInfo.lpTaxSell) / uSellFee;\\r\\n                tokensForMarketing += (fees * tokenInfo.marketingTaxSell) / uSellFee;\\r\\n            }\\r\\n\\r\\n            super._transfer(from, address(this), fees);\\r\\n\\r\\n            if (to == swapPair && fees > 0) {\\r\\n                _swapAndAddLiquidity();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        super._transfer(from, to, amount - fees);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"viaIR\": true,\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"marketingFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"devFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingTaxBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingTaxSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devTaxSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devTaxBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpTaxBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpTaxSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPercentageForWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPercentageForTx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"internalType\":\"struct UglyDogToken.TokenInfo\",\"name\":\"_tokenInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_deployerTax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_deployFeeReceiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"DevWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"MarketingWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"makertingTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"devTax\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lpTax\",\"type\":\"uint256\"}],\"name\":\"TransferFee\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDevBuyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDevSellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpBuyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpSellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketingBuyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketingSellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"marketingFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"devFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingTaxBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingTaxSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devTaxSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devTaxBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpTaxBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpTaxSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPercentageForWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPercentageForTx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"internalType\":\"struct UglyDogToken.TokenInfo\",\"name\":\"_tokenInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludeFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludeFromTxLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludeFromWalletLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmountForTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmountForWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setExclusionFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setExclusionFromTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setExclusionFromWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForDeployer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForDev\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyTaxFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellTaxFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTaxFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"updateDevBuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"updateDevSellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"updateLpBuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"updateLpSellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"updateMarketingBuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"updateMarketingSellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTx\",\"type\":\"uint256\"}],\"name\":\"updateMaxTransactionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWallet\",\"type\":\"uint256\"}],\"name\":\"updateMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "UglyDogToken", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f61c2b1741b352e8d68ac388986585666cffd4400000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000002200000000000000000000000001f61c2b1741b352e8d68ac388986585666cffd440000000000000000000000001f61c2b1741b352e8d68ac388986585666cffd440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001431e0fae6d7217caa00000000000000000000000000000000000000000000000000000006124fee993bc00000000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d0000000000000000000000001f61c2b1741b352e8d68ac388986585666cffd44000000000000000000000000000000000000000000000000000000000000000855676c7920446f67000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000455474c5900000000000000000000000000000000000000000000000000000000", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}