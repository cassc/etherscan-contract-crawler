{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ICO.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./DriftPresale.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts@4.9.3/access/Ownable.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\ncontract ICO is Ownable {\\r\\n    DriftPresale public tokenAddress;\\r\\n     AggregatorV3Interface internal priceFeed;\\r\\n\\r\\n    enum Tier {\\r\\n        none,\\r\\n        gold,\\r\\n        silver,\\r\\n        bronze\\r\\n    }\\r\\n\\r\\n    enum userType {\\r\\n        dynamic,\\r\\n        stake\\r\\n    }\\r\\n\\r\\n    struct AmbassadorInfo {\\r\\n        address ambassadorAddress;\\r\\n        string ambassadorCode;\\r\\n        Tier userTier;\\r\\n        uint256 earning;\\r\\n        uint256 referrals;\\r\\n        uint256 amountRaised;\\r\\n    }\\r\\n    \\r\\n    address[] public ambassadorsList; //Ambassador Array\\r\\n    uint256 public totalReceivedFunds;\\r\\n    uint256 public icoStartTime;\\r\\n    uint256 public limitPerUser;\\r\\n    \\r\\n    uint256 public icoStage;\\r\\n    uint256 public eligibleSilverAmbassador = 0.5 ether;\\r\\n    uint256 public eligibleBronzeAmbassador = 0.25 ether;\\r\\n    uint256 public noOfAmbassadors;\\r\\n    uint256 public AmbassadorPayout;\\r\\n    uint256 public stakingLimit;\\r\\n    // uint256 public minimumBuyLimit = ;\\r\\n    bool public isSalePaused = false;\\r\\n\\r\\n    // Mapping (Stage => Price)\\r\\n    mapping(uint256 => uint256) public prices;\\r\\n    // Mapping (Stage => ETH target)\\r\\n    mapping(uint256 => uint256) public icoTarget;\\r\\n    mapping(uint256 => uint256) public tokensTransferred;\\r\\n    mapping(uint256 => uint256) public receivedFunds;\\r\\n    mapping(userType => uint256) public noOfTokens;\\r\\n    // Decimals 2\\r\\n    mapping(Tier => uint32[]) public percent;\\r\\n    mapping(userType => address[]) private users;\\r\\n    mapping(address => mapping(userType => bool)) public isAddressExist;\\r\\n    mapping(address => mapping(userType => uint256))\\r\\n        public amountOfAddressPerType;\\r\\n    // Is code is enabled/valid\\r\\n    mapping(string => bool) public isEnableCode;\\r\\n    // Generated promo code against address\\r\\n    mapping(address => string) public codeOfAddress;\\r\\n    // Generated promo code\\r\\n    mapping(string => address) public promoCode;\\r\\n    // How much money the address invest\\r\\n    mapping(address => AmbassadorInfo) internal ambassadorInfo;\\r\\n    // Mapping Stage => Tier => Amount\\r\\n    mapping(uint256 => mapping(Tier => uint256)) public totalTierRaised;\\r\\n    mapping(Tier => mapping(string => bool)) public ambassadorCode;\\r\\n    // How much money the address invest\\r\\n    mapping(address => uint256) public investAmount;\\r\\n    mapping(address => bool) public isAmbassadorEligible;\\r\\n    mapping(address => uint256) public ambassadorPercentExt;\\r\\n\\r\\n    modifier isCodeValid(string memory _code) {\\r\\n        require(\\r\\n            isEnableCode[_code] || compareStringsbyBytes(_code, \\\"\\\"),\\r\\n            \\\"Code is invalid\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isUsingOwnCode(string memory _code) {\\r\\n        require(promoCode[_code] != msg.sender, \\\"Can't use your own code\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\r\\n    // Is crowdsale Open\\r\\n    function changeSaleStatus(bool _status) public onlyOwner  {\\r\\n       isSalePaused=_status;\\r\\n    }\\r\\n    // bool public isSalePaused;\\r\\n\\r\\n    constructor(DriftPresale _tokenAddress) {\\r\\n        tokenAddress = _tokenAddress;\\r\\n    priceFeed = AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);\\r\\n        percent[Tier.gold] = [1000, 500];\\r\\n        percent[Tier.silver] = [1000, 500];\\r\\n        percent[Tier.bronze] = [750, 500];\\r\\n        stakingLimit = 2000000000 * 10**tokenAddress.decimals();\\r\\n        limitPerUser = 150000000 * 10**tokenAddress.decimals();\\r\\n    }\\r\\n\\r\\n    // Is crowdsale Open\\r\\n    function isOpen() public view returns (bool) {\\r\\n        return icoTarget[icoStage] > tokensTransferred[icoStage] && block.timestamp >= icoStartTime;\\r\\n    }\\r\\n\\r\\n    function updateStakingLimit(uint256 _newLimit) public onlyOwner {\\r\\n        stakingLimit = _newLimit;\\r\\n    }\\r\\n\\r\\n    // Percentage with multiplied by 100, eg. 10% => 10*100 = 1000\\r\\n    function updateAmbassadorPercent(address _address, uint256 _percent) public onlyOwner {\\r\\n        ambassadorPercentExt[_address] = _percent;\\r\\n    }\\r\\n\\r\\n    // Create new crowdsale stage\\r\\n    function createStage(\\r\\n        uint256 _price,\\r\\n        uint256 _startTime,\\r\\n\\r\\n        uint256 _target\\r\\n    ) public onlyOwner {\\r\\n        require(!isOpen(), \\\"Previous ICO is open\\\");\\r\\n        require(_price > 0, \\\"Price is zero\\\");\\r\\n        require(_startTime > block.timestamp, \\\"Invalid Time\\\");\\r\\n        icoStartTime = _startTime;        \\r\\n        icoStage += 1;\\r\\n        prices[icoStage] = _price;\\r\\n        icoTarget[icoStage] = _target;\\r\\n    }\\r\\n\\r\\n    function calculateTokens(uint256 _amount) internal view returns (uint256) {\\r\\n        uint256 tokens = ((_amount * 10**18) / getPriceRate(prices[icoStage]));\\r\\n        return tokens;\\r\\n    }\\r\\n\\r\\n//Conversion Rate\\r\\n        function getPriceRate(uint _amount) public view returns (uint) {\\r\\n        (, int price,,,) = priceFeed.latestRoundData();\\r\\n        uint adjust_price = uint(price) * 1e10;\\r\\n        uint usd = _amount ;\\r\\n        uint rate = (usd * 1e18) / adjust_price;\\r\\n        return rate;\\r\\n    }\\r\\n\\r\\n\\r\\n    // Buy tokens\\r\\n    function buyTokens(string memory _code, bool _isStaker)\\r\\n        public\\r\\n        payable\\r\\n        isCodeValid(_code)\\r\\n        isUsingOwnCode(_code)\\r\\n    {\\r\\n        require(!isSalePaused,\\\"Sale is Paused\\\");\\r\\n        require(msg.value >= getPriceRate(50000000000000000000), \\\"Minimum Buy Limit is USD $50.00\\\");\\r\\n        require(tokenAddress.balanceOf(_msgSender()) <= limitPerUser, \\\"Sorry! Looks like this wallet has reached Max. Purchase Limit per address. As per our Presale Rules, a single wallet cannot purchase more than 1.5% of total supply.\\\");\\r\\n        require(isOpen(), \\\"Current stage of Presale has been filled completely. Please stay tuned for the next lap.\\\");\\r\\n        \\r\\n        \\r\\n\\r\\n        uint256 tokens = calculateTokens(msg.value);\\r\\n\\r\\n        if (!compareStringsbyBytes(_code, \\\"\\\")) {\\r\\n            Tier tier;\\r\\n            if (ambassadorCode[Tier.gold][_code]) {\\r\\n                tier = Tier.gold;\\r\\n            } else if (ambassadorCode[Tier.silver][_code]) {\\r\\n                tier = Tier.silver;\\r\\n            } else if (ambassadorCode[Tier.bronze][_code]) {\\r\\n                tier = Tier.bronze;\\r\\n            }\\r\\n\\r\\n            uint256 extraToken = (tokens * percent[tier][1]) / 10**4;\\r\\n            tokens += extraToken;\\r\\n            \\r\\n            AmbassadorInfo storage _ambassadorInfoCode = ambassadorInfo[\\r\\n                promoCode[_code]\\r\\n            ];\\r\\n\\r\\n            uint256 ambassadorPer = ambassadorPercentExt[_ambassadorInfoCode.ambassadorAddress] != 0 ? ambassadorPercentExt[_ambassadorInfoCode.ambassadorAddress] : percent[tier][0];\\r\\n\\r\\n            uint256 ambassadorAmount = (msg.value * ambassadorPer) / 10**4;\\r\\n            totalTierRaised[icoStage][tier] += msg.value;\\r\\n\\r\\n            _ambassadorInfoCode.amountRaised += msg.value;\\r\\n            _ambassadorInfoCode.referrals += 1;\\r\\n            _ambassadorInfoCode.earning += ambassadorAmount;\\r\\n            AmbassadorPayout += ambassadorAmount;\\r\\n\\r\\n            (bool sentToAmbassador, ) = payable(promoCode[_code]).call{\\r\\n                value: ambassadorAmount\\r\\n            }(\\\"\\\");\\r\\n\\r\\n            require(sentToAmbassador, \\\"Sent to ambassador failed\\\");\\r\\n        }\\r\\n\\r\\n        bool success = tokenAddress.transferFrom(\\r\\n            tokenAddress.owner(),\\r\\n            _msgSender(),\\r\\n            tokens\\r\\n        );\\r\\n        require(success, \\\"Transfer failed\\\");\\r\\n\\r\\n        tokensTransferred[icoStage]+=tokens;\\r\\n\\r\\n        userType _type = _isStaker ? userType.stake : userType.dynamic;\\r\\n\\r\\n        require(\\r\\n            (_type == userType.stake &&\\r\\n                noOfTokens[userType.stake] < stakingLimit) ||\\r\\n                _type == userType.dynamic,\\r\\n            \\\"Staking Pool Full. A max. 20% of entire supply can be staked during Presale stage. \\\"\\r\\n        );\\r\\n\\r\\n        if (!isAddressExist[_msgSender()][_type]) {\\r\\n            isAddressExist[_msgSender()][_type] = true;\\r\\n            users[_type].push(_msgSender());\\r\\n        }\\r\\n\\r\\n        amountOfAddressPerType[_msgSender()][_type] += tokens;\\r\\n        noOfTokens[_type] += tokens;\\r\\n\\r\\n        receivedFunds[icoStage] += msg.value;\\r\\n        totalReceivedFunds += msg.value;\\r\\n        investAmount[_msgSender()] += msg.value;\\r\\n        \\r\\n\\r\\n        Tier _eligible = Tier.none;\\r\\n\\r\\n        if (investAmount[_msgSender()] >= eligibleSilverAmbassador) {\\r\\n            _eligible = Tier.silver;\\r\\n        } else if (investAmount[_msgSender()] >= eligibleBronzeAmbassador) {\\r\\n            _eligible = Tier.bronze;\\r\\n        }\\r\\n\\r\\n        AmbassadorInfo storage _ambassadorInfo = ambassadorInfo[_msgSender()];\\r\\n        if (!isAmbassadorEligible[_msgSender()] && _eligible != Tier.none) {\\r\\n            \\r\\n            _ambassadorInfo.userTier = _eligible;\\r\\n            _ambassadorInfo.ambassadorAddress = _msgSender();\\r\\n\\r\\n            isAmbassadorEligible[_msgSender()] = true;\\r\\n            noOfAmbassadors++;\\r\\n        } else if (_ambassadorInfo.userTier == Tier.bronze) {\\r\\n            string memory _codeOfAddress = codeOfAddress[_msgSender()];\\r\\n            delete ambassadorCode[Tier.bronze][_codeOfAddress];\\r\\n            _ambassadorInfo.userTier = _eligible;\\r\\n            ambassadorCode[_eligible][_codeOfAddress] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getAmbassadorInfo(address _address)\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            Tier _tier,\\r\\n            string memory _promocode,\\r\\n            address _ambassador,\\r\\n            uint256 _earnings,\\r\\n            uint256 _referrals,\\r\\n            uint256 _raised\\r\\n        )\\r\\n    {\\r\\n        AmbassadorInfo memory _ambassadorInfo = ambassadorInfo[_address];\\r\\n        return (\\r\\n            _ambassadorInfo.userTier,\\r\\n            _ambassadorInfo.ambassadorCode,\\r\\n            _ambassadorInfo.ambassadorAddress,\\r\\n            _ambassadorInfo.earning,\\r\\n            _ambassadorInfo.referrals,\\r\\n            _ambassadorInfo.amountRaised\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function changeStatusCode(string memory _code, bool status)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        isEnableCode[_code] = status;\\r\\n    }\\r\\n\\r\\n    function createAmbassadorCode(\\r\\n        address _address,\\r\\n        Tier _tier,\\r\\n        string memory _code\\r\\n    ) public onlyOwner {\\r\\n        require(isNotAlreadyAmbassador(_address), \\\"Already Ambasador\\\");\\r\\n        ambassadorsList.push(_address);\\r\\n        require(!isEnableCode[_code], \\\"Code already exist\\\");\\r\\n        isAmbassadorEligible[_address] = true;\\r\\n        isEnableCode[_code] = true;\\r\\n        codeOfAddress[_address] = _code;\\r\\n        promoCode[_code] = _address;\\r\\n        ambassadorCode[_tier][_code] = true;\\r\\n        AmbassadorInfo storage _ambassadorInfo = ambassadorInfo[_address];\\r\\n        _ambassadorInfo.ambassadorAddress = _address;\\r\\n        _ambassadorInfo.ambassadorCode = _code;\\r\\n        _ambassadorInfo.userTier = _tier;\\r\\n        noOfAmbassadors++;\\r\\n    }\\r\\n\\r\\n    function createCode(string memory _code) public {\\r\\n        require(isAmbassadorEligible[_msgSender()], \\\"Sorry! You are not an ambassador yet. Please visit www.drifttoken.io during Presale and purchase a minimum of 0.25 ETH to become a Bronze Tier Ambassador. \\\");\\r\\n        require(isNotAlreadyAmbassador(_msgSender()), \\\"You have already assigned a Promo Code to this Ambassador Wallet. Please visit www.influ3nce.me/ambassador and connect this wallet to view your promo code. \\\");\\r\\n        require(!compareStringsbyBytes(_code, \\\"\\\"), \\\"Oops! Seems like you forgot to type-in your Promo Code.\\\");\\r\\n        require(!isEnableCode[_code], \\\"Unfortunately, this Promo Code has already been assigned to an Ambassador. Please choose another Promo Code. \\\");\\r\\n        ambassadorsList.push(_msgSender());\\r\\n        isEnableCode[_code] = true;\\r\\n        codeOfAddress[_msgSender()] = _code;\\r\\n        promoCode[_code] = _msgSender();\\r\\n        AmbassadorInfo storage _ambassadorInfo = ambassadorInfo[_msgSender()];\\r\\n        ambassadorCode[_ambassadorInfo.userTier][_code] = true;\\r\\n        _ambassadorInfo.ambassadorCode = _code;\\r\\n    }\\r\\n\\r\\n    function upgradeAmbassador(address _address, Tier _tier) public onlyOwner {\\r\\n        AmbassadorInfo storage _ambassadorInfo = ambassadorInfo[_address];\\r\\n        delete ambassadorCode[_ambassadorInfo.userTier][\\r\\n            codeOfAddress[_address]\\r\\n        ];\\r\\n        ambassadorCode[_tier][codeOfAddress[_address]] = true;\\r\\n        _ambassadorInfo.userTier = _tier;\\r\\n\\r\\n  \\r\\n    }\\r\\n\\r\\n    function isNotAlreadyAmbassador(address user) public view returns (bool) {\\r\\n        return compareStringsbyBytes(codeOfAddress[user], \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function getUsers(userType _type) public view returns (address[] memory) {\\r\\n        return users[_type];\\r\\n    }\\r\\n\\r\\n    function getAmbassadorList() public view returns (address[] memory) {\\r\\n        return ambassadorsList;\\r\\n    }\\r\\n\\r\\n    function withdrawFunds() public onlyOwner {\\r\\n        (bool os, ) = payable(owner()).call{value: address(this).balance}(\\\"\\\");\\r\\n        require(os);\\r\\n    }\\r\\n\\r\\n    function compareStringsbyBytes(string memory s1, string memory s2)\\r\\n        public\\r\\n        pure\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            keccak256(abi.encodePacked(s1)) == keccak256(abi.encodePacked(s2));\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@4.9.3/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/DriftPresale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts@4.9.3/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts@4.9.3/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts@4.9.3/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts@4.9.3/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts@4.9.3/security/ReentrancyGuard.sol\\\";\\n\\ncontract DriftPresale is\\n    ERC20,\\n    ERC20Burnable,\\n    Pausable,\\n    Ownable,\\n    ReentrancyGuard\\n{\\n    mapping(address => bool) public allowedAddresses;\\n    uint256 public maxSupply = 5660000000 * 10**decimals(); // 5.66 Billion\\n\\n    constructor() ERC20(\\\"Drift Presale Token\\\", \\\"PREDRIFT\\\") {\\n        _mint(msg.sender, maxSupply);\\n    }\\n\\n    modifier isAddressAllowed(address from) {\\n        require(\\n            allowedAddresses[from] || from == owner(),\\n            \\\"Transfer not allowed\\\"\\n        );\\n        _;\\n    }\\n\\n    function pause() public onlyOwner nonReentrant {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner nonReentrant {\\n        _unpause();\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override whenNotPaused {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n\\n    function transfer(address to, uint256 value)\\n        public\\n        virtual\\n        override\\n        isAddressAllowed(_msgSender())\\n        returns (bool)\\n    {\\n        super.transfer(to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) public virtual override isAddressAllowed(from) returns (bool) {\\n        super.transferFrom(from, to, value);\\n        return true;\\n    }\\n\\n    function updateAddressStatus(address _address, bool status)\\n        public\\n        onlyOwner\\n    {\\n        allowedAddresses[_address] = status;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@4.9.3/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@4.9.3/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@4.9.3/token/ERC20/extensions/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@4.9.3/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@4.9.3/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@4.9.3/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@4.9.3/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract DriftPresale\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AmbassadorPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ICO.Tier\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"ambassadorCode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ambassadorPercentExt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ambassadorsList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum ICO.userType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"amountOfAddressPerType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_code\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isStaker\",\"type\":\"bool\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"changeSaleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_code\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"changeStatusCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"codeOfAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"s1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"s2\",\"type\":\"string\"}],\"name\":\"compareStringsbyBytes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"enum ICO.Tier\",\"name\":\"_tier\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_code\",\"type\":\"string\"}],\"name\":\"createAmbassadorCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_code\",\"type\":\"string\"}],\"name\":\"createCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"}],\"name\":\"createStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eligibleBronzeAmbassador\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eligibleSilverAmbassador\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getAmbassadorInfo\",\"outputs\":[{\"internalType\":\"enum ICO.Tier\",\"name\":\"_tier\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_promocode\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_ambassador\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_earnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referrals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_raised\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAmbassadorList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getPriceRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ICO.userType\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"getUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"icoStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"icoStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"icoTarget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum ICO.userType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"isAddressExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAmbassadorEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"isEnableCode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isNotAlreadyAmbassador\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSalePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noOfAmbassadors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ICO.userType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"noOfTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ICO.Tier\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"percent\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"promoCode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"receivedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"contract DriftPresale\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensTransferred\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReceivedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum ICO.Tier\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"totalTierRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"updateAmbassadorPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"updateStakingLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"enum ICO.Tier\",\"name\":\"_tier\",\"type\":\"uint8\"}],\"name\":\"upgradeAmbassador\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ICO", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000045522fba064b497c5bfe9c6a462bdc9eb0b31b7d", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}