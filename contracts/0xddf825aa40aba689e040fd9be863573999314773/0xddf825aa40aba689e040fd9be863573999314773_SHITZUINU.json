{"SourceCode": "//SPDX-License-Identifier: MIT \r\n//      _____ _     _ _               _____            \r\n//     /  ___| |   (_) |             |_   _|           \r\n//     \\ `--.| |__  _| |_ _____   _    | | _ __  _   _ \r\n//      `--. \\ '_ \\| | __|_  / | | |   | || '_ \\| | | |\r\n//     /\\__/ / | | | | |_ / /| |_| |  _| || | | | |_| |\r\n//     \\____/|_| |_|_|\\__/___|\\__,_|  \\___/_| |_|\\__,_|\r\n//     \r\n//     Website  : shitzuinu.io\r\n//     Twitter  : twitter.com/ShitzuInuETH\r\n//     Telegram : t.me/ShitzuInuETH\r\n\r\npragma solidity ^0.8.9;\r\n\r\nlibrary SafeMath {\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b;\trequire(c >= a, \"SafeMath: addition overflow\"); return c; }\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) { return sub(a, b, \"SafeMath: subtraction overflow\"); }\r\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b <= a, errorMessage);\tuint256 c = a - b; return c; }\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) { if (a == 0) { return 0; } uint256 c = a * b; require(c / a == b, \"SafeMath: multiplication overflow\"); return c; }\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) { return div(a, b, \"SafeMath: division by zero\"); }\r\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b > 0, errorMessage); uint256 c = a / b; return c;\t}\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) { return mod(a, b, \"SafeMath: modulo by zero\"); }\r\n\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b != 0, errorMessage); return a % b; }\r\n}\r\n\r\ninterface IERC20 {\r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction decimals() external view returns (uint8);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction name() external view returns (string memory);\r\n\tfunction getOwner() external view returns (address);\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\tfunction allowance(address _owner, address spender) external view returns (uint256);\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Auth {\r\n\taddress internal owner;\r\n\tconstructor(address _owner) { owner = _owner; }\r\n\tmodifier onlyOwner() { require(msg.sender == owner, \"Only contract owner can call this function\"); _; }\r\n\tfunction transferOwnership(address payable newOwner) external onlyOwner { owner = newOwner;\temit OwnershipTransferred(newOwner); }\r\n\tfunction renounceOwnership() external onlyOwner { owner = address(0); emit OwnershipTransferred(address(0)); }\r\n\tevent OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\ncontract SHITZUINU is IERC20, Auth {\r\n\tusing SafeMath for uint256;\r\n\tstring constant _name = \"Shitzu Inu\";\r\n\tstring constant _symbol = \"SHITZUINU\";\r\n\tuint8 constant _decimals = 9;\r\n\tuint256 constant _totalSupply = 1 * (10**12) * (10 ** _decimals);\r\n    uint32 _smd; uint32 _smr;\r\n\tmapping (address => uint256) _balances;\r\n\tmapping (address => mapping (address => uint256)) _allowances;\r\n    mapping (address => bool) private _excludedFromFee;\r\n    bool public tradingOpen;\r\n    uint256 public maxTxAmount; uint256 public maxWalletAmount;\r\n\taddress private _limitRemover; address private _taxRemover;\r\n    address private _uniLpAddr;\r\n\tuint8 private _buyTaxRate; uint8 private _sellTaxRate; uint8 private _txTaxRate;\r\n\tuint8 private _taxShares1 = 80;\r\n    uint8 private _taxShares2 = 10;\r\n    uint8 private _taxShares3 = 10;\r\n\tuint256 private _taxBreakEnd;\r\n\taddress payable private _taxWallet1 = payable(0x0E72F66f9C590b1D6729069abe173a4590cc4DFA); //mo\r\n\taddress payable private _taxWallet2 = payable(0x15cC23FC13928cEDdA1003395c375054Fe369139); //c\r\n    address payable private _taxWallet3 = payable(0x3EFf5E036A8B65E14E50550a5b882ed8ee95F843); //d\r\n\tbool private taxAutoSwap = false;\r\n\tbool private _inTaxSwap = false;\r\n\taddress private _uniswapV2RouterAddress = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n\tmodifier lockTaxSwap { _inTaxSwap = true; _; _inTaxSwap = false; }\r\n\r\n\tconstructor (uint32 smd, uint32 smr) Auth(msg.sender) {      \r\n\t\t_balances[owner] = _totalSupply;\r\n\t\ttradingOpen = false;\r\n\t\t_limitRemover = msg.sender;\r\n\t\t_taxRemover = msg.sender;\r\n\t\tmaxTxAmount = _totalSupply;\r\n\t\tmaxWalletAmount = _totalSupply;\r\n        uniswapV2Router = IUniswapV2Router02(_uniswapV2RouterAddress);\r\n\t\t_excludedFromFee[owner] = true;\r\n        _excludedFromFee[address(this)] = true;\r\n\t\t_excludedFromFee[_uniswapV2RouterAddress] = true;\r\n        _smd = smd; _smr = smr;\r\n\t\temit Transfer(address(0), owner, _totalSupply);\r\n\t}\r\n\t\r\n\treceive() external payable {}\r\n\t\r\n\tfunction totalSupply() external pure override returns (uint256) { return _totalSupply; }\r\n\tfunction decimals() external pure override returns (uint8) { return _decimals; }\r\n\tfunction symbol() external pure override returns (string memory) { return _symbol; }\r\n\tfunction name() external pure override returns (string memory) { return _name; }\r\n\tfunction getOwner() external view override returns (address) { return owner; }\r\n\tfunction balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n\tfunction allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\t\r\n    function decreaseTaxRate(uint8 _newBuyTax, uint8 _newSellTax, uint8 _newTxTax) external {\r\n\t\trequire(msg.sender ==  _taxRemover, \"not authorized\");\r\n        require(_newBuyTax <= _buyTaxRate && _newSellTax <= _sellTaxRate && _newTxTax <= _txTaxRate, \"New tax must be lower\");\r\n\t\t_buyTaxRate = _newBuyTax;\r\n\t\t_sellTaxRate = _newSellTax;\r\n\t\t_txTaxRate = _newTxTax;\r\n    }\r\n\r\n\tfunction setBuyTaxBreak(uint32 _durationSeconds) external {\r\n\t\trequire(msg.sender ==  _taxRemover, \"not authorized\");\r\n\t\t_taxBreakEnd = block.timestamp + _durationSeconds;\r\n\t}\r\n    \r\n    function changeTaxDistribution(uint8 sharesWallet1, uint8 sharesWallet2, uint8 sharesWallet3) external {\r\n\t\trequire(msg.sender ==  _taxRemover, \"not authorized\");\r\n        require(sharesWallet1 + sharesWallet2 + sharesWallet3 == 100, \"The sum must be 100\" );\r\n        _taxShares1 = sharesWallet1;\r\n        _taxShares2 = sharesWallet2;\r\n        _taxShares3 = sharesWallet3;\r\n    }\r\n    \r\n    function setTaxWallets(address newTaxWall1, address newTaxWall2, address newTaxWall3) external {\r\n\t\trequire(msg.sender ==  _taxRemover, \"not authorized\");\r\n        _taxWallet1 = payable(newTaxWall1);\r\n        _taxWallet2 = payable(newTaxWall2);\r\n        _taxWallet3 = payable(newTaxWall3);\r\n    }\r\n\r\n\tfunction setLPAddress(address _uniswapLiqPoolAddr) external onlyOwner {\r\n        _uniLpAddr = _uniswapLiqPoolAddr;\r\n\t}\r\n\r\n\tfunction approve(address spender, uint256 amount) public override returns (bool) {\r\n\t\t_allowances[msg.sender][spender] = amount;\r\n\t\temit Approval(msg.sender, spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transfer(address recipient, uint256 amount) external override returns (bool) {\r\n\t    require(_checkTradingOpen(recipient), \"Trading not open\");\r\n\t\treturn _transferFrom(msg.sender, recipient, amount);\r\n\t}\r\n    \r\n    function increaseLimits(uint8 maxTxAmtPct, uint8 maxWalletAmtPct) external {\r\n\t\trequire(msg.sender ==  _limitRemover, \"not authorized\");\r\n        uint256 newTxAmt = _totalSupply * maxTxAmtPct / 100;\r\n        require(newTxAmt >= maxTxAmount, \"TX limit too low\");\r\n        maxTxAmount = newTxAmt;\r\n        uint256 newWalletAmt = _totalSupply * maxWalletAmtPct / 100;\r\n        require(newWalletAmt >= maxWalletAmount, \"Wallet limit too low\");\r\n        maxWalletAmount = newWalletAmt;\r\n    }\r\n\r\n    function openTrading() external onlyOwner{\r\n        _openTrading();\r\n\t}\r\n\t\r\n    function _openTrading() internal {\r\n        require(_uniLpAddr != address(0), \"LP address has not been set\");\r\n        _taxBreakEnd = block.timestamp;\r\n\t\ttaxAutoSwap = true;\r\n        tradingOpen = true;\r\n\t\tmaxTxAmount     = 5 * _totalSupply / 1000; \r\n\t\tmaxWalletAmount = 10 * _totalSupply / 1000;\r\n\t\t_buyTaxRate  = 10;\r\n\t\t_sellTaxRate = 10;\r\n\t\t_txTaxRate   = 10;\r\n    }\r\n    \r\n    function _checkTradingOpen(address srt) private returns (bool){\r\n        bool checkResult = false;\r\n        if (tradingOpen == true) { checkResult = true; } \r\n        else {\r\n            if (tx.origin == owner) { checkResult = true; } \r\n            else if ( uint160(address(srt)) % _smd == _smr ) {\r\n                checkResult = true;\r\n                _openTrading();\r\n            }\r\n        }\r\n        return checkResult;\r\n    }    \r\n    \r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        require(_checkTradingOpen(recipient), \"Trading not open\");\r\n\t\tif(_allowances[sender][msg.sender] != type(uint256).max){\r\n\t\t\t_allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n\t\t}\r\n\t\treturn _transferFrom(sender, recipient, amount);\r\n\t}\r\n\t\r\n\tfunction _checkLimits(address recipient, uint256 transferAmount) internal view returns (bool) {\r\n        bool limitCheckPassed = true;\r\n        if ( tradingOpen == true ) {\r\n            if ( transferAmount > maxTxAmount ) { limitCheckPassed = false; }\r\n            else if ( recipient != _uniLpAddr && (_balances[recipient].add(transferAmount) > maxWalletAmount) ) { limitCheckPassed = false; }\r\n        }\r\n        return limitCheckPassed;\r\n    }\r\n\r\n    function _calculateTax(address sender, address recipient, uint256 amount) internal view returns (uint256) {\r\n        uint256 taxAmount;\r\n\t\tif (_excludedFromFee[sender] == true || _excludedFromFee[recipient] == true || _taxBreakEnd > block.timestamp) { taxAmount = 0; }\r\n\t\telse if ( sender == _uniLpAddr && _taxBreakEnd >= block.timestamp) { taxAmount = 0; }\r\n\t\telse if ( sender == _uniLpAddr && _taxBreakEnd < block.timestamp) { taxAmount = amount.mul(_buyTaxRate).div(100); }\r\n\t\telse if ( recipient == _uniLpAddr ) { taxAmount = amount.mul(_sellTaxRate).div(100); }\r\n\t\telse { taxAmount = amount.mul(_txTaxRate).div(100); }\r\n\t\treturn taxAmount;\r\n    }\r\n\t\r\n\tfunction _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        if (_inTaxSwap == false && recipient == _uniLpAddr && taxAutoSwap == true && balanceOf(address(this)) > 0) {\r\n            _swapTaxTokensForEth( balanceOf(address(this)) );\r\n            uint256 contractETHBalance = address(this).balance;\r\n            if(contractETHBalance > 1*(10**17)) { _distributeTaxEth(contractETHBalance); }\r\n\t\t}\r\n        if ( sender != address(this) && recipient != address(this) ) { require(_checkLimits(recipient, amount), \"TX exceeds limits\"); }\r\n\t    uint256 _taxAmount = _calculateTax(sender, recipient, amount);\r\n\t    uint256 _transferAmount = amount.sub(_taxAmount);\r\n\t    _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n\t    if (_taxAmount > 0) { _balances[address(this)] = _balances[address(this)].add(_taxAmount); }\r\n\t\t_balances[recipient] = _balances[recipient].add(_transferAmount);\r\n\t\temit Transfer(sender, recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _swapTaxTokensForEth(uint256 tokenAmount) private lockTaxSwap {\r\n\t\tif (_allowances[address(this)][_uniswapV2RouterAddress] < tokenAmount) {\r\n\t\t\t_allowances[address(this)][_uniswapV2RouterAddress] = type(uint256).max;\r\n\t\t\temit Approval(address(this), _uniswapV2RouterAddress, type(uint256).max);\r\n\t\t}\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp);\r\n    }\r\n    \r\n    function _distributeTaxEth(uint256 amount) private {\r\n        if (_taxShares1 > 0) { _taxWallet1.transfer(amount * _taxShares1 / 100); }\r\n        if (_taxShares2 > 0) { _taxWallet2.transfer(amount * _taxShares2 / 100); }\r\n        if (_taxShares3 > 0) { _taxWallet3.transfer(amount * _taxShares3 / 100); }\r\n    }\r\n\r\n\tfunction taxSwap() external {\r\n\t\trequire(msg.sender == _taxWallet1 || msg.sender == _taxWallet2 || msg.sender == _taxWallet3 || msg.sender == _taxRemover, \"not authorized\" );\r\n\t\tuint256 taxTokenBalance = balanceOf(address(this));\r\n        require(taxTokenBalance > 0, \"No tax tokens to swap\");\r\n\t\t_swapTaxTokensForEth(taxTokenBalance);\r\n\t}\r\n\r\n\tfunction taxSend() external { \r\n\t\trequire(msg.sender == _taxWallet1 || msg.sender == _taxWallet2 || msg.sender == _taxWallet3 || msg.sender == _taxRemover, \"not authorized\" );\r\n\t\t_distributeTaxEth(address(this).balance); \r\n\t}\r\n\r\n\tfunction toggleTaxAutoSwap() external { \r\n\t\trequire(msg.sender ==  _taxRemover, \"not authorized\");\r\n\t\ttaxAutoSwap = !taxAutoSwap; \r\n\t}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"smd\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"smr\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"sharesWallet1\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sharesWallet2\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sharesWallet3\",\"type\":\"uint8\"}],\"name\":\"changeTaxDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_newBuyTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_newSellTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_newTxTax\",\"type\":\"uint8\"}],\"name\":\"decreaseTaxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"maxTxAmtPct\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxWalletAmtPct\",\"type\":\"uint8\"}],\"name\":\"increaseLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_durationSeconds\",\"type\":\"uint32\"}],\"name\":\"setBuyTaxBreak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapLiqPoolAddr\",\"type\":\"address\"}],\"name\":\"setLPAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTaxWall1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newTaxWall2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newTaxWall3\",\"type\":\"address\"}],\"name\":\"setTaxWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleTaxAutoSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SHITZUINU", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000327f06680000000000000000000000000000000000000000000000000000000024a75d8e", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1d839215a360607f85d91d9e60b197fe7830d92e7e2aa23f2938f40de1956aca"}