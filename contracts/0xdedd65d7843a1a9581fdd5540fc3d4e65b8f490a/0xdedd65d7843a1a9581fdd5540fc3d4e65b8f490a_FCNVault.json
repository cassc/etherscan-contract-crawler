{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Calculations.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport { Deposit, FCNVaultMetadata, OptionBarrierType, OptionBarrier, VaultStatus, Withdrawal } from \\\"./Structs.sol\\\";\\nimport { IOracle } from \\\"./interfaces/IOracle.sol\\\";\\nimport { ICegaState } from \\\"./interfaces/ICegaState.sol\\\";\\n\\nlibrary Calculations {\\n    uint256 public constant DAYS_IN_YEAR = 365;\\n    uint256 public constant SECONDS_TO_DAYS = 86400;\\n    uint256 public constant BPS_DECIMALS = 10 ** 4;\\n    uint256 public constant LARGE_CONSTANT = 10 ** 18;\\n    uint256 public constant ORACLE_STALE_DELAY = 1 days;\\n\\n    /**\\n     * @notice Calculates the current yield accumulated to the current day for a given vault\\n     */\\n    function calculateCurrentYield(FCNVaultMetadata storage self) public {\\n        require(self.vaultStatus == VaultStatus.Traded, \\\"500:WS\\\");\\n        uint256 currentTime = block.timestamp;\\n\\n        if (currentTime > self.tradeExpiry) {\\n            self.vaultStatus = VaultStatus.TradeExpired;\\n            return;\\n        }\\n\\n        uint256 numberOfDaysPassed = (currentTime - self.tradeDate) / SECONDS_TO_DAYS;\\n\\n        self.totalCouponPayoff = calculateCouponPayment(self.underlyingAmount, self.aprBps, numberOfDaysPassed);\\n    }\\n\\n    /**\\n     * @notice Permissionless method that reads price from oracle contracts and checks if barrier is triggered\\n     * @param cegaStateAddress is the address of the CegaState contract that stores the oracle addresses\\n     */\\n    function checkBarriers(FCNVaultMetadata storage self, address cegaStateAddress) public {\\n        if (self.isKnockedIn == true) {\\n            return;\\n        }\\n\\n        require(self.vaultStatus == VaultStatus.Traded, \\\"500:WS\\\");\\n\\n        for (uint256 i = 0; i < self.optionBarriersCount; i++) {\\n            OptionBarrier storage optionBarrier = self.optionBarriers[i];\\n\\n            // Knock In: Check if current price is less than barrier\\n            if (optionBarrier.barrierType == OptionBarrierType.KnockIn) {\\n                address oracle = getOracleAddress(optionBarrier, cegaStateAddress);\\n                (, int256 answer, uint256 startedAt, , ) = IOracle(oracle).latestRoundData();\\n                require(block.timestamp - ORACLE_STALE_DELAY <= startedAt, \\\"400:T\\\");\\n                if (uint256(answer) <= optionBarrier.barrierAbsoluteValue) {\\n                    self.isKnockedIn = true;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the final payoff for a given vault\\n     * @param self is the FCNVaultMetadata\\n     * @param cegaStateAddress is address of cegaState\\n     */\\n    function calculateVaultFinalPayoff(\\n        FCNVaultMetadata storage self,\\n        address cegaStateAddress\\n    ) public returns (uint256) {\\n        uint256 totalPrincipal;\\n        uint256 totalCouponPayment;\\n        uint256 principalToReturnBps = BPS_DECIMALS;\\n\\n        require(\\n            (self.vaultStatus == VaultStatus.TradeExpired || self.vaultStatus == VaultStatus.PayoffCalculated),\\n            \\\"500:WS\\\"\\n        );\\n\\n        // Calculate coupon payment\\n        totalCouponPayment = calculateCouponPayment(self.underlyingAmount, self.aprBps, self.tenorInDays);\\n\\n        // Calculate principal\\n        if (self.isKnockedIn) {\\n            principalToReturnBps = calculateKnockInRatio(self, cegaStateAddress);\\n        }\\n\\n        totalPrincipal = (self.underlyingAmount * principalToReturnBps) / BPS_DECIMALS;\\n        uint256 vaultFinalPayoff = totalPrincipal + totalCouponPayment;\\n        self.totalCouponPayoff = totalCouponPayment;\\n        self.vaultFinalPayoff = vaultFinalPayoff;\\n        self.vaultStatus = VaultStatus.PayoffCalculated;\\n        return vaultFinalPayoff;\\n    }\\n\\n    /**\\n     * @notice Calculates the percentage of principal to return to users if a knock in occurs.\\n     * Iterates through all knock-in barriers and checks the ratio of (spot/strike) for each asset\\n     * Returns the minimum of the knock-in ratios.\\n     * @param self is the FCNVaultMetadata\\n     * @param cegaStateAddress is address of cegaState\\n     */\\n    function calculateKnockInRatio(\\n        FCNVaultMetadata storage self,\\n        address cegaStateAddress\\n    ) public view returns (uint256) {\\n        OptionBarrier[] memory optionBarriers = self.optionBarriers;\\n        uint256 optionBarriersCount = self.optionBarriersCount;\\n\\n        uint256 minRatioBps = LARGE_CONSTANT;\\n        for (uint256 i = 0; i < optionBarriersCount; i++) {\\n            OptionBarrier memory optionBarrier = optionBarriers[i];\\n            address oracle = getOracleAddress(optionBarrier, cegaStateAddress);\\n            (, int256 answer, uint256 startedAt, , ) = IOracle(oracle).latestRoundData();\\n            require(block.timestamp - ORACLE_STALE_DELAY <= startedAt, \\\"400:T\\\");\\n\\n            // Only calculate the ratio if it is a knock in barrier\\n            if (optionBarrier.barrierType == OptionBarrierType.KnockIn) {\\n                uint256 ratioBps = (uint256(answer) * LARGE_CONSTANT) / optionBarrier.strikeAbsoluteValue;\\n                minRatioBps = Math.min(ratioBps, minRatioBps);\\n            }\\n        }\\n        return ((minRatioBps * BPS_DECIMALS)) / LARGE_CONSTANT;\\n    }\\n\\n    /**\\n     * @notice Calculates the fees that should be collected from a given vault\\n     * @param managementFeeBps is the management fee in bps\\n     * @param yieldFeeBps is the yield fee in bps\\n     */\\n    function calculateFees(\\n        FCNVaultMetadata storage self,\\n        uint256 managementFeeBps,\\n        uint256 yieldFeeBps\\n    ) public view returns (uint256, uint256, uint256) {\\n        uint256 totalFee = 0;\\n        uint256 managementFee = 0;\\n        uint256 yieldFee = 0;\\n\\n        uint256 underlyingAmount = self.underlyingAmount;\\n        uint256 numberOfDaysPassed = (self.tradeExpiry - self.vaultStart) / SECONDS_TO_DAYS;\\n\\n        managementFee =\\n            (underlyingAmount * numberOfDaysPassed * managementFeeBps * LARGE_CONSTANT) /\\n            DAYS_IN_YEAR /\\n            BPS_DECIMALS /\\n            LARGE_CONSTANT;\\n\\n        if (self.vaultFinalPayoff > underlyingAmount) {\\n            uint256 profit = self.vaultFinalPayoff - underlyingAmount;\\n            yieldFee = (profit * yieldFeeBps) / BPS_DECIMALS;\\n        }\\n\\n        totalFee = managementFee + yieldFee;\\n        return (totalFee, managementFee, yieldFee);\\n    }\\n\\n    /**\\n     * @notice Calculates the coupon payment accumulated for a given number of daysPassed\\n     * @param underlyingAmount is the amount of assets\\n     * @param aprBps is the apr in bps\\n     * @param daysPassed is the number of days that coupon payments have been accured for\\n     */\\n    function calculateCouponPayment(\\n        uint256 underlyingAmount,\\n        uint256 aprBps,\\n        uint256 daysPassed\\n    ) private pure returns (uint256) {\\n        return (underlyingAmount * daysPassed * aprBps * LARGE_CONSTANT) / DAYS_IN_YEAR / BPS_DECIMALS / LARGE_CONSTANT;\\n    }\\n\\n    /**\\n     * @notice Gets the oracle address for a given optionBarrier\\n     * @param optionBarrier is the option barrier\\n     * @param cegaStateAddress is the address of the Cega state contract\\n     */\\n    function getOracleAddress(\\n        OptionBarrier memory optionBarrier,\\n        address cegaStateAddress\\n    ) private view returns (address) {\\n        ICegaState cegaState = ICegaState(cegaStateAddress);\\n        address oracle = cegaState.oracleAddresses(optionBarrier.oracleName);\\n        require(oracle != address(0), \\\"400:Unregistered\\\");\\n        return oracle;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/FCNProduct.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport { ICegaState } from \\\"./interfaces/ICegaState.sol\\\";\\nimport { Deposit, FCNVaultMetadata, OptionBarrierType, OptionBarrier, VaultStatus, Withdrawal } from \\\"./Structs.sol\\\";\\nimport { FCNVault } from \\\"./FCNVault.sol\\\";\\nimport { Calculations } from \\\"./Calculations.sol\\\";\\n\\ncontract FCNProduct is ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using Calculations for FCNVaultMetadata;\\n\\n    event FCNProductCreated(\\n        address indexed cegaState,\\n        address indexed asset,\\n        string name,\\n        uint256 managementFeeBps,\\n        uint256 yieldFeeBps,\\n        uint256 maxDepositAmountLimit,\\n        uint256 minDepositAmount,\\n        uint256 minWithdrawalAmount\\n    );\\n\\n    event ManagementFeeBpsUpdated(uint256 managementFeeBps);\\n    event YieldFeeBpsUpdated(uint256 yieldFeeBps);\\n    event MinDepositAmountUpdated(uint256 minDepositAmount);\\n    event MinWithdrawalAmountUpdated(uint256 minWithdrawalAmount);\\n    event IsDepositQueueOpenUpdated(bool isDepositQueueOpen);\\n    event MaxDepositAmountLimitUpdated(uint256 maxDepositAmountLimit);\\n\\n    event VaultCreated(address indexed vaultAddress, string _tokenSymbol, string _tokenName, uint256 _vaultStart);\\n    event VaultMetadataUpdated(address indexed vaultAddress);\\n    event VaultRemoved(address indexed vaultAddress);\\n\\n    event TradeDataSet(\\n        address indexed vaultAddress,\\n        uint256 _tradeDate,\\n        uint256 _tradeExpiry,\\n        uint256 _aprBps,\\n        uint256 _tenorInDays\\n    );\\n\\n    event OptionBarrierAdded(\\n        address indexed vaultAddress,\\n        uint256 barrierBps,\\n        uint256 barrierAbsoluteValue,\\n        uint256 strikeBps,\\n        uint256 strikeAbsoluteValue,\\n        string asset,\\n        string oracleName,\\n        OptionBarrierType barrierType\\n    );\\n    event OptionBarrierUpated(\\n        address indexed vaultAddress,\\n        uint256 index,\\n        string _asset,\\n        uint256 _strikeAbsoluteValue,\\n        uint256 _barrierAbsoluteValue\\n    );\\n    event OptionBarrierOracleUpdated(address indexed vaultAddress, uint256 index, string _asset, string _oracleName);\\n    event OptionBarrierRemoved(address indexed vaultAddress, uint256 index, string asset);\\n\\n    event VaultStatusUpdated(address indexed vaultAddress, VaultStatus vaultStatus);\\n\\n    event DepositQueued(address indexed receiver, uint256 amount);\\n    event DepositProcessed(address indexed vaultAddress, address indexed receiver, uint256 amount);\\n\\n    event KnockInStatusUpdated(address indexed vaultAddress, bool isKnockIn);\\n\\n    event FeesCollected(\\n        address indexed vaultAddress,\\n        uint256 managementFee,\\n        uint256 yieldFee,\\n        uint256 totalFee,\\n        VaultStatus vaultStatus\\n    );\\n\\n    event WithdrawalQueued(address indexed vaultAddress, address indexed receiver, uint256 amountShares);\\n\\n    event WithdrawalProcessed(\\n        address indexed vaultAddress,\\n        address indexed receiver,\\n        uint256 amountShares,\\n        uint256 amountAssets\\n    );\\n\\n    event VaultRollover(address indexed vaultAddress, uint256 vaultStart, VaultStatus vaultStatus);\\n\\n    event VaultFinalPayoffCalculated(address indexed vaultAddress, uint256 finalPayoffAmount, VaultStatus vaultStatus);\\n\\n    event BarriersChecked(address indexed vaultAddress, bool isKnockedIn);\\n\\n    event AssetsReceivedFromCegaState(address indexed vaultAddress, uint256 amount);\\n\\n    event AssetsSentToTrade(\\n        address indexed vaultAddress,\\n        address indexed receiver,\\n        uint256 amount,\\n        VaultStatus vaultStatus\\n    );\\n\\n    ICegaState public cegaState;\\n\\n    address public immutable asset;\\n    string public name;\\n    uint256 public managementFeeBps; // basis points\\n    uint256 public yieldFeeBps; // basis points\\n    bool public isDepositQueueOpen;\\n    uint256 public maxDepositAmountLimit;\\n    uint256 public minDepositAmount;\\n    uint256 public minWithdrawalAmount;\\n\\n    uint256 public sumVaultUnderlyingAmounts;\\n    uint256 public queuedDepositsTotalAmount;\\n    uint256 public queuedDepositsCount;\\n\\n    mapping(address => FCNVaultMetadata) public vaults;\\n    address[] public vaultAddresses;\\n\\n    Deposit[] public depositQueue;\\n    mapping(address => Withdrawal[]) public withdrawalQueues;\\n\\n    /**\\n     * @notice Creates a new FCNProduct\\n     * @param _cegaState is the address of the CegaState contract\\n     * @param _asset is the underlying asset this product accepts\\n     * @param _name is the name of the product\\n     * @param _managementFeeBps is the management fee in bps\\n     * @param _yieldFeeBps is the yield fee in bps\\n     * @param _maxDepositAmountLimit is the deposit limit for the product\\n     * @param _minDepositAmount is the minimum units of underlying for a user to deposit\\n     * @param _minWithdrawalAmount is the minimum units of vault shares for a user to withdraw\\n     */\\n    constructor(\\n        address _cegaState,\\n        address _asset,\\n        string memory _name,\\n        uint256 _managementFeeBps,\\n        uint256 _yieldFeeBps,\\n        uint256 _maxDepositAmountLimit,\\n        uint256 _minDepositAmount,\\n        uint256 _minWithdrawalAmount\\n    ) {\\n        require(_managementFeeBps < 1e4, \\\"400:IB\\\");\\n        require(_yieldFeeBps < 1e4, \\\"400:IB\\\");\\n        require(_minDepositAmount > 0, \\\"400:IU\\\");\\n        require(_minWithdrawalAmount > 0, \\\"400:IU\\\");\\n\\n        cegaState = ICegaState(_cegaState);\\n        asset = _asset;\\n        name = _name;\\n        managementFeeBps = _managementFeeBps;\\n        yieldFeeBps = _yieldFeeBps;\\n        maxDepositAmountLimit = _maxDepositAmountLimit;\\n        isDepositQueueOpen = false;\\n\\n        minDepositAmount = _minDepositAmount;\\n        minWithdrawalAmount = _minWithdrawalAmount;\\n\\n        emit FCNProductCreated(\\n            _cegaState,\\n            _asset,\\n            _name,\\n            _managementFeeBps,\\n            _yieldFeeBps,\\n            _maxDepositAmountLimit,\\n            _minDepositAmount,\\n            _minWithdrawalAmount\\n        );\\n    }\\n\\n    /**\\n     * @notice Asserts whether the sender has the DEFAULT_ADMIN_ROLE\\n     */\\n    modifier onlyDefaultAdmin() {\\n        require(cegaState.isDefaultAdmin(msg.sender), \\\"403:DA\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Asserts whether the sender has the TRADER_ADMIN_ROLE\\n     */\\n    modifier onlyTraderAdmin() {\\n        require(cegaState.isTraderAdmin(msg.sender), \\\"403:TA\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Asserts whether the sender has the OPERATOR_ADMIN_ROLE\\n     */\\n    modifier onlyOperatorAdmin() {\\n        require(cegaState.isOperatorAdmin(msg.sender), \\\"403:OA\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Asserts that the vault has been initialized & is a Cega Vault\\n     * @param vaultAddress is the address of the vault\\n     */\\n    modifier onlyValidVault(address vaultAddress) {\\n        require(vaults[vaultAddress].vaultStart != 0, \\\"400:VA\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns array of vault addresses associated with the product\\n     */\\n    function getVaultAddresses() public view returns (address[] memory) {\\n        return vaultAddresses;\\n    }\\n\\n    /**\\n     * @notice Returns vault metadata for a given vault address, includes OptionBarrier array in output\\n     * @param vaultAddress is the address of the vault\\n     */\\n    function getVaultMetadata(address vaultAddress) public view returns (FCNVaultMetadata memory) {\\n        return vaults[vaultAddress];\\n    }\\n\\n    /**\\n     * @notice Sets the management fee for the product\\n     * @param _managementFeeBps is the management fee in bps (100% = 10000)\\n     */\\n    function setManagementFeeBps(uint256 _managementFeeBps) public onlyOperatorAdmin {\\n        require(_managementFeeBps < 1e4, \\\"400:IB\\\");\\n        managementFeeBps = _managementFeeBps;\\n        emit ManagementFeeBpsUpdated(_managementFeeBps);\\n    }\\n\\n    /**\\n     * @notice Sets the yieldfee for the product\\n     * @param _yieldFeeBps is the management fee in bps (100% = 10000)\\n     */\\n    function setYieldFeeBps(uint256 _yieldFeeBps) public onlyOperatorAdmin {\\n        require(_yieldFeeBps < 1e4, \\\"400:IB\\\");\\n        yieldFeeBps = _yieldFeeBps;\\n        emit YieldFeeBpsUpdated(_yieldFeeBps);\\n    }\\n\\n    /**\\n     * @notice Sets the min deposit amount for the product\\n     * @param _minDepositAmount is the minimum units of underlying for a user to deposit\\n     */\\n    function setMinDepositAmount(uint256 _minDepositAmount) public onlyOperatorAdmin {\\n        require(_minDepositAmount > 0, \\\"400:IU\\\");\\n        minDepositAmount = _minDepositAmount;\\n        emit MinDepositAmountUpdated(_minDepositAmount);\\n    }\\n\\n    /**\\n     * @notice Sets the min withdrawal amount for the product\\n     * @param _minWithdrawalAmount is the minimum units of vault shares for a user to withdraw\\n     */\\n    function setMinWithdrawalAmount(uint256 _minWithdrawalAmount) public onlyOperatorAdmin {\\n        require(_minWithdrawalAmount > 0, \\\"400:IU\\\");\\n        minWithdrawalAmount = _minWithdrawalAmount;\\n        emit MinWithdrawalAmountUpdated(_minWithdrawalAmount);\\n    }\\n\\n    /**\\n     * @notice Toggles whether the product is open or closed for deposits\\n     * @param _isDepositQueueOpen is a boolean for whether the deposit queue is accepting deposits\\n     */\\n    function setIsDepositQueueOpen(bool _isDepositQueueOpen) public onlyOperatorAdmin {\\n        isDepositQueueOpen = _isDepositQueueOpen;\\n        emit IsDepositQueueOpenUpdated(_isDepositQueueOpen);\\n    }\\n\\n    /**\\n     * @notice Sets the maximum deposit limit for the product\\n     * @param _maxDepositAmountLimit is the deposit limit for the product\\n     */\\n    function setMaxDepositAmountLimit(uint256 _maxDepositAmountLimit) public onlyTraderAdmin {\\n        require(queuedDepositsTotalAmount + sumVaultUnderlyingAmounts <= _maxDepositAmountLimit, \\\"400:TooSmall\\\");\\n        maxDepositAmountLimit = _maxDepositAmountLimit;\\n        emit MaxDepositAmountLimitUpdated(_maxDepositAmountLimit);\\n    }\\n\\n    /**\\n     * @notice Creates a new vault for the product & maps the new vault address to the vaultMetadata\\n     * @param _tokenName is the name of the token for the vault\\n     * @param _tokenSymbol is the symbol for the vault's token\\n     * @param _vaultStart is the timestamp of the vault's start\\n     */\\n    function createVault(\\n        string memory _tokenName,\\n        string memory _tokenSymbol,\\n        uint256 _vaultStart\\n    ) public onlyTraderAdmin returns (address vaultAddress) {\\n        require(_vaultStart != 0, \\\"400:VS\\\");\\n        FCNVault vault = new FCNVault(asset, _tokenName, _tokenSymbol);\\n        address newVaultAddress = address(vault);\\n        vaultAddresses.push(newVaultAddress);\\n\\n        // vaultMetadata & all of its fields are automatically initialized if it doesn't already exist in the mapping\\n        FCNVaultMetadata storage vaultMetadata = vaults[newVaultAddress];\\n        vaultMetadata.vaultStart = _vaultStart;\\n        vaultMetadata.vaultAddress = newVaultAddress;\\n\\n        // Leverage is always set to 1\\n        vaultMetadata.leverage = 1;\\n\\n        emit VaultCreated(newVaultAddress, _tokenSymbol, _tokenName, _vaultStart);\\n        return newVaultAddress;\\n    }\\n\\n    /**\\n     * @notice defaultAdmin has the ability to override & change the vaultMetadata\\n     * If a value is not input, it will override to the default value\\n     * @param vaultAddress is the address of the vault\\n     * @param metadata is the vault's metadata that we want to change to\\n     */\\n    function setVaultMetadata(\\n        address vaultAddress,\\n        FCNVaultMetadata calldata metadata\\n    ) public onlyDefaultAdmin onlyValidVault(vaultAddress) {\\n        require(metadata.vaultStart > 0, \\\"400:VS\\\");\\n        require(metadata.leverage == 1, \\\"400:L\\\");\\n        vaults[vaultAddress] = metadata;\\n        emit VaultMetadataUpdated(vaultAddress);\\n    }\\n\\n    /**\\n     * @notice defaultAdmin has the ability to remove a Vault\\n     * @param i is the index of the vault in the vaultAddresses array\\n     */\\n    function removeVault(uint256 i) public onlyDefaultAdmin {\\n        address vaultAddress = vaultAddresses[i];\\n        vaultAddresses[i] = vaultAddresses[vaultAddresses.length - 1];\\n        vaultAddresses.pop();\\n        delete vaults[vaultAddress];\\n\\n        emit VaultRemoved(vaultAddress);\\n    }\\n\\n    /**\\n     * @notice Trader admin sets the trade data after the auction\\n     * @param vaultAddress is the address of the vault\\n     * @param _tradeDate is the official timestamp of when the options contracts begins\\n     * @param _tradeExpiry is the timestamp of when the trade will expire\\n     * @param _aprBps is the APR in bps\\n     * @param _tenorInDays is the length of the options contract\\n     */\\n    function setTradeData(\\n        address vaultAddress,\\n        uint256 _tradeDate,\\n        uint256 _tradeExpiry,\\n        uint256 _aprBps,\\n        uint256 _tenorInDays\\n    ) public onlyTraderAdmin onlyValidVault(vaultAddress) {\\n        FCNVaultMetadata storage metadata = vaults[vaultAddress];\\n        require(metadata.vaultStatus == VaultStatus.NotTraded, \\\"500:WS\\\");\\n        require(_tradeDate >= metadata.vaultStart, \\\"400:TD\\\");\\n        require(_tradeExpiry > _tradeDate, \\\"400:TE\\\");\\n\\n        // allow for a 1 day difference in input tenor and derived tenor\\n        uint256 derivedDays = (_tradeExpiry - _tradeDate) / 1 days;\\n        if (derivedDays < _tenorInDays) {\\n            require(_tenorInDays - derivedDays <= 1, \\\"400:TN\\\");\\n        } else {\\n            require(derivedDays - _tenorInDays <= 1, \\\"400:TN\\\");\\n        }\\n\\n        metadata.tradeDate = _tradeDate;\\n        metadata.tradeExpiry = _tradeExpiry;\\n        metadata.aprBps = _aprBps;\\n        metadata.tenorInDays = _tenorInDays;\\n\\n        emit TradeDataSet(vaultAddress, _tradeDate, _tradeExpiry, _aprBps, _tenorInDays);\\n    }\\n\\n    /**\\n     * @notice Trader admin can add an option with barriers to a given vault\\n     * @param vaultAddress is the address of the vault\\n     * @param optionBarrier is the data for the option with barriers\\n     */\\n    function addOptionBarrier(\\n        address vaultAddress,\\n        OptionBarrier calldata optionBarrier\\n    ) public onlyTraderAdmin onlyValidVault(vaultAddress) {\\n        FCNVaultMetadata storage metadata = vaults[vaultAddress];\\n        require(\\n            metadata.vaultStatus == VaultStatus.DepositsClosed || metadata.vaultStatus == VaultStatus.NotTraded,\\n            \\\"500:WS\\\"\\n        );\\n        metadata.optionBarriers.push(optionBarrier);\\n        metadata.optionBarriersCount++;\\n\\n        emit OptionBarrierAdded(\\n            vaultAddress,\\n            optionBarrier.barrierBps,\\n            optionBarrier.barrierAbsoluteValue,\\n            optionBarrier.strikeBps,\\n            optionBarrier.strikeAbsoluteValue,\\n            optionBarrier.asset,\\n            optionBarrier.oracleName,\\n            optionBarrier.barrierType\\n        );\\n    }\\n\\n    /**\\n     * @notice Trader admin has ability to update price fixings & observation time.\\n     * @param vaultAddress is the address of the vault\\n     * @param index is the index of the option barrier we want to update\\n     * @param _asset is the ticker symbol of the asset we want to update\\n     * (included as a safety check since the asset name should match the option barrier at given index)\\n     * @param _strikeAbsoluteValue is the actual strike price of the asset\\n     * @param _barrierAbsoluteValue is the actual price that will cause the barrier to be triggered\\n     */\\n    function updateOptionBarrier(\\n        address vaultAddress,\\n        uint256 index,\\n        string calldata _asset,\\n        uint256 _strikeAbsoluteValue,\\n        uint256 _barrierAbsoluteValue\\n    ) public onlyTraderAdmin onlyValidVault(vaultAddress) {\\n        FCNVaultMetadata storage vaultMetadata = vaults[vaultAddress];\\n\\n        require(_strikeAbsoluteValue > 0, \\\"400:SV\\\");\\n        require(_barrierAbsoluteValue > 0, \\\"400:BV\\\");\\n\\n        OptionBarrier storage optionBarrier = vaultMetadata.optionBarriers[index];\\n        require(keccak256(abi.encodePacked(optionBarrier.asset)) == keccak256(abi.encodePacked(_asset)), \\\"400:AS\\\");\\n\\n        optionBarrier.strikeAbsoluteValue = _strikeAbsoluteValue;\\n        optionBarrier.barrierAbsoluteValue = _barrierAbsoluteValue;\\n\\n        emit OptionBarrierUpated(vaultAddress, index, _asset, _strikeAbsoluteValue, _barrierAbsoluteValue);\\n    }\\n\\n    /**\\n     * @notice Operator admin has ability to update the oracle for an option barrier.\\n     * @param vaultAddress is the address of the vault\\n     * @param index is the index of the option barrier we want to update\\n     * @param _asset is the ticker symbol of the asset we want to update\\n     * (included as a safety check since the asset name should match the option barrier at given index)\\n     * @param newOracleName is the name of the new oracle (must also register this name in CegaState)\\n     */\\n    function updateOptionBarrierOracle(\\n        address vaultAddress,\\n        uint256 index,\\n        string calldata _asset,\\n        string memory newOracleName\\n    ) public onlyOperatorAdmin onlyValidVault(vaultAddress) {\\n        FCNVaultMetadata storage vaultMetadata = vaults[vaultAddress];\\n        require(\\n            vaultMetadata.vaultStatus == VaultStatus.DepositsClosed ||\\n                vaultMetadata.vaultStatus == VaultStatus.NotTraded,\\n            \\\"500:WS\\\"\\n        );\\n\\n        OptionBarrier storage optionBarrier = vaultMetadata.optionBarriers[index];\\n        require(keccak256(abi.encodePacked(optionBarrier.asset)) == keccak256(abi.encodePacked(_asset)), \\\"400:AS\\\");\\n\\n        require(cegaState.oracleAddresses(newOracleName) != address(0), \\\"400:OR\\\");\\n        optionBarrier.oracleName = newOracleName;\\n\\n        emit OptionBarrierOracleUpdated(vaultAddress, index, _asset, newOracleName);\\n    }\\n\\n    /**\\n     * @notice Trader admin has ability to remove an option barrier.\\n     * The index for all option barriers to the right of the index are shifted by one to the left.\\n     * @param vaultAddress is the address of the vault\\n     * @param index is the index of the option barrier we want to remove\\n     * @param _asset is the ticker symbol of the asset we want to update\\n     * (included as a safety check since the asset should match the option barrier at given index)\\n     */\\n    function removeOptionBarrier(\\n        address vaultAddress,\\n        uint256 index,\\n        string calldata _asset\\n    ) public onlyTraderAdmin onlyValidVault(vaultAddress) {\\n        FCNVaultMetadata storage vaultMetadata = vaults[vaultAddress];\\n        require(\\n            vaultMetadata.vaultStatus == VaultStatus.DepositsClosed ||\\n                vaultMetadata.vaultStatus == VaultStatus.NotTraded,\\n            \\\"500:WS\\\"\\n        );\\n\\n        OptionBarrier[] storage optionBarriers = vaultMetadata.optionBarriers;\\n        require(\\n            keccak256(abi.encodePacked(optionBarriers[index].asset)) == keccak256(abi.encodePacked(_asset)),\\n            \\\"400:AS\\\"\\n        );\\n\\n        // swap and pop\\n        optionBarriers[index] = optionBarriers[optionBarriers.length - 1];\\n        optionBarriers.pop();\\n        vaultMetadata.optionBarriersCount -= 1;\\n\\n        emit OptionBarrierRemoved(vaultAddress, index, _asset);\\n    }\\n\\n    /**\\n     * Operator admin has ability to override the vault's status\\n     * @param vaultAddress is the address of the vault\\n     * @param _vaultStatus is the new status for the vault\\n     */\\n    function setVaultStatus(\\n        address vaultAddress,\\n        VaultStatus _vaultStatus\\n    ) public onlyOperatorAdmin onlyValidVault(vaultAddress) {\\n        FCNVaultMetadata storage metadata = vaults[vaultAddress];\\n        metadata.vaultStatus = _vaultStatus;\\n        emit VaultStatusUpdated(vaultAddress, _vaultStatus);\\n    }\\n\\n    /**\\n     * Trader admin has ability to set the vault to \\\"DepositsOpen\\\" state\\n     * @param vaultAddress is the address of the vault\\n     */\\n    function openVaultDeposits(address vaultAddress) public onlyTraderAdmin onlyValidVault(vaultAddress) {\\n        FCNVaultMetadata storage vaultMetadata = vaults[vaultAddress];\\n        require(vaultMetadata.vaultStatus == VaultStatus.DepositsClosed, \\\"500:WS\\\");\\n        vaultMetadata.vaultStatus = VaultStatus.DepositsOpen;\\n        emit VaultStatusUpdated(vaultAddress, VaultStatus.DepositsOpen);\\n    }\\n\\n    /**\\n     * Default admin has an override to set the knock in status for a vault\\n     * @param vaultAddress is the address of the vault\\n     * @param newState is the new state for isKnockedIn\\n     */\\n    function setKnockInStatus(\\n        address vaultAddress,\\n        bool newState\\n    ) public onlyDefaultAdmin onlyValidVault(vaultAddress) {\\n        FCNVaultMetadata storage vaultMetadata = vaults[vaultAddress];\\n        vaultMetadata.isKnockedIn = newState;\\n        emit KnockInStatusUpdated(vaultAddress, newState);\\n    }\\n\\n    /**\\n     * Transfers assets from the user to the product\\n     * @param amount is the amount of assets being deposited\\n     */\\n    function addToDepositQueue(uint256 amount) public nonReentrant {\\n        require(isDepositQueueOpen, \\\"500:NotOpen\\\");\\n        require(amount >= minDepositAmount, \\\"400:DA\\\");\\n\\n        queuedDepositsCount += 1;\\n        queuedDepositsTotalAmount += amount;\\n        require(queuedDepositsTotalAmount + sumVaultUnderlyingAmounts <= maxDepositAmountLimit, \\\"500:TooBig\\\");\\n\\n        IERC20(asset).safeTransferFrom(msg.sender, address(this), amount);\\n        depositQueue.push(Deposit({ amount: amount, receiver: msg.sender }));\\n        emit DepositQueued(msg.sender, amount);\\n    }\\n\\n    /**\\n     * Processes the product's deposit queue into a specific vault\\n     * @param vaultAddress is the address of the vault\\n     * @param maxProcessCount is the number of elements in the deposit queue to be processed\\n     */\\n    function processDepositQueue(\\n        address vaultAddress,\\n        uint256 maxProcessCount\\n    ) public nonReentrant onlyTraderAdmin onlyValidVault(vaultAddress) {\\n        FCNVaultMetadata storage vaultMetadata = vaults[vaultAddress];\\n        require(vaultMetadata.vaultStatus == VaultStatus.DepositsOpen, \\\"500:WS\\\");\\n\\n        FCNVault vault = FCNVault(vaultAddress);\\n        require(!(vaultMetadata.underlyingAmount == 0 && vault.totalSupply() > 0), \\\"500:Z\\\");\\n\\n        uint256 processCount = Math.min(queuedDepositsCount, maxProcessCount);\\n        Deposit storage deposit;\\n\\n        while (processCount > 0) {\\n            deposit = depositQueue[queuedDepositsCount - 1];\\n\\n            queuedDepositsTotalAmount -= deposit.amount;\\n            vault.deposit(deposit.amount, deposit.receiver);\\n            vaultMetadata.underlyingAmount += deposit.amount;\\n            sumVaultUnderlyingAmounts += deposit.amount;\\n            vaultMetadata.currentAssetAmount += deposit.amount;\\n\\n            depositQueue.pop();\\n            queuedDepositsCount -= 1;\\n            processCount -= 1;\\n\\n            emit DepositProcessed(vaultAddress, deposit.receiver, deposit.amount);\\n        }\\n\\n        if (queuedDepositsCount == 0) {\\n            vaultMetadata.vaultStatus = VaultStatus.NotTraded;\\n            emit VaultStatusUpdated(vaultAddress, VaultStatus.NotTraded);\\n        }\\n    }\\n\\n    /**\\n     * @notice Queues a withdrawal for the token holder of a specific vault token\\n     * @param vaultAddress is the address of the vault\\n     * @param amountShares is the number of vault tokens to be redeemed\\n     */\\n    function addToWithdrawalQueue(\\n        address vaultAddress,\\n        uint256 amountShares\\n    ) public nonReentrant onlyValidVault(vaultAddress) {\\n        require(amountShares >= minWithdrawalAmount, \\\"400:WA\\\");\\n\\n        FCNVaultMetadata storage vaultMetadata = vaults[vaultAddress];\\n\\n        IERC20(vaultAddress).safeTransferFrom(msg.sender, address(this), amountShares);\\n        Withdrawal[] storage withdrawalQueue = withdrawalQueues[vaultAddress];\\n        withdrawalQueue.push(Withdrawal({ amountShares: amountShares, receiver: msg.sender }));\\n        vaultMetadata.queuedWithdrawalsCount += 1;\\n        vaultMetadata.queuedWithdrawalsSharesAmount += amountShares;\\n\\n        emit WithdrawalQueued(vaultAddress, msg.sender, amountShares);\\n    }\\n\\n    /**\\n     * @notice Permissionless method that reads price from oracle contracts and checks if barrier is triggered\\n     * @param vaultAddress is address of the vault\\n     */\\n    function checkBarriers(address vaultAddress) public onlyValidVault(vaultAddress) {\\n        FCNVaultMetadata storage vaultMetadata = vaults[vaultAddress];\\n        vaultMetadata.checkBarriers(address(cegaState));\\n        emit BarriersChecked(vaultAddress, vaultMetadata.isKnockedIn);\\n    }\\n\\n    /**\\n     * @notice Calculates the final payoff for a given vault\\n     * @param vaultAddress is address of the vault\\n     */\\n    function calculateVaultFinalPayoff(\\n        address vaultAddress\\n    ) public onlyValidVault(vaultAddress) returns (uint256 vaultFinalPayoff) {\\n        FCNVaultMetadata storage vaultMetadata = vaults[vaultAddress];\\n        vaultFinalPayoff = vaultMetadata.calculateVaultFinalPayoff(address(cegaState));\\n        emit VaultFinalPayoffCalculated(vaultAddress, vaultFinalPayoff, VaultStatus.PayoffCalculated);\\n    }\\n\\n    /**\\n     * @notice Calculates the percentage of principal to return to users if a knock in occurs.\\n     * Iterates through all knock-in barriers and checks the ratio of (spot/strike) for each asset\\n     * Returns the minimum of the knock-in ratios.\\n     * @param vaultAddress is address of the vault\\n     */\\n    function calculateKnockInRatio(address vaultAddress) public view returns (uint256 knockInRatio) {\\n        FCNVaultMetadata storage vaultMetadata = vaults[vaultAddress];\\n        return vaultMetadata.calculateKnockInRatio(address(cegaState));\\n    }\\n\\n    /**\\n     * @notice receive assets and allocate the underlying asset to the specified vault's balance\\n     * @param vaultAddress is the address of the vault\\n     * @param amount is the amount to transfer\\n     */\\n    function receiveAssetsFromCegaState(\\n        address vaultAddress,\\n        uint256 amount\\n    ) public nonReentrant onlyValidVault(vaultAddress) {\\n        require(msg.sender == address(cegaState), \\\"403:CS\\\");\\n        FCNVaultMetadata storage vaultMetadata = vaults[vaultAddress];\\n\\n        IERC20(asset).safeTransferFrom(msg.sender, address(this), amount);\\n        vaultMetadata.currentAssetAmount += amount;\\n\\n        emit AssetsReceivedFromCegaState(vaultAddress, amount);\\n    }\\n\\n    /**\\n     * @notice Calculates the fees that should be collected from a given vault\\n     * @param vaultAddress is the address of the vault\\n     */\\n    function calculateFees(\\n        address vaultAddress\\n    ) public view returns (uint256 totalFee, uint256 managementFee, uint256 yieldFee) {\\n        FCNVaultMetadata storage vaultMetadata = vaults[vaultAddress];\\n        return vaultMetadata.calculateFees(managementFeeBps, yieldFeeBps);\\n    }\\n\\n    /**\\n     * @notice Transfers the correct amount of fees to the fee recipient\\n     * @param vaultAddress is the address of the vault\\n     */\\n    function collectFees(address vaultAddress) public nonReentrant onlyTraderAdmin onlyValidVault(vaultAddress) {\\n        FCNVaultMetadata storage vaultMetadata = vaults[vaultAddress];\\n        require(vaultMetadata.vaultStatus == VaultStatus.PayoffCalculated, \\\"500:WS\\\");\\n\\n        (uint256 totalFees, uint256 managementFee, uint256 yieldFee) = calculateFees(vaultAddress);\\n        totalFees = Math.min(totalFees, vaultMetadata.vaultFinalPayoff);\\n        IERC20(asset).safeTransfer(cegaState.feeRecipient(), totalFees);\\n        vaultMetadata.currentAssetAmount -= totalFees;\\n\\n        vaultMetadata.vaultStatus = VaultStatus.FeesCollected;\\n        sumVaultUnderlyingAmounts -= vaultMetadata.underlyingAmount;\\n        vaultMetadata.underlyingAmount = vaultMetadata.vaultFinalPayoff - totalFees;\\n        sumVaultUnderlyingAmounts += vaultMetadata.underlyingAmount;\\n\\n        emit FeesCollected(vaultAddress, managementFee, yieldFee, totalFees, VaultStatus.FeesCollected);\\n    }\\n\\n    /**\\n     * @notice Processes all the queued withdrawals in the withdrawal queue\\n     * @param vaultAddress is the address of the vault\\n     * @param maxProcessCount is the maximum number of withdrawals to process in the queue\\n     */\\n    function processWithdrawalQueue(\\n        address vaultAddress,\\n        uint256 maxProcessCount\\n    ) public nonReentrant onlyTraderAdmin onlyValidVault(vaultAddress) {\\n        FCNVaultMetadata storage vaultMetadata = vaults[vaultAddress];\\n        // Needs zombie state so that we can restore the vault\\n        require(\\n            vaultMetadata.vaultStatus == VaultStatus.FeesCollected || vaultMetadata.vaultStatus == VaultStatus.Zombie,\\n            \\\"500:WS\\\"\\n        );\\n        Withdrawal[] storage withdrawalQueue = withdrawalQueues[vaultAddress];\\n\\n        FCNVault vault = FCNVault(vaultAddress);\\n\\n        uint256 processCount = Math.min(vaultMetadata.queuedWithdrawalsCount, maxProcessCount);\\n        uint256 amountAssets;\\n        Withdrawal memory withdrawal;\\n        while (processCount > 0) {\\n            withdrawal = withdrawalQueue[vaultMetadata.queuedWithdrawalsCount - 1];\\n\\n            amountAssets = vault.redeem(withdrawal.amountShares);\\n            vaultMetadata.underlyingAmount -= amountAssets;\\n            sumVaultUnderlyingAmounts -= amountAssets;\\n            vaultMetadata.queuedWithdrawalsSharesAmount -= withdrawal.amountShares;\\n            IERC20(asset).safeTransfer(withdrawal.receiver, amountAssets);\\n            vaultMetadata.currentAssetAmount -= amountAssets;\\n\\n            withdrawalQueue.pop();\\n            vaultMetadata.queuedWithdrawalsCount -= 1;\\n            processCount -= 1;\\n\\n            emit WithdrawalProcessed(vaultAddress, withdrawal.receiver, withdrawal.amountShares, amountAssets);\\n        }\\n\\n        if (vaultMetadata.queuedWithdrawalsCount == 0) {\\n            if (vaultMetadata.underlyingAmount == 0 && vault.totalSupply() > 0) {\\n                vaultMetadata.vaultStatus = VaultStatus.Zombie;\\n                emit VaultStatusUpdated(vaultAddress, VaultStatus.Zombie);\\n            } else {\\n                vaultMetadata.vaultStatus = VaultStatus.WithdrawalQueueProcessed;\\n                emit VaultStatusUpdated(vaultAddress, VaultStatus.WithdrawalQueueProcessed);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Resets the vault to the default state after the trade is settled\\n     * @param vaultAddress is the address of the vault\\n     */\\n    function rolloverVault(address vaultAddress) public onlyTraderAdmin onlyValidVault(vaultAddress) {\\n        FCNVaultMetadata storage vaultMetadata = vaults[vaultAddress];\\n        require(vaultMetadata.vaultStatus == VaultStatus.WithdrawalQueueProcessed, \\\"500:WS\\\");\\n        require(vaultMetadata.tradeExpiry != 0, \\\"400:TE\\\");\\n        vaultMetadata.vaultStart = vaultMetadata.tradeExpiry;\\n        vaultMetadata.tradeDate = 0;\\n        vaultMetadata.tradeExpiry = 0;\\n        vaultMetadata.aprBps = 0;\\n        vaultMetadata.vaultStatus = VaultStatus.DepositsClosed;\\n        vaultMetadata.totalCouponPayoff = 0;\\n        vaultMetadata.vaultFinalPayoff = 0;\\n        vaultMetadata.isKnockedIn = false;\\n\\n        emit VaultRollover(vaultAddress, vaultMetadata.vaultStart, VaultStatus.DepositsClosed);\\n    }\\n\\n    /**\\n     * @notice Trader sends assets from the product to a third party wallet address\\n     * @param vaultAddress is the address of the vault\\n     * @param receiver is the receiver of the assets\\n     * @param amount is the amount of the assets to be sent\\n     */\\n    function sendAssetsToTrade(\\n        address vaultAddress,\\n        address receiver,\\n        uint256 amount\\n    ) public nonReentrant onlyTraderAdmin onlyValidVault(vaultAddress) {\\n        require(cegaState.marketMakerAllowList(receiver), \\\"400:NotAllowed\\\");\\n        FCNVaultMetadata storage vaultMetadata = vaults[vaultAddress];\\n        require(amount <= vaultMetadata.currentAssetAmount, \\\"400:TooBig\\\");\\n        IERC20(asset).safeTransfer(receiver, amount);\\n        vaultMetadata.currentAssetAmount = vaultMetadata.currentAssetAmount - amount;\\n        vaultMetadata.vaultStatus = VaultStatus.Traded;\\n\\n        emit AssetsSentToTrade(vaultAddress, receiver, amount, VaultStatus.Traded);\\n    }\\n\\n    /**\\n     * @notice Calculates the current yield accumulated to the current day for a given vault\\n     * @param vaultAddress is the address of the vault\\n     */\\n    function calculateCurrentYield(address vaultAddress) public onlyValidVault(vaultAddress) {\\n        FCNVaultMetadata storage vaultMetadata = vaults[vaultAddress];\\n        vaultMetadata.calculateCurrentYield();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/FCNVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { FCNProduct } from \\\"./FCNProduct.sol\\\";\\nimport { FCNVaultMetadata, VaultStatus } from \\\"./Structs.sol\\\";\\n\\ncontract FCNVault is ERC20, Ownable {\\n    using SafeERC20 for ERC20;\\n\\n    address public asset;\\n    FCNProduct public fcnProduct;\\n\\n    /**\\n     * @notice Creates a new FCNVault that is owned by the FCNProduct\\n     * @param _asset is the address of the underlying asset\\n     * @param _tokenName is the name of the token\\n     * @param _tokenSymbol is the name of the token symbol\\n     */\\n    constructor(address _asset, string memory _tokenName, string memory _tokenSymbol) ERC20(_tokenName, _tokenSymbol) {\\n        asset = _asset;\\n        fcnProduct = FCNProduct(owner());\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return 6;\\n    }\\n\\n    /**\\n     * @notice Returns underlying amount associated for the vault\\n     */\\n    function totalAssets() public view returns (uint256) {\\n        (, , , , , uint256 underlyingAmount, , , , , , , , , , ) = fcnProduct.vaults(address(this));\\n        return underlyingAmount;\\n    }\\n\\n    /**\\n     * @notice Converts units of shares to assets\\n     * @param shares is the number of vault tokens\\n     */\\n    function convertToAssets(uint256 shares) public view returns (uint256) {\\n        uint256 _totalSupply = totalSupply();\\n        if (_totalSupply == 0) return 0;\\n        return (shares * totalAssets()) / _totalSupply;\\n    }\\n\\n    /**\\n     * @notice Converts units assets to shares\\n     * @param assets is the amount of underlying assets\\n     */\\n    function convertToShares(uint256 assets) public view returns (uint256) {\\n        uint256 _totalSupply = totalSupply();\\n        uint256 _totalAssets = totalAssets();\\n        if (_totalAssets == 0 || _totalSupply == 0) return assets;\\n        return (assets * _totalSupply) / _totalAssets;\\n    }\\n\\n    /**\\n     * Product can deposit into the vault\\n     * @param assets is the number of underlying assets to be deposited\\n     * @param receiver is the address of the original depositor\\n     */\\n    function deposit(uint256 assets, address receiver) public onlyOwner returns (uint256) {\\n        uint256 shares = convertToShares(assets);\\n\\n        _mint(receiver, shares);\\n\\n        return shares;\\n    }\\n\\n    /**\\n     * Redeem a given amount of shares in return for assets\\n     * Shares are burned from the caller\\n     * @param shares is the amount of shares (vault tokens) to be redeemed\\n     */\\n    function redeem(uint256 shares) external onlyOwner returns (uint256) {\\n        uint256 assets = convertToAssets(shares);\\n\\n        _burn(msg.sender, shares);\\n\\n        return assets;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAggregatorV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IAggregatorV3 {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    function getRoundData(\\n        uint80 _roundId\\n    )\\n        external\\n        view\\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICegaState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\ninterface ICegaState {\\n    function marketMakerAllowList(address marketMaker) external view returns (bool);\\n\\n    function products(string memory productName) external view returns (address);\\n\\n    function oracleAddresses(string memory oracleName) external view returns (address);\\n\\n    function oracleNames() external view returns (string[] memory);\\n\\n    function productNames() external view returns (string[] memory);\\n\\n    function feeRecipient() external view returns (address);\\n\\n    function isDefaultAdmin(address sender) external view returns (bool);\\n\\n    function isTraderAdmin(address sender) external view returns (bool);\\n\\n    function isOperatorAdmin(address sender) external view returns (bool);\\n\\n    function isServiceAdmin(address sender) external view returns (bool);\\n\\n    function getOracleNames() external view returns (string[] memory);\\n\\n    function addOracle(string memory oracleName, address oracleAddress) external;\\n\\n    function removeOracle(string memory oracleName) external;\\n\\n    function getProductNames() external view returns (string[] memory);\\n\\n    function addProduct(string memory productName, address product) external;\\n\\n    function removeProduct(string memory productName) external;\\n\\n    function updateMarketMakerPermission(address marketMaker, bool allow) external;\\n\\n    function setFeeRecipient(address _feeRecipient) external;\\n\\n    function moveAssetsToProduct(string memory productName, address vaultAddress, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport { IAggregatorV3 } from \\\"./IAggregatorV3.sol\\\";\\nimport { RoundData } from \\\"../Structs.sol\\\";\\n\\ninterface IOracle is IAggregatorV3 {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    function cegaState() external view returns (address);\\n\\n    function oracleData() external view returns (RoundData[] memory);\\n\\n    function nextRoundId() external view returns (uint80);\\n\\n    function addNextRoundData(RoundData calldata _roundData) external;\\n\\n    function updateRoundData(uint80 roundId, RoundData calldata _roundData) external;\\n\\n    function getRoundData(\\n        uint80 _roundId\\n    )\\n        external\\n        view\\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\"\r\n    },\r\n    \"contracts/Structs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nenum OptionBarrierType {\\n    None,\\n    KnockIn\\n}\\n\\nstruct Deposit {\\n    uint256 amount;\\n    address receiver;\\n}\\n\\nstruct Withdrawal {\\n    uint256 amountShares;\\n    address receiver;\\n}\\n\\nenum VaultStatus {\\n    DepositsClosed,\\n    DepositsOpen,\\n    NotTraded,\\n    Traded,\\n    TradeExpired,\\n    PayoffCalculated,\\n    FeesCollected,\\n    WithdrawalQueueProcessed,\\n    Zombie\\n}\\n\\nstruct OptionBarrier {\\n    uint256 barrierBps;\\n    uint256 barrierAbsoluteValue;\\n    uint256 strikeBps;\\n    uint256 strikeAbsoluteValue;\\n    string asset;\\n    string oracleName;\\n    OptionBarrierType barrierType;\\n}\\n\\nstruct FCNVaultMetadata {\\n    uint256 vaultStart;\\n    uint256 tradeDate;\\n    uint256 tradeExpiry;\\n    uint256 aprBps;\\n    uint256 tenorInDays;\\n    uint256 underlyingAmount; // This is how many assets were ever deposited into the vault\\n    uint256 currentAssetAmount; // This is how many assets are currently allocated for the vault (not sent for trade)\\n    uint256 totalCouponPayoff;\\n    uint256 vaultFinalPayoff;\\n    uint256 queuedWithdrawalsSharesAmount;\\n    uint256 queuedWithdrawalsCount;\\n    uint256 optionBarriersCount;\\n    uint256 leverage;\\n    address vaultAddress;\\n    VaultStatus vaultStatus;\\n    bool isKnockedIn;\\n    OptionBarrier[] optionBarriers;\\n}\\n\\nstruct RoundData {\\n    int256 answer;\\n    uint256 startedAt;\\n    uint256 updatedAt;\\n    uint80 answeredInRound;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yul\": true\r\n      }\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fcnProduct\",\"outputs\":[{\"internalType\":\"contract FCNProduct\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FCNVault", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000001c43656761205661756c742028233120737570657263686172676572290000000000000000000000000000000000000000000000000000000000000000000000066c70436567610000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}