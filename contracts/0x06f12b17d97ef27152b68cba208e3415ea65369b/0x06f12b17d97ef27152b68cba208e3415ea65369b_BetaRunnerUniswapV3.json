{"SourceCode": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity 0.8.6;\r\n\r\n\r\n\r\n// Part: BetaRunnerWithCallback\r\n\r\ncontract BetaRunnerWithCallback {\r\n  address private constant NO_CALLER = address(42); // nonzero so we don't repeatedly clear storage\r\n  address private caller = NO_CALLER;\r\n\r\n  modifier withCallback() {\r\n    require(caller == NO_CALLER);\r\n    caller = msg.sender;\r\n    _;\r\n    caller = NO_CALLER;\r\n  }\r\n\r\n  modifier isCallback() {\r\n    require(caller == tx.origin);\r\n    _;\r\n  }\r\n}\r\n\r\n// Part: BytesLib\r\n\r\nlibrary BytesLib {\r\n  function slice(\r\n    bytes memory _bytes,\r\n    uint _start,\r\n    uint _length\r\n  ) internal pure returns (bytes memory) {\r\n    require(_length + 31 >= _length, 'slice_overflow');\r\n    require(_start + _length >= _start, 'slice_overflow');\r\n    require(_bytes.length >= _start + _length, 'slice_outOfBounds');\r\n\r\n    bytes memory tempBytes;\r\n\r\n    assembly {\r\n      switch iszero(_length)\r\n      case 0 {\r\n        // Get a location of some free memory and store it in tempBytes as\r\n        // Solidity does for memory variables.\r\n        tempBytes := mload(0x40)\r\n\r\n        // The first word of the slice result is potentially a partial\r\n        // word read from the original array. To read it, we calculate\r\n        // the length of that partial word and start copying that many\r\n        // bytes into the array. The first word we copy will start with\r\n        // data we don't care about, but the last `lengthmod` bytes will\r\n        // land at the beginning of the contents of the new array. When\r\n        // we're done copying, we overwrite the full first word with\r\n        // the actual length of the slice.\r\n        let lengthmod := and(_length, 31)\r\n\r\n        // The multiplication in the next line is necessary\r\n        // because when slicing multiples of 32 bytes (lengthmod == 0)\r\n        // the following copy loop was copying the origin's length\r\n        // and then ending prematurely not copying everything it should.\r\n        let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\r\n        let end := add(mc, _length)\r\n\r\n        for {\r\n          // The multiplication in the next line has the same exact purpose\r\n          // as the one above.\r\n          let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\r\n        } lt(mc, end) {\r\n          mc := add(mc, 0x20)\r\n          cc := add(cc, 0x20)\r\n        } {\r\n          mstore(mc, mload(cc))\r\n        }\r\n\r\n        mstore(tempBytes, _length)\r\n\r\n        //update free-memory pointer\r\n        //allocating the array padded to 32 bytes like the compiler does now\r\n        mstore(0x40, and(add(mc, 31), not(31)))\r\n      }\r\n      //if we want a zero-length slice let's just return a zero-length array\r\n      default {\r\n        tempBytes := mload(0x40)\r\n        //zero out the 32 bytes slice we are about to return\r\n        //we need to do it because Solidity does not garbage collect\r\n        mstore(tempBytes, 0)\r\n\r\n        mstore(0x40, add(tempBytes, 0x20))\r\n      }\r\n    }\r\n\r\n    return tempBytes;\r\n  }\r\n\r\n  function toAddress(bytes memory _bytes, uint _start) internal pure returns (address) {\r\n    require(_start + 20 >= _start, 'toAddress_overflow');\r\n    require(_bytes.length >= _start + 20, 'toAddress_outOfBounds');\r\n    address tempAddress;\r\n\r\n    assembly {\r\n      tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\r\n    }\r\n\r\n    return tempAddress;\r\n  }\r\n\r\n  function toUint24(bytes memory _bytes, uint _start) internal pure returns (uint24) {\r\n    require(_start + 3 >= _start, 'toUint24_overflow');\r\n    require(_bytes.length >= _start + 3, 'toUint24_outOfBounds');\r\n    uint24 tempUint;\r\n\r\n    assembly {\r\n      tempUint := mload(add(add(_bytes, 0x3), _start))\r\n    }\r\n\r\n    return tempUint;\r\n  }\r\n}\r\n\r\n// Part: IBetaBank\r\n\r\ninterface IBetaBank {\r\n  /// @dev Returns the address of BToken of the given underlying token, or 0 if not exists.\r\n  function bTokens(address _underlying) external view returns (address);\r\n\r\n  /// @dev Returns the address of the underlying of the given BToken, or 0 if not exists.\r\n  function underlyings(address _bToken) external view returns (address);\r\n\r\n  /// @dev Returns the address of the oracle contract.\r\n  function oracle() external view returns (address);\r\n\r\n  /// @dev Returns the address of the config contract.\r\n  function config() external view returns (address);\r\n\r\n  /// @dev Returns the interest rate model smart contract.\r\n  function interestModel() external view returns (address);\r\n\r\n  /// @dev Returns the position's collateral token and AmToken.\r\n  function getPositionTokens(address _owner, uint _pid)\r\n    external\r\n    view\r\n    returns (address _collateral, address _bToken);\r\n\r\n  /// @dev Returns the debt of the given position. Can't be view as it needs to call accrue.\r\n  function fetchPositionDebt(address _owner, uint _pid) external returns (uint);\r\n\r\n  /// @dev Returns the LTV of the given position. Can't be view as it needs to call accrue.\r\n  function fetchPositionLTV(address _owner, uint _pid) external returns (uint);\r\n\r\n  /// @dev Opens a new position in the Beta smart contract.\r\n  function open(\r\n    address _owner,\r\n    address _underlying,\r\n    address _collateral\r\n  ) external returns (uint pid);\r\n\r\n  /// @dev Borrows tokens on the given position.\r\n  function borrow(\r\n    address _owner,\r\n    uint _pid,\r\n    uint _amount\r\n  ) external;\r\n\r\n  /// @dev Repays tokens on the given position.\r\n  function repay(\r\n    address _owner,\r\n    uint _pid,\r\n    uint _amount\r\n  ) external;\r\n\r\n  /// @dev Puts more collateral to the given position.\r\n  function put(\r\n    address _owner,\r\n    uint _pid,\r\n    uint _amount\r\n  ) external;\r\n\r\n  /// @dev Takes some collateral out of the position.\r\n  function take(\r\n    address _owner,\r\n    uint _pid,\r\n    uint _amount\r\n  ) external;\r\n\r\n  /// @dev Liquidates the given position.\r\n  function liquidate(\r\n    address _owner,\r\n    uint _pid,\r\n    uint _amount\r\n  ) external;\r\n}\r\n\r\n// Part: IUniswapV3Pool\r\n\r\ninterface IUniswapV3Pool {\r\n  function mint(\r\n    address recipient,\r\n    int24 tickLower,\r\n    int24 tickUpper,\r\n    uint128 amount,\r\n    bytes calldata data\r\n  ) external returns (uint amount0, uint amount1);\r\n\r\n  function swap(\r\n    address recipient,\r\n    bool zeroForOne,\r\n    int amountSpecified,\r\n    uint160 sqrtPriceLimitX96,\r\n    bytes calldata data\r\n  ) external returns (int amount0, int amount1);\r\n\r\n  function initialize(uint160 sqrtPriceX96) external;\r\n}\r\n\r\n// Part: IUniswapV3SwapCallback\r\n\r\ninterface IUniswapV3SwapCallback {\r\n  function uniswapV3SwapCallback(\r\n    int amount0Delta,\r\n    int amount1Delta,\r\n    bytes calldata data\r\n  ) external;\r\n}\r\n\r\n// Part: IWETH\r\n\r\ninterface IWETH {\r\n  function deposit() external payable;\r\n\r\n  function withdraw(uint wad) external;\r\n\r\n  function approve(address guy, uint wad) external returns (bool);\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@4.2.0/Address\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@4.2.0/Context\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@4.2.0/IERC20\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@4.2.0/Math\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute.\r\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a / b + (a % b == 0 ? 0 : 1);\r\n    }\r\n}\r\n\r\n// Part: SafeCast\r\n\r\n/// @title Safe casting methods\r\n/// @notice Contains methods for safely casting between types\r\nlibrary SafeCast {\r\n  /// @notice Cast a uint256 to a uint160, revert on overflow\r\n  /// @param y The uint256 to be downcasted\r\n  /// @return z The downcasted integer, now type uint160\r\n  function toUint160(uint y) internal pure returns (uint160 z) {\r\n    require((z = uint160(y)) == y);\r\n  }\r\n\r\n  /// @notice Cast a int256 to a int128, revert on overflow or underflow\r\n  /// @param y The int256 to be downcasted\r\n  /// @return z The downcasted integer, now type int128\r\n  function toInt128(int y) internal pure returns (int128 z) {\r\n    require((z = int128(y)) == y);\r\n  }\r\n\r\n  /// @notice Cast a uint256 to a int256, revert on overflow\r\n  /// @param y The uint256 to be casted\r\n  /// @return z The casted integer, now type int256\r\n  function toInt256(uint y) internal pure returns (int z) {\r\n    require(y < 2**255);\r\n    z = int(y);\r\n  }\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@4.2.0/Ownable\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@4.2.0/SafeERC20\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// Part: Path\r\n\r\n/// @title Functions for manipulating path data for multihop swaps\r\nlibrary Path {\r\n  using BytesLib for bytes;\r\n\r\n  /// @dev The length of the bytes encoded address\r\n  uint private constant ADDR_SIZE = 20;\r\n  /// @dev The length of the bytes encoded fee\r\n  uint private constant FEE_SIZE = 3;\r\n\r\n  /// @dev The offset of a single token address and pool fee\r\n  uint private constant NEXT_OFFSET = ADDR_SIZE + FEE_SIZE;\r\n  /// @dev The offset of an encoded pool key\r\n  uint private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\r\n  /// @dev The minimum length of an encoding that contains 2 or more pools\r\n  uint private constant MULTIPLE_POOLS_MIN_LENGTH = POP_OFFSET + NEXT_OFFSET;\r\n\r\n  /// @notice Returns true iff the path contains two or more pools\r\n  /// @param path The encoded swap path\r\n  /// @return True if path contains two or more pools, otherwise false\r\n  function hasMultiplePools(bytes memory path) internal pure returns (bool) {\r\n    return path.length >= MULTIPLE_POOLS_MIN_LENGTH;\r\n  }\r\n\r\n  /// @notice Decodes the first pool in path\r\n  /// @param path The bytes encoded swap path\r\n  /// @return tokenA The first token of the given pool\r\n  /// @return tokenB The second token of the given pool\r\n  /// @return fee The fee level of the pool\r\n  function decodeFirstPool(bytes memory path)\r\n    internal\r\n    pure\r\n    returns (\r\n      address tokenA,\r\n      address tokenB,\r\n      uint24 fee\r\n    )\r\n  {\r\n    tokenA = path.toAddress(0);\r\n    fee = path.toUint24(ADDR_SIZE);\r\n    tokenB = path.toAddress(NEXT_OFFSET);\r\n  }\r\n\r\n  /// @notice Decodes the last pool in path\r\n  /// @param path The bytes encoded swap path\r\n  /// @return tokenA The first token of the given pool\r\n  /// @return tokenB The second token of the given pool\r\n  /// @return fee The fee level of the pool\r\n  function decodeLastPool(bytes memory path)\r\n    internal\r\n    pure\r\n    returns (\r\n      address tokenA,\r\n      address tokenB,\r\n      uint24 fee\r\n    )\r\n  {\r\n    tokenB = path.toAddress(path.length - ADDR_SIZE);\r\n    fee = path.toUint24(path.length - NEXT_OFFSET);\r\n    tokenA = path.toAddress(path.length - POP_OFFSET);\r\n  }\r\n\r\n  /// @notice Skips a token + fee element from the buffer and returns the remainder\r\n  /// @param path The swap path\r\n  /// @return The remaining token + fee elements in the path\r\n  function skipToken(bytes memory path) internal pure returns (bytes memory) {\r\n    return path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET);\r\n  }\r\n}\r\n\r\n// Part: BetaRunnerBase\r\n\r\ncontract BetaRunnerBase is Ownable {\r\n  using SafeERC20 for IERC20;\r\n\r\n  address public immutable betaBank;\r\n  address public immutable weth;\r\n\r\n  modifier onlyEOA() {\r\n    require(msg.sender == tx.origin, 'BetaRunnerBase/not-eoa');\r\n    _;\r\n  }\r\n\r\n  constructor(address _betaBank, address _weth) {\r\n    address bweth = IBetaBank(_betaBank).bTokens(_weth);\r\n    require(bweth != address(0), 'BetaRunnerBase/no-bweth');\r\n    IERC20(_weth).safeApprove(_betaBank, type(uint).max);\r\n    IERC20(_weth).safeApprove(bweth, type(uint).max);\r\n    betaBank = _betaBank;\r\n    weth = _weth;\r\n  }\r\n\r\n  function _borrow(\r\n    address _owner,\r\n    uint _pid,\r\n    address _underlying,\r\n    address _collateral,\r\n    uint _amountBorrow,\r\n    uint _amountCollateral\r\n  ) internal {\r\n    if (_pid == type(uint).max) {\r\n      _pid = IBetaBank(betaBank).open(_owner, _underlying, _collateral);\r\n    } else {\r\n      (address collateral, address bToken) = IBetaBank(betaBank).getPositionTokens(_owner, _pid);\r\n      require(_collateral == collateral, '_borrow/collateral-not-_collateral');\r\n      require(_underlying == IBetaBank(betaBank).underlyings(bToken), '_borrow/bad-underlying');\r\n    }\r\n    _approve(_collateral, betaBank, _amountCollateral);\r\n    IBetaBank(betaBank).put(_owner, _pid, _amountCollateral);\r\n    IBetaBank(betaBank).borrow(_owner, _pid, _amountBorrow);\r\n  }\r\n\r\n  function _repay(\r\n    address _owner,\r\n    uint _pid,\r\n    address _underlying,\r\n    address _collateral,\r\n    uint _amountRepay,\r\n    uint _amountCollateral\r\n  ) internal {\r\n    (address collateral, address bToken) = IBetaBank(betaBank).getPositionTokens(_owner, _pid);\r\n    require(_collateral == collateral, '_repay/collateral-not-_collateral');\r\n    require(_underlying == IBetaBank(betaBank).underlyings(bToken), '_repay/bad-underlying');\r\n    _approve(_underlying, bToken, _amountRepay);\r\n    IBetaBank(betaBank).repay(_owner, _pid, _amountRepay);\r\n    IBetaBank(betaBank).take(_owner, _pid, _amountCollateral);\r\n  }\r\n\r\n  function _transferIn(\r\n    address _token,\r\n    address _from,\r\n    uint _amount\r\n  ) internal {\r\n    if (_token == weth) {\r\n      require(_from == msg.sender, '_transferIn/not-from-sender');\r\n      require(_amount <= msg.value, '_transferIn/insufficient-eth-amount');\r\n      IWETH(weth).deposit{value: _amount}();\r\n      if (msg.value > _amount) {\r\n        (bool success, ) = _from.call{value: msg.value - _amount}(new bytes(0));\r\n        require(success, '_transferIn/eth-transfer-failed');\r\n      }\r\n    } else {\r\n      IERC20(_token).safeTransferFrom(_from, address(this), _amount);\r\n    }\r\n  }\r\n\r\n  function _transferOut(\r\n    address _token,\r\n    address _to,\r\n    uint _amount\r\n  ) internal {\r\n    if (_token == weth) {\r\n      IWETH(weth).withdraw(_amount);\r\n      (bool success, ) = _to.call{value: _amount}(new bytes(0));\r\n      require(success, '_transferOut/eth-transfer-failed');\r\n    } else {\r\n      IERC20(_token).safeTransfer(_to, _amount);\r\n    }\r\n  }\r\n\r\n  /// @dev Approves infinite on the given token for the given spender if current approval is insufficient.\r\n  function _approve(\r\n    address _token,\r\n    address _spender,\r\n    uint _minAmount\r\n  ) internal {\r\n    uint current = IERC20(_token).allowance(address(this), _spender);\r\n    if (current < _minAmount) {\r\n      if (current != 0) {\r\n        IERC20(_token).safeApprove(_spender, 0);\r\n      }\r\n      IERC20(_token).safeApprove(_spender, type(uint).max);\r\n    }\r\n  }\r\n\r\n  /// @dev Caps repay amount by current position's debt.\r\n  function _capRepay(\r\n    address _owner,\r\n    uint _pid,\r\n    uint _amountRepay\r\n  ) internal returns (uint) {\r\n    return Math.min(_amountRepay, IBetaBank(betaBank).fetchPositionDebt(_owner, _pid));\r\n  }\r\n\r\n  /// @dev Recovers lost tokens for whatever reason by the owner.\r\n  function recover(address _token, uint _amount) external onlyOwner {\r\n    if (_amount == type(uint).max) {\r\n      _amount = IERC20(_token).balanceOf(address(this));\r\n    }\r\n    IERC20(_token).safeTransfer(msg.sender, _amount);\r\n  }\r\n\r\n  /// @dev Recovers lost ETH for whatever reason by the owner.\r\n  function recoverETH(uint _amount) external onlyOwner {\r\n    if (_amount == type(uint).max) {\r\n      _amount = address(this).balance;\r\n    }\r\n    (bool success, ) = msg.sender.call{value: _amount}(new bytes(0));\r\n    require(success, 'recoverETH/eth-transfer-failed');\r\n  }\r\n\r\n  /// @dev Override Ownable.sol renounceOwnership to prevent accidental call\r\n  function renounceOwnership() public override onlyOwner {\r\n    revert('renounceOwnership/disabled');\r\n  }\r\n\r\n  receive() external payable {\r\n    require(msg.sender == weth, 'receive/not-weth');\r\n  }\r\n}\r\n\r\n// File: BetaRunnerUniswapV3.sol\r\n\r\ncontract BetaRunnerUniswapV3 is BetaRunnerBase, BetaRunnerWithCallback, IUniswapV3SwapCallback {\r\n  using SafeERC20 for IERC20;\r\n  using Path for bytes;\r\n  using SafeCast for uint;\r\n\r\n  /// @dev Constants from Uniswap V3 to be used for swap\r\n  /// (https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/TickMath.sol)\r\n  uint160 internal constant MIN_SQRT_RATIO = 4295128739;\r\n  uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\r\n\r\n  address public immutable factory;\r\n  bytes32 public immutable codeHash;\r\n\r\n  constructor(\r\n    address _betaBank,\r\n    address _weth,\r\n    address _factory,\r\n    bytes32 _codeHash\r\n  ) BetaRunnerBase(_betaBank, _weth) {\r\n    factory = _factory;\r\n    codeHash = _codeHash;\r\n  }\r\n\r\n  struct ShortData {\r\n    uint pid;\r\n    uint amountBorrow;\r\n    uint amountPutExtra;\r\n    bytes path;\r\n    uint amountOutMin;\r\n  }\r\n\r\n  struct CloseData {\r\n    uint pid;\r\n    uint amountRepay;\r\n    uint amountTake;\r\n    bytes path;\r\n    uint amountInMax;\r\n  }\r\n\r\n  struct CallbackData {\r\n    uint pid;\r\n    address path0;\r\n    uint amount0;\r\n    int memo; // positive if short (extra collateral) | negative if close (amount to take)\r\n    bytes path;\r\n    uint slippageControl; // amountInMax if close | amountOutMin if short\r\n  }\r\n\r\n  /// @dev Borrows the asset using the given collateral, and swaps it using the given path.\r\n  function short(ShortData calldata _data) external payable onlyEOA withCallback {\r\n    (, address collateral, ) = _data.path.decodeLastPool();\r\n    _transferIn(collateral, msg.sender, _data.amountPutExtra);\r\n    (address tokenIn, address tokenOut, uint24 fee) = _data.path.decodeFirstPool();\r\n    bool zeroForOne = tokenIn < tokenOut;\r\n    CallbackData memory cb = CallbackData({\r\n      pid: _data.pid,\r\n      path0: tokenIn,\r\n      amount0: _data.amountBorrow,\r\n      memo: _data.amountPutExtra.toInt256(),\r\n      path: _data.path,\r\n      slippageControl: _data.amountOutMin\r\n    });\r\n    IUniswapV3Pool(_poolFor(tokenIn, tokenOut, fee)).swap(\r\n      address(this),\r\n      zeroForOne,\r\n      _data.amountBorrow.toInt256(),\r\n      zeroForOne ? MIN_SQRT_RATIO + 1 : MAX_SQRT_RATIO - 1,\r\n      abi.encode(cb)\r\n    );\r\n  }\r\n\r\n  /// @dev Swaps the collateral to the underlying asset using the given path, and repays it to the pool.\r\n  function close(CloseData calldata _data) external payable onlyEOA withCallback {\r\n    uint amountRepay = _capRepay(msg.sender, _data.pid, _data.amountRepay);\r\n    (address tokenOut, address tokenIn, uint24 fee) = _data.path.decodeFirstPool();\r\n    bool zeroForOne = tokenIn < tokenOut;\r\n    CallbackData memory cb = CallbackData({\r\n      pid: _data.pid,\r\n      path0: tokenOut,\r\n      amount0: amountRepay,\r\n      memo: -_data.amountTake.toInt256(),\r\n      path: _data.path,\r\n      slippageControl: _data.amountInMax\r\n    });\r\n    IUniswapV3Pool(_poolFor(tokenIn, tokenOut, fee)).swap(\r\n      address(this),\r\n      zeroForOne,\r\n      -amountRepay.toInt256(),\r\n      zeroForOne ? MIN_SQRT_RATIO + 1 : MAX_SQRT_RATIO - 1,\r\n      abi.encode(cb)\r\n    );\r\n  }\r\n\r\n  /// @dev Continues the action through uniswapv3\r\n  function uniswapV3SwapCallback(\r\n    int _amount0Delta,\r\n    int _amount1Delta,\r\n    bytes calldata _data\r\n  ) external override isCallback {\r\n    CallbackData memory data = abi.decode(_data, (CallbackData));\r\n    (uint amountToPay, uint amountReceived) = _amount0Delta > 0\r\n      ? (uint(_amount0Delta), uint(-_amount1Delta))\r\n      : (uint(_amount1Delta), uint(-_amount0Delta));\r\n    if (data.memo > 0) {\r\n      _shortCallback(amountToPay, amountReceived, data);\r\n    } else {\r\n      _closeCallback(amountToPay, amountReceived, data);\r\n    }\r\n  }\r\n\r\n  function _shortCallback(\r\n    uint _amountToPay,\r\n    uint _amountReceived,\r\n    CallbackData memory data\r\n  ) internal {\r\n    (address tokenIn, address tokenOut, uint24 prevFee) = data.path.decodeFirstPool();\r\n    require(msg.sender == _poolFor(tokenIn, tokenOut, prevFee), '_shortCallback/bad-caller');\r\n    if (data.path.hasMultiplePools()) {\r\n      data.path = data.path.skipToken();\r\n      (, address tokenNext, uint24 fee) = data.path.decodeFirstPool();\r\n      bool zeroForOne = tokenOut < tokenNext;\r\n      IUniswapV3Pool(_poolFor(tokenOut, tokenNext, fee)).swap(\r\n        address(this),\r\n        zeroForOne,\r\n        _amountReceived.toInt256(),\r\n        zeroForOne ? MIN_SQRT_RATIO + 1 : MAX_SQRT_RATIO - 1,\r\n        abi.encode(data)\r\n      );\r\n    } else {\r\n      uint amountPut = _amountReceived + uint(data.memo);\r\n      require(_amountReceived >= data.slippageControl, '!slippage');\r\n      _borrow(tx.origin, data.pid, data.path0, tokenOut, data.amount0, amountPut);\r\n    }\r\n    IERC20(tokenIn).safeTransfer(msg.sender, _amountToPay);\r\n  }\r\n\r\n  function _closeCallback(\r\n    uint _amountToPay,\r\n    uint,\r\n    CallbackData memory data\r\n  ) internal {\r\n    (address tokenOut, address tokenIn, uint24 prevFee) = data.path.decodeFirstPool();\r\n    require(msg.sender == _poolFor(tokenIn, tokenOut, prevFee), '_closeCallback/bad-caller');\r\n    if (data.path.hasMultiplePools()) {\r\n      data.path = data.path.skipToken();\r\n      (, address tokenNext, uint24 fee) = data.path.decodeFirstPool();\r\n      bool zeroForOne = tokenNext < tokenIn;\r\n      IUniswapV3Pool(_poolFor(tokenIn, tokenNext, fee)).swap(\r\n        msg.sender,\r\n        zeroForOne,\r\n        -_amountToPay.toInt256(),\r\n        zeroForOne ? MIN_SQRT_RATIO + 1 : MAX_SQRT_RATIO - 1,\r\n        abi.encode(data)\r\n      );\r\n    } else {\r\n      require(_amountToPay <= data.slippageControl, '!slippage');\r\n      uint amountTake = uint(-data.memo);\r\n      _repay(tx.origin, data.pid, data.path0, tokenIn, data.amount0, amountTake);\r\n      IERC20(tokenIn).safeTransfer(msg.sender, _amountToPay);\r\n      _transferOut(tokenIn, tx.origin, IERC20(tokenIn).balanceOf(address(this)));\r\n    }\r\n  }\r\n\r\n  function _poolFor(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint24 fee\r\n  ) internal view returns (address) {\r\n    (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n    bytes32 salt = keccak256(abi.encode(token0, token1, fee));\r\n    return address(uint160(uint(keccak256(abi.encodePacked(hex'ff', factory, salt, codeHash)))));\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_betaBank\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_codeHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"betaBank\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountRepay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTake\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"}],\"internalType\":\"struct BetaRunnerUniswapV3.CloseData\",\"name\":\"_data\",\"type\":\"tuple\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"codeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountPutExtra\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"internalType\":\"struct BetaRunnerUniswapV3.ShortData\",\"name\":\"_data\",\"type\":\"tuple\"}],\"name\":\"short\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BetaRunnerUniswapV3", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000972a785b390d05123497169a04c72de652493be1000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000001f98431c8ad98523631ae4a59f267346ea31f984e34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://175f1d4d40b6ad58ec5b57918929a5eefd3003a412603597f328dd56576301e5"}