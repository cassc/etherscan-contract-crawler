{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/DeezNutz.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n//                            #                                                    \\n//                            @   ,                                                \\n//                            @@@@@@@@@.                                           \\n//                      #@@@   @@@  @@@* @@@@                                      \\n//                   @@@@@    @@@    @@@   @@@@@@                                  \\n//                @  @@@     /@@      @@@    @@@  @                                \\n//                  @@@      @@@@@((@@@@@     @@@   @                              \\n//              @@@@@@@@@@@@@@@    &@@@@@@@@@@@@@@   (                             \\n//            @@@@@@@       @@         @@     @@@@@@@@@                            \\n//                @@       @@@        %@@@      @@  @@@@                           \\n//               @@@       @@@         @@       @@@    &&                          \\n//         @     @@@       @@/         @@       @@@     @                          \\n//               @@@@@@@@@@@@@@@@@@@@@@@@@@@@   @@@     @                          \\n//         @@@@@@@@@       @@         @@@  *@@@@@@@@@  &@                          \\n//         @     @@#       @@         @@@      ,@@%@@@@@                           \\n//         *     @@@       @@        &@@.      @@@     @                           \\n//               @@@       @@        @@@      @@@     @                            \\n//                @@@@@@@@@@@@@@@@@@@@@@      @@/    (                             \\n//           @@@@@@@@@@/   @@@     *@@@@@@@@@@@@@.   *                             \\n//           @     @@&     @@@      @@@     @@@ @@@@@                              \\n//            #    @@@     @@@      @@     /@@     @.                              \\n//            @    @@@     @@@     %@@     @@@     @                               \\n//            @@@@@@@@&    @@@     @@@     @@.   &@@                               \\n//           @    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                              \\n//          @     @@@     @@@      @@@     @@@     .@                              \\n//         @     @@@      @@%      @@@     @@@      @@                             \\n//        @@@,  @@@      @@@        @@      @@@   # *@@                            \\n//       @ .@@@@@@@@&&  &@@         @@#     #@@@@@@@@@@#                           \\n//      @     @@@ (@@@@@@@@@@@@@@@@@@@@@@@@@@@@@       @.                          \\n//    #@     @@@       @@@          @@@      %@@@       @                          \\n//   /@     @@@        @@@           @@*      &@@@       @                         \\n//   @@@@@ @@@        @@@            @@@       @@@     @@@&                        \\n//  @   ,@@@@@@@@@@@* @@@            @@@     /@@@@@@@@@@@@@                        \\n//  @     @@@   #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@      #@                        \\n// /@     @@%        %@@             @@@        @@@       @                        \\n// %@     @@@        @@@             @@@        @@@      @@                        \\n//  @@@@@@@@@        @@@             @@*       .@@@  (@@@@@                        \\n//  @   @@@@@@@@@@@@&@@@            @@@     &@@@@@@@@@@@@@                         \\n//  @@    @@@   %@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@     ,@                          \\n//   @@    @@@       @@@           &@@#       @@@,    @@                           \\n//    @@@@@@@@@      %@@(          @@@       @@@@ @@@@@                            \\n//      @@@@@@@@@@@@/ @@@ %       @@@&  &@@@@@@@@@@@@                              \\n//        &  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   &@                                \\n//          @% @@@@.   @@@      .@@@    @@@@@  @                                   \\n//             .@@@@@&  @@@    @@@@  %@@@@@@@                                      \\n//                   #@@@@@@@@@@@@@@@@#   \\n// Deez Nutz $DN\\n\\n// Website: https://deeznutz.africa/\\n\\n// Telegram: https://t.me/DeezNutz404\\n\\n// Twitter: https://twitter.com/DeezNutz_404\\n\\n// Deez Nutz is the future of finance, memes, and tokenomics, a DN404 fork that adds fractionalized yield tied to cute neochibi peanut NFTs.\\n   \\npragma solidity ^0.8.4;\\n\\nimport \\\"./DN404Reflect.sol\\\";\\nimport \\\"./DN404Mirror.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract DeezNutz is DN404Reflect, Ownable {\\n    string private _name;\\n    string private _symbol;\\n    string private baseTokenURI;\\n    bool private isHidden;\\n    bool private tradingEnabled;\\n    address private uniswapV2Router;\\n\\n    constructor(address uniswapV2Router_) Ownable(tx.origin) {\\n        _name = \\\"DeezNutz\\\";\\n        _symbol = \\\"DN\\\";\\n        isHidden = true;\\n        uniswapV2Router = uniswapV2Router_;\\n    }\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                          METADATA                          */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    function name() public view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function setTokenURI(string memory _tokenURI) public onlyOwner {\\n        baseTokenURI = _tokenURI;\\n    }\\n\\n    function tokenURI(uint256 id) public view override returns (string memory) {\\n        if (!_exists(id)) revert TokenDoesNotExist();\\n        if (isHidden) return baseTokenURI;\\n        return string.concat(baseTokenURI, Strings.toString(id), \\\".json\\\");\\n    }\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                         TRANSFERS                          */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n    function transfer(\\n        address to,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        if (!tradingEnabled) {\\n            require(msg.sender == owner(), \\\"Trading is not enabled\\\");\\n        }\\n        _transfer(msg.sender, to, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        if (!tradingEnabled) {\\n            require(\\n                msg.sender == owner() || (msg.sender == uniswapV2Router && from == owner()),\\n                \\\"Trading is not enabled\\\"\\n            );\\n        }\\n        DN404Storage storage $ = _getDN404Storage();\\n        uint256 allowed = $.allowance[from][msg.sender];\\n\\n        if (allowed != type(uint256).max) {\\n            if (amount > allowed) revert InsufficientAllowance();\\n            unchecked {\\n                $.allowance[from][msg.sender] = allowed - amount;\\n            }\\n        }\\n\\n        _transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    function _transferFromNFT(\\n        address from,\\n        address to,\\n        uint256 id,\\n        address msgSender\\n    ) internal override {\\n        if (!tradingEnabled) {\\n            require(msg.sender == owner(), \\\"Trading is not enabled\\\");\\n        }\\n        DN404Reflect._transferFromNFT(from, to, id, msgSender);\\n    }\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                      ADMIN FUNCTIONS                       */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    function initialize(\\n        uint96 totalSupply_,\\n        address owner_,\\n        uint256 wad,\\n        address mirror\\n    ) public onlyOwner() {\\n        _initializeDN404Reflect(\\n            totalSupply_,\\n            owner_,\\n            mirror,\\n            wad\\n        );\\n    }\\n\\n    function reveal(string memory uri) public onlyOwner {\\n        baseTokenURI = uri;\\n        isHidden = false;\\n    }\\n\\n    ///@dev exclude account from earning reflections\\n    function excludeAccount(address account) external onlyOwner {\\n        DN404Storage storage $ = _getDN404Storage();\\n        require(!$.functionsRenounced, \\\"Function is renounced\\\");\\n        AddressData storage accountAddressData = _addressData(account);\\n\\n        require(!accountAddressData.isExcluded, \\\"Account is already excluded\\\");\\n        if (accountAddressData.rOwned > 0) {\\n            accountAddressData.tOwned = tokenFromReflection(\\n                accountAddressData.rOwned\\n            );\\n        }\\n        accountAddressData.isExcluded = true;\\n        $.excluded.push(account);\\n    }\\n\\n    ///@dev include account to earn reflections\\n    function includeAccount(address account) external onlyOwner {\\n        DN404Storage storage $ = _getDN404Storage();\\n        AddressData storage accountAddressData = _addressData(account);\\n\\n        require(!accountAddressData.isExcluded, \\\"Account is already excluded\\\");\\n        for (uint256 i = 0; i < $.excluded.length; i++) {\\n            if ($.excluded[i] == account) {\\n                $.excluded[i] = $.excluded[$.excluded.length - 1];\\n                accountAddressData.tOwned = 0;\\n                accountAddressData.isExcluded = false;\\n                $.excluded.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @dev function to set reflections fee, cannot be invoked once ownership is renounced, 1-1000 for 1 decimal of precision\\n    // i.e. 50 = 5%, 25 = 2.5%, 1 = 0.1%\\n    function setTaxFee(uint256 fee) external onlyOwner {\\n        DN404Storage storage $ = _getDN404Storage();\\n        require(!$.functionsRenounced, \\\"Function is renounced\\\");\\n        require(fee <= 50, \\\"Reflections fee must be 5% or less\\\");\\n        $.taxFee = fee;\\n    }\\n\\n    function getTaxFee() external returns (uint256) {\\n        return _getDN404Storage().taxFee;\\n    }\\n\\n    /// @dev renounce setTaxFee and excludeAccount WARNING: CANNOT BE UNDONE\\n    function renounceFunctions() external onlyOwner {\\n        _getDN404Storage().functionsRenounced = true;\\n    }\\n\\n    function enableTrading() external onlyOwner {\\n        tradingEnabled = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/DN404Mirror.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @title DN404Mirror\\n/// @notice DN404Mirror provides an interface for interacting with the\\n/// NFT tokens in a DN404 implementation.\\n///\\n/// @author vectorized.eth (@optimizoor)\\n/// @author Quit (@0xQuit)\\n/// @author Michael Amadi (@AmadiMichaels)\\n/// @author cygaar (@0xCygaar)\\n/// @author Thomas (@0xjustadev)\\n/// @author Harrison (@PopPunkOnChain)\\n///\\n/// @dev Note:\\n/// - The ERC721 data is stored in the base DN404 contract.\\ncontract DN404Mirror {\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                           EVENTS                           */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Emitted when token `id` is transferred from `from` to `to`.\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\n\\n    /// @dev Emitted when `owner` enables `account` to manage the `id` token.\\n    event Approval(address indexed owner, address indexed account, uint256 indexed id);\\n\\n    /// @dev Emitted when `owner` enables or disables `operator` to manage all of their tokens.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool isApproved);\\n\\n    /// @dev `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    uint256 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    /// @dev `keccak256(bytes(\\\"Approval(address,address,uint256)\\\"))`.\\n    uint256 private constant _APPROVAL_EVENT_SIGNATURE =\\n        0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925;\\n\\n    /// @dev `keccak256(bytes(\\\"ApprovalForAll(address,address,bool)\\\"))`.\\n    uint256 private constant _APPROVAL_FOR_ALL_EVENT_SIGNATURE =\\n        0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31;\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                        CUSTOM ERRORS                       */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Thrown when a call for an NFT function did not originate\\n    /// from the base DN404 contract.\\n    error SenderNotBase();\\n\\n    /// @dev Thrown when a call for an NFT function did not originate from the deployer.\\n    error SenderNotDeployer();\\n\\n    /// @dev Thrown when transferring an NFT to a contract address that\\n    /// does not implement ERC721Receiver.\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /// @dev Thrown when linking to the DN404 base contract and the\\n    /// DN404 supportsInterface check fails or the call reverts.\\n    error CannotLink();\\n\\n    /// @dev Thrown when a linkMirrorContract call is received and the\\n    /// NFT mirror contract has already been linked to a DN404 base contract.\\n    error AlreadyLinked();\\n\\n    /// @dev Thrown when retrieving the base DN404 address when a link has not\\n    /// been established.\\n    error NotLinked();\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                          STORAGE                           */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Struct contain the NFT mirror contract storage.\\n    struct DN404NFTStorage {\\n        address baseERC20;\\n        address deployer;\\n    }\\n\\n    /// @dev Returns a storage pointer for DN404NFTStorage.\\n    function _getDN404NFTStorage() internal pure virtual returns (DN404NFTStorage storage $) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // `uint72(bytes9(keccak256(\\\"DN404_MIRROR_STORAGE\\\")))`.\\n            $.slot := 0x3602298b8c10b01230 // Truncate to 9 bytes to reduce bytecode size.\\n        }\\n    }\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                        CONSTRUCTOR                         */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    constructor(address deployer) {\\n        // For non-proxies, we will store the deployer so that only the deployer can\\n        // link the base contract.\\n        _getDN404NFTStorage().deployer = deployer;\\n    }\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                     ERC721 OPERATIONS                      */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Returns the token collection name from the base DN404 contract.\\n    function name() public view virtual returns (string memory result) {\\n        address base = baseERC20();\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            mstore(0x00, 0x06fdde03) // `name()`.\\n            if iszero(staticcall(gas(), base, 0x1c, 0x04, 0x00, 0x00)) {\\n                returndatacopy(result, 0x00, returndatasize())\\n                revert(result, returndatasize())\\n            }\\n            returndatacopy(0x00, 0x00, 0x20)\\n            returndatacopy(result, mload(0x00), 0x20)\\n            returndatacopy(add(result, 0x20), add(mload(0x00), 0x20), mload(result))\\n            mstore(0x40, add(add(result, 0x20), mload(result)))\\n        }\\n    }\\n\\n    /// @dev Returns the token collection symbol from the base DN404 contract.\\n    function symbol() public view virtual returns (string memory result) {\\n        address base = baseERC20();\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            mstore(0x00, 0x95d89b41) // `symbol()`.\\n            if iszero(staticcall(gas(), base, 0x1c, 0x04, 0x00, 0x00)) {\\n                returndatacopy(result, 0x00, returndatasize())\\n                revert(result, returndatasize())\\n            }\\n            returndatacopy(0x00, 0x00, 0x20)\\n            returndatacopy(result, mload(0x00), 0x20)\\n            returndatacopy(add(result, 0x20), add(mload(0x00), 0x20), mload(result))\\n            mstore(0x40, add(add(result, 0x20), mload(result)))\\n        }\\n    }\\n\\n    /// @dev Returns the Uniform Resource Identifier (URI) for token `id` from\\n    /// the base DN404 contract.\\n    function tokenURI(uint256 id) public view virtual returns (string memory result) {\\n        address base = baseERC20();\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            mstore(0x20, id)\\n            mstore(0x00, 0xc87b56dd) // `tokenURI()`.\\n            if iszero(staticcall(gas(), base, 0x1c, 0x24, 0x00, 0x00)) {\\n                returndatacopy(result, 0x00, returndatasize())\\n                revert(result, returndatasize())\\n            }\\n            returndatacopy(0x00, 0x00, 0x20)\\n            returndatacopy(result, mload(0x00), 0x20)\\n            returndatacopy(add(result, 0x20), add(mload(0x00), 0x20), mload(result))\\n            mstore(0x40, add(add(result, 0x20), mload(result)))\\n        }\\n    }\\n\\n    /// @dev Returns the total NFT supply from the base DN404 contract.\\n    function totalSupply() public view virtual returns (uint256 result) {\\n        address base = baseERC20();\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, 0xe2c79281) // `totalNFTSupply()`.\\n            if iszero(\\n                and(gt(returndatasize(), 0x1f), staticcall(gas(), base, 0x1c, 0x04, 0x00, 0x20))\\n            ) {\\n                returndatacopy(mload(0x40), 0x00, returndatasize())\\n                revert(mload(0x40), returndatasize())\\n            }\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /// @dev Returns the number of NFT tokens owned by `owner` from the base DN404 contract.\\n    ///\\n    /// Requirements:\\n    /// - `owner` must not be the zero address.\\n    function balanceOf(address owner) public view virtual returns (uint256 result) {\\n        address base = baseERC20();\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x20, shr(96, shl(96, owner)))\\n            mstore(0x00, 0xf5b100ea) // `balanceOfNFT(address)`.\\n            if iszero(\\n                and(gt(returndatasize(), 0x1f), staticcall(gas(), base, 0x1c, 0x24, 0x00, 0x20))\\n            ) {\\n                returndatacopy(mload(0x40), 0x00, returndatasize())\\n                revert(mload(0x40), returndatasize())\\n            }\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /// @dev Returns the owner of token `id` from the base DN404 contract.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    function ownerOf(uint256 id) public view virtual returns (address result) {\\n        address base = baseERC20();\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, 0x6352211e) // `ownerOf(uint256)`.\\n            mstore(0x20, id)\\n            if iszero(\\n                and(gt(returndatasize(), 0x1f), staticcall(gas(), base, 0x1c, 0x24, 0x00, 0x20))\\n            ) {\\n                returndatacopy(mload(0x40), 0x00, returndatasize())\\n                revert(mload(0x40), returndatasize())\\n            }\\n            result := shr(96, mload(0x0c))\\n        }\\n    }\\n\\n    /// @dev Sets `spender` as the approved account to manage token `id` in\\n    /// the base DN404 contract.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    /// - The caller must be the owner of the token,\\n    ///   or an approved operator for the token owner.\\n    ///\\n    /// Emits an {Approval} event.\\n    function approve(address spender, uint256 id) public virtual {\\n        address base = baseERC20();\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            spender := shr(96, shl(96, spender))\\n            let m := mload(0x40)\\n            mstore(0x00, 0xd10b6e0c) // `approveNFT(address,uint256,address)`.\\n            mstore(0x20, spender)\\n            mstore(0x40, id)\\n            mstore(0x60, caller())\\n            if iszero(\\n                and(\\n                    gt(returndatasize(), 0x1f),\\n                    call(gas(), base, callvalue(), 0x1c, 0x64, 0x00, 0x20)\\n                )\\n            ) {\\n                returndatacopy(m, 0x00, returndatasize())\\n                revert(m, returndatasize())\\n            }\\n            mstore(0x40, m) // Restore the free memory pointer.\\n            mstore(0x60, 0) // Restore the zero pointer.\\n            // Emit the {Approval} event.\\n            log4(codesize(), 0x00, _APPROVAL_EVENT_SIGNATURE, shr(96, mload(0x0c)), spender, id)\\n        }\\n    }\\n\\n    /// @dev Returns the account approved to manage token `id` from\\n    /// the base DN404 contract.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    function getApproved(uint256 id) public view virtual returns (address result) {\\n        address base = baseERC20();\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, 0x081812fc) // `getApproved(uint256)`.\\n            mstore(0x20, id)\\n            if iszero(\\n                and(gt(returndatasize(), 0x1f), staticcall(gas(), base, 0x1c, 0x24, 0x00, 0x20))\\n            ) {\\n                returndatacopy(mload(0x40), 0x00, returndatasize())\\n                revert(mload(0x40), returndatasize())\\n            }\\n            result := shr(96, mload(0x0c))\\n        }\\n    }\\n\\n    /// @dev Sets whether `operator` is approved to manage the tokens of the caller in\\n    /// the base DN404 contract.\\n    ///\\n    /// Emits an {ApprovalForAll} event.\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        address base = baseERC20();\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            operator := shr(96, shl(96, operator))\\n            let m := mload(0x40)\\n            mstore(0x00, 0x813500fc) // `setApprovalForAll(address,bool,address)`.\\n            mstore(0x20, operator)\\n            mstore(0x40, iszero(iszero(approved)))\\n            mstore(0x60, caller())\\n            if iszero(\\n                and(eq(mload(0x00), 1), call(gas(), base, callvalue(), 0x1c, 0x64, 0x00, 0x20))\\n            ) {\\n                returndatacopy(m, 0x00, returndatasize())\\n                revert(m, returndatasize())\\n            }\\n            // Emit the {ApprovalForAll} event.\\n            log3(0x40, 0x20, _APPROVAL_FOR_ALL_EVENT_SIGNATURE, caller(), operator)\\n            mstore(0x40, m) // Restore the free memory pointer.\\n            mstore(0x60, 0) // Restore the zero pointer.\\n        }\\n    }\\n\\n    /// @dev Returns whether `operator` is approved to manage the tokens of `owner` from\\n    /// the base DN404 contract.\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        returns (bool result)\\n    {\\n        address base = baseERC20();\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40)\\n            mstore(0x40, operator)\\n            mstore(0x2c, shl(96, owner))\\n            mstore(0x0c, 0xe985e9c5000000000000000000000000) // `isApprovedForAll(address,address)`.\\n            if iszero(\\n                and(gt(returndatasize(), 0x1f), staticcall(gas(), base, 0x1c, 0x44, 0x00, 0x20))\\n            ) {\\n                returndatacopy(m, 0x00, returndatasize())\\n                revert(m, returndatasize())\\n            }\\n            mstore(0x40, m) // Restore the free memory pointer.\\n            result := iszero(iszero(mload(0x00)))\\n        }\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    /// - The caller must be the owner of the token, or be approved to manage the token.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function transferFrom(address from, address to, uint256 id) public virtual {\\n        address base = baseERC20();\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            from := shr(96, shl(96, from))\\n            to := shr(96, shl(96, to))\\n            let m := mload(0x40)\\n            mstore(m, 0xe5eb36c8) // `transferFromNFT(address,address,uint256,address)`.\\n            mstore(add(m, 0x20), from)\\n            mstore(add(m, 0x40), to)\\n            mstore(add(m, 0x60), id)\\n            mstore(add(m, 0x80), caller())\\n            if iszero(\\n                and(eq(mload(m), 1), call(gas(), base, callvalue(), add(m, 0x1c), 0x84, m, 0x20))\\n            ) {\\n                returndatacopy(m, 0x00, returndatasize())\\n                revert(m, returndatasize())\\n            }\\n            // Emit the {Transfer} event.\\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, from, to, id)\\n        }\\n    }\\n\\n    /// @dev Equivalent to `safeTransferFrom(from, to, id, \\\"\\\")`.\\n    function safeTransferFrom(address from, address to, uint256 id) public payable virtual {\\n        transferFrom(from, to, id);\\n\\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, \\\"\\\");\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    /// - The caller must be the owner of the token, or be approved to manage the token.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function safeTransferFrom(address from, address to, uint256 id, bytes calldata data)\\n        public\\n        virtual\\n    {\\n        transferFrom(from, to, id);\\n\\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, data);\\n    }\\n\\n    /// @dev Returns true if this contract implements the interface defined by `interfaceId`.\\n    /// See: https://eips.ethereum.org/EIPS/eip-165\\n    /// This function call must use less than 30000 gas.\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let s := shr(224, interfaceId)\\n            // ERC165: 0x01ffc9a7, ERC721: 0x80ac58cd, ERC721Metadata: 0x5b5e139f.\\n            result := or(or(eq(s, 0x01ffc9a7), eq(s, 0x80ac58cd)), eq(s, 0x5b5e139f))\\n        }\\n    }\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                     MIRROR OPERATIONS                      */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Returns the address of the base DN404 contract.\\n    function baseERC20() public view virtual returns (address base) {\\n        base = _getDN404NFTStorage().baseERC20;\\n        if (base == address(0)) revert NotLinked();\\n    }\\n\\n    /// @dev Fallback modifier to execute calls from the base DN404 contract.\\n    modifier dn404NFTFallback() virtual {\\n        DN404NFTStorage storage $ = _getDN404NFTStorage();\\n\\n        uint256 fnSelector = _calldataload(0x00) >> 224;\\n\\n        // `logTransfer(uint256[])`.\\n        if (fnSelector == 0x263c69d6) {\\n            if (msg.sender != $.baseERC20) revert SenderNotBase();\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // When returndatacopy copies 1 or more out-of-bounds bytes, it reverts.\\n                returndatacopy(0x00, returndatasize(), lt(calldatasize(), 0x20))\\n                let o := add(0x24, calldataload(0x04)) // Packed logs offset.\\n                returndatacopy(0x00, returndatasize(), lt(calldatasize(), o))\\n                let end := add(o, shl(5, calldataload(sub(o, 0x20))))\\n                returndatacopy(0x00, returndatasize(), lt(calldatasize(), end))\\n\\n                for {} iszero(eq(o, end)) { o := add(0x20, o) } {\\n                    let d := calldataload(o) // Entry in the packed logs.\\n                    let a := shr(96, d) // The address.\\n                    let b := and(1, d) // Whether it is a burn.\\n                    log4(\\n                        codesize(),\\n                        0x00,\\n                        _TRANSFER_EVENT_SIGNATURE,\\n                        mul(a, b),\\n                        mul(a, iszero(b)),\\n                        shr(168, shl(160, d))\\n                    )\\n                }\\n                mstore(0x00, 0x01)\\n                return(0x00, 0x20)\\n            }\\n        }\\n        // `linkMirrorContract(address)`.\\n        if (fnSelector == 0x0f4599e5) {\\n            if ($.deployer != address(0)) {\\n                if (address(uint160(_calldataload(0x04))) != $.deployer) {\\n                    revert SenderNotDeployer();\\n                }\\n            }\\n            if ($.baseERC20 != address(0)) revert AlreadyLinked();\\n            $.baseERC20 = msg.sender;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                mstore(0x00, 0x01)\\n                return(0x00, 0x20)\\n            }\\n        }\\n        _;\\n    }\\n\\n    /// @dev Fallback function for calls from base DN404 contract.\\n    fallback() external payable virtual dn404NFTFallback {}\\n\\n    receive() external payable virtual {}\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                      PRIVATE HELPERS                       */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Returns the calldata value at `offset`.\\n    function _calldataload(uint256 offset) private pure returns (uint256 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            value := calldataload(offset)\\n        }\\n    }\\n\\n    /// @dev Returns if `a` has bytecode of non-zero length.\\n    function _hasCode(address a) private view returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := extcodesize(a) // Can handle dirty upper bits.\\n        }\\n    }\\n\\n    /// @dev Perform a call to invoke {IERC721Receiver-onERC721Received} on `to`.\\n    /// Reverts if the target does not support the function correctly.\\n    function _checkOnERC721Received(address from, address to, uint256 id, bytes memory data)\\n        private\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the calldata.\\n            let m := mload(0x40)\\n            let onERC721ReceivedSelector := 0x150b7a02\\n            mstore(m, onERC721ReceivedSelector)\\n            mstore(add(m, 0x20), caller()) // The `operator`, which is always `msg.sender`.\\n            mstore(add(m, 0x40), shr(96, shl(96, from)))\\n            mstore(add(m, 0x60), id)\\n            mstore(add(m, 0x80), 0x80)\\n            let n := mload(data)\\n            mstore(add(m, 0xa0), n)\\n            if n { pop(staticcall(gas(), 4, add(data, 0x20), n, add(m, 0xc0), n)) }\\n            // Revert if the call reverts.\\n            if iszero(call(gas(), to, 0, add(m, 0x1c), add(n, 0xa4), m, 0x20)) {\\n                if returndatasize() {\\n                    // Bubble up the revert if the call reverts.\\n                    returndatacopy(m, 0x00, returndatasize())\\n                    revert(m, returndatasize())\\n                }\\n            }\\n            // Load the returndata and compare it.\\n            if iszero(eq(mload(m), shl(224, onERC721ReceivedSelector))) {\\n                mstore(0x00, 0xd1a57ed6) // `TransferToNonERC721ReceiverImplementer()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/DN404Reflect.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport \\\"./DN404Mirror.sol\\\";\\n\\n/// @title DN404\\n/// @notice DN404 is a hybrid ERC20 and ERC721 implementation that mints\\n/// and burns NFTs based on an account's ERC20 token balance.\\n///\\n/// @author vectorized.eth (@optimizoor)\\n/// @author Quit (@0xQuit)\\n/// @author Michael Amadi (@AmadiMichaels)\\n/// @author cygaar (@0xCygaar)\\n/// @author Thomas (@0xjustadev)\\n/// @author Harrison (@PopPunkOnChain)\\n///\\n/// @dev Note:\\n/// - The ERC721 data is stored in this base DN404 contract, however a\\n///   DN404Mirror contract ***MUST*** be deployed and linked during\\n///   initialization.\\nabstract contract DN404Reflect {\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                           EVENTS                           */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Emitted when `amount` tokens is transferred from `from` to `to`.\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    /// @dev Emitted when `amount` tokens is approved by `owner` to be used by `spender`.\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 amount\\n    );\\n\\n    /// @dev Emitted when `target` sets their skipNFT flag to `status`.\\n    event SkipNFTSet(address indexed target, bool status);\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                        CUSTOM ERRORS                       */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Thrown when attempting to double-initialize the contract.\\n    error DNAlreadyInitialized();\\n\\n    /// @dev Thrown when attempting to transfer or burn more tokens than sender's balance.\\n    error InsufficientBalance();\\n\\n    /// @dev Thrown when a spender attempts to transfer tokens with an insufficient allowance.\\n    error InsufficientAllowance();\\n\\n    /// @dev Thrown when minting an amount of tokens that would overflow the max tokens.\\n    error TotalSupplyOverflow();\\n\\n    /// @dev Thrown when the caller for a fallback NFT function is not the mirror contract.\\n    error SenderNotMirror();\\n\\n    /// @dev Thrown when attempting to transfer tokens to the zero address.\\n    error TransferToZeroAddress();\\n\\n    /// @dev Thrown when the mirror address provided for initialization is the zero address.\\n    error MirrorAddressIsZero();\\n\\n    /// @dev Thrown when the link call to the mirror contract reverts.\\n    error LinkMirrorContractFailed();\\n\\n    /// @dev Thrown when setting an NFT token approval\\n    /// and the caller is not the owner or an approved operator.\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /// @dev Thrown when transferring an NFT\\n    /// and the caller is not the owner or an approved operator.\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /// @dev Thrown when transferring an NFT and the from address is not the current owner.\\n    error TransferFromIncorrectOwner();\\n\\n    /// @dev Thrown when checking the owner or approved address for an non-existent NFT.\\n    error TokenDoesNotExist();\\n\\n    /// @dev Amount of token balance that is equal to one NFT.\\n    uint256 internal _WAD;\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                         CONSTANTS                          */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev The maximum token ID allowed for an NFT.\\n    uint256 internal constant _MAX_TOKEN_ID = 0xffffffff;\\n\\n    /// @dev The maximum possible token supply.\\n    uint256 internal constant _MAX_SUPPLY = 10 ** 18 * 0xffffffff - 1;\\n\\n    /// @dev The flag to denote that the address data is initialized.\\n    uint8 internal constant _ADDRESS_DATA_INITIALIZED_FLAG = 1 << 0;\\n\\n    /// @dev The flag to denote that the address should skip NFTs.\\n    uint8 internal constant _ADDRESS_DATA_SKIP_NFT_FLAG = 1 << 1;\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                          STORAGE                           */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Struct containing an address's token data and settings.\\n    struct AddressData {\\n        // Auxiliary data.\\n        uint88 aux;\\n        // Flags for `initialized` and `skipNFT`.\\n        uint8 flags;\\n        // The alias for the address. Zero means absence of an alias.\\n        uint32 addressAlias;\\n        // The number of NFT tokens.\\n        uint32 ownedLength;\\n        // The token balance in wei.\\n        uint96 balance;\\n        // tTotal for reflections\\n        uint256 tOwned;\\n        // rTotal for reflections\\n        uint256 rOwned;\\n        // Excluded from reflections\\n        bool isExcluded;\\n    }\\n\\n    /// @dev A uint32 map in storage.\\n    struct Uint32Map {\\n        mapping(uint256 => uint256) map;\\n    }\\n\\n    /// @dev Struct containing the base token contract storage.\\n    struct DN404Storage {\\n        // Current number of address aliases assigned.\\n        uint32 numAliases;\\n        // Next token ID to assign for an NFT mint.\\n        uint32 nextTokenId;\\n        // Total supply of minted NFTs.\\n        uint32 totalNFTSupply;\\n        // Total supply of tokens.\\n        uint96 totalSupply;\\n        // Total supply of tokens\\n        uint256 tTotal;\\n        // Reflections remaining\\n        uint256 rTotal;\\n        // Total transaction fees\\n        uint256 tFeeTotal;\\n        // Tax Fee (as percentage)\\n        uint256 taxFee;\\n        // Address of the NFT mirror contract.\\n        address mirrorERC721;\\n        // Mapping of a user alias number to their address.\\n        mapping(uint32 => address) aliasToAddress;\\n        // Mapping of user operator approvals for NFTs.\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n        // Mapping of NFT token approvals to approved operators.\\n        mapping(uint256 => address) tokenApprovals;\\n        // Mapping of user allowances for token spenders.\\n        mapping(address => mapping(address => uint256)) allowance;\\n        // Mapping of NFT token IDs owned by an address.\\n        mapping(address => Uint32Map) owned;\\n        // Even indices: owner aliases. Odd indices: owned indices.\\n        Uint32Map oo;\\n        // Mapping of user account AddressData\\n        mapping(address => AddressData) addressData;\\n        // array of excluded addresses\\n        address[] excluded;\\n        // Determines whether setTaxFee and ExcludeAccount can be called\\n        bool functionsRenounced;\\n        // Opens transfers for everyone\\n        bool tradingEnabled;\\n    }\\n\\n    /// @dev Returns a storage pointer for DN404Storage.\\n    function _getDN404Storage()\\n        internal\\n        pure\\n        virtual\\n        returns (DN404Storage storage $)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // `uint72(bytes9(keccak256(\\\"DN404_STORAGE\\\")))`.\\n            $.slot := 0xa20d6e21d0e5255308 // Truncate to 9 bytes to reduce bytecode size.\\n        }\\n    }\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                         INITIALIZER                        */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Initializes the DN404 contract with an\\n    /// `initialTokenSupply`, `initialTokenOwner` and `mirror` NFT contract address.\\n    function _initializeDN404Reflect(\\n        uint256 initialTokenSupply,\\n        address initialSupplyOwner,\\n        address mirror,\\n        uint256 wad\\n    ) internal virtual {\\n        DN404Storage storage $ = _getDN404Storage();\\n\\n        if ($.nextTokenId != 0) revert DNAlreadyInitialized();\\n\\n        if (mirror == address(0)) revert MirrorAddressIsZero();\\n        _linkMirrorContract(mirror);\\n\\n        $.nextTokenId = 1;\\n        $.mirrorERC721 = mirror;\\n        _WAD = wad;\\n        if (initialTokenSupply > 0) {\\n            if (initialSupplyOwner == address(0))\\n                revert TransferToZeroAddress();\\n            if (initialTokenSupply > _MAX_SUPPLY) revert TotalSupplyOverflow();\\n\\n            $.totalSupply = uint96(initialTokenSupply);\\n            $.tTotal = uint256(initialTokenSupply);\\n            uint256 MAX = ~uint256(0);\\n            $.rTotal = (MAX - (MAX % $.tTotal));\\n            AddressData storage initialOwnerAddressData = _addressData(\\n                initialSupplyOwner\\n            );\\n            initialOwnerAddressData.balance = uint96(initialTokenSupply);\\n            initialOwnerAddressData.rOwned = $.rTotal;\\n\\n            emit Transfer(address(0), initialSupplyOwner, initialTokenSupply);\\n\\n            _setSkipNFT(initialSupplyOwner, true);\\n        }\\n    }\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*               METADATA FUNCTIONS TO OVERRIDE               */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Returns the name of the token.\\n    function name() public view virtual returns (string memory);\\n\\n    /// @dev Returns the symbol of the token.\\n    function symbol() public view virtual returns (string memory);\\n\\n    /// @dev Returns the Uniform Resource Identifier (URI) for token `id`.\\n    function tokenURI(\\n        uint256 id\\n    ) public view virtual returns (string memory result);\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                      ERC20 OPERATIONS                      */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Returns the decimals places of the token. Always 18.\\n    function decimals() public pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    /// @dev Returns the amount of tokens in existence.\\n    function totalSupply() public view virtual returns (uint256) {\\n        return uint256(_getDN404Storage().totalSupply);\\n    }\\n\\n    /// @dev Returns the amount of tokens owned by `owner`\\n    ///      Updated for reflections logic\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        AddressData storage ownerAddressData = _getDN404Storage().addressData[\\n            owner\\n        ];\\n        if (ownerAddressData.isExcluded) return ownerAddressData.tOwned;\\n        return tokenFromReflection(ownerAddressData.rOwned);\\n    }\\n\\n    /// @dev Returns the amount of tokens that `spender` can spend on behalf of `owner`.\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) public view returns (uint256) {\\n        return _getDN404Storage().allowance[owner][spender];\\n    }\\n\\n    /// @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n    ///\\n    /// Emits a {Approval} event.\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        DN404Storage storage $ = _getDN404Storage();\\n\\n        $.allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    /// @dev Transfer `amount` tokens from the caller to `to`.\\n    ///\\n    /// Will burn sender NFTs if balance after transfer is less than\\n    /// the amount required to support the current NFT balance.\\n    ///\\n    /// Will mint NFTs to `to` if the recipient's new balance supports\\n    /// additional NFTs ***AND*** the `to` address's skipNFT flag is\\n    /// set to false.\\n    ///\\n    /// Requirements:\\n    /// - `from` must at least have `amount`.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function transfer(\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        _transfer(msg.sender, to, amount);\\n        return true;\\n    }\\n\\n    /// @dev Transfers `amount` tokens from `from` to `to`.\\n    ///\\n    /// Note: Does not update the allowance if it is the maximum uint256 value.\\n    ///\\n    /// Will burn sender NFTs if balance after transfer is less than\\n    /// the amount required to support the current NFT balance.\\n    ///\\n    /// Will mint NFTs to `to` if the recipient's new balance supports\\n    /// additional NFTs ***AND*** the `to` address's skipNFT flag is\\n    /// set to false.\\n    ///\\n    /// Requirements:\\n    /// - `from` must at least have `amount`.\\n    /// - The caller must have at least `amount` of allowance to transfer the tokens of `from`.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        DN404Storage storage $ = _getDN404Storage();\\n        uint256 allowed = $.allowance[from][msg.sender];\\n\\n        if (allowed != type(uint256).max) {\\n            if (amount > allowed) revert InsufficientAllowance();\\n            unchecked {\\n                $.allowance[from][msg.sender] = allowed - amount;\\n            }\\n        }\\n\\n        _transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                   REFLECTION OPERATIONS                    */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev reflects sender's wallet\\n    function reflect(uint256 tAmount) public {\\n        DN404Storage storage $ = _getDN404Storage();\\n        address sender = msg.sender;\\n        AddressData storage senderAddressData = _addressData(sender);\\n        require(\\n            !senderAddressData.isExcluded,\\n            \\\"Excluded addresses cannot call this function\\\"\\n        );\\n        (uint256 rAmount, , , , ) = _getValues(tAmount);\\n        senderAddressData.rOwned = senderAddressData.rOwned - rAmount;\\n        $.rTotal = $.rTotal - rAmount;\\n        $.tFeeTotal = $.tFeeTotal + tAmount;\\n    }\\n    /// @dev returns rAmount from amount of tokens\\n    function reflectionFromToken(\\n        uint256 tAmount,\\n        bool deductTransferFee\\n    ) public view returns (uint256) {\\n        require(\\n            tAmount <= _getDN404Storage().tTotal,\\n            \\\"Amount must be less than supply\\\"\\n        );\\n        if (!deductTransferFee) {\\n            (uint256 rAmount, , , , ) = _getValues(tAmount);\\n            return rAmount;\\n        } else {\\n            (, uint256 rTransferAmount, , , ) = _getValues(tAmount);\\n            return rTransferAmount;\\n        }\\n    }\\n\\n    ///@dev returns token amount from rTotal (used for balanceOf)\\n    function tokenFromReflection(\\n        uint256 rAmount\\n    ) public view returns (uint256) {\\n        require(\\n            rAmount <= _getDN404Storage().rTotal,\\n            \\\"Amount must be less than total reflections\\\"\\n        );\\n        uint256 currentRate = _getRate();\\n        return rAmount / currentRate;\\n    }\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                  INTERNAL MINT FUNCTIONS                   */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Mints `amount` tokens to `to`, increasing the total supply.\\n    ///\\n    /// Will mint NFTs to `to` if the recipient's new balance supports\\n    /// additional NFTs ***AND*** the `to` address's skipNFT flag is\\n    /// set to false.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _mint(address to, uint256 amount) internal virtual {\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        DN404Storage storage $ = _getDN404Storage();\\n\\n        AddressData storage toAddressData = _addressData(to);\\n\\n        unchecked {\\n            uint256 currentTokenSupply = uint256($.totalSupply) + amount;\\n            if (amount > _MAX_SUPPLY || currentTokenSupply > _MAX_SUPPLY) {\\n                revert TotalSupplyOverflow();\\n            }\\n            $.totalSupply = uint96(currentTokenSupply);\\n\\n            uint256 toBalance = toAddressData.balance + amount;\\n            toAddressData.balance = uint96(toBalance);\\n\\n            if (toAddressData.flags & _ADDRESS_DATA_SKIP_NFT_FLAG == 0) {\\n                Uint32Map storage toOwned = $.owned[to];\\n                uint256 toIndex = toAddressData.ownedLength;\\n                uint256 toEnd = toBalance / _WAD;\\n                _PackedLogs memory packedLogs = _packedLogsMalloc(\\n                    _zeroFloorSub(toEnd, toIndex)\\n                );\\n\\n                if (packedLogs.logs.length != 0) {\\n                    uint256 maxNFTId = $.totalSupply / _WAD;\\n                    uint32 toAlias = _registerAndResolveAlias(\\n                        toAddressData,\\n                        to\\n                    );\\n                    uint256 id = $.nextTokenId;\\n                    $.totalNFTSupply += uint32(packedLogs.logs.length);\\n                    toAddressData.ownedLength = uint32(toEnd);\\n                    // Mint loop.\\n                    do {\\n                        while (_get($.oo, _ownershipIndex(id)) != 0) {\\n                            if (++id > maxNFTId) id = 1;\\n                        }\\n                        _set(toOwned, toIndex, uint32(id));\\n                        _setOwnerAliasAndOwnedIndex(\\n                            $.oo,\\n                            id,\\n                            toAlias,\\n                            uint32(toIndex++)\\n                        );\\n                        _packedLogsAppend(packedLogs, to, id, 0);\\n                        if (++id > maxNFTId) id = 1;\\n                    } while (toIndex != toEnd);\\n                    $.nextTokenId = uint32(id);\\n                    _packedLogsSend(packedLogs, $.mirrorERC721);\\n                }\\n            }\\n        }\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                  INTERNAL BURN FUNCTIONS                   */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Burns `amount` tokens from `from`, reducing the total supply.\\n    ///\\n    /// Will burn sender NFTs if balance after transfer is less than\\n    /// the amount required to support the current NFT balance.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _burn(address from, uint256 amount) internal virtual {\\n        DN404Storage storage $ = _getDN404Storage();\\n\\n        AddressData storage fromAddressData = _addressData(from);\\n\\n        uint256 fromBalance = fromAddressData.balance;\\n        if (amount > fromBalance) revert InsufficientBalance();\\n\\n        uint256 currentTokenSupply = $.totalSupply;\\n\\n        unchecked {\\n            fromBalance -= amount;\\n            fromAddressData.balance = uint96(fromBalance);\\n            currentTokenSupply -= amount;\\n            $.totalSupply = uint96(currentTokenSupply);\\n\\n            Uint32Map storage fromOwned = $.owned[from];\\n            uint256 fromIndex = fromAddressData.ownedLength;\\n            uint256 nftAmountToBurn = _zeroFloorSub(\\n                fromIndex,\\n                fromBalance / _WAD\\n            );\\n\\n            if (nftAmountToBurn != 0) {\\n                $.totalNFTSupply -= uint32(nftAmountToBurn);\\n\\n                _PackedLogs memory packedLogs = _packedLogsMalloc(\\n                    nftAmountToBurn\\n                );\\n\\n                uint256 fromEnd = fromIndex - nftAmountToBurn;\\n                // Burn loop.\\n                do {\\n                    uint256 id = _get(fromOwned, --fromIndex);\\n                    _setOwnerAliasAndOwnedIndex($.oo, id, 0, 0);\\n                    delete $.tokenApprovals[id];\\n                    _packedLogsAppend(packedLogs, from, id, 1);\\n                } while (fromIndex != fromEnd);\\n\\n                fromAddressData.ownedLength = uint32(fromIndex);\\n                _packedLogsSend(packedLogs, $.mirrorERC721);\\n            }\\n        }\\n        emit Transfer(from, address(0), amount);\\n    }\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                INTERNAL TRANSFER FUNCTIONS                 */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Moves `amount` of tokens from `from` to `to`.\\n    ///\\n    /// Will burn sender NFTs if balance after transfer is less than\\n    /// the amount required to support the current NFT balance.\\n    ///\\n    /// Will mint NFTs to `to` if the recipient's new balance supports\\n    /// additional NFTs ***AND*** the `to` address's skipNFT flag is\\n    /// set to false.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        DN404Storage storage $ = _getDN404Storage();\\n\\n        AddressData storage fromAddressData = _addressData(from);\\n        AddressData storage toAddressData = _addressData(to);\\n\\n        _TransferTemps memory t;\\n        t.fromOwnedLength = fromAddressData.ownedLength;\\n        t.toOwnedLength = toAddressData.ownedLength;\\n        t.rOwnedFrom = fromAddressData.rOwned;\\n        t.rOwnedTo = toAddressData.rOwned;\\n        t.fromBalance = this.balanceOf(from);\\n        t.toBalance = this.balanceOf(to);\\n        if (amount > t.fromBalance) revert InsufficientBalance();\\n\\n        unchecked {\\n            // Reflections transfer logic\\n            (\\n                uint256 rAmount,\\n                uint256 rTransferAmount,\\n                uint256 rFee,\\n                uint256 tTransferAmount,\\n                uint256 tFee\\n            ) = _getValues(amount);\\n  \\n            // Transfer from excluded address\\n            if (fromAddressData.isExcluded && !toAddressData.isExcluded) {\\n                t.tOwnedFrom = fromAddressData.tOwned - amount;\\n                t.rOwnedFrom = t.rOwnedFrom - rAmount;\\n                t.rOwnedTo = t.rOwnedTo + rTransferAmount;\\n                // Update temporary from and to balance\\n                t.fromBalance = t.tOwnedFrom;\\n                t.toBalance = tokenFromReflection(t.rOwnedTo);\\n            }\\n            // Transfer to excluded address\\n            else if (!fromAddressData.isExcluded && toAddressData.isExcluded) {\\n                t.rOwnedFrom = t.rOwnedFrom - rAmount;\\n                t.rOwnedTo = t.rOwnedTo + rTransferAmount;\\n                t.tOwnedTo = toAddressData.tOwned + tTransferAmount;\\n                // Update temporary from and to balance\\n                t.fromBalance = tokenFromReflection(t.rOwnedFrom);\\n                t.toBalance = t.tOwnedTo;\\n            }\\n            // Transfer between non-excluded addresses\\n            else if (!fromAddressData.isExcluded && !toAddressData.isExcluded) {\\n                t.rOwnedFrom = t.rOwnedFrom - rAmount;\\n                t.rOwnedTo = t.rOwnedTo + rTransferAmount;\\n                // Update temporary from and to balance\\n                t.fromBalance = tokenFromReflection(t.rOwnedFrom);\\n                t.toBalance = tokenFromReflection(t.rOwnedTo);\\n            }\\n            // Transfer between both excluded addresses\\n            else if (fromAddressData.isExcluded && toAddressData.isExcluded) {\\n                t.tOwnedFrom = fromAddressData.tOwned - amount;\\n                t.rOwnedFrom = t.rOwnedFrom - rAmount;\\n                t.rOwnedTo = t.rOwnedTo + rTransferAmount;\\n                t.tOwnedTo = toAddressData.tOwned + tTransferAmount;\\n                // Update temporary from and to balance\\n                t.fromBalance = t.tOwnedFrom;\\n                t.toBalance = t.tOwnedTo;\\n            } else {\\n                t.rOwnedFrom = t.rOwnedFrom - rAmount;\\n                t.rOwnedTo = t.rOwnedTo + rTransferAmount;\\n                // Update temporary from and to balance\\n                t.fromBalance = tokenFromReflection(t.rOwnedFrom);\\n                t.toBalance = tokenFromReflection(t.rOwnedTo);\\n            }\\n            // Reflect fees to all token holders\\n            _reflectFee(rFee, tFee);\\n            // Update address data rOwned and tOwned\\n            fromAddressData.rOwned = t.rOwnedFrom;\\n            toAddressData.rOwned = t.rOwnedTo;\\n            fromAddressData.tOwned = t.tOwnedFrom;\\n            toAddressData.tOwned = t.tOwnedTo;\\n\\n            // Update address balances for nft transfer logic\\n            fromAddressData.balance = uint96(t.fromBalance);\\n            toAddressData.balance = uint96(t.toBalance);\\n\\n            t.nftAmountToBurn = _zeroFloorSub(\\n                t.fromOwnedLength,\\n                t.fromBalance / _WAD\\n            );\\n\\n            if (toAddressData.flags & _ADDRESS_DATA_SKIP_NFT_FLAG == 0) {\\n                if (from == to)\\n                    t.toOwnedLength = t.fromOwnedLength - t.nftAmountToBurn;\\n                t.nftAmountToMint = _zeroFloorSub(\\n                    t.toBalance / _WAD,\\n                    t.toOwnedLength\\n                );\\n            }\\n\\n            _PackedLogs memory packedLogs = _packedLogsMalloc(\\n                t.nftAmountToBurn + t.nftAmountToMint\\n            );\\n\\n            if (t.nftAmountToBurn != 0) {\\n                Uint32Map storage fromOwned = $.owned[from];\\n                uint256 fromIndex = t.fromOwnedLength;\\n                uint256 fromEnd = fromIndex - t.nftAmountToBurn;\\n                $.totalNFTSupply -= uint32(t.nftAmountToBurn);\\n                fromAddressData.ownedLength = uint32(fromEnd);\\n                // Burn loop.\\n                do {\\n                    uint256 id = _get(fromOwned, --fromIndex);\\n                    _setOwnerAliasAndOwnedIndex($.oo, id, 0, 0);\\n                    delete $.tokenApprovals[id];\\n                    _packedLogsAppend(packedLogs, from, id, 1);\\n                } while (fromIndex != fromEnd);\\n            }\\n\\n            if (t.nftAmountToMint != 0) {\\n                Uint32Map storage toOwned = $.owned[to];\\n                uint256 toIndex = t.toOwnedLength;\\n                uint256 toEnd = toIndex + t.nftAmountToMint;\\n                uint32 toAlias = _registerAndResolveAlias(toAddressData, to);\\n                uint256 maxNFTId = $.totalSupply / _WAD;\\n                uint256 id = $.nextTokenId;\\n                $.totalNFTSupply += uint32(t.nftAmountToMint);\\n                toAddressData.ownedLength = uint32(toEnd);\\n                // Mint loop.\\n                do {\\n                    while (_get($.oo, _ownershipIndex(id)) != 0) {\\n                        if (++id > maxNFTId) id = 1;\\n                    }\\n                    _set(toOwned, toIndex, uint32(id));\\n                    _setOwnerAliasAndOwnedIndex(\\n                        $.oo,\\n                        id,\\n                        toAlias,\\n                        uint32(toIndex++)\\n                    );\\n                    _packedLogsAppend(packedLogs, to, id, 0);\\n                    if (++id > maxNFTId) id = 1;\\n                } while (toIndex != toEnd);\\n                $.nextTokenId = uint32(id);\\n            }\\n\\n            if (packedLogs.logs.length != 0) {\\n                _packedLogsSend(packedLogs, $.mirrorERC721);\\n            }\\n        }\\n        // Should be taken care of by internal reflections transfer functions\\n        emit Transfer(from, to, amount);\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Call must originate from the mirror contract.\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    ///   `msgSender` must be the owner of the token, or be approved to manage the token.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _transferFromNFT(\\n        address from,\\n        address to,\\n        uint256 id,\\n        address msgSender\\n    ) internal virtual {\\n        DN404Storage storage $ = _getDN404Storage();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        address owner = $.aliasToAddress[_get($.oo, _ownershipIndex(id))];\\n\\n        if (from != owner) revert TransferFromIncorrectOwner();\\n\\n        if (msgSender != from) {\\n            if (!$.operatorApprovals[from][msgSender]) {\\n                if (msgSender != $.tokenApprovals[id]) {\\n                    revert TransferCallerNotOwnerNorApproved();\\n                }\\n            }\\n        }\\n\\n        AddressData storage fromAddressData = _addressData(from);\\n        AddressData storage toAddressData = _addressData(to);\\n\\n        // Transfer without taking reflection fee\\n        (uint256 rAmount, , , , ) = _getValues(_WAD);\\n        if (fromAddressData.isExcluded) {\\n            fromAddressData.tOwned -= _WAD;\\n        }\\n        if (toAddressData.isExcluded) {\\n            toAddressData.tOwned += _WAD;\\n        }\\n        fromAddressData.rOwned -= rAmount;\\n        fromAddressData.balance -= uint96(_WAD);\\n\\n        unchecked {\\n            toAddressData.balance += uint96(_WAD);\\n            toAddressData.rOwned += rAmount;\\n\\n            _set(\\n                $.oo,\\n                _ownershipIndex(id),\\n                _registerAndResolveAlias(toAddressData, to)\\n            );\\n            delete $.tokenApprovals[id];\\n\\n            uint256 updatedId = _get(\\n                $.owned[from],\\n                --fromAddressData.ownedLength\\n            );\\n            _set($.owned[from], _get($.oo, _ownedIndex(id)), uint32(updatedId));\\n\\n            uint256 n = toAddressData.ownedLength++;\\n            _set($.oo, _ownedIndex(updatedId), _get($.oo, _ownedIndex(id)));\\n            _set($.owned[to], n, uint32(id));\\n            _set($.oo, _ownedIndex(id), uint32(n));\\n        }\\n    \\n        emit Transfer(from, to, _WAD);\\n    }\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                 DATA HITCHHIKING FUNCTIONS                 */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Returns the auxiliary data for `owner`.\\n    /// Minting, transferring, burning the tokens of `owner` will not change the auxiliary data.\\n    /// Auxiliary data can be set for any address, even if it does not have any tokens.\\n    function _getAux(address owner) internal view virtual returns (uint88) {\\n        return _getDN404Storage().addressData[owner].aux;\\n    }\\n\\n    /// @dev Set the auxiliary data for `owner` to `value`.\\n    /// Minting, transferring, burning the tokens of `owner` will not change the auxiliary data.\\n    /// Auxiliary data can be set for any address, even if it does not have any tokens.\\n    function _setAux(address owner, uint88 value) internal virtual {\\n        _getDN404Storage().addressData[owner].aux = value;\\n    }\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                     SKIP NFT FUNCTIONS                     */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Returns true if account `a` will skip NFT minting on token mints and transfers.\\n    /// Returns false if account `a` will mint NFTs on token mints and transfers.\\n    function getSkipNFT(address a) public view virtual returns (bool) {\\n        AddressData storage d = _getDN404Storage().addressData[a];\\n        if (d.flags & _ADDRESS_DATA_INITIALIZED_FLAG == 0) return _hasCode(a);\\n        return d.flags & _ADDRESS_DATA_SKIP_NFT_FLAG != 0;\\n    }\\n\\n    /// @dev Sets the caller's skipNFT flag to `skipNFT`\\n    ///\\n    /// Emits a {SkipNFTSet} event.\\n    function setSkipNFT(bool skipNFT) public virtual {\\n        _setSkipNFT(msg.sender, skipNFT);\\n    }\\n\\n    /// @dev Internal function to set account `a` skipNFT flag to `state`\\n    ///\\n    /// Initializes account `a` AddressData if it is not currently initialized.\\n    ///\\n    /// Emits a {SkipNFTSet} event.\\n    function _setSkipNFT(address a, bool state) internal virtual {\\n        AddressData storage d = _addressData(a);\\n        if ((d.flags & _ADDRESS_DATA_SKIP_NFT_FLAG != 0) != state) {\\n            d.flags ^= _ADDRESS_DATA_SKIP_NFT_FLAG;\\n        }\\n        emit SkipNFTSet(a, state);\\n    }\\n\\n    /// @dev Returns a storage data pointer for account `a` AddressData\\n    ///\\n    /// Initializes account `a` AddressData if it is not currently initialized.\\n    function _addressData(\\n        address a\\n    ) internal virtual returns (AddressData storage d) {\\n        DN404Storage storage $ = _getDN404Storage();\\n        d = $.addressData[a];\\n\\n        if (d.flags & _ADDRESS_DATA_INITIALIZED_FLAG == 0) {\\n            uint8 flags = _ADDRESS_DATA_INITIALIZED_FLAG;\\n            if (_hasCode(a)) flags |= _ADDRESS_DATA_SKIP_NFT_FLAG;\\n            d.flags = flags;\\n        }\\n    }\\n\\n    /// @dev Returns the `addressAlias` of account `to`.\\n    ///\\n    /// Assigns and registers the next alias if `to` alias was not previously registered.\\n    function _registerAndResolveAlias(\\n        AddressData storage toAddressData,\\n        address to\\n    ) internal virtual returns (uint32 addressAlias) {\\n        DN404Storage storage $ = _getDN404Storage();\\n        addressAlias = toAddressData.addressAlias;\\n        if (addressAlias == 0) {\\n            addressAlias = ++$.numAliases;\\n            toAddressData.addressAlias = addressAlias;\\n            $.aliasToAddress[addressAlias] = to;\\n        }\\n    }\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                     MIRROR OPERATIONS                      */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Returns the address of the mirror NFT contract.\\n    function mirrorERC721() public view virtual returns (address) {\\n        return _getDN404Storage().mirrorERC721;\\n    }\\n\\n    /// @dev Returns the total NFT supply.\\n    function _totalNFTSupply() internal view virtual returns (uint256) {\\n        return _getDN404Storage().totalNFTSupply;\\n    }\\n\\n    /// @dev Returns `owner` NFT balance.\\n    function _balanceOfNFT(\\n        address owner\\n    ) internal view virtual returns (uint256) {\\n        return _getDN404Storage().addressData[owner].ownedLength;\\n    }\\n\\n    /// @dev Returns the owner of token `id`.\\n    /// Returns the zero address instead of reverting if the token does not exist.\\n    function _ownerAt(uint256 id) internal view virtual returns (address) {\\n        DN404Storage storage $ = _getDN404Storage();\\n        return $.aliasToAddress[_get($.oo, _ownershipIndex(id))];\\n    }\\n\\n    /// @dev Returns the owner of token `id`.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    function _ownerOf(uint256 id) internal view virtual returns (address) {\\n        if (!_exists(id)) revert TokenDoesNotExist();\\n        return _ownerAt(id);\\n    }\\n\\n    /// @dev Returns if token `id` exists.\\n    function _exists(uint256 id) internal view virtual returns (bool) {\\n        return _ownerAt(id) != address(0);\\n    }\\n\\n    /// @dev Returns the account approved to manage token `id`.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    function _getApproved(uint256 id) internal view virtual returns (address) {\\n        if (!_exists(id)) revert TokenDoesNotExist();\\n        return _getDN404Storage().tokenApprovals[id];\\n    }\\n\\n    /// @dev Sets `spender` as the approved account to manage token `id`, using `msgSender`.\\n    ///\\n    /// Requirements:\\n    /// - `msgSender` must be the owner or an approved operator for the token owner.\\n    function _approveNFT(\\n        address spender,\\n        uint256 id,\\n        address msgSender\\n    ) internal virtual returns (address) {\\n        DN404Storage storage $ = _getDN404Storage();\\n\\n        address owner = $.aliasToAddress[_get($.oo, _ownershipIndex(id))];\\n\\n        if (msgSender != owner) {\\n            if (!$.operatorApprovals[owner][msgSender]) {\\n                revert ApprovalCallerNotOwnerNorApproved();\\n            }\\n        }\\n\\n        $.tokenApprovals[id] = spender;\\n\\n        return owner;\\n    }\\n\\n    /// @dev Approve or remove the `operator` as an operator for `msgSender`,\\n    /// without authorization checks.\\n    function _setApprovalForAll(\\n        address operator,\\n        bool approved,\\n        address msgSender\\n    ) internal virtual {\\n        _getDN404Storage().operatorApprovals[msgSender][operator] = approved;\\n    }\\n\\n    /// @dev Calls the mirror contract to link it to this contract.\\n    ///\\n    /// Reverts if the call to the mirror contract reverts.\\n    function _linkMirrorContract(address mirror) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, 0x0f4599e5) // `linkMirrorContract(address)`.\\n            mstore(0x20, caller())\\n            if iszero(\\n                and(\\n                    eq(mload(0x00), 1),\\n                    call(gas(), mirror, 0, 0x1c, 0x24, 0x00, 0x20)\\n                )\\n            ) {\\n                mstore(0x00, 0xd125259c) // `LinkMirrorContractFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Fallback modifier to dispatch calls from the mirror NFT contract\\n    /// to internal functions in this contract.\\n    modifier dn404Fallback() virtual {\\n        DN404Storage storage $ = _getDN404Storage();\\n\\n        uint256 fnSelector = _calldataload(0x00) >> 224;\\n\\n        // `isApprovedForAll(address,address)`.\\n        if (fnSelector == 0xe985e9c5) {\\n            if (msg.sender != $.mirrorERC721) revert SenderNotMirror();\\n            if (msg.data.length < 0x44) revert();\\n\\n            address owner = address(uint160(_calldataload(0x04)));\\n            address operator = address(uint160(_calldataload(0x24)));\\n\\n            _return($.operatorApprovals[owner][operator] ? 1 : 0);\\n        }\\n        // `ownerOf(uint256)`.\\n        if (fnSelector == 0x6352211e) {\\n            if (msg.sender != $.mirrorERC721) revert SenderNotMirror();\\n            if (msg.data.length < 0x24) revert();\\n\\n            uint256 id = _calldataload(0x04);\\n\\n            _return(uint160(_ownerOf(id)));\\n        }\\n        // `transferFromNFT(address,address,uint256,address)`.\\n        if (fnSelector == 0xe5eb36c8) {\\n            if (msg.sender != $.mirrorERC721) revert SenderNotMirror();\\n            if (msg.data.length < 0x84) revert();\\n\\n            address from = address(uint160(_calldataload(0x04)));\\n            address to = address(uint160(_calldataload(0x24)));\\n            uint256 id = _calldataload(0x44);\\n            address msgSender = address(uint160(_calldataload(0x64)));\\n\\n            _transferFromNFT(from, to, id, msgSender);\\n            _return(1);\\n        }\\n        // `setApprovalForAll(address,bool,address)`.\\n        if (fnSelector == 0x813500fc) {\\n            if (msg.sender != $.mirrorERC721) revert SenderNotMirror();\\n            if (msg.data.length < 0x64) revert();\\n\\n            address spender = address(uint160(_calldataload(0x04)));\\n            bool status = _calldataload(0x24) != 0;\\n            address msgSender = address(uint160(_calldataload(0x44)));\\n\\n            _setApprovalForAll(spender, status, msgSender);\\n            _return(1);\\n        }\\n        // `approveNFT(address,uint256,address)`.\\n        if (fnSelector == 0xd10b6e0c) {\\n            if (msg.sender != $.mirrorERC721) revert SenderNotMirror();\\n            if (msg.data.length < 0x64) revert();\\n\\n            address spender = address(uint160(_calldataload(0x04)));\\n            uint256 id = _calldataload(0x24);\\n            address msgSender = address(uint160(_calldataload(0x44)));\\n\\n            _return(uint160(_approveNFT(spender, id, msgSender)));\\n        }\\n        // `getApproved(uint256)`.\\n        if (fnSelector == 0x081812fc) {\\n            if (msg.sender != $.mirrorERC721) revert SenderNotMirror();\\n            if (msg.data.length < 0x24) revert();\\n\\n            uint256 id = _calldataload(0x04);\\n\\n            _return(uint160(_getApproved(id)));\\n        }\\n        // `balanceOfNFT(address)`.\\n        if (fnSelector == 0xf5b100ea) {\\n            if (msg.sender != $.mirrorERC721) revert SenderNotMirror();\\n            if (msg.data.length < 0x24) revert();\\n\\n            address owner = address(uint160(_calldataload(0x04)));\\n\\n            _return(_balanceOfNFT(owner));\\n        }\\n        // `totalNFTSupply()`.\\n        if (fnSelector == 0xe2c79281) {\\n            if (msg.sender != $.mirrorERC721) revert SenderNotMirror();\\n            if (msg.data.length < 0x04) revert();\\n\\n            _return(_totalNFTSupply());\\n        }\\n        // `implementsDN404()`.\\n        if (fnSelector == 0xb7a94eb8) {\\n            _return(1);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Fallback function for calls from mirror NFT contract.\\n    fallback() external payable virtual dn404Fallback {}\\n\\n    receive() external payable virtual {}\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                      PRIVATE HELPERS                       */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Struct containing packed log data for `Transfer` events to be\\n    /// emitted by the mirror NFT contract.\\n    struct _PackedLogs {\\n        uint256[] logs;\\n        uint256 offset;\\n    }\\n\\n    /// @dev Initiates memory allocation for packed logs with `n` log items.\\n    function _packedLogsMalloc(\\n        uint256 n\\n    ) private pure returns (_PackedLogs memory p) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let logs := add(mload(0x40), 0x40) // Offset by 2 words for `_packedLogsSend`.\\n            mstore(logs, n)\\n            let offset := add(0x20, logs)\\n            mstore(0x40, add(offset, shl(5, n)))\\n            mstore(p, logs)\\n            mstore(add(0x20, p), offset)\\n        }\\n    }\\n\\n    /// @dev Adds a packed log item to `p` with address `a`, token `id` and burn flag `burnBit`.\\n    function _packedLogsAppend(\\n        _PackedLogs memory p,\\n        address a,\\n        uint256 id,\\n        uint256 burnBit\\n    ) private pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let offset := mload(add(0x20, p))\\n            mstore(offset, or(or(shl(96, a), shl(8, id)), burnBit))\\n            mstore(add(0x20, p), add(offset, 0x20))\\n        }\\n    }\\n\\n    /// @dev Calls the `mirror` NFT contract to emit Transfer events for packed logs `p`.\\n    function _packedLogsSend(_PackedLogs memory p, address mirror) private {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let logs := mload(p)\\n            let o := sub(logs, 0x40) // Start of calldata to send.\\n            mstore(o, 0x263c69d6) // `logTransfer(uint256[])`.\\n            mstore(add(o, 0x20), 0x20) // Offset of `logs` in the calldata to send.\\n            let n := add(0x44, shl(5, mload(logs))) // Length of calldata to send.\\n            if iszero(\\n                and(\\n                    eq(mload(o), 1),\\n                    call(gas(), mirror, 0, add(o, 0x1c), n, o, 0x20)\\n                )\\n            ) {\\n                revert(o, 0x00)\\n            }\\n        }\\n    }\\n\\n    /// @dev Struct of temporary variables for transfers.\\n    struct _TransferTemps {\\n        uint256 nftAmountToBurn;\\n        uint256 nftAmountToMint;\\n        uint256 fromBalance;\\n        uint256 toBalance;\\n        uint256 fromOwnedLength;\\n        uint256 toOwnedLength;\\n        uint256 rOwnedFrom;\\n        uint256 rOwnedTo;\\n        uint256 tOwnedFrom;\\n        uint256 tOwnedTo;\\n    }\\n\\n    /// @dev Returns if `a` has bytecode of non-zero length.\\n    function _hasCode(address a) private view returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := extcodesize(a) // Can handle dirty upper bits.\\n        }\\n    }\\n\\n    /// @dev Returns the calldata value at `offset`.\\n    function _calldataload(\\n        uint256 offset\\n    ) private pure returns (uint256 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            value := calldataload(offset)\\n        }\\n    }\\n\\n    /// @dev Executes a return opcode to return `x` and end the current call frame.\\n    function _return(uint256 x) private pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, x)\\n            return(0x00, 0x20)\\n        }\\n    }\\n\\n    /// @dev Returns `max(0, x - y)`.\\n    function _zeroFloorSub(\\n        uint256 x,\\n        uint256 y\\n    ) private pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := mul(gt(x, y), sub(x, y))\\n        }\\n    }\\n\\n    /// @dev Returns `i << 1`.\\n    function _ownershipIndex(uint256 i) private pure returns (uint256) {\\n        return i << 1;\\n    }\\n\\n    /// @dev Returns `(i << 1) + 1`.\\n    function _ownedIndex(uint256 i) private pure returns (uint256) {\\n        unchecked {\\n            return (i << 1) + 1;\\n        }\\n    }\\n\\n    /// @dev Returns the uint32 value at `index` in `map`.\\n    function _get(\\n        Uint32Map storage map,\\n        uint256 index\\n    ) private view returns (uint32 result) {\\n        result = uint32(map.map[index >> 3] >> ((index & 7) << 5));\\n    }\\n\\n    /// @dev Updates the uint32 value at `index` in `map`.\\n    function _set(Uint32Map storage map, uint256 index, uint32 value) private {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x20, map.slot)\\n            mstore(0x00, shr(3, index))\\n            let s := keccak256(0x00, 0x40) // Storage slot.\\n            let o := shl(5, and(index, 7)) // Storage slot offset (bits).\\n            let v := sload(s) // Storage slot value.\\n            let m := 0xffffffff // Value mask.\\n            sstore(s, xor(v, shl(o, and(m, xor(shr(o, v), value)))))\\n        }\\n    }\\n\\n    /// @dev Sets the owner alias and the owned index together.\\n    function _setOwnerAliasAndOwnedIndex(\\n        Uint32Map storage map,\\n        uint256 id,\\n        uint32 ownership,\\n        uint32 ownedIndex\\n    ) private {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let value := or(shl(32, ownedIndex), and(0xffffffff, ownership))\\n            mstore(0x20, map.slot)\\n            mstore(0x00, shr(2, id))\\n            let s := keccak256(0x00, 0x40) // Storage slot.\\n            let o := shl(6, and(id, 3)) // Storage slot offset (bits).\\n            let v := sload(s) // Storage slot value.\\n            let m := 0xffffffffffffffff // Value mask.\\n            sstore(s, xor(v, shl(o, and(m, xor(shr(o, v), value)))))\\n        }\\n    }\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*              PRIVATE FUNCTIONS FOR REFLECTIONS             */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n\\n    /// @dev Reflects fee to all holders\\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\\n        DN404Storage storage $ = _getDN404Storage();\\n        $.rTotal = $.rTotal - rFee;\\n        $.tFeeTotal = $.tFeeTotal + tFee;\\n    }\\n\\n    function _getValues(\\n        uint256 tAmount\\n    ) private view returns (uint256, uint256, uint256, uint256, uint256) {\\n        (uint256 tTransferAmount, uint256 tFee) = _getTValues(tAmount);\\n        uint256 currentRate = _getRate();\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\\n            tAmount,\\n            tFee,\\n            currentRate\\n        );\\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee);\\n    }\\n\\n    function _getTValues(\\n        uint256 tAmount\\n    ) private view returns (uint256, uint256) {\\n        uint256 tFee = _calculateTaxFee(tAmount);\\n        uint256 tTransferAmount = tAmount - tFee;\\n        return (tTransferAmount, tFee);\\n    }\\n\\n    function _getRValues(\\n        uint256 tAmount,\\n        uint256 tFee,\\n        uint256 currentRate\\n    ) private pure returns (uint256, uint256, uint256) {\\n        uint256 rAmount = tAmount * currentRate;\\n        uint256 rFee = tFee * currentRate;\\n        uint256 rTransferAmount = rAmount - rFee;\\n        return (rAmount, rTransferAmount, rFee);\\n    }\\n\\n    function _getRate() private view returns (uint256) {\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\n        return (rSupply / tSupply);\\n    }\\n\\n    /// @dev returns current supply in terms of 'r' and 't'\\n    function _getCurrentSupply() private view returns (uint256, uint256) {\\n        DN404Storage storage $ = _getDN404Storage();\\n        uint256 rSupply = $.rTotal;\\n        uint256 tSupply = $.tTotal;\\n        for (uint256 i = 0; i < $.excluded.length; i++) {\\n            AddressData storage excludedAddressData = $.addressData[\\n                $.excluded[i]\\n            ];\\n\\n            if (\\n                excludedAddressData.rOwned > rSupply ||\\n                excludedAddressData.tOwned > tSupply\\n            ) return ($.rTotal, $.tTotal);\\n            rSupply = rSupply - excludedAddressData.rOwned;\\n            tSupply = tSupply - excludedAddressData.tOwned;\\n        }\\n        if (rSupply < $.rTotal / $.tTotal) return ($.rTotal, $.tTotal);\\n        return (rSupply, tSupply);\\n    }\\n\\n    /// @dev returns the total reflected tokens\\n    function getTotalReflections() public view returns (uint256) {\\n        return _getDN404Storage().tFeeTotal;\\n    }\\n\\n    function _calculateTaxFee(uint256 amount) private view returns (uint256) {\\n        return (amount * _getDN404Storage().taxFee) / (10 ** 3);\\n    }\\n\\n    /*\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-\u00ab-*/\\n    /*                     ACCESS FUNCTIONS                       */\\n    /*-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb-\u00bb*/\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"viaIR\": true,\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uniswapV2Router_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DNAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LinkMirrorContractFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MirrorAddressIsZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotMirror\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TotalSupplyOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SkipNFTSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"getSkipNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalReflections\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"totalSupply_\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"mirror\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mirrorERC721\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"reflect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceFunctions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"skipNFT\",\"type\":\"bool\"}],\"name\":\"setSkipNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setTaxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DeezNutz", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}