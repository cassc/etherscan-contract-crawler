{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"./contracts/libraries/TierUtil.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.6.12;\\n\\nimport { ITier } from \\\"../tier/ITier.sol\\\";\\n\\n/// @title TierUtil\\n/// Utilities to consistently read, write and manipulate tiers in reports.\\n/// The low-level bit shifting can be difficult to get right so this factors that out.\\nlibrary TierUtil {\\n\\n    /// UNINITIALIZED report is 0xFF.. as no tier has been held.\\n    uint256 constant public UNINITIALIZED = uint256(-1);\\n\\n    /// Returns the highest tier achieved relative to a block number and report.\\n    ///\\n    /// Note that typically the report will be from the _current_ contract state.\\n    /// When the `report` comes from a later block than the `blockNumber` this means\\n    /// the user must have held the tier continuously from `blockNumber` _through_ to the report block.\\n    /// I.e. NOT a snapshot.\\n    /// @param report_ A report as per `ITier`.\\n    /// @param blockNumber_ The block number to check the tiers against.\\n    /// @return The highest tier held since `blockNumber` according to `report`.\\n    function tierAtBlockFromReport(\\n        uint256 report_,\\n        uint256 blockNumber_\\n    )\\n        internal pure returns (ITier.Tier)\\n    {\\n        for (uint256 i_ = 0; i_ < 8; i_++) {\\n            if (uint32(uint256(report_ >> (i_*32))) > uint32(blockNumber_)) {\\n                return ITier.Tier(i_);\\n            }\\n        }\\n        return ITier.Tier(8);\\n    }\\n\\n    /// Returns the block that a given tier has been held since according to a report.\\n    ///\\n    /// The report SHOULD encode \\\"never\\\" as 0xFFFFFFFF.\\n    /// @param report_ The report to read a block number from.\\n    /// @param tier_ The Tier to read the block number for.\\n    /// @return The block number this has been held since.\\n    function tierBlock(uint256 report_, ITier.Tier tier_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // ZERO is a special case. Everyone has always been at least ZERO, since block 0.\\n        if (tier_ == ITier.Tier.ZERO) { return 0; }\\n\\n        uint256 offset_ = (uint256(tier_) - 1) * 32;\\n        return uint256(uint32(\\n            uint256(\\n                report_ >> offset_\\n            )\\n        ));\\n    }\\n\\n    /// Resets all the tiers above the reference tier to 0xFFFFFFFF.\\n    ///\\n    /// @param report_ Report to truncate with high bit 1s.\\n    /// @param tier_ Tier to truncate above (exclusive).\\n    /// @return Truncated report.\\n    function truncateTiersAbove(uint256 report_, ITier.Tier tier_)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 offset_ = uint256(tier_) * 32;\\n        uint256 mask_ = (UNINITIALIZED >> offset_) << offset_;\\n        return report_ | mask_;\\n    }\\n\\n    /// Updates a report with a block number for every status integer in a range.\\n    ///\\n    /// Does nothing if the end status is equal or less than the start status.\\n    /// @param report_ The report to update.\\n    /// @param startTier_ The tierInt_ at the start of the range (exclusive).\\n    /// @param endTier_ The tierInt_ at the end of the range (inclusive).\\n    /// @param blockNumber_ The block number to set for every status in the range.\\n    /// @return The updated report.\\n    function updateBlocksForTierRange(\\n        uint256 report_,\\n        ITier.Tier startTier_,\\n        ITier.Tier endTier_,\\n        uint256 blockNumber_\\n    )\\n        internal pure returns (uint256)\\n    {\\n        uint256 offset_;\\n        for (uint256 i_ = uint256(startTier_); i_ < uint256(endTier_); i_++) {\\n            offset_ = i_ * 32;\\n            report_ = (report_ & ~uint256(uint256(uint32(UNINITIALIZED)) << offset_)) | uint256(blockNumber_ << offset_);\\n        }\\n        return report_;\\n    }\\n\\n    /// Updates a report to a new status.\\n    ///\\n    /// Internally dispatches to `truncateTiersAbove` and `updateBlocksForTierRange`.\\n    /// The dispatch is based on whether the new tier is above or below the current tier.\\n    /// The `startTier_` MUST match the result of `tierAtBlockFromReport`.\\n    /// It is expected the caller will know the current tier when calling this function\\n    /// and need to do other things in the calling scope with it.\\n    /// @param report_ The report to update.\\n    /// @param startTier_ The current tier according to the report.\\n    /// @param endTier_ The new tier for the report.\\n    /// @param blockNumber_ The block number to update the tier at.\\n    /// @return The updated report.\\n    function updateReportWithTierAtBlock(\\n        uint256 report_,\\n        ITier.Tier startTier_,\\n        ITier.Tier endTier_,\\n        uint256 blockNumber_\\n    )\\n        internal pure returns (uint256)\\n    {\\n        return endTier_ < startTier_ ? truncateTiersAbove(report_, endTier_) : updateBlocksForTierRange(report_, startTier_, endTier_, blockNumber_);\\n    }\\n\\n}\"\r\n    },\r\n    \"./contracts/tier/ITier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.6.12;\\n\\n/// @title ITier\\n/// Standard interface to a tiered membership.\\n///\\n/// A \\\"membership\\\" can represent many things:\\n/// - Exclusive access.\\n/// - Participation in some event or process.\\n/// - KYC completion.\\n/// - Combination of sub-memberships.\\n/// - Etc.\\n///\\n/// The high level requirements for a contract implementing ITier:\\n/// - MUST represent held tiers with the `Tier` enum.\\n/// - MUST implement `report`.\\n///   - The report is a `uint256` that SHOULD represent the block each tier has been continuously held since encoded as `uint32`.\\n///   - The encoded tiers start at ONE; ZERO is implied if no tier has ever been held.\\n///   - Tier ZERO is NOT encoded in the report, it is simply the fallback value.\\n///   - If a tier is lost the block data is erased for that tier and will be set if/when the tier is regained to the new block.\\n///   - If the historical block information is not available the report MAY return `0x00000000` for all held tiers.\\n///   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`.\\n/// - SHOULD implement `setTier`.\\n///   - Contracts SHOULD revert with `SET_TIER` error if they cannot meaningfully set a tier directly.\\n///     For example a contract that can only derive a membership tier by reading the state of an external contract cannot set tiers.\\n///   - Contracts implementing `setTier` SHOULD error with `SET_ZERO_TIER` if `Tier.ZERO` is being set.\\n/// - MUST emit `TierChange` when `setTier` successfully writes a new tier.\\n///   - Contracts that cannot meaningfully set a tier are exempt.\\ninterface ITier {\\n    /// 9 Possible tiers.\\n    /// Fits nicely as uint32 in uint256 which is helpful for internal storage concerns.\\n    /// 8 tiers can be achieved, ZERO is the tier when no tier has been achieved.\\n    enum Tier {\\n        ZERO,\\n        ONE,\\n        TWO,\\n        THREE,\\n        FOUR,\\n        FIVE,\\n        SIX,\\n        SEVEN,\\n        EIGHT\\n    }\\n\\n    /// Every time a Tier changes we log start and end Tier against the account.\\n    /// This MAY NOT be emitted if reports are being read from the state of an external contract.\\n    event TierChange(\\n        address indexed account,\\n        Tier indexed startTier,\\n        Tier indexed endTier\\n    );\\n\\n    /// Updates the tier of an account.\\n    ///\\n    /// The implementing contract is responsible for all checks and state changes required to set the tier.\\n    /// For example, taking/refunding funds/NFTs etc.\\n    ///\\n    /// Contracts may disallow directly setting tiers, preferring to derive reports from other onchain data.\\n    /// In this case they should `revert(\\\"SET_TIER\\\");`.\\n    ///\\n    /// @param account Account to change the tier for.\\n    /// @param endTier Tier after the change.\\n    /// @param data Arbitrary input to disambiguate ownership (e.g. NFTs to lock).\\n    function setTier(\\n        address account,\\n        Tier endTier,\\n        bytes memory data\\n    )\\n        external;\\n\\n    /// Returns the earliest block the account has held each tier for continuously.\\n    /// This is encoded as a uint256 with blocks represented as 8x concatenated u32.\\n    /// I.e. Each 4 bytes of the uint256 represents a u32 tier start time.\\n    /// The low bits represent low tiers and high bits the high tiers.\\n    /// Implementing contracts should return 0xFFFFFFFF for lost & never-held tiers.\\n    ///\\n    /// @param account Account to get the report for.\\n    /// @return The report blocks encoded as a uint256.\\n    function report(address account) external view returns (uint256);\\n}\"\r\n    },\r\n    \"./contracts/claim/TierByConstructionClaim.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.6.12;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { ITier } from \\\"../tier/ITier.sol\\\";\\nimport { TierByConstruction } from \\\"../tier/TierByConstruction.sol\\\";\\n\\n/// @title TierByConstructionClaim\\n/// Contract that can be inherited by anything that wants to manage claims of erc20/721/1155/etc. based on tier.\\n/// The tier must be held continously since the contract construction according to the tier contract.\\ncontract TierByConstructionClaim is TierByConstruction {\\n    /// The minimum tier required for an address to claim anything at all.\\n    /// This tier must have been held continuously since before this contract was constructed.\\n    ITier.Tier public immutable minimumTier;\\n\\n    /// Tracks every address that has already claimed to prevent duplicate claims.\\n    mapping(address => bool) public claims;\\n\\n    /// A claim has been successfully processed for an account.\\n    event Claim(address indexed account, bytes data_);\\n\\n    /// Nothing special needs to happen in the constructor.\\n    /// Simply forwards the desired ITier contract in the TierByConstruction constructor.\\n    /// The minimum tier is set for later reference.\\n    constructor(ITier tierContract_, ITier.Tier minimumTier_)\\n        public\\n        TierByConstruction(tierContract_)\\n    {\\n        minimumTier = minimumTier_;\\n    }\\n\\n    /// The onlyTier modifier checks the claimant against minimumTier.\\n    /// The ITier contract decides for itself whether the claimant is minimumTier as at the current block.number\\n    /// The claim can only be done once per account.\\n    ///\\n    /// NOTE: This function is callable by anyone and can only be called once per account.\\n    /// The `_afterClaim` function can and SHOULD enforce additional restrictions on when/how a claim is valid.\\n    /// Be very careful to manage griefing attacks when the `msg.sender` is not `account_`, for example:\\n    /// - An `ERC20BalanceTier` has no historical information so anyone can claim for anyone else based on their balance at any time.\\n    /// - `data_` may be set arbitrarily by `msg.sender` so could be consumed frivilously at the expense of `account_`.\\n    ///\\n    /// @param account_ The account that receives the benefits of the claim.\\n    /// @param data_ Additional data that may inform the claim process.\\n    function claim(address account_, bytes memory data_)\\n        external\\n        onlyTier(account_, minimumTier)\\n    {\\n        // Prevent duplicate claims for a given account.\\n        require(!claims[account_], \\\"DUPLICATE_CLAIM\\\");\\n\\n        // Record that a claim has been made for this account.\\n        claims[account_] = true;\\n\\n        // Log the claim.\\n        emit Claim(account_, data_);\\n\\n        // Process the claim.\\n        // Inheriting contracts will need to override this to make the claim useful.\\n        _afterClaim(account_, tierContract.report(account_), data_);\\n    }\\n\\n    /// Implementing contracts need to define what is claimed.\\n    function _afterClaim(\\n        address account_,\\n        uint256 report_,\\n        bytes memory data_\\n    )\\n        internal virtual\\n    { } // solhint-disable-line no-empty-blocks\\n}\"\r\n    },\r\n    \"./contracts/tier/TierByConstruction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.6.12;\\n\\nimport { TierUtil } from \\\"../libraries/TierUtil.sol\\\";\\nimport { ITier } from \\\"./ITier.sol\\\";\\n\\n/// Enforces tiers held by contract contruction block.\\n/// The construction block is compared against the blocks returned by `report`.\\n/// The `ITier` contract is paramaterised and set during construction.\\ncontract TierByConstruction {\\n    ITier public immutable tierContract;\\n    uint256 public immutable constructionBlock;\\n\\n    constructor(ITier tierContract_) public {\\n        tierContract = tierContract_;\\n        constructionBlock = block.number;\\n    }\\n\\n    /// Check if an account has held AT LEAST the given tier according to `tierContract` since construction.\\n    /// The account MUST have held the tier continuously from construction until the \\\"current\\\" state according to `report`.\\n    /// Note that `report` PROBABLY is current as at the block this function is called but MAYBE NOT.\\n    /// The `ITier` contract is free to manage reports however makes sense to it.\\n    ///\\n    /// @param account_ Account to check status of.\\n    /// @param minimumTier_ Minimum tier for the account.\\n    /// @return True if the status is currently held.\\n    function isTier(address account_, ITier.Tier minimumTier_)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return constructionBlock >= TierUtil.tierBlock(\\n            tierContract.report(account_),\\n            minimumTier_\\n        );\\n    }\\n\\n    /// Modifier that restricts access to functions depending on the tier required by the function.\\n    ///\\n    /// `isTier` involves an external call to tierContract.report.\\n    /// `require` happens AFTER the modified function to avoid rentrant `ITier` code.\\n    /// Also `report` from `ITier` is `view` so the compiler will error on attempted state modification.\\n    /// https://consensys.github.io/smart-contract-best-practices/recommendations/#use-modifiers-only-for-checks\\n    ///\\n    /// Do NOT use this to guard setting the tier on an ITier contract.\\n    /// The initial tier would be checked AFTER it has already been modified which is unsafe.\\n    ///\\n    /// @param account_ Account to enforce tier of.\\n    /// @param minimumTier_ Minimum tier for the account.\\n    modifier onlyTier(address account_, ITier.Tier minimumTier_) {\\n        _;\\n        require(\\n            isTier(account_, minimumTier_),\\n            \\\"MINIMUM_TIER\\\"\\n        );\\n    }\\n}\"\r\n    },\r\n    \"./contracts/tier/ERC20TransferTier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.6.12;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport { TierUtil } from \\\"../libraries/TierUtil.sol\\\";\\nimport { ValueTier } from \\\"./ValueTier.sol\\\";\\nimport \\\"./ReadWriteTier.sol\\\";\\n\\n/// @title ERC20TransferTier\\n///\\n/// The `ERC20TransferTier` takes ownership of an erc20 balance by transferring erc20 token to itself.\\n/// The `msg.sender` of `setTier` must pay the difference on upgrade, the tiered address receives refunds on downgrade.\\n/// This allows users to \\\"gift\\\" tiers to each other.\\n/// As the transfer is a state changing event we can track historical block times.\\n/// As the tiered address moves up/down tiers it sends/receives the value difference between its current tier only.\\n///\\n/// The user is required to preapprove enough erc20 to cover the tier change or they will fail and lose gas.\\n///\\n/// ERC20TransferTier is useful for:\\n/// - Claims that rely on historical holdings so the tiered address cannot simply \\\"flash claim\\\"\\n/// - Token demand and lockup where liquidity (trading) is a secondary goal\\n/// - erc20 tokens without additonal restrictions on transfer\\ncontract ERC20TransferTier is ReadWriteTier, ValueTier {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public immutable erc20;\\n\\n    /// @param erc20_ The erc20 token contract to transfer balances from/to during `setTier`.\\n    /// @param tierValues_ 8 values corresponding to minimum erc20 balances for tiers ONE through EIGHT.\\n    constructor(IERC20 erc20_, uint256[8] memory tierValues_) public ValueTier(tierValues_) {\\n        erc20 = erc20_;\\n    }\\n\\n    /// Transfers balances of erc20 from/to the tiered account according to the difference in values.\\n    /// Any failure to transfer in/out will rollback the tier change.\\n    /// The tiered account must ensure sufficient approvals before attempting to set a new tier.\\n    /// The `msg.sender` is responsible for paying the token cost of a tier increase.\\n    /// The tiered account is always the recipient of a refund on a tier decrease.\\n    /// @inheritdoc ReadWriteTier\\n    function _afterSetTier(\\n        address account_,\\n        ITier.Tier startTier_,\\n        ITier.Tier endTier_,\\n        bytes memory\\n    )\\n        internal\\n        override\\n    {\\n        // As _anyone_ can call `setTier` we require that `msg.sender` and `account_` are the same if the end tier is lower.\\n        // Anyone can increase anyone else's tier as the `msg.sender` is responsible to pay the difference.\\n        if (endTier_ < startTier_) {\\n            require(msg.sender == account_, \\\"DELEGATED_TIER_LOSS\\\");\\n        }\\n\\n        // Handle the erc20 transfer.\\n        // Convert the start tier to an erc20 amount.\\n        uint256 startValue_ = tierToValue(startTier_);\\n        // Convert the end tier to an erc20 amount.\\n        uint256 endValue_ = tierToValue(endTier_);\\n\\n        // Short circuit if the values are the same for both tiers.\\n        if (endValue_ == startValue_) {\\n            return;\\n        }\\n        if (endValue_ > startValue_) {\\n            // Going up, take ownership of erc20 from the `msg.sender`.\\n            erc20.safeTransferFrom(msg.sender, address(this), SafeMath.sub(\\n                endValue_,\\n                startValue_\\n            ));\\n        } else {\\n            // Going down, process a refund for the tiered account.\\n            erc20.safeTransfer(account_, SafeMath.sub(\\n                startValue_,\\n                endValue_\\n            ));\\n        }\\n    }\\n}\"\r\n    },\r\n    \"./contracts/tier/ValueTier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.6.12;\\n\\nimport { ITier } from \\\"./ITier.sol\\\";\\n\\n/// @title ValueTier\\n///\\n/// A contract that is `ValueTier` expects to derive tiers from explicit values.\\n/// For example an address must send or hold an amount of something to reach a given tier.\\n/// Anything with predefined values that map to tiers can be a `ValueTier`.\\n///\\n/// Note that `ValueTier` does NOT implement `ITier`.\\n/// `ValueTier` does include state however, to track the `tierValues` so is not a library.\\ncontract ValueTier {\\n    uint256 private immutable tierOne;\\n    uint256 private immutable tierTwo;\\n    uint256 private immutable tierThree;\\n    uint256 private immutable tierFour;\\n    uint256 private immutable tierFive;\\n    uint256 private immutable tierSix;\\n    uint256 private immutable tierSeven;\\n    uint256 private immutable tierEight;\\n\\n    /// Set the `tierValues` on construction to be referenced immutably.\\n    constructor(uint256[8] memory tierValues_) public {\\n        tierOne = tierValues_[0];\\n        tierTwo = tierValues_[1];\\n        tierThree = tierValues_[2];\\n        tierFour = tierValues_[3];\\n        tierFive = tierValues_[4];\\n        tierSix = tierValues_[5];\\n        tierSeven = tierValues_[6];\\n        tierEight = tierValues_[7];\\n    }\\n\\n    /// Complements the default solidity accessor for `tierValues`.\\n    /// Returns all the values in a list rather than requiring an index be specified.\\n    /// @return tierValues_ The immutable `tierValues`.\\n    function tierValues() public view returns(uint256[8] memory tierValues_) {\\n        tierValues_[0] = tierOne;\\n        tierValues_[1] = tierTwo;\\n        tierValues_[2] = tierThree;\\n        tierValues_[3] = tierFour;\\n        tierValues_[4] = tierFive;\\n        tierValues_[5] = tierSix;\\n        tierValues_[6] = tierSeven;\\n        tierValues_[7] = tierEight;\\n        return tierValues_;\\n    }\\n\\n    /// Converts a Tier to the minimum value it requires.\\n    /// Tier ZERO is always value 0 as it is the fallback.\\n    function tierToValue(ITier.Tier tier_) internal view returns(uint256) {\\n        return tier_ > ITier.Tier.ZERO ? tierValues()[uint256(tier_) - 1] : 0;\\n    }\\n\\n    /// Converts a value to the maximum Tier it qualifies for.\\n    function valueToTier(uint256 value_) internal view returns(ITier.Tier) {\\n        for (uint256 i = 0; i < 8; i++) {\\n            if (value_ < tierValues()[i]) {\\n                return ITier.Tier(i);\\n            }\\n        }\\n        return ITier.Tier.EIGHT;\\n    }\\n}\"\r\n    },\r\n    \"./contracts/tier/ReadWriteTier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.6.12;\\n\\nimport { ITier } from \\\"./ITier.sol\\\";\\nimport { TierUtil } from \\\"../libraries/TierUtil.sol\\\";\\n\\n/// @title ReadWriteTier\\n///\\n/// ReadWriteTier can `setTier` in addition to generating reports.\\n/// When `setTier` is called it automatically sets the current blocks in the report for the new tiers.\\n/// Lost tiers are scrubbed from the report as tiered addresses move down the tiers.\\ncontract ReadWriteTier is ITier {\\n    /// account => reports\\n    mapping(address => uint256) public reports;\\n\\n    /// Either fetch the report from storage or return UNINITIALIZED.\\n    /// @inheritdoc ITier\\n    function report(address account_)\\n        public\\n        virtual\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        // Inequality here to silence slither warnings.\\n        return reports[account_] > 0 ? reports[account_] : TierUtil.UNINITIALIZED;\\n    }\\n\\n    /// Errors if the user attempts to return to the ZERO tier.\\n    /// Updates the report from `report` using default `TierUtil` logic.\\n    /// Calls `_afterSetTier` that inheriting contracts SHOULD override to enforce status requirements.\\n    /// Emits `TierChange` event.\\n    /// @inheritdoc ITier\\n    function setTier(\\n        address account_,\\n        Tier endTier_,\\n        bytes memory data_\\n    )\\n        external virtual override\\n    {\\n        // The user must move to at least ONE.\\n        // The ZERO status is reserved for users that have never interacted with the contract.\\n        require(endTier_ != Tier.ZERO, \\\"SET_ZERO_TIER\\\");\\n\\n        uint256 report_ = report(account_);\\n\\n        ITier.Tier startTier_ = TierUtil.tierAtBlockFromReport(report_, block.number);\\n\\n        reports[account_] = TierUtil.updateReportWithTierAtBlock(\\n            report_,\\n            startTier_,\\n            endTier_,\\n            block.number\\n        );\\n\\n        // Emit this event for ITier.\\n        emit TierChange(account_, startTier_, endTier_);\\n\\n        // Call the _afterSetTier hook to allow inheriting contracts to enforce requirements.\\n        // The inheriting contract MUST `require` or otherwise enforce its needs to rollback a bad status change.\\n        _afterSetTier(account_, startTier_, endTier_, data_);\\n    }\\n\\n    /// Inheriting contracts SHOULD override this to enforce requirements.\\n    ///\\n    /// All the internal accounting and state changes are complete at this point.\\n    /// Use `require` to enforce additional requirements for tier changes.\\n    ///\\n    /// @param account_ The account with the new tier.\\n    /// @param startTier_ The tier the account had before this update.\\n    /// @param endTier_ The tier the account will have after this update.\\n    /// @param data_ Additional arbitrary data to inform update requirements.\\n    function _afterSetTier(\\n        address account_,\\n        Tier startTier_,\\n        Tier endTier_,\\n        bytes memory data_\\n    )\\n        internal virtual\\n    { } // solhint-disable-line no-empty-blocks\\n}\"\r\n    },\r\n    \"./contracts/tier/ReadOnlyTier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.6.12;\\n\\nimport { ITier } from \\\"./ITier.sol\\\";\\nimport { TierUtil } from \\\"../libraries/TierUtil.sol\\\";\\n\\n/// @title ReadOnlyTier\\n///\\n/// A contract inheriting `ReadOnlyTier` cannot call `setTier`.\\n///\\n/// `ReadOnlyTier` is abstract because it does not implement `report`.\\n/// The expectation is that `report` will derive tiers from some external data source.\\nabstract contract ReadOnlyTier is ITier {\\n    /// Always reverts because it is not possible to set a read only tier.\\n    /// @inheritdoc ITier\\n    function setTier(\\n        address,\\n        Tier,\\n        bytes memory\\n    )\\n        external override\\n    {\\n        revert(\\\"SET_TIER\\\");\\n    }\\n}\"\r\n    },\r\n    \"./contracts/tier/AlwaysTier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./ReadOnlyTier.sol\\\";\\n\\n/// @title AlwaysTier\\n///\\n/// `AlwaysTier` is intended as a primitive for combining tier contracts.\\n///\\n/// As the name implies:\\n/// - `AlwaysTier` is `ReadOnlyTier` and so can never call `setTier`.\\n/// - `report` is always `0x00000000` for every tier and every address.\\ncontract AlwaysTier is ReadOnlyTier {\\n    /// Every address is always every tier.\\n    /// @inheritdoc ITier\\n    function report(address) public override view returns (uint256) {\\n        return 0;\\n    }\\n}\"\r\n    },\r\n    \"./contracts/tier/NeverTier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./ReadOnlyTier.sol\\\";\\n\\n/// @title NeverTier\\n///\\n/// `NeverTier` is intended as a primitive for combining tier contracts.\\n///\\n/// As the name implies:\\n/// - `NeverTier` is `ReadOnlyTier` and so can never call `setTier`.\\n/// - `report` is always `uint256(-1)` as every tier is unobtainable.\\ncontract NeverTier is ReadOnlyTier {\\n    /// Every tier in the report is unobtainable.\\n    /// @inheritdoc ITier\\n    function report(address) public override view returns (uint256) {\\n        return uint256(-1);\\n    }\\n}\"\r\n    },\r\n    \"./contracts/tier/ERC20BalanceTier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.6.12;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport { TierUtil } from \\\"../libraries/TierUtil.sol\\\";\\nimport { ValueTier } from \\\"./ValueTier.sol\\\";\\nimport \\\"./ReadOnlyTier.sol\\\";\\n\\n/// @title ERC20BalanceTier\\n///\\n/// The `ERC20BalanceTier` simply checks the current balance of an erc20 against tier values.\\n/// As the current balance is always read from the erc20 contract directly there is no historical block data.\\n/// All tiers held at the current value will be 0x00000000 and tiers not held will be 0xFFFFFFFF.\\n/// `setTier` will error as this contract has no ability to write to the erc20 contract state.\\n///\\n/// Balance tiers are useful for:\\n/// - Claim contracts that don't require backdated tier holding (be wary of griefing!).\\n/// - Assets that cannot be transferred, so are not eligible for `ERC20TransferTier`.\\n/// - Lightweight, realtime checks that encumber the tiered address as little as possible.\\ncontract ERC20BalanceTier is ReadOnlyTier, ValueTier {\\n    IERC20 public immutable erc20;\\n\\n    /// @param erc20_ The erc20 token contract to check the balance of at `report` time.\\n    /// @param tierValues_ 8 values corresponding to minimum erc20 balances for tiers ONE through EIGHT.\\n    constructor(IERC20 erc20_, uint256[8] memory tierValues_) public ValueTier(tierValues_) {\\n        erc20 = erc20_;\\n    }\\n\\n    /// Report simply truncates all tiers above the highest value held.\\n    /// @inheritdoc ITier\\n    function report(address account_) public view override returns (uint256) {\\n        return TierUtil.truncateTiersAbove(\\n            0,\\n            valueToTier(erc20.balanceOf(account_))\\n        );\\n    }\\n}\"\r\n    },\r\n    \"./contracts/test/TierByConstructionTest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.6.12;\\n\\nimport { ITier } from \\\"../tier/ITier.sol\\\";\\nimport { TierByConstruction } from \\\"../tier/TierByConstruction.sol\\\";\\n\\n/// @title TierByConstructionTest\\n/// An empty contract that facilitates tests enumerating behaviour of the modifiers at each tier.\\ncontract TierByConstructionTest is TierByConstruction {\\n\\n    /// @param tier_ The tier contract for `TierByConstruction`.\\n    constructor(ITier tier_) public TierByConstruction(tier_) { } // solhint-disable-line no-empty-blocks\\n\\n    /// External function with no modifier to use as a control for testing.\\n    function unlimited() external view { } // solhint-disable-line no-empty-blocks\\n\\n    /// Requires Tier.ZERO to call.\\n    function ifZero()\\n        external\\n        view\\n        onlyTier(msg.sender, ITier.Tier.ZERO)\\n    { } // solhint-disable-line no-empty-blocks\\n\\n    /// Requires Tier.ONE to call.\\n    function ifOne()\\n        external\\n        view\\n        onlyTier(msg.sender, ITier.Tier.ONE)\\n    { } // solhint-disable-line no-empty-blocks\\n\\n    /// Requires Tier.TWO to call.\\n    function ifTwo()\\n        external\\n        view\\n        onlyTier(msg.sender, ITier.Tier.TWO)\\n    { } // solhint-disable-line no-empty-blocks\\n\\n    /// Requires Tier.THREE to call.\\n    function ifThree()\\n        external\\n        view\\n        onlyTier(msg.sender, ITier.Tier.THREE)\\n    { } // solhint-disable-line no-empty-blocks\\n\\n    /// Requires Tier.FOUR to call.\\n    function ifFour()\\n        external\\n        view\\n        onlyTier(msg.sender, ITier.Tier.FOUR)\\n    { } // solhint-disable-line no-empty-blocks\\n\\n    /// Requires Tier.FIVE to call.\\n    function ifFive()\\n        external\\n        view\\n        onlyTier(msg.sender, ITier.Tier.FIVE)\\n    { } // solhint-disable-line no-empty-blocks\\n\\n    /// Requires Tier.SIX to call.\\n    function ifSix()\\n        external\\n        view\\n        onlyTier(msg.sender, ITier.Tier.SIX)\\n    { } // solhint-disable-line no-empty-blocks\\n\\n    /// Requires Tier.SEVEN to call.\\n    function ifSeven()\\n        external\\n        view\\n        onlyTier(msg.sender, ITier.Tier.SEVEN)\\n    { } // solhint-disable-line no-empty-blocks\\n\\n    /// Requires Tier.EIGHT to call.\\n    function ifEight()\\n        external\\n        view\\n        onlyTier(msg.sender, ITier.Tier.EIGHT)\\n    { } // solhint-disable-line no-empty-blocks\\n}\"\r\n    },\r\n    \"./contracts/test/TierUtilTest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.6.12;\\n\\nimport {ITier} from \\\"../tier/ITier.sol\\\";\\nimport {TierUtil} from \\\"../libraries/TierUtil.sol\\\";\\n\\n/// @title TierUtilTest\\n/// Thin wrapper around the `TierUtil` library to facilitate hardhat unit testing.\\ncontract TierUtilTest {\\n    /// Wraps `TierUtil.tierAtBlockFromReport`.\\n    /// @param report_ Forwarded to TierUtil.\\n    /// @param blockNumber_ Forwarded to TierUtil.\\n    function tierAtBlockFromReport(uint256 report_, uint256 blockNumber_)\\n        external\\n        pure\\n        returns (ITier.Tier)\\n    {\\n        return TierUtil.tierAtBlockFromReport(report_, blockNumber_);\\n    }\\n\\n    /// Wraps `TierUtil.tierBlock`.\\n    /// @param report_ Forwarded to TierUtil.\\n    /// @param tier_ Forwarded to TierUtil.\\n    function tierBlock(uint256 report_, ITier.Tier tier_)\\n        external\\n        pure\\n        returns (uint256)\\n    {\\n        return TierUtil.tierBlock(report_, tier_);\\n    }\\n\\n    /// Wraps `TierUtil.truncateTiersAbove`.\\n    /// @param report_ Forwarded to TierUtil.\\n    /// @param tier_ Forwarded to TierUtil.\\n    function truncateTiersAbove(uint256 report_, ITier.Tier tier_)\\n        external\\n        pure\\n        returns (uint256)\\n    {\\n        return TierUtil.truncateTiersAbove(report_, tier_);\\n    }\\n\\n    /// Wraps `TierUtil.updateBlocksForTierRange`.\\n    /// @param report_ Forwarded to TestUtil.\\n    /// @param startTier_ Forwarded to TestUtil.\\n    /// @param endTier_ Forwarded to TestUtil.\\n    /// @param blockNumber_ Forwarded to TestUtil.\\n    function updateBlocksForTierRange(\\n        uint256 report_,\\n        ITier.Tier startTier_,\\n        ITier.Tier endTier_,\\n        uint256 blockNumber_\\n    ) external pure returns (uint256) {\\n        return\\n            TierUtil.updateBlocksForTierRange(\\n                report_,\\n                startTier_,\\n                endTier_,\\n                blockNumber_\\n            );\\n    }\\n\\n    /// Wraps `TierUtil.updateReportWithTierAtBlock`.\\n    /// @param report_ Forwarded to TestUtil.\\n    /// @param startTier_ Forwarded to TestUtil.\\n    /// @param endTier_ Forwarded to TestUtil.\\n    /// @param blockNumber_ Forwarded to TestUtil.\\n    function updateReportWithTierAtBlock(\\n        uint256 report_,\\n        ITier.Tier startTier_,\\n        ITier.Tier endTier_,\\n        uint256 blockNumber_\\n    ) external pure returns (uint256) {\\n        return\\n            TierUtil.updateReportWithTierAtBlock(\\n                report_,\\n                startTier_,\\n                endTier_,\\n                blockNumber_\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/test/TierByConstructionClaimTest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.6.12;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { ITier } from \\\"../tier/ITier.sol\\\";\\nimport { TierByConstructionClaim } from \\\"../claim/TierByConstructionClaim.sol\\\";\\n\\n/// @title TierByConstructionClaimTest\\n/// A simple example showing how TierByConstruction can be used to gate a claim on an erc20.\\n///\\n/// In this example users can mint 100 tokens for themselves if:\\n///\\n/// - They held FOUR at the time the claim contract is constructed\\n/// - They continue to hold tier FOUR until they claim\\n///\\n/// The user can increase their tier at any point but must never drop below FOUR between the relevant blocks.\\n///\\n/// If a user holds FOUR at construction but forgets to claim before they downgrade they can NOT claim.\\n///\\n/// This is just an example, the same basic principle can be applied to any kind of mintable, including NFTs.\\n///\\n/// The main takeaways:\\n///\\n/// - Checking the prestige level is decoupled from granting it (ANY ITier set by the constructor can authorize a claim)\\n/// - Claims are time sensitive against TWO blocks, for BOTH construction and claim (NOT a snapshot)\\n/// - Users pay the gas and manage their own claim/mint (NOT an airdrop)\\ncontract TierByConstructionClaimTest is ERC20, TierByConstructionClaim {\\n    /// Nothing special needs to happen in the constructor.\\n    /// Simply forward/set the desired ITier in the TierByConstruction constructor.\\n    /// The erc20 constructor is as per Open Zeppelin.\\n    /// @param tier_ The tier contract to mediate the validity of claims.\\n    constructor(ITier tier_)\\n        public\\n        TierByConstructionClaim(tier_, ITier.Tier.FOUR)\\n        ERC20(\\\"goldTkn\\\", \\\"GTKN\\\")\\n    { } // solhint-disable-line no-empty-blocks\\n\\n    function _afterClaim(address account_, uint256, bytes memory) internal override {\\n        _mint(account_, 100);\\n    }\\n}\"\r\n    },\r\n    \"./contracts/test/ValueTierTest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.6.12;\\n\\nimport { ValueTier } from \\\"../tier/ValueTier.sol\\\";\\nimport { ITier } from \\\"../tier/ITier.sol\\\";\\n\\n/// @title ValueTierTest\\n///\\n/// Thin wrapper around the `ValueTier` contract to facilitate hardhat unit testing of `internal` functions.\\ncontract ValueTierTest is ValueTier {\\n    /// Set the `tierValues` on construction to be referenced immutably.\\n    constructor(uint256[8] memory tierValues_) public ValueTier(tierValues_) { } // solhint-disable-line no-empty-blocks\\n\\n    /// Wraps `tierToValue`.\\n    function wrappedTierToValue(ITier.Tier tier_) external view returns(uint256) {\\n        return ValueTier.tierToValue(tier_);\\n    }\\n\\n    /// Wraps `valueToTier`.\\n    function wrappedValueToTier(uint256 value_) external view  returns(ITier.Tier) {\\n        return ValueTier.valueToTier(value_);\\n    }\\n}\"\r\n    },\r\n    \"./contracts/test/ClaimERC1155Test.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CAL\\n\\npragma solidity 0.6.12;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { ERC1155 } from \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport { ERC20BalanceTier } from \\\"../tier/ERC20BalanceTier.sol\\\";\\nimport { TierByConstructionClaim } from \\\"../claim/TierByConstructionClaim.sol\\\";\\nimport { ITier } from \\\"../tier/ITier.sol\\\";\\n\\n/// @title ClaimERC1155Test\\n/// Contract that implements claiming an erc1155 contingent on tiers for testing and demonstration purposes.\\n/// The contract is `ERC20BalanceTier`, `TierByConstructionClaim` and `ERC1155` from open zeppelin:\\n/// - The balance tier compares the current holdings of an erc20 against preset values.\\n/// - The tier by construction ensures the claim is restricted to anyone tier THREE and above.\\n/// - The tier by construction also exposes `isTier` to provide further goodies to tier FIVE and above.\\n/// - The erc1155 enables and tracks minted NFTs.\\ncontract ClaimERC1155Test is ERC20BalanceTier, TierByConstructionClaim, ERC1155 {\\n    uint256 public constant ART = 0;\\n    uint256 public constant GOOD_ART = 1;\\n\\n    constructor(IERC20 redeemableToken_, uint256[8] memory tierValues_)\\n        public\\n        ERC1155(\\\"https://example.com/{id}.json\\\")\\n        TierByConstructionClaim(this, ITier.Tier.THREE)\\n        ERC20BalanceTier(redeemableToken_, tierValues_) { } // solhint-disable-line no-empty-blocks\\n\\n    function _afterClaim(\\n        address account_,\\n        uint256,\\n        bytes memory\\n    ) internal override {\\n        // Anyone above tier FIVE gets more art and some good art.\\n        bool isFive_ = isTier(account_, Tier.FIVE);\\n\\n        uint256[] memory ids_ = new uint256[](2);\\n        uint256[] memory amounts_ = new uint256[](2);\\n\\n        ids_[0] = (ART);\\n        ids_[1] = (GOOD_ART);\\n\\n        amounts_[0] = isFive_ ? 2 : 1;\\n        amounts_[1] = isFive_ ? 1 : 0;\\n\\n        // _mintBatch to avoid Reentrancy interleaved with state change from multiple _mint calls.\\n        // The reentrancy comes from the erc1155 receiver.\\n        _mintBatch(account_, ids_, amounts_, \\\"\\\");\\n    }\\n}\"\r\n    },\r\n    \"./contracts/test/ReserveTokenTest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CAL\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/// @title ReserveToken\\n/// An example token that can be used as a reserve asset.\\n/// On mainnet this would likely be some brand of stablecoin but can be anything.\\ncontract ReserveTokenTest is ERC20 {\\n    /// How many tokens to mint initially.\\n    // One _billion_ dollars \uf477\uf608\\n    uint256 public constant INITIAL_MINT = 10 ** 9;\\n\\n    /// Test against frozen assets, for example USDC can do this.\\n    mapping(address => bool) public freezables;\\n\\n    constructor() public ERC20(\\\"USD Classic\\\", \\\"USDCC\\\") {\\n        _mint(msg.sender, SafeMath.mul(INITIAL_MINT, 10 ** 18));\\n    }\\n\\n    /// Anyone in the world can freeze any address on our test asset.\\n    /// @param address_ The address to freeze.\\n    function addFreezable(address address_) external {\\n        freezables[address_] = true;\\n    }\\n\\n    /// Anyone in the world can unfreeze any address on our test asset.\\n    /// @param address_ The address to unfreeze.\\n    function removeFreezable(address address_) external {\\n        freezables[address_] = false;\\n    }\\n\\n    /// Burns all tokens held by the sender.\\n    function purge() external {\\n        _burn(msg.sender, balanceOf(msg.sender));\\n    }\\n\\n    /// Enforces the freeze list.\\n    function _beforeTokenTransfer(\\n        address,\\n        address receiver_,\\n        uint256\\n    ) internal override {\\n        require(\\n            receiver_ == address(0) || !(freezables[receiver_]),\\n            \\\"FROZEN\\\"\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155MetadataURI.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n *\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping (uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping (address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address,uint256)')) == 0x00fdd58e\\n     *     bytes4(keccak256('balanceOfBatch(address[],uint256[])')) == 0x4e1273f4\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,uint256,bytes)')) == 0xf242432a\\n     *     bytes4(keccak256('safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)')) == 0x2eb2c2d6\\n     *\\n     *     => 0x00fdd58e ^ 0x4e1273f4 ^ 0xa22cb465 ^\\n     *        0xe985e9c5 ^ 0xf242432a ^ 0x2eb2c2d6 == 0xd9b67a26\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n\\n    /*\\n     *     bytes4(keccak256('uri(uint256)')) == 0x0e89341c\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC1155_METADATA_URI = 0x0e89341c;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor (string memory uri_) public {\\n        _setURI(uri_);\\n\\n        // register the supported interfaces to conform to ERC1155 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC1155);\\n\\n        // register the supported interfaces to conform to ERC1155MetadataURI via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) external view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    )\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][from] = _balances[id][from].sub(amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        _balances[id][to] = _balances[id][to].add(amount);\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            _balances[id][from] = _balances[id][from].sub(\\n                amount,\\n                \\\"ERC1155: insufficient balance for transfer\\\"\\n            );\\n            _balances[id][to] = _balances[id][to].add(amount);\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] = _balances[id][account].add(amount);\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] = amounts[i].add(_balances[ids[i]][to]);\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address account, uint256 id, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        _balances[id][account] = _balances[id][account].sub(\\n            amount,\\n            \\\"ERC1155: burn amount exceeds balance\\\"\\n        );\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][account] = _balances[ids[i]][account].sub(\\n                amounts[i],\\n                \\\"ERC1155: burn amount exceeds balance\\\"\\n            );\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n    { }\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () internal {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"erc20_\",\"type\":\"address\"},{\"internalType\":\"uint256[8]\",\"name\":\"tierValues_\",\"type\":\"uint256[8]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum ITier.Tier\",\"name\":\"startTier\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"enum ITier.Tier\",\"name\":\"endTier\",\"type\":\"uint8\"}],\"name\":\"TierChange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"erc20\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"report\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reports\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"enum ITier.Tier\",\"name\":\"endTier_\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"setTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tierValues\",\"outputs\":[{\"internalType\":\"uint256[8]\",\"name\":\"tierValues_\",\"type\":\"uint256[8]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ERC20TransferTier", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "100000", "ConstructorArguments": "000000000000000000000000a1a36d3537bbe375cc9694795f663ddc8d516db9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000878678326eac90000000000000000000000000000000000000000000000000010f0cf064dd5920000000000000000000000000000000000000000000000000021e19e0c9bab240000000000000000000000000000000000000000000000000054b40b1f852bda00000000000000000000000000000000000000000000000000a968163f0a57b40000000000000000000000000000000000000000000000000152d02c7e14af6800000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5beb75851cd2f189fe99a60865626d5e4ad46d8aec26ba98dd3b7b12a9170e5a"}