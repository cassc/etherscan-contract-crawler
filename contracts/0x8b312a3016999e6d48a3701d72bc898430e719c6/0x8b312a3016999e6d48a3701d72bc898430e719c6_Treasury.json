{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity =0.8.19;\r\n\r\n/** INTERFACES */\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IAddressRegistry {\r\n    function getDistributorContractAddress() external view returns (address);\r\n    function getHandlerAddress() external view returns (address);\r\n}\r\n\r\n/** CONTRACT */\r\n\r\ncontract Treasury {\r\n\r\n    /** GLOBAL PARAMS */\r\n\r\n    address public addressRegistryAddress;\r\n    IAddressRegistry addressRegistry;\r\n\r\n    constructor(address addressRegistryAddress_) {\r\n        _setAddressRegistry(addressRegistryAddress_);\r\n    }\r\n\r\n    /** MODIFIER */\r\n\r\n    modifier canRequest() {\r\n        require(msg.sender == addressRegistry.getDistributorContractAddress() || msg.sender == addressRegistry.getHandlerAddress(), \"Only distributor or handler\");\r\n        _;\r\n    }\r\n\r\n    /** VIEW */\r\n\r\n    function getBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getERC20Balance(address _token) public view returns (uint256) {\r\n        return IERC20(_token).balanceOf(address(this));\r\n    }\r\n\r\n    /** AUTHORIZED */\r\n\r\n    function sendETH(address _recipient, uint256 _amount) external canRequest {\r\n        require((address(this)).balance >= _amount, \"Insufficient balance\");\r\n        payable(_recipient).transfer(_amount);\r\n    }\r\n\r\n    function sendAllETH(address _recipient) external canRequest {\r\n        payable(_recipient).transfer(getBalance());\r\n    }\r\n\r\n    function sendERC20(address _recipient, uint256 _amount, address _token) external canRequest {\r\n        require(IERC20(_token).balanceOf(address(this)) >= _amount, \"Insufficient token balance\");\r\n        IERC20(_token).transfer(_recipient, _amount);\r\n    }\r\n\r\n    function sendAllERC20(address _recipient, address _token) external canRequest {\r\n        IERC20(_token).transfer(_recipient, getERC20Balance(_token));\r\n    }\r\n\r\n    function updateAddressRegistry(address _registry) external {\r\n        require(msg.sender == addressRegistry.getHandlerAddress(), \"Only Handler\");\r\n        _setAddressRegistry(_registry);\r\n    }\r\n\r\n    /** INTERNAL */\r\n\r\n    function _setAddressRegistry(address _registry) internal {\r\n        addressRegistryAddress = _registry;\r\n        addressRegistry = IAddressRegistry(addressRegistryAddress);\r\n    }\r\n\r\n    // Make contract able to recive ETH;\r\n    receive() external payable {}\r\n\r\n    fallback() external payable {}\r\n\r\n    // Good luck!\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressRegistryAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"addressRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getERC20Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sendAllERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"sendAllETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sendERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"updateAddressRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Treasury", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000a793087c5eb21452cde6b5ed12544f89e6d47fbd", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a78ac98339e7fcaa130a49099349feb4e2be37cf9a273328b164d9aaa7b7eb40"}