{"SourceCode": "{\"AFiFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.8.0;\\n\\nimport {Clones} from \\\"./Clones.sol\\\";\\nimport {Ownable} from \\\"./Ownable.sol\\\";\\nimport \\\"./IAFi.sol\\\";\\nimport \\\"./IPassiveRebal.sol\\\";\\n\\n/**\\n * @title AFiFactory.\\n * @notice Factory contract for creating/deploying new ATokens.\\n */\\ncontract AFiFactory is Ownable {\\n  address[] public allUnderlyingTokens;\\n  mapping(address =\\u003e mapping(address =\\u003e bool)) public isUnderlyingTokenPresent;\\n  address public aTokenImplementation;\\n  address[] public aFiProducts;\\n  mapping(address =\\u003e address[]) internal userATokenList;\\n  mapping(address =\\u003e mapping(address =\\u003e bool)) internal isUserInvestingIn;\\n  mapping(address =\\u003e bool) public isATokenPresent;\\n  mapping(address =\\u003e mapping(address =\\u003e bool)) internal userAlreadyInvested;\\n  event TokenCreated(address indexed token, string name, string symbol);\\n  event AddUnderlyingTokens(address indexed afiContract, address utoken);\\n\\n  /**\\n   * @notice To initialize/deploy the AFiFactory contract.\\n   * @param _aTokenImplementation Address of AFiBase contract.\\n   */\\n  constructor(address _aTokenImplementation) {\\n    //solhint-disable-next-line reason-string\\n    require(_aTokenImplementation != address(0), \\\"AF01\\\");\\n    aTokenImplementation = _aTokenImplementation;\\n  }\\n\\n  /**\\n   * @notice Returns underlying tokens length.\\n   * @return uint256 Length of underlying tokens array.\\n   */\\n  function allUnderlyingTokensLength() external view returns (uint) {\\n    return allUnderlyingTokens.length;\\n  }\\n\\n  /**\\n   * @notice Returns afiProducts count.\\n   * @return uint256 Length of aFiProducts array\\n   */\\n  function afiProductsCount() external view returns (uint) {\\n    return aFiProducts.length;\\n  }\\n\\n  /**\\n   * @notice To create new ATokens.\\n   * @dev The params must be equal. Aarna engine address \\u0026 underlying token address cannot be zero address.\\n   * @param _name Name of AToken.\\n   * @param _symbol Symbol of AToken.\\n   * @param data encoded data.\\n   * @param _teamWallets array of team wallets.\\n   * @param _isPassiveRebalanced i.e. passive rebalance status of the afiContract.\\n   * @param _isActiveRebalanced i.e. active rebalance status of the afiContract.\\n   * @param _aFiStorage address of AFiStorage contract\\n   * @param _rebalContract address of AFiPassiveRebalStrategies contract\\n   * @param _aFiManager address of AFiManager\\n   * @param _aarnaEngine address of aarna engine wallet\\n   * @return aTokenAddress returns address of created afi contract(aToken)\\n   */\\n  function createAToken(\\n    string memory _name,\\n    string memory _symbol,\\n    bytes memory data,\\n    address[] memory _teamWallets,\\n    bool _isPassiveRebalanced,\\n    bool _isActiveRebalanced,\\n    IAFiStorage _aFiStorage,\\n    IPassiveRebal _rebalContract,\\n    address _aFiManager,\\n    address _aarnaEngine\\n  ) external onlyOwner returns (address aTokenAddress) {\\n\\n    IAFi.PoolsData memory pooldata = abi.decode(data, (IAFi.PoolsData));\\n    require(\\n        pooldata._underlyingTokensProportion.length == pooldata._compound.length \\u0026\\u0026\\n        pooldata._compound.length == pooldata._dToken.length \\u0026\\u0026\\n        pooldata._dToken.length == pooldata._aaveToken.length \\u0026\\u0026 \\n        pooldata._aaveToken.length == pooldata._priceOracles.length,\\n      \\\"AF: Array lengths\\\"\\n    );\\n    // Check if the sum of proportions is equal to 100%\\n    uint256 totalProportion;\\n    for (uint256 i = 0; i \\u003c pooldata._underlyingTokensProportion.length; i++) {\\n      totalProportion += pooldata._underlyingTokensProportion[i];\\n    }\\n    require(totalProportion == 10000000, \\\"AF: Proportions must add up to 100%\\\");\\n    require(_aFiManager != address(0), \\\"AF: zero addr\\\");\\n    require(_aarnaEngine != address(0), \\\"AF: zero addr\\\");\\n    require(address(_aFiStorage) != address(0), \\\"AF: zero addr\\\");\\n    require(!checkForZeroAddress(_teamWallets), \\\"AF: zero addr\\\");\\n    require(_teamWallets.length \\u003e 1, \\\"AF: Array Length\\\");\\n    aTokenAddress = Clones.clone(aTokenImplementation);\\n    uniPoolValidation(data, aTokenAddress, pooldata._underlyingTokensProportion.length);\\n    isATokenPresent[aTokenAddress] = true;\\n    aFiProducts.push(aTokenAddress);\\n    IAFi(aTokenAddress).initialize(\\n      msg.sender,\\n      _name,\\n      _symbol,\\n      data,\\n      _isActiveRebalanced,\\n      _aFiStorage\\n    );\\n    IAFi(aTokenAddress).initializePlatformData(\\n      _teamWallets,\\n      _rebalContract,\\n      _isPassiveRebalanced,\\n      _aFiManager,\\n      _aarnaEngine\\n    );\\n    IAFi(aTokenAddress).initializeToken(pooldata._depositStableCoin, pooldata._depositCoinOracle, pooldata.underlyingData);\\n    emit TokenCreated(aTokenAddress, _name, _symbol);\\n  }\\n\\n  function uniPoolValidation(bytes memory payload, address aToken, uint256 proLen) internal{\\n    IAFi.PoolsData memory pooldata = abi.decode(payload, (IAFi.PoolsData));\\n    IAFi.UnderlyingData memory uniData = abi.decode(pooldata.underlyingData, (IAFi.UnderlyingData));\\n    require(uniData._underlyingTokens.length == proLen, \\\"LE\\\");\\n    addUnderlyingTokens(aToken, uniData._underlyingTokens);\\n  }\\n\\n  /**\\n   * @notice To add underlying token to allUnderlyingTokens array.\\n   * @param _underlyingTokens Array of ERC20 token\\u0027s that forms the underlying token for an AToken.\\n   */\\n  function addUnderlyingTokens(\\n    address afiBase,\\n    address[] memory _underlyingTokens\\n  ) internal {\\n    uint uTokensLength = _underlyingTokens.length;\\n\\n    require(!checkForZeroAddress(_underlyingTokens), \\\"zero addr\\\");\\n    for (uint i = 0; i \\u003c uTokensLength; i++) {\\n      if (!isUnderlyingTokenPresent[afiBase][_underlyingTokens[i]]) {\\n        allUnderlyingTokens.push(_underlyingTokens[i]);\\n        isUnderlyingTokenPresent[afiBase][_underlyingTokens[i]] = true;\\n        emit AddUnderlyingTokens(afiBase, _underlyingTokens[i]);\\n      }\\n    }\\n  }\\n\\n  function checkForZeroAddress(\\n    address[] memory inputAddresses\\n  ) internal pure returns (bool containZeroAddr) {\\n    uint len = inputAddresses.length;\\n    for (uint i = 0; i \\u003c len; i++) {\\n      if (inputAddresses[i] == address(0)) {\\n        return true;\\n      }\\n    }\\n    return false;\\n  }\\n\\n  function setIfUserInvesting(address user, address afiContract) external {\\n    require(msg.sender == afiContract, \\\"AF02\\\");\\n    require(isATokenPresent[afiContract], \\\"AF: product not present\\\");\\n    if(!isUserInvestingIn[user][afiContract]){\\n      if(!userAlreadyInvested[user][afiContract]){\\n        userATokenList[user].push(afiContract);\\n        userAlreadyInvested[user][afiContract] = true;\\n      }\\n      isUserInvestingIn[user][afiContract] = true;\\n    }\\n  }\\n\\n  function hasUserInvestedAlready(address afiContract, address user) external view returns(bool){\\n    return isUserInvestingIn[user][afiContract];\\n  } \\n\\n  function getUserATokenList(address user) external view returns(address[] memory) {\\n    return userATokenList[user];\\n  }\\n\\n  function withdrawAndResetInvestmentStatus(address user, address afiContract) external {\\n    require(msg.sender == afiContract, \\\"AF03\\\");\\n    require(isATokenPresent[afiContract], \\\"AF: product is not present\\\");\\n    require(isUserInvestingIn[user][afiContract], \\\"AF: User is not investing\\\"); \\n    // Reset the investment status\\n    isUserInvestingIn[user][afiContract] = false;\\n  }\\n  \\n  // the purpose of the function is to encode the pool data that follows the structure declared in IAFi.sol\\n  function encodePoolData(\\n    IAFi.PoolsData memory pooldata\\n  ) external pure returns (bytes memory) {\\n    return (abi.encode(pooldata));\\n  }\\n\\n  // the purpose of the function is to encode the pool data that follows the structure declared in IAFi.sol\\n  function encodeUnderlyingData(\\n    IAFi.UnderlyingData memory uData\\n  ) external pure returns (bytes memory) {\\n    return (abi.encode(uData));\\n  }\\n\\n  function getPricePerFullShare(address afiContract, address afiStorage) public view returns (uint) {\\n    uint _pool = 0;\\n    address[] memory uTokens = new address[](IAFi(afiContract).getUTokens().length);\\n    uTokens = IAFi(afiContract).getUTokens();\\n    uint256 _totalSupply =  IAFi(afiContract).totalSupply();\\n    uint uLen = uTokens.length;\\n    address midTok;\\n    for (uint j = 0; j \\u003c uLen; j++) {\\n      midTok = IAFi(afiContract).getMidToken(uTokens[j]);\\n      _pool = _pool + (IAFiStorage(afiStorage).calcPoolValue(uTokens[j], afiContract, midTok));\\n    }\\n    if(_totalSupply == 0){\\n      return 1000000;\\n    }\\n    return _pool * (10000) / (_totalSupply);\\n  }\\n}\"},\"Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * \\u003e To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * \\u003e a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"IAFi.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity =0.8.0;\\n\\nimport {IERC20Extended as IERC20} from \\\"./IERC20Extended.sol\\\";\\nimport \\\"./IAFiStorage.sol\\\";\\nimport \\\"./IPassiveRebal.sol\\\";\\n\\n/**\\n * @title PassiveRebal.\\n * @notice Interface of the Passive Rebalance contract.\\n */\\ninterface PassiveRebal {\\n\\n  function applyRebalForProportions(\\n    address _aFiContract,\\n    address _aFiManager,\\n    uint _strategyNumber,\\n    address[] memory _tokens\\n  ) external returns (uint[] memory proportions);\\n\\n  function getPauseStatus() external returns (bool);\\n\\n  function getRebalPeriod(address aFiContract) external returns (uint);\\n\\n  function updateRebalPeriod(address aFiContract, uint _newRebalPeiod) external;\\n\\n  function setPassiveRebalancedStatus(address aFiContract, bool status) external;\\n\\n  function isAFiPassiveRebalanced(\\n    address aFiContract\\n  ) external returns (bool _isPassiveRebalanced);\\n\\n  function getRebalStrategyNumber(address aFiContract) external returns (uint);\\n\\n  function updateRebalStrategyNumber(\\n    address aFiContract,\\n    uint updatedStrategy\\n  ) external;\\n}\\n\\ninterface IAFiManager {\\n  function _distributeProfitShare(\\n    address aFiStorage,\\n    address aFiContract,\\n    uint profit,\\n    address oToken,\\n    uint256 depositNAV,\\n    uint256 redemptionNAV\\n  ) external returns (uint totalProfitShare);\\n\\n  function updateUTokenProportion(address aFiContract,address aFiStorage) external returns(uint256[] memory);\\n\\n  function intializeData(address aFiContract,address[] memory underlyingTokens,uint[] memory underlyingProportion) external;\\n\\n  function uTokenslippage(address aFiContract, address uToken) external view returns(uint uTokenSlippage);\\n\\n}\\n\\n/**\\n * @title IAFi.\\n * @notice Interface of the AToken.\\n */\\ninterface IAFi {\\n\\n  struct StablePools{\\n    address[] _pools;\\n  }\\n\\n  struct UnderlyingData{\\n    address[] _underlyingTokens;\\n    address[] _underlyingUniPoolToken;\\n    address[] _underlyingUniPool;\\n    address[] _underlyingPoolWithWETH;\\n    StablePools[] stablePools;\\n    address[] stableWethPool;\\n  }\\n\\n  struct PoolsData {\\n    address[] _depositStableCoin;\\n    address[] _depositCoinOracle;\\n    bytes underlyingData;                                                                             \\n    address _apr;\\n    address[] _compound;\\n    address[] _aaveToken;\\n    address[] _priceOracles;\\n    uint[] _underlyingTokensProportion;\\n    uint[] _dToken;\\n    uint _typeOfProduct;\\n  }\\n\\n  /**\\n   * @param account Address of the account that paused the contract.\\n   * @param isDeposit True if we want to pause deposit otherwise false if want to pause withdraw.\\n   */\\n  event Paused(address account,bool isDeposit);\\n  /**\\n   * @param account Address of the account that unpaused the contract.\\n   * @param isDeposit True if we want to unpause deposit otherwise false if want to unpause withdraw.\\n   */\\n  event Unpaused(address account,bool isDeposit);\\n\\n  /**\\n   * @notice Function to initialize the data, owner and afi token related data.\\n   * @dev the function should be called once only by factory\\n   * @param newOwner indicates the owner of the created afi product.\\n   * @param _name indicates the name of the afi Token\\n   * @param _symbol indicates symbol of the the afi Token.\\n   * @param data indicates the encoded data that follows the PoolsData struct format.\\n   * @param _isActiveRebalanced indicates the active rebalance status of the afi contract.\\n   * @param _aFiStorage indicates the afi storage contract address.\\n   */\\n  function initialize(\\n    address newOwner,\\n    string memory _name,\\n    string memory _symbol,\\n    bytes memory data,\\n    bool _isActiveRebalanced,\\n    IAFiStorage _aFiStorage\\n  ) external;\\n\\n  /**\\n   * @notice Function to initialize the platform related data.\\n   * @dev  the function should be called once only by factory\\n   * @param _teamWallets indicates the array of the wallets to share the profit and confirm active rebalance txn.\\n   * @param _rebalContract indicates passive rebal strategy contract address.\\n   * @param _isPassiveRebalanced indicates the passive rebalance status of the afi contract.\\n   * @param _aFiManager indicates the afi manager contract address.\\n   * @param _aarnaEngine indicates the engine contract.\\n   */\\n  function initializePlatformData(\\n    address[] memory _teamWallets,\\n    IPassiveRebal _rebalContract,\\n    bool _isPassiveRebalanced,\\n    address _aFiManager,\\n    address _aarnaEngine\\n  ) external;\\n\\n  /**\\n   * @notice Function to initialize accepted tokens in deposit and withdraw functions.\\n   * @dev  the function should be called once only by factory\\n   * @param iToken indicates the array of the accepted token addressess.\\n   */\\n  function initializeToken(\\n    address[] memory iToken,\\n    address[] memory iTokenOracel,\\n    bytes memory poolData\\n  ) external;\\n\\n  /**\\n   * @notice Returns the array of underlying tokens.\\n   * @return uTokensArray Array of underlying tokens.\\n   */\\n  function getUTokens() external view returns (address[] memory uTokensArray);\\n  function swapViAFiStorage(\\n    address from,\\n    address to,\\n    uint amount,\\n    uint deadline,\\n    address midTok,\\n    uint[] memory slippageFactor,\\n    uint8 counter\\n  ) external returns(uint256);\\n  \\n  /**\\n   * @notice Returns the paused status of the contract.\\n   */\\n  function isPaused() external view returns (bool,bool);\\n  function getProportionsAndRebalTime() external view returns (uint[] memory, uint[] memory, uint256);\\n  /**\\n   * @notice Updates the pool data during Active Rebalance.\\n   * @param data that follows PoolsData format indicates the data of the token being rebalanced in Active Rebalance.\\n   */\\n  function updatePoolData(bytes memory data) external;\\n  function sendProfitOrFeeToManager(address wallet, uint profitShare, address oToken) external;\\n  function totalSupply() external view returns (uint);\\n  function updateUnderlyingData(address[] memory _uTokens,uint256[] memory _uTokenProportion,uint256[] memory _defaultProportion)external;\\n  function _supplyDydx(address tok, uint amount) external;\\n  function _supplyAave(address tok, uint amount) external;\\n  function _supplyCompound(address tok, uint amount) external;\\n  function getRebalContract() external view returns(address);\\n  function getPriceOracle(address tok) external view returns(address);\\n  function updateOracleData(address _uTokens, address _oracleAddress, address _underlyingMidToken, address uniPool)external;\\n  function _withdrawAave(address tok, uint amount) external;\\n  function _withdrawDydx(address tok, uint amount) external;\\n  function _withdrawCompound(address tok, uint amount) external;\\n  function getTVL() external view returns(uint256);\\n  function upDateInputTokPool(bytes memory uniData) external;\\n  function getTypeOfProduct() external view returns(uint256);\\n  function updateuniPool(address tok, address midTok) external;\\n  function getMidToken(address tok) external view returns (address);\\n  function getPool(\\n    address tok,\\n    address midTok\\n  ) external view returns (address);\\n}\"},\"IAFiStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity =0.8.0;\\n\\n/**\\n * @title IAFiStorage.\\n * @notice Interface of the AFiStorage.\\n */\\n\\ninterface IIEarnManager {\\n  function recommend(\\n    address _token,\\n    address afiBase,\\n    address afiStorage\\n  ) external view returns (string memory choice, uint capr, uint aapr, uint dapr);\\n}\\n\\ninterface IAFiStorage {\\n  /**\\n   * @notice Struct representing investor details.\\n   * @param isPresent Boolean indicating whether an investor exists.\\n   * @param uTokenBalance Investor underlying token balance.\\n   * @param investedAmount Amount of StableCoin invested in the underlying token\\n   */\\n  struct Investor {\\n    bool isPresent;\\n    uint depositNAV;\\n    uint redemptionNAV;\\n  }\\n\\n  /**\\n   * @notice Struct representing TeamWallet details.\\n   * @param isPresent Boolean indicating whether a wallet exists.\\n   * @param isActive Boolean indicating whether a wallet is active.\\n   * @param walletAddress Wallet address.\\n   */\\n  struct TeamWallet {\\n    bool isPresent;\\n    bool isActive;\\n    address walletAddress;\\n  }\\n\\n  /**\\n   * @notice enum representing Lending Protocols.\\n   * @param NONE represents NO protocol.\\n   * @param DYDX represents DYDX protocol.\\n   * @param COMPOUND represents COMPOUND protocol.\\n   * @param AAVE represents AAVE protocol.\\n   */\\n  enum Lender {\\n    NONE,\\n    DYDX,\\n    COMPOUND,\\n    AAVE\\n  }\\n\\n  /**\\n   * @notice Struct representing Rebalance details.\\n   * @param scenario Scenario can be either of 0, 1 or 2.\\n   * @param rebalancedUToken Address of the underlying token that is rebalanced.\\n   * @param rebalancedToUTokens Array of addresses of underlying tokens to which the uToken has been rebalanced.\\n   */\\n  struct RebalanceDetails {\\n    uint8 scenario;\\n    address rebalancedUToken;\\n    address[] rebalancedToUTokens;\\n  }\\n\\n  /**\\n   * @param walletAddress Address of the wallet.\\n   * @param isActive Boolean indicating wallet active status.\\n   */\\n  event TeamWalletActive(address indexed walletAddress, bool isActive);\\n\\n  /**\\n   * @param walletAddress Address of the wallet.\\n   * @param isActive Boolean indicating wallet active status.\\n   */\\n  event TeamWalletAdd(address indexed walletAddress, bool isActive);\\n\\n  /**\\n   * @notice Returns the team wallet details.\\n   * @param aFiContract Address of the AFi contract.\\n   * @param _wallet Wallet address\\n   * @return isPresent Boolean indicating the present status of the wallet.\\n   * @return isActive Boolean indicating whether to set the wallet to either active/inactive.\\n   */\\n  function getTeamWalletDetails(\\n    address aFiContract,\\n    address _wallet\\n  ) external view returns (bool isPresent, bool isActive);\\n\\n  /**\\n   * @notice To add a new team wallet.\\n   * @param aFiContract Address of the AFi contract.\\n   * @param _wallet Wallet address that has to be added in the `teamWallets` array.\\n   * @param isActive Boolean indicating whether to set the wallet to either active/inactive.\\n   * @param isPresent Boolean indicating the present status of the wallet.\\n   */\\n  function addTeamWallet(\\n    address aFiContract,\\n    address _wallet,\\n    bool isActive,\\n    bool isPresent\\n  ) external;\\n\\n  /**\\n   * @notice Returns the team wallets for an AFi.\\n   * @param aFiContract Address of the AFi contract.\\n   * @return _teamWallets Array of teamWallets.\\n   */\\n  function getTeamWalletsOfAFi(\\n    address aFiContract\\n  ) external view returns (address[] memory _teamWallets);\\n\\n  /**\\n   * @notice Sets the address for team wallets.\\n   * @param aFiContract Address of the AFi contract.\\n   * @param _teamWallets Array of addresses for the team wallets.\\n   */\\n  function setTeamWallets(address aFiContract, address[] memory _teamWallets) external;\\n\\n  /**\\n   * @notice Sets the status for the AFi in the storage contract.\\n   * @param aFiContract Address of the AFi contract.\\n   * @param active status for afiContracts.\\n   */\\n  function setAFiActive(address aFiContract, bool active) external;\\n\\n  /**\\n   * @notice To update rebalance details in the storage\\n   * @param aFiContract Address of the AFi contract.\\n   * @param rbUToken Address of the underlying token that is rebalanced.\\n   * @param rbtoUTokens Array of addresses of underlying tokens to which the uToken has been rebalanced.\\n   * @param _scenario Scenario can be either of 0, 1 or 2.\\n   */\\n  function updateRebalanceDetails(\\n    address aFiContract,\\n    address rbUToken,\\n    address[] memory rbtoUTokens,\\n    uint8 _scenario\\n  ) external;\\n\\n  /**\\n   * @notice Sets Active Rebalance status of an AFi.\\n   * @param aFiContract Address of the AFi contract.\\n   * @param status indicating active rebalance status of the AFi contract.\\n   */\\n  function setActiveRebalancedStatus(address aFiContract, bool status) external;\\n\\n  /**\\n   * @notice gets Active Rebalance status of an AFi.\\n   * @param aFiContract Address of the AFi contract.\\n   * @return _isActiveRebalanced bool indicating active rebalance status of the AFi contract.\\n   */\\n  function isAFiActiveRebalanced(\\n    address aFiContract\\n  ) external view returns (bool _isActiveRebalanced);\\n\\n  function getTotalActiveWallets(address aFiContract) external view returns (uint);\\n\\n  function setAPR(address aFiContract, address _apr) external;\\n\\n  function calcPoolValue(address tok, address afiContract, address midTok) external view returns (uint);\\n\\n  function calculateBalanceOfUnderlying(\\n    address tok,\\n    address afiContract\\n  ) external view returns (uint);\\n\\n  function calculatePoolInUsd(address afiContract) external view returns (uint);\\n\\n  function calcPoolValueSome(\\n    address tok,\\n    address afiContract,\\n    address midTok\\n  ) external view returns (uint);\\n\\n  function afiSync(\\n    address afiContract,\\n    address tok,\\n    address aaveTok,\\n    uint dtoken,\\n    address compTok\\n  ) external;\\n\\n  function getPriceOracle(address tokenIn) external view returns (uint256 priceOracle);\\n  function getAFiInitStatus(address afiContract) external view returns(bool, bool, bool);\\n  function afiContractInitUpdate(address afiContract, uint order) external;\\n  function getMinimumAmountOut(address afiContract, address _tokenIn, uint256 _amountIn, address _tokenOut, address midTok, address uniPool) external view  returns(uint256 priceOracle);\\n  function checkIfUSDC(address afiContract, address tok, address midTok) external view returns (uint256, uint256);\\n  function validateAndGetDecimals(address tok) external  view returns(uint256);\\n  function getStakedStatus(address aFiContract,address uToken) external view  returns(bool);\\n  function rearrange(address aFiContract) external;\\n  function balanceDydx(address tok, address afiContract) external view returns (uint);\\n  function balanceDydxAvailable(address tok) external view returns (uint);\\n  function balanceCompoundInToken(address tok, address afiContract) external view returns (uint);\\n  function balanceCompound(address tok, address afiContract) external view returns (uint);\\n  function balanceAave(address tok, address afiContract) external view returns (uint);\\n  function swapForOtherProduct(address afiContract, uint r, address oToken, uint deadline, uint[] memory slippageFactor) external returns(uint256);\\n  function caculateMinOutForUniswap(address afiContract, address _tokenIn, address _tokenOut, uint256 amt, address middleToken, address uniPool) external view returns(uint256);\\n  function _withdrawAll(address afiContract, address tok) external;\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"},\"IERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity =0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Extended is IERC20 {\\n  function decimals() external view returns (uint8);\\n}\\n\"},\"IPassiveRebal.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\npragma solidity =0.8.0;\\n\\ninterface IPassiveRebal {\\n  function applyRebalForProportions(\\n    address _aFiContract,\\n    address _aFiManager,\\n    address _aFiStorage,\\n    uint _strategyNumber,\\n    address[] memory _tokens\\n  ) external returns (uint[] memory proportions);\\n\\n  function getPauseStatus() external returns (bool);\\n\\n  function getRebalPeriod(address aFiContract) external returns (uint);\\n\\n  function updateRebalPeriod(address aFiContract, uint _newRebalPeiod) external;\\n\\n  function setPassiveRebalancedStatus(address aFiContract, bool status) external;\\n\\n  function isAFiPassiveRebalanced(\\n    address aFiContract\\n  ) external returns (bool _isPassiveRebalanced);\\n\\n  function getRebalStrategyNumber(address aFiContract) external returns (uint);\\n\\n  function updateRebalStrategyNumber(\\n    address aFiContract,\\n    uint updatedStrategy\\n  ) external;\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aTokenImplementation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"afiContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"utoken\",\"type\":\"address\"}],\"name\":\"AddUnderlyingTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"aFiProducts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aTokenImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"afiProductsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allUnderlyingTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allUnderlyingTokensLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"_teamWallets\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_isPassiveRebalanced\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isActiveRebalanced\",\"type\":\"bool\"},{\"internalType\":\"contract IAFiStorage\",\"name\":\"_aFiStorage\",\"type\":\"address\"},{\"internalType\":\"contract IPassiveRebal\",\"name\":\"_rebalContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aFiManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aarnaEngine\",\"type\":\"address\"}],\"name\":\"createAToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"aTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"_depositStableCoin\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_depositCoinOracle\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"underlyingData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_apr\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_compound\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_aaveToken\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_priceOracles\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_underlyingTokensProportion\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_dToken\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_typeOfProduct\",\"type\":\"uint256\"}],\"internalType\":\"struct IAFi.PoolsData\",\"name\":\"pooldata\",\"type\":\"tuple\"}],\"name\":\"encodePoolData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"_underlyingTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_underlyingUniPoolToken\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_underlyingUniPool\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_underlyingPoolWithWETH\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"}],\"internalType\":\"struct IAFi.StablePools[]\",\"name\":\"stablePools\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"stableWethPool\",\"type\":\"address[]\"}],\"internalType\":\"struct IAFi.UnderlyingData\",\"name\":\"uData\",\"type\":\"tuple\"}],\"name\":\"encodeUnderlyingData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"afiContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"afiStorage\",\"type\":\"address\"}],\"name\":\"getPricePerFullShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserATokenList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"afiContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasUserInvestedAlready\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isATokenPresent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isUnderlyingTokenPresent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"afiContract\",\"type\":\"address\"}],\"name\":\"setIfUserInvesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"afiContract\",\"type\":\"address\"}],\"name\":\"withdrawAndResetInvestmentStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AFiFactory", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000b895a9b6b5d0aa48292695c5d244ec5f14e4d02", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://82b2a11e8300f165106586abe311fdbc94814a346402df86bf508465e425d0e2"}