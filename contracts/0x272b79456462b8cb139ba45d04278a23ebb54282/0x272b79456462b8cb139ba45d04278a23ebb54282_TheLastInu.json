{"SourceCode": "/*\r\n\r\n$LINU. - The Last Inu.\r\n\r\nAt the point of writing, two trillion dollars had already been wiped out from the crypto market \r\nand it has been a complete bloodbath for the majority of us\r\nand a total annihilation for some. While our iron-clad convictions are being tested and \r\nshaken ceaselessly by fiascos which happened within our industry, \r\nthis is a call to arms and a rally for all survivors to continue this renaissance with \r\nhopes of a brighter future and to save us from our flawed financial system.\r\n\r\nThis is a tribute to every single one of you who still shows up EVERY SINGLE DAY despite \r\nnot seeing the light at end of the tunnel. \r\nHold on to your iron will and remember why you started in the first place while you navigate \r\nthrough this unregulated minefields of rugs/scams/cashgrab/pnd \r\nand still find near impossible ways to make ends meet. \r\n\r\nYou may be a \"dev\", a degen, an influencer, a whichever-chain maxi, a sniper, a rugger, \r\nbut here within the midst of our community - we will always be one- regardless of who you are \r\nand what you have done in this space. \r\nThere is no better time for us to unite, we welcome you to the final bastion of hope.. \r\n\r\nWe are,\r\nThe Last Inu. \r\n\r\n*/\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.7;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n}\r\n\r\ncontract TheLastInu is Context, IERC20, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  string constant _name = \"The Last Inu.\";\r\n  string constant _symbol = \"Linu.\";\r\n  uint8 constant _decimals = 18;\r\n\r\n  uint256 _totalSupply = 1000000000 * (10**_decimals);\r\n\r\n  mapping (address => uint256) private _balances;\r\n  mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n  mapping (address => bool) private _isExcludeFee;\r\n  mapping (address => bool) private _isExcludeMaxHold;\r\n\r\n  IDEXRouter public router;\r\n  address NATIVETOKEN;\r\n  address public pair;\r\n  address public factory;\r\n  address public currentRouter;\r\n  \r\n  uint256 public totalfee;\r\n  uint256 public marketingfee;\r\n  uint256 public liquidityfee;\r\n  uint256 public feeDenominator;\r\n\r\n  uint256 public maxWallet;\r\n  bool public removemaxWallet;\r\n\r\n  uint256 public swapthreshold;\r\n\r\n  bool public inSwap;\r\n  bool public autoswap;\r\n  bool public baseERC20;\r\n\r\n  constructor() {\r\n    currentRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    factory = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\r\n    NATIVETOKEN = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    _isExcludeFee[msg.sender] = true;\r\n    _isExcludeFee[address(this)] = true;\r\n    _isExcludeFee[currentRouter] = true;\r\n    _isExcludeFee[factory] = true;\r\n\r\n    _isExcludeMaxHold[msg.sender] = true;\r\n    _isExcludeMaxHold[address(this)] = true;\r\n    _isExcludeMaxHold[currentRouter] = true;\r\n    _isExcludeMaxHold[factory] = true;\r\n\r\n    router = IDEXRouter(currentRouter);\r\n    pair = IDEXFactory(router.factory()).createPair(NATIVETOKEN, address(this));\r\n    \r\n    _allowances[address(this)][address(router)] = type(uint256).max;\r\n    _allowances[address(this)][address(factory)] = type(uint256).max;\r\n    _allowances[address(this)][address(pair)] = type(uint256).max;\r\n    IERC20(NATIVETOKEN).approve(address(router),type(uint256).max);\r\n    IERC20(NATIVETOKEN).approve(address(factory),type(uint256).max);\r\n    IERC20(NATIVETOKEN).approve(address(pair),type(uint256).max);\r\n\r\n    _isExcludeMaxHold[pair] = true;\r\n    _balances[msg.sender] = _totalSupply;\r\n    maxWallet = _totalSupply.mul(30).div(1000);\r\n\r\n    marketingfee = 60;\r\n    liquidityfee = 20;\r\n    totalfee = 80;\r\n    feeDenominator = 1000;\r\n\r\n    emit Transfer(address(0), msg.sender, _totalSupply);\r\n\r\n  }\r\n\r\n  function setFee(uint256 _marketing,uint256 _liquidity,uint256 _denominator) external onlyOwner returns (bool) {\r\n    require( _marketing.add(_liquidity) <= _denominator.mul(8).div(100) );\r\n    marketingfee = _marketing;\r\n    liquidityfee = _liquidity;\r\n    totalfee = _marketing.add(_liquidity);\r\n    feeDenominator = _denominator;\r\n    return true;\r\n  }\r\n\r\n  function setMaxWallet(uint256 maxAmount) external onlyOwner returns (bool) {\r\n    maxWallet = maxAmount;\r\n    return true;\r\n  }\r\n\r\n  function updateNativeToken() external onlyOwner returns (bool) {\r\n    NATIVETOKEN = router.WETH();\r\n    return true;\r\n  }\r\n\r\n  function returnERC20Standart(bool flag) external onlyOwner returns (bool) {\r\n    baseERC20 = flag;\r\n    return true;\r\n  }\r\n\r\n  function setFeeExempt(address account,bool flag) external onlyOwner returns (bool) {\r\n    _isExcludeFee[account] = flag;\r\n    return true;\r\n  }\r\n\r\n  function setMaxHoldExempt(address account,bool flag) external onlyOwner returns (bool) {\r\n    _isExcludeMaxHold[account] = flag;\r\n    return true;\r\n  }\r\n\r\n  function setRemoveMaxWallet(bool flag) external onlyOwner returns (bool) {\r\n    removemaxWallet = flag;\r\n    return true;\r\n  }\r\n\r\n  function setAutoSwap(uint256 amount,bool flag) external onlyOwner returns (bool) {\r\n    swapthreshold = amount;\r\n    autoswap = flag;\r\n    return true;\r\n  }\r\n\r\n  function AddLiquidityETH(uint256 _tokenamount) external onlyOwner payable {\r\n    _basictransfer(msg.sender,address(this),_tokenamount.mul(10**_decimals));\r\n    swapthreshold = _balances[address(this)].mul(5).div(1000);\r\n    inSwap= true;\r\n    router.addLiquidityETH{value: address(this).balance }(\r\n    address(this),\r\n    _balances[address(this)],\r\n    0,\r\n    0,\r\n    owner(),\r\n    block.timestamp\r\n    );\r\n    inSwap = false;\r\n    autoswap = true;\r\n  }\r\n\r\n  function decimals() public pure returns (uint8) { return _decimals; }\r\n  function symbol() public pure returns (string memory) { return _symbol; }\r\n  function name() public pure returns (string memory) { return _name; }\r\n  function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n  function balanceOf(address account) external view override returns (uint256) { return _balances[account]; }\r\n\r\n  function isExcludeFee(address account) external view returns (bool) { return _isExcludeFee[account]; }\r\n  function isExcludeMaxHold(address account) external view returns (bool) { return _isExcludeMaxHold[account]; }\r\n\r\n  function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n    _transferFrom(msg.sender,recipient,amount);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address owner, address spender) external view override returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  function approve(address spender, uint256 amount) external override returns (bool) {\r\n    _approve(msg.sender, spender, amount);\r\n    return true;\r\n  }\r\n\r\n  function swap2ETH(uint256 amount) internal {\r\n    address[] memory path = new address[](2);\r\n    path[0] = address(this);\r\n    path[1] = NATIVETOKEN;\r\n    router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n    amount,\r\n    0,\r\n    path,\r\n    address(this),\r\n    block.timestamp\r\n    );\r\n  }\r\n\r\n  function autoAddLP(uint256 amountToLiquify,uint256 amountBNB) internal {\r\n    router.addLiquidityETH{value: amountBNB }(\r\n    address(this),\r\n    amountToLiquify,\r\n    0,\r\n    0,\r\n    owner(),\r\n    block.timestamp\r\n    );\r\n  }\r\n\r\n  function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n    if(_allowances[sender][msg.sender] != type(uint256).max){\r\n    _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount);\r\n    }\r\n    _transferFrom(sender,recipient,amount);\r\n    return true;\r\n  }\r\n\r\n  function _transferFrom(address sender,address recipient,uint256 amount) internal {\r\n    if(inSwap || baseERC20 || msg.sender == factory){\r\n    _basictransfer(sender, recipient, amount);\r\n    } else {\r\n    if(_balances[address(this)]>swapthreshold && autoswap && msg.sender != pair){\r\n    inSwap = true;\r\n    uint256 amountToMarketing = swapthreshold.mul(marketingfee).div(totalfee);\r\n    uint256 currentthreshold = swapthreshold.sub(amountToMarketing);\r\n    uint256 amountToLiquify = currentthreshold.div(2);\r\n    uint256 amountToSwap = amountToMarketing.add(amountToLiquify);\r\n    uint256 balanceBefore = address(this).balance;\r\n    swap2ETH(amountToSwap);\r\n    uint256 balanceAfter = address(this).balance.sub(balanceBefore);\r\n    uint256 amountpaid = balanceAfter.mul(amountToMarketing).div(amountToSwap);\r\n    uint256 amountLP = balanceAfter.sub(amountpaid);\r\n    payable(owner()).transfer(amountpaid);\r\n    autoAddLP(amountToLiquify,amountLP);\r\n    inSwap = false;\r\n    }\r\n    _transfer(sender, recipient, amount);\r\n    }\r\n  }\r\n\r\n  function _transfer(address sender, address recipient, uint256 amount) internal {\r\n    require(sender != address(0));\r\n    require(recipient != address(0));\r\n\r\n    if(sender == pair && !_isExcludeMaxHold[recipient] && !removemaxWallet){\r\n    require(_balances[recipient].add(amount) <= maxWallet);\r\n    }\r\n\r\n    _balances[sender] = _balances[sender].sub(amount);\r\n    _balances[recipient] = _balances[recipient].add(amount);\r\n\r\n    uint256 tempfee;\r\n\r\n    if (!_isExcludeFee[sender]) {\r\n    tempfee = amount.mul(totalfee).div(feeDenominator);\r\n    _basictransfer(recipient,address(this),tempfee);\r\n    }\r\n    \r\n    emit Transfer(sender, recipient, amount.sub(tempfee));\r\n\r\n  }\r\n\r\n  function _basictransfer(address sender, address recipient, uint256 amount) internal {\r\n    _balances[sender] = _balances[sender].sub(amount);\r\n    _balances[recipient] = _balances[recipient].add(amount);\r\n    emit Transfer(sender, recipient, amount);\r\n  }\r\n\r\n  function _approve(address owner, address spender, uint256 amount) internal {\r\n    require(owner != address(0));\r\n    require(spender != address(0));\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n  receive() external payable { }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenamount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidityETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoswap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludeFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludeMaxHold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removemaxWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"returnERC20Standart\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setAutoSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setMaxHoldExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setRemoveMaxWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapthreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateNativeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TheLastInu", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://28ce74c103997d5f3962e1ac6ee4a652f0f7e21219640399e73f3fa8bce99712"}