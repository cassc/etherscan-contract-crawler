{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"src/Control/IOwnableV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n/**\\r\\n * @title Ownable\\r\\n * \\r\\n * parent for ownable contracts\\r\\n */\\r\\ninterface IOwnableV2 {\\r\\n  event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\\r\\n\\r\\n  function owner() external view returns (address);\\r\\n  function transferOwnership(address newOwner_) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Control/IPausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IOwnableV2 } from \\\"./IOwnableV2.sol\\\";\\r\\n\\r\\ninterface IPausable is IOwnableV2 {\\r\\n  function paused() external view returns (bool);\\r\\n  function setPaused(bool value) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Control/OwnableV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { Context } from \\\"../library/Context.sol\\\";\\r\\nimport { IOwnableV2 } from \\\"./IOwnableV2.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Ownable\\r\\n * \\r\\n * parent for ownable contracts\\r\\n */\\r\\nabstract contract OwnableV2 is IOwnableV2, Context {\\r\\n  constructor(address owner_) {\\r\\n    _owner_ = owner_;\\r\\n    emit OwnershipTransferred(address(0), _owner());\\r\\n  }\\r\\n\\r\\n  address internal _owner_;\\r\\n\\r\\n  function _owner() internal virtual view returns (address) {\\r\\n    return _owner_;\\r\\n  }\\r\\n\\r\\n  function owner() external virtual override view returns (address) {\\r\\n    return _owner();\\r\\n  }\\r\\n\\r\\n  modifier onlyOwner() {\\r\\n    require(_owner() == _msgSender(), \\\"Only the owner can execute this function\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function _transferOwnership(address newOwner_) internal virtual onlyOwner {\\r\\n    // keep track of old owner for event\\r\\n    address oldOwner = _owner();\\r\\n\\r\\n    // set the new owner\\r\\n    _owner_ = newOwner_;\\r\\n\\r\\n    // emit event about ownership change\\r\\n    emit OwnershipTransferred(oldOwner, _owner());\\r\\n  }\\r\\n\\r\\n  function transferOwnership(address newOwner_) external virtual override onlyOwner {\\r\\n    _transferOwnership(newOwner_);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Control/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IPausable } from \\\"./IPausable.sol\\\";\\r\\nimport { OwnableV2 } from \\\"./OwnableV2.sol\\\";\\r\\n\\r\\nabstract contract Pausable is IPausable, OwnableV2 {\\r\\n  bool internal _paused;\\r\\n\\r\\n  modifier onlyNotPaused() {\\r\\n    require(!_paused, \\\"Contract is paused\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function paused() external view override returns (bool) {\\r\\n    return _paused;\\r\\n  }\\r\\n\\r\\n  function _setPaused(bool value) internal virtual {\\r\\n    _paused = value;\\r\\n  }\\r\\n\\r\\n  function setPaused(bool value) external override onlyOwner {\\r\\n    _setPaused(value);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Fees/Fees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IFees } from \\\"./IFees.sol\\\";\\r\\nimport { Address } from \\\"../library/Address.sol\\\";\\r\\nimport { Governable } from \\\"../Governance/Governable.sol\\\";\\r\\nimport { Pausable } from \\\"../Control/Pausable.sol\\\";\\r\\n\\r\\ncontract Fees is IFees, Governable, Pausable {\\r\\n  using Address for address payable;\\r\\n\\r\\n  constructor(address payable treasuryFeeAddress_, address payable stakingFeeAddress_) Governable(_msgSender(), _msgSender()) {\\r\\n    _treasuryFeeAddress = treasuryFeeAddress_;\\r\\n    _stakingFeeAddress = stakingFeeAddress_;\\r\\n    _exemptFromFees[_msgSender()] = true;\\r\\n\\r\\n    // !!! setup some fee type presets\\r\\n\\r\\n    // note this covers all staking contracts.\\r\\n    _feeTypeAmountMap[\\\"DeployStaking\\\"] = 5 * 10 ** 17; // 0.5eth\\r\\n    // note nothing fancy - a standard token\\r\\n    _feeTypeAmountMap[\\\"DeployStandardToken\\\"] = 2 * 10 ** 17; // 0.2eth\\r\\n    // note reflects tokens back to holders.\\r\\n    _feeTypeAmountMap[\\\"DeployReflectionToken\\\"] = 3 * 10 ** 17; // 0.3eth\\r\\n    // note sells for eth OR token, distributes rewards to holders automatically.\\r\\n    _feeTypeAmountMap[\\\"DeployDividendToken\\\"] = 3 * 10 ** 17; // 0.3eth\\r\\n    // note sells for eth, sends all eth to a \\\"marketing wallet\\\"\\r\\n    _feeTypeAmountMap[\\\"DeployMarketingToken\\\"] = 3 * 10 ** 17; // 0.3eth\\r\\n    // note that CreateTokenLock fee only applies to regular tokens,\\r\\n    // not LP tokens. LP tokens are always free.\\r\\n    // this fee should allow you to deploy as many locks\\r\\n    // for the project as needed.\\r\\n    _feeTypeAmountMap[\\\"CreateTokenLock\\\"] = 2 * 10 ** 17; // 0.2eth\\r\\n  }\\r\\n\\r\\n  address payable internal _treasuryFeeAddress;\\r\\n  address payable internal _stakingFeeAddress;\\r\\n\\r\\n  /** 0-10000 - 2 decimals of precision. all fees should add up to 10000 (100%) */\\r\\n  uint16 internal _treasuryFee = 2000;\\r\\n  uint16 internal _stakingFee = 8000;\\r\\n\\r\\n  uint256 internal _treasuryFeesDistributed;\\r\\n  uint256 internal _stakingFeesDistributed;\\r\\n\\r\\n  mapping(address => bool) internal _exemptFromFees;\\r\\n  mapping(string => uint256) internal _feeTypeAmountMap;\\r\\n\\r\\n  /**\\r\\n   * @return 0 if the msg sender is exempt from fees.\\r\\n   * this may not be desired when checking current fee values.\\r\\n   */\\r\\n  function getFeeAmountForType(string memory feeType) external view override returns (uint256) {\\r\\n    return _exemptFromFees[_msgSender()] ? 0 : _feeTypeAmountMap[feeType];\\r\\n  }\\r\\n\\r\\n  function setFeeAmountForType(string memory feeType, uint256 amount) external override onlyGovernor {\\r\\n    _feeTypeAmountMap[feeType] = amount;\\r\\n  }\\r\\n\\r\\n  function setAddressExemptFromFees(address account, bool value) external override onlyOwner {\\r\\n    _exemptFromFees[account] = value;\\r\\n  }\\r\\n\\r\\n  function isAddressExemptFromFees(address account) external view override returns (bool) {\\r\\n    return _exemptFromFees[account];\\r\\n  }\\r\\n\\r\\n  function feesDistributed() external view override returns (uint256 total, uint256 treasury, uint256 staking) {\\r\\n    treasury = _treasuryFeesDistributed;\\r\\n    staking = _stakingFeesDistributed;\\r\\n    total = _treasuryFeesDistributed + _stakingFeesDistributed;\\r\\n  }\\r\\n\\r\\n  function treasuryFeeAddress() external view override returns (address) {\\r\\n    return _treasuryFeeAddress;\\r\\n  }\\r\\n\\r\\n  function setTreasuryFeeAddress(address payable value) external override onlyOwner {\\r\\n    _treasuryFeeAddress = value;\\r\\n  }\\r\\n\\r\\n  function stakingFeeAddress() external view override returns (address) {\\r\\n    return _stakingFeeAddress;\\r\\n  }\\r\\n\\r\\n  function setStakingFeeAddress(address payable value) external override onlyOwner {\\r\\n    _stakingFeeAddress = value;\\r\\n  }\\r\\n\\r\\n  function getFees() external view override returns (uint16 treasury, uint16 staking) {\\r\\n    treasury = _treasuryFee;\\r\\n    staking = _stakingFee;\\r\\n  }\\r\\n\\r\\n  /** 0-10000 - 2 decimals of precision. all fees should add up to 10000 (100.00%) */\\r\\n  function setFees(uint16 treasury, uint16 staking) external override onlyGovernor {\\r\\n    require(treasury + staking == 10000, \\\"Total fees must equal 10000\\\");\\r\\n\\r\\n    _treasuryFee = treasury;\\r\\n    _stakingFee = staking;\\r\\n  }\\r\\n\\r\\n  function _distributeFees(uint256 amount) internal virtual {\\r\\n    require(amount != 0, \\\"Cannot distribute 0\\\");\\r\\n\\r\\n    // explicitly check for 0% fee to avoid any chance of\\r\\n    // precision errors when one of the fees is disabled.\\r\\n    uint256 treasuryAmount = _treasuryFee == 0 ? 0 : (amount * _treasuryFee / 10000);\\r\\n    uint256 stakingAmount = _stakingFee == 0 ? 0 : (amount - treasuryAmount);\\r\\n\\r\\n    if (treasuryAmount != 0) {\\r\\n      _treasuryFeesDistributed += treasuryAmount;\\r\\n      _treasuryFeeAddress.sendValue(treasuryAmount);\\r\\n    }\\r\\n    \\r\\n    if (stakingAmount != 0) {\\r\\n      _stakingFeesDistributed += stakingAmount;\\r\\n      _stakingFeeAddress.sendValue(stakingAmount);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev allow incoming fees to be paused in case of emergency.\\r\\n   * sending fees here while paused will result in a reverted tx.\\r\\n   */\\r\\n  receive() external payable virtual onlyNotPaused {\\r\\n    _distributeFees(msg.value);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Fees/IFees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IGovernable } from \\\"../Governance/IGovernable.sol\\\";\\r\\nimport { IPausable } from \\\"../Control/IPausable.sol\\\";\\r\\n\\r\\ninterface IFees is IGovernable, IPausable {\\r\\n  function getFeeAmountForType(string memory feeType) external view returns (uint256);\\r\\n  function setFeeAmountForType(string memory feeType, uint256 amount) external;\\r\\n  function setAddressExemptFromFees(address account, bool value) external;\\r\\n  function isAddressExemptFromFees(address account) external view returns (bool);\\r\\n  function feesDistributed() external view returns (uint256 total, uint256 treasury, uint256 staking);\\r\\n  function treasuryFeeAddress() external view returns (address);\\r\\n  function setTreasuryFeeAddress(address payable value) external;\\r\\n  function stakingFeeAddress() external view returns (address);\\r\\n  function setStakingFeeAddress(address payable value) external;\\r\\n  function getFees() external view returns (uint16 treasuryFee, uint16 stakingFee);\\r\\n  function setFees(uint16 treasuryFee, uint16 stakingFee) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Governance/Governable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IGovernable } from \\\"./IGovernable.sol\\\";\\r\\nimport { OwnableV2 } from \\\"../Control/OwnableV2.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Governable\\r\\n * \\r\\n * parent for governable contracts\\r\\n */\\r\\nabstract contract Governable is IGovernable, OwnableV2 {\\r\\n  constructor(address owner_, address governor_) OwnableV2(owner_) {\\r\\n    _governor_ = governor_;\\r\\n    emit GovernorshipTransferred(address(0), _governor());\\r\\n  }\\r\\n\\r\\n  address internal _governor_;\\r\\n\\r\\n  function _governor() internal view returns (address) {\\r\\n    return _governor_;\\r\\n  }\\r\\n\\r\\n  function governor() external view override returns (address) {\\r\\n    return _governor();\\r\\n  }\\r\\n\\r\\n  modifier onlyGovernor() {\\r\\n    require(_governor() == _msgSender(), \\\"Only the governor can execute this function\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  // not currently used - but here it is in case we want this\\r\\n  // modifier onlyOwnerOrGovernor() {\\r\\n  //   require(_owner() == _msgSender() || _governor() == _msgSender(), \\\"Only the owner or governor can execute this function\\\");\\r\\n  //   _;\\r\\n  // }\\r\\n\\r\\n  function _transferGovernorship(address newGovernor) internal virtual {\\r\\n    // keep track of old owner for event\\r\\n    address oldGovernor = _governor();\\r\\n\\r\\n    // set the new owner\\r\\n    _governor_ = newGovernor;\\r\\n\\r\\n    // emit event about ownership change\\r\\n    emit GovernorshipTransferred(oldGovernor, _governor());\\r\\n  }\\r\\n\\r\\n  function transferGovernorship(address newGovernor) external override onlyOwner {\\r\\n    _transferGovernorship(newGovernor);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/Governance/IGovernable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IOwnableV2 } from \\\"../Control/IOwnableV2.sol\\\";\\r\\n\\r\\ninterface IGovernable is IOwnableV2 {\\r\\n  event GovernorshipTransferred(address indexed oldGovernor, address indexed newGovernor);\\r\\n\\r\\n  function governor() external view returns (address);\\r\\n  function transferGovernorship(address newGovernor) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/library/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/library/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.3.2 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"treasuryFeeAddress_\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"stakingFeeAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"feesDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasury\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"staking\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"feeType\",\"type\":\"string\"}],\"name\":\"getFeeAmountForType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFees\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"treasury\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"staking\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAddressExemptFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAddressExemptFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"feeType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setFeeAmountForType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"treasury\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"staking\",\"type\":\"uint16\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setStakingFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setTreasuryFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingFeeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFeeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Fees", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009a42a20d3e3a25c968c8a80ae5d2ab445920854c0000000000000000000000005a48e8b22d7741e2c9522a69cf220e488a5dfa76", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}