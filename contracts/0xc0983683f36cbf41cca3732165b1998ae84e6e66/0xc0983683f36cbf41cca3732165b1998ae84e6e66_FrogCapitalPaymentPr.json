{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n//                              .-----.\r\n//                             /7  .  (\r\n//                            /   .-.  \\\r\n//                           /   /   \\  \\\r\n//                          / `  )   (   )\r\n//                         / `   )   ).  \\\r\n//                       .'  _.   \\_/  . |\r\n//      .--.           .' _.' )`.        |\r\n//     (    `---...._.'   `---.'_)    ..  \\\r\n//      \\            `----....___    `. \\  |\r\n//       `.           _ ----- _   `._  )/  |\r\n//         `.       /\"  \\   /\"  \\`.  `._   |\r\n//           `.    ((O)` ) ((O)` ) `.   `._\\\r\n//             `-- '`---'   `---' )  `.    `-.\r\n//                /                  ` \\      `-.\r\n//              .'                      `.       `.\r\n//             /                     `  ` `.       `-.\r\n//      .--.   \\ ===._____.======. `    `   `. .___.--`     .''''.\r\n//     ' .` `-. `.                )`. `   ` ` \\          .' . '  8)\r\n//    (8  .  ` `-.`.               ( .  ` `  .`\\      .'  '    ' /\r\n//     \\  `. `    `-.               ) ` .   ` ` \\  .'   ' .  '  /\r\n//      \\ ` `.  ` . \\`.    .--.     |  ` ) `   .``/   '  // .  /\r\n//       `.  ``. .   \\ \\   .-- `.  (  ` /_   ` . / ' .  '/   .'\r\n//         `. ` \\  `  \\ \\  '-.   `-'  .'  `-.  `   .  .'/  .'\r\n//           \\ `.`.  ` \\ \\    ) /`._.`       `.  ` .  .'  /\r\n//            |  `.`. . \\ \\  (.'               `.   .'  .'\r\n//         __/  .. \\ \\ ` ) \\                     \\.' .. \\__\r\n//  .-._.-'     '\"  ) .-'   `.                   (  '\"     `-._.--.\r\n// (_________.-====' / .' /\\_)`--..__________..-- `====-. _________)\r\n// frog.capital\r\n\r\ncontract FrogCapitalPaymentProcessor {\r\n\r\n    address public owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function FrogCapSub(address[] memory _recipients, uint[] memory _values) public payable {\r\n        require(_recipients.length == _values.length, \"Array lengths must match\");\r\n\r\n        uint total = 0;\r\n        for (uint i = 0; i < _values.length; i++) {\r\n            total += _values[i];\r\n        }\r\n\r\n        require(msg.value >= total, \"Sent ETH value is less than the total value to transfer\");\r\n\r\n        for (uint i = 0; i < _recipients.length; i++) {\r\n            address recipient = _recipients[i];\r\n            uint value = _values[i];\r\n            (bool success, ) = recipient.call{value:value}(\"\");\r\n            require(success, \"transfer failed\");\r\n        }\r\n\r\n// Send back the remaining ETH to the sender (if any)\r\n        uint remaining = address(this).balance;\r\n        if (remaining > 0) {\r\n            payable(msg.sender).transfer(remaining);\r\n        }\r\n    }\r\n\r\n// Allow owner to withdraw any ETH left in the contract\r\n    function withdraw() external onlyOwner {\r\n        uint balance = address(this).balance;\r\n        payable(owner).transfer(balance);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"FrogCapSub\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FrogCapitalPaymentProcessor", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5eafe33d325216b74c3fa636a50eef81deee23da06ca9f8ee3051ed87219e04f"}