{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/poolchecker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n}\\r\\n\\r\\ninterface IUniswapV3Factory {\\r\\n    function getPool(address tokenA, address tokenB, uint24 fee) external view returns (address pool);\\r\\n}\\r\\n\\r\\ninterface IUniswapV3Pool {\\r\\n    function liquidity() external view returns (uint256);\\r\\n    function fee() external view returns (uint24);\\r\\n}\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract TokenPoolChecker is Ownable {\\r\\n    address public UNISWAP_V2_FACTORY = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\\r\\n    address public UNISWAP_V3_FACTORY = 0x1F98431c8aD98523631AE4a59f267346ea31F984;\\r\\n    address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\r\\n    address public constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\r\\n    address public constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\r\\n    uint24[] public feeTiers = [100, 500, 3000, 10000];\\r\\n    \\r\\n    mapping(address => mapping(address => uint24)) public bestFeeTiers;\\r\\n    enum PoolVersion { None, V2, V3 }\\r\\n\\r\\n    struct V3Data {\\r\\n        address[] v3Path;\\r\\n        uint24[] poolFees;\\r\\n    }\\r\\n\\r\\n    function getPoolVersion(address token) public view returns (PoolVersion) {\\r\\n        bool isV2 = hasLiquidityV2(token);\\r\\n        bool isV3;\\r\\n        (isV3, ) = hasLiquidityV3(token);\\r\\n\\r\\n        if (isV2 && isV3) {\\r\\n            uint256 v2Liquidity = getV2Liquidity(token);\\r\\n            (, address baseToken) = hasLiquidityV3(token);\\r\\n            uint256 v3Liquidity = getV3Liquidity(token, baseToken);\\r\\n\\r\\n            return v2Liquidity > v3Liquidity ? PoolVersion.V2 : PoolVersion.V3;\\r\\n        } else if (isV2) {\\r\\n            return PoolVersion.V2;\\r\\n        } else if (isV3) {\\r\\n            return PoolVersion.V3;\\r\\n        } else {\\r\\n            return PoolVersion.None;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getV3Data(address token) public view returns (V3Data memory) {\\r\\n        address baseToken;\\r\\n        bool hasLiq;\\r\\n        (hasLiq, baseToken) = hasLiquidityV3(token);\\r\\n        // Check if the token has V3 liquidity with any base token\\r\\n        if(!hasLiq) {\\r\\n            return V3Data({v3Path: new address[](0), poolFees: new uint24[](0)});\\r\\n        }\\r\\n        return V3Data({\\r\\n            v3Path: determineV3SwapPath(token, baseToken), \\r\\n            poolFees: determineV3SwapFees(token, baseToken)  \\r\\n        });\\r\\n    }\\r\\n\\r\\n    function hasLiquidityV2(address token) public view returns (bool) {\\r\\n        IUniswapV2Factory factoryV2 = IUniswapV2Factory(UNISWAP_V2_FACTORY);\\r\\n        address pair = factoryV2.getPair(token, WETH);\\r\\n        return pair != address(0);\\r\\n    }\\r\\n\\r\\n    function hasLiquidityV3(address token) public view returns (bool, address) {\\r\\n        IUniswapV3Factory factoryV3 = IUniswapV3Factory(UNISWAP_V3_FACTORY);\\r\\n        for (uint i = 0; i < feeTiers.length; i++) {\\r\\n            if (factoryV3.getPool(token, WETH, feeTiers[i]) != address(0)) {\\r\\n                return (true, WETH);\\r\\n            } else if (factoryV3.getPool(token, USDC, feeTiers[i]) != address(0)) {\\r\\n                return (true, USDC);\\r\\n            } else if (factoryV3.getPool(token, USDT, feeTiers[i]) != address(0)) {\\r\\n                return (true, USDT);\\r\\n            }\\r\\n        }\\r\\n        return (false, address(0));\\r\\n    }\\r\\n\\r\\n    function getV2Liquidity(address token) public view returns (uint256) {\\r\\n        address pairAddress = IUniswapV2Factory(UNISWAP_V2_FACTORY).getPair(token, WETH);\\r\\n        (address token0, ) = sortTokens(token, WETH);\\r\\n        (uint112 reserve0, uint112 reserve1, ) = IUniswapV2Pair(pairAddress).getReserves();\\r\\n        return token == token0 ? reserve0 : reserve1;\\r\\n    }\\r\\n\\r\\n    function determineV3SwapFees(address tokenIn, address baseToken) public view returns(uint24[] memory) {\\r\\n        IUniswapV3Factory factoryV3 = IUniswapV3Factory(UNISWAP_V3_FACTORY);\\r\\n            \\r\\n        uint24 bestFeeTierTokenToBase = 0;\\r\\n        uint24 bestFeeTierBaseToWETH = 0;\\r\\n        uint256 maxLiquidityTokenToBase = 0;\\r\\n        uint256 maxLiquidityBaseToWETH = 0;\\r\\n\\r\\n        IUniswapV3Pool poolTokenToBase;\\r\\n        IUniswapV3Pool poolBaseToWETH;\\r\\n\\r\\n        for (uint i = 0; i < feeTiers.length; i++) {\\r\\n            address poolAddressTokenToBase = factoryV3.getPool(tokenIn, baseToken, feeTiers[i]);\\r\\n            address poolAddressBaseToWETH = factoryV3.getPool(baseToken, WETH, feeTiers[i]);\\r\\n\\r\\n            if (poolAddressTokenToBase != address(0)) {\\r\\n                poolTokenToBase = IUniswapV3Pool(poolAddressTokenToBase);\\r\\n                uint256 currentLiquidity = poolTokenToBase.liquidity();\\r\\n                if (currentLiquidity > maxLiquidityTokenToBase) {\\r\\n                    maxLiquidityTokenToBase = currentLiquidity;\\r\\n                    bestFeeTierTokenToBase = feeTiers[i];\\r\\n                }\\r\\n            }\\r\\n            if (poolAddressBaseToWETH != address(0)) {\\r\\n                poolBaseToWETH = IUniswapV3Pool(poolAddressBaseToWETH);\\r\\n                uint256 currentLiquidity = poolBaseToWETH.liquidity();\\r\\n                    \\r\\n                if (currentLiquidity > maxLiquidityBaseToWETH) {\\r\\n                    maxLiquidityBaseToWETH = currentLiquidity;\\r\\n                    bestFeeTierBaseToWETH = feeTiers[i];\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint24[] memory fees = (baseToken == WETH) ? new uint24[](1) : new uint24[](2);\\r\\n        fees[0] = bestFeeTierTokenToBase;\\r\\n        if(baseToken != WETH) {\\r\\n            fees[1] = bestFeeTierBaseToWETH;\\r\\n        }\\r\\n        \\r\\n        return fees;\\r\\n    }\\r\\n\\r\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address, address) {\\r\\n        return tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n    }\\r\\n    function updateUniswapV2Factory(address _uniswapV2Factory) public onlyOwner {\\r\\n        UNISWAP_V2_FACTORY = _uniswapV2Factory;\\r\\n    }\\r\\n    function updateUniswapV3Factory(address _uniswapV3Factory) public onlyOwner {\\r\\n        UNISWAP_V3_FACTORY = _uniswapV3Factory;\\r\\n    }\\r\\n    function determineV3SwapPath(address tokenIn, address baseToken) public view returns(address[] memory) {\\r\\n        IUniswapV3Factory factoryV3 = IUniswapV3Factory(UNISWAP_V3_FACTORY);\\r\\n        \\r\\n        for (uint i = 0; i < feeTiers.length; i++) {\\r\\n            address poolAddress = factoryV3.getPool(tokenIn, baseToken, feeTiers[i]);\\r\\n            \\r\\n            // Direct path for tokenIn -> WETH\\r\\n            if (poolAddress != address(0) && baseToken == WETH) {\\r\\n                address[] memory path = new address[](2);\\r\\n                path[0] = tokenIn;\\r\\n                path[1] = WETH;\\r\\n                return path;\\r\\n            }\\r\\n            \\r\\n            // Path for tokenIn -> USDC -> WETH\\r\\n            if (poolAddress != address(0) && (baseToken == USDC || baseToken == USDT) ) {\\r\\n                address[] memory path = new address[](3);\\r\\n                path[0] = tokenIn;\\r\\n                path[1] = baseToken;\\r\\n                path[2] = WETH;\\r\\n                return path;\\r\\n            }\\r\\n        }\\r\\n        return new address[](0);\\r\\n    }\\r\\n    function getV3Liquidity(address tokenin, address basetoken) public view returns (uint256) {\\r\\n        uint256 totalLiquidity = 0;\\r\\n        IUniswapV3Factory factoryV3 = IUniswapV3Factory(UNISWAP_V3_FACTORY);\\r\\n        for (uint i = 0; i < feeTiers.length; i++) {\\r\\n            address poolAddress = factoryV3.getPool(tokenin, basetoken, feeTiers[i]);\\r\\n            if (poolAddress != address(0)) {\\r\\n                IUniswapV3Pool pool = IUniswapV3Pool(poolAddress);\\r\\n                totalLiquidity += pool.liquidity();\\r\\n            }\\r\\n        }\\r\\n        return totalLiquidity;\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UNISWAP_V2_FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_V3_FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bestFeeTiers\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"determineV3SwapFees\",\"outputs\":[{\"internalType\":\"uint24[]\",\"name\":\"\",\"type\":\"uint24[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"determineV3SwapPath\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feeTiers\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPoolVersion\",\"outputs\":[{\"internalType\":\"enum TokenPoolChecker.PoolVersion\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getV2Liquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getV3Data\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"v3Path\",\"type\":\"address[]\"},{\"internalType\":\"uint24[]\",\"name\":\"poolFees\",\"type\":\"uint24[]\"}],\"internalType\":\"struct TokenPoolChecker.V3Data\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"basetoken\",\"type\":\"address\"}],\"name\":\"getV3Liquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"hasLiquidityV2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"hasLiquidityV3\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapV2Factory\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Factory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapV3Factory\",\"type\":\"address\"}],\"name\":\"updateUniswapV3Factory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokenPoolChecker", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}