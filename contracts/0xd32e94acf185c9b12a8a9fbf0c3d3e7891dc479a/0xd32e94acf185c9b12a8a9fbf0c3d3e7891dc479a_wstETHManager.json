{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PowerFarms/wstETHPowerFarm/wstETHManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- WISE --\\n\\npragma solidity =0.8.21;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\n\\nimport \\\"./wstETHFarm.sol\\\";\\nimport \\\"../../OwnableMaster.sol\\\";\\n\\ncontract wstETHManager is ERC721Enumerable, OwnableMaster, wstETHFarm {\\n\\n    string public baseURI;\\n    string public baseExtension;\\n\\n    // Tracks increment of keys\\n    uint256 public totalMinted;\\n\\n    // Tracks reserved counter\\n    uint256 public totalReserved;\\n\\n    // Tracks amount of reusable NFTs\\n    uint256 public availableNFTCount;\\n\\n    // Maps access to wiseLendingNFT through farmNFT\\n    mapping(uint256 => uint256) public farmingKeys;\\n\\n    // Tracks reusable wiseLendingNFTs after burn\\n    mapping(uint256 => uint256) public availableNFTs;\\n\\n    // Tracks reserved NFTs mapped to address\\n    mapping(address => uint256) public reserved;\\n\\n    modifier onlyKeyOwner(\\n        uint256 _keyId\\n    ) {\\n        if (isOwner(_keyId, msg.sender) == false) {\\n            revert InvalidOwner();\\n        }\\n        _;\\n    }\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _initBaseURI,\\n        address _wiseLendingAddress,\\n        uint256 _collateralFactor\\n    )\\n        ERC721(\\n            _name,\\n            _symbol\\n        )\\n        OwnableMaster(\\n            msg.sender\\n        )\\n        wstETHFarm(\\n            _wiseLendingAddress,\\n            _collateralFactor\\n        )\\n    {\\n        baseURI = _initBaseURI;\\n    }\\n\\n    function _incrementReserved()\\n        internal\\n        returns (uint256)\\n    {\\n        return ++totalReserved;\\n    }\\n\\n    function changeMinDeposit(\\n        uint256 _newMinDeposit\\n    )\\n        external\\n        onlyMaster\\n    {\\n        minDepositUsdAmount = _newMinDeposit;\\n\\n        emit MinDepositChange(\\n            _newMinDeposit,\\n            block.timestamp\\n        );\\n    }\\n\\n    function _getNextReserveKey()\\n        internal\\n        returns (uint256)\\n    {\\n        return totalMinted + _incrementReserved();\\n    }\\n\\n    function _reserveKey(\\n        address _userAddress,\\n        uint256 _wiseLendingNFT\\n    )\\n        internal\\n        returns (uint256)\\n    {\\n        if (reserved[_userAddress] > 0) {\\n            revert AlreadyReserved();\\n        }\\n\\n        uint256 keyId = _getNextReserveKey();\\n\\n        reserved[_userAddress] = keyId;\\n        farmingKeys[keyId] = _wiseLendingNFT;\\n\\n        return keyId;\\n    }\\n\\n    function getMinAmountOut(\\n        uint256 _keyId,\\n        uint256 _slippage\\n    )\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256 collateral = _getPostionCollateralToken(\\n            farmingKeys[_keyId]\\n        );\\n\\n        uint256 amountStETH = WST_ETH.getStETHByWstETH(\\n            collateral\\n        );\\n\\n        uint256 amountOut = CURVE.get_dy(\\n            1,\\n            0,\\n            amountStETH\\n        );\\n\\n        return amountOut\\n            * _slippage\\n            / PRECISION_FACTOR_E18;\\n    }\\n\\n    /**\\n     * @dev External function deactivating the power farm by\\n     * disableing the openPosition function. Allowing user\\n     * to manualy payback and withdraw.\\n     */\\n    function shutdownFarm(\\n        bool _state\\n    )\\n        external\\n        onlyMaster\\n    {\\n        isShutdown = _state;\\n\\n        emit FarmStatus(\\n            _state,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @dev Standard receive functions forwarding\\n     * directly send ETH to the master address.\\n     */\\n    receive()\\n        external\\n        payable\\n    {\\n        emit ETHReceived(\\n            msg.value,\\n            msg.sender\\n        );\\n    }\\n\\n    /**\\n     * @dev External set function to change referral address\\n     * for lido staking. Can only be called by master.\\n     */\\n    function changeRefAddress(\\n        address _newAddress\\n    )\\n        external\\n        onlyMaster\\n    {\\n        referralAddress = _newAddress;\\n\\n        emit ReferralUpdate(\\n            _newAddress,\\n            block.timestamp\\n        );\\n    }\\n\\n    function enterFarm(\\n        uint256 _amount,\\n        uint256 _leverage\\n    )\\n        external\\n        isActive\\n        updatePools\\n        returns (uint256)\\n    {\\n        uint256 wiseLendingNFT = _getWiseLendingNFT();\\n\\n        _safeTransferFrom(\\n            WETH_ADDRESS,\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n\\n        _openPosition(\\n            wiseLendingNFT,\\n            _amount,\\n            _leverage\\n        );\\n\\n        uint256 keyId = _reserveKey(\\n            msg.sender,\\n            wiseLendingNFT\\n        );\\n\\n        emit FarmEntry(\\n            keyId,\\n            wiseLendingNFT,\\n            _leverage,\\n            _amount,\\n            block.timestamp\\n        );\\n\\n        return keyId;\\n    }\\n\\n    function enterFarmETH(\\n        uint256 _leverage\\n    )\\n        external\\n        payable\\n        isActive\\n        updatePools\\n        returns (uint256)\\n    {\\n        uint256 wiseLendingNFT = _getWiseLendingNFT();\\n\\n        _wrapETH(\\n            msg.value\\n        );\\n\\n        _openPosition(\\n            wiseLendingNFT,\\n            msg.value,\\n            _leverage\\n        );\\n\\n        uint256 keyId = _reserveKey(\\n            msg.sender,\\n            wiseLendingNFT\\n        );\\n\\n        emit FarmEntry(\\n            keyId,\\n            wiseLendingNFT,\\n            _leverage,\\n            msg.value,\\n            block.timestamp\\n        );\\n\\n        return keyId;\\n    }\\n\\n    function _getWiseLendingNFT()\\n        internal\\n        returns (uint256)\\n    {\\n        if (availableNFTCount == 0) {\\n            uint256 nftId = POSITION_NFT.mintPositionForUser(\\n                address(this)\\n            );\\n\\n            _registrationFarm(\\n                nftId\\n            );\\n\\n            POSITION_NFT.approve(\\n                AAVE_HUB_ADDRESS,\\n                nftId\\n            );\\n\\n            return nftId;\\n        }\\n\\n        return availableNFTs[\\n            availableNFTCount--\\n        ];\\n    }\\n\\n    function exitFarm(\\n        uint256 _keyId,\\n        uint256 _minOutAmount,\\n        bool _ethBack\\n    )\\n        external\\n        updatePools\\n        onlyKeyOwner(_keyId)\\n    {\\n        uint256 wiseLendingNFT = farmingKeys[\\n            _keyId\\n        ];\\n\\n        delete farmingKeys[\\n            _keyId\\n        ];\\n\\n        if (reserved[msg.sender] == _keyId) {\\n            reserved[msg.sender] = 0;\\n        } else {\\n            _burn(\\n                _keyId\\n            );\\n        }\\n\\n        emit FarmExit(\\n            _keyId,\\n            wiseLendingNFT,\\n            _minOutAmount,\\n            block.timestamp\\n        );\\n\\n        availableNFTs[\\n            ++availableNFTCount\\n        ] = wiseLendingNFT;\\n\\n        _closingPosition(\\n            wiseLendingNFT,\\n            _minOutAmount,\\n            _ethBack\\n        );\\n    }\\n\\n    function manuallyPaybackShares(\\n        uint256 _keyId,\\n        uint256 _paybackShares\\n    )\\n        external\\n        updatePools\\n    {\\n        _manuallyPaybackShares(\\n            farmingKeys[_keyId],\\n            _paybackShares\\n        );\\n\\n        emit ManualPaybackShares(\\n            _keyId,\\n            farmingKeys[_keyId],\\n            _paybackShares,\\n            block.timestamp\\n        );\\n    }\\n\\n    function manuallyWithdrawShares(\\n        uint256 _keyId,\\n        uint256 _withdrawShares\\n    )\\n        external\\n        updatePools\\n        onlyKeyOwner(_keyId)\\n    {\\n        _manuallyWithdrawShares(\\n            farmingKeys[_keyId],\\n            _withdrawShares\\n        );\\n\\n        emit ManualWithdrawShares(\\n            _keyId,\\n            farmingKeys[_keyId],\\n            _withdrawShares,\\n            block.timestamp\\n        );\\n    }\\n\\n    function isOwner(\\n        uint256 _keyId,\\n        address _owner\\n    )\\n        public\\n        view\\n        returns (bool)\\n    {\\n        if (reserved[_owner] == _keyId) {\\n            return true;\\n        }\\n\\n        if (ownerOf(_keyId) == _owner) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    function _mintKeyForUser(\\n        uint256 _keyId,\\n        address _userAddress\\n    )\\n        internal\\n        returns (uint256)\\n    {\\n        if (_keyId == 0) {\\n            revert InvalidKey();\\n        }\\n\\n        delete reserved[\\n            _userAddress\\n        ];\\n\\n        _mint(\\n            _userAddress,\\n            _keyId\\n        );\\n\\n        totalMinted++;\\n        totalReserved--;\\n\\n        return _keyId;\\n    }\\n\\n    function approveMint(\\n        address _spender,\\n        uint256 _keyId\\n    )\\n        external\\n    {\\n        if (reserved[msg.sender] == _keyId) {\\n            _mintKeyForUser(\\n                _keyId,\\n                msg.sender\\n            );\\n        }\\n\\n        approve(\\n            _spender,\\n            _keyId\\n        );\\n    }\\n\\n    function mintReserved()\\n        external\\n        returns (uint256)\\n    {\\n        return _mintKeyForUser(\\n            reserved[\\n                msg.sender\\n            ],\\n            msg.sender\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns positions of owner\\n     */\\n    function walletOfOwner(\\n        address _owner\\n    )\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256 reservedId = reserved[\\n            _owner\\n        ];\\n\\n        uint256 ownerTokenCount = balanceOf(\\n            _owner\\n        );\\n\\n        uint256 reservedCount;\\n\\n        if (reservedId > 0) {\\n            reservedCount = 1;\\n        }\\n\\n        uint256[] memory tokenIds = new uint256[](\\n            ownerTokenCount + reservedCount\\n        );\\n\\n        uint256 i;\\n\\n        for (i; i < ownerTokenCount; ++i) {\\n            tokenIds[i] = tokenOfOwnerByIndex(\\n                _owner,\\n                i\\n            );\\n        }\\n\\n        if (reservedId > 0) {\\n            tokenIds[i] = reservedId;\\n        }\\n\\n        return tokenIds;\\n    }\\n\\n    /**\\n     * @dev Allows to update base target for MetaData.\\n     */\\n    function setBaseURI(\\n        string memory _newBaseURI\\n    )\\n        external\\n        onlyMaster\\n    {\\n        baseURI = _newBaseURI;\\n\\n        emit BaseUrlChange(\\n            _newBaseURI,\\n            block.timestamp\\n        );\\n    }\\n\\n    function setBaseExtension(\\n        string memory _newBaseExtension\\n    )\\n        external\\n        onlyMaster\\n    {\\n        baseExtension = _newBaseExtension;\\n\\n        emit BaseExtensionChange(\\n            _newBaseExtension,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns path to MetaData URI\\n     */\\n    function tokenURI(\\n        uint256 _tokenId\\n    )\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        require(\\n            _exists(_tokenId) == true,\\n            \\\"wstETHManager: WRONG_TOKEN\\\"\\n        );\\n\\n        string memory currentBaseURI = baseURI;\\n\\n        if (bytes(currentBaseURI).length == 0) {\\n            return \\\"\\\";\\n        }\\n\\n        return string(\\n            abi.encodePacked(\\n                currentBaseURI,\\n                _toString(_tokenId),\\n                baseExtension\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Converts tokenId uint to string.\\n     */\\n    function _toString(\\n        uint256 _tokenId\\n    )\\n        internal\\n        pure\\n        returns (string memory str)\\n    {\\n        if (_tokenId == 0) {\\n            return \\\"0\\\";\\n        }\\n\\n        uint256 j = _tokenId;\\n        uint256 length;\\n\\n        while (j != 0) {\\n            length++;\\n            j /= 10;\\n        }\\n\\n        bytes memory bstr = new bytes(\\n            length\\n        );\\n\\n        uint256 k = length;\\n        j = _tokenId;\\n\\n        while (j != 0) {\\n            bstr[--k] = bytes1(\\n                uint8(\\n                    48 + j % 10\\n                )\\n            );\\n            j /= 10;\\n        }\\n\\n        str = string(\\n            bstr\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/OwnableMaster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- WISE --\\n\\npragma solidity =0.8.21;\\n\\nerror NotMaster();\\nerror NotProposed();\\n\\ncontract OwnableMaster {\\n\\n    address public master;\\n    address public proposedMaster;\\n\\n    address constant ZERO_ADDRESS = address(0x0);\\n\\n    modifier onlyProposed() {\\n        _onlyProposed();\\n        _;\\n    }\\n\\n    function _onlyMaster()\\n        private\\n        view\\n    {\\n        if (msg.sender == master) {\\n            return;\\n        }\\n\\n        revert NotMaster();\\n    }\\n\\n    modifier onlyMaster() {\\n        _onlyMaster();\\n        _;\\n    }\\n\\n    function _onlyProposed()\\n        private\\n        view\\n    {\\n        if (msg.sender == proposedMaster) {\\n            return;\\n        }\\n\\n        revert NotProposed();\\n    }\\n\\n    constructor(\\n        address _master\\n    ) {\\n        master = _master;\\n    }\\n\\n    /**\\n     * @dev Allows to propose next master.\\n     * Must be claimed by proposer.\\n     */\\n    function proposeOwner(\\n        address _proposedOwner\\n    )\\n        external\\n        onlyMaster\\n    {\\n        proposedMaster = _proposedOwner;\\n    }\\n\\n    /**\\n     * @dev Allows to claim master role.\\n     * Must be called by proposer.\\n     */\\n    function claimOwnership()\\n        external\\n        onlyProposed\\n    {\\n        master = proposedMaster;\\n    }\\n\\n    /**\\n     * @dev Removes master role.\\n     * No ability to be in control.\\n     */\\n    function renounceOwnership()\\n        external\\n        onlyMaster\\n    {\\n        master = ZERO_ADDRESS;\\n        proposedMaster = ZERO_ADDRESS;\\n    }\\n}\"\r\n    },\r\n    \"contracts/PowerFarms/wstETHPowerFarm/wstETHFarm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- WISE --\\n\\npragma solidity =0.8.21;\\n\\n/**\\n * @author Christoph Krpoun\\n * @author Ren\u00e9 Hochmuth\\n * @author Vitally Marinchenko\\n */\\n\\nimport \\\"./wstETHFarmLeverageLogic.sol\\\";\\n\\n/**\\n * @dev The wstETH power farm is an automated leverage contract working as a\\n * second layer for Wise lending. It needs to be registed inside the latter one\\n * to have access to the pools. It uses BALANCER FLASHLOANS as well as CURVE POOLS and\\n * the LIDO contracts for staked ETH and wrapped staked ETH.\\n * The corresponding contract addresses can be found in {wstETHFarmDeclarations.sol}.\\n *\\n * It allows to open leverage positions with wrapped ETH in form of aave wrapped ETH.\\n * For opening a position the user needs to have {_initalAmount} of ETH or WETH in the wallet.\\n * A maximum of 15x leverage is possible. Once the user registers with its position NFT that\\n * NFT is locked for ALL other interactions with wise lending as long as the positon is open!\\n *\\n * For more infos see {https://wisesoft.gitbook.io/wise/}\\n */\\n\\ncontract wstETHFarm is wstETHFarmLeverageLogic {\\n\\n    constructor(\\n        address _wiseLendingAddress,\\n        uint256 _collateralFactor\\n    )\\n        wstETHFarmDeclarations(\\n            _wiseLendingAddress,\\n            _collateralFactor\\n        )\\n    {}\\n\\n    /**\\n     * @dev External view function approximating the\\n     * new resulting net APY for a position setup.\\n     *\\n     * Note: Not 100% accurate because no syncPool is performed.\\n     */\\n    function getApproxNetAPY(\\n        uint256 _initialAmount,\\n        uint256 _leverage,\\n        uint256 _wstETHAPY\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            bool\\n        )\\n    {\\n        return _getApproxNetAPY(\\n            _initialAmount,\\n            _leverage,\\n            _wstETHAPY\\n        );\\n    }\\n\\n    /**\\n     * @dev External view function approximating the\\n     * new borrow amount for the pool when {_borrowAmount}\\n     * is borrowed.\\n     *\\n     * Note: Not 100% accurate because no syncPool is performed.\\n     */\\n    function getNewBorrowRate(\\n        uint256 _borrowAmount\\n    )\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _getNewBorrowRate(\\n            _borrowAmount\\n        );\\n    }\\n\\n    /**\\n     * @dev View functions returning the current\\n     * debt ratio of the postion with {_nftId}\\n     */\\n    function getLiveDebtRatio(\\n        uint256 _nftId\\n    )\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256 totalCollateral = getTotalWeightedCollateralUSD(\\n            _nftId\\n        );\\n\\n        if (totalCollateral == 0) {\\n            return 0;\\n        }\\n\\n        return getPositionBorrowUSD(_nftId)\\n            * PRECISION_FACTOR_E18\\n            / totalCollateral;\\n    }\\n\\n    /**\\n     * @dev Liquidation function for open power farm\\n     * postions which have a debtratio greater 100 %.\\n     *\\n     * NOTE: The borrow token is defined by the power farm\\n     * and is always aave wrapped ETH.\\n     * The receiving token is always wrapped staked ETH.\\n     */\\n    function liquidatePartiallyFromToken(\\n        uint256 _nftId,\\n        uint256 _nftIdLiquidator,\\n        uint256 _shareAmountToPay\\n    )\\n        external\\n        updatePools\\n        returns (\\n            uint256 paybackAmount,\\n            uint256 receivingAmount\\n        )\\n    {\\n        return _coreLiquidation(\\n            _nftId,\\n            _nftIdLiquidator,\\n            _shareAmountToPay\\n        );\\n    }\\n\\n    /**\\n     * @dev Manually payback function for users. Takes\\n     * {_paybackShares} which can be converted\\n     * into token with {paybackAmount()} or vice verse\\n     * with {calculateBorrowShares()} from wise lending\\n     * contract.\\n     */\\n    function _manuallyPaybackShares(\\n        uint256 _nftId,\\n        uint256 _paybackShares\\n    )\\n        internal\\n    {\\n        uint256 paybackAmount = WISE_LENDING.paybackAmount(\\n            AAVE_WETH_ADDRESS,\\n            _paybackShares\\n        );\\n\\n        _safeTransferFrom(\\n            AAVE_WETH_ADDRESS,\\n            msg.sender,\\n            address(this),\\n            paybackAmount\\n        );\\n\\n        WISE_LENDING.paybackExactShares(\\n            _nftId,\\n            AAVE_WETH_ADDRESS,\\n            _paybackShares\\n        );\\n    }\\n\\n    /**\\n     * @dev Manually withdraw function for users. Takes\\n     * {_withdrawShares} which can be converted\\n     * into token with {cashoutAmount()} or vice verse\\n     * with {calculateLendingShares()} from wise lending\\n     * contract.\\n     */\\n    function _manuallyWithdrawShares(\\n        uint256 _nftId,\\n        uint256 _withdrawShares\\n    )\\n        internal\\n    {\\n        uint256 withdrawAmount = WISE_LENDING.cashoutAmount(\\n            WST_ETH_ADDRESS,\\n            _withdrawShares\\n        );\\n\\n        if (_checkBorrowLimit(_nftId, withdrawAmount) == false) {\\n            revert ResultsInBadDebt();\\n        }\\n\\n        withdrawAmount = WISE_LENDING.withdrawExactShares(\\n            _nftId,\\n            WST_ETH_ADDRESS,\\n            _withdrawShares\\n        );\\n\\n        _safeTransfer(\\n            WST_ETH_ADDRESS,\\n            msg.sender,\\n            withdrawAmount\\n        );\\n    }\\n\\n    /**\\n     * @dev Internal function combining the core\\n     * logic for {openPosition()}.\\n     */\\n    function _openPosition(\\n        uint256 _nftId,\\n        uint256 _initialAmount,\\n        uint256 _leverage\\n    )\\n        internal\\n    {\\n        if (_leverage > MAX_LEVERAGE) {\\n            revert LeverageTooHigh();\\n        }\\n\\n        uint256 leveragedAmount = getLeverageAmount(\\n            _initialAmount,\\n            _leverage\\n        );\\n\\n        uint256 flashloanAmount = leveragedAmount\\n            - _initialAmount;\\n\\n        if (_aboveMinDepositAmount(leveragedAmount) == false) {\\n            revert AmountTooSmall();\\n        }\\n\\n        _executeBalancerFlashLoan(\\n            {\\n                _nftId: _nftId,\\n                _amount: flashloanAmount,\\n                _initialAmount: _initialAmount,\\n                _lendingShares: 0,\\n                _borrowShares: 0,\\n                _minAmountOut: 0,\\n                _ethBack: false\\n            }\\n        );\\n    }\\n\\n    /**\\n     * @dev Internal function combining the core\\n     * logic for {closingPosition()}.\\n     *\\n     * Note: {_minOutAmount} passed through UI by querring\\n     * {get_dy()} from curve pool contract.\\n     */\\n    function _closingPosition(\\n        uint256 _nftId,\\n        uint256 _minOutAmount,\\n        bool _ethBack\\n    )\\n        internal\\n    {\\n        uint256 borrowShares = _getPositionBorrowShares(\\n            _nftId\\n        );\\n\\n        uint256 lendingShares = _getPositionLendingShares(\\n            _nftId\\n        );\\n\\n        uint256 borrowAmount = _getPositionBorrowToken(\\n            _nftId\\n        );\\n\\n        _executeBalancerFlashLoan(\\n            {\\n                _nftId: _nftId,\\n                _amount: borrowAmount,\\n                _initialAmount: 0,\\n                _lendingShares: lendingShares,\\n                _borrowShares: borrowShares,\\n                _minAmountOut: _minOutAmount,\\n                _ethBack: _ethBack\\n            }\\n        );\\n    }\\n\\n    /**\\n     * @dev Makes a call to WISE_LENDING to\\n     * register {_nftId} for specific farm use.\\n     */\\n    function _registrationFarm(\\n        uint256 _nftId\\n    )\\n        internal\\n    {\\n        WISE_LENDING.setRegistrationIsolationPool(\\n            _nftId,\\n            true\\n        );\\n\\n        emit RegistrationFarm(\\n            _nftId,\\n            block.timestamp\\n        );\\n    }\\n}\\n\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/PowerFarms/wstETHPowerFarm/wstETHFarmLeverageLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- WISE --\\n\\npragma solidity =0.8.21;\\n\\nimport \\\"./wstETHFarmMathLogic.sol\\\";\\n\\nabstract contract wstETHFarmLeverageLogic is\\n    wstETHFarmMathLogic,\\n    IFlashLoanRecipient\\n{\\n    /**\\n     * @dev Wrapper function preparing balancer flashloan and\\n     * loading data to pass into receiver.\\n     */\\n    function _executeBalancerFlashLoan(\\n        uint256 _nftId,\\n        uint256 _amount,\\n        uint256 _initialAmount,\\n        uint256 _lendingShares,\\n        uint256 _borrowShares,\\n        uint256 _minAmountOut,\\n        bool _ethBack\\n    )\\n        internal\\n    {\\n        bytes memory data = abi.encode(\\n            _nftId,\\n            _initialAmount,\\n            _lendingShares,\\n            _borrowShares,\\n            _minAmountOut,\\n            msg.sender,\\n            _ethBack\\n        );\\n\\n        globalTokens.push(\\n            WETH\\n        );\\n\\n        globalAmounts.push(\\n            _amount\\n        );\\n\\n        allowEnter = true;\\n\\n        BALANCER_VAULT.flashLoan(\\n            this,\\n            globalTokens,\\n            globalAmounts,\\n            data\\n        );\\n\\n        globalTokens.pop();\\n        globalAmounts.pop();\\n    }\\n\\n    /**\\n     * @dev Receive function from balancer flashloan. Body\\n     * is called from balancer at the end of their {flashLoan()}\\n     * logic. Overwritten with opening flows.\\n     */\\n    function receiveFlashLoan(\\n        IERC20[] memory _flashloanToken,\\n        uint256[] memory _amounts,\\n        uint256[] memory _feeAmounts,\\n        bytes memory _userData\\n    )\\n        external\\n    {\\n        if (allowEnter == false) {\\n            revert AccessDenied();\\n        }\\n\\n        allowEnter = false;\\n\\n        if (_flashloanToken.length == 0) {\\n            revert InvalidParam();\\n        }\\n\\n        if (msg.sender != BALANCER_ADDRESS) {\\n            revert NotBalancerVault();\\n        }\\n\\n        uint256 flashloanAmount = _amounts[0];\\n\\n        uint256 totalDebtBalancer = flashloanAmount\\n            + _feeAmounts[0];\\n\\n        (\\n            uint256 nftId,\\n            uint256 initialAmount,\\n            uint256 lendingShares,\\n            uint256 borrowShares,\\n            uint256 minOutAmount,\\n            address caller,\\n            bool ethBack\\n\\n        ) = abi.decode(\\n            _userData,\\n            (\\n                uint256,\\n                uint256,\\n                uint256,\\n                uint256,\\n                uint256,\\n                address,\\n                bool\\n            )\\n        );\\n\\n        if (initialAmount == 0) {\\n            _logicClosePosition(\\n                nftId,\\n                borrowShares,\\n                lendingShares,\\n                totalDebtBalancer,\\n                minOutAmount,\\n                caller,\\n                ethBack\\n            );\\n\\n            return;\\n        }\\n\\n        _logicOpenPosition(\\n            nftId,\\n            flashloanAmount + initialAmount,\\n            totalDebtBalancer\\n        );\\n    }\\n\\n    /**\\n     * @dev Core logic for closing a position using balancer\\n     * flashloans.\\n     */\\n    function _logicClosePosition(\\n        uint256 _nftId,\\n        uint256 _borrowShares,\\n        uint256 _lendingShares,\\n        uint256 _totalDebtBalancer,\\n        uint256 _minOutAmount,\\n        address _caller,\\n        bool _ethBack\\n    )\\n        internal\\n    {\\n        AAVE_HUB.paybackExactShares(\\n            _nftId,\\n            WETH_ADDRESS,\\n            _borrowShares\\n        );\\n\\n        uint256 withdrawAmount = WISE_LENDING.withdrawExactShares(\\n            _nftId,\\n            WST_ETH_ADDRESS,\\n            _lendingShares\\n        );\\n\\n        uint256 stETHAmount = WST_ETH.unwrap(\\n            withdrawAmount\\n        );\\n\\n        uint256 ethAmount = _swapStETHintoETH(\\n            stETHAmount,\\n            _minOutAmount\\n        );\\n\\n        if (_ethBack == true) {\\n\\n            _closingRouteETH(\\n                ethAmount,\\n                _totalDebtBalancer,\\n                _caller\\n            );\\n\\n            return;\\n        }\\n\\n        _closingRouteWETH(\\n            ethAmount,\\n            _totalDebtBalancer,\\n            _caller\\n        );\\n    }\\n\\n    /**\\n     * @dev Internal wrapper function for a closing route\\n     * which returns WETH to the owner in the end.\\n     */\\n    function _closingRouteWETH(\\n        uint256 _ethAmount,\\n        uint256 _totalDebtBalancer,\\n        address _caller\\n    )\\n        internal\\n    {\\n        _wrapETH(\\n            _ethAmount\\n        );\\n\\n        _safeTransfer(\\n            WETH_ADDRESS,\\n            msg.sender,\\n            _totalDebtBalancer\\n        );\\n\\n        _safeTransfer(\\n            WETH_ADDRESS,\\n            _caller,\\n            _ethAmount - _totalDebtBalancer\\n        );\\n    }\\n\\n    /**\\n     * @dev Internal wrapper function for a closing route\\n     * which returns ETH to the owner in the end.\\n     */\\n    function _closingRouteETH(\\n        uint256 _ethAmount,\\n        uint256 _totalDebtBalancer,\\n        address _caller\\n    )\\n        internal\\n    {\\n        _wrapETH(\\n            _totalDebtBalancer\\n        );\\n\\n        _safeTransfer(\\n            WETH_ADDRESS,\\n            msg.sender,\\n            _totalDebtBalancer\\n        );\\n\\n        payable(_caller).transfer(\\n            _ethAmount - _totalDebtBalancer\\n        );\\n    }\\n\\n    /**\\n     * @dev Internal wrapper function for curve swap\\n     * of stETH into ETH.\\n     */\\n    function _swapStETHintoETH(\\n        uint256 _swapAmount,\\n        uint256 _minOutAmount\\n    )\\n        internal\\n        returns (uint256)\\n    {\\n        return CURVE.exchange(\\n            {\\n                fromIndex: 1,\\n                toIndex: 0,\\n                exactAmountFrom: _swapAmount,\\n                minReceiveAmount: _minOutAmount\\n            }\\n        );\\n    }\\n\\n    /**\\n     * @dev Internal function executing the\\n     * collateral deposit by converting ETH\\n     * into wstETH, adding it as collateral and\\n     * borrowing the flashloan token (WETH) to pay\\n     * back {_totalDebtBalancer}.\\n     */\\n    function _logicOpenPosition(\\n        uint256 _nftId,\\n        uint256 _depositAmount,\\n        uint256 _totalDebtBalancer\\n    )\\n        internal\\n    {\\n        _unwrapETH(\\n            _depositAmount\\n        );\\n\\n        uint256 stETHShares = ST_ETH.submit{\\n            value: _depositAmount\\n        }(\\n            referralAddress\\n        );\\n\\n        uint256 stETHAmount = ST_ETH.getPooledEthByShares(\\n            stETHShares\\n        );\\n\\n        uint256 wstETHAmount = WST_ETH.wrap(\\n            stETHAmount\\n        );\\n\\n        WISE_LENDING.depositExactAmount(\\n            _nftId,\\n            WST_ETH_ADDRESS,\\n            wstETHAmount\\n        );\\n\\n        AAVE_HUB.borrowExactAmount(\\n            _nftId,\\n            WETH_ADDRESS,\\n            _totalDebtBalancer\\n        );\\n\\n        if (_checkDebtRatio(_nftId) == false) {\\n            revert DebtRatioTooHigh();\\n        }\\n\\n        _safeTransfer(\\n            WETH_ADDRESS,\\n            BALANCER_ADDRESS,\\n            _totalDebtBalancer\\n        );\\n    }\\n\\n    /**\\n     * @dev Internal function summarizing liquidation\\n     * checks and interface call for core liquidation\\n     * from wise lending.\\n     */\\n    function _coreLiquidation(\\n        uint256 _nftId,\\n        uint256 _nftIdLiquidator,\\n        uint256 _shareAmountToPay\\n    )\\n        internal\\n        returns (\\n            uint256 paybackAmount,\\n            uint256 receivingAmount\\n        )\\n    {\\n        if (_checkDebtRatio(_nftId) == true) {\\n            revert DebtRatioTooLow();\\n        }\\n\\n        paybackAmount = WISE_LENDING.paybackAmount(\\n            AAVE_WETH_ADDRESS,\\n            _shareAmountToPay\\n        );\\n\\n        receivingAmount = WISE_LENDING.coreLiquidationIsolationPools(\\n            _nftId,\\n            _nftIdLiquidator,\\n            msg.sender,\\n            msg.sender,\\n            AAVE_WETH_ADDRESS,\\n            WST_ETH_ADDRESS,\\n            paybackAmount,\\n            _shareAmountToPay\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/PowerFarms/wstETHPowerFarm/wstETHFarmMathLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- WISE --\\n\\npragma solidity =0.8.21;\\n\\nimport \\\"./wstETHFarmDeclarations.sol\\\";\\n\\nabstract contract wstETHFarmMathLogic is wstETHFarmDeclarations {\\n\\n    /**\\n     * @dev Wrapper for wrapping\\n     * ETH call.\\n     */\\n    function _wrapETH(\\n        uint256 _value\\n    )\\n        internal\\n    {\\n        WETH.deposit{\\n            value: _value\\n        }();\\n    }\\n\\n    /**\\n     * @dev Wrapper for unwrapping\\n     * ETH call.\\n     */\\n    function _unwrapETH(\\n        uint256 _value\\n    )\\n        internal\\n    {\\n        WETH.withdraw(\\n            _value\\n        );\\n    }\\n\\n    modifier updatePools() {\\n        _updatePools();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Update logic for pools via wise lending\\n     * interfaces\\n     */\\n    function _updatePools()\\n        private\\n    {\\n        WISE_LENDING.preparePool(\\n            WST_ETH_ADDRESS\\n        );\\n\\n        WISE_LENDING.preparePool(\\n            AAVE_WETH_ADDRESS\\n        );\\n    }\\n\\n    /**\\n     * @dev Internal function getting the\\n     * borrow shares from position {_nftId}\\n     * with token {_borrowToken}\\n     */\\n    function _getPositionBorrowShares(\\n        uint256 _nftId\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return WISE_LENDING.getPositionBorrowShares(\\n            _nftId,\\n            AAVE_WETH_ADDRESS\\n        );\\n    }\\n\\n    /**\\n     * @dev Internal function converting\\n     * borrow shares into tokens.\\n     */\\n    function _getPositionBorrowToken(\\n        uint256 _nftId\\n    )\\n        internal\\n        view\\n        returns(uint256)\\n    {\\n        return WISE_LENDING.paybackAmount(\\n            AAVE_WETH_ADDRESS,\\n            _getPositionBorrowShares(\\n                _nftId\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Internal function getting the\\n     * lending shares from position {_nftId}\\n     * with token {_borrowToken}\\n     */\\n    function _getPositionLendingShares(\\n        uint256 _nftId\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return WISE_LENDING.getPositionLendingShares(\\n            _nftId,\\n            WST_ETH_ADDRESS\\n        );\\n    }\\n\\n    /**\\n     * @dev Internal function converting\\n     * lending shares into tokens.\\n     */\\n    function _getPostionCollateralToken(\\n        uint256 _nftId\\n    )\\n        internal\\n        view\\n        returns(uint256)\\n    {\\n        return WISE_LENDING.cashoutAmount(\\n            WST_ETH_ADDRESS,\\n            _getPositionLendingShares(\\n                _nftId\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Read function returning the total\\n     * borrow amount in USD from postion {_nftId}\\n     */\\n    function getPositionBorrowUSD(\\n        uint256 _nftId\\n    )\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return ORACLE_HUB.getTokensInUSD(\\n            AAVE_WETH_ADDRESS,\\n            _getPositionBorrowToken(\\n                _nftId\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Read function returning the total\\n     * lending amount in USD from postion {_nftId}\\n     */\\n    function getTotalWeightedCollateralUSD(\\n        uint256 _nftId\\n    )\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return  ORACLE_HUB.getTokensInUSD(\\n            WST_ETH_ADDRESS,\\n            _getPostionCollateralToken(_nftId)\\n        )\\n            * collateralFactor\\n            / PRECISION_FACTOR_E18;\\n    }\\n\\n    /**\\n     * @dev Internal function checking if a position\\n     * with {_nftId} is still used to lock it for\\n     * unregister function.\\n     */\\n    function getLeverageAmount(\\n        uint256 _initialAmount,\\n        uint256 _leverage\\n    )\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        return _initialAmount\\n            * _leverage\\n            / PRECISION_FACTOR_E18;\\n    }\\n\\n    /**\\n     * @dev Internal function with math logic for approximating\\n     * the net APY for the postion aftrer creation.\\n     */\\n    function _getApproxNetAPY(\\n        uint256 _initialAmount,\\n        uint256 _leverage,\\n        uint256 _wstETHAPY\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            bool\\n        )\\n    {\\n        if (_leverage < PRECISION_FACTOR_E18) {\\n            return (0, false);\\n        }\\n\\n        uint256 leveragedAmount = getLeverageAmount(\\n            _initialAmount,\\n            _leverage\\n        );\\n\\n        uint256 flashloanAmount = leveragedAmount\\n            - _initialAmount;\\n\\n        uint256 newBorrowRate = _getNewBorrowRate(\\n            flashloanAmount\\n        );\\n\\n        uint256 leveragedPositivAPY = _wstETHAPY\\n            * _leverage\\n            / PRECISION_FACTOR_E18;\\n\\n        uint256 leveragedNegativeAPY = newBorrowRate\\n            * (_leverage - PRECISION_FACTOR_E18)\\n            / PRECISION_FACTOR_E18;\\n\\n        bool isPositive = leveragedPositivAPY >= leveragedNegativeAPY;\\n\\n        uint256 netAPY = isPositive == true\\n            ? leveragedPositivAPY - leveragedNegativeAPY\\n            : leveragedNegativeAPY - leveragedPositivAPY;\\n\\n        return (\\n            netAPY,\\n            isPositive\\n        );\\n    }\\n\\n    /**\\n     * @dev Internal function with math logic for approximating\\n     * the new borrow APY.\\n     */\\n    function _getNewBorrowRate(\\n        uint256 _borrowAmount\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 totalPool = WISE_LENDING.getTotalPool(\\n            AAVE_WETH_ADDRESS\\n        );\\n\\n        uint256 pseudoPool = WISE_LENDING.getPseudoTotalPool(\\n            AAVE_WETH_ADDRESS\\n        );\\n\\n        if (totalPool > pseudoPool) {\\n            return 0;\\n        }\\n\\n        uint256 newUtilization = PRECISION_FACTOR_E18 - (PRECISION_FACTOR_E18\\n            * (totalPool - _borrowAmount)\\n            / pseudoPool\\n        );\\n\\n        uint256 pole = WISE_LENDING.borrowRatesData(\\n            AAVE_WETH_ADDRESS\\n        ).pole;\\n\\n        uint256 mulFactor = WISE_LENDING.borrowRatesData(\\n            AAVE_WETH_ADDRESS\\n        ).multiplicativeFactor;\\n\\n        uint256 baseDivider = pole\\n            * (pole - newUtilization);\\n\\n        return mulFactor\\n            * PRECISION_FACTOR_E18\\n            * newUtilization\\n            / baseDivider;\\n    }\\n\\n    /**\\n     * @dev Internal function checking if a position\\n     * with {_nftId} has a debt ratio under 100%.\\n     */\\n    function _checkDebtRatio(\\n        uint256 _nftId\\n    )\\n        internal\\n        view\\n        returns (bool res)\\n    {\\n        res = getTotalWeightedCollateralUSD(_nftId)\\n            > getPositionBorrowUSD(_nftId);\\n    }\\n\\n    /**\\n     * @dev Internal function checking if the debt\\n     * ratio threshold fof 100 % is reached when a\\n     * manually withdraw is performed.\\n     */\\n    function _checkBorrowLimit(\\n        uint256 _nftId,\\n        uint256 _amount\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        uint256 borrowAmount = getPositionBorrowUSD(\\n            _nftId\\n        );\\n\\n        if (borrowAmount == 0) {\\n            return true;\\n        }\\n\\n        uint256 withdrawValue = ORACLE_HUB.getTokensInUSD(\\n            WST_ETH_ADDRESS,\\n            _amount\\n        )\\n            * collateralFactor\\n            / PRECISION_FACTOR_E18;\\n\\n        return getTotalWeightedCollateralUSD(_nftId) - withdrawValue\\n            > borrowAmount;\\n    }\\n\\n    /**\\n     * @dev Internal function checking if the leveraged\\n     * amount is above 5000 USD in value.\\n     */\\n    function _aboveMinDepositAmount(\\n        uint256 _amount\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        uint256 equivUSD = ORACLE_HUB.getTokensInUSD(\\n            WETH_ADDRESS,\\n            _amount\\n        );\\n\\n        return equivUSD >= minDepositUsdAmount;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/PowerFarms/wstETHPowerFarm/wstETHFarmDeclarations.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- WISE --\\n\\npragma solidity =0.8.21;\\n\\nimport \\\"../../InterfaceHub/IWETH.sol\\\";\\nimport \\\"../../InterfaceHub/IAave.sol\\\";\\nimport \\\"../../InterfaceHub/IStETH.sol\\\";\\nimport \\\"../../InterfaceHub/ICurve.sol\\\";\\nimport \\\"../../InterfaceHub/IWstETH.sol\\\";\\nimport \\\"../../InterfaceHub/IAaveHub.sol\\\";\\nimport \\\"../../InterfaceHub/IWiseLending.sol\\\";\\nimport \\\"../../InterfaceHub/IWiseSecurity.sol\\\";\\nimport \\\"../../InterfaceHub/IPositionNFTs.sol\\\";\\nimport \\\"../../InterfaceHub/IWiseOracleHub.sol\\\";\\nimport \\\"../../InterfaceHub/IBalancerFlashloan.sol\\\";\\n\\nimport \\\"../../TransferHub/TransferHelper.sol\\\";\\nimport \\\"../../TransferHub/ApprovalHelper.sol\\\";\\n\\nerror InvalidKey();\\nerror Deactivated();\\nerror InvalidParam();\\nerror InvalidOwner();\\nerror AccessDenied();\\nerror AmountTooSmall();\\nerror AlreadyReserved();\\nerror LeverageTooHigh();\\nerror DebtRatioTooLow();\\nerror NotBalancerVault();\\nerror DebtRatioTooHigh();\\nerror ResultsInBadDebt();\\n\\ncontract wstETHFarmDeclarations is\\n    TransferHelper,\\n    ApprovalHelper\\n{\\n    // Bool indicating that a power farm is deactivated\\n    bool public isShutdown;\\n\\n    // Bool indicating transaction in progress\\n    bool internal allowEnter;\\n\\n    // Array of ERC20 interfaces for balancer flashloan\\n    IERC20[] public globalTokens;\\n\\n    // Array of token amounts for balancer flashloan\\n    uint256[] public globalAmounts;\\n\\n    // Corresponding Aave borrow token used by farm\\n    address public immutable aaveTokenAddresses;\\n\\n    // Borrow token used by farm\\n    address public immutable borrowTokenAddresses;\\n\\n    // Referral address used for lido\\n    address public referralAddress;\\n\\n    // Collateral factor used for sDAI collateral\\n    uint256 public collateralFactor;\\n\\n    IWETH public immutable WETH;\\n    IAave public immutable AAVE;\\n    ICurve public immutable CURVE;\\n    IStETH public immutable ST_ETH;\\n    IWstETH public immutable WST_ETH;\\n    IAaveHub public immutable AAVE_HUB;\\n    IWiseLending public immutable WISE_LENDING;\\n    IWiseOracleHub public immutable ORACLE_HUB;\\n    IWiseSecurity public immutable WISE_SECURITY;\\n    IBalancerVault public immutable BALANCER_VAULT;\\n    IPositionNFTs public immutable POSITION_NFT;\\n\\n    // @TODO: need to fetch from AAVE_HUB\\n    address constant AAVE_ADDRESS = 0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2;\\n\\n    // @TODO: need to fetch from WISE_LENDING\\n    address constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n    // @TODO: can we fetch this from somewhere dynamically? if not pass in constructor\\n    address constant ST_ETH_ADDRESS = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84;\\n\\n    // @TODO: can we fetch this from somewhere dynamically? if not pass in constructor\\n    address constant WST_ETH_ADDRESS = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;\\n\\n    // @TODO: can we fetch this from somewhere dynamically? if not pass in constructor\\n    address constant BALANCER_ADDRESS = 0xBA12222222228d8Ba445958a75a0704d566BF2C8;\\n\\n    // @TODO: need to fetch from WISE_LENDING\\n    address constant AAVE_HUB_ADDRESS = 0x4307d8207f2C429f0dCbd9051b5B1d638c3b7fbB;\\n\\n    // @TODO: need to fetch from AAVE_HUB\\n    address constant AAVE_WETH_ADDRESS = 0x4d5F47FA6A74757f35C14fD3a6Ef8E3C9BC514E8;\\n\\n    // @TODO: can we fetch this from somewhere dynamically? if not pass in constructor\\n    address constant CURVE_POOL_ADDRESS = 0xDC24316b9AE028F1497c275EB9192a3Ea0f67022;\\n\\n    // Math constant for computations\\n    uint256 constant PRECISION_FACTOR_E18 = 1E18;\\n\\n    // Maximal allowed leverage factor\\n    uint256 constant MAX_LEVERAGE = 15 * PRECISION_FACTOR_E18;\\n\\n    // Minimal required deposit amount for leveraged postion in USD\\n    uint256 public minDepositUsdAmount = 5000 * PRECISION_FACTOR_E18;\\n\\n    // Max possible amount for uint256\\n    uint256 constant MAX_AMOUNT = type(uint256).max;\\n\\n    event FarmEntry(\\n        uint256 indexed keyId,\\n        uint256 indexed wiseLendingNFT,\\n        uint256 indexed leverage,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n\\n    event FarmExit(\\n        uint256 indexed keyId,\\n        uint256 indexed wiseLendingNFT,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n\\n    event FarmStatus(\\n        bool indexed state,\\n        uint256 timestamp\\n    );\\n\\n    event ReferralUpdate(\\n        address indexed referralAddress,\\n        uint256 timestamp\\n    );\\n\\n    event ManualPaybackShares(\\n        uint256 indexed keyId,\\n        uint256 indexed wiseLendingNFT,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n\\n    event ManualWithdrawShares(\\n        uint256 indexed keyId,\\n        uint256 indexed wiseLendingNFT,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n\\n    event BaseUrlChange(\\n        string baseUrl,\\n        uint256 timestamp\\n    );\\n\\n    event BaseExtensionChange(\\n        string baseExtension,\\n        uint256 timestamp\\n    );\\n\\n    event MinDepositChange(\\n        uint256 minDepositUsdAmount,\\n        uint256 timestamp\\n    );\\n\\n    event ERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes _data\\n    );\\n\\n    event ETHReceived(\\n        uint256 amount,\\n        address from\\n    );\\n\\n    event RegistrationFarm(\\n        uint256 nftId,\\n        uint256 timestamp\\n    );\\n\\n    constructor(\\n        address _wiseLendingAddress,\\n        uint256 _collateralFactor\\n    ) {\\n        WISE_LENDING = IWiseLending(\\n            _wiseLendingAddress\\n        );\\n\\n        ORACLE_HUB = IWiseOracleHub(\\n            WISE_LENDING.WISE_ORACLE()\\n        );\\n\\n        BALANCER_VAULT = IBalancerVault(\\n            BALANCER_ADDRESS\\n        );\\n\\n        WISE_SECURITY = IWiseSecurity(\\n            WISE_LENDING.WISE_SECURITY()\\n        );\\n\\n        AAVE = IAave(\\n            AAVE_ADDRESS\\n        );\\n\\n        WETH = IWETH(\\n            WETH_ADDRESS\\n        );\\n\\n        ST_ETH = IStETH(\\n            ST_ETH_ADDRESS\\n        );\\n\\n        WST_ETH = IWstETH(\\n            WST_ETH_ADDRESS\\n        );\\n\\n        AAVE_HUB = IAaveHub(\\n            AAVE_HUB_ADDRESS\\n        );\\n\\n        CURVE = ICurve(\\n            CURVE_POOL_ADDRESS\\n        );\\n\\n        POSITION_NFT = IPositionNFTs(\\n            WISE_LENDING.POSITION_NFT()\\n        );\\n\\n        collateralFactor = _collateralFactor;\\n\\n        borrowTokenAddresses = WETH_ADDRESS;\\n        aaveTokenAddresses = AAVE_WETH_ADDRESS;\\n\\n        _doApprovals(\\n            _wiseLendingAddress\\n        );\\n    }\\n\\n    function doApprovals()\\n        external\\n    {\\n        _doApprovals(\\n            address(WISE_LENDING)\\n        );\\n    }\\n\\n    function _doApprovals(\\n        address _wiseLendingAddress\\n    )\\n        internal\\n    {\\n        _safeApprove(\\n            AAVE_WETH_ADDRESS,\\n            _wiseLendingAddress,\\n            MAX_AMOUNT\\n        );\\n\\n        _safeApprove(\\n            WETH_ADDRESS,\\n            AAVE_HUB_ADDRESS,\\n            MAX_AMOUNT\\n        );\\n\\n        _safeApprove(\\n            ST_ETH_ADDRESS,\\n            WST_ETH_ADDRESS,\\n            MAX_AMOUNT\\n        );\\n\\n        _safeApprove(\\n            WST_ETH_ADDRESS,\\n            address(WISE_LENDING),\\n            MAX_AMOUNT\\n        );\\n\\n        _safeApprove(\\n            ST_ETH_ADDRESS,\\n            CURVE_POOL_ADDRESS,\\n            MAX_AMOUNT\\n        );\\n    }\\n\\n    modifier isActive() {\\n        if (isShutdown == true) {\\n            revert Deactivated();\\n        }\\n        _;\\n    }\\n\\n    function onERC721Received(\\n        address _operator,\\n        address _from,\\n        uint256 _tokenId,\\n        bytes calldata _data\\n    )\\n        external\\n        returns (bytes4)\\n    {\\n        emit ERC721Received(\\n            _operator,\\n            _from,\\n            _tokenId,\\n            _data\\n        );\\n\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/TransferHub/ApprovalHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- WISE --\\n\\npragma solidity =0.8.21;\\n\\nimport \\\"./CallOptionalReturn.sol\\\";\\n\\ncontract ApprovalHelper is CallOptionalReturn {\\n\\n    bytes4 constant approveSelector = IERC20\\n        .approve\\n        .selector;\\n\\n    /**\\n     * @dev\\n     * Allows to execute safe approve for a token\\n     */\\n    function _safeApprove(\\n        address _token,\\n        address _spender,\\n        uint256 _value\\n    )\\n        internal\\n    {\\n        _callOptionalReturn(\\n            _token,\\n            abi.encodeWithSelector(\\n                approveSelector,\\n                _spender,\\n                _value\\n            )\\n        );\\n    }\\n}\"\r\n    },\r\n    \"contracts/TransferHub/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- WISE --\\n\\npragma solidity =0.8.21;\\n\\nimport \\\"./CallOptionalReturn.sol\\\";\\n\\ncontract TransferHelper is CallOptionalReturn {\\n\\n    bytes4 constant transferSelector = IERC20\\n        .transfer\\n        .selector;\\n\\n    bytes4 constant transferFromSelector = IERC20\\n        .transferFrom\\n        .selector;\\n\\n    /**\\n     * @dev\\n     * Allows to execute safe transfer for a token\\n     */\\n    function _safeTransfer(\\n        address _token,\\n        address _to,\\n        uint256 _value\\n    )\\n        internal\\n    {\\n        _callOptionalReturn(\\n            _token,\\n            abi.encodeWithSelector(\\n                transferSelector,\\n                _to,\\n                _value\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev\\n     * Allows to execute safe transferFrom for a token\\n     */\\n    function _safeTransferFrom(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    )\\n        internal\\n    {\\n        _callOptionalReturn(\\n            _token,\\n            abi.encodeWithSelector(\\n                transferFromSelector,\\n                _from,\\n                _to,\\n                _value\\n            )\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/InterfaceHub/IBalancerFlashloan.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- WISE --\\n\\npragma solidity =0.8.21;\\n\\nimport \\\"../InterfaceHub/IERC20.sol\\\";\\n\\ninterface IBalancerVault {\\n\\n    /**\\n     * @dev Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it,\\n     * and then reverting unless the tokens plus a proportional protocol fee have been returned.\\n     *\\n     * The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount\\n     * for each token contract. `tokens` must be sorted in ascending order.\\n     *\\n     * The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the\\n     * `receiveFlashLoan` call.\\n     *\\n     * Emits `FlashLoan` events.\\n     */\\n    function flashLoan(\\n        IFlashLoanRecipient _recipient,\\n        IERC20[] memory _tokens,\\n        uint256[] memory _amounts,\\n        bytes memory _userData\\n    )\\n        external;\\n}\\n\\ninterface IFlashLoanRecipient {\\n\\n    /**\\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\\n     *\\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\\n     * Vault, or else the entire flash loan will revert.\\n     *\\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\\n     */\\n    function receiveFlashLoan(\\n        IERC20[] memory _tokens,\\n        uint256[] memory _amounts,\\n        uint256[] memory _feeAmounts,\\n        bytes memory _userData\\n    )\\n        external;\\n}\"\r\n    },\r\n    \"contracts/InterfaceHub/IWiseOracleHub.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- WISE --\\n\\npragma solidity =0.8.21;\\n\\ninterface IWiseOracleHub {\\n\\n    function latestResolver(\\n        address _tokenAddress\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getTokensFromUSD(\\n        address _tokenAddress,\\n        uint256 _usdValue\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getTokensInUSD(\\n        address _tokenAddress,\\n        uint256 _amount\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function chainLinkIsDead(\\n        address _tokenAddress\\n    )\\n        external\\n        view\\n        returns (bool);\\n\\n    function decimalsUSD()\\n        external\\n        pure\\n        returns (uint8);\\n\\n    function previousValue(\\n        address _tokenAddress\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function setPreviousValue(\\n        address _tokenAddress\\n    )\\n        external;\\n\\n    function addOracle(\\n        address _tokenAddress,\\n        address _priceFeedAddress,\\n        address[] memory _underlyingFeedTokens\\n    )\\n        external;\\n\\n    function recalibrate(\\n        address _tokenAddress\\n    )\\n        external;\\n\\n    function recalibratePreview(\\n        address _tokenAddress\\n    )\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/InterfaceHub/IPositionNFTs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- WISE --\\n\\npragma solidity =0.8.21;\\n\\ninterface IPositionNFTs {\\n\\n    function ownerOf(\\n        uint256 _nftId\\n    )\\n        external\\n        view\\n        returns (address);\\n\\n    function getOwner(\\n        uint256 _nftId\\n    )\\n        external\\n        view\\n        returns (address);\\n\\n\\n    function totalSupply()\\n        external\\n        view\\n        returns (uint256);\\n\\n    function reserved(\\n        address _owner\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function reservePosition()\\n        external;\\n\\n    function mintPosition()\\n        external;\\n\\n    function tokenOfOwnerByIndex(\\n        address _owner,\\n        uint256 _index\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function mintPositionForUser(\\n        address _user\\n    )\\n        external\\n        returns (uint256);\\n\\n    function reservePositionForUser(\\n        address _user\\n    )\\n        external\\n        returns (uint256);\\n\\n    function getApproved(\\n        uint256 _nftId\\n    )\\n        external\\n        returns (address);\\n\\n    function approve(\\n        address _to,\\n        uint256 _nftId\\n    )\\n        external;\\n}\"\r\n    },\r\n    \"contracts/InterfaceHub/IWiseSecurity.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- WISE --\\n\\npragma solidity =0.8.21;\\n\\nstruct CurveSwapStructToken {\\n    uint256 curvePoolTokenIndexFrom;\\n    uint256 curvePoolTokenIndexTo;\\n    uint256 curveMetaPoolTokenIndexFrom;\\n    uint256 curveMetaPoolTokenIndexTo;\\n}\\n\\nstruct CurveSwapStructData {\\n    address curvePool;\\n    address curveMetaPool;\\n    bytes swapBytesPool;\\n    bytes swapBytesMeta;\\n}\\n\\ninterface IWiseSecurity {\\n\\n    function overallUSDBorrowHeartbeat(\\n        uint256 _nftId\\n    )\\n        external\\n        view\\n        returns (uint256 buffer);\\n\\n    function checkBadDebt(\\n        uint256 _nftId\\n    )\\n        external;\\n\\n    function getFullCollateralUSD(\\n        uint256 _nftId,\\n        address _poolToken\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function checksLiquidation(\\n        uint256 _nftIdLiquidate,\\n        address _tokenToPayback,\\n        uint256 _shareAmountToPay\\n    )\\n        external\\n        view;\\n\\n    function getPositionBorrowAmount(\\n        uint256 _nftId,\\n        address _poolToken\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPositionLendingAmount(\\n        uint256 _nftId,\\n        address _poolToken\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getLiveDebtRatioNormalPool(\\n        uint256 _nftId\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function overallUSDCollateralsBare(\\n        uint256 _nftId\\n    )\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function FEE_MANAGER()\\n        external\\n        returns (address);\\n\\n    function AAVE_HUB()\\n        external\\n        returns (address);\\n\\n    function curveSecurityCheck(\\n        address _poolAddress\\n    )\\n        external;\\n\\n    function prepareCurvePools(\\n        address _poolToken,\\n        CurveSwapStructData memory _curveSwapStructData,\\n        CurveSwapStructToken memory _curveSwapStructToken\\n    )\\n        external;\\n\\n    function checksWithdraw(\\n        uint256 _nftId,\\n        address _caller,\\n        address _poolToken,\\n        uint256 _amount\\n    )\\n        external\\n        view;\\n\\n    function checksBorrow(\\n        uint256 _nftId,\\n        address _caller,\\n        address _poolToken,\\n        uint256 _amount\\n    )\\n        external\\n        view;\\n\\n    function checksSolelyWithdraw(\\n        uint256 _nftId,\\n        address _caller,\\n        address _poolToken,\\n        uint256 _amount\\n    )\\n        external\\n        view;\\n\\n    function checkOwnerPosition(\\n        uint256 _nftId,\\n        address _caller\\n    )\\n        external\\n        view;\\n\\n    function checksCollateralizeDeposit(\\n        uint256 _nftIdCaller,\\n        address _caller,\\n        address _poolAddress\\n    )\\n        external\\n        view;\\n\\n    function calculateWishPercentage(\\n        uint256 _nftId,\\n        address _receiveToken,\\n        uint256 _paybackUSD,\\n        uint256 _maxFeeUSD,\\n        uint256 _baseRewardLiquidation\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function checksDecollateralizeDeposit(\\n        uint256 _nftIdCaller,\\n        address _poolToken\\n    )\\n        external\\n        view;\\n\\n    function checkBorrowLimit(\\n        uint256 _nftId,\\n        address _poolToken,\\n        uint256 _amount\\n    )\\n        external\\n        view;\\n\\n    function checkPositionLocked(\\n        uint256 _nftId,\\n        address _caller\\n    )\\n        external\\n        view;\\n\\n    function checkPaybackLendingShares(\\n        uint256 _nftIdReceiver,\\n        uint256 _nftIdCaller,\\n        address _caller,\\n        address _poolToken,\\n        uint256 _amount\\n    )\\n        external\\n        view;\\n\\n    function maxFeeUSD()\\n        external\\n        view\\n        returns (uint256);\\n\\n    function maxFeeFarmUSD()\\n        external\\n        view\\n        returns (uint256);\\n\\n    function baseRewardLiquidation()\\n        external\\n        view\\n        returns (uint256);\\n\\n    function baseRewardLiquidationFarm()\\n        external\\n        view\\n        returns (uint256);\\n\\n    function checksRegister(\\n        uint256 _nftId,\\n        address _caller\\n    )\\n        external\\n        view;\\n\\n    function getLendingRate(\\n        address _poolToken\\n    )\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/InterfaceHub/IWiseLending.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- WISE --\\n\\npragma solidity =0.8.21;\\n\\nstruct GlobalPoolEntry {\\n    uint256 totalPool;\\n    uint256 utilization;\\n    uint256 totalBareToken;\\n    uint256 poolFee;\\n}\\n\\nstruct BorrowPoolEntry {\\n    bool allowBorrow;\\n    uint256 pseudoTotalBorrowAmount;\\n    uint256 totalBorrowShares;\\n    uint256 borrowRate;\\n}\\n\\nstruct LendingPoolEntry {\\n    uint256 pseudoTotalPool;\\n    uint256 totalDepositShares;\\n    uint256 collateralFactor;\\n}\\n\\nstruct PoolEntry {\\n    uint256 totalPool;\\n    uint256 utilization;\\n    uint256 totalBareToken;\\n    uint256 poolFee;\\n}\\n\\nstruct BorrowRatesEntry {\\n    uint256 pole;\\n    uint256 deltaPole;\\n    uint256 minPole;\\n    uint256 maxPole;\\n    uint256 multiplicativeFactor;\\n}\\n\\ninterface IWiseLending {\\n\\n    function borrowRatesData(\\n        address _pooToken\\n    )\\n        external\\n        view\\n        returns (BorrowRatesEntry memory);\\n\\n    function newBorrowRate(\\n        address _poolToken\\n    )\\n        external;\\n\\n    function calculateBorrowShares(\\n        address _poolToken,\\n        uint256 _amount\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function borrowPoolData(\\n        address _poolToken\\n    )\\n        external\\n        view\\n        returns (BorrowPoolEntry memory);\\n\\n    function lendingPoolData(\\n        address _poolToken\\n    )\\n        external\\n        view\\n        returns (LendingPoolEntry memory);\\n\\n    function getPositionBorrowShares(\\n        uint256 _nftId,\\n        address _poolToken\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getTimeStamp(\\n        address _poolToken\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPureCollateralAmount(\\n        uint256 _nftId,\\n        address _poolToken\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function isDecollteralized(\\n        uint256 _nftId,\\n        address _poolToken\\n    )\\n        external\\n        view\\n        returns (bool);\\n\\n    function veryfiedIsolationPool(\\n        address _poolAddress\\n    )\\n        external\\n        view\\n        returns (bool);\\n\\n    function positionLocked(\\n        uint256 _nftId\\n    )\\n        external\\n        view\\n        returns (bool);\\n\\n    function getTotalBareToken(\\n        address _poolToken\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function maxDepositValueToken(\\n        address _poolToken\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function master()\\n        external\\n        view\\n        returns (address);\\n\\n    function WETH_ADDRESS()\\n        external\\n        view\\n        returns (address);\\n\\n    function WISE_ORACLE()\\n        external\\n        view\\n        returns (address);\\n\\n    function POSITION_NFT()\\n        external\\n        view\\n        returns (address);\\n\\n    function FEE_MANAGER()\\n        external\\n        view\\n        returns (address);\\n\\n    function WISE_SECURITY()\\n        external\\n        view\\n        returns (address);\\n\\n    function lastUpdated(\\n        address _poolAddress\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function isolationPoolRegistered(\\n        uint256 _nftId,\\n        address _isolationPool\\n    )\\n        external\\n        view\\n        returns (bool);\\n\\n    function calculateLendingShares(\\n        address _poolToken,\\n        uint256 _amount\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function positionPureCollateralAmount(\\n        uint256 _nftId,\\n        address _poolToken\\n    )\\n        external\\n        returns (uint256);\\n\\n    function getTotalPool(\\n        address _poolToken\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function depositExactAmount(\\n        uint256 _nftId,\\n        address _poolToken,\\n        uint256 _amount\\n    )\\n        external\\n        returns (uint256);\\n\\n    function withdrawOnBehalfExactAmount(\\n        uint256 _nftId,\\n        address _poolToken,\\n        uint256 _amount\\n    )\\n        external\\n        returns (uint256);\\n\\n    function syncManually(\\n        address _poolToken\\n    )\\n        external;\\n\\n    function withdrawOnBehalfExactShares(\\n        uint256 _nftId,\\n        address _poolToken,\\n        uint256 _shares\\n    )\\n        external\\n        returns (uint256);\\n\\n    function borrowOnBehalfExactAmount(\\n        uint256 _nftId,\\n        address _poolToken,\\n        uint256 _amount\\n    )\\n        external\\n        returns (uint256);\\n\\n    function borrowExactAmount(\\n        uint256 _nftId,\\n        address _poolToken,\\n        uint256 _amount\\n    )\\n        external\\n        returns (uint256);\\n\\n    function solelyDeposit(\\n        uint256 _nftId,\\n        address _poolToken,\\n        uint256 _amount\\n    )\\n        external;\\n\\n    function solelyWithdrawOnBehalf(\\n        uint256 _nftId,\\n        address _poolToken,\\n        uint256 _amount\\n    )\\n        external;\\n\\n    function paybackExactAmount(\\n        uint256 _nftId,\\n        address _poolToken,\\n        uint256 _amount\\n    )\\n        external\\n        returns (uint256);\\n\\n    function paybackExactShares(\\n        uint256 _nftId,\\n        address _poolToken,\\n        uint256 _shares\\n    )\\n        external\\n        returns (uint256);\\n\\n    function setPoolFee(\\n        address _poolToken,\\n        uint256 _newFee\\n    )\\n        external;\\n\\n    function getPositionLendingShares(\\n        uint256 _nftId,\\n        address _poolToken\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function withdrawExactShares(\\n        uint256 _nftId,\\n        address _poolToken,\\n        uint256 _shares\\n    )\\n        external\\n        returns (uint256);\\n\\n    function poolTokenAddresses()\\n        external\\n        returns (address[] memory);\\n\\n    function corePaybackFeeManager(\\n        address _poolToken,\\n        uint256 _nftId,\\n        uint256 _amount,\\n        uint256 _shares\\n    )\\n        external;\\n\\n    function coreLiquidationIsolationPools(\\n        uint256 _nftId,\\n        uint256 _nftIdLiquidator,\\n        address _caller,\\n        address _receiver,\\n        address _tokenToPayback,\\n        address _tokenToRecieve,\\n        uint256 _paybackAmount,\\n        uint256 _shareAmountToPay\\n    )\\n        external\\n        returns (uint256 reveiveAmount);\\n\\n    function preparePool(\\n        address _poolToken\\n    )\\n        external;\\n\\n    function getPositionBorrowTokenLength(\\n        uint256 _nftId\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPositionBorrowTokenByIndex(\\n        uint256 _nftId,\\n        uint256 _index\\n    )\\n        external\\n        view\\n        returns (address);\\n\\n    function getPositionLendingTokenByIndex(\\n        uint256 _nftId,\\n        uint256 _index\\n    )\\n        external\\n        view\\n        returns (address);\\n\\n    function getPositionLendingTokenLength(\\n        uint256 _nftId\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function globalPoolData(\\n        address _poolToken\\n    )\\n        external\\n        view\\n        returns (GlobalPoolEntry memory);\\n\\n\\n    function getGlobalBorrowAmount(\\n        address _token\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPseudoTotalBorrowAmount(\\n        address _token\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getInitialBorrowAmountUser(\\n        address _user,\\n        address _token\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPseudoTotalPool(\\n        address _token\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getInitialDepositAmountUser(\\n        address _user,\\n        address _token\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getGlobalDepositAmount(\\n        address _token\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function paybackAmount(\\n        address _token,\\n        uint256 _shares\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPositionLendingShares(\\n        address _user,\\n        address _token\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function cashoutAmount(\\n        address _token,\\n        uint256 _shares\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getTotalDepositShares(\\n        address _token\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getTotalBorrowShares(\\n        address _token\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function checkPositionLocked(\\n        uint256 _nftId,\\n        address _caller\\n    )\\n        external\\n        view;\\n\\n    function checkDeposit(\\n        uint256 _nftId,\\n        address _caller,\\n        address _poolToken,\\n        uint256 _amount\\n    )\\n        external\\n        view;\\n\\n    function setRegistrationIsolationPool(\\n        uint256 _nftId,\\n        bool _state\\n    )\\n        external;\\n}\\n\"\r\n    },\r\n    \"contracts/InterfaceHub/IAaveHub.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- WISE --\\n\\npragma solidity =0.8.21;\\n\\ninterface IAaveHub {\\n\\n    function AAVE_ADDRESS()\\n        external\\n        view\\n        returns (address);\\n\\n    function aaveTokenAddress(\\n        address _underlyingToken\\n    )\\n        external\\n        view\\n        returns (address);\\n\\n    function borrowExactAmount(\\n        uint256 _nftId,\\n        address _underlyingAsset,\\n        uint256 _borrowAmount\\n    )\\n        external\\n        returns (uint256);\\n\\n    function paybackExactShares(\\n        uint256 _nftId,\\n        address _underlyingAsset,\\n        uint256 _shares\\n    )\\n        external\\n        returns (uint256);\\n\\n    function paybackExactAmount(\\n        uint256 _nftId,\\n        address _underlyingAsset,\\n        uint256 _shares\\n    )\\n        external\\n        returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/InterfaceHub/IWstETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- WISE --\\n\\npragma solidity =0.8.21;\\n\\ninterface IWstETH {\\n\\n    function wrap(\\n        uint256 _stETHAmount\\n    )\\n        external\\n        returns (uint256);\\n\\n    function unwrap(\\n        uint256 _wstETHAmount\\n    )\\n        external\\n        returns (uint256);\\n\\n    function getStETHByWstETH(\\n        uint256 _wstETHAmount\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function decimals()\\n        external\\n        view\\n        returns (uint8);\\n\\n    function balanceOf(\\n        address _account\\n    )\\n        external\\n        view\\n        returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/InterfaceHub/ICurve.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- WISE --\\n\\npragma solidity =0.8.21;\\n\\ninterface ICurve {\\n\\n    function add_liquidity(\\n        address _pool,\\n        uint256[4] memory _depositAmounts,\\n        uint256 _minOutAmount\\n    )\\n        external\\n        returns (uint256);\\n\\n    function balanceOf(\\n        address _userAddress\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function get_dy_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function exchange(\\n        int128 fromIndex,\\n        int128 toIndex,\\n        uint256 exactAmountFrom,\\n        uint256 minReceiveAmount\\n    )\\n        external\\n        returns (uint256);\\n\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    )\\n        external;\\n\\n    function remove_liquidity(\\n        address _pool,\\n        uint256 _burnAmount,\\n        uint256[4] memory coins\\n    )\\n        external;\\n\\n    function remove_liquidity_one_coin(\\n        address _addy,\\n        uint256 _burnAmount,\\n        int128 _i,\\n        uint256 _minReceived\\n    )\\n        external;\\n\\n    function coins(\\n        uint256 arg0\\n    )\\n        external\\n        view\\n        returns (address);\\n\\n    function decimals()\\n        external\\n        view\\n        returns (uint8);\\n\\n    function totalSupply()\\n        external\\n        view\\n        returns (uint256);\\n\\n    function balances(\\n        uint256 arg0\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(\\n        address _spender,\\n        uint256 _amount\\n    )\\n        external\\n        returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/InterfaceHub/IStETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- WISE --\\n\\npragma solidity =0.8.21;\\n\\ninterface IStETH {\\n\\n    function submit(\\n        address _referral\\n    )\\n        external\\n        payable\\n        returns (uint256);\\n\\n    function balanceOf(\\n        address _account\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPooledEthByShares(\\n        uint256 _sharesAmount\\n    )\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/InterfaceHub/IAave.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- WISE --\\n\\npragma solidity =0.8.21;\\n\\ninterface IAave {\\n\\n    struct ReserveData {\\n\\n        // Stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n\\n        // Liquidity index. Expressed in ray\\n        uint128 liquidityIndex;\\n\\n        // Current supply rate. Expressed in ray\\n        uint128 currentLiquidityRate;\\n\\n        // Variable borrow index. Expressed in ray\\n        uint128 variableBorrowIndex;\\n\\n        // Current variable borrow rate. Expressed in ray\\n        uint128 currentVariableBorrowRate;\\n\\n        // Current stable borrow rate. Expressed in ray\\n        uint128 currentStableBorrowRate;\\n\\n        // Timestamp of last update\\n        uint40 lastUpdateTimestamp;\\n\\n        // Id of the reserve.\\n        uint16 id;\\n\\n        // aToken address\\n        address aTokenAddress;\\n\\n        // stableDebtToken address\\n        address stableDebtTokenAddress;\\n\\n        // VariableDebtToken address\\n        address variableDebtTokenAddress;\\n\\n        // Address of the interest rate strategy\\n        address interestRateStrategyAddress;\\n\\n        // Current treasury balance, scaled\\n        uint128 accruedToTreasury;\\n\\n        // Outstanding unbacked aTokens minted through the bridging feature\\n        uint128 unbacked;\\n\\n        // Outstanding debt borrowed against this asset in isolation mode\\n        uint128 isolationModeTotalDebt;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        uint256 data;\\n    }\\n\\n    function deposit(\\n        address _token,\\n        uint256 _amount,\\n        address _owner,\\n        uint16 _referralCode\\n    )\\n        external;\\n\\n    function withdraw(\\n        address _token,\\n        uint256 _amount,\\n        address _recipient\\n    )\\n        external\\n        returns (uint256);\\n\\n    function getReserveData(\\n        address asset\\n    )\\n        external\\n        view\\n        returns (ReserveData memory);\\n\\n}\"\r\n    },\r\n    \"contracts/InterfaceHub/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- WISE --\\n\\npragma solidity =0.8.21;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n\\n    function deposit()\\n        external\\n        payable;\\n\\n    function withdraw(\\n        uint256\\n    )\\n        external;\\n}\\n\"\r\n    },\r\n    \"contracts/TransferHub/CallOptionalReturn.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- WISE --\\n\\npragma solidity =0.8.21;\\n\\nimport \\\"../InterfaceHub/IERC20.sol\\\";\\n\\nerror CallFailed();\\n\\ncontract CallOptionalReturn {\\n\\n    /**\\n     * @dev\\n     * Helper function to do low-level call\\n     */\\n    function _callOptionalReturn(\\n        address token,\\n        bytes memory data\\n    )\\n        internal\\n        returns (bool call)\\n    {\\n        (\\n            bool success,\\n            bytes memory returndata\\n        ) = token.call(\\n            data\\n        );\\n\\n        bool results = returndata.length == 0 || abi.decode(\\n            returndata,\\n            (bool)\\n        );\\n\\n        call = success\\n            && results\\n            && token.code.length > 0;\\n\\n        if (call == false) {\\n            revert CallFailed();\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/InterfaceHub/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- WISE --\\n\\npragma solidity =0.8.21;\\n\\ninterface IERC20 {\\n\\n    function totalSupply()\\n        external\\n        view\\n        returns (uint256);\\n\\n    function balanceOf(\\n        address _account\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function transferFrom(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    )\\n        external\\n        returns (bool);\\n\\n    function transfer(\\n        address _recipient,\\n        uint256 _amount\\n    )\\n        external\\n        returns (bool);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(\\n        address _spender,\\n        uint256 _amount\\n    )\\n        external\\n        returns (bool);\\n\\n    function decimals()\\n        external\\n        view\\n        returns (uint8);\\n\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 value\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    event  Deposit(\\n        address indexed dst,\\n        uint wad\\n    );\\n\\n    event  Withdrawal(\\n        address indexed src,\\n        uint wad\\n    );\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_initBaseURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_wiseLendingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralFactor\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyReserved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Deactivated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DebtRatioTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DebtRatioTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidKey\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParam\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LeverageTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotBalancerVault\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotMaster\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotProposed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ResultsInBadDebt\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseExtension\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BaseExtensionChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseUrl\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BaseUrlChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"ERC721Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"ETHReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"keyId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"wiseLendingNFT\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"FarmEntry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"keyId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"wiseLendingNFT\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"FarmExit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"FarmStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"keyId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"wiseLendingNFT\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ManualPaybackShares\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"keyId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"wiseLendingNFT\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ManualWithdrawShares\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minDepositUsdAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MinDepositChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referralAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ReferralUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RegistrationFarm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AAVE\",\"outputs\":[{\"internalType\":\"contract IAave\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AAVE_HUB\",\"outputs\":[{\"internalType\":\"contract IAaveHub\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BALANCER_VAULT\",\"outputs\":[{\"internalType\":\"contract IBalancerVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CURVE\",\"outputs\":[{\"internalType\":\"contract ICurve\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORACLE_HUB\",\"outputs\":[{\"internalType\":\"contract IWiseOracleHub\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POSITION_NFT\",\"outputs\":[{\"internalType\":\"contract IPositionNFTs\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ST_ETH\",\"outputs\":[{\"internalType\":\"contract IStETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WISE_LENDING\",\"outputs\":[{\"internalType\":\"contract IWiseLending\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WISE_SECURITY\",\"outputs\":[{\"internalType\":\"contract IWiseSecurity\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WST_ETH\",\"outputs\":[{\"internalType\":\"contract IWstETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveTokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_keyId\",\"type\":\"uint256\"}],\"name\":\"approveMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableNFTCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"availableNFTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseExtension\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowTokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMinDeposit\",\"type\":\"uint256\"}],\"name\":\"changeMinDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeRefAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doApprovals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_leverage\",\"type\":\"uint256\"}],\"name\":\"enterFarm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_leverage\",\"type\":\"uint256\"}],\"name\":\"enterFarmETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_keyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOutAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_ethBack\",\"type\":\"bool\"}],\"name\":\"exitFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"farmingKeys\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wstETHAPY\",\"type\":\"uint256\"}],\"name\":\"getApproxNetAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_leverage\",\"type\":\"uint256\"}],\"name\":\"getLeverageAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"getLiveDebtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_keyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"getMinAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_borrowAmount\",\"type\":\"uint256\"}],\"name\":\"getNewBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"getPositionBorrowUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"getTotalWeightedCollateralUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"globalAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"globalTokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_keyId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isShutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftIdLiquidator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shareAmountToPay\",\"type\":\"uint256\"}],\"name\":\"liquidatePartiallyFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"paybackAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_keyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_paybackShares\",\"type\":\"uint256\"}],\"name\":\"manuallyPaybackShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_keyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawShares\",\"type\":\"uint256\"}],\"name\":\"manuallyWithdrawShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"master\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDepositUsdAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintReserved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proposedOwner\",\"type\":\"address\"}],\"name\":\"proposeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedMaster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"_flashloanToken\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_feeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_userData\",\"type\":\"bytes\"}],\"name\":\"receiveFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reserved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseExtension\",\"type\":\"string\"}],\"name\":\"setBaseExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"shutdownFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReserved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "wstETHManager", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000084524baa1951247b3a2617a843e6ece915bb96740000000000000000000000000000000000000000000000000d2f13f7789f0000000000000000000000000000000000000000000000000000000000000000001457697365506f7765724661726d2d777374455448000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a5750462d77737445544800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e68747470733a2f2f6261636b656e642e6c69717569646e6674732e636f6d0000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}