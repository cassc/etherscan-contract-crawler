{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/CloberViewer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/CloberMarketFactory.sol\\\";\\nimport \\\"./interfaces/CloberMarketFactoryV1.sol\\\";\\nimport \\\"./interfaces/CloberOrderBook.sol\\\";\\nimport \\\"./interfaces/CloberPriceBook.sol\\\";\\nimport \\\"./interfaces/CloberOrderNFT.sol\\\";\\nimport \\\"./interfaces/CloberOrderNFTDeployer.sol\\\";\\nimport \\\"./PriceBook.sol\\\";\\n\\ncontract CloberViewer is PriceBook {\\n    struct DepthInfo {\\n        uint256 price;\\n        uint256 priceIndex;\\n        uint256 quoteAmount;\\n        uint256 baseAmount;\\n    }\\n\\n    struct OrderBookElement {\\n        uint256 price;\\n        uint256 amount;\\n    }\\n\\n    uint16 private constant _DEFAULT_EXPLORATION_INDEX_COUNT = 256;\\n\\n    CloberMarketFactory private immutable _factory;\\n    CloberMarketFactoryV1 private immutable _factoryV1;\\n    CloberOrderNFTDeployer private immutable _orderNFTDeployer;\\n    uint256 private immutable _cachedChainId;\\n    uint256 private immutable _v1PoolCount;\\n\\n    uint128 private constant VOLATILE_A = 10000000000;\\n    uint128 private constant VOLATILE_R = 1001000000000000000;\\n\\n    constructor(\\n        address factory,\\n        address factoryV1,\\n        uint256 cachedChainId,\\n        uint256 v1PoolCount\\n    ) PriceBook(VOLATILE_A, VOLATILE_R) {\\n        require(factory != address(0) || factoryV1 != address(0));\\n        _factory = CloberMarketFactory(factory);\\n        _factoryV1 = CloberMarketFactoryV1(factoryV1);\\n        _orderNFTDeployer = factory == address(0)\\n            ? CloberOrderNFTDeployer(address(0))\\n            : CloberOrderNFTDeployer(_factory.orderTokenDeployer());\\n        _cachedChainId = cachedChainId;\\n        if (factoryV1 == address(0)) v1PoolCount = 0;\\n        _v1PoolCount = v1PoolCount;\\n    }\\n\\n    function getAllMarkets() external view returns (address[] memory markets) {\\n        unchecked {\\n            uint256 length;\\n            if (address(_factory) == address(0)) {\\n                length = _factoryV1.nonce();\\n                markets = new address[](length);\\n                for (uint256 i = 0; i < length; ++i) {\\n                    markets[i] = CloberOrderNFT(_factoryV1.computeTokenAddress(i)).market();\\n                }\\n            } else {\\n                length = _factory.nonce() + _v1PoolCount;\\n\\n                markets = new address[](length);\\n                for (uint256 i = 0; i < _v1PoolCount; ++i) {\\n                    markets[i] = CloberOrderNFT(_factoryV1.computeTokenAddress(i)).market();\\n                }\\n\\n                for (uint256 i = _v1PoolCount; i < length; ++i) {\\n                    bytes32 salt = keccak256(abi.encode(_cachedChainId, i - _v1PoolCount));\\n                    markets[i] = CloberOrderNFT(_orderNFTDeployer.computeTokenAddress(salt)).market();\\n                }\\n            }\\n        }\\n    }\\n\\n    function getDepths(address market, bool isBidSide) external view returns (OrderBookElement[] memory) {\\n        return getDepths(market, isBidSide, _DEFAULT_EXPLORATION_INDEX_COUNT);\\n    }\\n\\n    function getDepths(\\n        address market,\\n        bool isBidSide,\\n        uint16 explorationIndexCount\\n    ) public view returns (OrderBookElement[] memory elements) {\\n        unchecked {\\n            uint256 fromIndex = CloberOrderBook(market).bestPriceIndex(isBidSide);\\n            uint256 maxIndex = CloberPriceBook(CloberOrderBook(market).priceBook()).maxPriceIndex();\\n            OrderBookElement[] memory _elements = new OrderBookElement[](explorationIndexCount);\\n            uint256 count = 0;\\n\\n            if (isBidSide) {\\n                uint16 toIndex = fromIndex > explorationIndexCount ? uint16(fromIndex) - explorationIndexCount : 0;\\n                for (uint16 index = uint16(fromIndex); index > toIndex; --index) {\\n                    uint256 i = fromIndex - index;\\n                    uint64 rawAmount = CloberOrderBook(market).getDepth(true, index);\\n                    if (rawAmount == 0) {\\n                        continue;\\n                    }\\n                    _elements[i].price = CloberOrderBook(market).indexToPrice(index);\\n                    _elements[i].amount = CloberOrderBook(market).rawToQuote(rawAmount);\\n                    ++count;\\n                }\\n            } else {\\n                // fromIndex + explorationIndexCount <= 2 * type(uint16).max, so it is safe from the overflow\\n                uint256 toIndex = fromIndex + explorationIndexCount > maxIndex\\n                    ? maxIndex\\n                    : fromIndex + explorationIndexCount;\\n                for (uint256 index = fromIndex; index < toIndex; ++index) {\\n                    uint256 i = index - fromIndex;\\n                    uint64 rawAmount = CloberOrderBook(market).getDepth(false, uint16(index));\\n                    if (rawAmount == 0) {\\n                        continue;\\n                    }\\n                    _elements[i].price = CloberOrderBook(market).indexToPrice(uint16(index));\\n                    _elements[i].amount = CloberOrderBook(market).rawToBase(rawAmount, uint16(index), false);\\n                    ++count;\\n                }\\n            }\\n            elements = new OrderBookElement[](count);\\n            count = 0;\\n            for (uint256 i = 0; i < _elements.length; ++i) {\\n                if (_elements[i].price != 0) {\\n                    elements[count] = _elements[i];\\n                    ++count;\\n                }\\n            }\\n        }\\n    }\\n\\n    function getDepthsByPriceIndex(\\n        address market,\\n        bool isBid,\\n        uint16 fromIndex,\\n        uint16 toIndex\\n    ) public view returns (DepthInfo[] memory depths) {\\n        depths = new DepthInfo[](toIndex - fromIndex + 1);\\n\\n        unchecked {\\n            for (uint16 index = fromIndex; index <= toIndex; ++index) {\\n                uint256 i = index - fromIndex;\\n                uint64 rawAmount = CloberOrderBook(market).getDepth(isBid, index);\\n                depths[i].price = CloberOrderBook(market).indexToPrice(index);\\n                depths[i].priceIndex = index;\\n                depths[i].quoteAmount = CloberOrderBook(market).rawToQuote(rawAmount);\\n                depths[i].baseAmount = CloberOrderBook(market).rawToBase(rawAmount, index, false);\\n            }\\n        }\\n    }\\n\\n    function getDepthsByPrice(\\n        address market,\\n        bool isBid,\\n        uint256 fromPrice,\\n        uint256 toPrice\\n    ) external view returns (DepthInfo[] memory) {\\n        uint16 fromIndex;\\n        uint16 toIndex;\\n        CloberMarketFactoryV1.MarketInfo memory marketInfo;\\n        if (address(_factoryV1) != address(0)) marketInfo = _factoryV1.getMarketInfo(market);\\n        if (marketInfo.marketType == CloberMarketFactoryV1.MarketType.NONE) {\\n            (fromIndex, ) = CloberOrderBook(market).priceToIndex(fromPrice, true);\\n            (toIndex, ) = CloberOrderBook(market).priceToIndex(toPrice, false);\\n        } else if (marketInfo.marketType == CloberMarketFactoryV1.MarketType.VOLATILE) {\\n            require((marketInfo.a == VOLATILE_A) && (marketInfo.factor == VOLATILE_R));\\n            fromIndex = _volatilePriceToIndex(fromPrice, true);\\n            toIndex = _volatilePriceToIndex(toPrice, false);\\n        } else {\\n            fromIndex = _stablePriceToIndex(marketInfo.a, marketInfo.factor, fromPrice, true);\\n            toIndex = _stablePriceToIndex(marketInfo.a, marketInfo.factor, toPrice, false);\\n        }\\n\\n        return getDepthsByPriceIndex(market, isBid, fromIndex, toIndex);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/PriceBook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -\\n// License: https://license.clober.io/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\ncontract PriceBook {\\n    uint256 private immutable _a;\\n    uint256 private immutable _r0;\\n    uint256 private immutable _r1;\\n    uint256 private immutable _r2;\\n    uint256 private immutable _r3;\\n    uint256 private immutable _r4;\\n    uint256 private immutable _r5;\\n    uint256 private immutable _r6;\\n    uint256 private immutable _r7;\\n    uint256 private immutable _r8;\\n    uint256 private immutable _r9;\\n    uint256 private immutable _r10;\\n    uint256 private immutable _r11;\\n    uint256 private immutable _r12;\\n    uint256 private immutable _r13;\\n    uint256 private immutable _r14;\\n    uint256 private immutable _r15;\\n    uint256 private immutable _r16;\\n\\n    uint16 public immutable maxPriceIndex;\\n    uint256 public immutable priceUpperBound;\\n\\n    constructor(uint128 a_, uint128 r_) {\\n        uint256 castedR = uint256(r_);\\n        _a = a_;\\n        // precision of `_r0~16` is 2^64\\n        _r0 = (castedR << 64) / 10**18;\\n        // when `r_` <= 1\\n        if ((a_ * _r0) >> 64 <= a_) {\\n            revert(\\\"INVALID_COEFFICIENTS\\\");\\n        }\\n        uint16 maxIndex_;\\n        uint256 maxPrice_ = 1 << 64;\\n\\n        uint256 r;\\n        if (_r0 < type(uint256).max / _r0) {\\n            r = (_r0 * _r0) >> 64;\\n            maxIndex_ = maxIndex_ | 0x1;\\n            maxPrice_ = r;\\n        } else {\\n            r = type(uint256).max;\\n        }\\n        _r1 = r;\\n\\n        if (_r1 < type(uint256).max / _r1) {\\n            r = (_r1 * _r1) >> 64;\\n            maxIndex_ = maxIndex_ | 0x2;\\n            maxPrice_ = r;\\n        } else {\\n            r = type(uint256).max;\\n        }\\n        _r2 = r;\\n\\n        if (_r2 < type(uint256).max / _r2) {\\n            r = (_r2 * _r2) >> 64;\\n            maxIndex_ = maxIndex_ | 0x4;\\n            maxPrice_ = r;\\n        } else {\\n            r = type(uint256).max;\\n        }\\n        _r3 = r;\\n\\n        if (_r3 < type(uint256).max / _r3) {\\n            r = (_r3 * _r3) >> 64;\\n            maxIndex_ = maxIndex_ | 0x8;\\n            maxPrice_ = r;\\n        } else {\\n            r = type(uint256).max;\\n        }\\n        _r4 = r;\\n\\n        if (_r4 < type(uint256).max / _r4) {\\n            r = (_r4 * _r4) >> 64;\\n            maxIndex_ = maxIndex_ | 0x10;\\n            maxPrice_ = r;\\n        } else {\\n            r = type(uint256).max;\\n        }\\n        _r5 = r;\\n\\n        if (_r5 < type(uint256).max / _r5) {\\n            r = (_r5 * _r5) >> 64;\\n            maxIndex_ = maxIndex_ | 0x20;\\n            maxPrice_ = r;\\n        } else {\\n            r = type(uint256).max;\\n        }\\n        _r6 = r;\\n\\n        if (_r6 < type(uint256).max / _r6) {\\n            r = (_r6 * _r6) >> 64;\\n            maxIndex_ = maxIndex_ | 0x40;\\n            maxPrice_ = r;\\n        } else {\\n            r = type(uint256).max;\\n        }\\n        _r7 = r;\\n\\n        if (_r7 < type(uint256).max / _r7) {\\n            r = (_r7 * _r7) >> 64;\\n            maxIndex_ = maxIndex_ | 0x80;\\n            maxPrice_ = r;\\n        } else {\\n            r = type(uint256).max;\\n        }\\n        _r8 = r;\\n\\n        if (_r8 < type(uint256).max / _r8) {\\n            r = (_r8 * _r8) >> 64;\\n            maxIndex_ = maxIndex_ | 0x100;\\n            maxPrice_ = r;\\n        } else {\\n            r = type(uint256).max;\\n        }\\n        _r9 = r;\\n\\n        if (_r9 < type(uint256).max / _r9) {\\n            r = (_r9 * _r9) >> 64;\\n            maxIndex_ = maxIndex_ | 0x200;\\n            maxPrice_ = r;\\n        } else {\\n            r = type(uint256).max;\\n        }\\n        _r10 = r;\\n\\n        if (_r10 < type(uint256).max / _r10) {\\n            r = (_r10 * _r10) >> 64;\\n            maxIndex_ = maxIndex_ | 0x400;\\n            maxPrice_ = r;\\n        } else {\\n            r = type(uint256).max;\\n        }\\n        _r11 = r;\\n\\n        if (_r11 < type(uint256).max / _r11) {\\n            r = (_r11 * _r11) >> 64;\\n            maxIndex_ = maxIndex_ | 0x800;\\n            maxPrice_ = r;\\n        } else {\\n            r = type(uint256).max;\\n        }\\n        _r12 = r;\\n\\n        if (_r12 < type(uint256).max / _r12) {\\n            r = (_r12 * _r12) >> 64;\\n            maxIndex_ = maxIndex_ | 0x1000;\\n            maxPrice_ = r;\\n        } else {\\n            r = type(uint256).max;\\n        }\\n        _r13 = r;\\n\\n        if (_r13 < type(uint256).max / _r13) {\\n            r = (_r13 * _r13) >> 64;\\n            maxIndex_ = maxIndex_ | 0x2000;\\n            maxPrice_ = r;\\n        } else {\\n            r = type(uint256).max;\\n        }\\n        _r14 = r;\\n\\n        if (_r14 < type(uint256).max / _r14) {\\n            r = (_r14 * _r14) >> 64;\\n            maxIndex_ = maxIndex_ | 0x4000;\\n            maxPrice_ = r;\\n        } else {\\n            r = type(uint256).max;\\n        }\\n        _r15 = r;\\n\\n        if (_r15 < type(uint256).max / _r15) {\\n            r = (_r15 * _r15) >> 64;\\n            maxIndex_ = maxIndex_ | 0x8000;\\n            maxPrice_ = r;\\n        } else {\\n            r = type(uint256).max;\\n        }\\n        _r16 = r;\\n\\n        maxPriceIndex = maxIndex_;\\n        priceUpperBound = (maxPrice_ >> 64) * a_ + (((maxPrice_ & 0xffffffffffffffff) * a_) >> 64);\\n    }\\n\\n    function _volatilePriceToIndex(uint256 price, bool roundingUp) internal view returns (uint16 index) {\\n        if (price < _a || price >= priceUpperBound) {\\n            revert(\\\"INVALID_PRICE\\\");\\n        }\\n        index = 0;\\n        uint256 _correctedPrice = _a;\\n        uint256 shiftedPrice = (price + 1) << 64;\\n\\n        unchecked {\\n            if (maxPriceIndex > 0x8000 && shiftedPrice > _r15 * _correctedPrice) {\\n                index = index | 0x8000;\\n                _correctedPrice = (_correctedPrice * _r15) >> 64;\\n            }\\n            if (maxPriceIndex > 0x4000 && shiftedPrice > _r14 * _correctedPrice) {\\n                index = index | 0x4000;\\n                _correctedPrice = (_correctedPrice * _r14) >> 64;\\n            }\\n            if (maxPriceIndex > 0x2000 && shiftedPrice > _r13 * _correctedPrice) {\\n                index = index | 0x2000;\\n                _correctedPrice = (_correctedPrice * _r13) >> 64;\\n            }\\n            if (maxPriceIndex > 0x1000 && shiftedPrice > _r12 * _correctedPrice) {\\n                index = index | 0x1000;\\n                _correctedPrice = (_correctedPrice * _r12) >> 64;\\n            }\\n            if (maxPriceIndex > 0x800 && shiftedPrice > _r11 * _correctedPrice) {\\n                index = index | 0x0800;\\n                _correctedPrice = (_correctedPrice * _r11) >> 64;\\n            }\\n            if (maxPriceIndex > 0x400 && shiftedPrice > _r10 * _correctedPrice) {\\n                index = index | 0x0400;\\n                _correctedPrice = (_correctedPrice * _r10) >> 64;\\n            }\\n            if (maxPriceIndex > 0x200 && shiftedPrice > _r9 * _correctedPrice) {\\n                index = index | 0x0200;\\n                _correctedPrice = (_correctedPrice * _r9) >> 64;\\n            }\\n            if (maxPriceIndex > 0x100 && shiftedPrice > _r8 * _correctedPrice) {\\n                index = index | 0x0100;\\n                _correctedPrice = (_correctedPrice * _r8) >> 64;\\n            }\\n            if (maxPriceIndex > 0x80 && shiftedPrice > _r7 * _correctedPrice) {\\n                index = index | 0x0080;\\n                _correctedPrice = (_correctedPrice * _r7) >> 64;\\n            }\\n            if (maxPriceIndex > 0x40 && shiftedPrice > _r6 * _correctedPrice) {\\n                index = index | 0x0040;\\n                _correctedPrice = (_correctedPrice * _r6) >> 64;\\n            }\\n            if (maxPriceIndex > 0x20 && shiftedPrice > _r5 * _correctedPrice) {\\n                index = index | 0x0020;\\n                _correctedPrice = (_correctedPrice * _r5) >> 64;\\n            }\\n            if (maxPriceIndex > 0x10 && shiftedPrice > _r4 * _correctedPrice) {\\n                index = index | 0x0010;\\n                _correctedPrice = (_correctedPrice * _r4) >> 64;\\n            }\\n            if (maxPriceIndex > 0x8 && shiftedPrice > _r3 * _correctedPrice) {\\n                index = index | 0x0008;\\n                _correctedPrice = (_correctedPrice * _r3) >> 64;\\n            }\\n            if (maxPriceIndex > 0x4 && shiftedPrice > _r2 * _correctedPrice) {\\n                index = index | 0x0004;\\n                _correctedPrice = (_correctedPrice * _r2) >> 64;\\n            }\\n            if (maxPriceIndex > 0x2 && shiftedPrice > _r1 * _correctedPrice) {\\n                index = index | 0x0002;\\n                _correctedPrice = (_correctedPrice * _r1) >> 64;\\n            }\\n            if (shiftedPrice > _r0 * _correctedPrice) {\\n                index = index | 0x0001;\\n                _correctedPrice = (_correctedPrice * _r0) >> 64;\\n            }\\n        }\\n        if (roundingUp && _correctedPrice < price) {\\n            unchecked {\\n                if (index >= maxPriceIndex) {\\n                    revert(\\\"INVALID_PRICE\\\");\\n                }\\n                index += 1;\\n            }\\n        }\\n    }\\n\\n    function _stablePriceToIndex(\\n        uint256 a,\\n        uint256 d,\\n        uint256 price,\\n        bool roundingUp\\n    ) internal pure returns (uint16 index) {\\n        if (price < a || price >= a + d * (2**16)) {\\n            revert(\\\"INVALID_PRICE\\\");\\n        }\\n        index = uint16((price - a) / d);\\n        if (roundingUp && (price - a) % d > 0) {\\n            unchecked {\\n                if (index == type(uint16).max) {\\n                    revert(\\\"INVALID_PRICE\\\");\\n                }\\n                index += 1;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/CloberMarketFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface CloberMarketFactory {\\n    /**\\n     * @notice Emitted when a new volatile market is created.\\n     * @param market The address of the new market.\\n     * @param orderToken The address of the new market's order token.\\n     * @param quoteToken The address of the new market's quote token.\\n     * @param baseToken The address of the new market's base token.\\n     * @param quoteUnit The amount that one raw amount represents in quote tokens.\\n     * @param nonce The nonce for this market.\\n     * @param makerFee The maker fee.\\n     * Paid to the maker when negative, paid by the maker when positive.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param takerFee The taker fee.\\n     * Paid by the taker.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param a The scale factor of the price points.\\n     * @param r The common ratio between price points.\\n     */\\n    event CreateVolatileMarket(\\n        address indexed market,\\n        address orderToken,\\n        address quoteToken,\\n        address baseToken,\\n        uint256 quoteUnit,\\n        uint256 nonce,\\n        int24 makerFee,\\n        uint24 takerFee,\\n        uint128 a,\\n        uint128 r\\n    );\\n\\n    /**\\n     * @notice Emitted when a new stable market is created.\\n     * @param market The address of the new market.\\n     * @param orderToken The address of the new market's order token.\\n     * @param quoteToken The address of the new market's quote token.\\n     * @param baseToken The address of the new market's base token.\\n     * @param quoteUnit The amount that one raw amount represents in quote tokens.\\n     * @param nonce The nonce for this market.\\n     * @param makerFee The maker fee.\\n     * Paid to the maker when negative, paid by the maker when positive.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param takerFee The taker fee.\\n     * Paid by the taker.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param a The starting price point.\\n     * @param d The common difference between price points.\\n     */\\n    event CreateStableMarket(\\n        address indexed market,\\n        address orderToken,\\n        address quoteToken,\\n        address baseToken,\\n        uint256 quoteUnit,\\n        uint256 nonce,\\n        int24 makerFee,\\n        uint24 takerFee,\\n        uint128 a,\\n        uint128 d\\n    );\\n\\n    /**\\n     * @notice Emitted when the address of the owner has changed.\\n     * @param previousOwner The address of the previous owner.\\n     * @param newOwner The address of the new owner.\\n     */\\n    event ChangeOwner(address previousOwner, address newOwner);\\n\\n    /**\\n     * @notice Emitted when the DAO Treasury address has changed.\\n     * @param previousTreasury The address of the previous DAO Treasury.\\n     * @param newTreasury The address of the new DAO Treasury.\\n     */\\n    event ChangeDaoTreasury(address previousTreasury, address newTreasury);\\n\\n    /**\\n     * @notice Emitted when the host address has changed.\\n     * @param market The address of the market that had a change of hosts.\\n     * @param previousHost The address of the previous host.\\n     * @param newHost The address of a new host.\\n     */\\n    event ChangeHost(address indexed market, address previousHost, address newHost);\\n\\n    /**\\n     * @notice Returns the address of the deployed GeometricPriceBook.\\n     * @return The address of the GeometricPriceBook.\\n     */\\n    function deployedGeometricPriceBook(uint128 a, uint128 r) external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the deployed GeometricPriceBook.\\n     * @return The address of the GeometricPriceBook.\\n     */\\n    function deployedArithmeticPriceBook(uint128 a, uint128 d) external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the MarketDeployer.\\n     * @return The address of the MarketDeployer.\\n     */\\n    function marketDeployer() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the priceBookDeployer.\\n     * @return The address of the priceBookDeployer.\\n     */\\n    function priceBookDeployer() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the orderTokenDeployer.\\n     * @return The address of the orderTokenDeployer.\\n     */\\n    function orderTokenDeployer() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the OrderCanceler.\\n     * @return The address of the OrderCanceler.\\n     */\\n    function canceler() external view returns (address);\\n\\n    /**\\n     * @notice Returns whether the specified token address has been registered as a quote token.\\n     * @param token The address of the token to check.\\n     * @return bool Whether the token is registered as a quote token.\\n     */\\n    function registeredQuoteTokens(address token) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the address of the factory owner\\n     * @return The address of the factory owner\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the factory owner candidate\\n     * @return The address of the factory owner candidate\\n     */\\n    function futureOwner() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the DAO Treasury\\n     * @return The address of the DAO Treasury\\n     */\\n    function daoTreasury() external view returns (address);\\n\\n    /**\\n     * @notice Returns the current nonce\\n     * @return The current nonce\\n     */\\n    function nonce() external view returns (uint256);\\n\\n    /**\\n     * @notice Creates a new market with a VolatilePriceBook.\\n     * @param host The address of the new market's host.\\n     * @param quoteToken The address of the new market's quote token.\\n     * @param baseToken The address of the new market's base token.\\n     * @param quoteUnit The amount that one raw amount represents in quote tokens.\\n     * @param makerFee The maker fee.\\n     * Paid to the maker when negative, paid by the maker when positive.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param takerFee The taker fee.\\n     * Paid by the taker.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param a The scale factor of the price points.\\n     * @param r The common ratio between price points.\\n     * @return The address of the created market.\\n     */\\n    function createVolatileMarket(\\n        address host,\\n        address quoteToken,\\n        address baseToken,\\n        uint96 quoteUnit,\\n        int24 makerFee,\\n        uint24 takerFee,\\n        uint128 a,\\n        uint128 r\\n    ) external returns (address);\\n\\n    /**\\n     * @notice Creates a new market with a StablePriceBook\\n     * @param host The address of the new market's host\\n     * @param quoteToken The address of the new market's quote token\\n     * @param baseToken The address of the new market's base token\\n     * @param quoteUnit The amount that one raw amount represents in quote tokens\\n     * @param makerFee The maker fee.\\n     * Paid to the maker when negative, paid by the maker when positive.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param takerFee The taker fee.\\n     * Paid by the taker.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param a The starting price point.\\n     * @param d The common difference between price points.\\n     * @return The address of the created market.\\n     */\\n    function createStableMarket(\\n        address host,\\n        address quoteToken,\\n        address baseToken,\\n        uint96 quoteUnit,\\n        int24 makerFee,\\n        uint24 takerFee,\\n        uint128 a,\\n        uint128 d\\n    ) external returns (address);\\n\\n    /**\\n     * @notice Change the DAO Treasury address.\\n     * @dev Only the factory owner can call this function.\\n     * @param treasury The new address of the DAO Treasury.\\n     */\\n    function changeDaoTreasury(address treasury) external;\\n\\n    /**\\n     * @notice Sets the new owner address for this contract.\\n     * @dev Only the factory owner can call this function.\\n     * @param newOwner The new owner address for this contract.\\n     */\\n    function prepareChangeOwner(address newOwner) external;\\n\\n    /**\\n     * @notice Changes the owner of this contract to the address set by `prepareChangeOwner`.\\n     * @dev Only the future owner can call this function.\\n     */\\n    function executeChangeOwner() external;\\n\\n    /**\\n     * @notice Returns the host address of the given market.\\n     * @param market The address of the target market.\\n     * @return The host address of the market.\\n     */\\n    function getMarketHost(address market) external view returns (address);\\n\\n    /**\\n     * @notice Prepares to set a new host address for the given market address.\\n     * @dev Only the market host can call this function.\\n     * @param market The market address for which the host will be changed.\\n     * @param newHost The new host address for the given market.\\n     */\\n    function prepareHandOverHost(address market, address newHost) external;\\n\\n    /**\\n     * @notice Changes the host address of the given market to the address set by `prepareHandOverHost`.\\n     * @dev Only the future market host can call this function.\\n     * @param market The market address for which the host will be changed.\\n     */\\n    function executeHandOverHost(address market) external;\\n\\n    enum MarketType {\\n        NONE,\\n        VOLATILE,\\n        STABLE\\n    }\\n\\n    /**\\n     * @notice MarketInfo struct that contains information about a market.\\n     * @param host The address of the market host.\\n     * @param marketType The market type, either VOLATILE or STABLE.\\n     * @param a The starting price point.\\n     * @param factor The either the common ratio or common difference between price points.\\n     * @param futureHost The address set by `prepareHandOverHost` to change the market host.\\n     */\\n    struct MarketInfo {\\n        address host;\\n        MarketType marketType;\\n        uint128 a;\\n        uint128 factor;\\n        address futureHost;\\n    }\\n\\n    /**\\n     * @notice Returns key information about the market.\\n     * @param market The address of the market.\\n     * @return marketInfo The MarketInfo structure of the given market.\\n     */\\n    function getMarketInfo(address market) external view returns (MarketInfo memory marketInfo);\\n\\n    /**\\n     * @notice Allows the specified token to be used as the quote token.\\n     * @dev Only the factory owner can call this function.\\n     * @param token The address of the token to register.\\n     */\\n    function registerQuoteToken(address token) external;\\n\\n    /**\\n     * @notice Revokes the token's right to be used as a quote token.\\n     * @dev Only the factory owner can call this function.\\n     * @param token The address of the token to unregister.\\n     */\\n    function unregisterQuoteToken(address token) external;\\n\\n    /**\\n     * @notice Returns the order token name.\\n     * @param quoteToken The address of the market's quote token.\\n     * @param baseToken The address of the market's base token.\\n     * @param marketNonce The market nonce.\\n     * @return The order token name.\\n     */\\n    function formatOrderTokenName(\\n        address quoteToken,\\n        address baseToken,\\n        uint256 marketNonce\\n    ) external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the order token symbol.\\n     * @param quoteToken The address of a new market's quote token.\\n     * @param baseToken The address of a new market's base token.\\n     * @param marketNonce The market nonce.\\n     * @return The order token symbol.\\n     */\\n    function formatOrderTokenSymbol(\\n        address quoteToken,\\n        address baseToken,\\n        uint256 marketNonce\\n    ) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/CloberMarketFactoryV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface CloberMarketFactoryV1 {\\n    /**\\n     * @notice Emitted when a new volatile market is created.\\n     * @param market The address of the new market.\\n     * @param orderToken The address of the new market's order token.\\n     * @param quoteToken The address of the new market's quote token.\\n     * @param baseToken The address of the new market's base token.\\n     * @param quoteUnit The amount that one raw amount represents in quote tokens.\\n     * @param nonce The nonce for this market.\\n     * @param makerFee The maker fee.\\n     * Paid to the maker when negative, paid by the maker when positive.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param takerFee The taker fee.\\n     * Paid by the taker.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param a The scale factor of the price points.\\n     * @param r The common ratio between price points.\\n     */\\n    event CreateVolatileMarket(\\n        address indexed market,\\n        address orderToken,\\n        address quoteToken,\\n        address baseToken,\\n        uint256 quoteUnit,\\n        uint256 nonce,\\n        int24 makerFee,\\n        uint24 takerFee,\\n        uint128 a,\\n        uint128 r\\n    );\\n\\n    /**\\n     * @notice Emitted when a new stable market is created.\\n     * @param market The address of the new market.\\n     * @param orderToken The address of the new market's order token.\\n     * @param quoteToken The address of the new market's quote token.\\n     * @param baseToken The address of the new market's base token.\\n     * @param quoteUnit The amount that one raw amount represents in quote tokens.\\n     * @param nonce The nonce for this market.\\n     * @param makerFee The maker fee.\\n     * Paid to the maker when negative, paid by the maker when positive.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param takerFee The taker fee.\\n     * Paid by the taker.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param a The starting price point.\\n     * @param d The common difference between price points.\\n     */\\n    event CreateStableMarket(\\n        address indexed market,\\n        address orderToken,\\n        address quoteToken,\\n        address baseToken,\\n        uint256 quoteUnit,\\n        uint256 nonce,\\n        int24 makerFee,\\n        uint24 takerFee,\\n        uint128 a,\\n        uint128 d\\n    );\\n\\n    /**\\n     * @notice Emitted when the address of the owner has changed.\\n     * @param previousOwner The address of the previous owner.\\n     * @param newOwner The address of the new owner.\\n     */\\n    event ChangeOwner(address previousOwner, address newOwner);\\n\\n    /**\\n     * @notice Emitted when the DAO Treasury address has changed.\\n     * @param previousTreasury The address of the previous DAO Treasury.\\n     * @param newTreasury The address of the new DAO Treasury.\\n     */\\n    event ChangeDaoTreasury(address previousTreasury, address newTreasury);\\n\\n    /**\\n     * @notice Emitted when the host address has changed.\\n     * @param market The address of the market that had a change of hosts.\\n     * @param previousHost The address of the previous host.\\n     * @param newHost The address of a new host.\\n     */\\n    event ChangeHost(address indexed market, address previousHost, address newHost);\\n\\n    /**\\n     * @notice Returns the address of the VolatileMarketDeployer.\\n     * @return The address of the VolatileMarketDeployer.\\n     */\\n    function volatileMarketDeployer() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the StableMarketDeployer.\\n     * @return The address of the StableMarketDeployer.\\n     */\\n    function stableMarketDeployer() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the OrderCanceler.\\n     * @return The address of the OrderCanceler.\\n     */\\n    function canceler() external view returns (address);\\n\\n    /**\\n     * @notice Returns whether the specified token address has been registered as a quote token.\\n     * @param token The address of the token to check.\\n     * @return bool Whether the token is registered as a quote token.\\n     */\\n    function registeredQuoteTokens(address token) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the address of the factory owner\\n     * @return The address of the factory owner\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the factory owner candidate\\n     * @return The address of the factory owner candidate\\n     */\\n    function futureOwner() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the DAO Treasury\\n     * @return The address of the DAO Treasury\\n     */\\n    function daoTreasury() external view returns (address);\\n\\n    /**\\n     * @notice Returns the current nonce\\n     * @return The current nonce\\n     */\\n    function nonce() external view returns (uint256);\\n\\n    /**\\n     * @notice Creates a new market with a VolatilePriceBook.\\n     * @param host The address of the new market's host.\\n     * @param quoteToken The address of the new market's quote token.\\n     * @param baseToken The address of the new market's base token.\\n     * @param quoteUnit The amount that one raw amount represents in quote tokens.\\n     * @param makerFee The maker fee.\\n     * Paid to the maker when negative, paid by the maker when positive.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param takerFee The taker fee.\\n     * Paid by the taker.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param a The scale factor of the price points.\\n     * @param r The common ratio between price points.\\n     * @return The address of the created market.\\n     */\\n    function createVolatileMarket(\\n        address host,\\n        address quoteToken,\\n        address baseToken,\\n        uint96 quoteUnit,\\n        int24 makerFee,\\n        uint24 takerFee,\\n        uint128 a,\\n        uint128 r\\n    ) external returns (address);\\n\\n    /**\\n     * @notice Creates a new market with a StablePriceBook\\n     * @param host The address of the new market's host\\n     * @param quoteToken The address of the new market's quote token\\n     * @param baseToken The address of the new market's base token\\n     * @param quoteUnit The amount that one raw amount represents in quote tokens\\n     * @param makerFee The maker fee.\\n     * Paid to the maker when negative, paid by the maker when positive.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param takerFee The taker fee.\\n     * Paid by the taker.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param a The starting price point.\\n     * @param d The common difference between price points.\\n     * @return The address of the created market.\\n     */\\n    function createStableMarket(\\n        address host,\\n        address quoteToken,\\n        address baseToken,\\n        uint96 quoteUnit,\\n        int24 makerFee,\\n        uint24 takerFee,\\n        uint128 a,\\n        uint128 d\\n    ) external returns (address);\\n\\n    /**\\n     * @notice Change the DAO Treasury address.\\n     * @dev Only the factory owner can call this function.\\n     * @param treasury The new address of the DAO Treasury.\\n     */\\n    function changeDaoTreasury(address treasury) external;\\n\\n    /**\\n     * @notice Sets the new owner address for this contract.\\n     * @dev Only the factory owner can call this function.\\n     * @param newOwner The new owner address for this contract.\\n     */\\n    function prepareChangeOwner(address newOwner) external;\\n\\n    /**\\n     * @notice Changes the owner of this contract to the address set by `prepareChangeOwner`.\\n     * @dev Only the future owner can call this function.\\n     */\\n    function executeChangeOwner() external;\\n\\n    /**\\n     * @notice Returns the host address of the given market.\\n     * @param market The address of the target market.\\n     * @return The host address of the market.\\n     */\\n    function getMarketHost(address market) external view returns (address);\\n\\n    /**\\n     * @notice Prepares to set a new host address for the given market address.\\n     * @dev Only the market host can call this function.\\n     * @param market The market address for which the host will be changed.\\n     * @param newHost The new host address for the given market.\\n     */\\n    function prepareHandOverHost(address market, address newHost) external;\\n\\n    /**\\n     * @notice Changes the host address of the given market to the address set by `prepareHandOverHost`.\\n     * @dev Only the future market host can call this function.\\n     * @param market The market address for which the host will be changed.\\n     */\\n    function executeHandOverHost(address market) external;\\n\\n    /**\\n     * @notice Computes the OrderNFT contract address.\\n     * @param marketNonce The nonce to compute the OrderNFT contract address via CREATE2.\\n     */\\n    function computeTokenAddress(uint256 marketNonce) external view returns (address);\\n\\n    enum MarketType {\\n        NONE,\\n        VOLATILE,\\n        STABLE\\n    }\\n\\n    /**\\n     * @notice MarketInfo struct that contains information about a market.\\n     * @param host The address of the market host.\\n     * @param marketType The market type, either VOLATILE or STABLE.\\n     * @param a The starting price point.\\n     * @param factor The either the common ratio or common difference between price points.\\n     * @param futureHost The address set by `prepareHandOverHost` to change the market host.\\n     */\\n    struct MarketInfo {\\n        address host;\\n        MarketType marketType;\\n        uint128 a;\\n        uint128 factor;\\n        address futureHost;\\n    }\\n\\n    /**\\n     * @notice Returns key information about the market.\\n     * @param market The address of the market.\\n     * @return marketInfo The MarketInfo structure of the given market.\\n     */\\n    function getMarketInfo(address market) external view returns (MarketInfo memory marketInfo);\\n\\n    /**\\n     * @notice Allows the specified token to be used as the quote token.\\n     * @dev Only the factory owner can call this function.\\n     * @param token The address of the token to register.\\n     */\\n    function registerQuoteToken(address token) external;\\n\\n    /**\\n     * @notice Revokes the token's right to be used as a quote token.\\n     * @dev Only the factory owner can call this function.\\n     * @param token The address of the token to unregister.\\n     */\\n    function unregisterQuoteToken(address token) external;\\n\\n    /**\\n     * @notice Returns the order token name.\\n     * @param quoteToken The address of the market's quote token.\\n     * @param baseToken The address of the market's base token.\\n     * @param marketNonce The market nonce.\\n     * @return The order token name.\\n     */\\n    function formatOrderTokenName(\\n        address quoteToken,\\n        address baseToken,\\n        uint256 marketNonce\\n    ) external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the order token symbol.\\n     * @param quoteToken The address of a new market's quote token.\\n     * @param baseToken The address of a new market's base token.\\n     * @param marketNonce The market nonce.\\n     * @return The order token symbol.\\n     */\\n    function formatOrderTokenSymbol(\\n        address quoteToken,\\n        address baseToken,\\n        uint256 marketNonce\\n    ) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/CloberOrderBook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./CloberOrderKey.sol\\\";\\n\\ninterface CloberOrderBook {\\n    /**\\n     * @notice Emitted when an order is created.\\n     * @param sender The address who sent the tokens to make the order.\\n     * @param user The address with the rights to claim the proceeds of the order.\\n     * @param rawAmount The ordered raw amount.\\n     * @param orderIndex The order index.\\n     * @param priceIndex The price book index.\\n     * @param options LSB: 0 - Ask, 1 - Bid.\\n     */\\n    event MakeOrder(\\n        address indexed sender,\\n        address indexed user,\\n        uint64 rawAmount,\\n        uint32 claimBounty,\\n        uint256 orderIndex,\\n        uint16 priceIndex,\\n        uint8 options\\n    );\\n\\n    /**\\n     * @notice Emitted when an order takes from the order book.\\n     * @param sender The address who sent the tokens to take the order.\\n     * @param user The recipient address of the traded token.\\n     * @param priceIndex The price book index.\\n     * @param rawAmount The ordered raw amount.\\n     * @param options MSB: 0 - Limit, 1 - Market / LSB: 0 - Ask, 1 - Bid.\\n     */\\n    event TakeOrder(address indexed sender, address indexed user, uint16 priceIndex, uint64 rawAmount, uint8 options);\\n\\n    /**\\n     * @notice Emitted when an order is canceled.\\n     * @param user The owner of the order.\\n     * @param rawAmount The raw amount remaining that was canceled.\\n     * @param orderIndex The order index.\\n     * @param priceIndex The price book index.\\n     * @param isBid The flag indicating whether it's a bid order or an ask order.\\n     */\\n    event CancelOrder(address indexed user, uint64 rawAmount, uint256 orderIndex, uint16 priceIndex, bool isBid);\\n\\n    /**\\n     * @notice Emitted when the proceeds of an order is claimed.\\n     * @param claimer The address that initiated the claim.\\n     * @param user The owner of the order.\\n     * @param rawAmount The ordered raw amount.\\n     * @param bountyAmount The size of the claim bounty.\\n     * @param orderIndex The order index.\\n     * @param priceIndex The price book index.\\n     * @param isBase The flag indicating whether the user receives the base token or the quote token.\\n     */\\n    event ClaimOrder(\\n        address indexed claimer,\\n        address indexed user,\\n        uint64 rawAmount,\\n        uint256 bountyAmount,\\n        uint256 orderIndex,\\n        uint16 priceIndex,\\n        bool isBase\\n    );\\n\\n    /**\\n     * @notice Emitted when a flash-loan is taken.\\n     * @param caller The caller address of the flash-loan.\\n     * @param borrower The address of the flash loan token receiver.\\n     * @param quoteAmount The amount of quote tokens the user has borrowed.\\n     * @param baseAmount The amount of base tokens the user has borrowed.\\n     * @param earnedQuote The amount of quote tokens the protocol earned in quote tokens.\\n     * @param earnedBase The amount of base tokens the protocol earned in base tokens.\\n     */\\n    event Flash(\\n        address indexed caller,\\n        address indexed borrower,\\n        uint256 quoteAmount,\\n        uint256 baseAmount,\\n        uint256 earnedQuote,\\n        uint256 earnedBase\\n    );\\n\\n    /**\\n     * @notice A struct that represents an order.\\n     * @param amount The raw amount not filled yet. In case of a stale order, the amount not claimed yet.\\n     * @param claimBounty The bounty amount in gwei that can be collected by the party that fully claims the order.\\n     * @param owner The address of the order owner.\\n     */\\n    struct Order {\\n        uint64 amount;\\n        uint32 claimBounty;\\n        address owner;\\n    }\\n\\n    /**\\n     * @notice A struct that represents a block trade log.\\n     * @param blockTime The timestamp of the block.\\n     * @param askVolume The volume taken on the ask side.\\n     * @param bidVolume The volume taken on the bid side.\\n     * @param open The price book index on the open.\\n     * @param high The highest price book index in the block.\\n     * @param low The lowest price book index in the block.\\n     * @param close The price book index on the close.\\n     */\\n    struct BlockTradeLog {\\n        uint64 blockTime;\\n        uint64 askVolume;\\n        uint64 bidVolume;\\n        uint16 open;\\n        uint16 high;\\n        uint16 low;\\n        uint16 close;\\n    }\\n\\n    /**\\n     * @notice Take orders better or equal to the given priceIndex and make an order with the remaining tokens.\\n     * @dev `msg.value` will be used as the claimBounty.\\n     * @param user The taker/maker address.\\n     * @param priceIndex The price book index.\\n     * @param rawAmount The raw quote amount to trade, utilized by bids.\\n     * @param baseAmount The base token amount to trade, utilized by asks.\\n     * @param options LSB: 0 - Ask, 1 - Bid. Second bit: 1 - Post only.\\n     * @param data Custom callback data\\n     * @return The order index. If an order is not made `type(uint256).max` is returned instead.\\n     */\\n    function limitOrder(\\n        address user,\\n        uint16 priceIndex,\\n        uint64 rawAmount,\\n        uint256 baseAmount,\\n        uint8 options,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @notice Returns the expected input amount and output amount.\\n     * @param limitPriceIndex The price index to take until.\\n     * @param rawAmount The raw amount to trade.\\n     * Bid & expendInput => Used as input amount.\\n     * Bid & !expendInput => Not used.\\n     * Ask & expendInput => Not used.\\n     * Ask & !expendInput => Used as output amount.\\n     * @param baseAmount The base token amount to trade.\\n     * Bid & expendInput => Not used.\\n     * Bid & !expendInput => Used as output amount.\\n     * Ask & expendInput => Used as input amount.\\n     * Ask & !expendInput => Not used.\\n     * @param options LSB: 0 - Ask, 1 - Bid. Second bit: 1 - expend input.\\n     */\\n    function getExpectedAmount(\\n        uint16 limitPriceIndex,\\n        uint64 rawAmount,\\n        uint256 baseAmount,\\n        uint8 options\\n    ) external view returns (uint256, uint256);\\n\\n    /**\\n     * @notice Take opens orders until certain conditions are met.\\n     * @param user The taker address.\\n     * @param limitPriceIndex The price index to take until.\\n     * @param rawAmount The raw amount to trade.\\n     * This value is used as the maximum input amount by bids and minimum output amount by asks.\\n     * @param baseAmount The base token amount to trade.\\n     * This value is used as the maximum input amount by asks and minimum output amount by bids.\\n     * @param options LSB: 0 - Ask, 1 - Bid. Second bit: 1 - expend input.\\n     * @param data Custom callback data.\\n     */\\n    function marketOrder(\\n        address user,\\n        uint16 limitPriceIndex,\\n        uint64 rawAmount,\\n        uint256 baseAmount,\\n        uint8 options,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice Cancel orders.\\n     * @dev The length of orderKeys must be controlled by the caller to avoid block gas limit exceeds.\\n     * @param receiver The address to receive canceled tokens.\\n     * @param orderKeys The order keys of the orders to cancel.\\n     */\\n    function cancel(address receiver, OrderKey[] calldata orderKeys) external;\\n\\n    /**\\n     * @notice Claim the proceeds of orders.\\n     * @dev The length of orderKeys must be controlled by the caller to avoid block gas limit exceeds.\\n     * @param claimer The address to receive the claim bounties.\\n     * @param orderKeys The order keys of the orders to claim.\\n     */\\n    function claim(address claimer, OrderKey[] calldata orderKeys) external;\\n\\n    /**\\n     * @notice Get the claimable proceeds of an order.\\n     * @param orderKey The order key of the order.\\n     * @return claimableRawAmount The claimable raw amount.\\n     * @return claimableAmount The claimable amount after fees.\\n     * @return feeAmount The maker fee to be paid on claim.\\n     * @return rebateAmount The rebate to be received on claim.\\n     */\\n    function getClaimable(OrderKey calldata orderKey)\\n        external\\n        view\\n        returns (\\n            uint64 claimableRawAmount,\\n            uint256 claimableAmount,\\n            uint256 feeAmount,\\n            uint256 rebateAmount\\n        );\\n\\n    /**\\n     * @notice Flash loan the tokens in the OrderBook.\\n     * @param borrower The address to receive the loan.\\n     * @param quoteAmount The quote token amount to borrow.\\n     * @param baseAmount The base token amount to borrow.\\n     * @param data The user's custom callback data.\\n     */\\n    function flash(\\n        address borrower,\\n        uint256 quoteAmount,\\n        uint256 baseAmount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice Returns the quote unit amount.\\n     * @return The amount that one raw amount represent in quote tokens.\\n     */\\n    function quoteUnit() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the maker fee.\\n     * Paid to the maker when negative, paid by the maker when positive.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @return The maker fee. 100 = 1bp.\\n     */\\n    function makerFee() external view returns (int24);\\n\\n    /**\\n     * @notice Returns the take fee\\n     * Paid by the taker.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @return The taker fee. 100 = 1bps.\\n     */\\n    function takerFee() external view returns (uint24);\\n\\n    /**\\n     * @notice Returns the address of the order NFT contract.\\n     * @return The address of the order NFT contract.\\n     */\\n    function orderToken() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the quote token.\\n     * @return The address of the quote token.\\n     */\\n    function quoteToken() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the base token.\\n     * @return The address of the base token.\\n     */\\n    function baseToken() external view returns (address);\\n\\n    /**\\n     * @notice Returns the current total open amount at the given price.\\n     * @param isBid The flag to choose which side to check the depth for.\\n     * @param priceIndex The price book index.\\n     * @return The total open amount.\\n     */\\n    function getDepth(bool isBid, uint16 priceIndex) external view returns (uint64);\\n\\n    /**\\n     * @notice Returns the fee balance that has not been collected yet.\\n     * @return quote The current fee balance for the quote token.\\n     * @return base The current fee balance for the base token.\\n     */\\n    function getFeeBalance() external view returns (uint128 quote, uint128 base);\\n\\n    /**\\n     * @notice Returns the amount of tokens that can be collected by the host.\\n     * @param token The address of the token to be collected.\\n     * @return The amount of tokens that can be collected by the host.\\n     */\\n    function uncollectedHostFees(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the amount of tokens that can be collected by the dao treasury.\\n     * @param token The address of the token to be collected.\\n     * @return The amount of tokens that can be collected by the dao treasury.\\n     */\\n    function uncollectedProtocolFees(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns whether the order book is empty or not.\\n     * @param isBid The flag to choose which side to check the emptiness of.\\n     * @return Whether the order book is empty or not on that side.\\n     */\\n    function isEmpty(bool isBid) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the order information.\\n     * @param orderKey The order key of the order.\\n     * @return The order struct of the given order key.\\n     */\\n    function getOrder(OrderKey calldata orderKey) external view returns (Order memory);\\n\\n    /**\\n     * @notice Returns the lowest ask price index or the highest bid price index.\\n     * @param isBid Returns the lowest ask price if false, highest bid price if true.\\n     * @return The current price index. If the order book is empty, it will revert.\\n     */\\n    function bestPriceIndex(bool isBid) external view returns (uint16);\\n\\n    /**\\n     * @notice Returns the current block trade log index.\\n     * @return The current block trade log index.\\n     */\\n    function blockTradeLogIndex() external view returns (uint16);\\n\\n    /**\\n     * @notice Returns the block trade log for a certain index.\\n     * @param index The block trade log index used to query the block trade log.\\n     * @return The queried block trade log.\\n     */\\n    function blockTradeLogs(uint16 index) external view returns (BlockTradeLog memory);\\n\\n    /**\\n     * @notice Returns the address of the price book.\\n     * @return The address of the price book.\\n     */\\n    function priceBook() external view returns (address);\\n\\n    /**\\n     * @notice Converts a raw amount to its corresponding base amount using a given price index.\\n     * @param rawAmount The raw amount to be converted.\\n     * @param priceIndex The index of the price to be used for the conversion.\\n     * @param roundingUp Specifies whether the result should be rounded up or down.\\n     * @return The converted base amount.\\n     */\\n    function rawToBase(\\n        uint64 rawAmount,\\n        uint16 priceIndex,\\n        bool roundingUp\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Converts a raw amount to its corresponding quote amount.\\n     * @param rawAmount The raw amount to be converted.\\n     * @return The converted quote amount.\\n     */\\n    function rawToQuote(uint64 rawAmount) external view returns (uint256);\\n\\n    /**\\n     * @notice Converts a base amount to its corresponding raw amount using a given price index.\\n     * @param baseAmount The base amount to be converted.\\n     * @param priceIndex The index of the price to be used for the conversion.\\n     * @param roundingUp Specifies whether the result should be rounded up or down.\\n     * @return The converted raw amount.\\n     */\\n    function baseToRaw(\\n        uint256 baseAmount,\\n        uint16 priceIndex,\\n        bool roundingUp\\n    ) external view returns (uint64);\\n\\n    /**\\n     * @notice Converts a quote amount to its corresponding raw amount.\\n     * @param quoteAmount The quote amount to be converted.\\n     * @param roundingUp Specifies whether the result should be rounded up or down.\\n     * @return The converted raw amount.\\n     */\\n    function quoteToRaw(uint256 quoteAmount, bool roundingUp) external view returns (uint64);\\n\\n    /**\\n     * @notice Collects fees for either the protocol or host.\\n     * @param token The token address to collect. It should be the quote token or the base token.\\n     * @param destination The destination address to transfer fees.\\n     * It should be the dao treasury address or the host address.\\n     */\\n    function collectFees(address token, address destination) external;\\n\\n    /**\\n     * @notice Change the owner of the order.\\n     * @dev Only the OrderToken contract can call this function.\\n     * @param orderKey The order key of the order.\\n     * @param newOwner The new owner address.\\n     */\\n    function changeOrderOwner(OrderKey calldata orderKey, address newOwner) external;\\n\\n    /**\\n     * @notice Converts the price index into the actual price.\\n     * @param priceIndex The price book index.\\n     * @return price The actual price.\\n     */\\n    function indexToPrice(uint16 priceIndex) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the price book index closest to the provided price.\\n     * @param price Provided price.\\n     * @param roundingUp Determines whether to round up or down.\\n     * @return index The price book index.\\n     * @return correctedPrice The actual price for the price book index.\\n     */\\n    function priceToIndex(uint256 price, bool roundingUp) external view returns (uint16 index, uint256 correctedPrice);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/CloberOrderKey.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice A struct that represents a unique key for an order.\\n * @param isBid The flag indicating whether it's a bid order or an ask order.\\n * @param priceIndex The price book index.\\n * @param orderIndex The order index.\\n */\\nstruct OrderKey {\\n    bool isBid;\\n    uint16 priceIndex;\\n    uint256 orderIndex;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/CloberOrderNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\nimport \\\"./CloberOrderKey.sol\\\";\\n\\ninterface CloberOrderNFT is IERC721, IERC721Metadata {\\n    /**\\n     * @notice Returns the base URI for the metadata of this NFT collection.\\n     * @return The base URI for the metadata of this NFT collection.\\n     */\\n    function baseURI() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the contract URI for the metadata of this NFT collection.\\n     * @return The contract URI for the metadata of this NFT collection.\\n     */\\n    function contractURI() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the address of the market contract that manages this token.\\n     * @return The address of the market contract that manages this token.\\n     */\\n    function market() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of contract owner.\\n     * @return The address of the contract owner.\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @notice Called when a new token is minted.\\n     * @param to The receiver address of the minted token.\\n     * @param tokenId The id of the token minted.\\n     */\\n    function onMint(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @notice Called when a token is burned.\\n     * @param tokenId The id of the token burned.\\n     */\\n    function onBurn(uint256 tokenId) external;\\n\\n    /**\\n     * @notice Changes the base URI for the metadata of this NFT collection.\\n     * @param newBaseURI The new base URI for the metadata of this NFT collection.\\n     */\\n    function changeBaseURI(string memory newBaseURI) external;\\n\\n    /**\\n     * @notice Changes the contract URI for the metadata of this NFT collection.\\n     * @param newContractURI The new contract URI for the metadata of this NFT collection.\\n     */\\n    function changeContractURI(string memory newContractURI) external;\\n\\n    /**\\n     * @notice Decodes a token id into an order key.\\n     * @param id The id to decode.\\n     * @return The order key corresponding to the given id.\\n     */\\n    function decodeId(uint256 id) external pure returns (OrderKey memory);\\n\\n    /**\\n     * @notice Encodes an order key to a token id.\\n     * @param orderKey The order key to encode.\\n     * @return The id corresponding to the given order key.\\n     */\\n    function encodeId(OrderKey memory orderKey) external pure returns (uint256);\\n\\n    /**\\n     * @notice Cancels orders with token ids.\\n     * @dev Only the OrderCanceler can call this function.\\n     * @param from The address of the owner of the tokens.\\n     * @param tokenIds The ids of the tokens to cancel.\\n     * @param receiver The address to send the underlying assets to.\\n     */\\n    function cancel(\\n        address from,\\n        uint256[] calldata tokenIds,\\n        address receiver\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/CloberOrderNFTDeployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface CloberOrderNFTDeployer {\\n    /**\\n     * @notice Deploys the OrderNFT contract.\\n     * @param salt The salt to compute the OrderNFT contract address via CREATE2.\\n     */\\n    function deploy(bytes32 salt) external returns (address);\\n\\n    /**\\n     * @notice Computes the OrderNFT contract address.\\n     * @param salt The salt to compute the OrderNFT contract address via CREATE2.\\n     */\\n    function computeTokenAddress(bytes32 salt) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/CloberPriceBook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface CloberPriceBook {\\n    /**\\n     * @notice Returns the biggest price book index supported.\\n     * @return The biggest price book index supported.\\n     */\\n    function maxPriceIndex() external view returns (uint16);\\n\\n    /**\\n     * @notice Returns the upper bound of prices supported.\\n     * @dev The price upper bound can be greater than `indexToPrice(maxPriceIndex())`.\\n     * @return The the upper bound of prices supported.\\n     */\\n    function priceUpperBound() external view returns (uint256);\\n\\n    /**\\n     * @notice Converts the price index into the actual price.\\n     * @param priceIndex The price book index.\\n     * @return price The actual price.\\n     */\\n    function indexToPrice(uint16 priceIndex) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the price book index closest to the provided price.\\n     * @param price Provided price.\\n     * @param roundingUp Determines whether to round up or down.\\n     * @return index The price book index.\\n     * @return correctedPrice The actual price for the price book index.\\n     */\\n    function priceToIndex(uint256 price, bool roundingUp) external view returns (uint16 index, uint256 correctedPrice);\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factoryV1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cachedChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"v1PoolCount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"getAllMarkets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"markets\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBidSide\",\"type\":\"bool\"}],\"name\":\"getDepths\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct CloberViewer.OrderBookElement[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBidSide\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"explorationIndexCount\",\"type\":\"uint16\"}],\"name\":\"getDepths\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct CloberViewer.OrderBookElement[]\",\"name\":\"elements\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"fromPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toPrice\",\"type\":\"uint256\"}],\"name\":\"getDepthsByPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CloberViewer.DepthInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBid\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"fromIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"toIndex\",\"type\":\"uint16\"}],\"name\":\"getDepthsByPriceIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CloberViewer.DepthInfo[]\",\"name\":\"depths\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPriceIndex\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceUpperBound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CloberViewer", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000093a43391978bfc0bc708d5f55b0abe7a9ede1b9100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}