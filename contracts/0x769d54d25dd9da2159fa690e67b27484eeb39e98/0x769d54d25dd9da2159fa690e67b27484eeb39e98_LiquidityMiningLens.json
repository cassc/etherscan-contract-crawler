{"SourceCode": "// SPDX-License-Identifier: BSD-3-Clause\r\n// File: lib/ipor-power-tokens/contracts/libraries/errors/Errors.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\nlibrary Errors {\r\n    /// @notice Error thrown when the lpToken address is not supported\r\n    /// @dev List of supported LpTokens is defined in {LiquidityMining._lpTokens}\r\n    string public constant LP_TOKEN_NOT_SUPPORTED = \"PT_701\";\r\n    /// @notice Error thrown when the caller / msgSender is not a Pause Manager address.\r\n    /// @dev Pause Manager can be defined by the smart contract's Onwer\r\n    string public constant CALLER_NOT_PAUSE_MANAGER = \"PT_704\";\r\n    /// @notice Error thrown when the account's base balance is too low\r\n    string public constant ACCOUNT_BASE_BALANCE_IS_TOO_LOW = \"PT_705\";\r\n    /// @notice Error thrown when the account's Lp Token balance is too low\r\n    string public constant ACCOUNT_LP_TOKEN_BALANCE_IS_TOO_LOW = \"PT_706\";\r\n    /// @notice Error thrown when the account's delegated balance is too low\r\n    string public constant ACC_DELEGATED_TO_LIQUIDITY_MINING_BALANCE_IS_TOO_LOW = \"PT_707\";\r\n    /// @notice Error thrown when the account's available Power Token balance is too low\r\n    string public constant ACC_AVAILABLE_POWER_TOKEN_BALANCE_IS_TOO_LOW = \"PT_708\";\r\n    /// @notice Error thrown when the account doesn't have the rewards (Staked Tokens / Power Tokens) to claim\r\n    string public constant NO_REWARDS_TO_CLAIM = \"PT_709\";\r\n    /// @notice Error thrown when the cooldown is not finished.\r\n    string public constant COOL_DOWN_NOT_FINISH = \"PT_710\";\r\n    /// @notice Error thrown when the aggregate power up indicator is going to be negative during the calculation.\r\n    string public constant AGGREGATE_POWER_UP_COULD_NOT_BE_NEGATIVE = \"PT_711\";\r\n    /// @notice Error thrown when the block number used in the function is lower than previous block number stored in the liquidity mining indicators.\r\n    string public constant BLOCK_NUMBER_LOWER_THAN_PREVIOUS_BLOCK_NUMBER = \"PT_712\";\r\n    /// @notice Account Composite Multiplier indicator is greater or equal to Composit Multiplier indicator, but it should be lower or equal\r\n    string public constant ACCOUNT_COMPOSITE_MULTIPLIER_GT_COMPOSITE_MULTIPLIER = \"PT_713\";\r\n    /// @notice The fee for unstacking of Power Tokens should be number between (0, 1e18)\r\n    string public constant UNSTAKE_WITHOUT_COOLDOWN_FEE_IS_TO_HIGH = \"PT_714\";\r\n    /// @notice General problem, address is wrong\r\n    string public constant WRONG_ADDRESS = \"PT_715\";\r\n    /// @notice General problem, contract is wrong\r\n    string public constant WRONG_CONTRACT_ID = \"PT_716\";\r\n    /// @notice Value not greater than zero\r\n    string public constant VALUE_NOT_GREATER_THAN_ZERO = \"PT_717\";\r\n    /// @notice Appeared when input of two arrays length mismatch\r\n    string public constant INPUT_ARRAYS_LENGTH_MISMATCH = \"PT_718\";\r\n    /// @notice msg.sender is not an appointed owner, it cannot confirm their ownership\r\n    string public constant SENDER_NOT_APPOINTED_OWNER = \"PT_719\";\r\n    /// @notice msg.sender is not an appointed owner, it cannot confirm their ownership\r\n    string public constant ROUTER_INVALID_SIGNATURE = \"PT_720\";\r\n    string public constant INPUT_ARRAYS_EMPTY = \"PT_721\";\r\n    string public constant CALLER_NOT_ROUTER = \"PT_722\";\r\n    string public constant CALLER_NOT_GUARDIAN = \"PT_723\";\r\n    string public constant CONTRACT_PAUSED = \"PT_724\";\r\n    string public constant REENTRANCY = \"PT_725\";\r\n    string public constant CALLER_NOT_OWNER = \"PT_726\";\r\n}\r\n\r\n// File: lib/ipor-power-tokens/contracts/libraries/ContractValidator.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\nlibrary ContractValidator {\r\n    function checkAddress(address addr) internal pure returns (address) {\r\n        require(addr != address(0), Errors.WRONG_ADDRESS);\r\n        return addr;\r\n    }\r\n}\r\n\r\n// File: lib/ipor-power-tokens/contracts/interfaces/types/LiquidityMiningTypes.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n/// @title Structures used in the LiquidityMining.\r\nlibrary LiquidityMiningTypes {\r\n    /// @title Struct pair representing delegated pwToken balance\r\n    struct DelegatedPwTokenBalance {\r\n        /// @notice lpToken address\r\n        address lpToken;\r\n        /// @notice The amount of Power Token delegated to lpToken staking pool\r\n        /// @dev value represented in 18 decimals\r\n        uint256 pwTokenAmount;\r\n    }\r\n\r\n    /// @title Global indicators used in rewards calculation.\r\n    struct GlobalRewardsIndicators {\r\n        /// @notice powerUp indicator aggregated\r\n        /// @dev It can be changed many times during transaction, represented with 18 decimals\r\n        uint256 aggregatedPowerUp;\r\n        /// @notice composite multiplier in a block described in field blockNumber\r\n        /// @dev It can be changed many times during transaction, represented with 27 decimals\r\n        uint128 compositeMultiplierInTheBlock;\r\n        /// @notice Composite multiplier updated in block {blockNumber} but calculated for PREVIOUS (!) block.\r\n        /// @dev It can be changed once per block, represented with 27 decimals\r\n        uint128 compositeMultiplierCumulativePrevBlock;\r\n        /// @dev It can be changed once per block. Block number in which all other params of this structure are updated\r\n        uint32 blockNumber;\r\n        /// @notice value describing amount of rewards issued per block,\r\n        /// @dev It can be changed at most once per block, represented with 8 decimals\r\n        uint32 rewardsPerBlock;\r\n        /// @notice amount of accrued rewards since inception\r\n        /// @dev It can be changed at most once per block, represented with 18 decimals\r\n        uint88 accruedRewards;\r\n    }\r\n\r\n    /// @title Params recorded for a given account. These params are used by the algorithm responsible for rewards distribution.\r\n    /// @dev The structure in storage is updated when account interacts with the LiquidityMining smart contract (stake, unstake, delegate, undelegate, claim)\r\n    struct AccountRewardsIndicators {\r\n        /// @notice `composite multiplier cumulative` is calculated for previous block\r\n        /// @dev represented in 27 decimals\r\n        uint128 compositeMultiplierCumulativePrevBlock;\r\n        /// @notice lpToken account's balance\r\n        uint128 lpTokenBalance;\r\n        /// @notive PowerUp is a result of logarithmic equastion,\r\n        /// @dev  powerUp < 100 *10^18\r\n        uint72 powerUp;\r\n        /// @notice balance of Power Tokens delegated to LiquidityMining\r\n        /// @dev delegatedPwTokenBalance < 10^26 < 2^87\r\n        uint96 delegatedPwTokenBalance;\r\n    }\r\n\r\n    struct UpdateLpToken {\r\n        address beneficiary;\r\n        address lpToken;\r\n        uint256 lpTokenAmount;\r\n    }\r\n\r\n    struct UpdatePwToken {\r\n        address beneficiary;\r\n        address lpToken;\r\n        uint256 pwTokenAmount;\r\n    }\r\n\r\n    struct AccruedRewardsResult {\r\n        address lpToken;\r\n        uint256 rewardsAmount;\r\n    }\r\n\r\n    struct AccountRewardResult {\r\n        address lpToken;\r\n        uint256 rewardsAmount;\r\n        uint256 allocatedPwTokens;\r\n    }\r\n\r\n    struct AccountIndicatorsResult {\r\n        address lpToken;\r\n        LiquidityMiningTypes.AccountRewardsIndicators indicators;\r\n    }\r\n\r\n    struct GlobalIndicatorsResult {\r\n        address lpToken;\r\n        LiquidityMiningTypes.GlobalRewardsIndicators indicators;\r\n    }\r\n}\r\n\r\n// File: lib/ipor-power-tokens/contracts/interfaces/ILiquidityMining.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\n/// @title The interface for interaction with the LiquidityMining.\r\n/// LiquidityMining is responsible for the distribution of the Power Token rewards to accounts\r\n/// staking lpTokens and / or delegating Power Tokens to LiquidityMining. LpTokens can be staked directly to the LiquidityMining,\r\n/// Power Tokens are a staked version of the [Staked] Tokens minted by the PowerToken smart contract.\r\ninterface ILiquidityMining {\r\n    /// @notice Contract ID. The keccak-256 hash of \"io.ipor.LiquidityMining\" decreased by 1\r\n    /// @return Returns an ID of the contract\r\n    function getContractId() external pure returns (bytes32);\r\n\r\n    /// @notice Returns the balance of staked lpTokens\r\n    /// @param account the account's address\r\n    /// @param lpToken the address of lpToken\r\n    /// @return balance of the lpTokens staked by the sender\r\n    function balanceOf(address account, address lpToken) external view returns (uint256);\r\n\r\n    /// @notice It returns the balance of delegated Power Tokens for a given `account` and the list of lpToken addresses.\r\n    /// @param account address for which to fetch the information about balance of delegated Power Tokens\r\n    /// @param lpTokens list of lpTokens addresses(lpTokens)\r\n    /// @return balances list of {LiquidityMiningTypes.DelegatedPwTokenBalance} structure, with information how much Power Token is delegated per lpToken address.\r\n    function balanceOfDelegatedPwToken(\r\n        address account,\r\n        address[] memory lpTokens\r\n    ) external view returns (LiquidityMiningTypes.DelegatedPwTokenBalance[] memory balances);\r\n\r\n    /// @notice Calculates the accrued rewards for multiple LP tokens.\r\n    /// @param lpTokens An array of LP token addresses.\r\n    /// @return An array of `AccruedRewardsResult` structures, containing the LP token address and the accrued rewards amount.\r\n    function calculateAccruedRewards(\r\n        address[] calldata lpTokens\r\n    ) external view returns (LiquidityMiningTypes.AccruedRewardsResult[] memory);\r\n\r\n    /// @notice Calculates the rewards earned by an account for multiple LP tokens.\r\n    /// @param account The address of the account for which to calculate rewards.\r\n    /// @param lpTokens An array of LP token addresses.\r\n    /// @return An array of `AccountRewardResult` structures, containing the LP token address, rewards amount, and allocated Power Token balance for the account.\r\n    function calculateAccountRewards(\r\n        address account,\r\n        address[] calldata lpTokens\r\n    ) external view returns (LiquidityMiningTypes.AccountRewardResult[] memory);\r\n\r\n    /// @notice method allowing to update the indicators per asset (lpToken).\r\n    /// @param account of which we should update the indicators\r\n    /// @param lpTokens of the staking pools to update the indicators\r\n    function updateIndicators(address account, address[] calldata lpTokens) external;\r\n\r\n    /// @notice Adds LP tokens to the liquidity mining for multiple accounts.\r\n    /// @param updateLpToken An array of `UpdateLpToken` structures, each containing the account address,\r\n    /// LP token address, and LP token amount to be added.\r\n    function addLpTokensInternal(\r\n        LiquidityMiningTypes.UpdateLpToken[] memory updateLpToken\r\n    ) external;\r\n\r\n    /// @notice Adds Power tokens to the liquidity mining for multiple accounts.\r\n    /// @param updatePwToken An array of `UpdatePwToken` structures, each containing the account address,\r\n    /// LP token address, and Power token amount to be added.\r\n    function addPwTokensInternal(\r\n        LiquidityMiningTypes.UpdatePwToken[] memory updatePwToken\r\n    ) external;\r\n\r\n    /// @notice Removes LP tokens from the liquidity mining for multiple accounts.\r\n    /// @param updateLpToken An array of `UpdateLpToken` structures, each containing the account address,\r\n    /// LP token address, and LP token amount to be removed.\r\n    function removeLpTokensInternal(\r\n        LiquidityMiningTypes.UpdateLpToken[] memory updateLpToken\r\n    ) external;\r\n\r\n    /// @notice Removes Power Tokens from the liquidity mining for multiple accounts.\r\n    /// @param updatePwToken An array of `UpdatePwToken` structures, each containing the account address,\r\n    /// LP token address, and Power Token amount to be removed.\r\n    function removePwTokensInternal(\r\n        LiquidityMiningTypes.UpdatePwToken[] memory updatePwToken\r\n    ) external;\r\n\r\n    /// @notice Claims accumulated rewards for multiple LP tokens and transfers them to the specified account.\r\n    /// @param account The account address to claim rewards for.\r\n    /// @param lpTokens An array of LP token addresses for which rewards will be claimed.\r\n    /// @return rewardsAmountToTransfer The total amount of rewards transferred to the account.\r\n    function claimInternal(\r\n        address account,\r\n        address[] calldata lpTokens\r\n    ) external returns (uint256 rewardsAmountToTransfer);\r\n\r\n    /// @notice Retrieves the global indicators for multiple LP tokens.\r\n    /// @param lpTokens An array of LP token addresses for which to retrieve the global indicators.\r\n    /// @return An array of LiquidityMiningTypes.GlobalIndicatorsResult containing the global indicators for each LP token.\r\n    function getGlobalIndicators(\r\n        address[] calldata lpTokens\r\n    ) external view returns (LiquidityMiningTypes.GlobalIndicatorsResult[] memory);\r\n\r\n    /// @notice Retrieves the account indicators for a specific account and multiple LP tokens.\r\n    /// @param account The address of the account for which to retrieve the account indicators.\r\n    /// @param lpTokens An array of LP token addresses for which to retrieve the account indicators.\r\n    /// @return An array of LiquidityMiningTypes.AccountIndicatorsResult containing the account indicators for each LP token.\r\n    function getAccountIndicators(\r\n        address account,\r\n        address[] calldata lpTokens\r\n    ) external view returns (LiquidityMiningTypes.AccountIndicatorsResult[] memory);\r\n\r\n    /// @notice Emitted when the account stakes the lpTokens\r\n    /// @param account Account's address in the context of which the activities of staking of lpTokens are performed\r\n    /// @param lpToken address of lpToken being staked\r\n    /// @param lpTokenAmount of lpTokens to stake, represented with 18 decimals\r\n    event LpTokensStaked(address account, address lpToken, uint256 lpTokenAmount);\r\n\r\n    /// @notice Emitted when the account claims the rewards\r\n    /// @param account Account's address in the context of which activities of claiming are performed\r\n    /// @param lpTokens The addresses of the lpTokens for which the rewards are claimed\r\n    /// @param rewardsAmount Reward amount denominated in pwToken, represented with 18 decimals\r\n    event Claimed(address account, address[] lpTokens, uint256 rewardsAmount);\r\n\r\n    /// @notice Emitted when the account claims the allocated rewards\r\n    /// @param account Account address in the context of which activities of claiming are performed\r\n    /// @param allocatedRewards Reward amount denominated in pwToken, represented in 18 decimals\r\n    event AllocatedTokensClaimed(address account, uint256 allocatedRewards);\r\n\r\n    /// @notice Emitted when update was triggered for the account on the lpToken\r\n    /// @param account Account address to which the update was triggered\r\n    /// @param lpToken lpToken address to which the update was triggered\r\n    event IndicatorsUpdated(address account, address lpToken);\r\n\r\n    /// @notice Emitted when the lpToken is added to the LiquidityMining\r\n    /// @param beneficiary Account address on behalf of which the lpToken is added\r\n    /// @param lpToken lpToken address which is added\r\n    /// @param lpTokenAmount Amount of lpTokens added, represented with 18 decimals\r\n    event LpTokenAdded(address beneficiary, address lpToken, uint256 lpTokenAmount);\r\n\r\n    /// @notice Emitted when the lpToken is removed from the LiquidityMining\r\n    /// @param account address on behalf of which the lpToken is removed\r\n    /// @param lpToken lpToken address which is removed\r\n    /// @param lpTokenAmount Amount of lpTokens removed, represented with 18 decimals\r\n    event LpTokensRemoved(address account, address lpToken, uint256 lpTokenAmount);\r\n\r\n    /// @notice Emitted when the PwTokens is added to lpToken pool\r\n    /// @param beneficiary Account address on behalf of which the PwToken is added\r\n    /// @param lpToken lpToken address to which the PwToken is added\r\n    /// @param pwTokenAmount Amount of PwTokens added, represented with 18 decimals\r\n    event PwTokensAdded(address beneficiary, address lpToken, uint256 pwTokenAmount);\r\n\r\n    /// @notice Emitted when the PwTokens is removed from lpToken pool\r\n    /// @param account Account address on behalf of which the PwToken is removed\r\n    /// @param lpToken lpToken address from which the PwToken is removed\r\n    /// @param pwTokenAmount Amount of PwTokens removed, represented with 18 decimals\r\n    event PwTokensRemoved(address account, address lpToken, uint256 pwTokenAmount);\r\n}\r\n\r\n// File: lib/ipor-power-tokens/contracts/interfaces/ILiquidityMiningLens.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\n\r\ninterface ILiquidityMiningLens {\r\n    /// @notice Returns the balance of LP tokens staked by the specified account in the Liquidity Mining contract.\r\n    /// @param account The address of the account for which the LP token balance is queried.\r\n    /// @param lpToken The address of the LP token for which the balance is queried.\r\n    /// @return The balance of LP tokens staked by the specified account.\r\n    function balanceOfLpTokensStakedInLiquidityMining(\r\n        address account,\r\n        address lpToken\r\n    ) external view returns (uint256);\r\n\r\n    /// @notice It returns the balance of delegated Power Tokens for a given `account` and the list of lpToken addresses.\r\n    /// @param account address for which to fetch the information about balance of delegated Power Tokens\r\n    /// @param lpTokens list of lpTokens addresses(lpTokens)\r\n    /// @return balances list of {LiquidityMiningTypes.DelegatedPwTokenBalance} structure, with information how much Power Token is delegated per lpToken address.\r\n    function balanceOfPowerTokensDelegatedToLiquidityMining(\r\n        address account,\r\n        address[] memory lpTokens\r\n    ) external view returns (LiquidityMiningTypes.DelegatedPwTokenBalance[] memory balances);\r\n\r\n    /// @notice Calculates the accrued rewards for the specified LP tokens in the Liquidity Mining contract.\r\n    /// @param lpTokens An array of LP tokens for which the accrued rewards are to be calculated.\r\n    /// @return result An array of `AccruedRewardsResult` structs containing the accrued rewards information for each LP token.\r\n    function getAccruedRewardsInLiquidityMining(\r\n        address[] calldata lpTokens\r\n    ) external view returns (LiquidityMiningTypes.AccruedRewardsResult[] memory result);\r\n\r\n    /// @notice Calculates the rewards for the specified account and LP tokens in the Liquidity Mining contract.\r\n    /// @param account The address of the account for which the rewards are to be calculated.\r\n    /// @param lpTokens An array of LP tokens for which the rewards are to be calculated.\r\n    /// @return An array of `AccountRewardResult` structs containing the rewards information for each LP token.\r\n    function getAccountRewardsInLiquidityMining(\r\n        address account,\r\n        address[] calldata lpTokens\r\n    ) external view returns (LiquidityMiningTypes.AccountRewardResult[] memory);\r\n\r\n    /// @notice Retrieves the global indicators for the specified LP tokens in the Liquidity Mining contract.\r\n    /// @param lpTokens An array of LP tokens for which the global indicators are to be retrieved.\r\n    /// @return An array of `GlobalIndicatorsResult` structs containing the global indicators information for each LP token.\r\n    function getGlobalIndicatorsFromLiquidityMining(\r\n        address[] memory lpTokens\r\n    ) external view returns (LiquidityMiningTypes.GlobalIndicatorsResult[] memory);\r\n\r\n    /// @notice Retrieves the account indicators for the specified account and LP tokens in the Liquidity Mining contract.\r\n    /// @param account The address of the account for which the account indicators are to be retrieved.\r\n    /// @param lpTokens An array of LP tokens for which the account indicators are to be retrieved.\r\n    /// @return An array of `AccountIndicatorsResult` structs containing the account indicators information for each LP token.\r\n    function getAccountIndicatorsFromLiquidityMining(\r\n        address account,\r\n        address[] memory lpTokens\r\n    ) external view returns (LiquidityMiningTypes.AccountIndicatorsResult[] memory);\r\n}\r\n\r\n// File: lib/ipor-power-tokens/contracts/lens/LiquidityMiningLens.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @dev It is not recommended to use lens contract directly, should be used only through router (like IporProtocolRouter or PowerTokenRouter)\r\ncontract LiquidityMiningLens is ILiquidityMiningLens {\r\n    using ContractValidator for address;\r\n    address public immutable liquidityMining;\r\n\r\n    constructor(address liquidityMiningInput) {\r\n        liquidityMining = liquidityMiningInput.checkAddress();\r\n    }\r\n\r\n    function balanceOfLpTokensStakedInLiquidityMining(\r\n        address account,\r\n        address lpToken\r\n    ) external view returns (uint256) {\r\n        return ILiquidityMining(liquidityMining).balanceOf(account, lpToken);\r\n    }\r\n\r\n    function balanceOfPowerTokensDelegatedToLiquidityMining(\r\n        address account,\r\n        address[] memory lpTokens\r\n    ) external view returns (LiquidityMiningTypes.DelegatedPwTokenBalance[] memory balances) {\r\n        return ILiquidityMining(liquidityMining).balanceOfDelegatedPwToken(account, lpTokens);\r\n    }\r\n\r\n    function getAccruedRewardsInLiquidityMining(\r\n        address[] calldata lpTokens\r\n    ) external view override returns (LiquidityMiningTypes.AccruedRewardsResult[] memory result) {\r\n        return ILiquidityMining(liquidityMining).calculateAccruedRewards(lpTokens);\r\n    }\r\n\r\n    function getAccountRewardsInLiquidityMining(\r\n        address account,\r\n        address[] calldata lpTokens\r\n    ) external view override returns (LiquidityMiningTypes.AccountRewardResult[] memory) {\r\n        return ILiquidityMining(liquidityMining).calculateAccountRewards(account, lpTokens);\r\n    }\r\n\r\n    function getGlobalIndicatorsFromLiquidityMining(\r\n        address[] memory lpTokens\r\n    ) external view returns (LiquidityMiningTypes.GlobalIndicatorsResult[] memory) {\r\n        return ILiquidityMining(liquidityMining).getGlobalIndicators(lpTokens);\r\n    }\r\n\r\n    function getAccountIndicatorsFromLiquidityMining(\r\n        address account,\r\n        address[] calldata lpTokens\r\n    ) external view returns (LiquidityMiningTypes.AccountIndicatorsResult[] memory) {\r\n        return ILiquidityMining(liquidityMining).getAccountIndicators(account, lpTokens);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityMiningInput\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"}],\"name\":\"balanceOfLpTokensStakedInLiquidityMining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"}],\"name\":\"balanceOfPowerTokensDelegatedToLiquidityMining\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pwTokenAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct LiquidityMiningTypes.DelegatedPwTokenBalance[]\",\"name\":\"balances\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"}],\"name\":\"getAccountIndicatorsFromLiquidityMining\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"compositeMultiplierCumulativePrevBlock\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lpTokenBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint72\",\"name\":\"powerUp\",\"type\":\"uint72\"},{\"internalType\":\"uint96\",\"name\":\"delegatedPwTokenBalance\",\"type\":\"uint96\"}],\"internalType\":\"struct LiquidityMiningTypes.AccountRewardsIndicators\",\"name\":\"indicators\",\"type\":\"tuple\"}],\"internalType\":\"struct LiquidityMiningTypes.AccountIndicatorsResult[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"}],\"name\":\"getAccountRewardsInLiquidityMining\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocatedPwTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct LiquidityMiningTypes.AccountRewardResult[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"}],\"name\":\"getAccruedRewardsInLiquidityMining\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardsAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct LiquidityMiningTypes.AccruedRewardsResult[]\",\"name\":\"result\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"}],\"name\":\"getGlobalIndicatorsFromLiquidityMining\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"aggregatedPowerUp\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"compositeMultiplierInTheBlock\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"compositeMultiplierCumulativePrevBlock\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"rewardsPerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint88\",\"name\":\"accruedRewards\",\"type\":\"uint88\"}],\"internalType\":\"struct LiquidityMiningTypes.GlobalRewardsIndicators\",\"name\":\"indicators\",\"type\":\"tuple\"}],\"internalType\":\"struct LiquidityMiningTypes.GlobalIndicatorsResult[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityMining\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LiquidityMiningLens", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000cc3fc4c9ba7f8b8aa433bc586d390a70560ff366", "EVMVersion": "paris", "Library": "", "LicenseType": "BSD-3-Clause", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://477e0457f1d98e1ab0cdf54d2a90e3703b70cc77b7951e81aeca52cae32de5b3"}