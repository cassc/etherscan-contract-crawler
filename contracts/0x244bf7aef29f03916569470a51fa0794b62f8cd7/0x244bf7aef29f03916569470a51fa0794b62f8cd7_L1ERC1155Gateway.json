{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {\\n    function __ERC1155Holder_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Holder_init_unchained() internal onlyInitializing {\\n    }\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\\n    function __ERC1155Receiver_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Receiver_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/L1/gateways/IL1ERC1155Gateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\n/// @title The interface for the ERC1155 cross chain gateway on layer 1.\\ninterface IL1ERC1155Gateway {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    /// @notice Emitted when the ERC1155 NFT is transfered to recipient on layer 1.\\n    /// @param _l1Token The address of ERC1155 NFT on layer 1.\\n    /// @param _l2Token The address of ERC1155 NFT on layer 2.\\n    /// @param _from The address of sender on layer 2.\\n    /// @param _to The address of recipient on layer 1.\\n    /// @param _tokenId The token id of the ERC1155 NFT to withdraw from layer 2.\\n    /// @param _amount The number of token to withdraw from layer 2.\\n    event FinalizeWithdrawERC1155(\\n        address indexed _l1Token,\\n        address indexed _l2Token,\\n        address indexed _from,\\n        address _to,\\n        uint256 _tokenId,\\n        uint256 _amount\\n    );\\n\\n    /// @notice Emitted when the ERC1155 NFT is batch transfered to recipient on layer 1.\\n    /// @param _l1Token The address of ERC1155 NFT on layer 1.\\n    /// @param _l2Token The address of ERC1155 NFT on layer 2.\\n    /// @param _from The address of sender on layer 2.\\n    /// @param _to The address of recipient on layer 1.\\n    /// @param _tokenIds The list of token ids of the ERC1155 NFT to withdraw from layer 2.\\n    /// @param _amounts The list of corresponding number of token to withdraw from layer 2.\\n    event FinalizeBatchWithdrawERC1155(\\n        address indexed _l1Token,\\n        address indexed _l2Token,\\n        address indexed _from,\\n        address _to,\\n        uint256[] _tokenIds,\\n        uint256[] _amounts\\n    );\\n\\n    /// @notice Emitted when the ERC1155 NFT is deposited to gateway on layer 1.\\n    /// @param _l1Token The address of ERC1155 NFT on layer 1.\\n    /// @param _l2Token The address of ERC1155 NFT on layer 2.\\n    /// @param _from The address of sender on layer 1.\\n    /// @param _to The address of recipient on layer 2.\\n    /// @param _tokenId The token id of the ERC1155 NFT to deposit on layer 1.\\n    /// @param _amount The number of token to deposit on layer 1.\\n    event DepositERC1155(\\n        address indexed _l1Token,\\n        address indexed _l2Token,\\n        address indexed _from,\\n        address _to,\\n        uint256 _tokenId,\\n        uint256 _amount\\n    );\\n\\n    /// @notice Emitted when the ERC1155 NFT is batch deposited to gateway on layer 1.\\n    /// @param _l1Token The address of ERC1155 NFT on layer 1.\\n    /// @param _l2Token The address of ERC1155 NFT on layer 2.\\n    /// @param _from The address of sender on layer 1.\\n    /// @param _to The address of recipient on layer 2.\\n    /// @param _tokenIds The list of token ids of the ERC1155 NFT to deposit on layer 1.\\n    /// @param _amounts The list of corresponding number of token to deposit on layer 1.\\n    event BatchDepositERC1155(\\n        address indexed _l1Token,\\n        address indexed _l2Token,\\n        address indexed _from,\\n        address _to,\\n        uint256[] _tokenIds,\\n        uint256[] _amounts\\n    );\\n\\n    /// @notice Emitted when some ERC1155 token is refunded.\\n    /// @param token The address of the token in L1.\\n    /// @param recipient The address of receiver in L1.\\n    /// @param tokenId The id of token refunded.\\n    /// @param amount The amount of token refunded.\\n    event RefundERC1155(address indexed token, address indexed recipient, uint256 tokenId, uint256 amount);\\n\\n    /// @notice Emitted when some ERC1155 token is refunded.\\n    /// @param token The address of the token in L1.\\n    /// @param recipient The address of receiver in L1.\\n    /// @param tokenIds The list of ids of token refunded.\\n    /// @param amounts The list of amount of token refunded.\\n    event BatchRefundERC1155(address indexed token, address indexed recipient, uint256[] tokenIds, uint256[] amounts);\\n\\n    /*************************\\n     * Public View Functions *\\n     *************************/\\n\\n    /// @notice Deposit some ERC1155 NFT to caller's account on layer 2.\\n    /// @param _token The address of ERC1155 NFT on layer 1.\\n    /// @param _tokenId The token id to deposit.\\n    /// @param _amount The amount of token to deposit.\\n    /// @param _gasLimit Estimated gas limit required to complete the deposit on layer 2.\\n    function depositERC1155(\\n        address _token,\\n        uint256 _tokenId,\\n        uint256 _amount,\\n        uint256 _gasLimit\\n    ) external payable;\\n\\n    /// @notice Deposit some ERC1155 NFT to a recipient's account on layer 2.\\n    /// @param _token The address of ERC1155 NFT on layer 1.\\n    /// @param _to The address of recipient on layer 2.\\n    /// @param _tokenId The token id to deposit.\\n    /// @param _amount The amount of token to deposit.\\n    /// @param _gasLimit Estimated gas limit required to complete the deposit on layer 2.\\n    function depositERC1155(\\n        address _token,\\n        address _to,\\n        uint256 _tokenId,\\n        uint256 _amount,\\n        uint256 _gasLimit\\n    ) external payable;\\n\\n    /// @notice Deposit a list of some ERC1155 NFT to caller's account on layer 2.\\n    /// @param _token The address of ERC1155 NFT on layer 1.\\n    /// @param _tokenIds The list of token ids to deposit.\\n    /// @param _amounts The list of corresponding number of token to deposit.\\n    /// @param _gasLimit Estimated gas limit required to complete the deposit on layer 2.\\n    function batchDepositERC1155(\\n        address _token,\\n        uint256[] calldata _tokenIds,\\n        uint256[] calldata _amounts,\\n        uint256 _gasLimit\\n    ) external payable;\\n\\n    /// @notice Deposit a list of some ERC1155 NFT to a recipient's account on layer 2.\\n    /// @param _token The address of ERC1155 NFT on layer 1.\\n    /// @param _to The address of recipient on layer 2.\\n    /// @param _tokenIds The list of token ids to deposit.\\n    /// @param _amounts The list of corresponding number of token to deposit.\\n    /// @param _gasLimit Estimated gas limit required to complete the deposit on layer 2.\\n    function batchDepositERC1155(\\n        address _token,\\n        address _to,\\n        uint256[] calldata _tokenIds,\\n        uint256[] calldata _amounts,\\n        uint256 _gasLimit\\n    ) external payable;\\n\\n    /// @notice Complete ERC1155 withdraw from layer 2 to layer 1 and send fund to recipient's account on layer 1.\\n    ///      The function should only be called by L1ScrollMessenger.\\n    ///      The function should also only be called by L2ERC1155Gateway on layer 2.\\n    /// @param _l1Token The address of corresponding layer 1 token.\\n    /// @param _l2Token The address of corresponding layer 2 token.\\n    /// @param _from The address of account who withdraw the token on layer 2.\\n    /// @param _to The address of recipient on layer 1 to receive the token.\\n    /// @param _tokenId The token id to withdraw.\\n    /// @param _amount The amount of token to withdraw.\\n    function finalizeWithdrawERC1155(\\n        address _l1Token,\\n        address _l2Token,\\n        address _from,\\n        address _to,\\n        uint256 _tokenId,\\n        uint256 _amount\\n    ) external;\\n\\n    /// @notice Complete ERC1155 batch withdraw from layer 2 to layer 1 and send fund to recipient's account on layer 1.\\n    ///      The function should only be called by L1ScrollMessenger.\\n    ///      The function should also only be called by L2ERC1155Gateway on layer 2.\\n    /// @param _l1Token The address of corresponding layer 1 token.\\n    /// @param _l2Token The address of corresponding layer 2 token.\\n    /// @param _from The address of account who withdraw the token on layer 2.\\n    /// @param _to The address of recipient on layer 1 to receive the token.\\n    /// @param _tokenIds The list of token ids to withdraw.\\n    /// @param _amounts The list of corresponding number of token to withdraw.\\n    function finalizeBatchWithdrawERC1155(\\n        address _l1Token,\\n        address _l2Token,\\n        address _from,\\n        address _to,\\n        uint256[] calldata _tokenIds,\\n        uint256[] calldata _amounts\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"src/L1/gateways/L1ERC1155Gateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.16;\\n\\nimport {IERC1155Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport {ERC1155HolderUpgradeable, ERC1155ReceiverUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\\\";\\n\\nimport {IL2ERC1155Gateway} from \\\"../../L2/gateways/IL2ERC1155Gateway.sol\\\";\\nimport {IL1ScrollMessenger} from \\\"../IL1ScrollMessenger.sol\\\";\\nimport {IL1ERC1155Gateway} from \\\"./IL1ERC1155Gateway.sol\\\";\\n\\nimport {IMessageDropCallback} from \\\"../../libraries/callbacks/IMessageDropCallback.sol\\\";\\nimport {ScrollGatewayBase} from \\\"../../libraries/gateway/ScrollGatewayBase.sol\\\";\\n\\n/// @title L1ERC1155Gateway\\n/// @notice The `L1ERC1155Gateway` is used to deposit ERC1155 compatible NFT on layer 1 and\\n/// finalize withdraw the NFTs from layer 2.\\n/// @dev The deposited NFTs are held in this gateway. On finalizing withdraw, the corresponding\\n/// NFT will be transfer to the recipient directly.\\n///\\n/// This will be changed if we have more specific scenarios.\\ncontract L1ERC1155Gateway is ERC1155HolderUpgradeable, ScrollGatewayBase, IL1ERC1155Gateway, IMessageDropCallback {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    /// @notice Emitted when token mapping for ERC1155 token is updated.\\n    /// @param l1Token The address of ERC1155 token in layer 1.\\n    /// @param oldL2Token The address of the old corresponding ERC1155 token in layer 2.\\n    /// @param newL2Token The address of the new corresponding ERC1155 token in layer 2.\\n    event UpdateTokenMapping(address indexed l1Token, address indexed oldL2Token, address indexed newL2Token);\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    /// @notice Mapping from l1 token address to l2 token address for ERC1155 NFT.\\n    mapping(address => address) public tokenMapping;\\n\\n    /***************\\n     * Constructor *\\n     ***************/\\n\\n    /// @notice Constructor for `L1ERC1155Gateway` implementation contract.\\n    ///\\n    /// @param _counterpart The address of `L1ERC1155Gateway` contract in L2.\\n    /// @param _messenger The address of `L1ScrollMessenger` contract in L1.\\n    constructor(address _counterpart, address _messenger) ScrollGatewayBase(_counterpart, address(0), _messenger) {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Initialize the storage of L1ERC1155Gateway.\\n    /// @param _counterpart The address of L2ERC1155Gateway in L2.\\n    /// @param _messenger The address of L1ScrollMessenger in L1.\\n    function initialize(address _counterpart, address _messenger) external initializer {\\n        ERC1155HolderUpgradeable.__ERC1155Holder_init();\\n        ERC1155ReceiverUpgradeable.__ERC1155Receiver_init();\\n\\n        ScrollGatewayBase._initialize(_counterpart, address(0), _messenger);\\n    }\\n\\n    /*****************************\\n     * Public Mutating Functions *\\n     *****************************/\\n\\n    /// @inheritdoc IL1ERC1155Gateway\\n    function depositERC1155(\\n        address _token,\\n        uint256 _tokenId,\\n        uint256 _amount,\\n        uint256 _gasLimit\\n    ) external payable override {\\n        _depositERC1155(_token, _msgSender(), _tokenId, _amount, _gasLimit);\\n    }\\n\\n    /// @inheritdoc IL1ERC1155Gateway\\n    function depositERC1155(\\n        address _token,\\n        address _to,\\n        uint256 _tokenId,\\n        uint256 _amount,\\n        uint256 _gasLimit\\n    ) external payable override {\\n        _depositERC1155(_token, _to, _tokenId, _amount, _gasLimit);\\n    }\\n\\n    /// @inheritdoc IL1ERC1155Gateway\\n    function batchDepositERC1155(\\n        address _token,\\n        uint256[] calldata _tokenIds,\\n        uint256[] calldata _amounts,\\n        uint256 _gasLimit\\n    ) external payable override {\\n        _batchDepositERC1155(_token, _msgSender(), _tokenIds, _amounts, _gasLimit);\\n    }\\n\\n    /// @inheritdoc IL1ERC1155Gateway\\n    function batchDepositERC1155(\\n        address _token,\\n        address _to,\\n        uint256[] calldata _tokenIds,\\n        uint256[] calldata _amounts,\\n        uint256 _gasLimit\\n    ) external payable override {\\n        _batchDepositERC1155(_token, _to, _tokenIds, _amounts, _gasLimit);\\n    }\\n\\n    /// @inheritdoc IL1ERC1155Gateway\\n    function finalizeWithdrawERC1155(\\n        address _l1Token,\\n        address _l2Token,\\n        address _from,\\n        address _to,\\n        uint256 _tokenId,\\n        uint256 _amount\\n    ) external virtual onlyCallByCounterpart nonReentrant {\\n        require(_l2Token != address(0), \\\"token address cannot be 0\\\");\\n        require(_l2Token == tokenMapping[_l1Token], \\\"l2 token mismatch\\\");\\n\\n        IERC1155Upgradeable(_l1Token).safeTransferFrom(address(this), _to, _tokenId, _amount, \\\"\\\");\\n\\n        emit FinalizeWithdrawERC1155(_l1Token, _l2Token, _from, _to, _tokenId, _amount);\\n    }\\n\\n    /// @inheritdoc IL1ERC1155Gateway\\n    function finalizeBatchWithdrawERC1155(\\n        address _l1Token,\\n        address _l2Token,\\n        address _from,\\n        address _to,\\n        uint256[] calldata _tokenIds,\\n        uint256[] calldata _amounts\\n    ) external virtual onlyCallByCounterpart nonReentrant {\\n        require(_l2Token != address(0), \\\"token address cannot be 0\\\");\\n        require(_l2Token == tokenMapping[_l1Token], \\\"l2 token mismatch\\\");\\n\\n        IERC1155Upgradeable(_l1Token).safeBatchTransferFrom(address(this), _to, _tokenIds, _amounts, \\\"\\\");\\n\\n        emit FinalizeBatchWithdrawERC1155(_l1Token, _l2Token, _from, _to, _tokenIds, _amounts);\\n    }\\n\\n    /// @inheritdoc IMessageDropCallback\\n    function onDropMessage(bytes calldata _message) external payable virtual onlyInDropContext nonReentrant {\\n        require(msg.value == 0, \\\"nonzero msg.value\\\");\\n\\n        if (bytes4(_message[0:4]) == IL2ERC1155Gateway.finalizeDepositERC1155.selector) {\\n            (address _token, , address _sender, , uint256 _tokenId, uint256 _amount) = abi.decode(\\n                _message[4:],\\n                (address, address, address, address, uint256, uint256)\\n            );\\n            IERC1155Upgradeable(_token).safeTransferFrom(address(this), _sender, _tokenId, _amount, \\\"\\\");\\n\\n            emit RefundERC1155(_token, _sender, _tokenId, _amount);\\n        } else if (bytes4(_message[0:4]) == IL2ERC1155Gateway.finalizeBatchDepositERC1155.selector) {\\n            (address _token, , address _sender, , uint256[] memory _tokenIds, uint256[] memory _amounts) = abi.decode(\\n                _message[4:],\\n                (address, address, address, address, uint256[], uint256[])\\n            );\\n            IERC1155Upgradeable(_token).safeBatchTransferFrom(address(this), _sender, _tokenIds, _amounts, \\\"\\\");\\n\\n            emit BatchRefundERC1155(_token, _sender, _tokenIds, _amounts);\\n        } else {\\n            revert(\\\"invalid selector\\\");\\n        }\\n    }\\n\\n    /************************\\n     * Restricted Functions *\\n     ************************/\\n\\n    /// @notice Update layer 2 to layer 2 token mapping.\\n    /// @param _l1Token The address of ERC1155 token on layer 1.\\n    /// @param _l2Token The address of corresponding ERC1155 token on layer 2.\\n    function updateTokenMapping(address _l1Token, address _l2Token) external onlyOwner {\\n        require(_l2Token != address(0), \\\"token address cannot be 0\\\");\\n\\n        address _oldL2Token = tokenMapping[_l1Token];\\n        tokenMapping[_l1Token] = _l2Token;\\n\\n        emit UpdateTokenMapping(_l1Token, _oldL2Token, _l2Token);\\n    }\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /// @dev Internal function to deposit ERC1155 NFT to layer 2.\\n    /// @param _token The address of ERC1155 NFT on layer 1.\\n    /// @param _to The address of recipient on layer 2.\\n    /// @param _tokenId The token id to deposit.\\n    /// @param _amount The amount of token to deposit.\\n    /// @param _gasLimit Estimated gas limit required to complete the deposit on layer 2.\\n    function _depositERC1155(\\n        address _token,\\n        address _to,\\n        uint256 _tokenId,\\n        uint256 _amount,\\n        uint256 _gasLimit\\n    ) internal virtual nonReentrant {\\n        require(_amount > 0, \\\"deposit zero amount\\\");\\n\\n        address _l2Token = tokenMapping[_token];\\n        require(_l2Token != address(0), \\\"no corresponding l2 token\\\");\\n\\n        address _sender = _msgSender();\\n\\n        // 1. transfer token to this contract\\n        IERC1155Upgradeable(_token).safeTransferFrom(_sender, address(this), _tokenId, _amount, \\\"\\\");\\n\\n        // 2. Generate message passed to L2ERC1155Gateway.\\n        bytes memory _message = abi.encodeCall(\\n            IL2ERC1155Gateway.finalizeDepositERC1155,\\n            (_token, _l2Token, _sender, _to, _tokenId, _amount)\\n        );\\n\\n        // 3. Send message to L1ScrollMessenger.\\n        IL1ScrollMessenger(messenger).sendMessage{value: msg.value}(counterpart, 0, _message, _gasLimit, _sender);\\n\\n        emit DepositERC1155(_token, _l2Token, _sender, _to, _tokenId, _amount);\\n    }\\n\\n    /// @dev Internal function to batch deposit ERC1155 NFT to layer 2.\\n    /// @param _token The address of ERC1155 NFT on layer 1.\\n    /// @param _to The address of recipient on layer 2.\\n    /// @param _tokenIds The list of token ids to deposit.\\n    /// @param _amounts The list of corresponding number of token to deposit.\\n    /// @param _gasLimit Estimated gas limit required to complete the deposit on layer 2.\\n    function _batchDepositERC1155(\\n        address _token,\\n        address _to,\\n        uint256[] calldata _tokenIds,\\n        uint256[] calldata _amounts,\\n        uint256 _gasLimit\\n    ) internal virtual nonReentrant {\\n        require(_tokenIds.length > 0, \\\"no token to deposit\\\");\\n        require(_tokenIds.length == _amounts.length, \\\"length mismatch\\\");\\n\\n        for (uint256 i = 0; i < _amounts.length; i++) {\\n            require(_amounts[i] > 0, \\\"deposit zero amount\\\");\\n        }\\n\\n        address _l2Token = tokenMapping[_token];\\n        require(_l2Token != address(0), \\\"no corresponding l2 token\\\");\\n\\n        address _sender = _msgSender();\\n\\n        // 1. transfer token to this contract\\n        IERC1155Upgradeable(_token).safeBatchTransferFrom(_sender, address(this), _tokenIds, _amounts, \\\"\\\");\\n\\n        // 2. Generate message passed to L2ERC1155Gateway.\\n        bytes memory _message = abi.encodeCall(\\n            IL2ERC1155Gateway.finalizeBatchDepositERC1155,\\n            (_token, _l2Token, _sender, _to, _tokenIds, _amounts)\\n        );\\n\\n        // 3. Send message to L1ScrollMessenger.\\n        IL1ScrollMessenger(messenger).sendMessage{value: msg.value}(counterpart, 0, _message, _gasLimit, _sender);\\n\\n        emit BatchDepositERC1155(_token, _l2Token, _sender, _to, _tokenIds, _amounts);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/L1/IL1ScrollMessenger.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {IScrollMessenger} from \\\"../libraries/IScrollMessenger.sol\\\";\\n\\ninterface IL1ScrollMessenger is IScrollMessenger {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    /// @notice Emitted when the maximum number of times each message can be replayed is updated.\\n    /// @param oldMaxReplayTimes The old maximum number of times each message can be replayed.\\n    /// @param newMaxReplayTimes The new maximum number of times each message can be replayed.\\n    event UpdateMaxReplayTimes(uint256 oldMaxReplayTimes, uint256 newMaxReplayTimes);\\n\\n    /***********\\n     * Structs *\\n     ***********/\\n\\n    struct L2MessageProof {\\n        // The index of the batch where the message belongs to.\\n        uint256 batchIndex;\\n        // Concatenation of merkle proof for withdraw merkle trie.\\n        bytes merkleProof;\\n    }\\n\\n    /*****************************\\n     * Public Mutating Functions *\\n     *****************************/\\n\\n    /// @notice Relay a L2 => L1 message with message proof.\\n    /// @param from The address of the sender of the message.\\n    /// @param to The address of the recipient of the message.\\n    /// @param value The msg.value passed to the message call.\\n    /// @param nonce The nonce of the message to avoid replay attack.\\n    /// @param message The content of the message.\\n    /// @param proof The proof used to verify the correctness of the transaction.\\n    function relayMessageWithProof(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 nonce,\\n        bytes memory message,\\n        L2MessageProof memory proof\\n    ) external;\\n\\n    /// @notice Replay an existing message.\\n    /// @param from The address of the sender of the message.\\n    /// @param to The address of the recipient of the message.\\n    /// @param value The msg.value passed to the message call.\\n    /// @param messageNonce The nonce for the message to replay.\\n    /// @param message The content of the message.\\n    /// @param newGasLimit New gas limit to be used for this message.\\n    /// @param refundAddress The address of account who will receive the refunded fee.\\n    function replayMessage(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 messageNonce,\\n        bytes memory message,\\n        uint32 newGasLimit,\\n        address refundAddress\\n    ) external payable;\\n\\n    /// @notice Drop a skipped message.\\n    /// @param from The address of the sender of the message.\\n    /// @param to The address of the recipient of the message.\\n    /// @param value The msg.value passed to the message call.\\n    /// @param messageNonce The nonce for the message to drop.\\n    /// @param message The content of the message.\\n    function dropMessage(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 messageNonce,\\n        bytes memory message\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"src/L2/gateways/IL2ERC1155Gateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\n/// @title The interface for the ERC1155 cross chain gateway on layer 2.\\ninterface IL2ERC1155Gateway {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    /// @notice Emitted when the ERC1155 NFT is transfered to recipient on layer 2.\\n    /// @param l1Token The address of ERC1155 NFT on layer 1.\\n    /// @param l2Token The address of ERC1155 NFT on layer 2.\\n    /// @param from The address of sender on layer 1.\\n    /// @param to The address of recipient on layer 2.\\n    /// @param tokenId The token id of the ERC1155 NFT deposited on layer 1.\\n    /// @param amount The amount of token deposited.\\n    event FinalizeDepositERC1155(\\n        address indexed l1Token,\\n        address indexed l2Token,\\n        address indexed from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount\\n    );\\n\\n    /// @notice Emitted when the ERC1155 NFT is batch transfered to recipient on layer 2.\\n    /// @param l1Token The address of ERC1155 NFT on layer 1.\\n    /// @param l2Token The address of ERC1155 NFT on layer 2.\\n    /// @param from The address of sender on layer 1.\\n    /// @param to The address of recipient on layer 2.\\n    /// @param tokenIds The list of token ids of the ERC1155 NFT deposited on layer 1.\\n    /// @param amounts The list of corresponding amounts deposited.\\n    event FinalizeBatchDepositERC1155(\\n        address indexed l1Token,\\n        address indexed l2Token,\\n        address indexed from,\\n        address to,\\n        uint256[] tokenIds,\\n        uint256[] amounts\\n    );\\n\\n    /// @notice Emitted when the ERC1155 NFT is transfered to gateway on layer 2.\\n    /// @param l1Token The address of ERC1155 NFT on layer 1.\\n    /// @param l2Token The address of ERC1155 NFT on layer 2.\\n    /// @param from The address of sender on layer 2.\\n    /// @param to The address of recipient on layer 1.\\n    /// @param tokenId The token id of the ERC1155 NFT to withdraw on layer 2.\\n    /// @param amount The amount of token to withdraw.\\n    event WithdrawERC1155(\\n        address indexed l1Token,\\n        address indexed l2Token,\\n        address indexed from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount\\n    );\\n\\n    /// @notice Emitted when the ERC1155 NFT is batch transfered to gateway on layer 2.\\n    /// @param l1Token The address of ERC1155 NFT on layer 1.\\n    /// @param l2Token The address of ERC1155 NFT on layer 2.\\n    /// @param from The address of sender on layer 2.\\n    /// @param to The address of recipient on layer 1.\\n    /// @param tokenIds The list of token ids of the ERC1155 NFT to withdraw on layer 2.\\n    /// @param amounts The list of corresponding amounts to withdraw.\\n    event BatchWithdrawERC1155(\\n        address indexed l1Token,\\n        address indexed l2Token,\\n        address indexed from,\\n        address to,\\n        uint256[] tokenIds,\\n        uint256[] amounts\\n    );\\n\\n    /*****************************\\n     * Public Mutating Functions *\\n     *****************************/\\n\\n    /// @notice Withdraw some ERC1155 NFT to caller's account on layer 1.\\n    /// @param token The address of ERC1155 NFT on layer 2.\\n    /// @param tokenId The token id to withdraw.\\n    /// @param amount The amount of token to withdraw.\\n    /// @param gasLimit Unused, but included for potential forward compatibility considerations.\\n    function withdrawERC1155(\\n        address token,\\n        uint256 tokenId,\\n        uint256 amount,\\n        uint256 gasLimit\\n    ) external payable;\\n\\n    /// @notice Withdraw some ERC1155 NFT to caller's account on layer 1.\\n    /// @param token The address of ERC1155 NFT on layer 2.\\n    /// @param to The address of recipient on layer 1.\\n    /// @param tokenId The token id to withdraw.\\n    /// @param amount The amount of token to withdraw.\\n    /// @param gasLimit Unused, but included for potential forward compatibility considerations.\\n    function withdrawERC1155(\\n        address token,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount,\\n        uint256 gasLimit\\n    ) external payable;\\n\\n    /// @notice Batch withdraw a list of ERC1155 NFT to caller's account on layer 1.\\n    /// @param token The address of ERC1155 NFT on layer 2.\\n    /// @param tokenIds The list of token ids to withdraw.\\n    /// @param amounts The list of corresponding amounts to withdraw.\\n    /// @param gasLimit Unused, but included for potential forward compatibility considerations.\\n    function batchWithdrawERC1155(\\n        address token,\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts,\\n        uint256 gasLimit\\n    ) external payable;\\n\\n    /// @notice Batch withdraw a list of ERC1155 NFT to caller's account on layer 1.\\n    /// @param token The address of ERC1155 NFT on layer 2.\\n    /// @param to The address of recipient on layer 1.\\n    /// @param tokenIds The list of token ids to withdraw.\\n    /// @param amounts The list of corresponding amounts to withdraw.\\n    /// @param gasLimit Unused, but included for potential forward compatibility considerations.\\n    function batchWithdrawERC1155(\\n        address token,\\n        address to,\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts,\\n        uint256 gasLimit\\n    ) external payable;\\n\\n    /// @notice Complete ERC1155 deposit from layer 1 to layer 2 and send NFT to recipient's account on layer 2.\\n    /// @dev Requirements:\\n    ///  - The function should only be called by L2ScrollMessenger.\\n    ///  - The function should also only be called by L1ERC1155Gateway on layer 1.\\n    /// @param l1Token The address of corresponding layer 1 token.\\n    /// @param l2Token The address of corresponding layer 2 token.\\n    /// @param from The address of account who deposits the token on layer 1.\\n    /// @param to The address of recipient on layer 2 to receive the token.\\n    /// @param tokenId The token id to deposit.\\n    /// @param amount The amount of token to deposit.\\n    function finalizeDepositERC1155(\\n        address l1Token,\\n        address l2Token,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice Complete ERC1155 deposit from layer 1 to layer 2 and send NFT to recipient's account on layer 2.\\n    /// @dev Requirements:\\n    ///  - The function should only be called by L2ScrollMessenger.\\n    ///  - The function should also only be called by L1ERC1155Gateway on layer 1.\\n    /// @param l1Token The address of corresponding layer 1 token.\\n    /// @param l2Token The address of corresponding layer 2 token.\\n    /// @param from The address of account who deposits the token on layer 1.\\n    /// @param to The address of recipient on layer 2 to receive the token.\\n    /// @param tokenIds The list of token ids to deposit.\\n    /// @param amounts The list of corresponding amounts to deposit.\\n    function finalizeBatchDepositERC1155(\\n        address l1Token,\\n        address l2Token,\\n        address from,\\n        address to,\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"src/libraries/callbacks/IMessageDropCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface IMessageDropCallback {\\n    function onDropMessage(bytes memory message) external payable;\\n}\\n\"\r\n    },\r\n    \"src/libraries/callbacks/IScrollGatewayCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface IScrollGatewayCallback {\\n    function onScrollGatewayCallback(bytes memory data) external;\\n}\\n\"\r\n    },\r\n    \"src/libraries/constants/ScrollConstants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nlibrary ScrollConstants {\\n    /// @notice The address of default cross chain message sender.\\n    address internal constant DEFAULT_XDOMAIN_MESSAGE_SENDER = address(1);\\n\\n    /// @notice The address for dropping message.\\n    /// @dev The first 20 bytes of keccak(\\\"drop\\\")\\n    address internal constant DROP_XDOMAIN_MESSAGE_SENDER = 0x6f297C61B5C92eF107fFD30CD56AFFE5A273e841;\\n}\\n\"\r\n    },\r\n    \"src/libraries/gateway/IScrollGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface IScrollGateway {\\n    /**********\\n     * Errors *\\n     **********/\\n\\n    /// @dev Thrown when the given address is `address(0)`.\\n    error ErrorZeroAddress();\\n\\n    /// @dev Thrown when the caller is not corresponding `L1ScrollMessenger` or `L2ScrollMessenger`.\\n    error ErrorCallerIsNotMessenger();\\n\\n    /// @dev Thrown when the cross chain sender is not the counterpart gateway contract.\\n    error ErrorCallerIsNotCounterpartGateway();\\n\\n    /// @dev Thrown when ScrollMessenger is not dropping message.\\n    error ErrorNotInDropMessageContext();\\n\\n    /*************************\\n     * Public View Functions *\\n     *************************/\\n\\n    /// @notice The address of corresponding L1/L2 Gateway contract.\\n    function counterpart() external view returns (address);\\n\\n    /// @notice The address of L1GatewayRouter/L2GatewayRouter contract.\\n    function router() external view returns (address);\\n\\n    /// @notice The address of corresponding L1ScrollMessenger/L2ScrollMessenger contract.\\n    function messenger() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"src/libraries/gateway/ScrollGatewayBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport {IScrollGateway} from \\\"./IScrollGateway.sol\\\";\\nimport {IScrollMessenger} from \\\"../IScrollMessenger.sol\\\";\\nimport {IScrollGatewayCallback} from \\\"../callbacks/IScrollGatewayCallback.sol\\\";\\nimport {ScrollConstants} from \\\"../constants/ScrollConstants.sol\\\";\\nimport {ITokenRateLimiter} from \\\"../../rate-limiter/ITokenRateLimiter.sol\\\";\\n\\n/// @title ScrollGatewayBase\\n/// @notice The `ScrollGatewayBase` is a base contract for gateway contracts used in both in L1 and L2.\\nabstract contract ScrollGatewayBase is ReentrancyGuardUpgradeable, OwnableUpgradeable, IScrollGateway {\\n    /*************\\n     * Constants *\\n     *************/\\n\\n    /// @inheritdoc IScrollGateway\\n    address public immutable override counterpart;\\n\\n    /// @inheritdoc IScrollGateway\\n    address public immutable override router;\\n\\n    /// @inheritdoc IScrollGateway\\n    address public immutable override messenger;\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    /// @dev The storage slot used as counterpart gateway contract, which is deprecated now.\\n    address private __counterpart;\\n\\n    /// @dev The storage slot used as gateway router contract, which is deprecated now.\\n    address private __router;\\n\\n    /// @dev The storage slot used as scroll messenger contract, which is deprecated now.\\n    address private __messenger;\\n\\n    /// @dev The storage slot used as token rate limiter contract, which is deprecated now.\\n    address private __rateLimiter;\\n\\n    /// @dev The storage slots for future usage.\\n    uint256[46] private __gap;\\n\\n    /**********************\\n     * Function Modifiers *\\n     **********************/\\n\\n    modifier onlyCallByCounterpart() {\\n        // check caller is messenger\\n        if (_msgSender() != messenger) {\\n            revert ErrorCallerIsNotMessenger();\\n        }\\n\\n        // check cross domain caller is counterpart gateway\\n        if (counterpart != IScrollMessenger(messenger).xDomainMessageSender()) {\\n            revert ErrorCallerIsNotCounterpartGateway();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyInDropContext() {\\n        // check caller is messenger\\n        if (_msgSender() != messenger) {\\n            revert ErrorCallerIsNotMessenger();\\n        }\\n\\n        // check we are dropping message in ScrollMessenger.\\n        if (ScrollConstants.DROP_XDOMAIN_MESSAGE_SENDER != IScrollMessenger(messenger).xDomainMessageSender()) {\\n            revert ErrorNotInDropMessageContext();\\n        }\\n        _;\\n    }\\n\\n    /***************\\n     * Constructor *\\n     ***************/\\n\\n    constructor(\\n        address _counterpart,\\n        address _router,\\n        address _messenger\\n    ) {\\n        if (_counterpart == address(0) || _messenger == address(0)) {\\n            revert ErrorZeroAddress();\\n        }\\n\\n        counterpart = _counterpart;\\n        router = _router;\\n        messenger = _messenger;\\n    }\\n\\n    function _initialize(\\n        address,\\n        address,\\n        address\\n    ) internal {\\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n        OwnableUpgradeable.__Ownable_init();\\n    }\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /// @dev Internal function to forward calldata to target contract.\\n    /// @param _to The address of contract to call.\\n    /// @param _data The calldata passed to the contract.\\n    function _doCallback(address _to, bytes memory _data) internal {\\n        if (_data.length > 0 && _to.code.length > 0) {\\n            IScrollGatewayCallback(_to).onScrollGatewayCallback(_data);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/IScrollMessenger.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface IScrollMessenger {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    /// @notice Emitted when a cross domain message is sent.\\n    /// @param sender The address of the sender who initiates the message.\\n    /// @param target The address of target contract to call.\\n    /// @param value The amount of value passed to the target contract.\\n    /// @param messageNonce The nonce of the message.\\n    /// @param gasLimit The optional gas limit passed to L1 or L2.\\n    /// @param message The calldata passed to the target contract.\\n    event SentMessage(\\n        address indexed sender,\\n        address indexed target,\\n        uint256 value,\\n        uint256 messageNonce,\\n        uint256 gasLimit,\\n        bytes message\\n    );\\n\\n    /// @notice Emitted when a cross domain message is relayed successfully.\\n    /// @param messageHash The hash of the message.\\n    event RelayedMessage(bytes32 indexed messageHash);\\n\\n    /// @notice Emitted when a cross domain message is failed to relay.\\n    /// @param messageHash The hash of the message.\\n    event FailedRelayedMessage(bytes32 indexed messageHash);\\n\\n    /**********\\n     * Errors *\\n     **********/\\n\\n    /// @dev Thrown when the given address is `address(0)`.\\n    error ErrorZeroAddress();\\n\\n    /*************************\\n     * Public View Functions *\\n     *************************/\\n\\n    /// @notice Return the sender of a cross domain message.\\n    function xDomainMessageSender() external view returns (address);\\n\\n    /*****************************\\n     * Public Mutating Functions *\\n     *****************************/\\n\\n    /// @notice Send cross chain message from L1 to L2 or L2 to L1.\\n    /// @param target The address of account who receive the message.\\n    /// @param value The amount of ether passed when call target contract.\\n    /// @param message The content of the message.\\n    /// @param gasLimit Gas limit required to complete the message relay on corresponding chain.\\n    function sendMessage(\\n        address target,\\n        uint256 value,\\n        bytes calldata message,\\n        uint256 gasLimit\\n    ) external payable;\\n\\n    /// @notice Send cross chain message from L1 to L2 or L2 to L1.\\n    /// @param target The address of account who receive the message.\\n    /// @param value The amount of ether passed when call target contract.\\n    /// @param message The content of the message.\\n    /// @param gasLimit Gas limit required to complete the message relay on corresponding chain.\\n    /// @param refundAddress The address of account who will receive the refunded fee.\\n    function sendMessage(\\n        address target,\\n        uint256 value,\\n        bytes calldata message,\\n        uint256 gasLimit,\\n        address refundAddress\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"src/rate-limiter/ITokenRateLimiter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface ITokenRateLimiter {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    /// @notice Emitted when the total limit is updated.\\n    /// @param oldTotalLimit The previous value of total limit before updating.\\n    /// @param newTotalLimit The current value of total limit after updating.\\n    event UpdateTotalLimit(address indexed token, uint256 oldTotalLimit, uint256 newTotalLimit);\\n\\n    /**********\\n     * Errors *\\n     **********/\\n\\n    /// @dev Thrown when the `periodDuration` is initialized to zero.\\n    error PeriodIsZero();\\n\\n    /// @dev Thrown when the `totalAmount` is initialized to zero.\\n    /// @param token The address of the token.\\n    error TotalLimitIsZero(address token);\\n\\n    /// @dev Thrown when an amount breaches the total limit in the period.\\n    /// @param token The address of the token.\\n    error ExceedTotalLimit(address token);\\n\\n    /*****************************\\n     * Public Mutating Functions *\\n     *****************************/\\n\\n    /// @notice Request some token usage for `sender`.\\n    /// @param token The address of the token.\\n    /// @param amount The amount of token to use.\\n    function addUsedAmount(address token, uint256 amount) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_counterpart\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_messenger\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ErrorCallerIsNotCounterpartGateway\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorCallerIsNotMessenger\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorNotInDropMessageContext\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_l2Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"BatchDepositERC1155\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"BatchRefundERC1155\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_l2Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DepositERC1155\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_l2Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"FinalizeBatchWithdrawERC1155\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_l2Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FinalizeWithdrawERC1155\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefundERC1155\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldL2Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newL2Token\",\"type\":\"address\"}],\"name\":\"UpdateTokenMapping\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"batchDepositERC1155\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"batchDepositERC1155\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counterpart\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"depositERC1155\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"depositERC1155\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"finalizeBatchWithdrawERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"finalizeWithdrawERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_counterpart\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_messenger\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messenger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"onDropMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Token\",\"type\":\"address\"}],\"name\":\"updateTokenMapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "L1ERC1155Gateway", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000062597cc19703af10b58fef87b0d5d29efe263bcc0000000000000000000000006774bcbd5cecef1336b5300fb5186a12ddd8b367", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}