{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/dexsniffer.sol\": {\r\n      \"content\": \"/**\\n\\nWebsite: https://www.dexsniffer.io/\\n\\nTwitter: https://twitter.com/Dex_Sniffer\\n\\nTelegram: https://t.me/Dex_Sniffer\\n\\n\\n*/\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\ninterface IERC20Metadata is IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\ninterface IUniswapV2Router02 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\\ncontract DexSniffer is IERC20Metadata, Ownable {\\n    mapping(address => uint256) private _tOwned;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    mapping(address => bool) public isExcludedFromFee;\\n    mapping(address => bool) public isExcludedFromMaxWalletToken;\\n\\n    address payable public marketingWallet;\\n    address payable public devWallet;\\n    address payable public constant burnWallet =\\n        payable(0x000000000000000000000000000000000000dEaD);\\n\\n    uint8 private constant _decimals = 9;\\n    uint256 private _tTotal = 10**9 * 10**_decimals;\\n    string private constant _name = \\\"Dex Sniffer\\\";\\n    string private constant _symbol = \\\"DS\\\";\\n\\n    uint256 public swapMinTokens = _tTotal / 500;\\n\\n    uint256 public buyTax = 20;\\n    uint256 public sellTax = 50;\\n    uint256 public maxTransactionTax = 90;\\n\\n    uint256 public marketingPct = 40;\\n    uint256 public devPct = 40;\\n    uint256 public maxPct = 100;\\n\\n    uint256 public maxWalletSize = (_tTotal * 2) / maxPct;\\n\\n    IUniswapV2Router02 public _uniswapV2Router;\\n    address public uniswapV2Pair;\\n    bool public inSwapAndLiquify;\\n\\n    event SwapAndLiquify(\\n        uint256 tokensSwapped,\\n        uint256 ethReceived,\\n        uint256 tokensIntoLiqudity\\n    );\\n\\n    event UpdatedBuySellTaxes(uint256 buyTax, uint256 sellTax);\\n    event UpdatedPercentTaxes(uint256 marketing, uint256 dev);\\n    event UpdatedIsExcludedFromFee(address account, bool flag);\\n    event UpdatedIsExcludedFromMaxWallet(address account, bool flag);\\n    event UpdatedMarketingAndDevWallet(address marketing, address dev);\\n\\n    modifier lockTheSwap() {\\n        inSwapAndLiquify = true;\\n        _;\\n        inSwapAndLiquify = false;\\n    }\\n\\n    constructor() {\\n        _tOwned[owner()] = _tTotal;\\n\\n        address uniswapRouterAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n        _uniswapV2Router = IUniswapV2Router02(uniswapRouterAddress);\\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\n            .createPair(address(this), _uniswapV2Router.WETH());\\n        address marketing = address(0x1efbfe128509d2cB2CBc9575ab3DC2eEB1654f16);\\n        address dev = address(0x4C8354abB533213A38e476a5Ec04955b7441C136);\\n\\n        marketingWallet = payable(marketing);\\n        devWallet = payable(dev);\\n\\n        isExcludedFromFee[owner()] = true;\\n        isExcludedFromFee[address(this)] = true;\\n        isExcludedFromFee[marketingWallet] = true;\\n        isExcludedFromFee[devWallet] = true;\\n        isExcludedFromFee[burnWallet] = true;\\n        isExcludedFromFee[uniswapRouterAddress] = true;\\n\\n        isExcludedFromMaxWalletToken[uniswapRouterAddress] = true;\\n        isExcludedFromMaxWalletToken[owner()] = true;\\n        isExcludedFromMaxWalletToken[address(this)] = true;\\n        isExcludedFromMaxWalletToken[marketingWallet] = true;\\n        isExcludedFromMaxWalletToken[devWallet] = true;\\n        isExcludedFromMaxWalletToken[burnWallet] = true;\\n        isExcludedFromMaxWalletToken[uniswapV2Pair] = true;\\n\\n        emit Transfer(address(0), owner(), _tTotal);\\n    }\\n\\n    function name() public pure returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public pure returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public pure returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _tOwned[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address theOwner, address theSpender)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[theOwner][theSpender];\\n    }\\n\\n    function approve(address spender, uint256 amount)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()] - amount\\n        );\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender] + addedValue\\n        );\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender] - subtractedValue\\n        );\\n        return true;\\n    }\\n\\n    receive() external payable {}\\n\\n    function _approve(\\n        address theOwner,\\n        address theSpender,\\n        uint256 amount\\n    ) private {\\n        require(\\n            theOwner != address(0) && theSpender != address(0),\\n            \\\"Zero address.\\\"\\n        );\\n        _allowances[theOwner][theSpender] = amount;\\n        emit Approval(theOwner, theSpender, amount);\\n    }\\n\\n    function setTax(uint256 buy, uint256 sell) public onlyOwner {\\n        require(buy <= maxTransactionTax, \\\"Buy tax cannot exceed the maximum.\\\");\\n        require(\\n            sell <= maxTransactionTax,\\n            \\\"Sell tax cannot exceed the maximum.\\\"\\n        );\\n\\n        buyTax = buy;\\n        sellTax = sell;\\n\\n        emit UpdatedBuySellTaxes(buy, sell);\\n    }\\n\\n    function setPercentTax(uint256 marketing, uint256 dev) public onlyOwner {\\n        require(\\n            marketing + dev == maxPct,\\n            \\\"The sum of percentages must equal 100.\\\"\\n        );\\n        marketingPct = marketing;\\n        devPct = dev;\\n\\n        emit UpdatedPercentTaxes(marketing, dev);\\n    }\\n\\n    function excludeFromFee(address account) external onlyOwner {\\n        isExcludedFromFee[account] = true;\\n\\n        emit UpdatedIsExcludedFromFee(account, true);\\n    }\\n\\n    function includeInFee(address account) external onlyOwner {\\n        isExcludedFromFee[account] = false;\\n\\n        emit UpdatedIsExcludedFromFee(account, false);\\n    }\\n\\n    function excludeMaxWallet(address account) external onlyOwner {\\n        isExcludedFromMaxWalletToken[account] = true;\\n        emit UpdatedIsExcludedFromMaxWallet(account, true);\\n    }\\n\\n    function includeMaxWallet(address account) external onlyOwner {\\n        isExcludedFromMaxWalletToken[account] = false;\\n        emit UpdatedIsExcludedFromMaxWallet(account, false);\\n    }\\n\\n    function setWallets(address marketing, address dev) public onlyOwner {\\n        require(\\n            marketing != address(0) && dev != address(0),\\n            \\\"Invalid wallet addresses.\\\"\\n        );\\n        isExcludedFromFee[marketingWallet] = false;\\n        isExcludedFromFee[devWallet] = false;\\n\\n        marketingWallet = payable(marketing);\\n        devWallet = payable(dev);\\n\\n        isExcludedFromFee[marketing] = true;\\n        isExcludedFromFee[dev] = true;\\n\\n        emit UpdatedMarketingAndDevWallet(marketing, dev);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) private {\\n        if (!isExcludedFromMaxWalletToken[to]) {\\n            uint256 heldTokens = balanceOf(to);\\n            require(\\n                (heldTokens + amount) <= maxWalletSize,\\n                \\\"Over wallet limit.\\\"\\n            );\\n        }\\n\\n        require(from != address(0) && to != address(0), \\\"Using 0 address!\\\");\\n\\n        require(amount > 0, \\\"Token value must be higher than zero.\\\");\\n\\n        if (\\n            balanceOf(address(this)) >= swapMinTokens &&\\n            !inSwapAndLiquify &&\\n            from != uniswapV2Pair\\n        ) {\\n            swapAndDistributeTaxes();\\n        }\\n\\n        _tokenTransfer(from, to, amount);\\n    }\\n\\n    function multipleAirdrop(\\n        address[] memory _address,\\n        uint256[] memory _amount\\n    ) external onlyOwner {\\n        require(_address.length == _amount.length, \\\"Arrays length mismatch\\\");\\n        uint256 totalAmount = 0;\\n        for (uint256 i = 0; i < _amount.length; i++) {\\n            totalAmount += _amount[i];\\n        }\\n        require(\\n            balanceOf(msg.sender) >= totalAmount * 10**decimals(),\\n            \\\"Insufficient balance\\\"\\n        );\\n\\n        for (uint256 i = 0; i < _amount.length; i++) {\\n            address adr = _address[i];\\n            uint256 amnt = _amount[i] * 10**decimals();\\n            _transfer(msg.sender, adr, amnt);\\n        }\\n    }\\n\\n    function _sendToWallet(address payable wallet, uint256 amount) private {\\n        wallet.transfer(amount);\\n    }\\n\\n    function setSwapMinTokens(uint256 minTokens) external onlyOwner {\\n        swapMinTokens = minTokens * 10**decimals();\\n        require(\\n            swapMinTokens < totalSupply(),\\n            \\\"Min tokens for swap is too high.\\\"\\n        );\\n    }\\n\\n    function swapAndDistributeTaxes() private lockTheSwap {\\n        uint256 contractTokenBalance = balanceOf(address(this));\\n        uint256 marketingTokensShare = (contractTokenBalance * marketingPct) /\\n            maxPct;\\n        uint256 devTokensShare = (contractTokenBalance * devPct) / maxPct;\\n\\n        uint256 ethBalanceBeforeSwap = address(this).balance;\\n        swapTokensForETH(marketingTokensShare + devTokensShare);\\n        uint256 ethReceived = address(this).balance - ethBalanceBeforeSwap;\\n\\n        uint256 marketingSplit = (marketingPct * maxPct) /\\n            (marketingPct + devPct);\\n        uint256 ethToMarketing = (ethReceived * marketingSplit) / maxPct;\\n\\n        // uint256 devSplit = (devPct * maxPct) / (marketingPct + devPct);\\n        // uint256 ethToDev = (ethReceived * devSplit) / maxPct;\\n\\n        _sendToWallet(marketingWallet, ethToMarketing);\\n        _sendToWallet(devWallet, address(this).balance);\\n    }\\n\\n    function swapTokensForETH(uint256 tokenAmount) private {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = _uniswapV2Router.WETH();\\n        _approve(address(this), address(_uniswapV2Router), tokenAmount);\\n        _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function withdraw() external onlyOwner {\\n        uint256 contractBalance = address(this).balance;\\n        require(contractBalance > 0, \\\"DS::Contract balance is empty\\\");\\n\\n        (bool status, ) = payable(owner()).call{value: contractBalance}(\\\"\\\");\\n\\n        require(status, \\\"DS::Failed to send contract balance\\\");\\n    }\\n\\n    function removeStuckTokens(address tokenAddress, uint256 pctOfTokens)\\n        public\\n        returns (bool _sent)\\n    {\\n        require(tokenAddress != address(this), \\\"Can not remove native token.\\\");\\n        require(\\n            pctOfTokens <= 100,\\n            \\\"Percentage must be less than or equal to 100.\\\"\\n        );\\n        uint256 totalRandom = IERC20(tokenAddress).balanceOf(address(this));\\n        uint256 removeRandom = (totalRandom * pctOfTokens) / maxPct;\\n        _sent = IERC20(tokenAddress).transfer(devWallet, removeRandom);\\n    }\\n\\n    function _tokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tAmount\\n    ) private {\\n        bool isBuy = (from == uniswapV2Pair);\\n        bool isSell = (to == uniswapV2Pair);\\n        bool isBuyOrSell = isBuy || isSell;\\n        bool takeFee = isBuyOrSell &&\\n            !(isExcludedFromFee[from] || isExcludedFromFee[to]);\\n\\n        uint256 fee = !takeFee ? 0 : isBuy\\n            ? (tAmount * buyTax) / maxPct\\n            : (tAmount * sellTax) / maxPct;\\n        uint256 tTransferAmount = tAmount - fee;\\n\\n        _tOwned[from] = _tOwned[from] - tAmount;\\n        _tOwned[to] = _tOwned[to] + tTransferAmount;\\n        _tOwned[address(this)] = _tOwned[address(this)] + fee;\\n        emit Transfer(from, to, tTransferAmount);\\n        if (to == burnWallet) _tTotal = _tTotal - tTransferAmount;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellTax\",\"type\":\"uint256\"}],\"name\":\"UpdatedBuySellTaxes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"UpdatedIsExcludedFromFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"UpdatedIsExcludedFromMaxWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"marketing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dev\",\"type\":\"address\"}],\"name\":\"UpdatedMarketingAndDevWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dev\",\"type\":\"uint256\"}],\"name\":\"UpdatedPercentTaxes\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"theOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"theSpender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devPct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwapAndLiquify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxWalletToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingPct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_address\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"multipleAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pctOfTokens\",\"type\":\"uint256\"}],\"name\":\"removeStuckTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_sent\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dev\",\"type\":\"uint256\"}],\"name\":\"setPercentTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minTokens\",\"type\":\"uint256\"}],\"name\":\"setSwapMinTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"}],\"name\":\"setTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dev\",\"type\":\"address\"}],\"name\":\"setWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMinTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DexSniffer", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}