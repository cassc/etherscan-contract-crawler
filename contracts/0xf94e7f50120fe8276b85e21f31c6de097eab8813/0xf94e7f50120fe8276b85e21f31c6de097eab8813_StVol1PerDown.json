{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@pythnetwork/pyth-sdk-solidity/IPyth.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PythStructs.sol\\\";\\nimport \\\"./IPythEvents.sol\\\";\\n\\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\\n/// @dev Please refer to the guidance at https://docs.pyth.network/consumers/best-practices for how to consume prices safely.\\n/// @author Pyth Data Association\\ninterface IPyth is IPythEvents {\\n    /// @notice Returns the period (in seconds) that a price feed is considered valid since its publish time\\n    function getValidTimePeriod() external view returns (uint validTimePeriod);\\n\\n    /// @notice Returns the price and confidence interval.\\n    /// @dev Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\\n    /// @param id The Pyth Price Feed ID of which to fetch the price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price and confidence interval.\\n    /// @dev Reverts if the EMA price is not available.\\n    /// @param id The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price of a price feed without any sanity checks.\\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\\n    /// However, if the price is not recent this function returns the latest available price.\\n    ///\\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\\n    /// the returned price is recent or useful for any particular application.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\\n    /// of the current time.\\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Update price feeds with given update messages.\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    /// Prices will be updated if they are more recent than the current stored prices.\\n    /// The call will succeed even if the update is not the most recent.\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\\n\\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\\n    ///\\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\\n    function updatePriceFeedsIfNecessary(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64[] calldata publishTimes\\n    ) external payable;\\n\\n    /// @notice Returns the required fee to update an array of price updates.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    function getUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method does not store the price updates on-chain.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n}\\n\"\r\n    },\r\n    \"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @title IPythEvents contains the events that Pyth contract emits.\\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\\ninterface IPythEvents {\\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param publishTime Publish time of the given price update.\\n    /// @param price Price of the given price update.\\n    /// @param conf Confidence interval of the given price update.\\n    event PriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 publishTime,\\n        int64 price,\\n        uint64 conf\\n    );\\n\\n    /// @dev Emitted when a batch price update is processed successfully.\\n    /// @param chainId ID of the source chain that the batch price update comes from.\\n    /// @param sequenceNumber Sequence number of the batch price update.\\n    event BatchPriceFeedUpdate(uint16 chainId, uint64 sequenceNumber);\\n}\\n\"\r\n    },\r\n    \"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ncontract PythStructs {\\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\\n    //\\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\\n    // Both the price and confidence are stored in a fixed-point numeric representation,\\n    // `x * (10^expo)`, where `expo` is the exponent.\\n    //\\n    // Please refer to the documentation at https://docs.pyth.network/consumers/best-practices for how\\n    // to how this price safely.\\n    struct Price {\\n        // Price\\n        int64 price;\\n        // Confidence interval around the price\\n        uint64 conf;\\n        // Price exponent\\n        int32 expo;\\n        // Unix timestamp describing when the price was published\\n        uint publishTime;\\n    }\\n\\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\\n    struct PriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Latest available price\\n        Price price;\\n        // Latest available exponentially-weighted moving average price\\n        Price emaPrice;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/StVol.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\\\";\\nimport \\\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\\\";\\n\\ncontract StVol is Ownable, Pausable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public immutable token; // Prediction token\\n\\n    IPyth public oracle;\\n\\n    bool public genesisOpenOnce = false;\\n    bool public genesisStartOnce = false;\\n\\n    bytes32 public priceId; // address of the pyth price\\n    address public adminAddress; // address of the admin\\n    address public operatorAddress; // address of the operator\\n    address public operatorVaultAddress; // address of the operator vault\\n\\n    uint256 public bufferSeconds; // number of seconds for valid execution of a participate round\\n    uint256 public intervalSeconds; // interval in seconds between two participate rounds\\n\\n    uint256 public minParticipateAmount; // minimum participate amount (denominated in wei)\\n    uint256 public commissionfee; // commission rate (e.g. 200 = 2%, 150 = 1.50%)\\n    uint256 public treasuryAmount; // treasury amount that was not claimed\\n    uint256 public operateRate; // operate distribute rate (e.g. 200 = 2%, 150 = 1.50%)\\n    uint256 public participantRate; // participant distribute rate (e.g. 200 = 2%, 150 = 1.50%)\\n    int256 public strategyRate; // strategy rate (e.g. 100 = 1%)\\n    StrategyType public strategyType; // strategy type\\n\\n    uint256 public currentEpoch; // current epoch for round\\n\\n    uint256 public constant BASE = 10000; // 100%\\n    uint256 public constant MAX_COMMISSION_FEE = 200; // 2%\\n\\n    uint256 public constant DEFAULT_MIN_PARTICIPATE_AMOUNT = 1000000; // 1 USDC\\n    uint256 public constant DEFAULT_INTERVAL_SECONDS = 86400; // 24 * 60 * 60 * 1(1day)\\n    uint256 public constant DEFAULT_BUFFER_SECONDS = 600; // 60 * 10 (10min)\\n\\n    mapping(uint256 => mapping(Position => mapping(address => ParticipateInfo)))\\n        public ledger;\\n    mapping(uint256 => Round) public rounds;\\n    mapping(address => uint256[]) public userRounds;\\n\\n    enum Position {\\n        Over,\\n        Under\\n    }\\n\\n    enum StrategyType {\\n        None,\\n        Up,\\n        Down\\n    }\\n\\n    struct Round {\\n        uint256 epoch;\\n        uint256 openTimestamp;\\n        uint256 startTimestamp;\\n        uint256 closeTimestamp;\\n        int256 startPrice;\\n        int256 closePrice;\\n        uint256 startOracleId;\\n        uint256 closeOracleId;\\n        uint256 totalAmount;\\n        uint256 overAmount;\\n        uint256 underAmount;\\n        uint256 rewardBaseCalAmount;\\n        uint256 rewardAmount;\\n        bool oracleCalled;\\n    }\\n\\n    struct ParticipateInfo {\\n        Position position;\\n        uint256 amount;\\n        bool claimed; // default false\\n    }\\n\\n    event ParticipateUnder(\\n        address indexed sender,\\n        uint256 indexed epoch,\\n        uint256 amount\\n    );\\n    event ParticipateOver(\\n        address indexed sender,\\n        uint256 indexed epoch,\\n        uint256 amount\\n    );\\n    event Claim(\\n        address indexed sender,\\n        uint256 indexed epoch,\\n        Position position,\\n        uint256 amount\\n    );\\n    event EndRound(uint256 indexed epoch, int256 price);\\n    event StartRound(uint256 indexed epoch, int256 price);\\n    event PythPriceInfo(int64 price, uint publishTime);\\n\\n    event NewAdminAddress(address admin);\\n    event NewBufferAndIntervalSeconds(\\n        uint256 bufferSeconds,\\n        uint256 intervalSeconds\\n    );\\n    event NewMinParticipateAmount(\\n        uint256 indexed epoch,\\n        uint256 minParticipateAmount\\n    );\\n    event NewCommissionfee(uint256 indexed epoch, uint256 commissionfee);\\n    event NewOperatorAddress(address operator);\\n    event NewOperatorVaultAddress(address operatorVault);\\n    event NewOracle(address oracle);\\n\\n    event Pause(uint256 indexed epoch);\\n    event RewardsCalculated(\\n        uint256 indexed epoch,\\n        uint256 rewardBaseCalAmount,\\n        uint256 rewardAmount,\\n        uint256 treasuryAmount\\n    );\\n\\n    event OpenRound(\\n        uint256 indexed epoch,\\n        int256 strategyRate,\\n        StrategyType strategyType\\n    );\\n    event TokenRecovery(address indexed token, uint256 amount);\\n    event TreasuryClaim(uint256 amount);\\n    event Unpause(uint256 indexed epoch);\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == adminAddress, \\\"Not admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdminOrOperator() {\\n        require(\\n            msg.sender == adminAddress ||\\n                msg.sender == operatorAddress,\\n            \\\"Not operator/admin\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(msg.sender == operatorAddress, \\\"Not operator\\\");\\n        _;\\n    }\\n\\n    modifier notContract() {\\n        require(!_isContract(msg.sender), \\\"Contract not allowed\\\");\\n        require(msg.sender == tx.origin, \\\"Proxy contract not allowed\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Constructor\\n     * @param _token: prediction token\\n     * @param _oracleAddress: oracle address\\n     * @param _adminAddress: admin address\\n     * @param _operatorAddress: operator address\\n     * @param _operatorVaultAddress: operator vault address\\n     * @param _commissionfee: commission fee (1000 = 10%)\\n     * @param _operateRate: operate rate (10000 = 100%)\\n     * @param _strategyRate: strategy rate (100 = 1%)\\n     * @param _strategyType: strategy type\\n     * @param _priceId: pyth price address\\n     */\\n    constructor(\\n        address _token,\\n        address _oracleAddress,\\n        address _adminAddress,\\n        address _operatorAddress,\\n        address _operatorVaultAddress,\\n        uint256 _commissionfee,\\n        uint256 _operateRate,\\n        int256 _strategyRate,\\n        StrategyType _strategyType,\\n        bytes32 _priceId\\n    ) {\\n        require(\\n            _commissionfee <= MAX_COMMISSION_FEE,\\n            \\\"Commission fee too high\\\"\\n        );\\n        if (_strategyRate > 0) {\\n            require(\\n                _strategyType != StrategyType.None,\\n                \\\"Strategy Type must be Up or Down\\\"\\n            );\\n        } else {\\n            require(\\n                _strategyType == StrategyType.None,\\n                \\\"Strategy Type must be None\\\"\\n            );\\n        }\\n\\n        token = IERC20(_token);\\n        oracle = IPyth(_oracleAddress);\\n        adminAddress = _adminAddress;\\n        operatorAddress = _operatorAddress;\\n        operatorVaultAddress = _operatorVaultAddress;\\n        commissionfee = _commissionfee;\\n        operateRate = _operateRate;\\n        strategyRate = _strategyRate;\\n        strategyType = _strategyType;\\n        priceId = _priceId;\\n\\n        intervalSeconds = DEFAULT_INTERVAL_SECONDS;\\n        bufferSeconds = DEFAULT_BUFFER_SECONDS;\\n        minParticipateAmount = DEFAULT_MIN_PARTICIPATE_AMOUNT;\\n    }\\n\\n    /**\\n     * @notice Participate under position\\n     * @param epoch: epoch\\n     */\\n    function participateUnder(\\n        uint256 epoch,\\n        uint256 _amount\\n    ) external whenNotPaused nonReentrant notContract {\\n        require(epoch == currentEpoch, \\\"Participate is too early/late\\\");\\n        require(_participable(epoch), \\\"Round not participable\\\");\\n        require(\\n            _amount >= minParticipateAmount,\\n            \\\"Participate amount must be greater than minParticipateAmount\\\"\\n        );\\n\\n        token.safeTransferFrom(msg.sender, address(this), _amount);\\n        // Update round data\\n        uint256 amount = _amount;\\n        Round storage round = rounds[epoch];\\n        round.totalAmount = round.totalAmount + amount;\\n        round.underAmount = round.underAmount + amount;\\n\\n        // Update user data\\n        ParticipateInfo storage participateInfo = ledger[epoch][Position.Under][\\n            msg.sender\\n        ];\\n        participateInfo.position = Position.Under;\\n        participateInfo.amount = participateInfo.amount + amount;\\n        userRounds[msg.sender].push(epoch);\\n\\n        emit ParticipateUnder(msg.sender, epoch, amount);\\n    }\\n\\n    /**\\n     * @notice Participate over position\\n     * @param epoch: epoch\\n     */\\n    function participateOver(\\n        uint256 epoch,\\n        uint256 _amount\\n    ) external whenNotPaused nonReentrant notContract {\\n        require(epoch == currentEpoch, \\\"Participate is too early/late\\\");\\n        require(_participable(epoch), \\\"Round not participable\\\");\\n        require(\\n            _amount >= minParticipateAmount,\\n            \\\"Participate amount must be greater than minParticipateAmount\\\"\\n        );\\n\\n        token.safeTransferFrom(msg.sender, address(this), _amount);\\n        // Update round data\\n        uint256 amount = _amount;\\n        Round storage round = rounds[epoch];\\n        round.totalAmount = round.totalAmount + amount;\\n        round.overAmount = round.overAmount + amount;\\n\\n        // Update user data\\n        ParticipateInfo storage participateInfo = ledger[epoch][Position.Over][\\n            msg.sender\\n        ];\\n        participateInfo.position = Position.Over;\\n        participateInfo.amount = participateInfo.amount + amount;\\n        userRounds[msg.sender].push(epoch);\\n\\n        emit ParticipateOver(msg.sender, epoch, amount);\\n    }\\n\\n    /**\\n     * @notice Claim reward for an epoch\\n     * @param epoch: epoch\\n     */\\n    function claim(\\n        uint256 epoch,\\n        Position position\\n    ) external nonReentrant notContract {\\n        uint256 reward; // Initializes reward\\n\\n        require(rounds[epoch].openTimestamp != 0, \\\"Round has not started\\\");\\n        require(\\n            block.timestamp > rounds[epoch].closeTimestamp,\\n            \\\"Round has not ended\\\"\\n        );\\n\\n        uint256 addedReward = 0;\\n\\n        // Round valid, claim rewards\\n        if (rounds[epoch].oracleCalled) {\\n            require(\\n                claimable(epoch, position, msg.sender),\\n                \\\"Not eligible for claim\\\"\\n            );\\n            Round memory round = rounds[epoch];\\n            if ((round.overAmount > 0 && round.underAmount > 0) && (round.startPrice != round.closePrice)) {\\n                addedReward +=\\n                    (ledger[epoch][position][msg.sender].amount *\\n                        round.rewardAmount) /\\n                    round.rewardBaseCalAmount;\\n            } else {\\n                // no winner\\n            }\\n        } else {\\n            // Round invalid, refund Participate amount\\n            require(\\n                refundable(epoch, position, msg.sender),\\n                \\\"Not eligible for refund\\\"\\n            );\\n        }\\n        ledger[epoch][position][msg.sender].claimed = true;\\n        reward = ledger[epoch][position][msg.sender].amount + addedReward;\\n\\n        emit Claim(msg.sender, epoch, position, reward);\\n\\n        if (reward > 0) {\\n            token.safeTransfer(msg.sender, reward);\\n        }\\n    }\\n\\n    /**\\n     * @notice Claim all reward for user\\n     */\\n    function claimAll() external nonReentrant notContract {\\n        _trasferReward(msg.sender);\\n    }\\n\\n    /**\\n     * @notice redeem all assets\\n     * @dev Callable by admin\\n     */\\n    function redeemAll(address _user) external whenPaused onlyAdmin {\\n        _trasferReward(_user);\\n    }\\n\\n    /**\\n     * @notice Open the next round n, lock price for round n-1, end round n-2\\n     * @dev Callable by operator\\n     */\\n    function executeRound(\\n        int64 pythPrice,\\n        uint256 initDate\\n    ) external whenNotPaused onlyOperator {\\n        require(\\n            genesisOpenOnce && genesisStartOnce,\\n            \\\"Can only run after genesisOpenRound and genesisStartRound is triggered\\\"\\n        );\\n\\n        // CurrentEpoch refers to previous round (n-1)\\n        _safeStartRound(currentEpoch, pythPrice);\\n        _safeEndRound(currentEpoch - 1, pythPrice);\\n        _calculateRewards(currentEpoch - 1);\\n\\n        // Increment currentEpoch to current round (n)\\n        currentEpoch = currentEpoch + 1;\\n        _safeOpenRound(currentEpoch, initDate);\\n    }\\n\\n    function executePythPriceUpdate(\\n        bytes[] calldata priceUpdateData\\n    ) external payable whenNotPaused onlyOperator {\\n        uint fee = oracle.getUpdateFee(priceUpdateData);\\n        oracle.updatePriceFeeds{value: fee}(priceUpdateData);\\n        PythStructs.Price memory pythPrice = oracle.getPrice(priceId);\\n\\n        emit PythPriceInfo(pythPrice.price, pythPrice.publishTime);\\n    }\\n\\n    /**\\n     * @notice Start genesis round\\n     * @dev Callable by operator\\n     */\\n    function genesisStartRound(\\n        int64 pythPrice,\\n        uint256 initDate\\n    ) external whenNotPaused onlyOperator {\\n        require(\\n            genesisOpenOnce,\\n            \\\"Can only run after genesisOpenRound is triggered\\\"\\n        );\\n        require(!genesisStartOnce, \\\"Can only run genesisStartRound once\\\");\\n\\n        _safeStartRound(currentEpoch, pythPrice);\\n\\n        currentEpoch = currentEpoch + 1;\\n        _openRound(currentEpoch, initDate);\\n        genesisStartOnce = true;\\n    }\\n\\n    /**\\n     * @notice Open genesis round\\n     * @dev Callable by admin or operator\\n     */\\n    function genesisOpenRound(\\n        uint256 initDate\\n    ) external whenNotPaused onlyOperator {\\n        require(!genesisOpenOnce, \\\"Can only run genesisOpenRound once\\\");\\n\\n        currentEpoch = currentEpoch + 1;\\n        _openRound(currentEpoch, initDate);\\n        genesisOpenOnce = true;\\n    }\\n\\n    /**\\n     * @notice called by the admin to pause, triggers stopped state\\n     * @dev Callable by admin or operator\\n     */\\n    function pause() external whenNotPaused onlyAdminOrOperator {\\n        _pause();\\n        emit Pause(currentEpoch);\\n    }\\n\\n    /**\\n     * @notice Claim all rewards in treasury\\n     * @dev Callable by admin\\n     */\\n    function claimTreasury() external nonReentrant onlyAdmin {\\n        uint256 currentTreasuryAmount = treasuryAmount;\\n        treasuryAmount = 0;\\n\\n        // operator 100%\\n        token.safeTransfer(\\n            operatorVaultAddress,\\n            (currentTreasuryAmount * operateRate) / BASE\\n        );\\n\\n        emit TreasuryClaim(currentTreasuryAmount);\\n    }\\n\\n    /**\\n     * @notice called by the admin to unpause, returns to normal state\\n     * Reset genesis state. Once paused, the rounds would need to be kickstarted by genesis\\n     * @dev Callable by admin or operator \\n     */\\n    function unpause() external whenPaused onlyAdminOrOperator {\\n        genesisOpenOnce = false;\\n        genesisStartOnce = false;\\n        _unpause();\\n\\n        emit Unpause(currentEpoch);\\n    }\\n\\n    /**\\n     * @notice Set buffer and interval (in seconds)\\n     * @dev Callable by admin\\n     */\\n    function setBufferAndIntervalSeconds(\\n        uint256 _bufferSeconds,\\n        uint256 _intervalSeconds\\n    ) external whenPaused onlyAdmin {\\n        require(\\n            _bufferSeconds < _intervalSeconds,\\n            \\\"bufferSeconds must be inferior to intervalSeconds\\\"\\n        );\\n        bufferSeconds = _bufferSeconds;\\n        intervalSeconds = _intervalSeconds;\\n\\n        emit NewBufferAndIntervalSeconds(_bufferSeconds, _intervalSeconds);\\n    }\\n\\n    /**\\n     * @notice Set operator address\\n     * @dev Callable by admin\\n     */\\n    function setOperator(address _operatorAddress) external onlyAdmin {\\n        require(_operatorAddress != address(0), \\\"Cannot be zero address\\\");\\n        operatorAddress = _operatorAddress;\\n        emit NewOperatorAddress(_operatorAddress);\\n    }\\n    \\n    /**\\n     * @notice Set operator vault address\\n     * @dev Callable by admin\\n     */\\n    function setOperatorVault(\\n        address _operatorVaultAddress\\n    ) external onlyAdmin {\\n        require(\\n            _operatorVaultAddress != address(0),\\n            \\\"Cannot be zero address\\\"\\n        );\\n        operatorVaultAddress = _operatorVaultAddress;\\n        emit NewOperatorVaultAddress(_operatorVaultAddress);\\n    }\\n\\n    /**\\n     * @notice Set Oracle address\\n     * @dev Callable by admin\\n     */\\n    function setOracle(address _oracle) external whenPaused onlyAdmin {\\n        require(_oracle != address(0), \\\"Cannot be zero address\\\");\\n        oracle = IPyth(_oracle);\\n\\n        emit NewOracle(_oracle);\\n    }\\n\\n    /**\\n     * @notice Set treasury fee\\n     * @dev Callable by admin\\n     */\\n    function setCommissionfee(\\n        uint256 _commissionfee\\n    ) external whenPaused onlyAdmin {\\n        require(\\n            _commissionfee <= MAX_COMMISSION_FEE,\\n            \\\"Commission fee too high\\\"\\n        );\\n        commissionfee = _commissionfee;\\n        emit NewCommissionfee(currentEpoch, commissionfee);\\n    }\\n\\n    function _trasferReward(address _user) internal {\\n        uint256 reward = 0; // Initializes reward\\n\\n        for (uint256 epoch = 1; epoch <= currentEpoch; epoch++) {\\n            if (rounds[epoch].startTimestamp == 0 || (block.timestamp < rounds[epoch].closeTimestamp + bufferSeconds)) continue;\\n\\n            Round memory round = rounds[epoch];\\n            // 0: Over, 1: Under\\n            uint8 pst = 0;\\n            while(pst <= uint(Position.Under)) {\\n                Position position = pst == 0 ? Position.Over : Position.Under;\\n                uint256 addedReward = 0;\\n\\n                // Round vaild, claim rewards\\n                if (claimable(epoch, position, _user)) {\\n                    if ((round.overAmount > 0 && round.underAmount > 0) && (round.startPrice != round.closePrice)) {\\n                        addedReward +=\\n                            (ledger[epoch][position][_user].amount *\\n                                round.rewardAmount) /\\n                            round.rewardBaseCalAmount;\\n                    }\\n                    addedReward += ledger[epoch][position][_user].amount;\\n                } else {\\n                    // Round invaild, refund bet amount\\n                    if (refundable(epoch, position, _user)) {\\n                        addedReward += ledger[epoch][position][_user].amount;\\n                    }\\n                }\\n\\n                if (addedReward != 0) {\\n                    ledger[epoch][position][_user].claimed = true;\\n                    reward += addedReward;\\n                    emit Claim(_user, epoch, position, addedReward);\\n                }\\n                pst++;\\n            }\\n        }\\n\\n        if (reward > 0) {\\n            token.safeTransfer(_user, reward);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set admin address\\n     * @dev Callable by owner\\n     */\\n    function setAdmin(address _adminAddress) external onlyOwner {\\n        require(_adminAddress != address(0), \\\"Cannot be zero address\\\");\\n        adminAddress = _adminAddress;\\n\\n        emit NewAdminAddress(_adminAddress);\\n    }\\n\\n\\n    /**\\n     * @notice Returns round epochs and participate information for a user that has participated\\n     * @param user: user address\\n     * @param cursor: cursor\\n     * @param size: size\\n     */\\n    function getUserRounds(\\n        address user,\\n        uint256 cursor,\\n        uint256 size\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory,\\n            ParticipateInfo[] memory,\\n            ParticipateInfo[] memory,\\n            uint256\\n        )\\n    {\\n        uint256 length = size;\\n\\n        if (length > userRounds[user].length - cursor) {\\n            length = userRounds[user].length - cursor;\\n        }\\n\\n        uint256[] memory values = new uint256[](length);\\n        ParticipateInfo[] memory overParticipateInfo = new ParticipateInfo[](\\n            length\\n        );\\n        ParticipateInfo[] memory underParticipateInfo = new ParticipateInfo[](\\n            length\\n        );\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            values[i] = userRounds[user][cursor + i];\\n            for (uint8 j = 0; j < 2; j++) {\\n                Position p = (j == 0) ? Position.Over : Position.Under;\\n                if (p == Position.Over) {\\n                    overParticipateInfo[i] = ledger[values[i]][p][user];\\n                } else {\\n                    underParticipateInfo[i] = ledger[values[i]][p][user];\\n                }\\n            }\\n        }\\n\\n        return (\\n            values,\\n            overParticipateInfo,\\n            underParticipateInfo,\\n            cursor + length\\n        );\\n    }\\n\\n    /**\\n     * @notice Returns round epochs length\\n     * @param user: user address\\n     */\\n    function getUserRoundsLength(address user) external view returns (uint256) {\\n        return userRounds[user].length;\\n    }\\n\\n    /**\\n     * @notice Get the claimable stats of specific epoch and user account\\n     * @param epoch: epoch\\n     * @param position: Position\\n     * @param user: user address\\n     */\\n    function claimable(\\n        uint256 epoch,\\n        Position position,\\n        address user\\n    ) public view returns (bool) {\\n        ParticipateInfo memory participateInfo = ledger[epoch][position][user];\\n        Round memory round = rounds[epoch];\\n        \\n        bool isPossible = false;\\n        if (round.overAmount > 0 && round.underAmount > 0) {\\n            isPossible = ((round.closePrice > _getStrategyRatePrice(round.startPrice) &&\\n                participateInfo.position == Position.Over) ||\\n                (round.closePrice < _getStrategyRatePrice(round.startPrice) &&\\n                    participateInfo.position == Position.Under) ||\\n                (round.closePrice == _getStrategyRatePrice(round.startPrice)));\\n        } else {\\n            // refund user's fund if there is no paticipation on the other side\\n            isPossible = true;\\n        }\\n\\n        return\\n            round.oracleCalled &&\\n            participateInfo.amount != 0 &&\\n            !participateInfo.claimed && isPossible;\\n    }\\n\\n    /**\\n     * @notice Get the refundable stats of specific epoch and user account\\n     * @param epoch: epoch\\n     * @param user: user address\\n     */\\n    function refundable(\\n        uint256 epoch,\\n        Position position,\\n        address user\\n    ) public view returns (bool) {\\n        ParticipateInfo memory participateInfo = ledger[epoch][position][user];\\n        Round memory round = rounds[epoch];\\n        return\\n            !round.oracleCalled &&\\n            !participateInfo.claimed &&\\n            block.timestamp > round.closeTimestamp + bufferSeconds &&\\n            participateInfo.amount != 0;\\n    }\\n\\n    /**\\n     * @notice Calculate rewards for round\\n     * @param epoch: epoch\\n     */\\n    function _calculateRewards(uint256 epoch) internal {\\n        require(\\n            rounds[epoch].rewardBaseCalAmount == 0 &&\\n                rounds[epoch].rewardAmount == 0,\\n            \\\"Rewards calculated\\\"\\n        );\\n        Round storage round = rounds[epoch];\\n        uint256 rewardBaseCalAmount;\\n        uint256 treasuryAmt;\\n        uint256 rewardAmount;\\n\\n        // No participation on the other side refund participant amount to users \\n        if (round.overAmount == 0 || round.underAmount == 0) {\\n                rewardBaseCalAmount = 0;\\n                rewardAmount = 0;\\n                treasuryAmt = 0;\\n        } else {\\n            // Over wins\\n            if (round.closePrice > _getStrategyRatePrice(round.startPrice)) {\\n                rewardBaseCalAmount = round.overAmount;\\n                treasuryAmt = (round.underAmount * commissionfee) / BASE;\\n                rewardAmount = round.underAmount - treasuryAmt;\\n            }\\n            // Under wins\\n            else if (round.closePrice < _getStrategyRatePrice(round.startPrice)) {\\n                rewardBaseCalAmount = round.underAmount;\\n                treasuryAmt = (round.overAmount * commissionfee) / BASE;\\n                rewardAmount = round.overAmount - treasuryAmt;\\n            }\\n            // No one wins refund participant amount to users\\n            else {\\n                rewardBaseCalAmount = 0;\\n                rewardAmount = 0;\\n                treasuryAmt = 0;\\n            }\\n        }\\n        round.rewardBaseCalAmount = rewardBaseCalAmount;\\n        round.rewardAmount = rewardAmount;\\n\\n        // Add to treasury\\n        treasuryAmount += treasuryAmt;\\n\\n        emit RewardsCalculated(\\n            epoch,\\n            rewardBaseCalAmount,\\n            rewardAmount,\\n            treasuryAmt\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculate start price applied with strategy Rate\\n     * @param price: start price\\n     */\\n    function _getStrategyRatePrice(\\n        int256 price\\n    ) internal view returns (int256) {\\n        if (strategyType == StrategyType.Up) {\\n            return price + (price * strategyRate) / int256(BASE);\\n        } else if (strategyType == StrategyType.Down) {\\n            return price - (price * strategyRate) / int256(BASE);\\n        } else {\\n            return price;\\n        }\\n    }\\n\\n    /**\\n     * @notice End round\\n     * @param epoch: epoch\\n     * @param price: price of the round\\n     */\\n    function _safeEndRound(uint256 epoch, int256 price) internal {\\n        require(\\n            rounds[epoch].startTimestamp != 0,\\n            \\\"Can only end round after round has locked\\\"\\n        );\\n        require(\\n            block.timestamp >= rounds[epoch].closeTimestamp,\\n            \\\"Can only end round after closeTimestamp\\\"\\n        );\\n        require(\\n            block.timestamp <= rounds[epoch].closeTimestamp + bufferSeconds,\\n            \\\"Can only end round within bufferSeconds\\\"\\n        );\\n        Round storage round = rounds[epoch];\\n        round.closePrice = price;\\n        round.oracleCalled = true;\\n\\n        emit EndRound(epoch, round.closePrice);\\n    }\\n\\n    /**\\n     * @notice Start round\\n     * @param epoch: epoch\\n     * @param price: price of the round\\n     */\\n    function _safeStartRound(uint256 epoch, int256 price) internal {\\n        require(\\n            rounds[epoch].openTimestamp != 0,\\n            \\\"Can only lock round after round has started\\\"\\n        );\\n        require(\\n            block.timestamp >= rounds[epoch].startTimestamp,\\n            \\\"Can only start round after startTimestamp\\\"\\n        );\\n        require(\\n            block.timestamp <= rounds[epoch].startTimestamp + bufferSeconds,\\n            \\\"Can only start round within bufferSeconds\\\"\\n        );\\n        Round storage round = rounds[epoch];\\n        round.startPrice = price;\\n\\n        emit StartRound(epoch, round.startPrice);\\n    }\\n\\n    /**\\n     * @notice Open round\\n     * Previous round n-2 must end\\n     * @param epoch: epoch\\n     * @param initDate: initDate\\n     */\\n    function _safeOpenRound(uint256 epoch, uint256 initDate) internal {\\n        require(\\n            genesisOpenOnce,\\n            \\\"Can only run after genesisOpenRound is triggered\\\"\\n        );\\n        require(\\n            rounds[epoch - 2].closeTimestamp != 0,\\n            \\\"Can only open round after round n-2 has ended\\\"\\n        );\\n        require(\\n            block.timestamp >= rounds[epoch - 2].closeTimestamp,\\n            \\\"Can only open new round after round n-2 closeTimestamp\\\"\\n        );\\n        require(\\n            block.timestamp >= initDate,\\n            \\\"Can only open new round after init date\\\"\\n        );\\n        _openRound(epoch, initDate);\\n    }\\n\\n    /**\\n     * @notice Start round\\n     * Previous round n-2 must end\\n     * @param epoch: epoch\\n     * @param initDate: initDate\\n     */\\n    function _openRound(uint256 epoch, uint256 initDate) internal {\\n        require(\\n            block.timestamp >= initDate,\\n            \\\"Can only open new round after init date\\\"\\n        );\\n\\n        Round storage round = rounds[epoch];\\n        round.openTimestamp = initDate;\\n        round.startTimestamp = initDate + intervalSeconds;\\n        round.closeTimestamp = initDate + (2 * intervalSeconds);\\n        round.epoch = epoch;\\n        round.totalAmount = 0;\\n\\n        emit OpenRound(epoch, strategyRate, strategyType);\\n    }\\n\\n    /**\\n     * @notice Determine if a round is valid for receiving bets\\n     * Round must have started and locked\\n     * Current timestamp must be within openTimestamp and closeTimestamp\\n     */\\n    function _participable(uint256 epoch) internal view returns (bool) {\\n        return\\n            rounds[epoch].openTimestamp != 0 &&\\n            rounds[epoch].startTimestamp != 0 &&\\n            block.timestamp > rounds[epoch].openTimestamp &&\\n            block.timestamp < rounds[epoch].startTimestamp;\\n    }\\n\\n    /**\\n     * @notice Returns true if `account` is a contract.\\n     * @param account: account address\\n     */\\n    function _isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n    event TestEvent(uint256 data);\\n}\\n\"\r\n    },\r\n    \"contracts/StVol1PerDown.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./StVol.sol\\\";\\n\\n/**\\n * @title StVol1PerDown\\n */\\ncontract StVol1PerDown is StVol {\\n    constructor(\\n        address _token,\\n        address _oracleAddress,\\n        address _adminAddress,\\n        address _operatorAddress,\\n        address _operatorVaultAddress,\\n        uint256 _commissionfee,\\n        uint256 _operateRate,\\n        bytes32 _priceId\\n    ) \\n    StVol(\\n        _token,\\n        _oracleAddress,\\n        _adminAddress,\\n        _operatorAddress,\\n        _operatorVaultAddress,\\n        _commissionfee,\\n        _operateRate,\\n        100, // 100: 1%\\n        StVol.StrategyType.Down,\\n        _priceId\\n    ) {}\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_adminAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operatorVaultAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_commissionfee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_operateRate\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_priceId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum StVol.Position\",\"name\":\"position\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"}],\"name\":\"EndRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"NewAdminAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bufferSeconds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"intervalSeconds\",\"type\":\"uint256\"}],\"name\":\"NewBufferAndIntervalSeconds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commissionfee\",\"type\":\"uint256\"}],\"name\":\"NewCommissionfee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minParticipateAmount\",\"type\":\"uint256\"}],\"name\":\"NewMinParticipateAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"NewOperatorAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operatorVault\",\"type\":\"address\"}],\"name\":\"NewOperatorVaultAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"NewOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"strategyRate\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"enum StVol.StrategyType\",\"name\":\"strategyType\",\"type\":\"uint8\"}],\"name\":\"OpenRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ParticipateOver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ParticipateUnder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"name\":\"PythPriceInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardBaseCalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasuryAmount\",\"type\":\"uint256\"}],\"name\":\"RewardsCalculated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"}],\"name\":\"StartRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"TestEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TreasuryClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_BUFFER_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_INTERVAL_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_MIN_PARTICIPATE_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_COMMISSION_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bufferSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"enum StVol.Position\",\"name\":\"position\",\"type\":\"uint8\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"enum StVol.Position\",\"name\":\"position\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commissionfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"priceUpdateData\",\"type\":\"bytes[]\"}],\"name\":\"executePythPriceUpdate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int64\",\"name\":\"pythPrice\",\"type\":\"int64\"},{\"internalType\":\"uint256\",\"name\":\"initDate\",\"type\":\"uint256\"}],\"name\":\"executeRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisOpenOnce\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initDate\",\"type\":\"uint256\"}],\"name\":\"genesisOpenRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisStartOnce\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int64\",\"name\":\"pythPrice\",\"type\":\"int64\"},{\"internalType\":\"uint256\",\"name\":\"initDate\",\"type\":\"uint256\"}],\"name\":\"genesisStartRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"getUserRounds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"enum StVol.Position\",\"name\":\"position\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"internalType\":\"struct StVol.ParticipateInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum StVol.Position\",\"name\":\"position\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"internalType\":\"struct StVol.ParticipateInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserRoundsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"intervalSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum StVol.Position\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ledger\",\"outputs\":[{\"internalType\":\"enum StVol.Position\",\"name\":\"position\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minParticipateAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operateRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorVaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IPyth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"participantRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"participateOver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"participateUnder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"redeemAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"enum StVol.Position\",\"name\":\"position\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"refundable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"startPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"closePrice\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startOracleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeOracleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardBaseCalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"oracleCalled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminAddress\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bufferSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_intervalSeconds\",\"type\":\"uint256\"}],\"name\":\"setBufferAndIntervalSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commissionfee\",\"type\":\"uint256\"}],\"name\":\"setCommissionfee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operatorVaultAddress\",\"type\":\"address\"}],\"name\":\"setOperatorVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyRate\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyType\",\"outputs\":[{\"internalType\":\"enum StVol.StrategyType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userRounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StVol1PerDown", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000004305fb66699c3b2702d4d05cf36551390a4c69c600000000000000000000000093072915e6fd257ca98ed80343d6fbc8e2426c9f0000000000000000000000005e6c12e083b1ad5fb7c7bf5582467eb74cd58a66000000000000000000000000fb6b24942a19f138ef468ec39ce8653a8750083200000000000000000000000000000000000000000000000000000000000000c80000000000000000000000000000000000000000000000000000000000002710ff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}