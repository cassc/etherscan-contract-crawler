{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/OpenOracleFramework.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./interfaces/IConjureFactory.sol\\\";\\nimport \\\"./interfaces/IConjureRouter.sol\\\";\\n\\ncontract OpenOracleFramework {\\n\\n    // using Openzeppelin contracts for SafeMath and Address\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    // the address of the collateral contract factory\\n    address public factoryContract;\\n\\n    // address used for pay out\\n    address payable public payoutAddress;\\n\\n    // number of signers\\n    uint256 public signerLength;\\n\\n    // addresses of the signers\\n    address[] public signers;\\n\\n    // threshold which has to be reached\\n    uint256 public signerThreshold;\\n\\n    // struct to keep the values for each individual round\\n    struct feedRoundStruct {\\n        uint256 value;\\n        uint256 timestamp;\\n    }\\n\\n    // stores historical values of feeds\\n    mapping(uint256 => mapping(uint256 => uint256)) private historicalFeeds;\\n\\n    // indicates if sender is a signer\\n    mapping(address => bool) private isSigner;\\n\\n    // mapping to store the actual submitted values per FeedId, per round number\\n    mapping(uint256 => mapping(uint256 => mapping(address => feedRoundStruct))) private feedRoundNumberToStructMapping;\\n\\n    // indicates support of feeds\\n    mapping(uint256 => uint256) public feedSupport;\\n\\n    // indicates if address si subscribed to a feed\\n    mapping(address => mapping(uint256 => uint256)) private subscribedTo;\\n\\n    struct oracleStruct {\\n        string feedName;\\n        uint256 feedDecimals;\\n        uint256 feedTimeslot;\\n        uint256 latestPrice;\\n        uint256 latestPriceUpdate;\\n        // 0... donation, 1... subscription\\n        uint256 revenueMode;\\n        uint256 feedCost;\\n    }\\n\\n    oracleStruct[] private feedList;\\n\\n    // indicates if oracle subscription is turned on. 0 indicates no pass\\n    uint256 public subscriptionPassPrice;\\n\\n    mapping(address => uint256) private hasPass;\\n\\n    struct proposalStruct {\\n        uint256 uintValue;\\n        address addressValue;\\n        address proposer;\\n        // 0 ... pricePass\\n        // 1 ... threshold\\n        // 2 ... add signer\\n        // 3 ... remove signer\\n        // 4 ... payoutAddress\\n        // 5 ... revenueMode\\n        // 6 ... feedCost\\n        uint256 proposalType;\\n        uint256 proposalFeedId;\\n        uint256 proposalActive;\\n    }\\n\\n    proposalStruct[] public proposalList;\\n\\n    mapping(uint256 => mapping(address => bool)) private hasSignedProposal;\\n\\n    event contractSetup(address[] signers, uint256 signerThreshold, address payout);\\n    event feedAdded(string name, string description, uint256 decimal, uint256 timeslot, uint256 feedId, uint256 mode, uint256 price);\\n    event feedSigned(uint256 feedId, uint256 roundId, uint256 value, uint256 timestamp, address signer);\\n    event routerFeeTaken(uint256 value, address sender);\\n    event feedSupported(uint256 feedId, uint256 supportvalue);\\n    event newProposal(uint256 proposalId, uint256 uintValue, address addressValue, uint256 oracleType, address proposer);\\n    event proposalSigned(uint256 proposalId, address signer);\\n    event newFee(uint256 value);\\n    event newThreshold(uint256 value);\\n    event newSigner(address signer);\\n    event signerRemoved(address signer);\\n    event newPayoutAddress(address payout);\\n    event newRevenueMode(uint256 mode, uint256 feed);\\n    event newFeedCost(uint256 cost, uint256 feed);\\n    event subscriptionPassPriceUpdated(uint256 newPass);\\n\\n    // only Signer modifier\\n    modifier onlySigner {\\n        _onlySigner();\\n        _;\\n    }\\n\\n    // only Signer view\\n    function _onlySigner() private view {\\n        require(isSigner[msg.sender], \\\"Only a signer can perform this action\\\");\\n    }\\n\\n    constructor() {\\n        // Don't allow implementation to be initialized.\\n        //factoryContract = address(1);\\n    }\\n\\n    function initialize(\\n        address[] memory signers_,\\n        uint256 signerThreshold_,\\n        address payable payoutAddress_,\\n        uint256 subscriptionPassPrice_,\\n        address factoryContract_\\n    ) external\\n    {\\n        require(factoryContract == address(0), \\\"already initialized\\\");\\n        require(factoryContract_ != address(0), \\\"factory can not be null\\\");\\n        require(signerThreshold_ != 0, \\\"Threshold cant be 0\\\");\\n        require(signerThreshold_ <= signers_.length, \\\"Threshold cant be more then signer count\\\");\\n\\n        factoryContract = factoryContract_;\\n        signerThreshold = signerThreshold_;\\n        signers = signers_;\\n\\n        for(uint i=0; i< signers.length; i++) {\\n            require(signers[i] != address(0), \\\"Not zero address\\\");\\n            isSigner[signers[i]] = true;\\n        }\\n\\n        signerLength = signers_.length;\\n        payoutAddress = payoutAddress_;\\n        subscriptionPassPrice = subscriptionPassPrice_;\\n\\n        emit contractSetup(signers_, signerThreshold, payoutAddress);\\n    }\\n\\n    //---------------------------helper functions---------------------------\\n\\n    /**\\n    * @dev implementation of a quicksort algorithm\\n    *\\n    * @param arr the array to be sorted\\n    * @param left the left outer bound element to start the sort\\n    * @param right the right outer bound element to stop the sort\\n    */\\n    function quickSort(uint[] memory arr, int left, int right) private pure {\\n        int i = left;\\n        int j = right;\\n        if (i == j) return;\\n        uint pivot = arr[uint(left + (right - left) / 2)];\\n        while (i <= j) {\\n            while (arr[uint(i)] < pivot) i++;\\n            while (pivot < arr[uint(j)]) j--;\\n            if (i <= j) {\\n                (arr[uint(i)], arr[uint(j)]) = (arr[uint(j)], arr[uint(i)]);\\n                i++;\\n                j--;\\n            }\\n        }\\n        if (left < j)\\n            quickSort(arr, left, j);\\n        if (i < right)\\n            quickSort(arr, i, right);\\n    }\\n\\n    /**\\n    * @dev sort implementation which calls the quickSort function\\n    *\\n    * @param data the array to be sorted\\n    * @return the sorted array\\n    */\\n    function sort(uint[] memory data) private pure returns (uint[] memory) {\\n        quickSort(data, int(0), int(data.length - 1));\\n        return data;\\n    }\\n\\n    //---------------------------view functions ---------------------------\\n\\n    function getHistoricalFeeds(uint256[] memory feedIDs, uint256[] memory timestamps) external view returns (uint256[] memory) {\\n\\n        uint256 feedLen = feedIDs.length;\\n        uint256[] memory returnPrices = new uint256[](feedLen);\\n        require(feedIDs.length == timestamps.length, \\\"Feeds and Timestamps must match\\\");\\n\\n        for (uint i = 0; i < feedIDs.length; i++) {\\n\\n            if (subscriptionPassPrice > 0) {\\n                if (hasPass[msg.sender] <= block.timestamp) {\\n                    if (feedList[feedIDs[i]].revenueMode == 1 && subscribedTo[msg.sender][feedIDs[i]] < block.timestamp) {\\n                        revert(\\\"No subscription to feed\\\");\\n                    }\\n                }\\n            } else {\\n                if (feedList[feedIDs[i]].revenueMode == 1 && subscribedTo[msg.sender][feedIDs[i]] < block.timestamp) {\\n                    revert(\\\"No subscription to feed\\\");\\n                }\\n            }\\n\\n            uint256 roundNumber = timestamps[i] / feedList[feedIDs[i]].feedTimeslot;\\n            returnPrices[i] =  historicalFeeds[feedIDs[i]][roundNumber];\\n        }\\n\\n        return (returnPrices);\\n    }\\n\\n\\n    /**\\n    * @dev getFeeds function lets anyone call the oracle to receive data (maybe pay an optional fee)\\n    *\\n    * @param feedIDs the array of feedIds\\n    */\\n    function getFeeds(uint256[] memory feedIDs) external view returns (uint256[] memory, uint256[] memory, uint256[] memory) {\\n\\n        uint256 feedLen = feedIDs.length;\\n        uint256[] memory returnPrices = new uint256[](feedLen);\\n        uint256[] memory returnTimestamps = new uint256[](feedLen);\\n        uint256[] memory returnDecimals = new uint256[](feedLen);\\n\\n        for (uint i = 0; i < feedIDs.length; i++) {\\n            (returnPrices[i] ,returnTimestamps[i], returnDecimals[i]) = getFeed(feedIDs[i]);\\n        }\\n\\n        return (returnPrices, returnTimestamps, returnDecimals);\\n    }\\n\\n    /**\\n    * @dev getFeed function lets anyone call the oracle to receive data (maybe pay an optional fee)\\n    *\\n    * @param feedID the array of feedId\\n    */\\n    function getFeed(uint256 feedID) public view returns (uint256, uint256, uint256) {\\n\\n        uint256 returnPrice;\\n        uint256 returnTimestamp;\\n        uint256 returnDecimals;\\n\\n        if (subscriptionPassPrice > 0) {\\n            if (hasPass[msg.sender] <= block.timestamp) {\\n                if (feedList[feedID].revenueMode == 1 && subscribedTo[msg.sender][feedID] < block.timestamp) {\\n                    revert(\\\"No subscription to feed\\\");\\n                }\\n            }\\n        } else {\\n            if (feedList[feedID].revenueMode == 1 && subscribedTo[msg.sender][feedID] < block.timestamp) {\\n                revert(\\\"No subscription to feed\\\");\\n            }\\n        }\\n\\n        returnPrice = feedList[feedID].latestPrice;\\n        returnTimestamp = feedList[feedID].latestPriceUpdate;\\n        returnDecimals = feedList[feedID].feedDecimals;\\n\\n        return (returnPrice, returnTimestamp, returnDecimals);\\n    }\\n\\n    function getFeedLength() external view returns(uint256){\\n        return feedList.length;\\n    }\\n\\n    function getFeedList(uint256[] memory feedIDs) external view returns(string[] memory, uint256[] memory, uint256[] memory, uint256[] memory, uint256[] memory) {\\n\\n        uint256 feedLen = feedIDs.length;\\n        string[] memory returnNames = new string[](feedLen);\\n        uint256[] memory returnDecimals = new uint256[](feedLen);\\n        uint256[] memory returnTimeslot = new uint256[](feedLen);\\n        uint256[] memory returnRevenueMode = new uint256[](feedLen);\\n        uint256[] memory returnCost = new uint256[](feedLen);\\n\\n        for (uint i = 0; i < feedIDs.length; i++) {\\n            returnNames[i] = feedList[feedIDs[i]].feedName;\\n            returnDecimals[i] = feedList[feedIDs[i]].feedDecimals;\\n            returnTimeslot[i] = feedList[feedIDs[i]].feedTimeslot;\\n            returnRevenueMode[i] = feedList[feedIDs[i]].revenueMode;\\n            returnCost[i] = feedList[feedIDs[i]].feedCost;\\n        }\\n\\n        return (returnNames, returnDecimals, returnTimeslot, returnRevenueMode, returnCost);\\n    }\\n\\n    //---------------------------oracle management functions ---------------------------\\n\\n    // function to withdraw funds\\n    function withdrawFunds() external {\\n\\n        if (payoutAddress == address(0)) {\\n            for (uint n = 0; n < signers.length; n++){\\n                payable(signers[n]).transfer(address(this).balance/signers.length);\\n            }\\n        } else {\\n            payoutAddress.transfer(address(this).balance);\\n        }\\n    }\\n\\n    function createNewFeeds(string[] memory names, string[] memory descriptions, uint256[] memory decimals, uint256[] memory timeslots, uint256[] memory feedCosts, uint256[] memory revenueModes) onlySigner external {\\n        require(names.length == descriptions.length, \\\"Length mismatch\\\");\\n        require(descriptions.length == decimals.length, \\\"Length mismatch\\\");\\n        require(decimals.length == timeslots.length, \\\"Length mismatch\\\");\\n        require(timeslots.length == feedCosts.length, \\\"Length mismatch\\\");\\n        require(feedCosts.length == revenueModes.length, \\\"Length mismatch\\\");\\n\\n        for(uint i = 0; i < names.length; i++) {\\n            require(decimals[i] <= 18, \\\"Decimal places too high\\\");\\n            require(timeslots[i] > 0, \\\"Timeslot cannot be 0\\\");\\n            require(revenueModes[i] <= 1, \\\"Wrong revenueMode parameter\\\");\\n\\n            feedList.push(oracleStruct({\\n            feedName: names[i],\\n            feedDecimals: decimals[i],\\n            feedTimeslot: timeslots[i],\\n            latestPrice: 0,\\n            latestPriceUpdate: 0,\\n            revenueMode: revenueModes[i],\\n            feedCost: feedCosts[i]\\n            }));\\n\\n            emit feedAdded(names[i], descriptions[i], decimals[i], timeslots[i], feedList.length - 1, revenueModes[i], feedCosts[i]);\\n        }\\n    }\\n\\n    /**\\n    * @dev submitFeed function lets a signer submit as many feeds as they want to\\n    *\\n    * @param values the array of values\\n    * @param feedIDs the array of feedIds\\n    */\\n    function submitFeed(uint256[] memory feedIDs, uint256[] memory values) onlySigner external {\\n        require(values.length == feedIDs.length, \\\"Value length and feedID length do not match\\\");\\n\\n        // process feeds\\n        for (uint i = 0; i < values.length; i++) {\\n            // get current round number for feed\\n            uint256 roundNumber = block.timestamp / feedList[feedIDs[i]].feedTimeslot;\\n\\n            // check if the signer already pushed an update for the given period\\n            if (feedRoundNumberToStructMapping[feedIDs[i]][roundNumber][msg.sender].timestamp != 0) {\\n                delete feedRoundNumberToStructMapping[feedIDs[i]][roundNumber][msg.sender];\\n            }\\n\\n            // feed - number and push value\\n            feedRoundNumberToStructMapping[feedIDs[i]][roundNumber][msg.sender] = feedRoundStruct({\\n            value: values[i],\\n            timestamp: block.timestamp\\n            });\\n\\n            emit feedSigned(feedIDs[i], roundNumber, values[i], block.timestamp, msg.sender);\\n\\n            // check if threshold was met\\n            uint256 signedFeedsLen;\\n            uint256[] memory prices = new uint256[](signers.length);\\n            uint256 k;\\n\\n            for (uint j = 0; j < signers.length; j++) {\\n                if (feedRoundNumberToStructMapping[feedIDs[i]][roundNumber][signers[j]].timestamp != 0) {\\n                    signedFeedsLen++;\\n                    prices[k++] = feedRoundNumberToStructMapping[feedIDs[i]][roundNumber][signers[j]].value;\\n                }\\n            }\\n\\n            // Change the list size of the array in place\\n            assembly {\\n                mstore(prices, k)\\n            }\\n\\n            // if threshold is met process price\\n            if (signedFeedsLen >= signerThreshold) {\\n\\n                uint[] memory sorted = sort(prices);\\n                uint returnPrice;\\n\\n                // uneven so we can take the middle\\n                if (sorted.length % 2 == 1) {\\n                    uint sizer = (sorted.length + 1) / 2;\\n                    returnPrice = sorted[sizer-1];\\n                    // take average of the 2 most inner numbers\\n                } else {\\n                    uint size1 = (sorted.length) / 2;\\n                    returnPrice =  (sorted[size1-1]+sorted[size1])/2;\\n                }\\n\\n                // process the struct for storing\\n                if (block.timestamp / feedList[feedIDs[i]].feedTimeslot > feedList[feedIDs[i]].latestPriceUpdate / feedList[feedIDs[i]].feedTimeslot) {\\n                    historicalFeeds[feedIDs[i]][feedList[feedIDs[i]].latestPriceUpdate / feedList[feedIDs[i]].feedTimeslot] = feedList[feedIDs[i]].latestPrice;\\n                }\\n                feedList[feedIDs[i]].latestPriceUpdate = block.timestamp;\\n                feedList[feedIDs[i]].latestPrice = returnPrice;\\n            }\\n        }\\n    }\\n\\n    function signProposal(uint256 proposalId) onlySigner external {\\n        require(proposalList[proposalId].proposalActive != 0, \\\"Proposal not active\\\");\\n\\n        hasSignedProposal[proposalId][msg.sender] = true;\\n        emit proposalSigned(proposalId, msg.sender);\\n\\n        uint256 signedProposalLen;\\n\\n        for(uint i = 0; i < signers.length; i++) {\\n            if (hasSignedProposal[proposalId][signers[i]]) {\\n                signedProposalLen++;\\n            }\\n        }\\n\\n        // execute proposal\\n        if (signedProposalLen >= signerThreshold) {\\n            if (proposalList[proposalId].proposalType == 0) {\\n                updatePricePass(proposalList[proposalId].uintValue);\\n            } else if (proposalList[proposalId].proposalType == 1) {\\n                updateThreshold(proposalList[proposalId].uintValue);\\n            } else if (proposalList[proposalId].proposalType == 2) {\\n                addSigners(proposalList[proposalId].addressValue);\\n            } else if (proposalList[proposalId].proposalType == 3) {\\n                removeSigner(proposalList[proposalId].addressValue);\\n            } else if (proposalList[proposalId].proposalType == 4) {\\n                updatePayoutAddress(proposalList[proposalId].addressValue);\\n            } else if (proposalList[proposalId].proposalType == 5) {\\n                updateRevenueMode(proposalList[proposalId].uintValue, proposalList[proposalId].proposalFeedId);\\n            } else {\\n                updateFeedCost(proposalList[proposalId].uintValue, proposalList[proposalId].proposalFeedId);\\n            }\\n\\n            // lock proposal\\n            proposalList[proposalId].proposalActive = 0;\\n        }\\n    }\\n\\n    function createProposal(uint256 uintValue, address addressValue, uint256 proposalType, uint256 feedId) onlySigner external {\\n\\n        uint256 proposalArrayLen = proposalList.length;\\n\\n        // fee or threshold\\n        if (proposalType == 0 || proposalType == 1 || proposalType == 7) {\\n            proposalList.push(proposalStruct({\\n            uintValue: uintValue,\\n            addressValue: address(0),\\n            proposer: msg.sender,\\n            proposalType: proposalType,\\n            proposalFeedId: 0,\\n            proposalActive: 1\\n            }));\\n        } else if (proposalType == 5 || proposalType == 6) {\\n            proposalList.push(proposalStruct({\\n            uintValue: uintValue,\\n            addressValue: address(0),\\n            proposer: msg.sender,\\n            proposalType: proposalType,\\n            proposalFeedId : feedId,\\n            proposalActive: 1\\n            }));\\n        } else {\\n            proposalList.push(proposalStruct({\\n            uintValue: 0,\\n            addressValue: addressValue,\\n            proposer: msg.sender,\\n            proposalType: proposalType,\\n            proposalFeedId : 0,\\n            proposalActive: 1\\n            }));\\n        }\\n\\n        hasSignedProposal[proposalArrayLen][msg.sender] = true;\\n\\n        emit newProposal(proposalArrayLen, uintValue, addressValue, proposalType, msg.sender);\\n        emit proposalSigned(proposalArrayLen, msg.sender);\\n    }\\n\\n    function updatePricePass(uint256 newPricePass) private {\\n        subscriptionPassPrice = newPricePass;\\n\\n        emit subscriptionPassPriceUpdated(newPricePass);\\n    }\\n\\n    function updateRevenueMode(uint256 newRevenueModeValue, uint256 feedId ) private {\\n        require(newRevenueModeValue <= 1, \\\"Invalid argument for revenue Mode\\\");\\n        feedList[feedId].revenueMode = newRevenueModeValue;\\n        emit newRevenueMode(newRevenueModeValue, feedId);\\n    }\\n\\n    function updateFeedCost(uint256 feedCost, uint256 feedId) private {\\n        require(feedCost > 0, \\\"Feed price cant be 0\\\");\\n        feedList[feedId].feedCost = feedCost;\\n        emit newFeedCost(feedCost, feedId);\\n    }\\n\\n    function updateThreshold(uint256 newThresholdValue) private {\\n        require(newThresholdValue != 0, \\\"Threshold cant be 0\\\");\\n        require(newThresholdValue <= signerLength, \\\"Threshold cant be bigger then length of signers\\\");\\n\\n        signerThreshold = newThresholdValue;\\n        emit newThreshold(newThresholdValue);\\n    }\\n\\n    function addSigners(address newSignerValue) private {\\n\\n        // check for duplicate signer\\n        for (uint i=0; i < signers.length; i++) {\\n            if (signers[i] == newSignerValue) {\\n                revert(\\\"Signer already exists\\\");\\n            }\\n        }\\n\\n        signers.push(newSignerValue);\\n        signerLength++;\\n        isSigner[newSignerValue] = true;\\n        emit newSigner(newSignerValue);\\n    }\\n\\n    function updatePayoutAddress(address newPayoutAddressValue) private {\\n        payoutAddress = payable(newPayoutAddressValue);\\n        emit newPayoutAddress(newPayoutAddressValue);\\n    }\\n\\n    function removeSigner(address toRemove) internal {\\n        require(isSigner[toRemove], \\\"Address to remove has to be a signer\\\");\\n        require(signers.length -1 >= signerThreshold, \\\"Less signers than threshold\\\");\\n\\n        for (uint i = 0; i < signers.length; i++) {\\n            if (signers[i] == toRemove) {\\n                delete signers[i];\\n                signerLength --;\\n                isSigner[toRemove] = false;\\n                emit signerRemoved(toRemove);\\n            }\\n        }\\n    }\\n\\n    //---------------------------subscription functions---------------------------\\n\\n    function subscribeToFeed(uint256[] memory feedIDs, uint256[] memory durations, address buyer) payable external {\\n        require(feedIDs.length == durations.length, \\\"Length mismatch\\\");\\n\\n        uint256 total;\\n        for (uint i = 0; i < feedIDs.length; i++) {\\n            require(feedList[feedIDs[i]].revenueMode == 1, \\\"Donation mode turned on\\\");\\n            require(durations[i] >= 3600, \\\"Minimum subscription is 1h\\\");\\n\\n            if (subscribedTo[buyer][feedIDs[i]] <=block.timestamp) {\\n                subscribedTo[buyer][feedIDs[i]] = block.timestamp.add(durations[i]);\\n            } else {\\n                subscribedTo[buyer][feedIDs[i]] = subscribedTo[buyer][feedIDs[i]].add(durations[i]);\\n            }\\n\\n            total += feedList[feedIDs[i]].feedCost * durations[i] / 3600;\\n        }\\n\\n        // check if enough payment was sent\\n        require(msg.value >= total, \\\"Not enough funds sent to cover oracle fees\\\");\\n\\n        // send feeds to router\\n        address payable conjureRouter = IConjureFactory(factoryContract).getConjureRouter();\\n        IConjureRouter(conjureRouter).deposit{value:msg.value/50}();\\n        emit routerFeeTaken(msg.value/50, msg.sender);\\n    }\\n\\n    function buyPass(address buyer, uint256 duration) payable external {\\n        require(subscriptionPassPrice != 0, \\\"Subscription Pass turned off\\\");\\n        require(duration >= 3600, \\\"Minimum subscription is 1h\\\");\\n        require(msg.value >= subscriptionPassPrice * duration / 86400, \\\"Not enough payment\\\");\\n\\n        if (hasPass[buyer] <=block.timestamp) {\\n            hasPass[buyer] = block.timestamp.add(duration);\\n        } else {\\n            hasPass[buyer] = hasPass[buyer].add(duration);\\n        }\\n\\n        address payable conjureRouter = IConjureFactory(factoryContract).getConjureRouter();\\n        IConjureRouter(conjureRouter).deposit{value:msg.value/50}();\\n        emit routerFeeTaken(msg.value/50, msg.sender);\\n    }\\n\\n    function supportFeeds(uint256[] memory feedIds, uint256[] memory values) payable external {\\n        require(feedIds.length == values.length, \\\"Length mismatch\\\");\\n\\n        uint256 total;\\n        for (uint i = 0; i < feedIds.length; i++) {\\n            require(feedList[feedIds[i]].revenueMode == 0, \\\"Subscription mode turned on\\\");\\n            feedSupport[feedIds[i]] = feedSupport[feedIds[i]].add(values[i]);\\n            total += values[i];\\n\\n            emit feedSupported(feedIds[i], values[i]);\\n        }\\n\\n        require(msg.value >= total, \\\"Msg.value does not meet support values\\\");\\n\\n        address payable conjureRouter = IConjureFactory(factoryContract).getConjureRouter();\\n        IConjureRouter(conjureRouter).deposit{value:total/100}();\\n        emit routerFeeTaken(total/100, msg.sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IConjureFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/// @author Conjure Finance Team\\n/// @title IConjureFactory\\n/// @notice Interface for interacting with the ConjureFactory Contract\\ninterface IConjureFactory {\\n\\n    /**\\n     * @dev gets the current conjure router\\n     *\\n     * @return the current conjure router\\n    */\\n    function getConjureRouter() external returns (address payable);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IConjureRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/// @author Conjure Finance Team\\n/// @title IConjureRouter\\n/// @notice Interface for interacting with the ConjureRouter Contract\\ninterface IConjureRouter {\\n\\n    /**\\n     * @dev calls the deposit function\\n    */\\n    function deposit() external payable;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"signerThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payout\",\"type\":\"address\"}],\"name\":\"contractSetup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeslot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mode\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"feedAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"feedSigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supportvalue\",\"type\":\"uint256\"}],\"name\":\"feedSupported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"newFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feed\",\"type\":\"uint256\"}],\"name\":\"newFeedCost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payout\",\"type\":\"address\"}],\"name\":\"newPayoutAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uintValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addressValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oracleType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"}],\"name\":\"newProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mode\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feed\",\"type\":\"uint256\"}],\"name\":\"newRevenueMode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"newSigner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"newThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"proposalSigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"routerFeeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"signerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPass\",\"type\":\"uint256\"}],\"name\":\"subscriptionPassPriceUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"buyPass\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"descriptions\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"decimals\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"timeslots\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"feedCosts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"revenueModes\",\"type\":\"uint256[]\"}],\"name\":\"createNewFeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"uintValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addressValue\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposalType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"}],\"name\":\"createProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feedSupport\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feedID\",\"type\":\"uint256\"}],\"name\":\"getFeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeedLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"feedIDs\",\"type\":\"uint256[]\"}],\"name\":\"getFeedList\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"feedIDs\",\"type\":\"uint256[]\"}],\"name\":\"getFeeds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"feedIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"timestamps\",\"type\":\"uint256[]\"}],\"name\":\"getHistoricalFeeds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"signers_\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"signerThreshold_\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"payoutAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subscriptionPassPrice_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"factoryContract_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"uintValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addressValue\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposalType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposalFeedId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposalActive\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"signProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signerLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signerThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"signers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"feedIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"submitFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"feedIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"durations\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"subscribeToFeed\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionPassPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"feedIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"supportFeeds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OpenOracleFramework", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}