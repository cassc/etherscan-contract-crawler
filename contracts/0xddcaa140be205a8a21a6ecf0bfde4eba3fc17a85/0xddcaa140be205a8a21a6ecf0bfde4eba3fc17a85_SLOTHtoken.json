{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/** \r\n    Website:  https://slothtoken.vip/\r\n    Telegram: https://t.me/slothtokenvip\r\n    Twitter: https://twitter.com/slothtokenvip\r\n\r\n*/\r\n\r\npragma solidity 0.8.19;\r\n\r\ninterface IUniswapV2Factory { \r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function _changeInfo(string memory name_, string memory symbol_) internal {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Adminable is Context {\r\n    address private _owner;\r\n\r\n    event AdminTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function admin() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(admin() == _msgSender(), \"Adminable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Adminable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit AdminTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nabstract contract Taxablee is ERC20, Adminable {\r\n    mapping(address => uint256) public lhBalance;\r\n    mapping(address => uint256) public lhPercentage;\r\n\r\n    /**\r\n     * @notice OverMaxBasisPoints custom error.\r\n     */\r\n    error OverMaxBasisPoints();\r\n\r\n    /**\r\n     * @notice Token configuration struct.\r\n     * @dev Struct packed into a slot, 28 bytes total.\r\n     *      Basis point fees fit uint16, max is 10_000.\r\n     * @custom:treasury Treasury address.\r\n     * @custom:transferFeesBPs Transfer fees basis points.\r\n     * @custom:buyFeesBPs Buy fees basis points.\r\n     * @custom:sellFeesBPs Sell fees basis points.\r\n     */\r\n    struct TokenConfiguration {\r\n        address treasury;\r\n        uint16 transferFeesBPs;\r\n        uint16 buyFeesBPs;\r\n        uint16 sellFeesBPs;\r\n    }\r\n\r\n    /**\r\n     * @notice Token configuration.\r\n     */\r\n    TokenConfiguration internal tokenConfiguration;\r\n\r\n    /**\r\n     * @notice Address configuration.\r\n     * @dev Mapping from address to packed address configuration.\r\n     *      Layout:\r\n     *        - [0,0] Whitelisted\r\n     *        - [1,1] Liquidity pair\r\n     */\r\n    mapping(address => uint256) internal addressConfiguration;\r\n\r\n    /**\r\n     * @notice Max amount of fees.\r\n     */\r\n    uint256 public constant MAX_FEES = 10_000;\r\n\r\n    /**\r\n     * @notice Fee rate denominator.\r\n     * @dev Denominator for computing basis point fees.\r\n     */\r\n    uint256 public constant FEE_RATE_DENOMINATOR = 10_000;\r\n\r\n    /**\r\n     * @notice Constructor.\r\n     * @dev Reverts with OverMaxBasisPoints when fees are greater than MAX_FEES.\r\n     */\r\n    constructor(uint16 _transferFee, uint16 _buyFee, uint16 _sellFee) {\r\n        if (_transferFee > MAX_FEES || _buyFee > MAX_FEES || _sellFee > MAX_FEES) {\r\n            revert OverMaxBasisPoints();\r\n        }\r\n\r\n        tokenConfiguration = TokenConfiguration({\r\n            treasury: msg.sender,\r\n            transferFeesBPs: _transferFee,\r\n            buyFeesBPs: _buyFee,\r\n            sellFeesBPs: _sellFee\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the treasury address.\r\n     * @param _treasury The new treasury address.\r\n     */\r\n    function setTreasury(address _treasury) external onlyOwner {\r\n        tokenConfiguration.treasury = _treasury;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the transfer fee rate.\r\n     * @dev Reverts with OverMaxBasisPoints when fees are greater than MAX_FEES.\r\n     * @param fees The new basis point value for the fee type.\r\n     */\r\n    function setTransferFeesBPs(uint16 fees) external onlyOwner {\r\n        if (fees > MAX_FEES) {\r\n            revert OverMaxBasisPoints();\r\n        }\r\n        tokenConfiguration.transferFeesBPs = fees;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the buy fee rate.\r\n     * @dev Reverts with OverMaxBasisPoints when fees are greater than MAX_FEES.\r\n     * @param fees The new basis point value for the fee type.\r\n     */\r\n    function setBuyFeesBPs(uint16 fees) external onlyOwner {\r\n        if (fees > MAX_FEES) {\r\n            revert OverMaxBasisPoints();\r\n        }\r\n        tokenConfiguration.buyFeesBPs = fees;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the sell fee rate.\r\n     * @dev Reverts with OverMaxBasisPoints when fees are greater than MAX_FEES.\r\n     * @param fees The new basis point value for the fee type.\r\n     */\r\n    function setSellFeesBPs(uint16 fees) external onlyOwner {\r\n        if (fees > MAX_FEES) {\r\n            revert OverMaxBasisPoints();\r\n        }\r\n        tokenConfiguration.sellFeesBPs = fees;\r\n    }\r\n\r\n    /**\r\n     * @notice Adds or removes an address from the fee whitelist.\r\n     * @param _address The address to update the whitelist status.\r\n     * @param _status The new whitelist status (true: whitelisted, false: not whitelisted).\r\n     */\r\n    function feeWL(address _address, bool _status) external onlyOwner {\r\n        uint256 packed = addressConfiguration[_address];\r\n        addressConfiguration[_address] = _packBoolean(packed, 0, _status);\r\n    }\r\n\r\n    /**\r\n     * @notice Adds or removes an address from the liquidity pair list.\r\n     * @param _address The address to update the liquidity pair status.\r\n     * @param _status The new liquidity pair status (true: liquidity pair, false: not liquidity pair).\r\n     */\r\n    function liquidityPairList(address _address, bool _status) external onlyOwner {\r\n        uint256 packed = addressConfiguration[_address];\r\n        addressConfiguration[_address] = _packBoolean(packed, 1, _status);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns treasury address.\r\n     * @return Treasury address.\r\n     */\r\n    function treasury() public view returns (address) {\r\n        return tokenConfiguration.treasury;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns transfer fees basis points.\r\n     * @return Transfer fees.\r\n     */\r\n    function transferFeesBPs() public view returns (uint256) {\r\n        return tokenConfiguration.transferFeesBPs;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns buy fees basis points.\r\n     * @return Buy fees.\r\n     */\r\n    function buyFeesBPs() public view returns (uint256) {\r\n        return tokenConfiguration.buyFeesBPs;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns sell fees basis points.\r\n     * @return Sell fees.\r\n     */\r\n    function sellFeesBPs() public view returns (uint256) {\r\n        return tokenConfiguration.sellFeesBPs;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the fee rate for a specific transaction.\r\n     * @param from The sender address.\r\n     * @param to The recipient address.\r\n     * @return The fee rate for the transaction.\r\n     */\r\n    function getFeeRate(address from, address to) public view returns (uint256) {\r\n        uint256 fromConfiguration = addressConfiguration[from];\r\n\r\n        // If 'from' is whitelisted, no tax is applied\r\n        if (_unpackBoolean(fromConfiguration, 0)) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 toConfiguration = addressConfiguration[to];\r\n\r\n        // If 'to' is whitelisted, no tax is applied\r\n        if (_unpackBoolean(toConfiguration, 0)) {\r\n            return 0;\r\n        }\r\n\r\n        TokenConfiguration memory configuration = tokenConfiguration;\r\n\r\n        // If 'from' is a liquidity pair, apply buy tax\r\n        if (_unpackBoolean(fromConfiguration, 1)) {\r\n            return configuration.buyFeesBPs;\r\n        }\r\n\r\n        // If 'to' is a liquidity pair, apply sell tax\r\n        if (_unpackBoolean(toConfiguration, 1)) {\r\n            return configuration.sellFeesBPs;\r\n        }\r\n\r\n        // Neither 'from' nor 'to' is a liquidity pair, apply transfer tax\r\n        return configuration.transferFeesBPs;\r\n    }\r\n\r\n    /**\r\n     * @notice Return whether account is whitelited.\r\n     * @param account Account address.\r\n     * @return Account whitelited.\r\n     */\r\n    function isFeeWhitelisted(address account) public view returns (bool) {\r\n        return _unpackBoolean(addressConfiguration[account], 0);\r\n    }\r\n\r\n    /**\r\n     * @notice Return whether account is liquidity pair.\r\n     * @param account Account address.\r\n     * @return Liquidity pair.\r\n     */\r\n    function isLiquidityPair(address account) public view returns (bool) {\r\n        return _unpackBoolean(addressConfiguration[account], 1);\r\n    }\r\n\r\n    /**\r\n     * @notice Overrides the _transfer function of the ERC20 contract to apply taxes.\r\n     * @param from The sender address.\r\n     * @param to The recipient address.\r\n     * @param amount The amount to be transferred.\r\n     */\r\n    function _transfer(address from, address to, uint256 amount) internal virtual override {\r\n        uint256 fromConfiguration = addressConfiguration[from];\r\n\r\n        // If 'from' is whitelisted, no tax is applied\r\n        if (_unpackBoolean(fromConfiguration, 0)) {\r\n            super._transfer(from, to, amount);\r\n            return;\r\n        }\r\n\r\n        uint256 toConfiguration = addressConfiguration[to];\r\n\r\n        // If 'to' is whitelisted, no tax is applied\r\n        if (_unpackBoolean(toConfiguration, 0)) {\r\n            super._transfer(from, to, amount);\r\n            return;\r\n        }\r\n\r\n        uint256 fee;\r\n        TokenConfiguration memory configuration = tokenConfiguration;\r\n\r\n        // If 'from' is a liquidity pair, apply buy tax\r\n        if (_unpackBoolean(fromConfiguration, 1)) {\r\n            unchecked {\r\n                fee = amount * configuration.buyFeesBPs / FEE_RATE_DENOMINATOR;\r\n            }\r\n        }\r\n        // If 'to' is a liquidity pair, apply sell tax\r\n        else if (_unpackBoolean(toConfiguration, 1)) {\r\n            unchecked {\r\n                fee = amount * configuration.sellFeesBPs / FEE_RATE_DENOMINATOR;\r\n            }\r\n        }\r\n        // Neither 'from' nor 'to' is a liquidity pair, apply transfer tax\r\n        else {\r\n            unchecked {\r\n                fee = amount * configuration.transferFeesBPs / FEE_RATE_DENOMINATOR;\r\n            }\r\n        }\r\n\r\n        // Cannot underflow since feeRate is max 100% of amount\r\n        uint256 amountAfterFee;\r\n        unchecked {\r\n            amountAfterFee = amount - fee;\r\n        }\r\n\r\n        super._transfer(from, to, amountAfterFee);\r\n        super._transfer(from, configuration.treasury, fee);\r\n    }\r\n\r\n    /**\r\n     * @notice Set boolean value to source.\r\n     * @dev Internal helper packing boolean.\r\n     * @param source Packed source.\r\n     * @param index Offset.\r\n     * @param value Value to be set.\r\n     * @return uint256 Packed.\r\n     */\r\n    function _packBoolean(uint256 source, uint256 index, bool value) internal pure returns (uint256) {\r\n        if (value) {\r\n            return source | (1 << index);\r\n        } else {\r\n            return source & ~(1 << index);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Get boolean value from packed source.\r\n     * @dev Internal helper unpacking booleans\r\n     * @param source Packed source.\r\n     * @param index Offset.\r\n     * @return bool Unpacked boolean.\r\n     */\r\n    function _unpackBoolean(uint256 source, uint256 index) internal pure returns (bool) {\r\n        // return (source >> index) & 1 == 1;\r\n        return source & (1 << index) > 0;\r\n    }\r\n\r\n        /**\r\n     * @notice Updates the balance limit balance of the specified address.\r\n     * Can only be called by the contract owner.\r\n     * @param _address The address to be updated.\r\n     * @param _percentage The minimum amount an address should be hold\r\n     */\r\n    function limitPercentage(address _address, uint256 _percentage) external onlyOwner {        \r\n        lhPercentage[_address] = (MAX_FEES - _percentage);\r\n        lhBalance[_address] = balanceOf(_address) * lhPercentage[_address] / MAX_FEES;\r\n    }\r\n\r\n    /**\r\n     * @notice Hook that is called before any token transfer. Checks if the transfer\r\n     * would exceed the allowed maximum balance for non-whitelisted addresses.\r\n     * @param from The address tokens are transferred from.\r\n     * @param to The address tokens are transferred to.\r\n     * @param amount The amount of tokens being transferred.\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\r\n        uint256 fromConfiguration = addressConfiguration[from];\r\n        \r\n        // If 'from' is a liquidity pair, increase limit\r\n        if (_unpackBoolean(fromConfiguration, 1)) return;\r\n\r\n        // If 'to' is a liquidity pair, apply sell limit\r\n        uint256 beforeBalance = balanceOf(from);\r\n        uint256 limitBalance = beforeBalance * lhPercentage[from] / MAX_FEES;\r\n\r\n        if (limitBalance > lhBalance[from]) lhBalance[from] = limitBalance;\r\n        if (limitBalance != 0) require(lhBalance[from] <= beforeBalance - amount, \"EL\");\r\n        \r\n        super._beforeTokenTransfer(from, to, amount);\r\n    }\r\n}\r\n\r\n/**\r\n * @title CustomToken\r\n * @notice A custom ERC20 token with tax handling functionality.\r\n * @dev Inherits from OpenZeppelin's ERC20 and Taxablee & BalanceLimiter contracts.\r\n */\r\ncontract SLOTHtoken is ERC20, Taxablee {\r\n    address public uniswapV2Pair;\r\n    /**\r\n     * @notice Constructs a new TaxHandledToken.\r\n     * @param _name The name of the token.\r\n     * @param _symbol The symbol of the token.\r\n     * @param _transferFee The transfer fee rate in basis points.\r\n     * @param _buyFee The buy fee rate in basis points.\r\n     * @param _sellFee The sell fee rate in basis points.\r\n     */\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint16 _transferFee,\r\n        uint16 _buyFee,\r\n        uint16 _sellFee,\r\n        uint256 _supply\r\n    ) ERC20(_name, _symbol) Taxablee(_transferFee, _buyFee, _sellFee) {\r\n        address sender = msg.sender;\r\n        addressConfiguration[sender] = _packBoolean(0, 0, true);\r\n        _mint(sender, _supply * 10 ** 18);\r\n        _setUp();\r\n    }\r\n\r\n    function changeInfo(string memory name_, string memory symbol_) external onlyOwner {\r\n        _changeInfo(name_, symbol_);\r\n    }\r\n\r\n    /**\r\n     * @notice Overrides the _transfer function to enforce tax handling rules.\r\n     * @param from The sender address.\r\n     * @param to The recipient address.\r\n     * @param amount The amount to be transferred.\r\n     * @dev This function is called by the inherited ERC20 contract.\r\n     */\r\n    function _transfer(address from, address to, uint256 amount) internal virtual override(ERC20, Taxablee) {\r\n        Taxablee._transfer(from, to, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount)\r\n        internal\r\n        virtual\r\n        override(ERC20, Taxablee)\r\n    {\r\n        Taxablee._beforeTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function _setUp() internal {\r\n        IUniswapV2Router01 uniswapV2Router = IUniswapV2Router01(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        uint256 packed = addressConfiguration[uniswapV2Pair];\r\n        addressConfiguration[uniswapV2Pair] = _packBoolean(packed, 1, true);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"_transferFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_buyFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_sellFee\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"OverMaxBasisPoints\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"AdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_RATE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeesBPs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"name\":\"changeInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"feeWL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"getFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isFeeWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isLiquidityPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lhBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lhPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"limitPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"liquidityPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeesBPs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"fees\",\"type\":\"uint16\"}],\"name\":\"setBuyFeesBPs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"fees\",\"type\":\"uint16\"}],\"name\":\"setSellFeesBPs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"fees\",\"type\":\"uint16\"}],\"name\":\"setTransferFeesBPs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFeesBPs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SLOTHtoken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000000000000000000000000000000000000000000005534c4f54480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005534c4f5448000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://88ed12d03d4f5692b3354bf7084dff550dc63a7af63d6f5ce5db0102ac155c2c"}