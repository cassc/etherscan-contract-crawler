{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/KeeperIncentivesFactory.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n\\nimport {BasefeeOSMDeviationCallBundler} from \\\"mgl-keeper-incentives/Callers/BasefeeOSMDeviationCallBundler.sol\\\";\\n\\ncontract KeeperIncentivesFactory {\\n    function deploy(\\n        address treasury_,\\n        address osm_,\\n        address oracleRelayer_,\\n        bytes32[3] memory collateral_,\\n        uint256 reward_,\\n        uint256 delay_,\\n        address coinOracle_,\\n        address ethOracle_,\\n        uint256 acceptedDeviation_,\\n        address owner_\\n    ) external returns (address) {\\n        BasefeeOSMDeviationCallBundler bundler = new BasefeeOSMDeviationCallBundler(\\n                treasury_,\\n                osm_,\\n                oracleRelayer_,\\n                collateral_,\\n                reward_,\\n                delay_,\\n                coinOracle_,\\n                ethOracle_,\\n                acceptedDeviation_\\n            );\\n        bundler.addAuthorization(owner_);\\n        bundler.removeAuthorization(address(this));            \\n        return address(bundler);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/mgl-keeper-incentives/src/Callers/BasefeeOSMDeviationCallBundler.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n\\nimport \\\"../Incentives/BaseFeeIncentive.sol\\\";\\n\\nabstract contract OSMLike {\\n    function updateResult() external virtual; // OSM Call\\n\\n    function read() external view virtual returns (uint256);\\n\\n    function priceSource() external view virtual returns (OracleLike);\\n\\n    function getNextResultWithValidity() external view virtual returns (uint256, bool);\\n}\\n\\nabstract contract OracleRelayerLike {\\n    function updateCollateralPrice(bytes32) external virtual; // Oracle relayer call\\n\\n    function orcl(bytes32) external view virtual returns (address);\\n}\\n\\n// @notice: Unobtrusive incentives for any call on a TAI like system.\\n// @dev: Assumes an allowance from the stability fee treasury, all oracles return quotes with 18 decimal places.\\n// @dev: Assumes all collateral types use the same OSM\\ncontract BasefeeOSMDeviationCallBundler is BaseFeeIncentive {\\n    OSMLike public immutable osm;\\n    OracleRelayerLike public immutable oracleRelayer;\\n    bytes32 public immutable collateralA;\\n    bytes32 public immutable collateralB;\\n    bytes32 public immutable collateralC;\\n\\n    uint256 public acceptedDeviation; // 1000 = 100%\\n\\n    // --- Constructor ---\\n    constructor(\\n        address treasury_,\\n        address osm_,\\n        address oracleRelayer_,\\n        bytes32[3] memory collateral_,\\n        uint256 reward_,\\n        uint256 delay_,\\n        address coinOracle_,\\n        address ethOracle_,\\n        uint256 acceptedDeviation_\\n    ) BaseFeeIncentive(treasury_, reward_, delay_, coinOracle_, ethOracle_) {\\n        require(osm_ != address(0), \\\"invalid-osm\\\");\\n        require(oracleRelayer_ != address(0), \\\"invalid-oracle-relayer\\\");\\n        require(acceptedDeviation_ < 1000, \\\"invalid-deviation\\\");\\n\\n        osm = OSMLike(osm_);\\n        oracleRelayer = OracleRelayerLike(oracleRelayer_);\\n        acceptedDeviation = acceptedDeviation_;\\n\\n        collateralA = collateral_[0];\\n        collateralB = collateral_[1];\\n        collateralC = collateral_[2];\\n\\n        emit ModifyParameters(\\\"acceptedDeviation\\\", acceptedDeviation_);\\n    }\\n\\n    function modifyParameters(bytes32 parameter, uint256 data) public override isAuthorized {\\n        if (parameter == \\\"acceptedDeviation\\\") {\\n            require(data < 1000, \\\"invalid-deviation\\\");\\n            acceptedDeviation = data;\\n            emit ModifyParameters(parameter, data);\\n        } else super.modifyParameters(parameter, data);\\n    }\\n\\n    // @dev Calls are made through the fallback function\\n    fallback() external payRewards {\\n        uint256 currentPrice = osm.read();\\n        (uint256 nextPrice, ) = osm.getNextResultWithValidity();\\n        uint256 marketPrice = osm.priceSource().read();\\n\\n        uint256 deviation = (currentPrice * acceptedDeviation) / 1000;\\n\\n        // will pay if either current vs nextPrice or current vs marketPrice deviates by more than deviation\\n        require(\\n            nextPrice >= currentPrice + deviation ||\\n            nextPrice <= currentPrice - deviation ||\\n            marketPrice >= currentPrice + deviation ||\\n            marketPrice <= currentPrice - deviation,\\n            \\\"not-enough-deviation\\\"\\n        );\\n\\n        osm.updateResult();\\n\\n        if (collateralA != bytes32(0)) oracleRelayer.updateCollateralPrice(collateralA);\\n        if (collateralB != bytes32(0)) oracleRelayer.updateCollateralPrice(collateralB);\\n        if (collateralC != bytes32(0)) oracleRelayer.updateCollateralPrice(collateralC);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/mgl-keeper-incentives/src/Incentives/BaseFeeIncentive.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nabstract contract StabilityFeeTreasuryLike {\\n    function systemCoin() external view virtual returns (address);\\n\\n    function pullFunds(address, address, uint) external virtual;\\n}\\n\\nabstract contract OracleLike {\\n    function read() external view virtual returns (uint256);\\n}\\n\\nabstract contract BaseFeeIncentive {\\n    StabilityFeeTreasuryLike public immutable treasury; // The stability fee treasury\\n    address public immutable coin; // The system coin\\n    OracleLike public ethOracle; // eth oracle\\n    OracleLike public coinOracle; // coin oracle\\n    uint256 public fixedReward; // The fixed reward sent by the treasury to a fee receiver (wad)\\n    uint256 public callDelay; // delay between incentivized calls (seconds)\\n    uint256 public lastCallMade; // last time a call to target was made (UNIX timestamp)\\n\\n    // --- Events ---\\n    event AddAuthorization(address account);\\n    event RemoveAuthorization(address account);\\n    event ModifyParameters(bytes32 parameter, address addr);\\n    event ModifyParameters(bytes32 parameter, uint256 val);\\n    event RewardCaller(address indexed finalFeeReceiver, uint256 fixedReward);\\n    event FailRewardCaller(\\n        bytes revertReason,\\n        address feeReceiver,\\n        uint256 amount\\n    );\\n\\n    // --- Auth ---\\n    mapping(address => uint256) public authorizedAccounts;\\n\\n    /**\\n     * @notice Add auth to an account\\n     * @param account Account to add auth to\\n     */\\n    function addAuthorization(address account) external isAuthorized {\\n        authorizedAccounts[account] = 1;\\n        emit AddAuthorization(account);\\n    }\\n\\n    /**\\n     * @notice Remove auth from an account\\n     * @param account Account to remove auth from\\n     */\\n    function removeAuthorization(address account) external isAuthorized {\\n        authorizedAccounts[account] = 0;\\n        emit RemoveAuthorization(account);\\n    }\\n\\n    /**\\n     * @notice Checks whether msg.sender can call an authed function\\n     **/\\n    modifier isAuthorized() {\\n        require(\\n            authorizedAccounts[msg.sender] == 1,\\n            \\\"StabilityFeeTreasury/account-not-authorized\\\"\\n        );\\n        _;\\n    }\\n\\n    // --- Constructor ---\\n    constructor(\\n        address treasury_,\\n        uint256 reward_,\\n        uint256 delay_,\\n        address coinOracle_,\\n        address ethOracle_\\n    ) {\\n        require(treasury_ != address(0), \\\"invalid-treasury\\\");\\n        require(reward_ != 0, \\\"invalid-reward\\\");\\n        require(coinOracle_ != address(0), \\\"invalid-coin-oracle\\\");\\n        require(ethOracle_ != address(0), \\\"invalid-eth-oracle\\\");\\n\\n        authorizedAccounts[msg.sender] = 1;\\n\\n        treasury = StabilityFeeTreasuryLike(treasury_);\\n        fixedReward = reward_;\\n        callDelay = delay_;\\n        coin = StabilityFeeTreasuryLike(treasury_).systemCoin();\\n        coinOracle = OracleLike(coinOracle_);\\n        ethOracle = OracleLike(ethOracle_);\\n\\n        emit AddAuthorization(msg.sender);\\n        emit ModifyParameters(\\\"fixedReward\\\", reward_);\\n        emit ModifyParameters(\\\"callDelay\\\", delay_);\\n        emit ModifyParameters(\\\"coinOracle\\\", coinOracle_);\\n        emit ModifyParameters(\\\"ethOracle\\\", ethOracle_);\\n    }\\n\\n    // -- Admin --\\n    function modifyParameters(\\n        bytes32 parameter,\\n        uint256 val\\n    ) public virtual isAuthorized {\\n        if (parameter == \\\"fixedReward\\\") fixedReward = val;\\n        else if (parameter == \\\"callDelay\\\") callDelay = val;\\n        else revert(\\\"invalid-param\\\");\\n        emit ModifyParameters(parameter, val);\\n    }\\n\\n    function modifyParameters(\\n        bytes32 parameter,\\n        address val\\n    ) external isAuthorized {\\n        require(val != address(0), \\\"invalid-data\\\");\\n        if (parameter == \\\"coinOracle\\\") coinOracle = OracleLike(val);\\n        else if (parameter == \\\"ethOracle\\\") ethOracle = OracleLike(val);\\n        else revert(\\\"invalid-param\\\");\\n        emit ModifyParameters(parameter, val);\\n    }\\n\\n    modifier payRewards() {\\n        uint256 gas = gasleft();\\n        _;\\n\\n        if (block.timestamp >= lastCallMade + callDelay) {\\n            gas = gas - gasleft();\\n            uint256 coinCost = (gas * block.basefee * ethOracle.read()) /\\n                coinOracle.read();\\n\\n            try treasury.pullFunds(msg.sender, coin, coinCost + fixedReward) {\\n                emit RewardCaller(msg.sender, coinCost + fixedReward);\\n            } catch (bytes memory revertReason) {\\n                emit FailRewardCaller(\\n                    revertReason,\\n                    msg.sender,\\n                    coinCost + fixedReward\\n                );\\n            }\\n        }\\n\\n        lastCallMade = block.timestamp;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-auth/=lib/geb-fsm/lib/ds-stop/lib/ds-auth/src/\",\r\n      \"ds-math/=lib/geb-fsm/lib/ds-token/lib/ds-math/src/\",\r\n      \"ds-note/=lib/geb-fsm/lib/ds-stop/lib/ds-note/src/\",\r\n      \"ds-stop/=lib/geb-fsm/lib/ds-stop/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"ds-thing/=lib/geb-fsm/lib/ds-value/lib/ds-thing/src/\",\r\n      \"ds-token/=lib/geb-fsm/lib/ds-token/src/\",\r\n      \"ds-value/=lib/geb-fsm/lib/ds-value/src/\",\r\n      \"erc20/=lib/geb-fsm/lib/ds-token/lib/erc20/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"geb-fsm/=lib/geb-fsm/src/\",\r\n      \"geb-treasury-reimbursement/=lib/geb-fsm/lib/geb-treasury-reimbursement/src/\",\r\n      \"geb/=lib/geb/src/\",\r\n      \"mgl-keeper-incentives/=lib/mgl-keeper-incentives/src/\",\r\n      \"solmate/=lib/mgl-keeper-incentives/lib/solmate/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"osm_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleRelayer_\",\"type\":\"address\"},{\"internalType\":\"bytes32[3]\",\"name\":\"collateral_\",\"type\":\"bytes32[3]\"},{\"internalType\":\"uint256\",\"name\":\"reward_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delay_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"coinOracle_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethOracle_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"acceptedDeviation_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KeeperIncentivesFactory", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "20", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://400adc3c5c90e8ea32345134a546d2606d247a657e271c96035f2beb85d082d6"}