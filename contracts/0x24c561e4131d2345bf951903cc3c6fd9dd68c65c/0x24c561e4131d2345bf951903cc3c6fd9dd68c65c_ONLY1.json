{"SourceCode": "pragma solidity 0.7.0;\r\n \r\ninterface IERC20 {\r\n  function totalSupply()                                         external view returns (uint256);\r\n  function balanceOf(address who)                                external view returns (uint256);\r\n  function allowance(address owner, address spender)             external view returns (uint256);\r\n  function transfer(address to, uint256 value)                   external      returns (bool);\r\n  function approve(address spender, uint256 value)               external      returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) external      returns (bool);\r\n \r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n \r\n \r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n \r\n        return c;\r\n    }\r\n \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n \r\n        return c;\r\n    }\r\n \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n \r\n \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n \r\n    function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\r\n        uint256 c = add(a,m);\r\n        uint256 d = sub(c,1);\r\n        return mul(div(d,m),m);\r\n    }\r\n}\r\n \r\nabstract contract ERC20Detailed is IERC20 {\r\n \r\n  string private _name;\r\n  string private _symbol;\r\n  uint8  private _decimals;\r\n \r\n  constructor(string memory name, string memory symbol, uint8 decimals) {\r\n    _name     = name;\r\n    _symbol   = symbol;\r\n    _decimals = decimals;\r\n  }\r\n \r\n  function name() public view returns(string memory) {\r\n    return _name;\r\n  }\r\n \r\n  function symbol() public view returns(string memory) {\r\n    return _symbol;\r\n  }\r\n \r\n  function decimals() public view returns(uint8) {\r\n    return _decimals;\r\n  }\r\n}\r\n \r\n \r\n contract ONLY1 is ERC20Detailed {\r\n \r\n  using SafeMath for uint256;\r\n \r\n  mapping (address => uint256)                      private _balances;\r\n  mapping (address => mapping (address => uint256)) private _allowed;\r\n  mapping (address => bool)                         private _whitelist;\r\n \r\n \r\n  address private constant _router  = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n  address private          _owner;\r\n \r\n  string   constant tokenName     = \"ONLY1\";\r\n  string   constant tokenSymbol   = \"ONLY1\";\r\n  uint8    constant tokenDecimals = 18;\r\n  uint256  public   burnPct       = 10;\r\n  uint256  private  _totalSupply  = 1_000_000_000_000_000_000_000_000_000;\r\n  uint256  private  _txCap        = 1_000_000_000_000_000_000_000_000;\r\n \r\n  constructor() ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {\r\n      _owner = msg.sender;\r\n      _balances[_owner] = _totalSupply;\r\n      _modifyWhitelist(_owner, true);\r\n      _modifyWhitelist(_router, true);\r\n \r\n  }\r\n  function totalSupply() external view override returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n \r\n  function balanceOf(address owner) external view override returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n \r\n  function allowance(address owner, address spender) external view override returns (uint256) {\r\n    return _allowed[owner][spender];\r\n  }\r\n \r\n \r\n  function findBurnAmount(uint256 rate, uint256 value) public pure returns (uint256) {\r\n      return value.ceil(100).mul(rate).div(100);\r\n  }\r\n \r\n  function _modifyWhitelist(address adr, bool state) internal {\r\n    _whitelist[adr] = state;\r\n  }\r\n \r\n  function _checkWhitelist(address adr) internal view returns (bool) {\r\n    return _whitelist[adr];\r\n  }\r\n \r\n \r\n  function transfer(address to, uint256 value) external override returns (bool) {\r\n    require(value <= _balances[msg.sender]);\r\n    require(to != address(0));\r\n    if (_checkWhitelist(msg.sender)) {\r\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n    _balances[to] = _balances[to].add(value);\r\n \r\n    emit Transfer(msg.sender, to, value);\r\n    return true;\r\n  } else {\r\n    require (value <= _txCap || _checkWhitelist(to),\r\n            \"amount exceeds tx cap\");\r\n    uint256 tokensToBurn     = findBurnAmount(burnPct, value);\r\n    uint256 tokensToTransfer = value.sub(tokensToBurn);\r\n \r\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n    _balances[to] = _balances[to].add(tokensToTransfer);\r\n \r\n    _totalSupply = _totalSupply.sub(tokensToBurn);\r\n \r\n    emit Transfer(msg.sender, to, tokensToTransfer);\r\n    emit Transfer(msg.sender, address(0), tokensToBurn);\r\n    return true;\r\n  }\r\n}\r\n \r\n  function approve(address spender, uint256 value) external override returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = value;\r\n \r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n \r\n  function transferFrom(address from, address to, uint256 value) external override returns (bool) {\r\n    require(value <= _balances[from]);\r\n    require(value <= _allowed[from][msg.sender]);\r\n    require(to != address(0));\r\n    if (_checkWhitelist(from)) {\r\n      _balances[from] = _balances[from].sub(value);\r\n      _balances[to] = _balances[to].add(value);\r\n \r\n      emit Transfer(from, to, value);\r\n      return true;\r\n    } else {\r\n      require (value <= _txCap || _checkWhitelist(to),\r\n              \"amount exceeds tx cap\");\r\n \r\n      _balances[from] = _balances[from].sub(value);\r\n \r\n      uint256 tokensToBurn     = findBurnAmount(burnPct, value);\r\n      uint256 tokensToTransfer = value.sub(tokensToBurn);\r\n \r\n      _balances[to] = _balances[to].add(tokensToTransfer);\r\n      _totalSupply  = _totalSupply.sub(tokensToBurn);\r\n \r\n      _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n \r\n      emit Transfer(from, to, tokensToTransfer);\r\n      emit Transfer(from, address(0), tokensToBurn);\r\n \r\n      return true;\r\n    }\r\n  }\r\n \r\n \r\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n \r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnPct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"findBurnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ONLY1", "CompilerVersion": "v0.7.0+commit.9e61f92b", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0a781e91ac2557c2e7a6573ae90ba2e9740015051fc74756f876281915ddbea6"}