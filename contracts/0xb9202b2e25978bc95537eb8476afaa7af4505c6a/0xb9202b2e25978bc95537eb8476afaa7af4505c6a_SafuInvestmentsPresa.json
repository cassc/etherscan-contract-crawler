{"SourceCode": "{\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"},\"SafuInvestmentsPresale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IUniswapV2Router02 {\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n    external\\n    payable\\n    returns (\\n        uint256 amountToken,\\n        uint256 amountETH,\\n        uint256 liquidity\\n    );\\n}\\n\\ncontract SafuInvestmentsPresale {\\n    using SafeMath for uint256;\\n\\n    IUniswapV2Router02 private constant uniswapRouter =\\n    IUniswapV2Router02(address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D));\\n\\n    address payable internal safuFactoryAddress; // address that creates the presale contracts\\n    address payable public safuDevAddress; // address where dev fees will be transferred to\\n    address public safuLiqLockAddress; // address where LP tokens will be locked\\n\\n    IERC20 public token; // token that will be sold\\n    address payable public presaleCreatorAddress; // address where percentage of invested wei will be transferred to\\n    address public unsoldTokensDumpAddress; // address where unsold tokens will be transferred to\\n\\n    mapping(address =\\u003e uint256) public investments; // total wei invested per address\\n    mapping(address =\\u003e bool) public whitelistedAddresses; // addresses eligible in presale\\n    mapping(address =\\u003e bool) public claimed; // if true, it means investor already claimed the tokens or got a refund\\n\\n    uint256 private safuDevFeePercentage; // dev fee to support the development of Safu Investments\\n    uint256 private safuMinDevFeeInWei; // minimum fixed dev fee to support the development of Safu Investments\\n    uint256 public safuId; // used for fetching presale without referencing its address\\n\\n    uint256 public totalInvestorsCount; // total investors count\\n    uint256 public presaleCreatorClaimWei; // wei to transfer to presale creator per investor claim\\n    uint256 public presaleCreatorClaimTime; // time when presale creator can collect funds raise\\n    uint256 public totalCollectedWei; // total wei collected\\n    uint256 public totalTokens; // total tokens to be sold\\n    uint256 public tokensLeft; // available tokens to be sold\\n    uint256 public tokenPriceInWei; // token presale wei price per 1 token\\n    uint256 public hardCapInWei; // maximum wei amount that can be invested in presale\\n    uint256 public softCapInWei; // minimum wei amount to invest in presale, if not met, invested wei will be returned\\n    uint256 public maxInvestInWei; // maximum wei amount that can be invested per wallet address\\n    uint256 public minInvestInWei; // minimum wei amount that can be invested per wallet address\\n    uint256 public openTime; // time when presale starts, investing is allowed\\n    uint256 public closeTime; // time when presale closes, investing is not allowed\\n    uint256 public uniListingPriceInWei; // token price when listed in Uniswap\\n    uint256 public uniLiquidityAddingTime; // time when adding of liquidity in uniswap starts, investors can claim their tokens afterwards\\n    uint256 public uniLPTokensLockDurationInDays; // how many days after the liquity is added the presale creator can unlock the LP tokens\\n    uint256 public uniLiquidityPercentageAllocation; // how many percentage of the total invested wei that will be added as liquidity\\n\\n    bool public uniLiquidityAdded = false; // if true, liquidity is added in Uniswap and lp tokens are locked\\n    bool public onlyWhitelistedAddressesAllowed = true; // if true, only whitelisted addresses can invest\\n    bool public safuDevFeesExempted = false; // if true, presale will be exempted from dev fees\\n    bool public presaleCancelled = false; // if true, investing will not be allowed, investors can withdraw, presale creator can withdraw their tokens\\n\\n    bytes32 public saleTitle;\\n    bytes32 public linkTelegram;\\n    bytes32 public linkTwitter;\\n    bytes32 public linkDiscord;\\n    bytes32 public linkWebsite;\\n\\n    constructor(address _safuFactoryAddress, address _safuDevAddress) public {\\n        require(_safuFactoryAddress != address(0));\\n        require(_safuDevAddress != address(0));\\n\\n        safuFactoryAddress = payable(_safuFactoryAddress);\\n        safuDevAddress = payable(_safuDevAddress);\\n    }\\n\\n    modifier onlySafuDev() {\\n        require(safuFactoryAddress == msg.sender || safuDevAddress == msg.sender);\\n        _;\\n    }\\n\\n    modifier onlySafuFactory() {\\n        require(safuFactoryAddress == msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyPresaleCreatorOrSafuFactory() {\\n        require(\\n            presaleCreatorAddress == msg.sender || safuFactoryAddress == msg.sender,\\n            \\\"Not presale creator or factory\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyPresaleCreator() {\\n        require(presaleCreatorAddress == msg.sender, \\\"Not presale creator\\\");\\n        _;\\n    }\\n\\n    modifier whitelistedAddressOnly() {\\n        require(\\n            !onlyWhitelistedAddressesAllowed || whitelistedAddresses[msg.sender],\\n            \\\"Address not whitelisted\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier presaleIsNotCancelled() {\\n        require(!presaleCancelled, \\\"Cancelled\\\");\\n        _;\\n    }\\n\\n    modifier investorOnly() {\\n        require(investments[msg.sender] \\u003e 0, \\\"Not an investor\\\");\\n        _;\\n    }\\n\\n    modifier notYetClaimedOrRefunded() {\\n        require(!claimed[msg.sender], \\\"Already claimed or refunded\\\");\\n        _;\\n    }\\n\\n    function setAddressInfo(\\n        address _presaleCreator,\\n        address _tokenAddress,\\n        address _unsoldTokensDumpAddress\\n    ) external onlySafuFactory {\\n        require(_presaleCreator != address(0));\\n        require(_tokenAddress != address(0));\\n        require(_unsoldTokensDumpAddress != address(0));\\n\\n        presaleCreatorAddress = payable(_presaleCreator);\\n        token = IERC20(_tokenAddress);\\n        unsoldTokensDumpAddress = _unsoldTokensDumpAddress;\\n    }\\n\\n    function setGeneralInfo(\\n        uint256 _totalTokens,\\n        uint256 _tokenPriceInWei,\\n        uint256 _hardCapInWei,\\n        uint256 _softCapInWei,\\n        uint256 _maxInvestInWei,\\n        uint256 _minInvestInWei,\\n        uint256 _openTime,\\n        uint256 _closeTime\\n    ) external onlySafuFactory {\\n        require(_totalTokens \\u003e 0);\\n        require(_tokenPriceInWei \\u003e 0);\\n        require(_openTime \\u003e 0);\\n        require(_closeTime \\u003e 0);\\n        require(_hardCapInWei \\u003e 0);\\n\\n        // Hard cap \\u003e (token amount * token price)\\n        require(_hardCapInWei \\u003c= _totalTokens.mul(_tokenPriceInWei));\\n        // Soft cap \\u003e to hard cap\\n        require(_softCapInWei \\u003c= _hardCapInWei);\\n        //  Min. wei investment \\u003e max. wei investment\\n        require(_minInvestInWei \\u003c= _maxInvestInWei);\\n        // Open time \\u003e= close time\\n        require(_openTime \\u003c _closeTime);\\n\\n        totalTokens = _totalTokens;\\n        tokensLeft = _totalTokens;\\n        tokenPriceInWei = _tokenPriceInWei;\\n        hardCapInWei = _hardCapInWei;\\n        softCapInWei = _softCapInWei;\\n        maxInvestInWei = _maxInvestInWei;\\n        minInvestInWei = _minInvestInWei;\\n        openTime = _openTime;\\n        closeTime = _closeTime;\\n    }\\n\\n    function setUniswapInfo(\\n        uint256 _uniListingPriceInWei,\\n        uint256 _uniLiquidityAddingTime,\\n        uint256 _uniLPTokensLockDurationInDays,\\n        uint256 _uniLiquidityPercentageAllocation\\n    ) external onlySafuFactory {\\n        require(_uniListingPriceInWei \\u003e 0);\\n        require(_uniLiquidityAddingTime \\u003e 0);\\n        require(_uniLPTokensLockDurationInDays \\u003e 0);\\n        require(_uniLiquidityPercentageAllocation \\u003e 0);\\n\\n        require(closeTime \\u003e 0);\\n        // Listing time \\u003c close time\\n        require(_uniLiquidityAddingTime \\u003e= closeTime);\\n\\n        uniListingPriceInWei = _uniListingPriceInWei;\\n        uniLiquidityAddingTime = _uniLiquidityAddingTime;\\n        uniLPTokensLockDurationInDays = _uniLPTokensLockDurationInDays;\\n        uniLiquidityPercentageAllocation = _uniLiquidityPercentageAllocation;\\n    }\\n\\n    function setStringInfo(\\n        bytes32 _saleTitle,\\n        bytes32 _linkTelegram,\\n        bytes32 _linkDiscord,\\n        bytes32 _linkTwitter,\\n        bytes32 _linkWebsite\\n    ) external onlyPresaleCreatorOrSafuFactory {\\n        saleTitle = _saleTitle;\\n        linkTelegram = _linkTelegram;\\n        linkDiscord = _linkDiscord;\\n        linkTwitter = _linkTwitter;\\n        linkWebsite = _linkWebsite;\\n    }\\n\\n    function setSafuInfo(\\n        address _safuLiqLockAddress,\\n        uint256 _safuDevFeePercentage,\\n        uint256 _safuMinDevFeeInWei,\\n        uint256 _safuId\\n    ) external onlySafuDev {\\n        safuLiqLockAddress = _safuLiqLockAddress;\\n        safuDevFeePercentage = _safuDevFeePercentage;\\n        safuMinDevFeeInWei = _safuMinDevFeeInWei;\\n        safuId = _safuId;\\n    }\\n\\n    function setSafuDevFeesExempted(bool _safuDevFeesExempted)\\n    external\\n    onlySafuDev\\n    {\\n        safuDevFeesExempted = _safuDevFeesExempted;\\n    }\\n\\n    function setOnlyWhitelistedAddressesAllowed(bool _onlyWhitelistedAddressesAllowed)\\n    external\\n    onlyPresaleCreatorOrSafuFactory\\n    {\\n        onlyWhitelistedAddressesAllowed = _onlyWhitelistedAddressesAllowed;\\n    }\\n\\n    function addwhitelistedAddresses(address[] calldata _whitelistedAddresses)\\n    external\\n    onlyPresaleCreatorOrSafuFactory\\n    {\\n        onlyWhitelistedAddressesAllowed = _whitelistedAddresses.length \\u003e 0;\\n        for (uint256 i = 0; i \\u003c _whitelistedAddresses.length; i++) {\\n            whitelistedAddresses[_whitelistedAddresses[i]] = true;\\n        }\\n    }\\n\\n    function getTokenAmount(uint256 _weiAmount)\\n    internal\\n    view\\n    returns (uint256)\\n    {\\n        return _weiAmount.mul(1e18).div(tokenPriceInWei);\\n    }\\n\\n    function invest()\\n    public\\n    payable\\n    whitelistedAddressOnly\\n    presaleIsNotCancelled\\n    {\\n        require(block.timestamp \\u003e= openTime, \\\"Not yet opened\\\");\\n        require(block.timestamp \\u003c closeTime, \\\"Closed\\\");\\n        require(totalCollectedWei \\u003c hardCapInWei, \\\"Hard cap reached\\\");\\n        require(tokensLeft \\u003e 0);\\n        require(msg.value \\u003c= tokensLeft.mul(tokenPriceInWei));\\n        uint256 totalInvestmentInWei = investments[msg.sender].add(msg.value);\\n        require(totalInvestmentInWei \\u003e= minInvestInWei, \\\"Min investment not reached\\\");\\n        require(maxInvestInWei == 0 || totalInvestmentInWei \\u003c= maxInvestInWei, \\\"Max investment reached\\\");\\n\\n        if (investments[msg.sender] == 0) {\\n            totalInvestorsCount = totalInvestorsCount.add(1);\\n        }\\n\\n        totalCollectedWei = totalCollectedWei.add(msg.value);\\n        investments[msg.sender] = totalInvestmentInWei;\\n        tokensLeft = tokensLeft.sub(getTokenAmount(msg.value));\\n    }\\n\\n    receive() external payable {\\n        invest();\\n    }\\n\\n    function addLiquidityAndLockLPTokens() external presaleIsNotCancelled {\\n        require(totalCollectedWei \\u003e 0);\\n        require(!uniLiquidityAdded, \\\"Liquidity already added\\\");\\n        require(\\n            !onlyWhitelistedAddressesAllowed || whitelistedAddresses[msg.sender] || msg.sender == presaleCreatorAddress,\\n            \\\"Not whitelisted or not presale creator\\\"\\n        );\\n\\n        if (totalCollectedWei == hardCapInWei \\u0026\\u0026 block.timestamp \\u003c uniLiquidityAddingTime) {\\n            require(msg.sender == presaleCreatorAddress, \\\"Not presale creator\\\");\\n        } else if (block.timestamp \\u003e= uniLiquidityAddingTime) {\\n            require(\\n                msg.sender == presaleCreatorAddress || investments[msg.sender] \\u003e 0,\\n                \\\"Not presale creator or investor\\\"\\n            );\\n            require(totalCollectedWei \\u003e= softCapInWei, \\\"Soft cap not reached\\\");\\n        } else {\\n            revert(\\\"Liquidity cannot be added yet\\\");\\n        }\\n\\n        uniLiquidityAdded = true;\\n\\n        uint256 finalTotalCollectedWei = totalCollectedWei;\\n        uint256 safuDevFeeInWei;\\n        if (!safuDevFeesExempted) {\\n            uint256 pctDevFee = finalTotalCollectedWei.mul(safuDevFeePercentage).div(100);\\n            safuDevFeeInWei = pctDevFee \\u003e safuMinDevFeeInWei || safuMinDevFeeInWei \\u003e= finalTotalCollectedWei\\n            ? pctDevFee\\n            : safuMinDevFeeInWei;\\n        }\\n        if (safuDevFeeInWei \\u003e 0) {\\n            finalTotalCollectedWei = finalTotalCollectedWei.sub(safuDevFeeInWei);\\n            safuDevAddress.transfer(safuDevFeeInWei);\\n        }\\n\\n        uint256 liqPoolEthAmount = finalTotalCollectedWei.mul(uniLiquidityPercentageAllocation).div(100);\\n        uint256 liqPoolTokenAmount = liqPoolEthAmount.mul(1e18).div(uniListingPriceInWei);\\n\\n        token.approve(address(uniswapRouter), liqPoolTokenAmount);\\n\\n        uniswapRouter.addLiquidityETH{value : liqPoolEthAmount}(\\n            address(token),\\n            liqPoolTokenAmount,\\n            0,\\n            0,\\n            safuLiqLockAddress,\\n            block.timestamp.add(15 minutes)\\n        );\\n\\n        uint256 unsoldTokensAmount = token.balanceOf(address(this)).sub(getTokenAmount(totalCollectedWei));\\n        if (unsoldTokensAmount \\u003e 0) {\\n            token.transfer(unsoldTokensDumpAddress, unsoldTokensAmount);\\n        }\\n\\n        presaleCreatorClaimWei = address(this).balance.mul(1e18).div(totalInvestorsCount.mul(1e18));\\n        presaleCreatorClaimTime = block.timestamp + 1 days;\\n    }\\n\\n    function claimTokens()\\n    external\\n    whitelistedAddressOnly\\n    presaleIsNotCancelled\\n    investorOnly\\n    notYetClaimedOrRefunded\\n    {\\n        require(uniLiquidityAdded, \\\"Liquidity not yet added\\\");\\n\\n        claimed[msg.sender] = true; // make sure this goes first before transfer to prevent reentrancy\\n        token.transfer(msg.sender, getTokenAmount(investments[msg.sender]));\\n\\n        uint256 balance = address(this).balance;\\n        if (balance \\u003e 0) {\\n            uint256 funds = presaleCreatorClaimWei \\u003e balance ? balance : presaleCreatorClaimWei;\\n            presaleCreatorAddress.transfer(funds);\\n        }\\n    }\\n\\n    function getRefund()\\n    external\\n    whitelistedAddressOnly\\n    investorOnly\\n    notYetClaimedOrRefunded\\n    {\\n        if (!presaleCancelled) {\\n            require(block.timestamp \\u003e= openTime, \\\"Not yet opened\\\");\\n            require(block.timestamp \\u003e= closeTime, \\\"Not yet closed\\\");\\n            require(softCapInWei \\u003e 0, \\\"No soft cap\\\");\\n            require(totalCollectedWei \\u003c softCapInWei, \\\"Soft cap reached\\\");\\n        }\\n\\n        claimed[msg.sender] = true; // make sure this goes first before transfer to prevent reentrancy\\n        uint256 investment = investments[msg.sender];\\n        uint256 presaleBalance =  address(this).balance;\\n        require(presaleBalance \\u003e 0);\\n\\n        if (investment \\u003e presaleBalance) {\\n            investment = presaleBalance;\\n        }\\n\\n        if (investment \\u003e 0) {\\n            msg.sender.transfer(investment);\\n        }\\n    }\\n\\n    function cancelAndTransferTokensToPresaleCreator() external {\\n        if (!uniLiquidityAdded \\u0026\\u0026 presaleCreatorAddress != msg.sender \\u0026\\u0026 safuDevAddress != msg.sender) {\\n            revert();\\n        }\\n        if (uniLiquidityAdded \\u0026\\u0026 safuDevAddress != msg.sender) {\\n            revert();\\n        }\\n\\n        require(!presaleCancelled);\\n        presaleCancelled = true;\\n\\n        uint256 balance = token.balanceOf(address(this));\\n        if (balance \\u003e 0) {\\n            token.transfer(presaleCreatorAddress, balance);\\n        }\\n    }\\n\\n    function collectFundsRaised() onlyPresaleCreator external {\\n        require(uniLiquidityAdded);\\n        require(!presaleCancelled);\\n        require(block.timestamp \\u003e= presaleCreatorClaimTime);\\n\\n        if (address(this).balance \\u003e 0) {\\n            presaleCreatorAddress.transfer(address(this).balance);\\n        }\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_safuFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_safuDevAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"addLiquidityAndLockLPTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_whitelistedAddresses\",\"type\":\"address[]\"}],\"name\":\"addwhitelistedAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelAndTransferTokensToPresaleCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectFundsRaised\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardCapInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkDiscord\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkTelegram\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkTwitter\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkWebsite\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxInvestInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minInvestInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyWhitelistedAddressesAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleCancelled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleCreatorAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleCreatorClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleCreatorClaimWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safuDevAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safuDevFeesExempted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safuId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safuLiqLockAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleTitle\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_presaleCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_unsoldTokensDumpAddress\",\"type\":\"address\"}],\"name\":\"setAddressInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenPriceInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hardCapInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_softCapInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxInvestInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minInvestInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_openTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_closeTime\",\"type\":\"uint256\"}],\"name\":\"setGeneralInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_onlyWhitelistedAddressesAllowed\",\"type\":\"bool\"}],\"name\":\"setOnlyWhitelistedAddressesAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_safuDevFeesExempted\",\"type\":\"bool\"}],\"name\":\"setSafuDevFeesExempted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_safuLiqLockAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_safuDevFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_safuMinDevFeeInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_safuId\",\"type\":\"uint256\"}],\"name\":\"setSafuInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_saleTitle\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_linkTelegram\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_linkDiscord\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_linkTwitter\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_linkWebsite\",\"type\":\"bytes32\"}],\"name\":\"setStringInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_uniListingPriceInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_uniLiquidityAddingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_uniLPTokensLockDurationInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_uniLiquidityPercentageAllocation\",\"type\":\"uint256\"}],\"name\":\"setUniswapInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"softCapInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPriceInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCollectedWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvestorsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniLPTokensLockDurationInDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniLiquidityAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniLiquidityAddingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniLiquidityPercentageAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniListingPriceInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unsoldTokensDumpAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SafuInvestmentsPresale", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000084658065b97348026a5111feaa2ba9e83ee28e700000000000000000000000069c62363f5bd1a4505d2bcefa886468478a74b91", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e18ac61ae0cd7df4f09bbdfb601205e91e8def8e02f9a5a7ef7ddee3d5e73a44"}