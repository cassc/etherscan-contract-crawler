{"SourceCode": "pragma solidity ^0.4.8;\r\n\r\n/* Math operations with safety checks */\r\ncontract SafeMath {\r\n\tfunction safeMul(uint256 a, uint256 b) internal returns (uint256) {\r\n\t\tuint256 c = a * b;\r\n\t\tassert(a == 0 || c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\tfunction safeDiv(uint256 a, uint256 b) internal returns (uint256) {\r\n\t\tassert(b > 0);\r\n\t\tuint256 c = a / b;\r\n\t\tassert(a == b * c + a % b);\r\n\t\treturn c; \r\n\t}\r\n\tfunction safeSub(uint256 a, uint256 b) internal returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b; \r\n\t}\r\n\tfunction safeAdd(uint256 a, uint256 b) internal returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\tassert(c>=a && c>=b);\r\n\t\treturn c;\r\n\t}\r\n\tfunction assert(bool assertion) internal {\r\n\t\tif (!assertion) {\r\n\t\t\tthrow; \r\n\t\t}\r\n\t}\r\n}\r\n\r\n/* SGCC ERC20 Token */\r\ncontract SGCC is SafeMath { \r\n\tstring public name;\r\n\tstring public symbol;\r\n\tuint8 public decimals;\r\n\tuint256 public totalSupply;\r\n\taddress public owner;\r\n\t\r\n\t/* This creates an array with all balances */\r\n\tmapping (address => uint256) public balanceOf;\r\n\tmapping (address => uint256) public freezeOf;\r\n\tmapping (address => mapping (address => uint256)) public allowance;\r\n\t\r\n\t/* This generates a public event for notifying clients of transfers */ \r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\t/* This notifies clients about the amount burnt */ \r\n\tevent Burn(address indexed from, uint256 value);\r\n\t/* This notifies clients about the amount frozen */ \r\n\tevent Freeze(address indexed from, uint256 value);\r\n\t/* This notifies clients about the amount unfrozen */ \r\n\tevent Unfreeze(address indexed from, uint256 value);\r\n\r\n\t/* Initializes contract with initial supply of tokens to the creator of the contract */ \r\n\tfunction SGCC() public {\r\n\t\tdecimals = 18;\r\n\t\tbalanceOf[msg.sender] = 20000000000 * (10 ** uint256(decimals)); // Give the creator all initial tokens\r\n\t\ttotalSupply = 20000000000 * (10 ** uint256(decimals)); // Update total supply\r\n\t\tname = 'SGCC'; // Set the name for display purposes\r\n\t\tsymbol = 'SGCC'; // Set the symbol for display purposes\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\t/* Send coins from the caller's account */\r\n\tfunction transfer(address _to, uint256 _value) public {\r\n\t\tif (_to == 0x0) throw; // Prevent transfer to 0x0 address. Use burn() instead \r\n\t\tif (_value <= 0) throw;\r\n\t\tif (balanceOf[msg.sender] < _value) throw; // Check if the sender has enough\r\n\t\tif (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows \r\n\t\tbalanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value); // Subtract from the sender\r\n\t\tbalanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value); // Add the same to the recipient\r\n\t\tTransfer(msg.sender, _to, _value); // Notify anyone listening that this transfer took place\r\n\t}\r\n\t\r\n\t/* Allow another account to withdraw up to some number of coins from the caller */\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\r\n\t\tif (_value <= 0) throw;\r\n\t\tallowance[msg.sender][_spender] = _value;\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t/* Send coins from an account that previously approved this caller to do so */\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n\t\tif (_to == 0x0) throw; // Prevent transfer to 0x0 address. Use burn() instead\r\n\t\tif (_value <= 0) throw;\r\n\t\tif (balanceOf[_from] < _value) throw; // Check if the sender has enough \r\n\t\tif (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\r\n\t\tif (_value > allowance[_from][msg.sender]) throw; // Check allowance \r\n\t\tbalanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value); // Subtract from the sender\r\n\t\tbalanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value); // Add the same to the recipient\r\n\t\tallowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value); \r\n\t\tTransfer(_from, _to, _value); // emit event\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t/* Permanently delete some number of coins that are in the caller's account */\r\n\tfunction burn(uint256 _value) public returns (bool success) {\r\n\t\tif (balanceOf[msg.sender] < _value) throw; // Check if the sender has enough\r\n\t\tif (_value <= 0) throw;\r\n\t\tbalanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value); // Subtract from the sender\r\n\t\ttotalSupply = SafeMath.safeSub(totalSupply,_value); // Reduce the total supply too\r\n\t\tBurn(msg.sender, _value); // emit event\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/* Make some of the caller's coins temporarily unavailable */\r\n\tfunction freeze(uint256 _value) public returns (bool success) {\r\n\t\tif (balanceOf[msg.sender] < _value) throw; // Check if the sender has enough\r\n\t\tif (_value <= 0) throw;\r\n\t\tbalanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value); // Subtract from the sender\r\n\t\tfreezeOf[msg.sender] = SafeMath.safeAdd(freezeOf[msg.sender], _value); // Add to sender's frozen balance\r\n\t\tFreeze(msg.sender, _value); // emit event\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/* Frozen coins can be made available again by unfreezing them */\r\n\tfunction unfreeze(uint256 _value) public returns (bool success) {\r\n\t\tif (freezeOf[msg.sender] < _value) throw; // Check if the sender has enough\r\n\t\tif (_value <= 0) throw;\r\n\t\tfreezeOf[msg.sender] = SafeMath.safeSub(freezeOf[msg.sender], _value); // Subtract from sender's frozen balance\r\n\t\tbalanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], _value); // Add to the sender\r\n\t\tUnfreeze(msg.sender, _value); // emit event\r\n\t\treturn true; \r\n\t}\r\n\r\n\tfunction withdrawEther(uint256 amount) public {\r\n\t\t// disabled\r\n\t}\r\n\tfunction() public payable {}\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"unfreeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Unfreeze\",\"type\":\"event\"}]", "ContractName": "SGCC", "CompilerVersion": "v0.4.8+commit.60cc1668", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://393fbb52ffecf3e7b888cc157c5edf4e3a4482f58748b76fa688e850d9d456eb"}