{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"script/Deployer.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.18;\\n\\nimport \\\"../src/MOSOnboarding.sol\\\";\\n\\ncontract Deployer {\\n    MOSOnboarding public mosOnboarding;\\n    ShipStore public shipStoreContract;\\n    PillStore public pillStoreContract;\\n    AzimuthOwnerWrapper public azimuthOwnerWrapperContract;\\n\\n    uint public shipStackId;\\n    uint public pillSetId;\\n\\n    constructor(\\n        IERC721 _miladysContract,\\n        IERC721 _avatarContract,\\n        IAzimuth _azimuthContract,\\n        ISoulboundAccessories _soulboundAccessoriesContract,\\n        TBARegistry _tgaRegistry,\\n        TokenGatedAccount _tgaAccountImpl,\\n\\n        uint _onboardingGasForwardAmount,\\n\\n        // using an array to avoid StackTooDeep error.\\n        address[4] memory privilegedAddrs,\\n        // 0 - onboardingOwner\\n        // 1 - stackAndPillOwner\\n        // 2 - stackAndPillOperator\\n        // 3 - stackDepositor\\n\\n        address payable _revenueRecipient,\\n\\n        // using an array to avoid StackTooDeep error.\\n        uint[2] memory prices,\\n        // 0 - shipPrice\\n        // 1 - pillPrice\\n\\n        string memory mosMetadataUrl\\n    )\\n    {\\n        azimuthOwnerWrapperContract = new AzimuthOwnerWrapper(_azimuthContract);\\n\\n        shipStoreContract = new ShipStore(_azimuthContract);\\n        pillStoreContract = new PillStore();\\n\\n        shipStackId = shipStoreContract.prepStack(address(this), address(this), privilegedAddrs[3], _revenueRecipient);\\n        pillSetId = pillStoreContract.prepPillSet(address(this), address(this), _revenueRecipient);\\n\\n        mosOnboarding = new MOSOnboarding(\\n            _miladysContract,\\n            _avatarContract,\\n            azimuthOwnerWrapperContract,\\n            _soulboundAccessoriesContract,\\n            _tgaRegistry,\\n            _tgaAccountImpl,\\n\\n            shipStoreContract,\\n            shipStackId,\\n\\n            pillStoreContract,\\n            pillSetId,\\n\\n            _onboardingGasForwardAmount\\n        );\\n\\n        shipStoreContract.deployStack(shipStackId, prices[0], address(mosOnboarding));\\n        pillStoreContract.deployPillSet(pillSetId, prices[1], 0, address(0), \\\"Milady OS\\\", mosMetadataUrl);\\n\\n        mosOnboarding.transferOwnership(privilegedAddrs[0]);\\n\\n        shipStoreContract.setOperator(shipStackId, privilegedAddrs[2]);\\n        pillStoreContract.setOperator(shipStackId, privilegedAddrs[2]);\\n\\n        shipStoreContract.setOwner(shipStackId, privilegedAddrs[1]);\\n        pillStoreContract.setOwner(pillSetId, privilegedAddrs[1]);\\n    }\\n}\"\r\n    },\r\n    \"src/MOSOnboarding.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.18;\\n\\nimport \\\"openzeppelin/token/ERC721/IERC721.sol\\\";\\nimport \\\"openzeppelin/access/Ownable.sol\\\";\\nimport \\\"TokenGatedAccount/TBARegistry.sol\\\";\\nimport \\\"TokenGatedAccount/TokenGatedAccount.sol\\\";\\nimport \\\"./Interfaces.sol\\\";\\nimport \\\"./ShipStore.sol\\\";\\nimport \\\"./PillStore.sol\\\";\\nimport \\\"./AzimuthOwnerWrapper.sol\\\";\\n\\n/// @title MOSOnboarding\\n/// @notice This contract handles onboarding for miladys to the Milady OS system, along with Ship and Pill purchases.\\n/// @author Logan Brutsche\\ncontract MOSOnboarding is Ownable {\\n    IERC721 public immutable miladysContract;\\n    IERC721 public immutable avatarContract;\\n    AzimuthOwnerWrapper public immutable azimuthOwnerWrapperContract;\\n    ISoulboundAccessories public immutable soulboundAccessoriesContract;\\n    TBARegistry public immutable tgaRegistry;\\n    TokenGatedAccount public immutable tgaAccountImpl;\\n\\n    ShipStore public immutable shipStoreContract;\\n    uint public immutable shipStackId;\\n    \\n    PillStore public immutable pillStoreContract;\\n    uint public immutable mosPillSetId;\\n\\n    uint public onboardingGasForwardAmount;\\n    \\n    /// @notice Constructor to initialize the MOSOnboarding contract.\\n    /// @param _miladysContract Address of the IERC721 contract for Miladys.\\n    /// @param _avatarContract Address of the IERC721 contract for Avatars.\\n    /// @param _azimuthOwnerWrapperContract Address of the contract azimuthOwnerWrapperContract.\\n    /// @param _soulboundAccessoriesContract Address of the SoulboundAccessories contract.\\n    /// @param _tgaRegistry Address of the TokenGatedAccount registry.\\n    /// @param _tgaAccountImpl Address of the TokenGatedAccount implementation.\\n    /// @param _shipStoreContract Address of the ShipStore contract.\\n    /// @param _shipStackId The stack ID for ships this contract mediates purchasing of.\\n    /// @param _pillStoreContract Address of the PillStore contract.\\n    /// @param _mosPillSetId The Pill Set ID for MOS this contract mediates purchasing of.\\n    /// @param _onboardingGasForwardAmount The amount of gas to capture and forward to a server that uploads crucial metadata.\\n    /// @dev sets msg.sender to owner.\\n    constructor(\\n        IERC721 _miladysContract,\\n        IERC721 _avatarContract,\\n        AzimuthOwnerWrapper _azimuthOwnerWrapperContract,\\n        ISoulboundAccessories _soulboundAccessoriesContract,\\n        TBARegistry _tgaRegistry,\\n        TokenGatedAccount _tgaAccountImpl,\\n\\n        ShipStore _shipStoreContract,\\n        uint _shipStackId,\\n\\n        PillStore _pillStoreContract,\\n        uint _mosPillSetId,\\n\\n        uint _onboardingGasForwardAmount\\n    )\\n        Ownable(msg.sender)\\n    {\\n        miladysContract = _miladysContract;\\n        avatarContract = _avatarContract;\\n        azimuthOwnerWrapperContract = _azimuthOwnerWrapperContract;\\n        soulboundAccessoriesContract = _soulboundAccessoriesContract;\\n        tgaRegistry = _tgaRegistry;\\n        tgaAccountImpl = _tgaAccountImpl;\\n\\n        shipStoreContract = _shipStoreContract;\\n        shipStackId = _shipStackId;\\n\\n        pillStoreContract = _pillStoreContract;\\n        mosPillSetId = _mosPillSetId;\\n\\n        onboardingGasForwardAmount = _onboardingGasForwardAmount;\\n    }\\n\\n    /// @notice Sets the amount of gas to forward for onboarding.\\n    /// @param _amount The amount of gas to forward.\\n    /// @dev Only callable by the contract owner.\\n    function setOnboardingGasForwardAmount(uint _amount)\\n        external\\n        onlyOwner()\\n    {\\n        onboardingGasForwardAmount = _amount;\\n    }\\n\\n    /// @notice Emitted when a mint request for Soulbound is made.\\n    /// @param miladyId The ID of the Milady involved in the Soulbound mint request.\\n    event SoulboundMintRequested(uint miladyId);\\n    \\n    /// @notice Handles internal logic for onboarding a Milady.\\n    /// @param miladyId The ID of the Milady to onboard.\\n    /// @dev Creates two TGAs - one for the miladyMaker contract, one for the avatar contract.\\n    /// @dev Forwards the gas forwarding amount to the miladyAuthority.\\n    /// @dev Emits a SoulboundMintRequested event, expected to be seen and actioned by the miladyAuthority server.\\n    function _requestMiladyOnboard(uint miladyId)\\n        internal\\n    {\\n        createTGA(address(miladysContract), miladyId);\\n        createTGA(address(avatarContract), miladyId);\\n\\n        payable(soulboundAccessoriesContract.miladyAuthority()).transfer(onboardingGasForwardAmount);\\n\\n        emit SoulboundMintRequested(miladyId);\\n    }\\n\\n    /// @notice Purchases the app package for a given address.\\n    /// @param _recipientAddress The recipient's address.\\n    /// @param _shipPrice The price for the ship.\\n    /// @param _appPrice The price for the app.\\n    /// @dev Creates a TGA for the ship, puts the pill into that TGA, and creates a TGA for the pill.\\n    /// @return shipId The ID of the purchased ship.\\n    /// @return pillId The ID of the purchased pill.\\n    function _purchaseAppPackage(address _recipientAddress, uint _shipPrice, uint _appPrice)\\n        internal\\n        returns(uint32 shipId, uint pillId)\\n    {\\n        shipId = shipStoreContract.buyShip{value:_shipPrice}(shipStackId, _recipientAddress);\\n        address shipTgaAddress = createTGA(address(azimuthOwnerWrapperContract), shipId);\\n\\n        Pill pillSetContract = pillStoreContract.getPillSetContract(mosPillSetId);\\n        pillId = pillStoreContract.mintPill{value:_appPrice}(mosPillSetId, shipTgaAddress);\\n        createTGA(address(pillSetContract), pillId);\\n    }\\n\\n    /// @notice Event emitted when a package is bought.\\n    /// @param topLevelEOA The address that holds the Milady.\\n    /// @param miladyId The ID of the associated Milady.\\n    /// @param shipId The ID of the purchased ship.\\n    /// @param pillId The ID of the purchased pill.\\n    event PackageBought(address indexed topLevelEOA, uint indexed miladyId, uint32 indexed shipId, uint pillId);\\n\\n    /// @notice Onboard and purchase a package for a specific Milady.\\n    /// @param miladyId The ID of the Milady to onboard.\\n    /// @return shipId The ID of the purchased ship.\\n    /// @return pillId The ID of the purchased pill.\\n    /// @dev Charges the user the full amount of ether needed.\\n    /// @dev Effectively packages together the _requestMiladyOnboard and _purchaseAppPackage functions.\\n    function onboardAndPurchaseForMilady(uint miladyId)\\n        external\\n        payable\\n        returns(uint32 shipId, uint pillId)\\n    {\\n        (,,uint shipPrice,,,) = shipStoreContract.getStackInfo(shipStackId);\\n        (,,uint appPrice,,,,,,) = pillStoreContract.getPillSetInfo(mosPillSetId);\\n\\n        uint totalPrice = shipPrice + appPrice + onboardingGasForwardAmount;\\n\\n        require(msg.value == totalPrice, \\\"incorrect ether amount included\\\");\\n\\n        _requestMiladyOnboard(miladyId);\\n        address miladyOwner = miladysContract.ownerOf(miladyId);\\n        // implicitly returns\\n        (shipId, pillId) = _purchaseAppPackage(miladyOwner, shipPrice, appPrice);\\n\\n        emit PackageBought(miladyOwner, miladyId, shipId, pillId);\\n    }\\n\\n    /// @notice Get the onboarded Azimuth points for a specific Milady.\\n    /// @param miladyId The ID of the Milady to check.\\n    /// @return numOnboardedPoints The number of valid onboarded points.\\n    /// @return onboardedPoints The list of onboarded points.\\n    /// @dev onboardedPoints may contain uninitialized elements beyond numOnboardedPoints.\\n    function getOnboardedAzimuthPointsForMilady(uint miladyId)\\n        external\\n        view\\n        returns (uint numOnboardedPoints, uint32[] memory onboardedPoints)\\n    {\\n        address miladyOwnerAddress = miladysContract.ownerOf(miladyId);\\n\\n        uint32[] memory ownedPoints = azimuthOwnerWrapperContract.azimuthContract().getOwnedPoints(miladyOwnerAddress);\\n\\n        onboardedPoints = new uint32[](ownedPoints.length);\\n        for (uint i; i<ownedPoints.length; i++) {\\n            address tgaAddress = getTGA(address(azimuthOwnerWrapperContract), ownedPoints[i]);\\n            if (pillStoreContract.getPillSetContract(mosPillSetId).balanceOf(tgaAddress) > 0) {\\n                onboardedPoints[numOnboardedPoints] = ownedPoints[i];\\n                numOnboardedPoints ++;\\n            }\\n        }\\n    }\\n\\n    /// @notice Retrieve a set of values pertinent to the onboarding interface.\\n    /// @return shipPrice The current price of a ship.\\n    /// @return numShipsRemaining The number of ships remaining in the underlying shipStack.\\n    /// @return appPrice The current price of an app.\\n    /// @return onboardingGasPrice The amount captured and forwarded to miladyAuthority.\\n    function getMarketInfo()\\n        public\\n        view\\n        returns(uint shipPrice, uint numShipsRemaining, uint appPrice, uint onboardingGasPrice)\\n    {\\n        (,,shipPrice,,,numShipsRemaining) = shipStoreContract.getStackInfo(shipStackId);\\n        (,,appPrice,,,,,,) = pillStoreContract.getPillSetInfo(mosPillSetId);\\n        onboardingGasPrice = onboardingGasForwardAmount;\\n    }\\n\\n    /// @notice Create a new Token Gated Account (TGA) for a given NFT contract and its ID.\\n    /// @param tokenContractAddress The address of the NFT contract.\\n    /// @param tokenId The ID of the token.\\n    /// @return The address of the newly created TGA.\\n    function createTGA(address tokenContractAddress, uint tokenId)\\n        internal\\n        returns(address payable)\\n    {\\n        return payable(tgaRegistry.createAccount(\\n            address(tgaAccountImpl),\\n            block.chainid, \\n            tokenContractAddress,\\n            tokenId,\\n            0,\\n            \\\"\\\"\\n        ));\\n    }\\n\\n    /// @notice Retrieve the address of an existing Token Gated Account (TGA).\\n    /// @param tokenContractAddress The address of the NFT contract.\\n    /// @param tokenId The ID of the token.\\n    /// @return The address of the existing TGA.\\n    function getTGA(address tokenContractAddress, uint tokenId)\\n        internal\\n        view\\n        returns(address payable)\\n    {\\n        return payable(tgaRegistry.account(\\n            address(tgaAccountImpl),\\n            block.chainid, \\n            tokenContractAddress,\\n            tokenId,\\n            0\\n        ));\\n    }\\n}\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/TokenGatedAccount/src/TBARegistry.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.18;\\n\\nimport \\\"openzeppelin/utils/Create2.sol\\\";\\nimport \\\"./IERC6551Registry.sol\\\";\\n\\n/**\\n * @title TBARegistry\\n * @dev This contract implements the registry for Token Bound Accounts (TBA) as per the ERC-6551 standard.\\n * It facilitates the creation and management of accounts bound to non-fungible tokens (NFTs),\\n * enabling each NFT to operate as its own smart contract account.\\n * \\n * The contract leverages the Ethereum Create2 opcode for deploying smart contracts at specified addresses,\\n * allowing for predictable contract addresses and efficient user onboarding.\\n * \\n * Each created account is registered within the contract, mapping the account address to its corresponding\\n * NFT's contract address and token ID.\\n *\\n * The contract allows for the computation of account addresses prior to their actual creation,\\n * aiding in the planning and management of TBAs.\\n *\\n * @author Logan Brutsche\\n */\\ncontract TBARegistry is IERC6551Registry {\\n    error InitializationFailed();\\n\\n    struct TBA {\\n        address tokenContract;\\n        uint tokenId;\\n    }\\n    mapping (address => TBA) public registeredAccounts;\\n\\n    /**\\n     * @dev Creates a new account with a bound non-fungible token using the provided parameters and returns the created account's address.\\n     * @param _implementation Address of the TBA account implementation.\\n     * @param _chainId Chain ID on which the account is created.\\n     * @param _tokenContract Address of the NFT contract.\\n     * @param _tokenId ID of the token to be bound to the new account.\\n     * @param _salt A value to modify the resulting address.\\n     * @param initData Initialization data to be called on the new account.\\n     * @return The address of the created account.\\n     */\\n    function createAccount(\\n        address _implementation,\\n        uint256 _chainId,\\n        address _tokenContract,\\n        uint256 _tokenId,\\n        uint256 _salt,\\n        bytes calldata initData\\n    ) external returns (address) {\\n        bytes memory code = _creationCode(_implementation, _chainId, _tokenContract, _tokenId, _salt);\\n\\n        address _account = Create2.computeAddress(\\n            bytes32(_salt),\\n            keccak256(code)\\n        );\\n\\n        if (_account.code.length != 0) return _account;\\n\\n        _account = Create2.deploy(0, bytes32(_salt), code);\\n\\n        registeredAccounts[_account].tokenContract = _tokenContract;\\n        registeredAccounts[_account].tokenId = _tokenId;\\n\\n        if (initData.length != 0) {\\n            (bool success, ) = _account.call(initData);\\n            if (!success) revert InitializationFailed();\\n        }\\n\\n        emit AccountCreated(\\n            _account,\\n            _implementation,\\n            _chainId,\\n            _tokenContract,\\n            _tokenId,\\n            _salt\\n        );\\n\\n        return _account;\\n    }\\n\\n    /**\\n     * @dev Computes and returns the address of the account with the provided parameters without actually creating the account.\\n     * @param _implementation Address of the TBA account implementation.\\n     * @param _chainId Chain ID for which to compute the account address.\\n     * @param _tokenContract Address of the token contract.\\n     * @param _tokenId ID of the token for which to compute the account address.\\n     * @param _salt A value to modify the resulting address.\\n     * @return The address of the computed account.\\n     */\\n    function account(\\n        address _implementation,\\n        uint256 _chainId,\\n        address _tokenContract,\\n        uint256 _tokenId,\\n        uint256 _salt\\n    ) external view returns (address) {\\n        bytes32 bytecodeHash = keccak256(\\n            _creationCode(_implementation, _chainId, _tokenContract, _tokenId, _salt)\\n        );\\n\\n        return Create2.computeAddress(bytes32(_salt), bytecodeHash);\\n    }\\n\\n    /**\\n     * @dev Generates the creation code for an account with the provided parameters.\\n     * @param _implementation Address of the TBA account implementation.\\n     * @param _chainId Chain ID on which the account is created.\\n     * @param _tokenContract Address of the token contract.\\n     * @param _tokenId ID of the token to be bound to the new account.\\n     * @param _salt A value to modify the resulting creation code.\\n     * @return The creation code for the account.\\n     */\\n    function _creationCode(\\n        address _implementation,\\n        uint256 _chainId,\\n        address _tokenContract,\\n        uint256 _tokenId,\\n        uint256 _salt\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                hex\\\"3d60ad80600a3d3981f3363d3d373d3d3d363d73\\\",\\n                _implementation,\\n                hex\\\"5af43d82803e903d91602b57fd5bf3\\\",\\n                abi.encode(_salt, _chainId, _tokenContract, _tokenId)\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/TokenGatedAccount/src/TokenGatedAccount.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.18;\\n\\nimport \\\"openzeppelin/utils/introspection/IERC165.sol\\\";\\nimport \\\"openzeppelin/token/ERC721/IERC721.sol\\\";\\nimport \\\"openzeppelin/interfaces/IERC1271.sol\\\";\\nimport \\\"openzeppelin/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"openzeppelin/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"openzeppelin/utils/cryptography/SignatureChecker.sol\\\";\\nimport \\\"sstore2/utils/Bytecode.sol\\\";\\nimport \\\"./IERC6551Account.sol\\\";\\nimport \\\"./IERC6551Executable.sol\\\";\\n\\n/**\\n * @title TokenGatedAccount\\n * @dev This contract represents a Token Gated Account (TGA) which serves as an interface for interacting with\\n * various token standards and executing operations based on the ownership and authorization of tokens.\\n * The contract implements multiple interfaces to ensure compatibility and extend functionality.\\n *\\n * @author Logan Brutsche\\n */\\ncontract TokenGatedAccount is IERC165, IERC1271, IERC6551Account, IERC6551Executable, IERC1155Receiver, IERC721Receiver {\\n    address public bondedAddress;\\n    address public tokenOwnerAtLastBond;\\n\\n    /**\\n     * @dev Ensures that the message sender is either the token owner or the bonded account, \\n     * unless the owner has changed since the last bond call.\\n     */\\n    modifier onlyAuthorizedMsgSender() {\\n        require(_isValidSigner(msg.sender), \\\"Unauthorized caller\\\");\\n        _;\\n    }\\n    \\n    /**\\n     * @dev Emitted when a new address is bonded to this contract.\\n     * @param _newBondedAddress The address that was bonded.\\n     */\\n    event NewBondedAddress(address indexed _newBondedAddress);\\n\\n    /**\\n     * @dev Bonds a specified address to this contract.\\n     * Note the bonded address can pass this bond on without authorization from owner().\\n     * @param _addressToBond The address to bond.\\n     */\\n    function bond(address _addressToBond) \\n        external\\n        onlyAuthorizedMsgSender()\\n    {\\n        bondedAddress = _addressToBond;\\n        tokenOwnerAtLastBond = owner();\\n\\n        emit NewBondedAddress(_addressToBond);\\n    }\\n\\n    uint public state;\\n\\n    receive() external payable {}\\n    fallback() external payable {}\\n\\n    /**\\n     * @dev Executes a call on another contract on behalf of the token owner or bonded account.\\n     * @param _to The contract address to call.\\n     * @param _value The amount of ether to send.\\n     * @param _data The call data.\\n     * @param operation The operation type (only call operations are supported).\\n     * @return result The result data of the call or its revert message.\\n     */\\n    function execute(address _to, uint256 _value, bytes calldata _data, uint operation)\\n        external\\n        payable\\n        onlyAuthorizedMsgSender()\\n        returns (bytes memory result)\\n    {\\n        require(operation == 0, \\\"Only call operations are supported\\\");\\n\\n        state ++;\\n\\n        bool success;\\n        (success, result) = _to.call{value: _value}(_data);\\n\\n        if (!success) {\\n            assembly {\\n                revert(add(result, 32), mload(result))\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the token details that this contract is associated with.\\n     * @return _chainId The chain ID.\\n     * @return _tokenContract The address of the token contract.\\n     * @return _tokenId The ID of the token.\\n     */\\n    function token()\\n        external\\n        view\\n        returns (\\n            uint256 _chainId,\\n            address _tokenContract,\\n            uint256 _tokenId\\n        )\\n    {\\n        uint256 length = address(this).code.length;\\n        return\\n            abi.decode(\\n                Bytecode.codeAt(address(this), length - 0x60, length),\\n                (uint256, address, uint256)\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the token associated with this contract from the ERC721 contract.\\n     * @return The address of the token owner.\\n     */\\n    function owner() public view returns (address) {\\n        (uint256 chainId, address tokenContract, uint256 tokenId) = this.token();\\n        if (chainId != block.chainid) return address(0);\\n\\n        return IERC721(tokenContract).ownerOf(tokenId);\\n    }\\n\\n    /**\\n     * @dev Checks if this contract supports a specified interface.\\n     * @param _interfaceId The ID of the interface to check.\\n     * @return true if the interface is supported, false otherwise.\\n     */\\n    function supportsInterface(bytes4 _interfaceId) public pure returns (bool) {\\n        return (_interfaceId == type(IERC165).interfaceId ||\\n            _interfaceId == type(IERC6551Account).interfaceId);\\n    }\\n\\n    /**\\n     * @dev Checks if a specified signer is valid for this contract.\\n     * @param signer The address of the signer.\\n     * @return The function selector if the signer is valid, 0 otherwise.\\n     */\\n    function isValidSigner(address signer, bytes calldata) external view returns (bytes4) {\\n        if (_isValidSigner(signer)) {\\n            return IERC6551Account.isValidSigner.selector;\\n        }\\n\\n        return bytes4(0);\\n    }\\n\\n    /**\\n     * @dev Internal function to check if a specified signer is valid.\\n     * @param signer The address of the signer.\\n     * @return true if the signer is valid, false otherwise.\\n     */\\n    function _isValidSigner(address signer) internal view returns (bool) {\\n        return signer == owner() || (signer == bondedAddress && tokenOwnerAtLastBond == owner());\\n    }\\n\\n    /**\\n     * @dev Checks if a specified signature is valid for a given hash.\\n     * @param hash The hash of the data.\\n     * @param signature The signature to check.\\n     * @return The function selector if the signature is valid, empty bytes otherwise.\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature)\\n        external\\n        view\\n        returns (bytes4)\\n    {\\n        bool isValid = \\n            SignatureChecker.isValidSignatureNow(owner(), hash, signature) ||\\n            (SignatureChecker.isValidSignatureNow(bondedAddress, hash, signature) && tokenOwnerAtLastBond == owner());\\n\\n        if (isValid) {\\n            return IERC1271.isValidSignature.selector;\\n        }\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token.\\n     * @return The function selector.\\n     */\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external returns (bytes4) {\\n        return IERC1155Receiver.onERC1155Received.selector;\\n    }\\n\\n    /**\\n     * @dev Handles the receipt of multiple ERC1155 tokens.\\n     * @return The function selector.\\n     */\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external returns (bytes4)\\n    {\\n        return IERC1155Receiver.onERC1155BatchReceived.selector;\\n    }\\n\\n    /**\\n     * @dev Handles the receipt of a single ERC721 token.\\n     * @return The function selector.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external returns (bytes4)\\n    {\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Interfaces.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.18;\\n\\nimport \\\"openzeppelin/token/ERC721/IERC721.sol\\\";\\n\\ninterface IEcliptic is IERC721 {\\n    function transferPoint(uint32 _point, address _newOwner, bool _reset) external;\\n    function setTransferProxy(uint32 _point, address _transferProxy) external;\\n}\\n\\ninterface IAzimuth {\\n    function getOwner(uint32 _point) external view returns (address);\\n    function getOwnedPoints(address) external view returns (uint32[] memory);\\n    function owner() external view returns (address);\\n    function canTransfer(uint32 _point, address who) external view returns(bool);\\n}\\n\\ninterface ISoulboundAccessories {\\n    function miladyAuthority() external view returns(address);\\n}\"\r\n    },\r\n    \"src/ShipStore.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.18;\\n\\nimport \\\"openzeppelin/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"./Interfaces.sol\\\";\\n\\n/// @title ShipStore contract\\n/// @notice Allows anyone to create and manage any number of ShipStacks, and for other users to purchase ships from these stacks.\\n/// @author Logan Brutsche\\ncontract ShipStore {\\n    IAzimuth public azimuthContract;\\n\\n    /// @param _azimuthContract The address of the azimuth contract.\\n    constructor(IAzimuth _azimuthContract) {\\n        azimuthContract = _azimuthContract;\\n    }\\n\\n    ShipStack[] public shipStacks;\\n\\n    /// @notice Struct to represent a ship stack.\\n    struct ShipStack {\\n        address owner; // 0 indicates the stack has not been initialized\\n        address operator;\\n        address depositor;\\n        uint price;\\n        address exclusiveBuyer; // if not 0x0, this is the only address that can buy ships from this stack\\n        address payable revenueRecipient;\\n        bool deployed; // has the operator called deployStack yet?\\n        uint32[] ships;\\n    }\\n\\n    /// @notice Prepare a ShipStack to be deployed later\\n    /// @param _owner The owner of the stack. Can change operator and revenueRecipient, and transfer ownership\\n    /// @param _operator The address that will be allowed to deploy and manage the stack.\\n    /// @param _revenueRecipient The address to which revenue from pill sales will be sent.\\n    function prepStack(address _owner, address _operator, address _depositor, address payable _revenueRecipient)\\n        external\\n        returns (uint stackId)\\n    {\\n        require(_operator != address(0), \\\"can't set operator 0x0\\\");\\n\\n        // implicitly returns\\n        stackId = shipStacks.length;\\n\\n        ShipStack memory stack;\\n        stack.owner = _owner;\\n        stack.operator = _operator;\\n        stack.depositor = _depositor;\\n        stack.revenueRecipient = _revenueRecipient;\\n        \\n        shipStacks.push(stack);\\n    }\\n\\n    // onlyOwner funcs\\n\\n    /// @notice Set a new owner for a specific stack.\\n    /// @param _stackId The ID of the stack.\\n    /// @param _owner The new owner's address.\\n    /// @dev The caller must be the current owner.\\n    function setOwner(uint _stackId, address _owner)\\n        external\\n        onlyStackOwner(_stackId)\\n    {\\n        _setOwner(_stackId, _owner);\\n    }\\n    /// @notice Set a new operator for a specific stack.\\n    /// @param _stackId The ID of the stack.\\n    /// @param _operator The new operator's address.\\n    /// @dev The caller must be the current owner.\\n    function setOperator(uint _stackId, address _operator)\\n        external\\n        onlyStackOwner(_stackId)\\n    {\\n        _setOperator(_stackId, _operator);\\n    }\\n    /// @notice Sets the revenue recipient for a ship stack at shipStacks[msg.sender][_stackId].\\n    /// @dev Stack must be initialized.\\n    /// @param _stackId The identifier of the ship stack.\\n    /// @param _revenueRecipient The address to receive the revenue.\\n    function setRevenueRecipient(uint _stackId, address payable _revenueRecipient)\\n        public\\n        onlyStackOwner(_stackId)\\n    {\\n        _setRevenueRecipient(_stackId, _revenueRecipient);\\n    }\\n\\n    // onlyOperator funcs\\n\\n    /// @notice Sets the depositor for a ship stack.\\n    /// @dev Stack must be initialized.\\n    /// @dev Only callable by operator\\n    /// @param _stackId The identifier of the ship stack.\\n    /// @param _depositor The address allowed to deposit ships.\\n    function setDepositor(uint _stackId, address _depositor)\\n        external\\n        onlyStackOperator(_stackId)\\n    {\\n        _setDepositor(_stackId, _depositor);\\n    }\\n    /// @notice Deploy a stack with specified properties.\\n    /// @param _stackId The ID of the stack.\\n    /// @param _price The price for the stack.\\n    /// @param _exclusiveBuyer If set, only this address can buy a ship from this stack.\\n    /// @dev The caller must be the current operator.\\n    /// @dev Throws if the stack is already deployed.\\n    /// @dev Throws if the stack has not been prepped via prepStack.\\n    function deployStack(uint _stackId, uint _price, address _exclusiveBuyer)\\n        external\\n        onlyStackOperator(_stackId)\\n    {\\n        ShipStack storage stack = shipStacks[_stackId];\\n        require(!stack.deployed, \\\"stack already deployed\\\");\\n\\n        _setPrice(_stackId, _price);\\n        _setExclusiveBuyer(_stackId, _exclusiveBuyer);\\n        stack.deployed = true;\\n    }\\n    /// @notice Sets the price for a ship stack.\\n    /// @dev Stack must be initialized.\\n    /// @dev Only callable by the stack operator.\\n    /// @param _stackId The identifier of the ship stack.\\n    /// @param _price The new price for the ship stack.\\n    function setPrice(uint _stackId, uint _price)\\n        external\\n        onlyStackOperator(_stackId)\\n    {\\n        _setPrice(_stackId, _price);\\n    }\\n    /// @notice Sets exclusive buyer for a ship stack.\\n    /// @dev Stack must be initialized.\\n    /// @dev Only callable by the stack operator.\\n    /// @param _stackId The identifier of the ship stack.\\n    /// @param _exclusiveBuyer The address of the exclusive buyer.\\n    function setExclusiveBuyer(uint _stackId, address _exclusiveBuyer)\\n        public\\n        onlyStackOperator(_stackId)\\n    {\\n        _setExclusiveBuyer(_stackId, _exclusiveBuyer);\\n    }\\n\\n    // internal setters\\n\\n    /// @notice Internal function to set the owner of a stack.\\n    /// @param _stackId The ID of the stack.\\n    /// @param _owner The new owner address.\\n    function _setOwner(uint _stackId, address _owner) internal {\\n        shipStacks[_stackId].owner = _owner;\\n    }\\n    /// @notice Internal function to set the operator of a stack.\\n    /// @param _stackId The ID of the stack.\\n    /// @param _operator The new operator address.\\n    function _setOperator(uint _stackId, address _operator) internal {\\n        shipStacks[_stackId].operator = _operator;\\n    }\\n    /// @notice Internal function to set the depositor of a stack.\\n    /// @param _stackId The ID of the stack.\\n    /// @param _depositor The new depositor address.\\n    function _setDepositor(uint _stackId, address _depositor) internal {\\n        shipStacks[_stackId].depositor = _depositor;\\n    }\\n    /// @notice Internal function to set the revenue recipient of a stack.\\n    /// @param _stackId The ID of the stack.\\n    /// @param _revenueRecipient The new revenue recipient address.\\n    function _setRevenueRecipient(uint _stackId, address payable _revenueRecipient) internal {\\n        shipStacks[_stackId].revenueRecipient = _revenueRecipient;\\n    }\\n    /// @notice Internal function to set the price of a stack.\\n    /// @param _stackId The ID of the stack.\\n    /// @param _price The new price.\\n    function _setPrice(uint _stackId, uint _price) internal {\\n        shipStacks[_stackId].price = _price;\\n    }\\n    /// @notice Internal function to set the exclusive buyer of a stack.\\n    /// @param _stackId The ID of the stack.\\n    /// @param _exclusiveBuyer The new value of exclusiveBuyer.\\n    function _setExclusiveBuyer(uint _stackId, address _exclusiveBuyer) internal {\\n        shipStacks[_stackId].exclusiveBuyer = _exclusiveBuyer;\\n    }\\n\\n    /// @notice Modifier to ensure only the stack owner can call the function.\\n    /// @param _stackId The ID of the stack.\\n    modifier onlyStackOwner(uint _stackId) {\\n        requireValidStackId(_stackId);\\n        require(msg.sender == shipStacks[_stackId].owner, \\\"msg.sender != owner\\\");\\n        _;\\n    }\\n\\n    /// @notice Modifier to ensure only the stack operator can call the function.\\n    /// @param _stackId The ID of the stack.\\n    modifier onlyStackOperator(uint _stackId) {\\n        requireValidStackId(_stackId);\\n        require(msg.sender == shipStacks[_stackId].operator, \\\"msg.sender != operator\\\");\\n        _;\\n    }\\n\\n    /// @notice Modifier to ensure only the stack depositor can call the function.\\n    /// @param _stackId The ID of the stack.\\n    modifier onlyStackDepositor(uint _stackId) {\\n        requireValidStackId(_stackId);\\n        require(msg.sender == shipStacks[_stackId].depositor, \\\"msg.sender != depositor\\\");\\n        _;\\n    }\\n\\n    /// @notice Internal function to validate the given stack ID.\\n    /// @param _stackId The ID of the stack to validate.\\n    /// @dev Throws if the stack ID is out of range.\\n    function requireValidStackId(uint _stackId)\\n        internal\\n        view\\n    {\\n        require(_stackId < shipStacks.length, \\\"Invalid _stackId\\\");\\n    }\\n    \\n    /// @notice Retrieve information about a specific ship stack.\\n    /// @param _stackId The ID of the ship stack.\\n    /// @dev Stack must be initialized.\\n    /// @return owner The owner of the ship stack.\\n    /// @return operator The operator authorized for the ship stack.\\n    /// @return price The price to buy a ship.\\n    /// @return onlyBuyerIfSet If not the zero address, only this address can buy from this stack.\\n    /// @return revenueRecipient Address where revenue is forwarded.\\n    /// @return numShips The number of ships in this stack.\\n    function getStackInfo(uint _stackId)\\n        external\\n        view\\n        returns(\\n            address owner,\\n            address operator,\\n            uint price,\\n            address onlyBuyerIfSet,\\n            address payable revenueRecipient,\\n            uint numShips\\n        )\\n    {\\n        requireValidStackId(_stackId);\\n\\n        return(\\n            shipStacks[_stackId].owner,\\n            shipStacks[_stackId].operator,\\n            shipStacks[_stackId].price,\\n            shipStacks[_stackId].exclusiveBuyer,\\n            shipStacks[_stackId].revenueRecipient,\\n            shipStacks[_stackId].ships.length\\n        );\\n    }\\n\\n    /// @notice Deposits ships into a ship stack.\\n    /// @dev This contract must be approved to send each id (i.e. by calling setApprovalForAll)\\n    /// @dev msg.sender must be approved to send each id as defined by azimuthContract.canTransfer\\n    /// @param _stackId The identifier of the ship stack.\\n    /// @param _ids The array of ship IDs to deposit.\\n    function depositShips(uint _stackId, uint32[] calldata _ids)\\n        external\\n        onlyStackDepositor(_stackId)\\n    {\\n        ShipStack storage shipStack = shipStacks[_stackId];\\n\\n        IEcliptic ecliptic = IEcliptic(azimuthContract.owner());\\n        for (uint i; i<_ids.length;) {\\n            require(azimuthContract.canTransfer(_ids[i], msg.sender), \\\"msg.sender can't transfer point\\\");\\n\\n            ecliptic.transferPoint(_ids[i], address(this), false);\\n            shipStack.ships.push(_ids[i]);\\n\\n            unchecked { i ++ ;}\\n        }\\n    }\\n\\n    /// @notice Recalls ships from a ship stack.\\n    /// @dev Stack must be initialized.\\n    /// @param _stackId The identifier of the ship stack.\\n    /// @param _amount The number of ships to recall.\\n    /// @param _recipient The recipient of the recalled ships.\\n    /// @param breach Whether to breach the ship.\\n    function recallShips(uint _stackId, uint _amount, address _recipient, bool breach)\\n        external\\n        onlyStackDepositor(_stackId)\\n    {\\n        ShipStack storage shipStack = shipStacks[_stackId];\\n\\n        require(_amount <= shipStack.ships.length, \\\"Not that many ships in that stack\\\");\\n\\n        IEcliptic ecliptic = IEcliptic(azimuthContract.owner());\\n        for (uint i = 0; i < _amount;) {\\n            ecliptic.transferPoint(shipStack.ships[shipStack.ships.length - 1], _recipient, breach);\\n            shipStack.ships.pop();\\n\\n            unchecked { i ++ ;}\\n        }\\n    }\\n\\n    /// @notice Event emitted when a ship is bought.\\n    /// @param stackId The ID of the ship stack.\\n    /// @param recipient The address receiving the ship.\\n    event ShipBought(uint indexed stackId, address indexed recipient);\\n\\n    /// @notice Allows a user to buy a ship from a specific stack.\\n    /// @dev Checks for sufficient Ether and permissions before executing the purchase.\\n    /// @param _stackId The ID of the ship stack.\\n    /// @param _recipient The address to which the bought ship will be sent.\\n    /// @return shipId The ID of the bought ship.\\n    function buyShip(uint _stackId, address _recipient)\\n        external\\n        payable\\n        returns(uint32 shipId)\\n    {\\n        requireValidStackId(_stackId);\\n        require(shipStacks[_stackId].deployed, \\\"Ship stack not deployed\\\");\\n\\n        ShipStack storage shipStack = shipStacks[_stackId];\\n\\n        require(msg.value == shipStack.price, \\\"Incorrect ether amount included\\\");\\n        require(shipStack.ships.length > 0, \\\"Stack has no ships\\\");\\n        \\n        if (shipStack.exclusiveBuyer != address(0)) {\\n            require(msg.sender == shipStack.exclusiveBuyer, \\\"buyer not approved\\\");\\n        }\\n\\n        shipId = shipStack.ships[shipStack.ships.length - 1];\\n\\n        IEcliptic ecliptic = IEcliptic(azimuthContract.owner());\\n        ecliptic.transferPoint(shipId, _recipient, false);\\n        \\n        shipStack.ships.pop();\\n\\n        (bool success,) = shipStack.revenueRecipient.call{value: msg.value}(\\\"\\\");\\n        require(success, \\\"failed to forward revenue\\\");\\n\\n        emit ShipBought(_stackId, _recipient);\\n    }\\n}\"\r\n    },\r\n    \"src/PillStore.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.18;\\n\\nimport \\\"openzeppelin/token/ERC721/ERC721.sol\\\";\\n\\n/// @title PillStore contract\\n/// @notice Allows anyone to define a \\\"Pill\\\" NFT set, with various permissions and settings, and allows other users to mint Pills from these sets.\\n/// @author Logan Brutsche\\ncontract PillStore {\\n    PillSet[] public pillSets;\\n\\n    /// @notice struct to represent PillSets\\n    struct PillSet {\\n        address owner; // 0 indicates the set has not been initialized\\n        address operator; // 0 indicates the contract has not been deployed\\n        uint price; // 0 indicates free\\n        uint supplyLimit; // 0 indicates no limit\\n        address exclusiveBuyer; // 0x0 indicates anyone can buy\\n        address payable revenueRecipient;\\n        Pill nftContract;\\n    }\\n\\n    /// @notice Prepare a PillSet to be deployed later\\n    /// @param _owner The owner of the set. Can change operator and revenueRecipient, and transfer ownership\\n    /// @param _operator The address that will be allowed to deploy and manage the pill set.\\n    /// @param _revenueRecipient The address to which revenue from pill sales will be sent.\\n    function prepPillSet(address _owner, address _operator, address payable _revenueRecipient)\\n        external\\n        returns (uint pillSetId)\\n    {\\n        require(_operator != address(0), \\\"can't set operator 0x0\\\");\\n\\n        // implicitly returns\\n        pillSetId = pillSets.length;\\n\\n        PillSet memory pillSet;\\n        pillSet.owner = _owner;\\n        pillSet.operator = _operator;\\n        pillSet.revenueRecipient = _revenueRecipient;\\n\\n        pillSets.push(pillSet);\\n    }\\n\\n    // onlyOwner funcs\\n\\n    /// @notice Sets the new owner of the stack.\\n    /// @dev Only callable by the stack owner.\\n    /// @param _pillSetId id of the set.\\n    /// @param _owner new owner of the set.\\n    function setOwner(uint _pillSetId, address _owner)\\n        external\\n        onlyPillSetOwner(_pillSetId)\\n    {\\n        _setOwner(_pillSetId, _owner);\\n    }\\n    /// @notice Sets the operator buyer of a PillSet.\\n    /// @dev Only callable by the stack owner.\\n    /// @param _pillSetId id of the set.\\n    /// @param _operator new operator of the set.\\n    function setOperator(uint _pillSetId, address _operator)\\n        external\\n        onlyPillSetOwner(_pillSetId)\\n    {\\n        _setOperator(_pillSetId, _operator);\\n    }\\n    /// @notice Sets the exclusive buyer of a PillSet.\\n    /// @dev Only callable by the stack owner.\\n    /// @param _pillSetId id of the set.\\n    /// @param _revenueRecipient new revenue recipient of the set.\\n    function setRevenueRecipient(uint _pillSetId, address payable _revenueRecipient)\\n        external\\n        onlyPillSetOwner(_pillSetId)\\n    {\\n        _setRevenueRecipient(_pillSetId, _revenueRecipient);\\n    }\\n\\n    // onlyOperator funcs\\n\\n    /// @notice Initialize a PillSet with full configuration, and deploy a Pill NFT contract.\\n    /// @param _pillSetId id of the set.\\n    /// @param _price Price to mint an token from this set. Zero indicates free.\\n    /// @param _supplyLimit Maximum number of tokens that can be minted. Zero indicates unlimited.\\n    /// @param _exclusiveBuyerIfSet If not the zero address, only this buyer can mint a token from this set.\\n    /// @param _appName The name of the Urbit app this NFT represents.\\n    /// @param _metadataUrl the URL for the NFT metadata.\\n    /// @return Returns the deployed Pill NFT contract.\\n    function deployPillSet\\n    (\\n        uint _pillSetId,\\n        uint _price,\\n        uint _supplyLimit,\\n        address _exclusiveBuyerIfSet,\\n        string calldata _appName,\\n        string calldata _metadataUrl\\n    )\\n        external\\n        onlyPillSetOperator(_pillSetId)\\n        returns (Pill)\\n    {\\n        PillSet storage pillSet = pillSets[_pillSetId];\\n\\n        // implicitly checks that pillSet.operator != 0x0\\n        require(address(pillSet.nftContract) == address(0), \\\"pillSet already deployed\\\");\\n\\n        _setPrice(_pillSetId, _price);\\n        _setSupplyLimit(_pillSetId, _supplyLimit);\\n        _setExclusiveBuyer(_pillSetId, _exclusiveBuyerIfSet);\\n        return _deployContract(_pillSetId, _appName, _metadataUrl);\\n    }\\n\\n    /// @notice Sets the price of a PillSet.\\n    /// @dev Only callable by the set operator.\\n    /// @param _pillSetId id of the set.\\n    /// @param _price new price of the set.\\n    function setPrice(uint _pillSetId, uint _price)\\n        external\\n        onlyPillSetOperator(_pillSetId)\\n    {\\n        _setPrice(_pillSetId, _price);\\n    }\\n    /// @notice Sets the supply limit of a PillSet.\\n    /// @dev Only callable by the stack operator.\\n    /// @dev Will revert if the new supplyLimit is less than the current supply of the token.\\n    /// @param _pillSetId id of the set.\\n    /// @param _supplyLimit new supply limit of the set.\\n    function setSupplyLimit(uint _pillSetId, uint _supplyLimit)\\n        external\\n        onlyPillSetOperator(_pillSetId)\\n    {\\n        _setSupplyLimit(_pillSetId, _supplyLimit);\\n    }\\n    /// @notice Sets the exclusive buyer of a PillSet.\\n    /// @dev Only callable by the stack operator.\\n    /// @param _pillSetId id of the set.\\n    /// @param _exclusiveBuyerIfSet new exclusive buyer of the set.\\n    /// @dev If set to the zero address, anyone can buy pills from the set.\\n    function setExclusiveBuyer(uint _pillSetId, address _exclusiveBuyerIfSet)\\n        external\\n        onlyPillSetOperator(_pillSetId)\\n    {\\n        _setExclusiveBuyer(_pillSetId, _exclusiveBuyerIfSet);\\n    }\\n\\n    // internal setters\\n\\n    /// @notice Internal function to set the owner of a specific pill set.\\n    /// @param _pillSetId The ID of the pill set.\\n    /// @param _owner The new owner's address.\\n    /// @dev This is an internal function and can't be called externally.\\n    function _setOwner(uint _pillSetId, address _owner) internal {\\n        pillSets[_pillSetId].owner = _owner;\\n    }\\n    /// @notice Internal function to set the operator of a specific pill set.\\n    /// @param _pillSetId The ID of the pill set.\\n    /// @param _operator The new operator's address.\\n    /// @dev This is an internal function and can't be called externally.\\n    function _setOperator(uint _pillSetId, address _operator) internal {\\n        pillSets[_pillSetId].operator = _operator;\\n    }\\n    /// @notice Internal function to set the revenue recipient of a specific pill set.\\n    /// @param _pillSetId The ID of the pill set.\\n    /// @param _revenueRecipient The new revenue recipient's address.\\n    /// @dev This is an internal function and can't be called externally.\\n    function _setRevenueRecipient(uint _pillSetId, address payable _revenueRecipient) internal {\\n        pillSets[_pillSetId].revenueRecipient = _revenueRecipient;\\n    }\\n    /// @notice Internal function to set the price of a specific pill set.\\n    /// @param _pillSetId The ID of the pill set.\\n    /// @param _price The new price.\\n    /// @dev This is an internal function and can't be called externally.\\n    function _setPrice(uint _pillSetId, uint _price) internal {\\n        pillSets[_pillSetId].price = _price;\\n    }\\n    /// @notice Internal function to set the supply limit of a specific pill set.\\n    /// @param _pillSetId The ID of the pill set.\\n    /// @param _supplyLimit The new supply limit.\\n    /// @dev Cannot set the supplyLimit to lower than the current supply of the token\\n    /// @dev 0 is considered infinite supply, and thus _supplyLimit = 0 is always a valid argument.\\n    /// @dev This is an internal function and can't be called externally. Checks that the new supply limit is valid.\\n    function _setSupplyLimit(uint _pillSetId, uint _supplyLimit) internal {\\n        if (address(pillSets[_pillSetId].nftContract) != address(0)) {\\n            require(_supplyLimit == 0 || _supplyLimit >= pillSets[_pillSetId].nftContract.currentSupply(), \\\"new supply limit < current supply\\\");\\n        }\\n        pillSets[_pillSetId].supplyLimit = _supplyLimit;\\n    }\\n    /// @notice Internal function to set the exclusive buyer of a specific pill set.\\n    /// @param _pillSetId The ID of the pill set.\\n    /// @param _exclusiveBuyer The new value of the stack's exclusiveBuyer.\\n    /// @dev This is an internal function and can't be called externally.\\n    function _setExclusiveBuyer(uint _pillSetId, address _exclusiveBuyer) internal {\\n        pillSets[_pillSetId].exclusiveBuyer = _exclusiveBuyer;\\n    }\\n\\n    /// @notice Internal function to deploy a new Pill contract for a specific pill set.\\n    /// @param _pillSetId The ID of the pill set.\\n    /// @param _appName The name of the application.\\n    /// @param _metadataUrl The URL for the metadata.\\n    /// @return The newly deployed Pill contract.\\n    /// @dev Throws if the contract is already deployed for the given pill set.\\n    function _deployContract(uint _pillSetId, string calldata _appName, string calldata _metadataUrl)\\n        internal\\n        returns (Pill)\\n    {\\n        require(address(pillSets[_pillSetId].nftContract) == address(0), \\\"contract already deployed\\\");\\n\\n        return pillSets[_pillSetId].nftContract = new Pill(_appName, _metadataUrl);\\n    }\\n\\n    /// @notice Modifier to check if the caller is the owner of a specific pill set.\\n    /// @param _pillSetId The ID of the pill set.\\n    /// @dev Throws if the caller is not the owner.\\n    /// @dev Also throws if the _pillSetId is invalid\\n    modifier onlyPillSetOwner(uint _pillSetId) {\\n        require(_pillSetId < pillSets.length, \\\"Invalid _pillSetId\\\");\\n        require(msg.sender == pillSets[_pillSetId].owner, \\\"msg.sender != owner\\\");\\n        _;\\n    }\\n\\n    /// @notice Modifier to check if the caller is the operator of a specific pill set.\\n    /// @param _pillSetId The ID of the pill set.\\n    /// @dev Throws if the caller is not the operator.\\n    /// @dev Also throws if the _pillSetId is invalid\\n    modifier onlyPillSetOperator(uint _pillSetId) {\\n        require(_pillSetId < pillSets.length, \\\"Invalid _pillSetId\\\");\\n        require(msg.sender == pillSets[_pillSetId].operator, \\\"msg.sender != operator\\\");\\n        _;\\n    }\\n    \\n    /// @notice Emitted when a Pill NFT is sold.\\n    /// @param pillSetId The ID of the pill set.\\n    /// @param nftId The ID of the minted NFT.\\n    event PillSold(uint indexed pillSetId, uint nftId);\\n\\n    /// @dev Mint a new NFT pill.\\n    /// @param _pillSetId The ID of the pill set.\\n    /// @param _recipient The address to receive the minted NFT.\\n    /// @dev The pill set must be deployed.\\n    /// @dev Sent value must be greater or equal to the pill price.\\n    /// @dev Supply limit must not be reached.\\n    /// @dev Sender must be the exclusive buyer if set.\\n    /// @return nftId The ID of the minted NFT.\\n    function mintPill(uint _pillSetId, address _recipient)\\n        external\\n        payable\\n        returns (uint nftId)\\n    {\\n        PillSet storage pillSet = pillSets[_pillSetId];\\n\\n        require(address(pillSet.nftContract) != address(0),                                            \\\"pill contract not deployed\\\");\\n        require(msg.value >= pillSet.price,                                                            \\\"not enough ether included\\\");\\n        require(pillSet.supplyLimit == 0 || pillSet.nftContract.currentSupply() < pillSet.supplyLimit, \\\"pill sold out\\\");\\n        require(pillSet.exclusiveBuyer == address(0) || msg.sender == pillSet.exclusiveBuyer,          \\\"msg.sender not exclusiveBuyer\\\");\\n\\n        // implicly returns\\n        nftId = pillSet.nftContract.mint(_recipient);\\n\\n        (bool success, ) = pillSet.revenueRecipient.call{value: msg.value}(\\\"\\\");\\n        require(success, \\\"revenue forward failed\\\");\\n\\n        emit PillSold(_pillSetId, nftId);\\n    }\\n\\n    /// @notice Retrieve information about a specific pill set.\\n    /// @param _pillSetId The ID of the pill set.\\n    /// @return owner The owner of the pill set.\\n    /// @return operator The operator for the pill set.\\n    /// @return price The price to mint a pill from this set.\\n    /// @return supplyLimit The maximum supply for this pill set.\\n    /// @return exclusiveBuyer If set, only this address can buy from this set.\\n    /// @return revenueRecipient Address where revenue is forwarded.\\n    /// @return nftContract The contract of the pill NFT.\\n    /// @return name The name of the pill set.\\n    /// @return currentSupply The current supply of pills from this set.\\n    function getPillSetInfo(uint _pillSetId)\\n        external\\n        view\\n        returns(\\n            address owner,\\n            address operator,\\n            uint price,\\n            uint supplyLimit,\\n            address exclusiveBuyer,\\n            address payable revenueRecipient,\\n            Pill nftContract,\\n            string memory name,\\n            uint currentSupply\\n        )\\n    {\\n        PillSet storage pillSet = pillSets[_pillSetId];\\n\\n        (nftContract, name, currentSupply) =\\n            address(pillSet.nftContract) == address(0) ?\\n                (Pill(address(0)), \\\"\\\", 0)\\n              : (pillSet.nftContract, pillSet.nftContract.name(), pillSet.nftContract.currentSupply());\\n\\n        return (\\n            pillSet.owner,\\n            pillSet.operator,\\n            pillSet.price,\\n            pillSet.supplyLimit,\\n            pillSet.exclusiveBuyer,\\n            pillSet.revenueRecipient,\\n            nftContract,\\n            name,\\n            currentSupply\\n        );\\n    }\\n\\n    /// @notice Retrieve the contract for a specific pill set.\\n    /// @param _pillSetId The ID of the pill set to query.\\n    /// @return The Pill contract associated with the specified pill set.\\n    function getPillSetContract(uint _pillSetId)\\n        external\\n        view\\n        returns (Pill)\\n    {\\n        return pillSets[_pillSetId].nftContract;\\n    }\\n}\\n\\n/// @title Pill - NFT Contract for Pill Minting and Management\\n/// @notice This contract allows for the minting and basic management of Pill NFTs. It extends ERC721 for NFT functionality.\\n/// @dev The contract is designed to work specifically with a PillFactory for minting operations. It assumes that the PillFactory is the sole legitimate minter.\\n/// @author Logan Brutsche\\ncontract Pill is ERC721 {\\n    string public appName;\\n    string baseURI;\\n    address public immutable storeAddress;\\n\\n    uint public currentSupply;\\n\\n    /// @notice Create a new Pill NFT contract.\\n    /// @param _appName The name of the application.\\n    /// @param __baseURI The base URI for metadata.\\n    /// @dev We assume that only the PillFactory constructs these; our system ignores any other instances.\\n    constructor(string memory _appName, string memory __baseURI)\\n        ERC721(string.concat(\\\"Pill: \\\", _appName), \\\"PILL\\\")\\n    {\\n        appName = _appName;\\n        baseURI = __baseURI;\\n\\n        storeAddress = msg.sender;\\n    }\\n    \\n    /// @notice Mint a new Pill NFT.\\n    /// @param who The address to receive the minted NFT.\\n    /// @return nftId The ID of the minted NFT.\\n    /// @dev Requires sender to be the store address. Relies on PillFactory for payment and validation.\\n    function mint(address who)\\n        public\\n        returns (uint nftId)\\n    {\\n        require(msg.sender == storeAddress, \\\"msg.sender != PillStore\\\"); // we rely on PillFactory to ensure and collect payment\\n\\n        // implicitly returns\\n        nftId = currentSupply;\\n        _mint(who, nftId);\\n\\n        currentSupply ++;\\n    }\\n\\n    /// @notice Retrieve the base URI for metadata.\\n    /// @return baseURI The base URI string.\\n    /// @dev This function overrides the `_baseURI` function from ERC721.\\n    function _baseURI()\\n        internal\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        return baseURI;\\n    }\\n}\"\r\n    },\r\n    \"src/AzimuthOwnerWrapper.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.18;\\n\\nimport \\\"./Interfaces.sol\\\";\\n\\n/// @notice A wrapper contract for interfacing with the Azimuth point system.\\n/// @dev Provides a stable `ownerOf` method that does not depend on the potentially self-destructing Ecliptic contract.\\ncontract AzimuthOwnerWrapper {\\n    IAzimuth public azimuthContract;\\n    \\n    /// @notice Initialize the contract with a given Azimuth contract.\\n    /// @param _azimuthContract The address of the Azimuth contract.\\n    constructor(IAzimuth _azimuthContract) {\\n        azimuthContract = _azimuthContract;\\n    }\\n\\n    /// @notice Returns the Ecliptic contract associated with the current Azimuth contract.\\n    /// @return The Ecliptic contract address.\\n    function eclipticContract()\\n        public\\n        view\\n        returns(IEcliptic)\\n    {\\n        return IEcliptic(azimuthContract.owner());\\n    }\\n\\n    /// @notice Retrieve the owner of a given Azimuth point.\\n    /// @param tokenId The ID of the Azimuth point.\\n    /// @return The address of the token owner.\\n    function ownerOf(uint256 tokenId) external view returns (address) {\\n        return eclipticContract().ownerOf(tokenId);\\n    }\\n}\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Create2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Not enough balance for performing a CREATE2 deploy.\\n     */\\n    error Create2InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev There's no code to deploy.\\n     */\\n    error Create2EmptyBytecode();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error Create2FailedDeployment();\\n\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        if (address(this).balance < amount) {\\n            revert Create2InsufficientBalance(address(this).balance, amount);\\n        }\\n        if (bytecode.length == 0) {\\n            revert Create2EmptyBytecode();\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        if (addr == address(0)) {\\n            revert Create2FailedDeployment();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \u2193 ptr ...  \u2193 ptr + 0x0B (start) ...  \u2193 ptr + 0x20 ...  \u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/TokenGatedAccount/src/IERC6551Registry.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.18;\\n\\ninterface IERC6551Registry {\\n    /**\\n     * @dev The registry SHALL emit the AccountCreated event upon successful account creation\\n     */\\n    event AccountCreated(\\n        address account,\\n        address indexed implementation,\\n        uint256 chainId,\\n        address indexed tokenContract,\\n        uint256 indexed tokenId,\\n        uint256 salt\\n    );\\n\\n    /**\\n     * @dev Creates a token bound account for a non-fungible token.\\n     *\\n     * If account has already been created, returns the account address without calling create2.\\n     *\\n     * If initData is not empty and account has not yet been created, calls account with\\n     * provided initData after creation.\\n     *\\n     * Emits AccountCreated event.\\n     *\\n     * @return the address of the account\\n     */\\n    function createAccount(\\n        address implementation,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId,\\n        uint256 salt,\\n        bytes calldata initData\\n    ) external returns (address);\\n\\n    /**\\n     * @dev Returns the computed token bound account address for a non-fungible token\\n     *\\n     * @return The computed address of the token bound account\\n     */\\n    function account(\\n        address implementation,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId,\\n        uint256 salt\\n    ) external view returns (address);\\n}\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC1271.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/cryptography/SignatureChecker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ECDSA} from \\\"./ECDSA.sol\\\";\\nimport {IERC1271} from \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Safe Wallet (previously Gnosis Safe).\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error, ) = ECDSA.tryRecover(hash, signature);\\n        return\\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\\n            isValidERC1271SignatureNow(signer, hash, signature);\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC1271.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeCall(IERC1271.isValidSignature, (hash, signature))\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/sstore2/contracts/utils/Bytecode.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nlibrary Bytecode {\\n  error InvalidCodeAtRange(uint256 _size, uint256 _start, uint256 _end);\\n\\n  /**\\n    @notice Generate a creation code that results on a contract with `_code` as bytecode\\n    @param _code The returning value of the resulting `creationCode`\\n    @return creationCode (constructor) for new contract\\n  */\\n  function creationCodeFor(bytes memory _code) internal pure returns (bytes memory) {\\n    /*\\n      0x00    0x63         0x63XXXXXX  PUSH4 _code.length  size\\n      0x01    0x80         0x80        DUP1                size size\\n      0x02    0x60         0x600e      PUSH1 14            14 size size\\n      0x03    0x60         0x6000      PUSH1 00            0 14 size size\\n      0x04    0x39         0x39        CODECOPY            size\\n      0x05    0x60         0x6000      PUSH1 00            0 size\\n      0x06    0xf3         0xf3        RETURN\\n      <CODE>\\n    */\\n\\n    return abi.encodePacked(\\n      hex\\\"63\\\",\\n      uint32(_code.length),\\n      hex\\\"80_60_0E_60_00_39_60_00_F3\\\",\\n      _code\\n    );\\n  }\\n\\n  /**\\n    @notice Returns the size of the code on a given address\\n    @param _addr Address that may or may not contain code\\n    @return size of the code on the given `_addr`\\n  */\\n  function codeSize(address _addr) internal view returns (uint256 size) {\\n    assembly { size := extcodesize(_addr) }\\n  }\\n\\n  /**\\n    @notice Returns the code of a given address\\n    @dev It will fail if `_end < _start`\\n    @param _addr Address that may or may not contain code\\n    @param _start number of bytes of code to skip on read\\n    @param _end index before which to end extraction\\n    @return oCode read from `_addr` deployed bytecode\\n\\n    Forked from: https://gist.github.com/KardanovIR/fe98661df9338c842b4a30306d507fbd\\n  */\\n  function codeAt(address _addr, uint256 _start, uint256 _end) internal view returns (bytes memory oCode) {\\n    uint256 csize = codeSize(_addr);\\n    if (csize == 0) return bytes(\\\"\\\");\\n\\n    if (_start > csize) return bytes(\\\"\\\");\\n    if (_end < _start) revert InvalidCodeAtRange(csize, _start, _end); \\n\\n    unchecked {\\n      uint256 reqSize = _end - _start;\\n      uint256 maxSize = csize - _start;\\n\\n      uint256 size = maxSize < reqSize ? maxSize : reqSize;\\n\\n      assembly {\\n        // allocate output byte array - this could also be done without assembly\\n        // by using o_code = new bytes(size)\\n        oCode := mload(0x40)\\n        // new \\\"memory end\\\" including padding\\n        mstore(0x40, add(oCode, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n        // store length in memory\\n        mstore(oCode, size)\\n        // actually retrieve the code, this needs assembly\\n        extcodecopy(_addr, add(oCode, 0x20), _start, size)\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/TokenGatedAccount/src/IERC6551Account.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.18;\\n\\n/// @dev the ERC-165 identifier for this interface is `0x6faff5f1`\\ninterface IERC6551Account {\\n    /**\\n     * @dev Allows the account to receive Ether\\n     *\\n     * Accounts MUST implement a `receive` function.\\n     *\\n     * Accounts MAY perform arbitrary logic to restrict conditions\\n     * under which Ether can be received.\\n     */\\n    receive() external payable;\\n\\n    /**\\n     * @dev Returns the identifier of the non-fungible token which owns the account\\n     *\\n     * The return value of this function MUST be constant - it MUST NOT change\\n     * over time\\n     *\\n     * @return chainId       The EIP-155 ID of the chain the token exists on\\n     * @return tokenContract The contract address of the token\\n     * @return tokenId       The ID of the token\\n     */\\n    function token()\\n        external\\n        view\\n        returns (\\n            uint256 chainId,\\n            address tokenContract,\\n            uint256 tokenId\\n        );\\n\\n    /**\\n     * @dev Returns a value that SHOULD be modified each time the account changes state\\n     *\\n     * @return The current account state\\n     */\\n    function state() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a magic value indicating whether a given signer is authorized to act on behalf of the account\\n     *\\n     * MUST return the bytes4 magic value 0x523e3260 if the given signer is valid\\n     *\\n     * By default, the holder of the non-fungible token the account is bound to MUST be considered a valid\\n     * signer\\n     *\\n     * Accounts MAY implement additional authorization logic which invalidates the holder as a\\n     * signer or grants signing permissions to other non-holder accounts\\n     *\\n     * @param  signer     The address to check signing authorization for\\n     * @param  context    Additional data used to determine whether the signer is valid\\n     * @return magicValue Magic value indicating whether the signer is valid\\n     */\\n    function isValidSigner(address signer, bytes calldata context)\\n        external\\n        view\\n        returns (bytes4 magicValue);\\n}\"\r\n    },\r\n    \"lib/TokenGatedAccount/src/IERC6551Executable.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.18;\\n\\n/// @dev the ERC-165 identifier for this interface is `0x74420f4c`\\ninterface IERC6551Executable {\\n    /**\\n     * @dev Executes a low-level operation if the caller is a valid signer on the account\\n     *\\n     * Reverts and bubbles up error if operation fails\\n     *\\n     * @param to        The target address of the operation\\n     * @param value     The Ether value to be sent to the target\\n     * @param data      The encoded operation calldata\\n     * @param operation A value indicating the type of operation to perform\\n     *\\n     * Accounts implementing this interface MUST accept the following operation parameter values:\\n     * - 0 = CALL\\n     * - 1 = DELEGATECALL\\n     * - 2 = CREATE\\n     * - 3 = CREATE2\\n     *\\n     * Accounts implementing this interface MAY support additional operations or restrict a signer's\\n     * ability to execute certain operations\\n     *\\n     * @return The result of the operation\\n     */\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        uint256 operation\\n    ) external payable returns (bytes memory);\\n}\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"sstore2/=lib/sstore2/contracts/\",\r\n      \"TokenGatedAccount/=lib/TokenGatedAccount/src/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"shanghai\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_miladysContract\",\"type\":\"address\"},{\"internalType\":\"contract IERC721\",\"name\":\"_avatarContract\",\"type\":\"address\"},{\"internalType\":\"contract IAzimuth\",\"name\":\"_azimuthContract\",\"type\":\"address\"},{\"internalType\":\"contract ISoulboundAccessories\",\"name\":\"_soulboundAccessoriesContract\",\"type\":\"address\"},{\"internalType\":\"contract TBARegistry\",\"name\":\"_tgaRegistry\",\"type\":\"address\"},{\"internalType\":\"contract TokenGatedAccount\",\"name\":\"_tgaAccountImpl\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_onboardingGasForwardAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[4]\",\"name\":\"privilegedAddrs\",\"type\":\"address[4]\"},{\"internalType\":\"address payable\",\"name\":\"_revenueRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"prices\",\"type\":\"uint256[2]\"},{\"internalType\":\"string\",\"name\":\"mosMetadataUrl\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"azimuthOwnerWrapperContract\",\"outputs\":[{\"internalType\":\"contract AzimuthOwnerWrapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mosOnboarding\",\"outputs\":[{\"internalType\":\"contract MOSOnboarding\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pillSetId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pillStoreContract\",\"outputs\":[{\"internalType\":\"contract PillStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shipStackId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shipStoreContract\",\"outputs\":[{\"internalType\":\"contract ShipStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Deployer", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005af0d9827e0c53e4799bb226655a1de152a425a50000000000000000000000000ef38ae5b7ba0b8641cf34c2b9bac3694b92eeff000000000000000000000000223c067f8cf28ae173ee5cafea60ca44c335fecb000000000000000000000000223d1aec02b2db27f8988807f5c56f2f421138a900000000000000000000000067d12c4db022c543cb7a678f882edc935b8989400000000000000000000000004584dbf0510e86dcc2f36038c6473b1a0fc5aef30000000000000000000000000000000000000000000000000058d15e17628000000000000000000000000000cbdde4e4b440bdae14e3154afc855a9d6569c3fb0000000000000000000000006bb2e1b8debfa598442b128376c4f06a6797d1c6000000000000000000000000cbdde4e4b440bdae14e3154afc855a9d6569c3fb000000000000000000000000ae8e8f79e9bcfaa24e345ccce1ea25b1b2cf9c8e000000000000000000000000a674df005fe7eec85d0f78e15204e6d0a8e1168d000000000000000000000000000000000000000000000000007c58508723800000000000000000000000000000000000000000000000000001aa535d3d0c000000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000039697066733a2f2f516d585865544a7a4d56534d36547a6450465a313959426d7a4c66317832335872444d723745416a6b547648666e3f69643d00000000000000", "EVMVersion": "shanghai", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}