{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/EtherEthos.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity >=0.7.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\ninterface iDelegate {\\r\\n    function checkDelegateForContract(\\r\\n        address _delegate,\\r\\n        address _vault,\\r\\n        address _contract,\\r\\n        bytes32 rights\\r\\n    ) external view returns (bool);\\r\\n}\\r\\n\\r\\ninterface iExternalContract {\\r\\n    function owner() external view returns (address);\\r\\n}\\r\\n\\r\\n/// @title EtherEthos (v1.0) - offered 'as-is', without warranty, and disclaiming liability for damages resulting from using the contract or data stored on it.\\r\\n/// @author Matto AKA MonkMatto\\r\\n/// @notice EtherEthos is a hyperstructure that facilitates the creation of a composable EtherEthos (profile) for Ethereum addresses.\\r\\n/// It empowers users to share links, associated accounts, and personal account details such as an alias, a preferred social media link, and a preferred PFP.\\r\\n/// Users should refrain from submitting Personally Identifying Information (PII) - this is the realm of crypto, not LinkedIn.\\r\\n/// This contract provides functionalities for adding, editing, and removing user details, and enables users to express their wish to 'opt-out' from their data being used in composition.\\r\\n/// Users must understand that by storing data in this contract, the submitted text-data becomes publicly accessible and may be used in smart contract composition, including but not limited to tokens, other contracts, or other decentralized applications (dApps) within the blockchain ecosystem.\\r\\n/// While 'opting-out' by toggling an account's composable value to false disables some data-returning functions, due to the public nature of the data, 'opt-outs' cannot be guaranteed to be respected by third-party developers.\\r\\n/// To ensure that live-data is not used in composition, users can overwrite all existing data with empty strings. However, users must understand that the historical data may still be accessed by third-party developers.\\r\\n/// This contract encourages developers to compose with EtherEthos's data, including into tokens, ideally in a responsible manner respecting the users' opt-out requests.\\r\\n/// @dev This contract supports account delegation, a feature allowing authorized accounts to add or modify details on behalf of other accounts.\\r\\n/// Although all user-submitted data is stored on-chain and is publicly accessible, contracts aiming to compose with this contract's data must adhere to using the assemble* functions to retrieve data,\\r\\n/// in order to respect the preferences of accounts that have requested their data to be excluded from composition.\\r\\n/// Limited moderation features are also supported, allowing authorized accounts to toggle an account's composability, and to block/unblock accounts from writing to the contract.\\r\\n/// @custom:experimental This contract is experimental, and no guarantees are made regarding its functionality, security, or lifespan. If a new version is deployed, it may not be backwards compatible.\\r\\n/// @custom:security-contact For any security concerns, please reach out to monkmatto@protonmail.com.\\r\\n/// @custom:legal-disclaimer Users are solely responsible for the data they provide, including text descriptions, URLs, and smart contracts. Submission of illegal, malicious, or harmful data is strictly prohibited.\\r\\n/// Matto, EtherEthos, Substratum, and all associated entities disclaim all liability for any damages resulting from the use or misuse of data provided by users.\\r\\n/// EtherEthos does not have control over user-submitted content, nor provides any guarantee on the safety or reliability of any data, including links to third-party websites or contracts.\\r\\n/// The use of any data, links, or contracts stored within this contract and presented by frontend applications is entirely at the end-user's risk.\\r\\n/// The act of composing data from this contract into tokens, other contracts, or digital assets lies solely at the discretion and risk of the user and/or contract developer.\\r\\n/// Such composability carries risks and implications, which may include but are not limited to data permanence, security issues, social costs, and legal considerations. By accessing this contract, users and developers, certify they have considered the potential risks and accept all risks and implications both foreseeable and unforeseeable at the time of use.\\r\\n/// If present, the data stored in this contract's 'legal' variable supersedes the above legal disclaimers. In the event of conflicting terms, the conditions outlined in the 'legal' variable take precedence.\\r\\n\\r\\ncontract EtherEthos is Ownable {\\r\\n    using Strings for string;\\r\\n\\r\\n    // Contains the permissions for each account.\\r\\n    struct Perms {\\r\\n        bool composable; // Whether or not the account has an active composable EtherEthos.\\r\\n        bool accountIsBlocked; // Whether or not the account is blocked.\\r\\n        bool moderator; // Whether or not the account is a moderator.\\r\\n        string verificationResponse; // The response to a verification request.\\r\\n    }\\r\\n\\r\\n    // Contains basic account information. The 'Detail' string is limited to 320 bytes, while all other strings are limited to 160 bytes.\\r\\n    struct Basics {\\r\\n        string accountAlias; // An alias or nickname for the account.\\r\\n        string detail; // Detailed information about the account.\\r\\n        string socialLink; // Social media link for the account.\\r\\n        string website; // Website link for the account.\\r\\n        string gallery; // Link to a gallery of the account's work or collection.\\r\\n        uint256 ping; // A timestamp of the last time the account was pinged.\\r\\n        uint256 pfpTokenId; // The token ID of the profile picture NFT.\\r\\n        address pfpContract; // The contract address of the profile picture NFT.\\r\\n        uint8 priorityLink; // stores the priority link for the account.\\r\\n    }\\r\\n\\r\\n    // Pairs two strings together for various uses in the contract. k and v are used to represent the key and value type of relationship of the pair.\\r\\n    struct StrPair {\\r\\n        string k; // The first string in the pair.\\r\\n        string v; // The second string associated with the first string.\\r\\n    }\\r\\n\\r\\n    // Pairs an address with a string for various uses in the contract. k and v are used to represent the key and value type of relationship of the pair.\\r\\n    struct AddrPair {\\r\\n        address k; // The address in the pair.\\r\\n        string v; // The string associated with the address.\\r\\n    }\\r\\n\\r\\n    // The legal disclaimer override for the contract.\\r\\n    string public legal;\\r\\n    // The number of active Composable EtherEthos records (EEs) in the contract.\\r\\n    uint256 public activeEEs;\\r\\n    // Stores the permissions for each account.\\r\\n    mapping(address => Perms) public permissions;\\r\\n\\r\\n    // The address of the Delegate contract.\\r\\n    address private delegateContract = 0x00000000000000447e69651d841bD8D104Bed493;\\r\\n    // Stores all moderators in a private array.\\r\\n    address[] private allModerators;\\r\\n\\r\\n    // Stores the basic information for each account.\\r\\n    mapping(address => Basics) private basics;\\r\\n    // Stores a string of any size for use in specific composability scenarios.\\r\\n    mapping(address => string) private custom;\\r\\n\\r\\n    // Stores an array of additional link pairs (URL and description) for each account.\\r\\n    mapping(address => StrPair[]) private additionalLinks;\\r\\n    // Stores an array of associated account pairs (address and description) for each account.\\r\\n    mapping(address => AddrPair[]) private associatedAccounts;\\r\\n    // Stores an array of badgesReceived pairs (badge description and granting account) for each account.\\r\\n    mapping(address => AddrPair[]) private badgesReceived;\\r\\n    // Stores an array notesReceived pairs (note text and writing account) for each account.\\r\\n    mapping(address => AddrPair[]) private notesReceived;\\r\\n\\r\\n    // Keeps track of the index of each note writer's address in the note recipient's array of noteWriters.\\r\\n    mapping(address => mapping(address => uint256)) private noteWritersIndex;\\r\\n    // Stores an array of tags for each account.\\r\\n    mapping(address => string[]) private tags;\\r\\n\\r\\n    // Stores the addresses of accounts who have respected each account.\\r\\n    mapping(address => address[]) private respecters;\\r\\n    // Keeps track of where each respecter's address is in the respected account's array of respecters.\\r\\n    mapping(address => mapping(address => uint256)) private respectersIndex;\\r\\n    // Stores the addresses of accounts that each account respects.\\r\\n    mapping(address => address[]) private respecting;\\r\\n    // Keeps track of where each respected address is in the respecting account's array.\\r\\n    mapping(address => mapping(address => uint256)) private respectingIndex;\\r\\n\\r\\n    /// @notice Event to alert clients that a EtherEthos's composability has been changed for an account.\\r\\n    /// @dev This event is emitted when a user adds basic data to their EtherEthos or toggles their EtherEthos's composability state.\\r\\n    /// This provides a way to track account composability on-chain.\\r\\n    /// @param _account The address of the account whose EtherEthos composability has changed.\\r\\n    /// @param _status The new composability status of the account. True indicates that the account's EtherEthos is now composable, false indicates that the account's EtherEthos is no longer composable.\\r\\n    event Composable(address indexed _account, bool _status);\\r\\n\\r\\n    /// @notice Event to alert clients that an account has become or stopped being a moderator.\\r\\n    /// @dev Emitted when the moderator status of an account is toggled.\\r\\n    /// @param _account The address of the account whose moderator status has been changed.\\r\\n    /// @param _status The new moderator status of the account. True indicates that the account is a moderator,\\r\\n    /// false indicates that the account is not a moderator.\\r\\n    event Moderator(address indexed _account, bool _status);\\r\\n\\r\\n    /// @notice Event to alert clients that an account has been blocked or unblocked.\\r\\n    /// @dev Emitted when an account's access to write data to the contract is toggled.\\r\\n    /// @param _account The address of the account whose access status has been changed.\\r\\n    /// @param _status The new access status of the account. True indicates that the account is now blocked from writing to the contract, false indicates that the account is unblocked.\\r\\n    event Blocked(address indexed _account, bool _status);\\r\\n\\r\\n    /// @notice Event to alert clients that an account has been respected / unrespected.\\r\\n    /// @dev Emitted when an account has a change in respect status.\\r\\n    /// @param _respected The address of the account that has been respected.\\r\\n    /// @param _respecter The address of the account that has respected the other account.\\r\\n    /// @param _status The new respect status of the account.\\r\\n    event Respected(\\r\\n        address indexed _respected,\\r\\n        address indexed _respecter,\\r\\n        bool _status\\r\\n    );\\r\\n\\r\\n    /// @notice Event to alert clients that a bulk badge grant has been made.\\r\\n    /// @dev Emitted when an account has been granted multiple badges at once.\\r\\n    /// @param _granter The address of the account that has granted badges.\\r\\n    /// @param _receiver Array of addresses of accounts that has received a badge.\\r\\n    /// @param _badge Description of the badge that have been granted.\\r\\n    event Badged(address indexed _granter, address[] _receiver, string _badge);\\r\\n\\r\\n    /// @notice Event to alert clients that an account recieved a note.\\r\\n    /// @dev Emitted when an account has a note written for them, or when a note is updated.\\r\\n    /// @param _noteReceiver The address of the account that has recieved a note.\\r\\n    /// @param _noteWriter The address of the account that has written the note.\\r\\n    /// @param _note The note that has been written.\\r\\n    event Noted(\\r\\n        address indexed _noteReceiver,\\r\\n        address indexed _noteWriter,\\r\\n        string _note\\r\\n    );\\r\\n\\r\\n    /// @notice Event to alert clients that the contract has updated terms stored in the legal variable.\\r\\n    /// @dev Emitted when the content in the legal variable is updated.\\r\\n    /// @param _legal The new content to be stored in the legal variable.\\r\\n    event LegalUpdated(string _legal);\\r\\n\\r\\n    /// @notice Checks if the sender is authorized to act on behalf of a specified account.\\r\\n    /// @dev The sender must either be the account itself or a valid delegate.\\r\\n    /// The account must not be blocked. The delegate validity is checked via a separate contract.\\r\\n    /// @param _account The account for which the sender might be acting.\\r\\n    modifier isAuthorized(address _account) {\\r\\n        require(_accountAuthorized(_account), \\\"!Auth\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if the given requester is authorized for the given account.\\r\\n    /// @dev The requester is considered authorized if they are the account itself or a valid delegate.\\r\\n    /// The delegate validity is checked via a separate contract.\\r\\n    /// @param _account The account to be checked for authorization.\\r\\n    /// @return Returns true if the requester is authorized for the given account, otherwise false.\\r\\n    function _accountAuthorized(address _account) internal view returns (bool) {\\r\\n        require(!permissions[_account].accountIsBlocked, \\\"Blocked\\\");\\r\\n        address requester = msg.sender;\\r\\n        return\\r\\n            requester == _account ||\\r\\n            iDelegate(delegateContract).checkDelegateForContract(\\r\\n                requester,\\r\\n                _account,\\r\\n                address(this),\\r\\n                \\\"\\\"\\r\\n            ) ||\\r\\n            requester == iExternalContract(_account).owner();\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if the account has a composable EtherEthos.\\r\\n    /// @dev simplifies external calls for checking if an account has a composable EtherEthos.\\r\\n    /// @param _account The account to check.\\r\\n    /// @return A boolean indicating whether or not the account has a composable EtherEthos.\\r\\n    function isComposable(address _account) external view returns (bool) {\\r\\n        return permissions[_account].composable;\\r\\n    }\\r\\n\\r\\n    /// @notice This function is used to update the timestamp of the last time an account was pinged.\\r\\n    /// @dev This contract can be deployed on any Ethereum L2, and keeping data across L1 and L2s in sync is a challenge.\\r\\n    /// This function is used to update the timestamp of the last time an account was pinged, which can be compared across layers.\\r\\n    /// @param _account The account whose ping timestamp is being updated.\\r\\n    function ping(address _account) public isAuthorized(_account) {\\r\\n        basics[_account].ping = block.timestamp;\\r\\n    }\\r\\n\\r\\n    /// @notice Updates the verification response for a given account.\\r\\n    /// @dev This function is updates a publicly viewable string that is intended to be used as a verification response.\\r\\n    /// This field is cannot be disabled by setting composable to false.\\r\\n    /// Calling account must be authorized to act on behalf of the account being updated.\\r\\n    /// @param _account The account whose verification response is being updated.\\r\\n    /// @param _verificationResponse The new verification response for the account.\\r\\n    function setVerificationResponse(\\r\\n        address _account,\\r\\n        string calldata _verificationResponse\\r\\n    ) external isAuthorized(_account) {\\r\\n        permissions[_account].verificationResponse = _verificationResponse;\\r\\n    }\\r\\n\\r\\n    /// @notice Retrieves all moderators.\\r\\n    /// @dev This function returns an array of all moderators.\\r\\n    /// @return An array of all moderators.\\r\\n    function getModerators() external view returns (address[] memory) {\\r\\n        return allModerators;\\r\\n    }\\r\\n\\r\\n    /// @notice Retrieves all additional links associated with the provided account.\\r\\n    /// @dev This function returns an array of StrPair structures, which contain the URL or identifier of the link and a brief description or detail about the link.\\r\\n    /// @param _account The account whose additional links are being queried.\\r\\n    /// @return A dynamic array of StrPair structures (tuples) representing all the additional links associated with the queried account and their associated details.\\r\\n    function getAdditionalLinkTuples(\\r\\n        address _account\\r\\n    ) external view returns (StrPair[] memory) {\\r\\n        require(permissions[_account].composable);\\r\\n        return additionalLinks[_account];\\r\\n    }\\r\\n\\r\\n    /// @notice Retrieves all associated accounts associated with the provided account.\\r\\n    /// @dev This function returns an array of AddrPair structures, which contain the address of an associated account and a brief description or detail about that account.\\r\\n    /// @param _account The account whose associated accounts are being queried.\\r\\n    /// @return A dynamic array of AddrPair structures (tuples) representing all of an account's associated accounts and their details.\\r\\n    function getAssociatedAccountTuples(\\r\\n        address _account\\r\\n    ) external view returns (AddrPair[] memory) {\\r\\n        require(permissions[_account].composable);\\r\\n        return associatedAccounts[_account];\\r\\n    }\\r\\n\\r\\n    /// @notice Retrieves all badges associated with the provided account.\\r\\n    /// @dev This function returns an array of StrPair structures, which contain a badge's description and the granting account.\\r\\n    /// @param _account The account whose badges are being queried.\\r\\n    /// @return A dynamic array of StrPair structures (tuples) representing all the badges associated with the queried account and their granting accounts.\\r\\n    function getBadgeTuples(\\r\\n        address _account\\r\\n    ) external view returns (AddrPair[] memory) {\\r\\n        require(permissions[_account].composable);\\r\\n        return badgesReceived[_account];\\r\\n    }\\r\\n\\r\\n    /// @notice Updates the legal disclaimer for the contract.\\r\\n    /// @dev This function can only be called by the contract owner.\\r\\n    /// @param _legal The new legal disclaimer.\\r\\n    function updateLegal(string calldata _legal) external onlyOwner {\\r\\n        legal = _legal;\\r\\n        emit LegalUpdated(_legal);\\r\\n    }\\r\\n\\r\\n    /// @notice Updates the Delegate contract address.\\r\\n    /// @dev This function can only be called by the contract owner.\\r\\n    /// @param _delegateContract The new Delegate contract address.\\r\\n    function updateDelegateContract(address _delegateContract) external onlyOwner {\\r\\n        delegateContract = _delegateContract;\\r\\n    }\\r\\n\\r\\n    /// @notice Toggles the moderator status of an account.\\r\\n    /// @dev Moderators have permissions to block/unblock accounts and set records.\\r\\n    /// Toggling changes the account's moderator status; if the account was a moderator,\\r\\n    /// it will no longer be one, and vice versa.\\r\\n    /// The account's address is also added to or removed from the allModerators array.\\r\\n    /// This function can only be called by the contract owner.\\r\\n    /// @param _account The account whose moderator status is being changed.\\r\\n    function toggleModerator(address _account) external onlyOwner {\\r\\n        if (permissions[_account].moderator) {\\r\\n            for (uint256 i = 0; i < allModerators.length; i++) {\\r\\n                if (allModerators[i] == _account) {\\r\\n                    allModerators[i] = allModerators[allModerators.length - 1];\\r\\n                    allModerators.pop();\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            allModerators.push(_account);\\r\\n        }\\r\\n        permissions[_account].moderator = !permissions[_account].moderator;\\r\\n        emit Moderator(_account, permissions[_account].moderator);\\r\\n    }\\r\\n\\r\\n    /// @notice Toggles an account's access to write data to the contract.\\r\\n    /// @dev A moderator has the permission to block/unblock accounts from writing to the contract.\\r\\n    /// This function changes the access status of an account: if it was blocked, it will be unblocked and vice versa.\\r\\n    /// Note that a moderator cannot block/unblock their own account.\\r\\n    /// @param _account The account whose access status is being changed.\\r\\n    function toggleAccountBlock(address _account) external {\\r\\n        require(permissions[msg.sender].moderator && msg.sender != _account);\\r\\n        if (!permissions[_account].accountIsBlocked) {\\r\\n            permissions[_account].accountIsBlocked = true;\\r\\n            _deactivateComposability(_account);\\r\\n        } else {\\r\\n            permissions[_account].accountIsBlocked = false;\\r\\n        }\\r\\n        emit Blocked(_account, permissions[_account].accountIsBlocked);\\r\\n    }\\r\\n\\r\\n    /// @notice Used by an account to block itself due to a compromised private key.\\r\\n    /// @dev This function blocks and deactivates composability for the account.\\r\\n    /// @param _account The account that is blocking itself.\\r\\n    function blockMyCompromisedAccount(address _account) external isAuthorized(_account) {\\r\\n        permissions[_account].accountIsBlocked = true;\\r\\n        _deactivateComposability(_account);\\r\\n        emit Blocked(_account, true);\\r\\n    }\\r\\n\\r\\n    /// @notice Allows setting many of the basic details of an account at once.\\r\\n    /// @dev By setting many basic details at once, it can help save gas costs and also activates the EtherEthos.\\r\\n    /// The detail is limited to 320 bytes, while all other strings are limited to 160 bytes.\\r\\n    /// If a string is longer than allowed, the transaction will fail, costing gas.\\r\\n    /// This operation can only be performed by an authorized entity.\\r\\n    /// @param _account The account whose details are being updated.\\r\\n    /// @param _alias The new alias to be associated with the account. This could be a nickname or a pseudonym.\\r\\n    /// @param _detail The new detail text to be stored. This could include additional information about the account holder.\\r\\n    /// @param _socialLink A new socialLink text to be stored. This could be a link to a social media.\\r\\n    /// @param _website A new website link text to be stored.\\r\\n    /// @param _gallery A new gallery link text to be stored.\\r\\n    function setMainBasics(\\r\\n        address _account,\\r\\n        string calldata _alias,\\r\\n        string calldata _detail,\\r\\n        string calldata _socialLink,\\r\\n        string calldata _website,\\r\\n        string calldata _gallery\\r\\n    ) external isAuthorized(_account) {\\r\\n        _checkStringLength(_alias, 160, 0);\\r\\n        _checkStringLength(_socialLink, 160, 2);\\r\\n        _checkStringLength(_website, 160, 3);\\r\\n        _checkStringLength(_gallery, 160, 4);\\r\\n        _checkStringLength(_detail, 320, 1);\\r\\n\\r\\n        Basics storage userBasics = basics[_account];\\r\\n        userBasics.accountAlias = _alias;\\r\\n        userBasics.detail = _detail;\\r\\n        userBasics.socialLink = _socialLink;\\r\\n        userBasics.website = _website;\\r\\n        userBasics.gallery = _gallery;\\r\\n        _activateComposability(_account);\\r\\n        ping(_account);\\r\\n    }\\r\\n\\r\\n    /// @notice Sets an alias or username for a given account.\\r\\n    /// @dev Setting an alias not only helps identify the account but also activates the EtherEthos's composability if it's not already active.\\r\\n    /// Activating the EtherEthos will allow data to be returned from the contract.\\r\\n    /// Only an authorized user can set the alias.\\r\\n    /// @param _account The account for which the alias is being set.\\r\\n    /// @param _alias The new alias to be associated with the account. This could be a nickname or a pseudonym.\\r\\n    function setAlias(\\r\\n        address _account,\\r\\n        string calldata _alias\\r\\n    ) external isAuthorized(_account) {\\r\\n        _checkStringLength(_alias, 160, 0);\\r\\n        basics[_account].accountAlias = _alias;\\r\\n        _activateComposability(_account);\\r\\n    }\\r\\n\\r\\n    /// @notice Assigns a new detail or description to a specified account.\\r\\n    /// @dev Assigning a detail not only helps provide more context about the account,\\r\\n    /// but also activates the EtherEthos's composability if it's not already active,\\r\\n    /// which will allow data to be returned from the contract.\\r\\n    /// @param _account The account for which the detail is being set.\\r\\n    /// @param _detail The new detail or description to be associated with the account.\\r\\n    /// This could provide some context about the account or its owner.\\r\\n    function setDetail(\\r\\n        address _account,\\r\\n        string calldata _detail\\r\\n    ) external isAuthorized(_account) {\\r\\n        _checkStringLength(_detail, 320, 1);\\r\\n        basics[_account].detail = _detail;\\r\\n        _activateComposability(_account);\\r\\n    }\\r\\n\\r\\n    /// @notice Assigns a new socialLink to a specified account.\\r\\n    /// @dev Assigning a socialLink not only serves as a publicly listed social media link,\\r\\n    /// but it also activates the EtherEthos's composability if it's not already active,\\r\\n    /// which allows data to be returned from the contract.\\r\\n    /// @param _account The account for which the socialLink is being set.\\r\\n    /// @param _socialLink A new socialLink text to be stored. This could be a social media page.\\r\\n    function setSocial(\\r\\n        address _account,\\r\\n        string calldata _socialLink\\r\\n    ) external isAuthorized(_account) {\\r\\n        _checkStringLength(_socialLink, 160, 2);\\r\\n        basics[_account].socialLink = _socialLink;\\r\\n        _activateComposability(_account);\\r\\n    }\\r\\n\\r\\n    /// @notice Assigns a new website link to a specified account.\\r\\n    /// @dev Assigning a website link not only serves as a publicly listed website link,\\r\\n    /// but it also activates the EtherEthos's composability if it's not already active,\\r\\n    /// which allows data to be returned from the contract.\\r\\n    /// @param _account The account for which the website link is being set.\\r\\n    /// @param _website A new website link text to be stored.\\r\\n    function setWebsite(\\r\\n        address _account,\\r\\n        string calldata _website\\r\\n    ) external isAuthorized(_account) {\\r\\n        _checkStringLength(_website, 160, 3);\\r\\n        basics[_account].website = _website;\\r\\n        _activateComposability(_account);\\r\\n    }\\r\\n\\r\\n    /// @notice Assigns a new gallery link to a specified account.\\r\\n    /// @dev Assigning a gallery link not only serves as a publicly listed gallery link,\\r\\n    /// but it also activates the EtherEthos's composability if it's not already active,\\r\\n    /// which allows data to be returned from the contract.\\r\\n    /// @param _account The account for which the gallery link is being set.\\r\\n    /// @param _gallery A new gallery link text to be stored.\\r\\n    function setGallery(\\r\\n        address _account,\\r\\n        string calldata _gallery\\r\\n    ) external isAuthorized(_account) {\\r\\n        _checkStringLength(_gallery, 160, 4);\\r\\n        basics[_account].gallery = _gallery;\\r\\n        _activateComposability(_account);\\r\\n    }\\r\\n\\r\\n    /// @notice Assigns a new priority link to a specified account.\\r\\n    /// @dev The priority link is used to request which link a third-party application would most prominantly display.\\r\\n    /// The priority link has a default value of 0, meaning the social media link is prioritized.\\r\\n    /// Use 1 to prioritize the website link, and 2 to prioritize the gallery link.\\r\\n    /// @param _account The account for which the priority link is being set.\\r\\n    /// @param _priorityLink A new priority link uint8 value to be stored.\\r\\n    function setPriorityLink(\\r\\n        address _account,\\r\\n        uint8 _priorityLink\\r\\n    ) external isAuthorized(_account) {\\r\\n        basics[_account].priorityLink = _priorityLink;\\r\\n    }\\r\\n\\r\\n    /// @notice Assigns a preferred NFT (Non-Fungible Token) Profile Picture (PFP) to a specific account.\\r\\n    /// @dev Assigning an NFT as a PFP doesn't activate the EtherEthos's composability if it's not already active.\\r\\n    /// This function is used to specify the contract and the token ID of the NFT the account prefers as its PFP.\\r\\n    /// Please note that PFP ownership is not validated in this contract,\\r\\n    /// and ownership might need to be validated when the data is being composed live in third party applications.\\r\\n    /// @param _account The account for which the PFP is being set.\\r\\n    /// @param _pfpContract The address of the smart contract that controls the NFT to be used as a PFP.\\r\\n    /// @param _pfpTokenId The unique identifier (token ID) of the NFT to be used as a PFP.\\r\\n    function setPFP(\\r\\n        address _account,\\r\\n        address _pfpContract,\\r\\n        uint256 _pfpTokenId\\r\\n    ) external isAuthorized(_account) {\\r\\n        basics[_account].pfpContract = _pfpContract;\\r\\n        basics[_account].pfpTokenId = _pfpTokenId;\\r\\n    }\\r\\n\\r\\n    /// @notice Sets a custom string for a given account.\\r\\n    /// @dev The custom field is provided for flexibility in collective composability.\\r\\n    /// Eg. a DAO wants something composable specific to them -\\r\\n    /// they could ask their members to each set data in this field appropriately formatted for their use case.\\r\\n    /// This string is not limited to 160 bytes, and it is not included in standard return functions, but is still publicly accessible.\\r\\n    /// Only an authorized user can set the custom data.\\r\\n    /// @param _account The account for which the custom data is being set.\\r\\n    /// @param _custom The new custom data to be associated with the account. This could be anything.\\r\\n    function setCustomData(\\r\\n        address _account,\\r\\n        string calldata _custom\\r\\n    ) external isAuthorized(_account) {\\r\\n        custom[_account] = _custom;\\r\\n    }\\r\\n\\r\\n    /// @notice Adds a new link and its description to an account's list of additional links.\\r\\n    /// @dev This function creates a new StrPair object with the given link and its description,\\r\\n    /// and then adds this pair to the account's list of additional links. Only authorized users can add links.\\r\\n    /// @param _account The account for which the additional link is being added.\\r\\n    /// @param _link The actual URL or identifier of the additional link being added.\\r\\n    /// @param _detail A brief description or detail about the additional link being added.\\r\\n    function pushAdditionalLink(\\r\\n        address _account,\\r\\n        string calldata _link,\\r\\n        string calldata _detail\\r\\n    ) external isAuthorized(_account) {\\r\\n        _checkStringLength(_link, 160, 5);\\r\\n        _checkStringLength(_detail, 160, 1);\\r\\n        StrPair memory newLink = StrPair(_link, _detail);\\r\\n        additionalLinks[_account].push(newLink);\\r\\n    }\\r\\n\\r\\n    /// @notice Allows editing of an existing link and its corresponding description in an account's list of additional links.\\r\\n    /// @dev This function modifies an existing StrPair object in the account's list of additional links,\\r\\n    /// based on the provided index. Only authorized users can edit links.\\r\\n    /// The correct index can be determined by using the public getAdditionalLinkTuples() function.\\r\\n    /// @param _account The account for which the additonal link is being edited.\\r\\n    /// @param _index The position in the list of additional links where the link to be edited is located.\\r\\n    /// @param _link The updated URL or identifier of the additional link.\\r\\n    /// @param _detail The updated description or detail about the additional link.\\r\\n    function updateAdditionalLink(\\r\\n        address _account,\\r\\n        uint256 _index,\\r\\n        string calldata _link,\\r\\n        string calldata _detail\\r\\n    ) external isAuthorized(_account) {\\r\\n        require(_index < additionalLinks[_account].length);\\r\\n        _checkStringLength(_link, 160, 5);\\r\\n        _checkStringLength(_detail, 160, 1);\\r\\n        additionalLinks[_account][_index].k = _link;\\r\\n        additionalLinks[_account][_index].v = _detail;\\r\\n    }\\r\\n\\r\\n    /// @notice Allows removal of a link and its corresponding description from an account's list of additional links.\\r\\n    /// @dev This function removes a specified StrPair object from the account's list of additional links.\\r\\n    /// The specified link is replaced with the last link in the list and the last link is then removed.\\r\\n    /// The index can be obtained through the corresponding public getAdditionalLinkTuples() function.\\r\\n    /// @param _account The account for which the additional link is being removed.\\r\\n    /// @param _index The position in the list of additional links of the link to be removed.\\r\\n    function deleteAdditionalLink(\\r\\n        address _account,\\r\\n        uint256 _index\\r\\n    ) external isAuthorized(_account) {\\r\\n        require(_index < additionalLinks[_account].length);\\r\\n        additionalLinks[_account][_index] = additionalLinks[_account][\\r\\n            additionalLinks[_account].length - 1\\r\\n        ];\\r\\n        additionalLinks[_account].pop();\\r\\n    }\\r\\n\\r\\n    /// @notice Bulk grants badges to an array of accounts' badge lists.\\r\\n    /// @dev This function pushes a new badge to each account's list of badges.\\r\\n    /// Only authorized users can add badges.\\r\\n    /// To prevent SPAM, only accounts that are already respecting the granter can be badged.\\r\\n    /// @param _granter The account which is granting the badge.\\r\\n    /// @param _recipients The array of accounts for which the badge is being added.\\r\\n    /// @param _badge The badge being added.\\r\\n    function bulkGrantBadge(\\r\\n        address _granter,\\r\\n        address[] calldata _recipients,\\r\\n        string calldata _badge\\r\\n    ) external isAuthorized(_granter) {\\r\\n        _checkStringLength(_badge, 64, 7);\\r\\n        AddrPair memory newBadge = AddrPair(_granter, _badge);\\r\\n        for (uint256 i = 0; i < _recipients.length; i++) {\\r\\n            if (\\r\\n                respectersIndex[_granter][_recipients[i]] != 0 ||\\r\\n                (respecters[_granter].length > 0 &&\\r\\n                    respecters[_granter][0] == _recipients[i])\\r\\n            ) {\\r\\n                badgesReceived[_recipients[i]].push(newBadge);\\r\\n            }\\r\\n        }\\r\\n        emit Badged(_granter, _recipients, _badge);\\r\\n    }\\r\\n\\r\\n    /// @notice Allows removal of a badge from an account's list of badges.\\r\\n    /// @dev This function removes a specified badge from the account's list of badges.\\r\\n    /// The specified badge is replaced with the last badge in the list and the last badge is then removed.\\r\\n    /// The index can be obtained through the corresponding public getBadgeTuples() function.\\r\\n    /// @param _account The account for which the badge is being removed.\\r\\n    /// @param _index The position in the list of badges of the badge to be removed.\\r\\n    function deleteBadge(\\r\\n        address _account,\\r\\n        uint256 _index\\r\\n    ) external isAuthorized(_account) {\\r\\n        require(_index < badgesReceived[_account].length);\\r\\n        badgesReceived[_account][_index] = badgesReceived[_account][\\r\\n            badgesReceived[_account].length - 1\\r\\n        ];\\r\\n        badgesReceived[_account].pop();\\r\\n    }\\r\\n\\r\\n    /// @notice Adds a new tag to an account's list of tags.\\r\\n    /// @dev Individual tags are limited to 32 bytes.\\r\\n    /// @param _account The account for which the tag is being added.\\r\\n    /// @param _tag The tag being added. It should not include the '#' symbol.\\r\\n    function pushTag(\\r\\n        address _account,\\r\\n        string calldata _tag\\r\\n    ) external isAuthorized(_account) {\\r\\n        _checkStringLength(_tag, 32, 6);\\r\\n        tags[_account].push(_tag);\\r\\n    }\\r\\n\\r\\n    /// @notice Allows editing of an existing tag in an account's list of tags.\\r\\n    /// @dev This function modifies an existing tag in the account's list of additional tags,\\r\\n    /// based on the provided index. Only authorized users can edit tags.\\r\\n    /// The correct index can be determined by using the public assembleTags() function\\r\\n    /// @param _account The account for which the tag is being edited.\\r\\n    /// @param _index The position in the list of tags where the tag to be edited is located.\\r\\n    /// @param _tag The updated tag.\\r\\n    function updateTag(\\r\\n        address _account,\\r\\n        uint256 _index,\\r\\n        string calldata _tag\\r\\n    ) external isAuthorized(_account) {\\r\\n        require(_index < tags[_account].length);\\r\\n        _checkStringLength(_tag, 32, 6);\\r\\n        tags[_account][_index] = _tag;\\r\\n    }\\r\\n\\r\\n    /// @notice Allows removal of a tag from an account's list of additional tags.\\r\\n    /// @dev This function removes a specified tag from the account's list of tags.\\r\\n    /// The specified tag is replaced with the last tag in the list and the last tag is then removed.\\r\\n    /// The index can be obtained through the corresponding public assembleTags() function.\\r\\n    /// @param _account The account for which the tag is being removed.\\r\\n    /// @param _index The position in the list of tags of the tag to be removed.\\r\\n    function deleteTag(\\r\\n        address _account,\\r\\n        uint256 _index\\r\\n    ) external isAuthorized(_account) {\\r\\n        require(_index < tags[_account].length);\\r\\n        tags[_account][_index] = tags[_account][tags[_account].length - 1];\\r\\n        tags[_account].pop();\\r\\n    }\\r\\n\\r\\n    /// @notice Adds an associated account and description to an account's list of associated accounts.\\r\\n    /// @dev The caller must be authorized to access the _account.\\r\\n    /// The _associatedAccount and its _detail will be stored as an associated account of the _account.\\r\\n    /// @param _account The account to which an associated account is to be stored.\\r\\n    /// @param _associatedAccount The associated account to be stored with _account.\\r\\n    /// @param _detail A description or detail associated with the _associatedAccount.\\r\\n    function pushAssociatedAccount(\\r\\n        address _account,\\r\\n        address _associatedAccount,\\r\\n        string calldata _detail\\r\\n    ) external isAuthorized(_account) {\\r\\n        _checkStringLength(_detail, 160, 1);\\r\\n        AddrPair memory newAssociatedAccount = AddrPair(\\r\\n            _associatedAccount,\\r\\n            _detail\\r\\n        );\\r\\n        associatedAccounts[_account].push(newAssociatedAccount);\\r\\n    }\\r\\n\\r\\n    /// @notice Modifies the associated account and description in the account's list of associated accounts.\\r\\n    /// @dev The caller must be authorized to access the _account.\\r\\n    /// The _associatedAccount and _detail replace the associated account and description at _index in the _account's associated accounts.\\r\\n    /// The index can be obtained through the corresponding public getAssociatedAccountTuples() function.\\r\\n    /// @param _account The account for which an associated account is being modified.\\r\\n    /// @param _index The index in the list of associated accounts where modifications are to be made.\\r\\n    /// @param _associatedAccount The new associated account to replace the current associated account at the _index position.\\r\\n    /// @param _detail The new description to replace the current description at the _index position.\\r\\n    function updateAssociatedAccount(\\r\\n        address _account,\\r\\n        uint256 _index,\\r\\n        address _associatedAccount,\\r\\n        string calldata _detail\\r\\n    ) external isAuthorized(_account) {\\r\\n        require(_index < associatedAccounts[_account].length);\\r\\n        _checkStringLength(_detail, 160, 1);\\r\\n        associatedAccounts[_account][_index].k = _associatedAccount;\\r\\n        associatedAccounts[_account][_index].v = _detail;\\r\\n    }\\r\\n\\r\\n    /// @notice Removes an associated account and its description from the account's list of associated accounts.\\r\\n    /// @dev The caller must be authorized to access the _account.\\r\\n    /// The _index should point to the associated account and description to be removed in the _account's associated account list.\\r\\n    /// The index can be obtained through the corresponding public getAssociatedAccountTuples() function.\\r\\n    /// This function removes the associated account and description by swapping them with the last associated account and description in the list,\\r\\n    /// and then reducing the list's length by one.\\r\\n    /// @param _account The account from which an associated account and description is being removed.\\r\\n    /// @param _index The index in the list of associated accounts where the associated account and description are to be removed.\\r\\n    function deleteAssociatedAccount(\\r\\n        address _account,\\r\\n        uint256 _index\\r\\n    ) external isAuthorized(_account) {\\r\\n        require(_index < associatedAccounts[_account].length);\\r\\n        associatedAccounts[_account][_index] = associatedAccounts[_account][\\r\\n            associatedAccounts[_account].length - 1\\r\\n        ];\\r\\n        associatedAccounts[_account].pop();\\r\\n    }\\r\\n\\r\\n    /// @notice Allows an account to respect another account. This allows the respected account to write a note for the respecter.\\r\\n    /// @dev The respecter's address is added to the respected account's array of respecters.\\r\\n    /// The index of this new respectater in the array is also stored.\\r\\n    /// @param _respectGiver The account that is respecting another account.\\r\\n    /// @param _respectReceiver The account that is being respected by _respectGiver.\\r\\n    function giveRespect(\\r\\n        address _respectGiver,\\r\\n        address _respectReceiver\\r\\n    ) external isAuthorized(_respectGiver) {\\r\\n        require(_respectGiver != _respectReceiver);\\r\\n        require(\\r\\n            respectersIndex[_respectReceiver][_respectGiver] == 0 &&\\r\\n                (respecters[_respectReceiver].length == 0 ||\\r\\n                    respecters[_respectReceiver][0] != _respectGiver),\\r\\n            \\\"Respecting\\\"\\r\\n        );\\r\\n\\r\\n        // Add to respecters array\\r\\n        respecters[_respectReceiver].push(_respectGiver);\\r\\n        respectersIndex[_respectReceiver][_respectGiver] =\\r\\n            respecters[_respectReceiver].length -\\r\\n            1;\\r\\n\\r\\n        // Add to respecting array\\r\\n        respecting[_respectGiver].push(_respectReceiver);\\r\\n        respectingIndex[_respectGiver][_respectReceiver] =\\r\\n            respecting[_respectGiver].length -\\r\\n            1;\\r\\n\\r\\n        emit Respected(_respectReceiver, _respectGiver, true);\\r\\n    }\\r\\n\\r\\n    /// @notice Allows an account to revoke respect that it has made for another account.\\r\\n    /// @dev The respecter's address is removed from the respected account's array of respecters.\\r\\n    /// The element at the end of the array is moved to the deleted element's slot to avoid leaving a gap.\\r\\n    /// The respectersIndex mapping is updated to reflect these changes.\\r\\n    /// @param _respectRevoker The account that is revoking its respect for another account.\\r\\n    /// @param _losingRespect The account for which the _respectRevoker's respect is being revoked.\\r\\n    function revokeRespect(\\r\\n        address _respectRevoker,\\r\\n        address _losingRespect\\r\\n    ) external isAuthorized(_respectRevoker) {\\r\\n        // Logic for respecters array\\r\\n        uint index = respectersIndex[_losingRespect][_respectRevoker];\\r\\n        address[] storage respectedBy = respecters[_losingRespect];\\r\\n        respectedBy[index] = respectedBy[respectedBy.length - 1];\\r\\n        respectersIndex[_losingRespect][respectedBy[index]] = index;\\r\\n        respectedBy.pop();\\r\\n        delete respectersIndex[_losingRespect][_respectRevoker];\\r\\n\\r\\n        // Logic for respecting array\\r\\n        uint indexOfRespecting = respectingIndex[_respectRevoker][\\r\\n            _losingRespect\\r\\n        ];\\r\\n        address[] storage respectsTo = respecting[_respectRevoker];\\r\\n        respectsTo[indexOfRespecting] = respectsTo[respectsTo.length - 1];\\r\\n        respectingIndex[_respectRevoker][\\r\\n            respectsTo[indexOfRespecting]\\r\\n        ] = indexOfRespecting;\\r\\n        respectsTo.pop();\\r\\n        delete respectingIndex[_respectRevoker][_losingRespect];\\r\\n\\r\\n        emit Respected(_losingRespect, _respectRevoker, false);\\r\\n    }\\r\\n\\r\\n    /// @notice Allows an account to write a note for a another.\\r\\n    /// @dev The note will only be shown if the note recipient respects the note writer.\\r\\n    /// @param _noteWriter The account that is writing a note for another.\\r\\n    /// @param _noteReceiver The account that is receiving a note.\\r\\n    /// @param _note The note being written by the _noteWriter for the _noteReceiver.\\r\\n    function setNote(\\r\\n        address _noteWriter,\\r\\n        address _noteReceiver,\\r\\n        string calldata _note\\r\\n    ) external isAuthorized(_noteWriter) {\\r\\n        require(_noteWriter != _noteReceiver);\\r\\n        require(respectersIndex[_noteWriter][_noteReceiver] != 0 || respecters[_noteWriter][0] == _noteReceiver);\\r\\n        _checkStringLength(_note, 160, 8);\\r\\n\\r\\n        // condition where the receiving account has no notes\\r\\n        if (notesReceived[_noteReceiver].length == 0) {\\r\\n            noteWritersIndex[_noteReceiver][_noteWriter] = 0;\\r\\n            AddrPair memory newNote = AddrPair(_noteWriter, _note);\\r\\n            notesReceived[_noteReceiver].push(newNote);\\r\\n\\r\\n        // condition where the receiving account has a note from the writer\\r\\n        } else if (noteWritersIndex[_noteReceiver][_noteWriter] > 0 ||\\r\\n                (noteWritersIndex[_noteReceiver][_noteWriter] == 0 &&\\r\\n                notesReceived[_noteReceiver][0].k == _noteWriter)) {\\r\\n            notesReceived[_noteReceiver][noteWritersIndex[_noteReceiver][_noteWriter]].v = _note;\\r\\n\\r\\n        // condition where the receiving account has no note from the writer\\r\\n        } else {\\r\\n            noteWritersIndex[_noteReceiver][_noteWriter] = notesReceived[_noteReceiver].length;\\r\\n            AddrPair memory newNote = AddrPair(_noteWriter, _note);\\r\\n            notesReceived[_noteReceiver].push(newNote);\\r\\n        }\\r\\n        emit Noted(_noteReceiver, _noteWriter, _note);\\r\\n    }\\r\\n\\r\\n    /// @notice Allows an account to remove a note it has received from another account.\\r\\n    /// The specified note is replaced with the last note in the list and the last note is then removed.\\r\\n    /// The index can be obtained through the corresponding public getNoteTuples() function.\\r\\n    /// @param _account The account that is removing a note it has received.\\r\\n    /// @param _noteAuthor The account that wrote the note.\\r\\n    function deleteReceivedNote(\\r\\n        address _account,\\r\\n        address _noteAuthor\\r\\n    ) external isAuthorized(_account) {\\r\\n        uint256 index = noteWritersIndex[_account][_noteAuthor];\\r\\n        require(notesReceived[_account][index].k == _noteAuthor, \\\"NoExist\\\");\\r\\n        notesReceived[_account][index] = notesReceived[_account][\\r\\n            notesReceived[_account].length - 1\\r\\n        ];\\r\\n        noteWritersIndex[_account][notesReceived[_account][index].k] = index;\\r\\n        delete noteWritersIndex[_account][_noteAuthor];\\r\\n        notesReceived[_account].pop();\\r\\n        emit Noted(_account, _noteAuthor, \\\"RcvrDel\\\");\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice Allows an account to remove a note it has written for another account.\\r\\n    /// @dev The note is removed by overwriting it with the last note and then popping the last note.\\r\\n    /// @param _account The account that is removing a note they wrote for another.\\r\\n    /// @param _accountLosingNote The account that is having a note removed.\\r\\n    function deleteWrittenNote(\\r\\n        address _account,\\r\\n        address _accountLosingNote\\r\\n    ) external isAuthorized(_account) {\\r\\n        // require(_account != _accountLosingNote);\\r\\n        uint indexToRemove = noteWritersIndex[_accountLosingNote][_account];\\r\\n        require(indexToRemove > 0 || notesReceived[_accountLosingNote][0].k == _account,\\r\\n            \\\"NoExist\\\"\\r\\n        );\\r\\n        notesReceived[_accountLosingNote][indexToRemove] = notesReceived[_accountLosingNote][\\r\\n            notesReceived[_accountLosingNote].length - 1\\r\\n        ];\\r\\n        address movedNoteWriter = notesReceived[_accountLosingNote][indexToRemove].k;\\r\\n        noteWritersIndex[_accountLosingNote][movedNoteWriter] = indexToRemove;\\r\\n        delete noteWritersIndex[_accountLosingNote][_account];\\r\\n        notesReceived[_accountLosingNote].pop();\\r\\n        emit Noted(_accountLosingNote, _account, \\\"WrtrDel\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Toggles the visibility state of an account's EtherEthos - the collected reporting of all account data.\\r\\n    /// @dev If the EtherEthos's composability is active, this function deactivates it, and vice versa.\\r\\n    /// This function can be called by authorized accounts and by moderators.\\r\\n    /// An account's composable status can be obtained from the public getter function for an account's permissions.\\r\\n    /// @param _account The account for which to toggle the composable state.\\r\\n    function toggleComposable(\\r\\n        address _account\\r\\n    ) external {\\r\\n        require(\\r\\n            _accountAuthorized(_account) || permissions[msg.sender].moderator,\\r\\n            \\\"!Auth\\\"\\r\\n        );\\r\\n        if (!permissions[_account].composable) {\\r\\n            _activateComposability(_account);\\r\\n        } else {\\r\\n            _deactivateComposability(_account);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Returns almost all account data for a given account if it is not blocked and the EtherEthos composability is active.\\r\\n    /// @dev Subfunctions are called to build respective data arrays.\\r\\n    /// These subfunctions are also external and can be called individually.\\r\\n    /// @param _account The account whose data is to be retrieved.\\r\\n    /// @return accountData A 2D string array containing various account data.\\r\\n    ///     Indices structure:\\r\\n    ///     [0]: Basic Data - Includes account alias, detail, socialLink, link priority, PFP contract and Token ID.\\r\\n    ///     [1]: Additional Links - Includes all the additional links associated with the account.\\r\\n    ///     [2]: Associated Accounts - List of an account's Associated Accounts.\\r\\n    ///     [3]: respecters - List of accounts that have respected the account.\\r\\n    ///     [4]: respecting - List of accounts that the account has respected.\\r\\n    ///     [5]: notes - List of notes that have been written for the account.\\r\\n    ///     [6]: tags - List of tags that have been written for the account.\\r\\n    ///     [7]: badges - List of badges that have been granted to the account.\\r\\n    ///     [8]: custom - List of custom data that has been written for the account.\\r\\n    function assembleAccountData(\\r\\n        address _account\\r\\n    ) external view returns (string[][] memory) {\\r\\n        string[][] memory accountData = new string[][](9);\\r\\n        if (permissions[_account].composable) {\\r\\n            accountData[0] = assembleBasicData(_account);\\r\\n            accountData[1] = assembleAdditionalLinks(_account);\\r\\n            accountData[2] = assembleAssociatedAccounts(_account);\\r\\n            accountData[3] = assembleRespecters(_account);\\r\\n            accountData[4] = assembleRespecting(_account);\\r\\n            accountData[5] = assembleNotes(_account);\\r\\n            accountData[6] = assembleTags(_account);\\r\\n            accountData[7] = assembleBadges(_account);\\r\\n            accountData[8] = assembleCustomData(_account);\\r\\n        }\\r\\n        return accountData;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns an account's basic data in string format.\\r\\n    /// @dev The function converts address and boolean values into string format for uniformity.\\r\\n    /// The boolean values are returned as \\\"true\\\" or \\\"false\\\" strings.\\r\\n    /// The function returns an empty array if the EtherEthos's composability is not active or if the account is blocked.\\r\\n    /// Please note that PFP ownership is not validated in this contract,\\r\\n    /// and ownership might need to be validated when the data is being composed live in third party applications.\\r\\n    /// @param _account The account whose data is to be retrieved.\\r\\n    /// @return basicData A string array containing the basic account data.\\r\\n    ///     Indecies structure:\\r\\n    ///     [0]: alias - The account's alias.\\r\\n    ///     [1]: detail - Detailed information related to the account.\\r\\n    ///     [2]: socialLink - The socialLink set by the account.\\r\\n    ///     [3]: website - The website set by the account.\\r\\n    ///     [4]: gallery - The gallery set by the account.\\r\\n    ///     [5]: priorityLink - The priorityLink set by the account.\\r\\n    ///     [6]: pfp contract - The address of the contract of the profile picture (PFP) as a string.\\r\\n    ///     [7]: pfp tokenId - The token ID of the PFP as a string.\\r\\n    ///     [8]: ping - The time that the account was last pinged.\\r\\n    function assembleBasicData(\\r\\n        address _account\\r\\n    ) public view returns (string[] memory) {\\r\\n        if (!permissions[_account].composable) {\\r\\n            return new string[](9);\\r\\n        }\\r\\n        Basics memory basic = basics[_account];\\r\\n        string[] memory basicData = new string[](9);\\r\\n        basicData[0] = basic.accountAlias;\\r\\n        basicData[1] = basic.detail;\\r\\n        basicData[2] = basic.socialLink;\\r\\n        basicData[3] = basic.website;\\r\\n        basicData[4] = basic.gallery;\\r\\n        basicData[5] = Strings.toString(basic.priorityLink);\\r\\n        basicData[6] = _addrToStr(basic.pfpContract);\\r\\n        basicData[7] = Strings.toString(basic.pfpTokenId);\\r\\n        basicData[8] = Strings.toString(basic.ping);\\r\\n        return basicData;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the account's link data as pairs of link and detail.\\r\\n    /// @dev The function returns an empty array if the EtherEthos's composability is not active or if the account is blocked.\\r\\n    /// The returned indices do not match the indices of the storage array due to the way the data is formatted for return.\\r\\n    /// @param _account The account whose link data is to be retrieved.\\r\\n    /// @return additionalLinksArray A string array containing the additional link data,\\r\\n    /// with alternating link and detail values.\\r\\n    ///    Indecies structure:\\r\\n    ///    [0]: link - The first link of the account.\\r\\n    ///    [1]: detail - The detail of the first link.\\r\\n    ///    [2]: link - The second link of the account.\\r\\n    ///    [3]: detail - The detail of the second link.\\r\\n    ///    etc.\\r\\n    function assembleAdditionalLinks(\\r\\n        address _account\\r\\n    ) public view returns (string[] memory) {\\r\\n        if (!permissions[_account].composable) {\\r\\n            return new string[](0);\\r\\n        }\\r\\n        uint256 linksCount = additionalLinks[_account].length;\\r\\n        string[] memory additionalLinksArray = new string[](linksCount * 2);\\r\\n        for (uint256 i = 0; i < linksCount; i++) {\\r\\n            additionalLinksArray[i * 2] = additionalLinks[_account][i].k;\\r\\n            additionalLinksArray[i * 2 + 1] = additionalLinks[_account][i].v;\\r\\n        }\\r\\n        return additionalLinksArray;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns an account's associated accounts and their details.\\r\\n    /// @dev The function returns an empty array if the EtherEthos's composability is not active or if the account is blocked.\\r\\n    /// The returned indices do not match the indices of the storage array due to the way the data is formatted for return.\\r\\n    /// @param _account The account whose associated accounts and details are to be retrieved.\\r\\n    /// @return associatedAccountsArray A string array containing associated account data,\\r\\n    /// with alternating associatedAccount address and detail values.\\r\\n    ///    Indices structure:\\r\\n    ///    [0]: associatedAccount - The address of the first associated account.\\r\\n    ///    [1]: detail - The detail of the first associated account.\\r\\n    ///    [2]: associatedAccount - The address of the second associated account.\\r\\n    ///    [3]: detail - The detail of the second associated account.\\r\\n    ///    etc.\\r\\n    function assembleAssociatedAccounts(\\r\\n        address _account\\r\\n    ) public view returns (string[] memory) {\\r\\n        if (!permissions[_account].composable) {\\r\\n            return new string[](0);\\r\\n        }\\r\\n        uint256 associatedAccountsCount = associatedAccounts[_account].length;\\r\\n        string[] memory associatedAccountsArray = new string[](\\r\\n            associatedAccountsCount * 2\\r\\n        );\\r\\n        for (uint256 i = 0; i < associatedAccountsCount; i++) {\\r\\n            associatedAccountsArray[i * 2] = _addrToStr(\\r\\n                associatedAccounts[_account][i].k\\r\\n            );\\r\\n            associatedAccountsArray[i * 2 + 1] = associatedAccounts[_account][i]\\r\\n                .v;\\r\\n        }\\r\\n        return associatedAccountsArray;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns a list of accounts that have respected a specific account.\\r\\n    /// @dev The function returns an empty array if the EtherEthos's composability is not active or if the account is blocked.\\r\\n    /// @param _account The account whose respecters are to be retrieved.\\r\\n    /// @return respectersArray A string array containing the addresses of the accounts that have respected the _account.\\r\\n    function assembleRespecters(\\r\\n        address _account\\r\\n    ) public view returns (string[] memory) {\\r\\n        if (!permissions[_account].composable) {\\r\\n            return new string[](0);\\r\\n        }\\r\\n        uint256 respectersCount = respecters[_account].length;\\r\\n        string[] memory respectersArray = new string[](respectersCount);\\r\\n        for (uint256 i = 0; i < respectersCount; i++) {\\r\\n            respectersArray[i] = _addrToStr(respecters[_account][i]);\\r\\n        }\\r\\n        return respectersArray;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns a list of accounts that a specific account has respected.\\r\\n    /// @dev The function returns an empty array if the EtherEthos's composability is not active or if the account is blocked.\\r\\n    /// @param _account The account whose respecting accounts are to be retrieved.\\r\\n    /// @return respectingArray A string array containing the addresses of the accounts that _account has respected.\\r\\n    function assembleRespecting(\\r\\n        address _account\\r\\n    ) public view returns (string[] memory) {\\r\\n        if (!permissions[_account].composable) {\\r\\n            return new string[](0);\\r\\n        }\\r\\n        uint256 respectingCount = respecting[_account].length;\\r\\n        string[] memory respectingArray = new string[](respectingCount);\\r\\n        for (uint256 i = 0; i < respectingCount; i++) {\\r\\n            respectingArray[i] = _addrToStr(respecting[_account][i]);\\r\\n        }\\r\\n        return respectingArray;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the custom data of a specific account.\\r\\n    /// @dev The function returns an empty array if the EtherEthos's composability is not active or if the account is blocked.\\r\\n    /// @param _account The account whose custom data is to be retrieved.\\r\\n    /// @return customDataArray A string array containing one element - the custom data of the _account.\\r\\n    function assembleCustomData(\\r\\n        address _account\\r\\n    ) public view returns (string[] memory) {\\r\\n        if (!permissions[_account].composable) {\\r\\n            return new string[](0);\\r\\n        }\\r\\n        string[] memory customDataArray = new string[](1);\\r\\n        customDataArray[0] = custom[_account];\\r\\n        return customDataArray;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the tags of a specific account.\\r\\n    /// @dev The function returns an empty array if the EtherEthos's composability is not active or if the account is blocked.\\r\\n    /// @param _account The account whose tags are to be retrieved.\\r\\n    /// @return tagsArray A string array containing the tags of the _account.\\r\\n    function assembleTags(\\r\\n        address _account\\r\\n    ) public view returns (string[] memory) {\\r\\n        if (!permissions[_account].composable) {\\r\\n            return new string[](0);\\r\\n        }\\r\\n        return tags[_account];\\r\\n    }\\r\\n\\r\\n    /// @notice Returns an account's notes and their authors.\\r\\n    /// @dev The function returns an empty array if the account doesn't have any notes or if the note writer is no longer respected.\\r\\n    /// The returned indices do not match the indices of the storage array due to the way the data is formatted for return.\\r\\n    /// @param _account The account whose notes are to be retrieved.\\r\\n    /// @return notesArray A string array containing note data,\\r\\n    /// with alternating note writer address and note text values.\\r\\n    ///    Indices structure:\\r\\n    ///    [0]: noteWriter - The address of the first note writer.\\r\\n    ///    [1]: note - The note written by the first note writer.\\r\\n    ///    [2]: noteWriter - The address of the second note writer.\\r\\n    ///    [3]: note - The note written by the second note writer.\\r\\n    ///    etc.\\r\\n    function assembleNotes(\\r\\n        address _account\\r\\n    ) public view returns (string[] memory) {\\r\\n        if (!permissions[_account].composable) {\\r\\n            return new string[](0);\\r\\n        }\\r\\n        uint256 notesCount = notesReceived[_account].length;\\r\\n        string[] memory notesArray = new string[](notesCount * 2);\\r\\n        for (uint256 i = 0; i < notesCount; i++) {\\r\\n            notesArray[i * 2] = _addrToStr(notesReceived[_account][i].k);\\r\\n            notesArray[i * 2 + 1] = notesReceived[_account][i].v;\\r\\n        }\\r\\n        return notesArray;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the badges of a specific account.\\r\\n    /// @dev The function returns an empty array if the EtherEthos's composability is not active or if the account is blocked.\\r\\n    /// @param _account The account whose badges are to be retrieved.\\r\\n    /// @return badgesArray A string array containing the badges of the _account.\\r\\n    function assembleBadges(\\r\\n        address _account\\r\\n    ) public view returns (string[] memory) {\\r\\n        if (!permissions[_account].composable) {\\r\\n            return new string[](0);\\r\\n        }\\r\\n        uint256 badgesArrayCount = badgesReceived[_account].length * 2;\\r\\n        string[] memory badgesArray = new string[](badgesArrayCount);\\r\\n        for (uint256 i = 0; i < badgesArrayCount; i += 2) {\\r\\n            badgesArray[i] = _addrToStr(badgesReceived[_account][i].k);\\r\\n            badgesArray[i + 1] = badgesReceived[_account][i].v;\\r\\n        }\\r\\n        return badgesArray;\\r\\n    }\\r\\n\\r\\n    /// @notice Internal function to check the length of a string.\\r\\n    /// @dev This function is used to check the length of strings passed to the contract, and reverts if the string is too long.\\r\\n    /// @param _str The string whose length is being checked.\\r\\n    /// @param _labelIndex The index for the error message to be displayed if the string is too long.\\r\\n    function _checkStringLength(\\r\\n        string memory _str,\\r\\n        uint256 _maxLength,\\r\\n        uint256 _labelIndex\\r\\n    ) internal pure {\\r\\n        string[9] memory labels = [\\r\\n            \\\"Alias\\\",\\r\\n            \\\"Detail\\\",\\r\\n            \\\"Social\\\",\\r\\n            \\\"Web\\\",\\r\\n            \\\"Gallery\\\",\\r\\n            \\\"Link\\\",\\r\\n            \\\"Tag\\\",\\r\\n            \\\"Badge\\\",\\r\\n            \\\"Note\\\"\\r\\n        ];\\r\\n        string memory _errorMsg = string(abi.encodePacked(labels[_labelIndex], \\\" too long\\\"));\\r\\n        require(bytes(_str).length < _maxLength + 1, _errorMsg);\\r\\n    }\\r\\n\\r\\n    /// @notice Activates a EtherEthos's composability for a specific account.\\r\\n    /// @dev This internal function used to mark an account as allowing composability and incrementing the total count of composable EEs.\\r\\n    /// An event, Composable, is emitted upon the successful activation of EtherEthos composability.\\r\\n    /// @param _account The account for which EtherEthos composability will be activated.\\r\\n    function _activateComposability(address _account) internal {\\r\\n        if (!permissions[_account].composable) {\\r\\n            permissions[_account].composable = true;\\r\\n            activeEEs++;\\r\\n            emit Composable(_account, true);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Deactivates a EtherEthos's composability for a specific account.\\r\\n    /// @dev This internal function used to mark an account as not allowing composability and decrementing the total count of composable EEs.\\r\\n    /// An event, Composable, is emitted upon the successful deactivation of EtherEthos composability.\\r\\n    /// @param _account The account for which EtherEthos composability will be deactivated.\\r\\n    function _deactivateComposability(address _account) internal {\\r\\n        permissions[_account].composable = false;\\r\\n        activeEEs--;\\r\\n        emit Composable(_account, false);\\r\\n    }\\r\\n\\r\\n    /// @notice Converts an address to its string representation.\\r\\n    /// @dev This is a shortcut function used internally to call OpenZeppelin's toHexString function.\\r\\n    /// @param _address The address to convert into a string.\\r\\n    /// @return string representation of the input address.\\r\\n    function _addrToStr(\\r\\n        address _address\\r\\n    ) internal pure returns (string memory) {\\r\\n        return Strings.toHexString(uint160(_address), 20);\\r\\n    }\\r\\n\\r\\n    /// @notice Converts a boolean value to its string representation.\\r\\n    /// @dev This is an internal utility function used to convert a boolean value to its string representation.\\r\\n    /// The function returns \\\"1\\\" for `true` and \\\"0\\\" for `false`.\\r\\n    /// This is useful for returning boolean values in a string array.\\r\\n    /// @param _bool The boolean value to be converted into a string.\\r\\n    /// @return string representation of the input boolean value, \\\"1\\\" for `true` and \\\"0\\\" for `false`.\\r\\n    function _boolToStr(bool _bool) internal pure returns (string memory) {\\r\\n        if (_bool) {\\r\\n            return \\\"true\\\";\\r\\n        } else {\\r\\n            return \\\"false\\\";\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_granter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_receiver\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_badge\",\"type\":\"string\"}],\"name\":\"Badged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"Blocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"Composable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_legal\",\"type\":\"string\"}],\"name\":\"LegalUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"Moderator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_noteReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_noteWriter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_note\",\"type\":\"string\"}],\"name\":\"Noted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_respected\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_respecter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"Respected\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activeEEs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"assembleAccountData\",\"outputs\":[{\"internalType\":\"string[][]\",\"name\":\"\",\"type\":\"string[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"assembleAdditionalLinks\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"assembleAssociatedAccounts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"assembleBadges\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"assembleBasicData\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"assembleCustomData\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"assembleNotes\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"assembleRespecters\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"assembleRespecting\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"assembleTags\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"blockMyCompromisedAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_granter\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"_badge\",\"type\":\"string\"}],\"name\":\"bulkGrantBadge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"deleteAdditionalLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"deleteAssociatedAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"deleteBadge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_noteAuthor\",\"type\":\"address\"}],\"name\":\"deleteReceivedNote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"deleteTag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_accountLosingNote\",\"type\":\"address\"}],\"name\":\"deleteWrittenNote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAdditionalLinkTuples\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"k\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"v\",\"type\":\"string\"}],\"internalType\":\"struct EtherEthos.StrPair[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAssociatedAccountTuples\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"k\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"v\",\"type\":\"string\"}],\"internalType\":\"struct EtherEthos.AddrPair[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getBadgeTuples\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"k\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"v\",\"type\":\"string\"}],\"internalType\":\"struct EtherEthos.AddrPair[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getModerators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_respectGiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_respectReceiver\",\"type\":\"address\"}],\"name\":\"giveRespect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isComposable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"legal\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"permissions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"composable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"accountIsBlocked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"moderator\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"verificationResponse\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"ping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_link\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_detail\",\"type\":\"string\"}],\"name\":\"pushAdditionalLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_associatedAccount\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_detail\",\"type\":\"string\"}],\"name\":\"pushAssociatedAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tag\",\"type\":\"string\"}],\"name\":\"pushTag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_respectRevoker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_losingRespect\",\"type\":\"address\"}],\"name\":\"revokeRespect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_alias\",\"type\":\"string\"}],\"name\":\"setAlias\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_custom\",\"type\":\"string\"}],\"name\":\"setCustomData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_detail\",\"type\":\"string\"}],\"name\":\"setDetail\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_gallery\",\"type\":\"string\"}],\"name\":\"setGallery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_alias\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_detail\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_socialLink\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_gallery\",\"type\":\"string\"}],\"name\":\"setMainBasics\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_noteWriter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_noteReceiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_note\",\"type\":\"string\"}],\"name\":\"setNote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pfpContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pfpTokenId\",\"type\":\"uint256\"}],\"name\":\"setPFP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_priorityLink\",\"type\":\"uint8\"}],\"name\":\"setPriorityLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_socialLink\",\"type\":\"string\"}],\"name\":\"setSocial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_verificationResponse\",\"type\":\"string\"}],\"name\":\"setVerificationResponse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_website\",\"type\":\"string\"}],\"name\":\"setWebsite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"toggleAccountBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"toggleComposable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"toggleModerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_link\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_detail\",\"type\":\"string\"}],\"name\":\"updateAdditionalLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_associatedAccount\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_detail\",\"type\":\"string\"}],\"name\":\"updateAssociatedAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegateContract\",\"type\":\"address\"}],\"name\":\"updateDelegateContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_legal\",\"type\":\"string\"}],\"name\":\"updateLegal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tag\",\"type\":\"string\"}],\"name\":\"updateTag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EtherEthos", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}