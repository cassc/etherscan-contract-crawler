{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/protocol/TokenVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../openzeppelin/access/AccessControl.sol\\\";\\nimport \\\"../openzeppelin/utils/math/SafeMath.sol\\\";\\nimport \\\"../openzeppelin/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../openzeppelin/token/ERC20/IERC20.sol\\\";\\nimport \\\"../sablierhq/Sablier.sol\\\";\\nimport \\\"./ITokenVesting.sol\\\";\\n\\n/**\\n * @title TokenVesting contract for linearly vesting tokens to the respective vesting beneficiary\\n * @dev This contract receives accepted proposals from the Manager contract, and pass it to sablier contract\\n * @dev all the tokens to be vested by the vesting beneficiary. It releases these tokens when called\\n * @dev upon in a continuous-like linear fashion.\\n * @notice This contract use https://github.com/sablierhq/sablier-smooth-contracts/blob/master/contracts/Sablier.sol\\n */\\ncontract TokenVesting is ITokenVesting, AccessControl {\\n\\tusing SafeMath for uint256;\\n\\tusing SafeERC20 for IERC20;\\n\\taddress sablier;\\n\\tuint256 constant CREATOR_IX = 0;\\n\\tuint256 constant ROLL_IX = 1;\\n\\tuint256 constant REFERRAL_IX = 2;\\n\\n\\tuint256 public constant DAYS_IN_SECONDS = 24 * 60 * 60;\\n\\tmapping(address => VestingInfo) public vestingInfo;\\n\\tmapping(address => mapping(uint256 => Beneficiary)) public beneficiaries;\\n\\tmapping(address => address[]) public beneficiaryTokens;\\n\\n\\t/**\\n\\t * @dev Throws if called by any account other than the owner.\\n\\t */\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(\\n\\t\\t\\thasRole(DEFAULT_ADMIN_ROLE, msg.sender),\\n\\t\\t\\t\\\"Ownable: caller is not the owner\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\\n\\t\\trequire(\\n\\t\\t\\tnewOwner != address(0),\\n\\t\\t\\t\\\"Ownable: new owner is the zero address\\\"\\n\\t\\t);\\n\\t\\tgrantRole(DEFAULT_ADMIN_ROLE, newOwner);\\n\\t\\trevokeRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\t}\\n\\n\\tconstructor(address newOwner) {\\n\\t\\t_setupRole(DEFAULT_ADMIN_ROLE, newOwner);\\n\\t}\\n\\n\\tfunction setSablier(address _sablier) external onlyOwner {\\n\\t\\tsablier = _sablier;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Method to add a token into TokenVesting\\n\\t * @param _token address Address of token\\n\\t * @param _beneficiaries address[3] memory Address of vesting beneficiary\\n\\t * @param _proportions uint256[3] memory Proportions of vesting beneficiary\\n\\t * @param _vestingPeriodInDays uint256 Period of vesting, in units of Days, to be converted\\n\\t * @notice This emits an Event LogTokenAdded which is indexed by the token address\\n\\t */\\n\\tfunction addToken(\\n\\t\\taddress _token,\\n\\t\\taddress[3] calldata _beneficiaries,\\n\\t\\tuint256[3] calldata _proportions,\\n\\t\\tuint256 _vestingPeriodInDays\\n\\t) external override onlyOwner {\\n\\t\\tuint256 duration = uint256(_vestingPeriodInDays).mul(DAYS_IN_SECONDS);\\n\\t\\trequire(duration > 0, \\\"VESTING: period can't be zero\\\");\\n\\t\\tuint256 stopTime = block.timestamp.add(duration);\\n\\t\\tuint256 initial = IERC20(_token).balanceOf(address(this));\\n\\n\\t\\tvestingInfo[_token] = VestingInfo({\\n\\t\\t\\tvestingBeneficiary: _beneficiaries[0],\\n\\t\\t\\ttotalBalance: initial,\\n\\t\\t\\tbeneficiariesCount: 3, // this is to create a struct compatible with any number but for now is always 3\\n\\t\\t\\tstart: block.timestamp,\\n\\t\\t\\tstop: stopTime\\n\\t\\t});\\n\\n\\t\\tIERC20(_token).approve(sablier, 2**256 - 1);\\n\\t\\tIERC20(_token).approve(address(this), 2**256 - 1);\\n\\n\\t\\tfor (uint256 i = 0; i < vestingInfo[_token].beneficiariesCount; i++) {\\n\\t\\t\\tif (_beneficiaries[i] == address(0)) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\tbeneficiaries[_token][i].beneficiary = _beneficiaries[i];\\n\\t\\t\\tbeneficiaries[_token][i].proportion = _proportions[i];\\n\\n\\t\\t\\tuint256 deposit = _proportions[i];\\n\\t\\t\\tif (deposit == 0) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// we store the remaing to guarantee deposit be multiple of period. We send that remining at the end of period.\\n\\t\\t\\tuint256 remaining = deposit % duration;\\n\\n\\t\\t\\tuint256 streamId =\\n\\t\\t\\t\\tSablier(sablier).createStream(\\n\\t\\t\\t\\t\\t_beneficiaries[i],\\n\\t\\t\\t\\t\\tdeposit.sub(remaining),\\n\\t\\t\\t\\t\\t_token,\\n\\t\\t\\t\\t\\tblock.timestamp,\\n\\t\\t\\t\\t\\tstopTime\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\tbeneficiaries[_token][i].streamId = streamId;\\n\\t\\t\\tbeneficiaries[_token][i].remaining = remaining;\\n\\t\\t\\tbeneficiaryTokens[_beneficiaries[i]].push(_token);\\n\\t\\t}\\n\\n\\t\\temit LogTokenAdded(_token, _beneficiaries[0], _vestingPeriodInDays);\\n\\t}\\n\\n\\tfunction getBeneficiaryId(address _token, address _beneficiary)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tfor (uint256 i = 0; i < vestingInfo[_token].beneficiariesCount; i++) {\\n\\t\\t\\tif (beneficiaries[_token][i].beneficiary == _beneficiary) {\\n\\t\\t\\t\\treturn i;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\trevert(\\\"VESTING: invalid vesting address\\\");\\n\\t}\\n\\n\\tfunction release(address _token, address _beneficiary) external override {\\n\\t\\tuint256 ix = getBeneficiaryId(_token, _beneficiary);\\n\\t\\tuint256 streamId = beneficiaries[_token][ix].streamId;\\n\\t\\tif (!Sablier(sablier).isEntity(streamId)) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tuint256 balance = Sablier(sablier).balanceOf(streamId, _beneficiary);\\n\\t\\tbool withdrawResult =\\n\\t\\t\\tSablier(sablier).withdrawFromStream(streamId, balance);\\n\\t\\trequire(withdrawResult, \\\"VESTING: Error calling withdrawFromStream\\\");\\n\\n\\t\\t// if vesting duration already finish then release the final dust\\n\\t\\tif (\\n\\t\\t\\tvestingInfo[_token].stop < block.timestamp &&\\n\\t\\t\\tbeneficiaries[_token][ix].remaining > 0\\n\\t\\t) {\\n\\t\\t\\tIERC20(_token).safeTransferFrom(\\n\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\t_beneficiary,\\n\\t\\t\\t\\tbeneficiaries[_token][ix].remaining\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction releaseableAmount(address _token)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tuint256 total = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < vestingInfo[_token].beneficiariesCount; i++) {\\n\\t\\t\\tif (Sablier(sablier).isEntity(beneficiaries[_token][i].streamId)) {\\n\\t\\t\\t\\ttotal =\\n\\t\\t\\t\\t\\ttotal +\\n\\t\\t\\t\\t\\tSablier(sablier).balanceOf(\\n\\t\\t\\t\\t\\t\\tbeneficiaries[_token][i].streamId,\\n\\t\\t\\t\\t\\t\\tbeneficiaries[_token][i].beneficiary\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn total;\\n\\t}\\n\\n\\tfunction releaseableAmountByAddress(address _token, address _beneficiary)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tuint256 ix = getBeneficiaryId(_token, _beneficiary);\\n\\t\\tuint256 streamId = beneficiaries[_token][ix].streamId;\\n\\t\\treturn Sablier(sablier).balanceOf(streamId, _beneficiary);\\n\\t}\\n\\n\\tfunction vestedAmount(address _token)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tVestingInfo memory info = vestingInfo[_token];\\n\\t\\tif (block.timestamp >= info.stop) {\\n\\t\\t\\treturn info.totalBalance;\\n\\t\\t} else {\\n\\t\\t\\tuint256 duration = info.stop.sub(info.start);\\n\\t\\t\\treturn\\n\\t\\t\\t\\tinfo.totalBalance.mul(block.timestamp.sub(info.start)).div(\\n\\t\\t\\t\\t\\tduration\\n\\t\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction getVestingInfo(address _token)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (VestingInfo memory)\\n\\t{\\n\\t\\treturn vestingInfo[_token];\\n\\t}\\n\\n\\tfunction updateVestingAddress(\\n\\t\\taddress _token,\\n\\t\\tuint256 ix,\\n\\t\\taddress _vestingBeneficiary\\n\\t) internal {\\n\\t\\tif (\\n\\t\\t\\tvestingInfo[_token].vestingBeneficiary ==\\n\\t\\t\\tbeneficiaries[_token][ix].beneficiary\\n\\t\\t) {\\n\\t\\t\\tvestingInfo[_token].vestingBeneficiary = _vestingBeneficiary;\\n\\t\\t}\\n\\n\\t\\tbeneficiaries[_token][ix].beneficiary = _vestingBeneficiary;\\n\\n\\t\\tuint256 deposit = 0;\\n\\t\\tuint256 remaining = 0;\\n\\t\\t{\\n\\t\\t\\tuint256 streamId = beneficiaries[_token][ix].streamId;\\n\\t\\t\\t// if there's no pending this will revert and it's ok because has no sense to update the address\\n\\t\\t\\tuint256 pending =\\n\\t\\t\\t\\tSablier(sablier).balanceOf(streamId, address(this));\\n\\n\\t\\t\\tuint256 duration = vestingInfo[_token].stop.sub(block.timestamp);\\n\\t\\t\\tdeposit = pending.add(beneficiaries[_token][ix].remaining);\\n\\t\\t\\tremaining = deposit % duration;\\n\\n\\t\\t\\tbool cancelResult =\\n\\t\\t\\t\\tSablier(sablier).cancelStream(\\n\\t\\t\\t\\t\\tbeneficiaries[_token][ix].streamId\\n\\t\\t\\t\\t);\\n\\t\\t\\trequire(cancelResult, \\\"VESTING: Error calling cancelStream\\\");\\n\\t\\t}\\n\\n\\t\\tuint256 streamId =\\n\\t\\t\\tSablier(sablier).createStream(\\n\\t\\t\\t\\t_vestingBeneficiary,\\n\\t\\t\\t\\tdeposit.sub(remaining),\\n\\t\\t\\t\\t_token,\\n\\t\\t\\t\\tblock.timestamp,\\n\\t\\t\\t\\tvestingInfo[_token].stop\\n\\t\\t\\t);\\n\\t\\tbeneficiaries[_token][ix].streamId = streamId;\\n\\t\\tbeneficiaries[_token][ix].remaining = remaining;\\n\\n\\t\\temit LogBeneficiaryUpdated(_token, _vestingBeneficiary);\\n\\t}\\n\\n\\tfunction setVestingAddress(\\n\\t\\taddress _vestingBeneficiary,\\n\\t\\taddress _token,\\n\\t\\taddress _newVestingBeneficiary\\n\\t) external override onlyOwner {\\n\\t\\tuint256 ix = getBeneficiaryId(_token, _vestingBeneficiary);\\n\\t\\tupdateVestingAddress(_token, ix, _newVestingBeneficiary);\\n\\t}\\n\\n\\tfunction setVestingReferral(\\n\\t\\taddress _vestingBeneficiary,\\n\\t\\taddress _token,\\n\\t\\taddress _vestingReferral\\n\\t) external override onlyOwner {\\n\\t\\trequire(\\n\\t\\t\\t_vestingBeneficiary == vestingInfo[_token].vestingBeneficiary,\\n\\t\\t\\t\\\"VESTING: Only creator\\\"\\n\\t\\t);\\n\\t\\tupdateVestingAddress(_token, REFERRAL_IX, _vestingReferral);\\n\\t}\\n\\n\\tfunction getAllTokensByBeneficiary(address _beneficiary)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (address[] memory)\\n\\t{\\n\\t\\treturn beneficiaryTokens[_beneficiary];\\n\\t}\\n\\n\\tfunction releaseAll(address _beneficiary) public override {\\n\\t\\taddress[] memory array = beneficiaryTokens[_beneficiary];\\n\\t\\tfor (uint256 i = 0; i < array.length; i++) {\\n\\t\\t\\tthis.release(array[i], _beneficiary);\\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n\\t/**\\n\\t * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n\\t *\\n\\t * _Available since v3.4._\\n\\t */\\n\\tfunction tryAdd(uint256 a, uint256 b)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (bool, uint256)\\n\\t{\\n\\t\\tuint256 c = a + b;\\n\\t\\tif (c < a) return (false, 0);\\n\\t\\treturn (true, c);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n\\t *\\n\\t * _Available since v3.4._\\n\\t */\\n\\tfunction trySub(uint256 a, uint256 b)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (bool, uint256)\\n\\t{\\n\\t\\tif (b > a) return (false, 0);\\n\\t\\treturn (true, a - b);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n\\t *\\n\\t * _Available since v3.4._\\n\\t */\\n\\tfunction tryMul(uint256 a, uint256 b)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (bool, uint256)\\n\\t{\\n\\t\\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n\\t\\t// benefit is lost if 'b' is also tested.\\n\\t\\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n\\t\\tif (a == 0) return (true, 0);\\n\\t\\tuint256 c = a * b;\\n\\t\\tif (c / a != b) return (false, 0);\\n\\t\\treturn (true, c);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n\\t *\\n\\t * _Available since v3.4._\\n\\t */\\n\\tfunction tryDiv(uint256 a, uint256 b)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (bool, uint256)\\n\\t{\\n\\t\\tif (b == 0) return (false, 0);\\n\\t\\treturn (true, a / b);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n\\t *\\n\\t * _Available since v3.4._\\n\\t */\\n\\tfunction tryMod(uint256 a, uint256 b)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (bool, uint256)\\n\\t{\\n\\t\\tif (b == 0) return (false, 0);\\n\\t\\treturn (true, a % b);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the addition of two unsigned integers, reverting on\\n\\t * overflow.\\n\\t *\\n\\t * Counterpart to Solidity's `+` operator.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - Addition cannot overflow.\\n\\t */\\n\\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\tuint256 c = a + b;\\n\\t\\trequire(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\t\\treturn c;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the subtraction of two unsigned integers, reverting on\\n\\t * overflow (when the result is negative).\\n\\t *\\n\\t * Counterpart to Solidity's `-` operator.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - Subtraction cannot overflow.\\n\\t */\\n\\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\trequire(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n\\t\\treturn a - b;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the multiplication of two unsigned integers, reverting on\\n\\t * overflow.\\n\\t *\\n\\t * Counterpart to Solidity's `*` operator.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - Multiplication cannot overflow.\\n\\t */\\n\\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\tif (a == 0) return 0;\\n\\t\\tuint256 c = a * b;\\n\\t\\trequire(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\t\\treturn c;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the integer division of two unsigned integers, reverting on\\n\\t * division by zero. The result is rounded towards zero.\\n\\t *\\n\\t * Counterpart to Solidity's `/` operator. Note: this function uses a\\n\\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n\\t * uses an invalid opcode to revert (consuming all remaining gas).\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The divisor cannot be zero.\\n\\t */\\n\\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\trequire(b > 0, \\\"SafeMath: division by zero\\\");\\n\\t\\treturn a / b;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n\\t * reverting when dividing by zero.\\n\\t *\\n\\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n\\t * opcode (which leaves remaining gas untouched) while Solidity uses an\\n\\t * invalid opcode to revert (consuming all remaining gas).\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The divisor cannot be zero.\\n\\t */\\n\\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\trequire(b > 0, \\\"SafeMath: modulo by zero\\\");\\n\\t\\treturn a % b;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n\\t * overflow (when the result is negative).\\n\\t *\\n\\t * CAUTION: This function is deprecated because it requires allocating memory for the error\\n\\t * message unnecessarily. For custom revert reasons use {trySub}.\\n\\t *\\n\\t * Counterpart to Solidity's `-` operator.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - Subtraction cannot overflow.\\n\\t */\\n\\tfunction sub(\\n\\t\\tuint256 a,\\n\\t\\tuint256 b,\\n\\t\\tstring memory errorMessage\\n\\t) internal pure returns (uint256) {\\n\\t\\trequire(b <= a, errorMessage);\\n\\t\\treturn a - b;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n\\t * division by zero. The result is rounded towards zero.\\n\\t *\\n\\t * CAUTION: This function is deprecated because it requires allocating memory for the error\\n\\t * message unnecessarily. For custom revert reasons use {tryDiv}.\\n\\t *\\n\\t * Counterpart to Solidity's `/` operator. Note: this function uses a\\n\\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n\\t * uses an invalid opcode to revert (consuming all remaining gas).\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The divisor cannot be zero.\\n\\t */\\n\\tfunction div(\\n\\t\\tuint256 a,\\n\\t\\tuint256 b,\\n\\t\\tstring memory errorMessage\\n\\t) internal pure returns (uint256) {\\n\\t\\trequire(b > 0, errorMessage);\\n\\t\\treturn a / b;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n\\t * reverting with custom message when dividing by zero.\\n\\t *\\n\\t * CAUTION: This function is deprecated because it requires allocating memory for the error\\n\\t * message unnecessarily. For custom revert reasons use {tryMod}.\\n\\t *\\n\\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n\\t * opcode (which leaves remaining gas untouched) while Solidity uses an\\n\\t * invalid opcode to revert (consuming all remaining gas).\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The divisor cannot be zero.\\n\\t */\\n\\tfunction mod(\\n\\t\\tuint256 a,\\n\\t\\tuint256 b,\\n\\t\\tstring memory errorMessage\\n\\t) internal pure returns (uint256) {\\n\\t\\trequire(b > 0, errorMessage);\\n\\t\\treturn a % b;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../utils/math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n\\tusing SafeMath for uint256;\\n\\tusing Address for address;\\n\\n\\tfunction safeTransfer(\\n\\t\\tIERC20 token,\\n\\t\\taddress to,\\n\\t\\tuint256 value\\n\\t) internal {\\n\\t\\t_callOptionalReturn(\\n\\t\\t\\ttoken,\\n\\t\\t\\tabi.encodeWithSelector(token.transfer.selector, to, value)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction safeTransferFrom(\\n\\t\\tIERC20 token,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 value\\n\\t) internal {\\n\\t\\t_callOptionalReturn(\\n\\t\\t\\ttoken,\\n\\t\\t\\tabi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Deprecated. This function has issues similar to the ones found in\\n\\t * {IERC20-approve}, and its usage is discouraged.\\n\\t *\\n\\t * Whenever possible, use {safeIncreaseAllowance} and\\n\\t * {safeDecreaseAllowance} instead.\\n\\t */\\n\\tfunction safeApprove(\\n\\t\\tIERC20 token,\\n\\t\\taddress spender,\\n\\t\\tuint256 value\\n\\t) internal {\\n\\t\\t// safeApprove should only be called when setting an initial allowance,\\n\\t\\t// or when resetting it to zero. To increase and decrease it, use\\n\\t\\t// 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n\\t\\t// solhint-disable-next-line max-line-length\\n\\t\\trequire(\\n\\t\\t\\t(value == 0) || (token.allowance(address(this), spender) == 0),\\n\\t\\t\\t\\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n\\t\\t);\\n\\t\\t_callOptionalReturn(\\n\\t\\t\\ttoken,\\n\\t\\t\\tabi.encodeWithSelector(token.approve.selector, spender, value)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction safeIncreaseAllowance(\\n\\t\\tIERC20 token,\\n\\t\\taddress spender,\\n\\t\\tuint256 value\\n\\t) internal {\\n\\t\\tuint256 newAllowance =\\n\\t\\t\\ttoken.allowance(address(this), spender).add(value);\\n\\t\\t_callOptionalReturn(\\n\\t\\t\\ttoken,\\n\\t\\t\\tabi.encodeWithSelector(\\n\\t\\t\\t\\ttoken.approve.selector,\\n\\t\\t\\t\\tspender,\\n\\t\\t\\t\\tnewAllowance\\n\\t\\t\\t)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction safeDecreaseAllowance(\\n\\t\\tIERC20 token,\\n\\t\\taddress spender,\\n\\t\\tuint256 value\\n\\t) internal {\\n\\t\\tuint256 newAllowance =\\n\\t\\t\\ttoken.allowance(address(this), spender).sub(\\n\\t\\t\\t\\tvalue,\\n\\t\\t\\t\\t\\\"SafeERC20: decreased allowance below zero\\\"\\n\\t\\t\\t);\\n\\t\\t_callOptionalReturn(\\n\\t\\t\\ttoken,\\n\\t\\t\\tabi.encodeWithSelector(\\n\\t\\t\\t\\ttoken.approve.selector,\\n\\t\\t\\t\\tspender,\\n\\t\\t\\t\\tnewAllowance\\n\\t\\t\\t)\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n\\t * on the return value: the return value is optional (but if data is returned, it must not be false).\\n\\t * @param token The token targeted by the call.\\n\\t * @param data The call data (encoded using abi.encode or one of its variants).\\n\\t */\\n\\tfunction _callOptionalReturn(IERC20 token, bytes memory data) private {\\n\\t\\t// We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n\\t\\t// we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n\\t\\t// the target address contains contract code and also asserts for success in the low-level call.\\n\\n\\t\\tbytes memory returndata =\\n\\t\\t\\taddress(token).functionCall(\\n\\t\\t\\t\\tdata,\\n\\t\\t\\t\\t\\\"SafeERC20: low-level call failed\\\"\\n\\t\\t\\t);\\n\\t\\tif (returndata.length > 0) {\\n\\t\\t\\t// Return data is optional\\n\\t\\t\\t// solhint-disable-next-line max-line-length\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tabi.decode(returndata, (bool)),\\n\\t\\t\\t\\t\\\"SafeERC20: ERC20 operation did not succeed\\\"\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n\\t/**\\n\\t * @dev Returns the amount of tokens in existence.\\n\\t */\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the amount of tokens owned by `account`.\\n\\t */\\n\\tfunction balanceOf(address account) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n\\t *\\n\\t * Returns a boolean value indicating whether the operation succeeded.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction transfer(address recipient, uint256 amount)\\n\\t\\texternal\\n\\t\\treturns (bool);\\n\\n\\t/**\\n\\t * @dev Returns the remaining number of tokens that `spender` will be\\n\\t * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n\\t * zero by default.\\n\\t *\\n\\t * This value changes when {approve} or {transferFrom} are called.\\n\\t */\\n\\tfunction allowance(address owner, address spender)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\t/**\\n\\t * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n\\t *\\n\\t * Returns a boolean value indicating whether the operation succeeded.\\n\\t *\\n\\t * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n\\t * that someone may use both the old and the new allowance by unfortunate\\n\\t * transaction ordering. One possible solution to mitigate this race\\n\\t * condition is to first reduce the spender's allowance to 0 and set the\\n\\t * desired value afterwards:\\n\\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\t *\\n\\t * Emits an {Approval} event.\\n\\t */\\n\\tfunction approve(address spender, uint256 amount) external returns (bool);\\n\\n\\t/**\\n\\t * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n\\t * allowance mechanism. `amount` is then deducted from the caller's\\n\\t * allowance.\\n\\t *\\n\\t * Returns a boolean value indicating whether the operation succeeded.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction transferFrom(\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) external returns (bool);\\n\\n\\t/**\\n\\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n\\t * another (`to`).\\n\\t *\\n\\t * Note that `value` may be zero.\\n\\t */\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\t/**\\n\\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n\\t * a call to {approve}. `value` is the new allowance.\\n\\t */\\n\\tevent Approval(\\n\\t\\taddress indexed owner,\\n\\t\\taddress indexed spender,\\n\\t\\tuint256 value\\n\\t);\\n}\\n\"\r\n    },\r\n    \"contracts/sablierhq/Sablier.sol\": {\r\n      \"content\": \"pragma solidity =0.7.6;\\n\\nimport \\\"../openzeppelin/utils/Pausable.sol\\\";\\nimport \\\"../openzeppelin/access/Ownable.sol\\\";\\nimport \\\"../openzeppelin/token/ERC20/IERC20.sol\\\";\\nimport \\\"../openzeppelin/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./compound/Exponential.sol\\\";\\nimport \\\"./interfaces/IERC1620.sol\\\";\\nimport \\\"./Types.sol\\\";\\n\\n/**\\n * @title Sablier's Money Streaming\\n * @author Sablier\\n */\\ncontract Sablier is IERC1620, Exponential, ReentrancyGuard {\\n\\t/*** Storage Properties ***/\\n\\n\\t/**\\n\\t * @dev The amount of interest has been accrued per token address.\\n\\t */\\n\\tmapping(address => uint256) private earnings;\\n\\n\\t/**\\n\\t * @notice The percentage fee charged by the contract on the accrued interest.\\n\\t */\\n\\tExp public fee;\\n\\n\\t/**\\n\\t * @notice Counter for new stream ids.\\n\\t */\\n\\tuint256 public nextStreamId;\\n\\n\\t/**\\n\\t * @dev The stream objects identifiable by their unsigned integer ids.\\n\\t */\\n\\tmapping(uint256 => Types.Stream) private streams;\\n\\n\\t/*** Modifiers ***/\\n\\n\\t/**\\n\\t * @dev Throws if the caller is not the sender of the recipient of the stream.\\n\\t */\\n\\tmodifier onlySenderOrRecipient(uint256 streamId) {\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == streams[streamId].sender ||\\n\\t\\t\\t\\tmsg.sender == streams[streamId].recipient,\\n\\t\\t\\t\\\"caller is not the sender or the recipient of the stream\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Throws if the provided id does not point to a valid stream.\\n\\t */\\n\\tmodifier streamExists(uint256 streamId) {\\n\\t\\trequire(streams[streamId].isEntity, \\\"stream does not exist\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/*** Contract Logic Starts Here */\\n\\n\\tconstructor() public {\\n\\t\\tnextStreamId = 1;\\n\\t}\\n\\n\\t/*** View Functions ***/\\n\\tfunction isEntity(uint256 streamId) external view returns (bool) {\\n\\t\\treturn streams[streamId].isEntity;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the compounding stream with all its properties.\\n\\t * @dev Throws if the id does not point to a valid stream.\\n\\t * @param streamId The id of the stream to query.\\n\\t * @dev The stream object.\\n\\t */\\n\\tfunction getStream(uint256 streamId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\toverride\\n\\t\\tstreamExists(streamId)\\n\\t\\treturns (\\n\\t\\t\\taddress sender,\\n\\t\\t\\taddress recipient,\\n\\t\\t\\tuint256 deposit,\\n\\t\\t\\taddress tokenAddress,\\n\\t\\t\\tuint256 startTime,\\n\\t\\t\\tuint256 stopTime,\\n\\t\\t\\tuint256 remainingBalance,\\n\\t\\t\\tuint256 ratePerSecond\\n\\t\\t)\\n\\t{\\n\\t\\tsender = streams[streamId].sender;\\n\\t\\trecipient = streams[streamId].recipient;\\n\\t\\tdeposit = streams[streamId].deposit;\\n\\t\\ttokenAddress = streams[streamId].tokenAddress;\\n\\t\\tstartTime = streams[streamId].startTime;\\n\\t\\tstopTime = streams[streamId].stopTime;\\n\\t\\tremainingBalance = streams[streamId].remainingBalance;\\n\\t\\tratePerSecond = streams[streamId].ratePerSecond;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns either the delta in seconds between `block.timestamp` and `startTime` or\\n\\t *  between `stopTime` and `startTime, whichever is smaller. If `block.timestamp` is before\\n\\t *  `startTime`, it returns 0.\\n\\t * @dev Throws if the id does not point to a valid stream.\\n\\t * @param streamId The id of the stream for which to query the delta.\\n\\t * @dev The time delta in seconds.\\n\\t */\\n\\tfunction deltaOf(uint256 streamId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tstreamExists(streamId)\\n\\t\\treturns (uint256 delta)\\n\\t{\\n\\t\\tTypes.Stream memory stream = streams[streamId];\\n\\t\\tif (block.timestamp <= stream.startTime) return 0;\\n\\t\\tif (block.timestamp < stream.stopTime)\\n\\t\\t\\treturn block.timestamp - stream.startTime;\\n\\t\\treturn stream.stopTime - stream.startTime;\\n\\t}\\n\\n\\tstruct BalanceOfLocalVars {\\n\\t\\tMathError mathErr;\\n\\t\\tuint256 recipientBalance;\\n\\t\\tuint256 withdrawalAmount;\\n\\t\\tuint256 senderBalance;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the available funds for the given stream id and address.\\n\\t * @dev Throws if the id does not point to a valid stream.\\n\\t * @param streamId The id of the stream for which to query the balance.\\n\\t * @param who The address for which to query the balance.\\n\\t * @dev @balance uint256 The total funds allocated to `who` as uint256.\\n\\t */\\n\\tfunction balanceOf(uint256 streamId, address who)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\toverride\\n\\t\\tstreamExists(streamId)\\n\\t\\treturns (uint256 balance)\\n\\t{\\n\\t\\tTypes.Stream memory stream = streams[streamId];\\n\\t\\tBalanceOfLocalVars memory vars;\\n\\n\\t\\tuint256 delta = deltaOf(streamId);\\n\\t\\t(vars.mathErr, vars.recipientBalance) = mulUInt(\\n\\t\\t\\tdelta,\\n\\t\\t\\tstream.ratePerSecond\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tvars.mathErr == MathError.NO_ERROR,\\n\\t\\t\\t\\\"recipient balance calculation error\\\"\\n\\t\\t);\\n\\n\\t\\t/*\\n\\t\\t * If the stream `balance` does not equal `deposit`, it means there have been withdrawals.\\n\\t\\t * We have to subtract the total amount withdrawn from the amount of money that has been\\n\\t\\t * streamed until now.\\n\\t\\t */\\n\\t\\tif (stream.deposit > stream.remainingBalance) {\\n\\t\\t\\t(vars.mathErr, vars.withdrawalAmount) = subUInt(\\n\\t\\t\\t\\tstream.deposit,\\n\\t\\t\\t\\tstream.remainingBalance\\n\\t\\t\\t);\\n\\t\\t\\tassert(vars.mathErr == MathError.NO_ERROR);\\n\\t\\t\\t(vars.mathErr, vars.recipientBalance) = subUInt(\\n\\t\\t\\t\\tvars.recipientBalance,\\n\\t\\t\\t\\tvars.withdrawalAmount\\n\\t\\t\\t);\\n\\t\\t\\t/* `withdrawalAmount` cannot and should not be bigger than `recipientBalance`. */\\n\\t\\t\\tassert(vars.mathErr == MathError.NO_ERROR);\\n\\t\\t}\\n\\n\\t\\tif (who == stream.recipient) return vars.recipientBalance;\\n\\t\\tif (who == stream.sender) {\\n\\t\\t\\t(vars.mathErr, vars.senderBalance) = subUInt(\\n\\t\\t\\t\\tstream.remainingBalance,\\n\\t\\t\\t\\tvars.recipientBalance\\n\\t\\t\\t);\\n\\t\\t\\t/* `recipientBalance` cannot and should not be bigger than `remainingBalance`. */\\n\\t\\t\\tassert(vars.mathErr == MathError.NO_ERROR);\\n\\t\\t\\treturn vars.senderBalance;\\n\\t\\t}\\n\\t\\treturn 0;\\n\\t}\\n\\n\\t/*** Public Effects & Interactions Functions ***/\\n\\n\\tstruct CreateStreamLocalVars {\\n\\t\\tMathError mathErr;\\n\\t\\tuint256 duration;\\n\\t\\tuint256 ratePerSecond;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Creates a new stream funded by `msg.sender` and paid towards `recipient`.\\n\\t * @dev Throws if paused.\\n\\t *  Throws if the recipient is the zero address, the contract itself or the caller.\\n\\t *  Throws if the deposit is 0.\\n\\t *  Throws if the start time is before `block.timestamp`.\\n\\t *  Throws if the stop time is before the start time.\\n\\t *  Throws if the duration calculation has a math error.\\n\\t *  Throws if the deposit is smaller than the duration.\\n\\t *  Throws if the deposit is not a multiple of the duration.\\n\\t *  Throws if the rate calculation has a math error.\\n\\t *  Throws if the next stream id calculation has a math error.\\n\\t *  Throws if the contract is not allowed to transfer enough tokens.\\n\\t *  Throws if there is a token transfer failure.\\n\\t * @param recipient The address towards which the money is streamed.\\n\\t * @param deposit The amount of money to be streamed.\\n\\t * @param tokenAddress The ERC20 token to use as streaming currency.\\n\\t * @param startTime The unix timestamp for when the stream starts.\\n\\t * @param stopTime The unix timestamp for when the stream stops.\\n\\t * @return The uint256 id of the newly created stream.\\n\\t */\\n\\tfunction createStream(\\n\\t\\taddress recipient,\\n\\t\\tuint256 deposit,\\n\\t\\taddress tokenAddress,\\n\\t\\tuint256 startTime,\\n\\t\\tuint256 stopTime\\n\\t) public override returns (uint256) {\\n\\t\\trequire(recipient != address(0x00), \\\"stream to the zero address\\\");\\n\\t\\trequire(recipient != address(this), \\\"stream to the contract itself\\\");\\n\\t\\trequire(recipient != msg.sender, \\\"stream to the caller\\\");\\n\\t\\trequire(deposit > 0, \\\"deposit is zero\\\");\\n\\t\\trequire(\\n\\t\\t\\tstartTime >= block.timestamp,\\n\\t\\t\\t\\\"start time before block.timestamp\\\"\\n\\t\\t);\\n\\t\\trequire(stopTime > startTime, \\\"stop time before the start time\\\");\\n\\n\\t\\tCreateStreamLocalVars memory vars;\\n\\t\\t(vars.mathErr, vars.duration) = subUInt(stopTime, startTime);\\n\\t\\t/* `subUInt` can only return MathError.INTEGER_UNDERFLOW but we know `stopTime` is higher than `startTime`. */\\n\\t\\tassert(vars.mathErr == MathError.NO_ERROR);\\n\\n\\t\\t/* Without this, the rate per second would be zero. */\\n\\t\\trequire(deposit >= vars.duration, \\\"deposit smaller than time delta\\\");\\n\\n\\t\\trequire(\\n\\t\\t\\tdeposit % vars.duration == 0,\\n\\t\\t\\t\\\"deposit not multiple of time delta\\\"\\n\\t\\t);\\n\\n\\t\\t(vars.mathErr, vars.ratePerSecond) = divUInt(deposit, vars.duration);\\n\\t\\t/* `divUInt` can only return MathError.DIVISION_BY_ZERO but we know `duration` is not zero. */\\n\\t\\tassert(vars.mathErr == MathError.NO_ERROR);\\n\\n\\t\\t/* Create and store the stream object. */\\n\\t\\tuint256 streamId = nextStreamId;\\n\\t\\tstreams[streamId] = Types.Stream({\\n\\t\\t\\tremainingBalance: deposit,\\n\\t\\t\\tdeposit: deposit,\\n\\t\\t\\tisEntity: true,\\n\\t\\t\\tratePerSecond: vars.ratePerSecond,\\n\\t\\t\\trecipient: recipient,\\n\\t\\t\\tsender: msg.sender,\\n\\t\\t\\tstartTime: startTime,\\n\\t\\t\\tstopTime: stopTime,\\n\\t\\t\\ttokenAddress: tokenAddress\\n\\t\\t});\\n\\n\\t\\t/* Increment the next stream id. */\\n\\t\\t(vars.mathErr, nextStreamId) = addUInt(nextStreamId, uint256(1));\\n\\t\\trequire(\\n\\t\\t\\tvars.mathErr == MathError.NO_ERROR,\\n\\t\\t\\t\\\"next stream id calculation error\\\"\\n\\t\\t);\\n\\n\\t\\trequire(\\n\\t\\t\\tIERC20(tokenAddress).transferFrom(\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\tdeposit\\n\\t\\t\\t),\\n\\t\\t\\t\\\"token transfer failure\\\"\\n\\t\\t);\\n\\t\\temit CreateStream(\\n\\t\\t\\tstreamId,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\trecipient,\\n\\t\\t\\tdeposit,\\n\\t\\t\\ttokenAddress,\\n\\t\\t\\tstartTime,\\n\\t\\t\\tstopTime\\n\\t\\t);\\n\\t\\treturn streamId;\\n\\t}\\n\\n\\tstruct WithdrawFromStreamLocalVars {\\n\\t\\tMathError mathErr;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Withdraws from the contract to the recipient's account.\\n\\t * @dev Throws if the id does not point to a valid stream.\\n\\t *  Throws if the caller is not the sender or the recipient of the stream.\\n\\t *  Throws if the amount exceeds the available balance.\\n\\t *  Throws if there is a token transfer failure.\\n\\t * @param streamId The id of the stream to withdraw tokens from.\\n\\t * @param amount The amount of tokens to withdraw.\\n\\t * @return bool true=success, otherwise false.\\n\\t */\\n\\tfunction withdrawFromStream(uint256 streamId, uint256 amount)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\tnonReentrant\\n\\t\\tstreamExists(streamId)\\n\\t\\tonlySenderOrRecipient(streamId)\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\trequire(amount > 0, \\\"amount is zero\\\");\\n\\t\\tTypes.Stream memory stream = streams[streamId];\\n\\t\\tWithdrawFromStreamLocalVars memory vars;\\n\\n\\t\\tuint256 balance = balanceOf(streamId, stream.recipient);\\n\\t\\trequire(balance >= amount, \\\"amount exceeds the available balance\\\");\\n\\n\\t\\t(vars.mathErr, streams[streamId].remainingBalance) = subUInt(\\n\\t\\t\\tstream.remainingBalance,\\n\\t\\t\\tamount\\n\\t\\t);\\n\\t\\t/**\\n\\t\\t * `subUInt` can only return MathError.INTEGER_UNDERFLOW but we know that `remainingBalance` is at least\\n\\t\\t * as big as `amount`.\\n\\t\\t */\\n\\t\\tassert(vars.mathErr == MathError.NO_ERROR);\\n\\n\\t\\tif (streams[streamId].remainingBalance == 0) delete streams[streamId];\\n\\n\\t\\trequire(\\n\\t\\t\\tIERC20(stream.tokenAddress).transfer(stream.recipient, amount),\\n\\t\\t\\t\\\"token transfer failure\\\"\\n\\t\\t);\\n\\t\\temit WithdrawFromStream(streamId, stream.recipient, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Cancels the stream and transfers the tokens back on a pro rata basis.\\n\\t * @dev Throws if the id does not point to a valid stream.\\n\\t *  Throws if the caller is not the sender or the recipient of the stream.\\n\\t *  Throws if there is a token transfer failure.\\n\\t * @param streamId The id of the stream to cancel.\\n\\t * @return bool true=success, otherwise false.\\n\\t */\\n\\tfunction cancelStream(uint256 streamId)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\tnonReentrant\\n\\t\\tstreamExists(streamId)\\n\\t\\tonlySenderOrRecipient(streamId)\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\tTypes.Stream memory stream = streams[streamId];\\n\\t\\tuint256 senderBalance = balanceOf(streamId, stream.sender);\\n\\t\\tuint256 recipientBalance = balanceOf(streamId, stream.recipient);\\n\\n\\t\\tdelete streams[streamId];\\n\\n\\t\\tIERC20 token = IERC20(stream.tokenAddress);\\n\\t\\tif (recipientBalance > 0)\\n\\t\\t\\trequire(\\n\\t\\t\\t\\ttoken.transfer(stream.recipient, recipientBalance),\\n\\t\\t\\t\\t\\\"recipient token transfer failure\\\"\\n\\t\\t\\t);\\n\\t\\tif (senderBalance > 0)\\n\\t\\t\\trequire(\\n\\t\\t\\t\\ttoken.transfer(stream.sender, senderBalance),\\n\\t\\t\\t\\t\\\"sender token transfer failure\\\"\\n\\t\\t\\t);\\n\\n\\t\\temit CancelStream(\\n\\t\\t\\tstreamId,\\n\\t\\t\\tstream.sender,\\n\\t\\t\\tstream.recipient,\\n\\t\\t\\tsenderBalance,\\n\\t\\t\\trecipientBalance\\n\\t\\t);\\n\\t\\treturn true;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/ITokenVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.7.6;\\npragma experimental ABIEncoderV2;\\n\\ninterface ITokenVesting {\\n\\tevent Released(\\n\\t\\taddress indexed token,\\n\\t\\taddress vestingBeneficiary,\\n\\t\\tuint256 amount\\n\\t);\\n\\tevent LogTokenAdded(\\n\\t\\taddress indexed token,\\n\\t\\taddress vestingBeneficiary,\\n\\t\\tuint256 vestingPeriodInDays\\n\\t);\\n\\n\\tevent LogBeneficiaryUpdated(\\n\\t\\taddress indexed token,\\n\\t\\taddress vestingBeneficiary\\n\\t);\\n\\n\\tstruct VestingInfo {\\n\\t\\taddress vestingBeneficiary;\\n\\t\\tuint256 totalBalance;\\n\\t\\tuint256 beneficiariesCount;\\n\\t\\tuint256 start;\\n\\t\\tuint256 stop;\\n\\t}\\n\\n\\tstruct Beneficiary {\\n\\t\\taddress beneficiary;\\n\\t\\tuint256 proportion;\\n\\t\\tuint256 streamId;\\n\\t\\tuint256 remaining;\\n\\t}\\n\\n\\tfunction addToken(\\n\\t\\taddress _token,\\n\\t\\taddress[3] calldata _beneficiaries,\\n\\t\\tuint256[3] calldata _proportions,\\n\\t\\tuint256 _vestingPeriodInDays\\n\\t) external;\\n\\n\\tfunction release(address _token, address _beneficiary) external;\\n\\n\\tfunction releaseableAmount(address _token) external view returns (uint256);\\n\\n\\tfunction releaseableAmountByAddress(address _token, address _beneficiary)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\tfunction vestedAmount(address _token) external view returns (uint256);\\n\\n\\tfunction getVestingInfo(address _token)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (VestingInfo memory);\\n\\n\\tfunction setVestingAddress(\\n\\t\\taddress _vestingBeneficiary,\\n\\t\\taddress _token,\\n\\t\\taddress _newVestingBeneficiary\\n\\t) external;\\n\\n\\tfunction setVestingReferral(\\n\\t\\taddress _vestingBeneficiary,\\n\\t\\taddress _token,\\n\\t\\taddress _vestingReferral\\n\\t) external;\\n\\n\\tfunction getAllTokensByBeneficiary(address _beneficiary)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (address[] memory);\\n\\n\\tfunction releaseAll(address _beneficiary) external;\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n\\tfunction _msgSender() internal view virtual returns (address payable) {\\n\\t\\treturn msg.sender;\\n\\t}\\n\\n\\tfunction _msgData() internal view virtual returns (bytes memory) {\\n\\t\\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n\\t\\treturn msg.data;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n\\taddress private _owner;\\n\\n\\tevent OwnershipTransferred(\\n\\t\\taddress indexed previousOwner,\\n\\t\\taddress indexed newOwner\\n\\t);\\n\\n\\t/**\\n\\t * @dev Initializes the contract setting the deployer as the initial owner.\\n\\t */\\n\\tconstructor() {\\n\\t\\taddress msgSender = _msgSender();\\n\\t\\t_owner = msgSender;\\n\\t\\temit OwnershipTransferred(address(0), msgSender);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the address of the current owner.\\n\\t */\\n\\tfunction owner() public view virtual returns (address) {\\n\\t\\treturn _owner;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Throws if called by any account other than the owner.\\n\\t */\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Leaves the contract without owner. It will not be possible to call\\n\\t * `onlyOwner` functions anymore. Can only be called by the current owner.\\n\\t *\\n\\t * NOTE: Renouncing ownership will leave the contract without an owner,\\n\\t * thereby removing any functionality that is only available to the owner.\\n\\t */\\n\\tfunction renounceOwnership() public virtual onlyOwner {\\n\\t\\temit OwnershipTransferred(_owner, address(0));\\n\\t\\t_owner = address(0);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n\\t * Can only be called by the current owner.\\n\\t */\\n\\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\\n\\t\\trequire(\\n\\t\\t\\tnewOwner != address(0),\\n\\t\\t\\t\\\"Ownable: new owner is the zero address\\\"\\n\\t\\t);\\n\\t\\temit OwnershipTransferred(_owner, newOwner);\\n\\t\\t_owner = newOwner;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/sablierhq/compound/Exponential.sol\": {\r\n      \"content\": \"pragma solidity =0.7.6;\\n\\nimport \\\"./CarefulMath.sol\\\";\\n\\n/**\\n * @title Exponential module for storing fixed-decision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract Exponential is CarefulMath {\\n\\tuint256 constant expScale = 1e18;\\n\\tuint256 constant halfExpScale = expScale / 2;\\n\\tuint256 constant mantissaOne = expScale;\\n\\n\\tstruct Exp {\\n\\t\\tuint256 mantissa;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Creates an exponential from numerator and denominator values.\\n\\t *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\\n\\t *            or if `denom` is zero.\\n\\t */\\n\\tfunction getExp(uint256 num, uint256 denom)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (MathError, Exp memory)\\n\\t{\\n\\t\\t(MathError err0, uint256 scaledNumerator) = mulUInt(num, expScale);\\n\\t\\tif (err0 != MathError.NO_ERROR) {\\n\\t\\t\\treturn (err0, Exp({ mantissa: 0 }));\\n\\t\\t}\\n\\n\\t\\t(MathError err1, uint256 rational) = divUInt(scaledNumerator, denom);\\n\\t\\tif (err1 != MathError.NO_ERROR) {\\n\\t\\t\\treturn (err1, Exp({ mantissa: 0 }));\\n\\t\\t}\\n\\n\\t\\treturn (MathError.NO_ERROR, Exp({ mantissa: rational }));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Adds two exponentials, returning a new exponential.\\n\\t */\\n\\tfunction addExp(Exp memory a, Exp memory b)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (MathError, Exp memory)\\n\\t{\\n\\t\\t(MathError error, uint256 result) = addUInt(a.mantissa, b.mantissa);\\n\\n\\t\\treturn (error, Exp({ mantissa: result }));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Subtracts two exponentials, returning a new exponential.\\n\\t */\\n\\tfunction subExp(Exp memory a, Exp memory b)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (MathError, Exp memory)\\n\\t{\\n\\t\\t(MathError error, uint256 result) = subUInt(a.mantissa, b.mantissa);\\n\\n\\t\\treturn (error, Exp({ mantissa: result }));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Multiply an Exp by a scalar, returning a new Exp.\\n\\t */\\n\\tfunction mulScalar(Exp memory a, uint256 scalar)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (MathError, Exp memory)\\n\\t{\\n\\t\\t(MathError err0, uint256 scaledMantissa) = mulUInt(a.mantissa, scalar);\\n\\t\\tif (err0 != MathError.NO_ERROR) {\\n\\t\\t\\treturn (err0, Exp({ mantissa: 0 }));\\n\\t\\t}\\n\\n\\t\\treturn (MathError.NO_ERROR, Exp({ mantissa: scaledMantissa }));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n\\t */\\n\\tfunction mulScalarTruncate(Exp memory a, uint256 scalar)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (MathError, uint256)\\n\\t{\\n\\t\\t(MathError err, Exp memory product) = mulScalar(a, scalar);\\n\\t\\tif (err != MathError.NO_ERROR) {\\n\\t\\t\\treturn (err, 0);\\n\\t\\t}\\n\\n\\t\\treturn (MathError.NO_ERROR, truncate(product));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n\\t */\\n\\tfunction mulScalarTruncateAddUInt(\\n\\t\\tExp memory a,\\n\\t\\tuint256 scalar,\\n\\t\\tuint256 addend\\n\\t) internal pure returns (MathError, uint256) {\\n\\t\\t(MathError err, Exp memory product) = mulScalar(a, scalar);\\n\\t\\tif (err != MathError.NO_ERROR) {\\n\\t\\t\\treturn (err, 0);\\n\\t\\t}\\n\\n\\t\\treturn addUInt(truncate(product), addend);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Divide an Exp by a scalar, returning a new Exp.\\n\\t */\\n\\tfunction divScalar(Exp memory a, uint256 scalar)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (MathError, Exp memory)\\n\\t{\\n\\t\\t(MathError err0, uint256 descaledMantissa) =\\n\\t\\t\\tdivUInt(a.mantissa, scalar);\\n\\t\\tif (err0 != MathError.NO_ERROR) {\\n\\t\\t\\treturn (err0, Exp({ mantissa: 0 }));\\n\\t\\t}\\n\\n\\t\\treturn (MathError.NO_ERROR, Exp({ mantissa: descaledMantissa }));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Divide a scalar by an Exp, returning a new Exp.\\n\\t */\\n\\tfunction divScalarByExp(uint256 scalar, Exp memory divisor)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (MathError, Exp memory)\\n\\t{\\n\\t\\t/*\\n          We are doing this as:\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\n\\n          How it works:\\n          Exp = a / b;\\n          Scalar = s;\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\n        */\\n\\t\\t(MathError err0, uint256 numerator) = mulUInt(expScale, scalar);\\n\\t\\tif (err0 != MathError.NO_ERROR) {\\n\\t\\t\\treturn (err0, Exp({ mantissa: 0 }));\\n\\t\\t}\\n\\t\\treturn getExp(numerator, divisor.mantissa);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\n\\t */\\n\\tfunction divScalarByExpTruncate(uint256 scalar, Exp memory divisor)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (MathError, uint256)\\n\\t{\\n\\t\\t(MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\\n\\t\\tif (err != MathError.NO_ERROR) {\\n\\t\\t\\treturn (err, 0);\\n\\t\\t}\\n\\n\\t\\treturn (MathError.NO_ERROR, truncate(fraction));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Multiplies two exponentials, returning a new exponential.\\n\\t */\\n\\tfunction mulExp(Exp memory a, Exp memory b)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (MathError, Exp memory)\\n\\t{\\n\\t\\t(MathError err0, uint256 doubleScaledProduct) =\\n\\t\\t\\tmulUInt(a.mantissa, b.mantissa);\\n\\t\\tif (err0 != MathError.NO_ERROR) {\\n\\t\\t\\treturn (err0, Exp({ mantissa: 0 }));\\n\\t\\t}\\n\\n\\t\\t// We add half the scale before dividing so that we get rounding instead of truncation.\\n\\t\\t//  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\n\\t\\t// Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\n\\t\\t(MathError err1, uint256 doubleScaledProductWithHalfScale) =\\n\\t\\t\\taddUInt(halfExpScale, doubleScaledProduct);\\n\\t\\tif (err1 != MathError.NO_ERROR) {\\n\\t\\t\\treturn (err1, Exp({ mantissa: 0 }));\\n\\t\\t}\\n\\n\\t\\t(MathError err2, uint256 product) =\\n\\t\\t\\tdivUInt(doubleScaledProductWithHalfScale, expScale);\\n\\t\\t// The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\\n\\t\\tassert(err2 == MathError.NO_ERROR);\\n\\n\\t\\treturn (MathError.NO_ERROR, Exp({ mantissa: product }));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\\n\\t */\\n\\tfunction mulExp(uint256 a, uint256 b)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (MathError, Exp memory)\\n\\t{\\n\\t\\treturn mulExp(Exp({ mantissa: a }), Exp({ mantissa: b }));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Multiplies three exponentials, returning a new exponential.\\n\\t */\\n\\tfunction mulExp3(\\n\\t\\tExp memory a,\\n\\t\\tExp memory b,\\n\\t\\tExp memory c\\n\\t) internal pure returns (MathError, Exp memory) {\\n\\t\\t(MathError err, Exp memory ab) = mulExp(a, b);\\n\\t\\tif (err != MathError.NO_ERROR) {\\n\\t\\t\\treturn (err, ab);\\n\\t\\t}\\n\\t\\treturn mulExp(ab, c);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Divides two exponentials, returning a new exponential.\\n\\t *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\\n\\t *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\\n\\t */\\n\\tfunction divExp(Exp memory a, Exp memory b)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (MathError, Exp memory)\\n\\t{\\n\\t\\treturn getExp(a.mantissa, b.mantissa);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Truncates the given exp to a whole number value.\\n\\t *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n\\t */\\n\\tfunction truncate(Exp memory exp) internal pure returns (uint256) {\\n\\t\\t// Note: We are not using careful math here as we're performing a division that cannot fail\\n\\t\\treturn exp.mantissa / expScale;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Checks if first Exp is less than second Exp.\\n\\t */\\n\\tfunction lessThanExp(Exp memory left, Exp memory right)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn left.mantissa < right.mantissa; //TODO: Add some simple tests and this in another PR yo.\\n\\t}\\n\\n\\t/**\\n\\t * @dev Checks if left Exp <= right Exp.\\n\\t */\\n\\tfunction lessThanOrEqualExp(Exp memory left, Exp memory right)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn left.mantissa <= right.mantissa;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Checks if left Exp > right Exp.\\n\\t */\\n\\tfunction greaterThanExp(Exp memory left, Exp memory right)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn left.mantissa > right.mantissa;\\n\\t}\\n\\n\\t/**\\n\\t * @dev returns true if Exp is exactly zero\\n\\t */\\n\\tfunction isZeroExp(Exp memory value) internal pure returns (bool) {\\n\\t\\treturn value.mantissa == 0;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/sablierhq/interfaces/IERC1620.sol\": {\r\n      \"content\": \"pragma solidity =0.7.6;\\n\\n/**\\n * @title ERC-1620 Money Streaming Standard\\n * @author Sablier\\n * @dev See https://eips.ethereum.org/EIPS/eip-1620\\n */\\ninterface IERC1620 {\\n\\t/**\\n\\t * @notice Emits when a stream is successfully created.\\n\\t */\\n\\tevent CreateStream(\\n\\t\\tuint256 indexed streamId,\\n\\t\\taddress indexed sender,\\n\\t\\taddress indexed recipient,\\n\\t\\tuint256 deposit,\\n\\t\\taddress tokenAddress,\\n\\t\\tuint256 startTime,\\n\\t\\tuint256 stopTime\\n\\t);\\n\\n\\t/**\\n\\t * @notice Emits when the recipient of a stream withdraws a portion or all their pro rata share of the stream.\\n\\t */\\n\\tevent WithdrawFromStream(\\n\\t\\tuint256 indexed streamId,\\n\\t\\taddress indexed recipient,\\n\\t\\tuint256 amount\\n\\t);\\n\\n\\t/**\\n\\t * @notice Emits when a stream is successfully cancelled and tokens are transferred back on a pro rata basis.\\n\\t */\\n\\tevent CancelStream(\\n\\t\\tuint256 indexed streamId,\\n\\t\\taddress indexed sender,\\n\\t\\taddress indexed recipient,\\n\\t\\tuint256 senderBalance,\\n\\t\\tuint256 recipientBalance\\n\\t);\\n\\n\\tfunction balanceOf(uint256 streamId, address who)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256 balance);\\n\\n\\tfunction getStream(uint256 streamId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\taddress sender,\\n\\t\\t\\taddress recipient,\\n\\t\\t\\tuint256 deposit,\\n\\t\\t\\taddress token,\\n\\t\\t\\tuint256 startTime,\\n\\t\\t\\tuint256 stopTime,\\n\\t\\t\\tuint256 remainingBalance,\\n\\t\\t\\tuint256 ratePerSecond\\n\\t\\t);\\n\\n\\tfunction createStream(\\n\\t\\taddress recipient,\\n\\t\\tuint256 deposit,\\n\\t\\taddress tokenAddress,\\n\\t\\tuint256 startTime,\\n\\t\\tuint256 stopTime\\n\\t) external returns (uint256 streamId);\\n\\n\\tfunction withdrawFromStream(uint256 streamId, uint256 funds)\\n\\t\\texternal\\n\\t\\treturns (bool);\\n\\n\\tfunction cancelStream(uint256 streamId) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/sablierhq/Types.sol\": {\r\n      \"content\": \"pragma solidity =0.7.6;\\n\\n/**\\n * @title Sablier Types\\n * @author Sablier\\n */\\nlibrary Types {\\n\\tstruct Stream {\\n\\t\\tuint256 deposit;\\n\\t\\tuint256 ratePerSecond;\\n\\t\\tuint256 remainingBalance;\\n\\t\\tuint256 startTime;\\n\\t\\tuint256 stopTime;\\n\\t\\taddress recipient;\\n\\t\\taddress sender;\\n\\t\\taddress tokenAddress;\\n\\t\\tbool isEntity;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/sablierhq/compound/CarefulMath.sol\": {\r\n      \"content\": \"pragma solidity =0.7.6;\\n\\n/**\\n * @title Careful Math\\n * @author Compound\\n * @notice Derived from OpenZeppelin's SafeMath library\\n *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\n */\\ncontract CarefulMath {\\n\\t/**\\n\\t * @dev Possible error codes that we can return\\n\\t */\\n\\tenum MathError {\\n\\t\\tNO_ERROR,\\n\\t\\tDIVISION_BY_ZERO,\\n\\t\\tINTEGER_OVERFLOW,\\n\\t\\tINTEGER_UNDERFLOW\\n\\t}\\n\\n\\t/**\\n\\t * @dev Multiplies two numbers, returns an error on overflow.\\n\\t */\\n\\tfunction mulUInt(uint256 a, uint256 b)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (MathError, uint256)\\n\\t{\\n\\t\\tif (a == 0) {\\n\\t\\t\\treturn (MathError.NO_ERROR, 0);\\n\\t\\t}\\n\\n\\t\\tuint256 c = a * b;\\n\\n\\t\\tif (c / a != b) {\\n\\t\\t\\treturn (MathError.INTEGER_OVERFLOW, 0);\\n\\t\\t} else {\\n\\t\\t\\treturn (MathError.NO_ERROR, c);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Integer division of two numbers, truncating the quotient.\\n\\t */\\n\\tfunction divUInt(uint256 a, uint256 b)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (MathError, uint256)\\n\\t{\\n\\t\\tif (b == 0) {\\n\\t\\t\\treturn (MathError.DIVISION_BY_ZERO, 0);\\n\\t\\t}\\n\\n\\t\\treturn (MathError.NO_ERROR, a / b);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\n\\t */\\n\\tfunction subUInt(uint256 a, uint256 b)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (MathError, uint256)\\n\\t{\\n\\t\\tif (b <= a) {\\n\\t\\t\\treturn (MathError.NO_ERROR, a - b);\\n\\t\\t} else {\\n\\t\\t\\treturn (MathError.INTEGER_UNDERFLOW, 0);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Adds two numbers, returns an error on overflow.\\n\\t */\\n\\tfunction addUInt(uint256 a, uint256 b)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (MathError, uint256)\\n\\t{\\n\\t\\tuint256 c = a + b;\\n\\n\\t\\tif (c >= a) {\\n\\t\\t\\treturn (MathError.NO_ERROR, c);\\n\\t\\t} else {\\n\\t\\t\\treturn (MathError.INTEGER_OVERFLOW, 0);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev add a and b and then subtract c\\n\\t */\\n\\tfunction addThenSubUInt(\\n\\t\\tuint256 a,\\n\\t\\tuint256 b,\\n\\t\\tuint256 c\\n\\t) internal pure returns (MathError, uint256) {\\n\\t\\t(MathError err0, uint256 sum) = addUInt(a, b);\\n\\n\\t\\tif (err0 != MathError.NO_ERROR) {\\n\\t\\t\\treturn (err0, 0);\\n\\t\\t}\\n\\n\\t\\treturn subUInt(sum, c);\\n\\t}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vestingBeneficiary\",\"type\":\"address\"}],\"name\":\"LogBeneficiaryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vestingBeneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vestingPeriodInDays\",\"type\":\"uint256\"}],\"name\":\"LogTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vestingBeneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAYS_IN_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[3]\",\"name\":\"_beneficiaries\",\"type\":\"address[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"_proportions\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"_vestingPeriodInDays\",\"type\":\"uint256\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"beneficiaries\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proportion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"beneficiaryTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getAllTokensByBeneficiary\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getVestingInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vestingBeneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"beneficiariesCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stop\",\"type\":\"uint256\"}],\"internalType\":\"struct ITokenVesting.VestingInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"releaseAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"releaseableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"releaseableAmountByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sablier\",\"type\":\"address\"}],\"name\":\"setSablier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vestingBeneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newVestingBeneficiary\",\"type\":\"address\"}],\"name\":\"setVestingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vestingBeneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vestingReferral\",\"type\":\"address\"}],\"name\":\"setVestingReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"vestedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestingInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vestingBeneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"beneficiariesCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stop\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TokenVesting", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000003e8b4237745aad625412d94bb2a552920c7c231", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}