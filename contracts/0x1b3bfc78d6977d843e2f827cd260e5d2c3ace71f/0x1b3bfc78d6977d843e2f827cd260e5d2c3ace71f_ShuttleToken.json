{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.21;\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    error OwnableUnauthorizedAccount(address account);\r\n    error OwnableInvalidOwner(address owner);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface IERC20Errors {\r\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\r\n    error ERC20InvalidSender(address sender);\r\n    error ERC20InvalidReceiver(address receiver);\r\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\r\n    error ERC20InvalidApprover(address approver);\r\n    error ERC20InvalidSpender(address spender);\r\n}\r\n\r\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\r\n    mapping(address account => uint256) private _balances;\r\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n\r\n    function balanceOf(address account) public view virtual returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n\r\n    function transfer(address to, uint256 value) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n\r\n    function approve(address spender, uint256 value) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, value);\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        if (from == address(0)) {\r\n            revert ERC20InvalidSender(address(0));\r\n        }\r\n        if (to == address(0)) {\r\n            revert ERC20InvalidReceiver(address(0));\r\n        }\r\n        _update(from, to, value);\r\n    }\r\n\r\n    function _update(address from, address to, uint256 value) internal virtual {\r\n        if (from == address(0)) {\r\n            _totalSupply += value;\r\n        } else {\r\n            uint256 fromBalance = _balances[from];\r\n            if (fromBalance < value) {\r\n                revert ERC20InsufficientBalance(from, fromBalance, value);\r\n            }\r\n            unchecked {\r\n\r\n                _balances[from] = fromBalance - value;\r\n            }\r\n        }\r\n\r\n        if (to == address(0)) {\r\n            unchecked {\r\n\r\n                _totalSupply -= value;\r\n            }\r\n        } else {\r\n            unchecked {\r\n\r\n                _balances[to] += value;\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n\r\n    function _mint(address account, uint256 value) internal {\r\n        if (account == address(0)) {\r\n            revert ERC20InvalidReceiver(address(0));\r\n        }\r\n        _update(address(0), account, value);\r\n    }\r\n\r\n\r\n    function _burn(address account, uint256 value) internal {\r\n        if (account == address(0)) {\r\n            revert ERC20InvalidSender(address(0));\r\n        }\r\n        _update(account, address(0), value);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        _approve(owner, spender, value, true);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\r\n        if (owner == address(0)) {\r\n            revert ERC20InvalidApprover(address(0));\r\n        }\r\n        if (spender == address(0)) {\r\n            revert ERC20InvalidSpender(address(0));\r\n        }\r\n        _allowances[owner][spender] = value;\r\n        if (emitEvent) {\r\n            emit Approval(owner, spender, value);\r\n        }\r\n    }\r\n\r\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            if (currentAllowance < value) {\r\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\r\n            }\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - value, false);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface Errors {\r\n    error FeeIsAboveMaxFee(uint256 fee, uint256 maxFee);\r\n    error AlreadyExcludedFromFee(address addr);\r\n    error AlreadyIncludedInFee(address addr);\r\n    error AddressIsZero();\r\n    error AddressIsDead();\r\n    error AlreadyLaunched(uint256 atBlockNumber);\r\n    error BlockNumberToHigh();\r\n    error NotStartedYet();\r\n    error BlacklistedCannotTransfer();\r\n    error AddressIsNotBlacklisted(address addr);\r\n    error FeesMustBelowOrEqual10000();\r\n    error MinimumTokensBeforeSwapHasToBeAbove10Ether();\r\n    error SwapAndLiquifyAlreadyEnabled();\r\n    error SwapAndLiquifyAlreadyDisabled();\r\n    error AlreadyWhitelisted();\r\n    error NotWhitelisted();\r\n    error AddressCannotBeUnwhitelistedBecauseOfBalance();\r\n}\r\n\r\ninterface Events {\r\n    event BuyFeeUpdated(uint256 newFee, uint256 oldFee);\r\n    event SellFeeUpdated(uint256 newFee, uint256 oldFee);\r\n    event IsExcludedFromFee(address addr, bool flag);\r\n    event BuyAndBurnWalletUpdated(address newAddress, address oldAddress);\r\n    event ShuttleFundWalletUpdated(address newAddress, address oldAddress);\r\n    event LaunchedAt(uint256 blockNumber);\r\n    event AntiBlockNumberUpdated(uint256 blockNumber);\r\n    event UnblacklistedAddress(address addr);\r\n    event SwapTokensForETH(uint256 tokenAmount, address[] path);\r\n    event PercentagesUpdated(uint256 shuttleFund, uint256 burnFee, uint256 tokensToEthFee);\r\n    event MinimumTokensBeforeSwapUpdated(uint256 oldAmount, uint256 newAmount);\r\n    event SwapAndLiquifyUpdated(bool isEnabled);\r\n    event IsWhitelisted(address whitelistAddress, bool flag);\r\n    event RouterAndPairUpdated(address router, address pair);\r\n}\r\n\r\ncontract ShuttleToken is ERC20, Ownable, Errors, Events {\r\n    struct Percentage {\r\n        uint256 shuttleFund;\r\n        uint256 burn;\r\n        uint256 tokensToEth;\r\n    }\r\n\r\n    // Token\r\n    string private constant _NAME = \"Shuttle\"; // Add here the name of the token\r\n    string private constant _SYMBOL = \"SHU\"; // Add here the symbol of the token\r\n    uint256 private constant _TOKENS_TO_MINT = 1_000_000_000; // Add here the amount of the tokens (without decimals, Decimals are set to 18 by default)\r\n    uint256 private launchedAtBlock;\r\n\r\n    // Addresses\r\n    address public shuttleFundWallet = 0x7e622DE46f805518C71fd75067d5061e93EB79ba;\r\n    address public buyAndBurnWallet = 0x15E712c275613b362Acf66AfeF779e0D62845656;\r\n    /// @notice This is the wallet to transfer the funds\r\n    /// @dev This wallet must be able to transfer tokens for the liquidity\r\n    address public constant SHUTTLE_DEPLOY_WALLET = 0x782670F7c4Ef0c56141f9a496a465f5310F9b564;\r\n    address private constant _PINKLOCK_ADDRESS = 0x407993575c91ce7643a4d4cCACc9A98c36eE1BBE;\r\n    address public pairAddress;\r\n    IUniswapV2Router02 public router;\r\n    mapping(address addr => bool isBlacklisted) public isBlacklisted;\r\n\r\n    // Fees\r\n    uint256 public buyFee = 5_00; // 5% (underscore for readability) e.g. 1% = 100, 0.5% = 50, 0.02% = 2\r\n    uint256 public sellFee = 5_00; // 5%\r\n    uint256 public antibotBlock;\r\n    uint256 public constant MAX_FEE = 5_00; // Max 5%\r\n    uint256 public constant FEE_DENOMINATOR = 100_00; // 100%\r\n    uint256 public tokensBurnedTotal;\r\n    uint256 public ethSentToBuyAndBurnWalletTotal;\r\n    uint256 public tokensToBuyAndBurnWalletTotal;\r\n    // Percentages for the buy/sell fee amount how much to distribute to shuttle wallet, burn and tokens to eth swap\r\n    Percentage public percentages = Percentage({\r\n        shuttleFund: 70_00,\r\n        burn: 10_00,\r\n        tokensToEth: 20_00\r\n    });\r\n    mapping(address addr => bool isExcluded) public isExcludedFromFee;\r\n    mapping(address addr => bool isWhitelisted) public isWhitelisted;\r\n\r\n    // Swap\r\n    bool public inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = false;\r\n    uint256 public minimumTokensBeforeSwap = 10_000 ether;\r\n\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor(address router_)\r\n        ERC20(_NAME, _SYMBOL)\r\n        Ownable(msg.sender)\r\n    {\r\n        _checkAddressIsNotZero(router_);\r\n        router = IUniswapV2Router02(router_);\r\n        pairAddress = IUniswapV2Factory(router.factory()).createPair(address(this), router.WETH());\r\n\r\n        isExcludedFromFee[msg.sender] = true;\r\n        isExcludedFromFee[address(this)] = true;\r\n        isExcludedFromFee[shuttleFundWallet] = true;\r\n        isExcludedFromFee[buyAndBurnWallet] = true;\r\n        isExcludedFromFee[SHUTTLE_DEPLOY_WALLET] = true;\r\n        isExcludedFromFee[_PINKLOCK_ADDRESS] = true;\r\n\r\n        // Whitelistening addresses to transfer before launch\r\n        isWhitelisted[msg.sender] = true;\r\n        isWhitelisted[SHUTTLE_DEPLOY_WALLET] = true;\r\n        isWhitelisted[pairAddress] = true;\r\n\r\n        // Use of update for minting because of the \"launched\" property\r\n        super._update(address(0), SHUTTLE_DEPLOY_WALLET, _TOKENS_TO_MINT * 10 ** decimals());\r\n    }\r\n\r\n    /// @notice Function to check the {fee_} is below or equal to {MAX_FEE}\r\n    /// @param fee_ Fee to check\r\n    function _checkFeeIsBelowOrEqualMaxFee(uint256 fee_) internal pure {\r\n        if(fee_ > MAX_FEE)\r\n            revert FeeIsAboveMaxFee(fee_, MAX_FEE);\r\n    }\r\n\r\n    /// @notice Function to check the {addr_} is not zero address\r\n    /// @param addr_ Address to check\r\n    function _checkAddressIsNotZero(address addr_) internal pure {\r\n        if(addr_ == address(0x0))\r\n            revert AddressIsZero();\r\n    }\r\n\r\n    /// @notice Function to check the {addr_} is not dead address\r\n    /// @param addr_ Address to check\r\n    function _checkAddressIsNotDead(address addr_) internal pure {\r\n        if(addr_ == address(0xdead))\r\n            revert AddressIsDead();\r\n    }\r\n\r\n    /// @notice Function to check the project is launched\r\n    function _checkIsLaunched() internal view {\r\n        if(_isLaunched())\r\n            revert AlreadyLaunched(launchedAtBlock);\r\n    }\r\n\r\n    /// @notice Function is return true or false if the {launchedAtBlock} is 0 or not\r\n    /// @return bool Whether the project is launched\r\n    function _isLaunched() internal view returns(bool) {\r\n        return launchedAtBlock != 0;\r\n    }\r\n\r\n    /// @notice Function to launch the project\r\n    /// @dev Only the owner can launch the project\r\n    function launch() external onlyOwner() {\r\n        _checkIsLaunched();\r\n\r\n        uint256 at = block.number;\r\n        launchedAtBlock = at;\r\n        swapAndLiquifyEnabled = true;\r\n\r\n        emit LaunchedAt(at);\r\n    }\r\n\r\n    /// @notice Function to set the antibot block\r\n    /// @dev Only the owner can launch the project. The {blockNumber_} must be set between 0 and 10 blocks.\r\n    ///      The {antibotBlock} is 0 by default and can only be set when the project is not launched. In the function {_update}\r\n    ///      the {launchedAtBlock} and {antibotBlock} are added and checked if the sum is below the current block number. If so, the caller\r\n    ///      is set to {isBlacklisted} when selling. The owner can unblacklist the address manually.\r\n    /// @param blockNumber_ The block number between 0-10\r\n    function setAntibotBlock(uint256 blockNumber_) external onlyOwner() {\r\n        _checkIsLaunched();\r\n        if(blockNumber_ > 10)\r\n            revert BlockNumberToHigh();\r\n\r\n        antibotBlock = blockNumber_;\r\n\r\n        emit AntiBlockNumberUpdated(blockNumber_);\r\n    }\r\n\r\n    /// @notice Unblacklist an address when it's blacklisted by selling below the antibot block number\r\n    /// @dev The owner is able to unblacklist blacklisted addresses. It will be reverted when the address {addr_} is not blacklisted already.\r\n    /// @param addr_ The address to unblacklist\r\n    function unblacklist(address addr_) external onlyOwner() {\r\n        if(!isBlacklisted[addr_])\r\n            revert AddressIsNotBlacklisted(addr_);\r\n\r\n        isBlacklisted[addr_] = false;\r\n\r\n        emit UnblacklistedAddress(addr_);\r\n    }\r\n\r\n    /// @notice Set buy fee\r\n    /// @dev Only the owner can set the fee. The {fee_} must be below or equal to the {MAX_FEE}\r\n    /// @param fee_ The fee to set\r\n    function setBuyFee(uint256 fee_) external onlyOwner() {\r\n        _checkFeeIsBelowOrEqualMaxFee(fee_);\r\n\r\n        uint256 oldFee = buyFee;\r\n        buyFee = fee_;\r\n\r\n        emit BuyFeeUpdated(fee_, oldFee);\r\n    }\r\n\r\n    /// @notice Set sell fee\r\n    /// @dev Only the owner can set the fee. The {fee_} must be below or equal to the {MAX_FEE}\r\n    /// @param fee_ The fee to set\r\n    function setSellFee(uint256 fee_) external onlyOwner() {\r\n        _checkFeeIsBelowOrEqualMaxFee(fee_);\r\n\r\n        uint256 oldFee = sellFee;\r\n        sellFee = fee_;\r\n\r\n        emit SellFeeUpdated(fee_, oldFee);\r\n    }\r\n\r\n    /// @notice Whitelist an address to transfer before launch\r\n    /// @dev The owner is able to whitelist addresses\r\n    /// @param addr_ The address to whitelist\r\n    function whitelist(address addr_) external onlyOwner() {\r\n        if(isWhitelisted[addr_])\r\n            revert AlreadyWhitelisted();\r\n\r\n        isWhitelisted[addr_] = true;\r\n\r\n        emit IsWhitelisted(addr_, true);\r\n    }\r\n\r\n    /// @notice UnWhitelist an address but only when the address has no balance\r\n    /// @dev The owner is able to whitelist addresses\r\n    /// @param addr_ The address to whitelist\r\n    function unwhitelist(address addr_) external onlyOwner() {\r\n        if(!isWhitelisted[addr_])\r\n            revert NotWhitelisted();\r\n\r\n        if(balanceOf(addr_) > 0)\r\n            revert AddressCannotBeUnwhitelistedBecauseOfBalance();\r\n\r\n        isWhitelisted[addr_] = false;\r\n\r\n        emit IsWhitelisted(addr_, false);\r\n    }\r\n\r\n    /// @notice Function to exclude an address from the fees\r\n    /// @dev Only owner can exclude addresses from the fees. Included addresses can be excluded only.\r\n    /// @param addr_ The address to exclude from fees\r\n    function excludeFromFee(address addr_) public onlyOwner() {\r\n        if(isExcludedFromFee[addr_])\r\n            revert AlreadyExcludedFromFee(addr_);\r\n\r\n        isExcludedFromFee[addr_] = true;\r\n\r\n        emit IsExcludedFromFee(addr_, true);\r\n    }\r\n\r\n    /// @notice Function to include an address to the fees\r\n    /// @dev Only owner can include addresses back to the fees. Excluded addresses can be included only.\r\n    /// @param addr_ The address to include to the fees\r\n    function includeInFee(address addr_) external onlyOwner() {\r\n        if(!isExcludedFromFee[addr_])\r\n            revert AlreadyIncludedInFee(addr_);\r\n\r\n        isExcludedFromFee[addr_] = false;\r\n        emit IsExcludedFromFee(addr_, false);\r\n    }\r\n\r\n    /// @notice Set the percentages for the amount to distribute from the fees amount of the taken buy/sell\r\n    /// @dev The fees must be below or equal to {FEE_DENOMINATOR}. Fees can be also 0.\r\n    /// @param shuttleFundFee_ Percentage how much tokens should be distributed to the {shuttleFundWallet}\r\n    /// @param burnFee_ Percentage how much tokens should be burned\r\n    /// @param tokensToEthFee_ Percentage how much tokens should be distributed to the contract address.\r\n    /// This will be swapped automatically after a specific condition.\r\n    function setPercentages(uint256 shuttleFundFee_, uint256 burnFee_, uint256 tokensToEthFee_) external onlyOwner() {\r\n        if(shuttleFundFee_ + burnFee_ + tokensToEthFee_ > FEE_DENOMINATOR)\r\n            revert FeesMustBelowOrEqual10000();\r\n\r\n        percentages = Percentage({\r\n            shuttleFund: shuttleFundFee_,\r\n            burn: burnFee_,\r\n            tokensToEth: tokensToEthFee_\r\n        });\r\n\r\n        emit PercentagesUpdated(shuttleFundFee_, burnFee_, tokensToEthFee_);\r\n    }\r\n\r\n    /// @notice Updating the {buyAndBurnWallet}\r\n    /// @dev The {buyAndBurnWallet} must be capable to receive ETH.\r\n    /// @param addr_ New address for the {buyAndBurnWallet}\r\n    function setBuyAndBurnWallet(address addr_) external onlyOwner() {\r\n        _checkAddressIsNotZero(addr_);\r\n        _checkAddressIsNotDead(addr_);\r\n\r\n        address oldAddress = buyAndBurnWallet;\r\n        buyAndBurnWallet = addr_;\r\n\r\n        emit BuyAndBurnWalletUpdated(addr_, oldAddress);\r\n    }\r\n\r\n    /// @notice Updating the {shuttleFundWallet}\r\n    /// @param addr_ New address for the {shuttleFundWallet}\r\n    function setShuttleFundWallet(address addr_) external onlyOwner() {\r\n        _checkAddressIsNotZero(addr_);\r\n        _checkAddressIsNotDead(addr_);\r\n\r\n        address oldAddress = shuttleFundWallet;\r\n        shuttleFundWallet = addr_;\r\n\r\n        emit ShuttleFundWalletUpdated(addr_, oldAddress);\r\n    }\r\n\r\n    /// @notice Overridden {_update} function from ERC20 contract\r\n    /// @param from The sender address\r\n    /// @param to The receiver address\r\n    /// @param value The token amount\r\n    function _update(address from, address to, uint256 value) internal override {\r\n        if(!isWhitelisted[from] && !_isLaunched())\r\n            revert NotStartedYet();\r\n\r\n        if(isBlacklisted[from])\r\n            revert BlacklistedCannotTransfer();\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool overMinimumTokenBalance = contractTokenBalance >= minimumTokensBeforeSwap;\r\n\r\n        if (\r\n            !inSwapAndLiquify &&\r\n            from != pairAddress &&\r\n            overMinimumTokenBalance &&\r\n            swapAndLiquifyEnabled\r\n        ) {\r\n            _swapAndLiquify();\r\n        }\r\n\r\n        bool isBuy = from == pairAddress;\r\n        bool isSell = to == pairAddress;\r\n\r\n        uint256 currentFee = 0;\r\n        if(isBuy && !isExcludedFromFee[to]) {\r\n            currentFee = buyFee;\r\n        } else if(isSell && !isExcludedFromFee[from]) {\r\n            if(launchedAtBlock + antibotBlock > block.number) {\r\n                isBlacklisted[from] = true;\r\n                currentFee = 99_00;\r\n            } else {\r\n                currentFee = sellFee;\r\n            }\r\n        }\r\n\r\n        // Update the value\r\n        if(currentFee > 0) {\r\n            value = _takeFee(value, currentFee);\r\n        }\r\n        super._update(from, to, value);\r\n    }\r\n\r\n    /// @notice Take fees function\r\n    /// @dev Explain to a developer any extra details\r\n    /// @param amount_ The sent amount\r\n    /// @param feePercent_ The fee percentage for buy or sell\r\n    /// @return The {amount_} minus the distributed fees\r\n    function _takeFee(uint256 amount_, uint256 feePercent_) internal returns(uint256){\r\n        uint256 tokenFeeAmount = amount_ * feePercent_ / FEE_DENOMINATOR;\r\n        _distributeFees(tokenFeeAmount);\r\n\r\n        return amount_ - tokenFeeAmount;\r\n    }\r\n\r\n    /// @notice Swap and liquify function\r\n    function _swapAndLiquify() internal lockTheSwap {\r\n        uint256 totalTokens = tokensToBuyAndBurnWalletTotal;\r\n        // Reset tokens\r\n        tokensToBuyAndBurnWalletTotal = 0;\r\n\r\n        _swapTokensForEthToBuyAndBurnWallet(totalTokens);\r\n    }\r\n\r\n    /// @notice Manual Swap and liquify\r\n    /// @dev Owner can swap manually\r\n    function manualSwapAndLiquify() external onlyOwner() {\r\n        _swapAndLiquify();\r\n    }\r\n\r\n    /// @notice Enable the swap and liquify functionality\r\n    /// @dev Only owner can call this function. It will be reverted when it is enabled already.\r\n    /// {swapAndLiquifyEnabled} is disabled by default.\r\n    function enableSwapAndLiquify() external onlyOwner() {\r\n        if(swapAndLiquifyEnabled)\r\n            revert SwapAndLiquifyAlreadyEnabled();\r\n\r\n        swapAndLiquifyEnabled = true;\r\n        emit SwapAndLiquifyUpdated(true);\r\n    }\r\n\r\n    /// @notice Disable the swap and liquify functionality\r\n    /// @dev Only owner can call this function. It will be reverted when it is disabled already.\r\n    function disableSwapAndLiquify() external onlyOwner() {\r\n        if(!swapAndLiquifyEnabled)\r\n            revert SwapAndLiquifyAlreadyDisabled();\r\n\r\n        swapAndLiquifyEnabled = false;\r\n        emit SwapAndLiquifyUpdated(false);\r\n    }\r\n\r\n    /// @notice Set the minimum token amount before the swap should be executed\r\n    /// @dev Only owner can call this function and the minimum should be 10 ether\r\n    /// @param minimumTokensBeforeSwap_ The minimum amount before the swap should be executed\r\n    function setMinimumTokenAmountBeforeSwap(uint256 minimumTokensBeforeSwap_) external onlyOwner() {\r\n        if(minimumTokensBeforeSwap_ < 10_000 ether)\r\n            revert MinimumTokensBeforeSwapHasToBeAbove10Ether();\r\n\r\n        uint256 oldAmount = minimumTokensBeforeSwap;\r\n        minimumTokensBeforeSwap = minimumTokensBeforeSwap_;\r\n\r\n        emit MinimumTokensBeforeSwapUpdated(oldAmount, minimumTokensBeforeSwap_);\r\n    }\r\n\r\n    /// @notice Function to swap tokens to native tokens\r\n    /// @param tokenAmount_ The token amount what should be swapped\r\n    function _swapTokensForEthToBuyAndBurnWallet(uint256 tokenAmount_) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), tokenAmount_);\r\n\r\n        uint256 initialBuyAndBurnWalletBalance = buyAndBurnWallet.balance;\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount_,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            buyAndBurnWallet,\r\n            block.timestamp\r\n        );\r\n\r\n        ethSentToBuyAndBurnWalletTotal += buyAndBurnWallet.balance - initialBuyAndBurnWalletBalance;\r\n\r\n        emit SwapTokensForETH(tokenAmount_, path);\r\n    }\r\n\r\n    /// @notice Distribute fees function\r\n    /// @dev When one of the percentages are 0 the part of the logic will be skipped. There is also\r\n    ///      a fallback function because it is possible that there are a rest of tokens. When this occurs, the rest\r\n    ///      will be transferred to the address of the fee's.\r\n    /// @param tokenFeeAmount_ The token amount of the sell/buy fee token amount\r\n    function _distributeFees(uint256 tokenFeeAmount_) internal {\r\n        address from = msg.sender;\r\n        Percentage memory percentages_ = percentages;\r\n\r\n        // Shuttle fund wallet gets token\r\n        uint256 shuttleFundWalletFeeAmount = 0;\r\n        if(percentages_.shuttleFund > 0) {\r\n            shuttleFundWalletFeeAmount = tokenFeeAmount_ * percentages_.shuttleFund / FEE_DENOMINATOR;\r\n            super._update(from, shuttleFundWallet, shuttleFundWalletFeeAmount);\r\n        }\r\n\r\n        // Tokens will be burned\r\n        uint256 buyAndBurnFeeAmount = 0;\r\n        if(percentages_.burn > 0) {\r\n            buyAndBurnFeeAmount = tokenFeeAmount_ * percentages_.burn / FEE_DENOMINATOR;\r\n            // _burn(from, buyAndBurnFeeAmount);\r\n            super._update(from, address(0), buyAndBurnFeeAmount);\r\n            tokensBurnedTotal += buyAndBurnFeeAmount;\r\n        }\r\n\r\n        uint256 tokensToEthAmount = 0;\r\n        if(percentages_.tokensToEth > 0) {\r\n            tokensToEthAmount = tokenFeeAmount_ * percentages_.tokensToEth / FEE_DENOMINATOR;\r\n            tokensToBuyAndBurnWalletTotal += tokensToEthAmount;\r\n            super._update(from, address(this), tokensToEthAmount);\r\n        }\r\n\r\n        // Fallback when there is a little amount left add it to the contract\r\n        uint256 totalFeeAmount = shuttleFundWalletFeeAmount + buyAndBurnFeeAmount + tokensToEthAmount;\r\n        if(totalFeeAmount < tokenFeeAmount_) {\r\n            uint256 leftTokens = tokenFeeAmount_ - totalFeeAmount;\r\n            tokensToBuyAndBurnWalletTotal += leftTokens;\r\n            super._update(from, address(this), leftTokens);\r\n        }\r\n    }\r\n\r\n    /// @notice Updating the router and pair\r\n    /// @dev If pair exists set it otherwise, create a new one. Only owner function. Can only be set when it is not launched\r\n    /// @param router_ The new router address\r\n    function updateRouterAddress(address router_) external onlyOwner() {\r\n        _checkIsLaunched();\r\n        router = IUniswapV2Router02(router_);\r\n        address hasPair = IUniswapV2Factory(router.factory()).getPair(address(this), router.WETH());\r\n\r\n        if(hasPair != address(0)) {\r\n            pairAddress = hasPair;\r\n        } else {\r\n            pairAddress = IUniswapV2Factory(router.factory()).createPair(address(this), router.WETH());\r\n        }\r\n\r\n        emit RouterAndPairUpdated(router_, pairAddress);\r\n    }\r\n\r\n    /// @notice Withdraw stuck tokens\r\n    /// @dev Only callable by the owner. When there was accidentally sent own token to contract,\r\n    ///      the owner can only transfer tokens that were not tracked. Other tokens from the fees\r\n    ///      will not be transferred\r\n    /// @param tokenAddress_ The token address from the stuck token. Pass address(0) to get\r\n    ///        accidentally sent tokens from address(this) contract minus the tokens for the\r\n    ///        {buyAndBurnWallet}\r\n    function withdrawStuckTokens(address tokenAddress_) external onlyOwner() {\r\n        _checkAddressIsNotDead(tokenAddress_);\r\n\r\n        address contractAddress = address(this);\r\n        uint256 tokenAmount;\r\n\r\n        if(tokenAddress_ == address(0)) {\r\n            tokenAmount = balanceOf(contractAddress);\r\n            tokenAmount -= tokensToBuyAndBurnWalletTotal;\r\n\r\n            if(tokenAmount > 0)\r\n                super._update(contractAddress, msg.sender, tokenAmount);\r\n        } else {\r\n            IERC20 token = IERC20(tokenAddress_);\r\n            tokenAmount = token.balanceOf(contractAddress);\r\n\r\n            if(tokenAmount > 0)\r\n                token.transfer(msg.sender, tokenAmount);\r\n        }\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressCannotBeUnwhitelistedBecauseOfBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AddressIsDead\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddressIsNotBlacklisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AddressIsZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AlreadyExcludedFromFee\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AlreadyIncludedInFee\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"atBlockNumber\",\"type\":\"uint256\"}],\"name\":\"AlreadyLaunched\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BlacklistedCannotTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BlockNumberToHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFee\",\"type\":\"uint256\"}],\"name\":\"FeeIsAboveMaxFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeesMustBelowOrEqual10000\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinimumTokensBeforeSwapHasToBeAbove10Ether\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotStartedYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhitelisted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapAndLiquifyAlreadyDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapAndLiquifyAlreadyEnabled\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"AntiBlockNumberUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"BuyAndBurnWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"}],\"name\":\"BuyFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"IsExcludedFromFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"whitelistAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"IsWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"LaunchedAt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"MinimumTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shuttleFund\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensToEthFee\",\"type\":\"uint256\"}],\"name\":\"PercentagesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"RouterAndPairUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"}],\"name\":\"SellFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"ShuttleFundWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"UnblacklistedAddress\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHUTTLE_DEPLOY_WALLET\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antibotBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAndBurnWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableSwapAndLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSwapAndLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethSentToBuyAndBurnWalletTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwapAndLiquify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isBlacklisted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwapAndLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokensBeforeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shuttleFund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensToEth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber_\",\"type\":\"uint256\"}],\"name\":\"setAntibotBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"}],\"name\":\"setBuyAndBurnWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumTokensBeforeSwap_\",\"type\":\"uint256\"}],\"name\":\"setMinimumTokenAmountBeforeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shuttleFundFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensToEthFee_\",\"type\":\"uint256\"}],\"name\":\"setPercentages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"}],\"name\":\"setShuttleFundWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shuttleFundWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensBurnedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensToBuyAndBurnWalletTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"}],\"name\":\"unblacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"}],\"name\":\"unwhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"}],\"name\":\"updateRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"}],\"name\":\"withdrawStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ShuttleToken", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://594032e564f3857c83858aa34eeeb421cd2f1d50a230381db6c52fdfd6bece30"}