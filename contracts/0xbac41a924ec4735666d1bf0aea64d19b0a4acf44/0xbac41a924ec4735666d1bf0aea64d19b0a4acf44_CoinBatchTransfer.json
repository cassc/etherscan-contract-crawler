{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CoinBatchTransfer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\ncontract CoinBatchTransfer is ReentrancyGuard {\\r\\n    event TransfersSucceeded(address indexed sender, uint256 amount);\\r\\n    event RefundSucceeded(address indexed recipient, uint256 amount);\\r\\n    event TransferSucceeded(address indexed recipient, uint256 amount);\\r\\n\\r\\n    error CoinBatchTransfer_TransferFailed(address recipient, uint256 amount);\\r\\n    error CoinBatchTransfer_RefundFailed(address recipient, uint256 amount);\\r\\n    error CoinBatchTransfer_InvalidRecipient();\\r\\n    error CoinBatchTransfer_InvalidInputParams(\\r\\n        uint256 recipientsLength,\\r\\n        uint256 amountsLength\\r\\n    );\\r\\n    error CoinBatchTransfer_InvalidValue();\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer the specified amounts to the specified recipients.\\r\\n     * @param recipients_ array of recipients of coin (ETH)\\r\\n     * @param amounts_ array of amounts of coin (ETH) to transfer\\r\\n     */\\r\\n    function batchTransfer(\\r\\n        address[] calldata recipients_,\\r\\n        uint256[] calldata amounts_\\r\\n    ) external payable nonReentrant {\\r\\n        uint256 _recipientsLen = recipients_.length;\\r\\n        uint256 _amountsLen = amounts_.length;\\r\\n        if (_recipientsLen != _amountsLen || _recipientsLen == 0) {\\r\\n            revert CoinBatchTransfer_InvalidInputParams(\\r\\n                _recipientsLen,\\r\\n                _amountsLen\\r\\n            );\\r\\n        }\\r\\n        uint256 _total = msg.value;\\r\\n        for (uint256 i; i < _recipientsLen; ++i) {\\r\\n            address _recipient = recipients_[i];\\r\\n            uint256 _amount = amounts_[i];\\r\\n            if (_amount == 0) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            if (_total < _amount) {\\r\\n                revert CoinBatchTransfer_InvalidValue();\\r\\n            }\\r\\n\\r\\n            if (_recipient == address(0)) {\\r\\n                revert CoinBatchTransfer_InvalidRecipient();\\r\\n            }\\r\\n            _total -= _amount;\\r\\n            (bool _transferSuccess, ) = _recipient.call{value: _amount}(\\\"\\\");\\r\\n            if (!_transferSuccess) {\\r\\n                revert CoinBatchTransfer_TransferFailed(_recipient, _amount);\\r\\n            } else {\\r\\n                emit TransferSucceeded(_recipient, _amount);\\r\\n            }\\r\\n        }\\r\\n        if (_total > 0) {\\r\\n            _executeRefund(_total);\\r\\n        }\\r\\n        emit TransfersSucceeded(msg.sender, msg.value - _total);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Refund the remaining balance to msg.sender\\r\\n     */\\r\\n    function _executeRefund(uint256 refund_) private {\\r\\n        address _recipient = msg.sender;\\r\\n        (bool _refundSuccess, ) = _recipient.call{value: refund_}(\\\"\\\");\\r\\n        if (!_refundSuccess) {\\r\\n            revert CoinBatchTransfer_RefundFailed(_recipient, refund_);\\r\\n        }\\r\\n        emit RefundSucceeded(_recipient, refund_);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"recipientsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountsLength\",\"type\":\"uint256\"}],\"name\":\"CoinBatchTransfer_InvalidInputParams\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CoinBatchTransfer_InvalidRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CoinBatchTransfer_InvalidValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CoinBatchTransfer_RefundFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CoinBatchTransfer_TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefundSucceeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferSucceeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransfersSucceeded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "CoinBatchTransfer", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}