{"SourceCode": "/*\r\nTelegram: https://t.me/fish_erc20\r\nTwitter: https://x.com/fish_erc20\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.9;\r\n\r\nabstract contract Context {\r\nfunction _msgSender() internal view virtual returns (address) {\r\nreturn msg.sender;\r\n}\r\n}\r\n\r\ninterface IERC20 {\r\nfunction totalSupply() external view returns (uint256);\r\n\r\nfunction balanceOf(address account) external view returns (uint256);\r\n\r\nfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\nfunction allowance(address owner, address spender) external view returns (uint256);\r\n\r\nfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\nfunction transferFrom(\r\naddress sender,\r\naddress recipient,\r\nuint256 amount\r\n) external returns (bool);\r\n\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\nevent Approval(\r\naddress indexed owner,\r\naddress indexed spender,\r\nuint256 value\r\n);\r\n}\r\n\r\ncontract Ownable is Context {\r\naddress private _owner;\r\naddress private _previousOwner;\r\nevent OwnershipTransferred(\r\naddress indexed previousOwner,\r\naddress indexed newOwner\r\n);\r\n\r\nconstructor() {\r\naddress msgSender = _msgSender();\r\n_owner = msgSender;\r\nemit OwnershipTransferred(address(0), msgSender);\r\n}\r\n\r\nfunction owner() public view returns (address) {\r\nreturn _owner;\r\n}\r\n\r\nmodifier onlyOwner() {\r\nrequire(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n_;\r\n}\r\n\r\nfunction renounceOwnership() public virtual onlyOwner {\r\nemit OwnershipTransferred(_owner, address(0));\r\n_owner = address(0);\r\n}\r\n\r\nfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\nrequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\nemit OwnershipTransferred(_owner, newOwner);\r\n_owner = newOwner;\r\n}\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\nuint256 c = a + b;\r\nrequire(c >= a, \"SafeMath: addition overflow\");\r\nreturn c;\r\n}\r\n\r\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\nreturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n}\r\n\r\nfunction sub(\r\nuint256 a,\r\nuint256 b,\r\nstring memory errorMessage\r\n) internal pure returns (uint256) {\r\nrequire(b <= a, errorMessage);\r\nuint256 c = a - b;\r\nreturn c;\r\n}\r\n\r\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\nif (a == 0) {\r\nreturn 0;\r\n}\r\nuint256 c = a * b;\r\nrequire(c / a == b, \"SafeMath: multiplication overflow\");\r\nreturn c;\r\n}\r\n\r\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\nreturn div(a, b, \"SafeMath: division by zero\");\r\n}\r\n\r\nfunction div(\r\nuint256 a,\r\nuint256 b,\r\nstring memory errorMessage\r\n) internal pure returns (uint256) {\r\nrequire(b > 0, errorMessage);\r\nuint256 c = a / b;\r\nreturn c;\r\n}\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\nfunction createPair(address tokenA, address tokenB)\r\nexternal\r\nreturns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\nfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\r\nuint256 amountIn,\r\nuint256 amountOutMin,\r\naddress[] calldata path,\r\naddress to,\r\nuint256 deadline\r\n) external;\r\n\r\nfunction factory() external pure returns (address);\r\n\r\nfunction WETH() external pure returns (address);\r\n\r\nfunction addLiquidityETH(\r\naddress token,\r\nuint256 amountTokenDesired,\r\nuint256 amountTokenMin,\r\nuint256 amountETHMin,\r\naddress to,\r\nuint256 deadline\r\n)\r\nexternal\r\npayable\r\nreturns (\r\nuint256 amountToken,\r\nuint256 amountETH,\r\nuint256 liquidity\r\n);\r\n}\r\n\r\ncontract fish is Context, IERC20, Ownable {\r\n\r\nusing SafeMath for uint256;\r\n\r\nstring private constant _name = \"fish\";\r\nstring private constant _symbol = \"fish\";\r\nuint8 private constant _decimals = 9;\r\n\r\nmapping(address => uint256) private _rOwned;\r\nmapping(address => uint256) private _tOwned;\r\nmapping(address => mapping(address => uint256)) private _allowances;\r\nmapping(address => bool) private _isExcludedFromFee;\r\nuint256 private constant MAX = ~uint256(0);\r\nuint256 private constant _tTotal = 1000000000 * 10**9;\r\nuint256 private _rTotal = (MAX - (MAX % _tTotal));\r\nuint256 private _tFeeTotal;\r\nuint256 private _redisFeeOnBuy = 0;\r\nuint256 private _taxFeeOnBuy = 25;\r\nuint256 private _redisFeeOnSell = 0;\r\nuint256 private _taxFeeOnSell = 25;\r\n\r\n//Original Fee\r\nuint256 private _redisFee = _redisFeeOnSell;\r\nuint256 private _taxFee = _taxFeeOnSell;\r\n\r\nuint256 private _previousredisFee = _redisFee;\r\nuint256 private _previoustaxFee = _taxFee;\r\n\r\nmapping(address => bool) public bots; mapping (address => uint256) public _buyMap;\r\naddress payable private _developmentAddress = payable(0x8F948feAa9231736d6C9ad9E4020De8306c599A7);\r\naddress payable private _marketingAddress = payable(0xb76dEb9d5f9C6ACE8B09372074438A8acA4BA4c6);\r\n\r\nIUniswapV2Router02 public uniswapV2Router;\r\naddress public uniswapV2Pair;\r\n\r\nbool private tradingOpen = true;\r\nbool private inSwap = false;\r\nbool private swapEnabled = true;\r\n\r\nuint256 public _maxTxAmount = 20000000 * 10**9;\r\nuint256 public _maxWalletSize = 20000000 * 10**9;\r\nuint256 public _swapTokensAtAmount = 10000000 * 10**9;\r\n\r\nevent MaxTxAmountUpdated(uint256 _maxTxAmount);\r\nmodifier lockTheSwap {\r\ninSwap = true;\r\n_;\r\ninSwap = false;\r\n}\r\n\r\nconstructor() {\r\n\r\n_rOwned[_msgSender()] = _rTotal;\r\n\r\nIUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);//\r\nuniswapV2Router = _uniswapV2Router;\r\nuniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n.createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n_isExcludedFromFee[owner()] = true;\r\n_isExcludedFromFee[address(this)] = true;\r\n_isExcludedFromFee[_developmentAddress] = true;\r\n_isExcludedFromFee[_marketingAddress] = true;\r\n\r\nemit Transfer(address(0), _msgSender(), _tTotal);\r\n}\r\n\r\nfunction name() public pure returns (string memory) {\r\nreturn _name;\r\n}\r\n\r\nfunction symbol() public pure returns (string memory) {\r\nreturn _symbol;\r\n}\r\n\r\nfunction decimals() public pure returns (uint8) {\r\nreturn _decimals;\r\n}\r\n\r\nfunction totalSupply() public pure override returns (uint256) {\r\nreturn _tTotal;\r\n}\r\n\r\nfunction balanceOf(address account) public view override returns (uint256) {\r\nreturn tokenFromReflection(_rOwned[account]);\r\n}\r\n\r\nfunction transfer(address recipient, uint256 amount)\r\npublic\r\noverride\r\nreturns (bool)\r\n{\r\n_transfer(_msgSender(), recipient, amount);\r\nreturn true;\r\n}\r\n\r\nfunction allowance(address owner, address spender)\r\npublic\r\nview\r\noverride\r\nreturns (uint256)\r\n{\r\nreturn _allowances[owner][spender];\r\n}\r\n\r\nfunction approve(address spender, uint256 amount)\r\npublic\r\noverride\r\nreturns (bool)\r\n{\r\n_approve(_msgSender(), spender, amount);\r\nreturn true;\r\n}\r\n\r\nfunction transferFrom(\r\naddress sender,\r\naddress recipient,\r\nuint256 amount\r\n) public override returns (bool) {\r\n_transfer(sender, recipient, amount);\r\n_approve(\r\nsender,\r\n_msgSender(),\r\n_allowances[sender][_msgSender()].sub(\r\namount,\r\n\"ERC20: transfer amount exceeds allowance\"\r\n)\r\n);\r\nreturn true;\r\n}\r\n\r\nfunction tokenFromReflection(uint256 rAmount)\r\nprivate\r\nview\r\nreturns (uint256)\r\n{\r\nrequire(\r\nrAmount <= _rTotal,\r\n\"Amount must be less than total reflections\"\r\n);\r\nuint256 currentRate = _getRate();\r\nreturn rAmount.div(currentRate);\r\n}\r\n\r\nfunction removeAllFee() private {\r\nif (_redisFee == 0 && _taxFee == 0) return;\r\n\r\n_previousredisFee = _redisFee;\r\n_previoustaxFee = _taxFee;\r\n\r\n_redisFee = 0;\r\n_taxFee = 0;\r\n}\r\n\r\nfunction restoreAllFee() private {\r\n_redisFee = _previousredisFee;\r\n_taxFee = _previoustaxFee;\r\n}\r\n\r\nfunction _approve(\r\naddress owner,\r\naddress spender,\r\nuint256 amount\r\n) private {\r\nrequire(owner != address(0), \"ERC20: approve from the zero address\");\r\nrequire(spender != address(0), \"ERC20: approve to the zero address\");\r\n_allowances[owner][spender] = amount;\r\nemit Approval(owner, spender, amount);\r\n}\r\n\r\nfunction _transfer(\r\naddress from,\r\naddress to,\r\nuint256 amount\r\n) private {\r\nrequire(from != address(0), \"ERC20: transfer from the zero address\");\r\nrequire(to != address(0), \"ERC20: transfer to the zero address\");\r\nrequire(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\nif (from != owner() && to != owner()) {\r\n\r\n//Trade start check\r\nif (!tradingOpen) {\r\nrequire(from == owner(), \"TOKEN: This account cannot send tokens until trading is enabled\");\r\n}\r\n\r\nrequire(amount <= _maxTxAmount, \"TOKEN: Max Transaction Limit\");\r\nrequire(!bots[from] && !bots[to], \"TOKEN: Your account is blacklisted!\");\r\n\r\nif(to != uniswapV2Pair) {\r\nrequire(balanceOf(to) + amount < _maxWalletSize, \"TOKEN: Balance exceeds wallet size!\");\r\n}\r\n\r\nuint256 contractTokenBalance = balanceOf(address(this));\r\nbool canSwap = contractTokenBalance >= _swapTokensAtAmount;\r\n\r\nif(contractTokenBalance >= _maxTxAmount)\r\n{\r\ncontractTokenBalance = _maxTxAmount;\r\n}\r\n\r\nif (canSwap && !inSwap && from != uniswapV2Pair && swapEnabled && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\r\nswapTokensForEth(contractTokenBalance);\r\nuint256 contractETHBalance = address(this).balance;\r\nif (contractETHBalance > 0) {\r\nsendETHToFee(address(this).balance);\r\n}\r\n}\r\n}\r\n\r\nbool takeFee = true;\r\n\r\n//Transfer Tokens\r\nif ((_isExcludedFromFee[from] || _isExcludedFromFee[to]) || (from != uniswapV2Pair && to != uniswapV2Pair)) {\r\ntakeFee = false;\r\n} else {\r\n\r\n//Set Fee for Buys\r\nif(from == uniswapV2Pair && to != address(uniswapV2Router)) {\r\n_redisFee = _redisFeeOnBuy;\r\n_taxFee = _taxFeeOnBuy;\r\n}\r\n\r\n//Set Fee for Sells\r\nif (to == uniswapV2Pair && from != address(uniswapV2Router)) {\r\n_redisFee = _redisFeeOnSell;\r\n_taxFee = _taxFeeOnSell;\r\n}\r\n\r\n}\r\n\r\n_tokenTransfer(from, to, amount, takeFee);\r\n}\r\n\r\nfunction swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\naddress[] memory path = new address[](2);\r\npath[0] = address(this);\r\npath[1] = uniswapV2Router.WETH();\r\n_approve(address(this), address(uniswapV2Router), tokenAmount);\r\nuniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\ntokenAmount,\r\n0,\r\npath,\r\naddress(this),\r\nblock.timestamp\r\n);\r\n}\r\n\r\nfunction sendETHToFee(uint256 amount) private {\r\n_marketingAddress.transfer(amount);\r\n}\r\n\r\nfunction setTrading(bool _tradingOpen) public onlyOwner {\r\ntradingOpen = _tradingOpen;\r\n}\r\n\r\nfunction manualswap() external {\r\nrequire(_msgSender() == _developmentAddress || _msgSender() == _marketingAddress);\r\nuint256 contractBalance = balanceOf(address(this));\r\nswapTokensForEth(contractBalance);\r\n}\r\n\r\nfunction manualsend() external {\r\nrequire(_msgSender() == _developmentAddress || _msgSender() == _marketingAddress);\r\nuint256 contractETHBalance = address(this).balance;\r\nsendETHToFee(contractETHBalance);\r\n}\r\n\r\nfunction blockBots(address[] memory bots_) public onlyOwner {\r\nfor (uint256 i = 0; i < bots_.length; i++) {\r\nbots[bots_[i]] = true;\r\n}\r\n}\r\n\r\nfunction unblockBot(address notbot) public onlyOwner {\r\nbots[notbot] = false;\r\n}\r\n\r\nfunction _tokenTransfer(\r\naddress sender,\r\naddress recipient,\r\nuint256 amount,\r\nbool takeFee\r\n) private {\r\nif (!takeFee) removeAllFee();\r\n_transferStandard(sender, recipient, amount);\r\nif (!takeFee) restoreAllFee();\r\n}\r\n\r\nfunction _transferStandard(\r\naddress sender,\r\naddress recipient,\r\nuint256 tAmount\r\n) private {\r\n(\r\nuint256 rAmount,\r\nuint256 rTransferAmount,\r\nuint256 rFee,\r\nuint256 tTransferAmount,\r\nuint256 tFee,\r\nuint256 tTeam\r\n) = _getValues(tAmount);\r\n_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n_takeTeam(tTeam);\r\n_reflectFee(rFee, tFee);\r\nemit Transfer(sender, recipient, tTransferAmount);\r\n}\r\n\r\nfunction _takeTeam(uint256 tTeam) private {\r\nuint256 currentRate = _getRate();\r\nuint256 rTeam = tTeam.mul(currentRate);\r\n_rOwned[address(this)] = _rOwned[address(this)].add(rTeam);\r\n}\r\n\r\nfunction _reflectFee(uint256 rFee, uint256 tFee) private {\r\n_rTotal = _rTotal.sub(rFee);\r\n_tFeeTotal = _tFeeTotal.add(tFee);\r\n}\r\n\r\nreceive() external payable {}\r\n\r\nfunction _getValues(uint256 tAmount)\r\nprivate\r\nview\r\nreturns (\r\nuint256,\r\nuint256,\r\nuint256,\r\nuint256,\r\nuint256,\r\nuint256\r\n)\r\n{\r\n(uint256 tTransferAmount, uint256 tFee, uint256 tTeam) =\r\n_getTValues(tAmount, _redisFee, _taxFee);\r\nuint256 currentRate = _getRate();\r\n(uint256 rAmount, uint256 rTransferAmount, uint256 rFee) =\r\n_getRValues(tAmount, tFee, tTeam, currentRate);\r\nreturn (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);\r\n}\r\n\r\nfunction _getTValues(\r\nuint256 tAmount,\r\nuint256 redisFee,\r\nuint256 taxFee\r\n)\r\nprivate\r\npure\r\nreturns (\r\nuint256,\r\nuint256,\r\nuint256\r\n)\r\n{\r\nuint256 tFee = tAmount.mul(redisFee).div(100);\r\nuint256 tTeam = tAmount.mul(taxFee).div(100);\r\nuint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);\r\nreturn (tTransferAmount, tFee, tTeam);\r\n}\r\n\r\nfunction _getRValues(\r\nuint256 tAmount,\r\nuint256 tFee,\r\nuint256 tTeam,\r\nuint256 currentRate\r\n)\r\nprivate\r\npure\r\nreturns (\r\nuint256,\r\nuint256,\r\nuint256\r\n)\r\n{\r\nuint256 rAmount = tAmount.mul(currentRate);\r\nuint256 rFee = tFee.mul(currentRate);\r\nuint256 rTeam = tTeam.mul(currentRate);\r\nuint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);\r\nreturn (rAmount, rTransferAmount, rFee);\r\n}\r\n\r\nfunction _getRate() private view returns (uint256) {\r\n(uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\nreturn rSupply.div(tSupply);\r\n}\r\n\r\nfunction _getCurrentSupply() private view returns (uint256, uint256) {\r\nuint256 rSupply = _rTotal;\r\nuint256 tSupply = _tTotal;\r\nif (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\nreturn (rSupply, tSupply);\r\n}\r\n\r\nfunction setFee(uint256 redisFeeOnBuy, uint256 redisFeeOnSell, uint256 taxFeeOnBuy, uint256 taxFeeOnSell) public onlyOwner {\r\n_redisFeeOnBuy = redisFeeOnBuy;\r\n_redisFeeOnSell = redisFeeOnSell;\r\n_taxFeeOnBuy = taxFeeOnBuy;\r\n_taxFeeOnSell = taxFeeOnSell;\r\n}\r\n\r\n//Set minimum tokens required to swap.\r\nfunction setMinSwapTokensThreshold(uint256 swapTokensAtAmount) public onlyOwner {\r\n_swapTokensAtAmount = swapTokensAtAmount;\r\n}\r\n\r\n//Set minimum tokens required to swap.\r\nfunction toggleSwap(bool _swapEnabled) public onlyOwner {\r\nswapEnabled = _swapEnabled;\r\n}\r\n\r\n//Set maximum transaction\r\nfunction setMaxTxnAmount(uint256 maxTxAmount) public onlyOwner {\r\n_maxTxAmount = maxTxAmount;\r\n}\r\n\r\nfunction setMaxWalletSize(uint256 maxWalletSize) public onlyOwner {\r\n_maxWalletSize = maxWalletSize;\r\n}\r\n\r\nfunction excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner {\r\nfor(uint256 i = 0; i < accounts.length; i++) {\r\n_isExcludedFromFee[accounts[i]] = excluded;\r\n}\r\n}\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_buyMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"blockBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redisFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redisFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxFeeOnSell\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWalletSize\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapTokensAtAmount\",\"type\":\"uint256\"}],\"name\":\"setMinSwapTokensThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_tradingOpen\",\"type\":\"bool\"}],\"name\":\"setTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_swapEnabled\",\"type\":\"bool\"}],\"name\":\"toggleSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"notbot\",\"type\":\"address\"}],\"name\":\"unblockBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "fish", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8c96961336ab8111314b2d98236943d82c66f58f94e96ebbe7b20e4014ed334c"}