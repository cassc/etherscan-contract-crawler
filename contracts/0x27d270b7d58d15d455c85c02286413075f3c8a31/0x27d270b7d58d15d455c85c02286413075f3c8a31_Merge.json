{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/core/Merge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/** \\n * smatthewenglish oOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOo niftynathan\\n * OoOoOoOoOoOoOoOoOoOoOoOoOoO                          OoOoOoOoOoOoOoOoOoOoOoOoOoOo\\n * OoOoOoOoOoOoOoOoOoOoO                                      OoOoOoOoOoOoOoOoOoOoOo\\n * OoOoOoOoOoOoOoOoOo                                             OoOoOoOoOoOoOoOoOo\\n * OoOoOoOoOoOoOo                                                    oOoOoOoOoOoOoOo\\n * OoOoOoOoOoOo                                                         OoOoOoOoOoOo\\n * OoOoOoOoOo                                                             OoOoOoOoOo\\n * OoOoOoOo                                                                 OoOoOoOo\\n * OoOoOo                                                                     OoOoOo\\n * OoOoO                                                                       oOoOo\\n * OoOo                                                                         OoOo\\n * OoO                                                                           oOo\\n * Oo                                                                             oO\\n * Oo                                                                             oO\\n * O                                                                               O\\n * O                                                                               O\\n * O                                                                               O\\n * O                                                                               O\\n * O                                                                               O\\n * Oo                                                                             oO\\n * Oo                                                                             oO\\n * OoO                                                                           oOo\\n * OoOo                                                                         OoOo\\n * OoOoO                                                                       oOoOo\\n * OoOoOo                                                                     OoOoOo\\n * OoOoOoOo                                                                 OoOoOoOo\\n * OoOoOoOoOo                                                             OoOoOoOoOo\\n * OoOoOoOoOoOo                                                         OoOoOoOoOoOo\\n * OoOoOoOoOoOoOo                                                    oOoOoOoOoOoOoOo\\n * OoOoOoOoOoOoOoOoOo                                             OoOoOoOoOoOoOoOoOo\\n * OoOoOoOoOoOoOoOoOoOoO                                      OoOoOoOoOoOoOoOoOoOoOo\\n * OoOoOoOoOoOoOoOoOoOoOoOoOoO                          OoOoOoOoOoOoOoOoOoOoOoOoOoOo\\n * soliditygoldminerz oOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOo reviewed by manifold.xyz\\n */\\n\\nimport {SafeMath} from \\\"../util/SafeMath.sol\\\";\\nimport {IMergeMetadata} from \\\"./MergeMetadata.sol\\\";\\n\\ninterface INiftyRegistry {\\n   function isValidNiftySender(address sending_key) external view returns (bool);\\n}\\n\\ninterface IERC721Receiver {\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\\ninterface IERC165 {\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\\ninterface ERC721 is IERC165 {\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed fromAddress, address indexed toAddress);\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    function approve(address to, uint256 tokenId) external;\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n    function setApprovalForAll(address operator, bool _approved) external;\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\\ninterface ERC721Metadata {\\n    function name() external view returns (string memory _name);\\n    function symbol() external view returns (string memory _symbol);\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\n}\\n\\ncontract Merge is ERC721, ERC721Metadata {\\n\\n    using SafeMath for uint256;\\n \\n\\n    IMergeMetadata public _metadataGenerator;\\n\\n    \\n    string private _name;\\n\\n    string private _symbol;\\n\\n\\n    bool public _mintingFinalized;\\n\\n \\n    uint256 public _countMint;\\n \\n    uint256 public _countToken;\\n\\n    uint256 immutable public _percentageTotal;\\n    uint256 public _percentageRoyalty;\\n\\n\\n    uint256 public _alphaMass;\\n\\n    uint256 public _alphaId;\\n\\n\\n    uint256 public _massTotal;\\n\\n\\n    address public _pak;\\n\\n    address public _dead;\\n\\n    address public _omnibus;\\n\\n    address public _receiver;\\n\\n    address immutable public _registry;\\n\\n\\n    event AlphaMassUpdate(uint256 indexed tokenId, uint256 alphaMass);\\n\\n\\n    event MassUpdate(uint256 indexed tokenIdBurned, uint256 indexed tokenIdPersist, uint256 mass);\\n\\n\\n    // Mapping of addresses disbarred from holding any token.\\n    mapping (address => bool) private _blacklistAddress;\\n\\n    // Mapping of address allowed to hold multiple tokens.\\n    mapping (address => bool) private _whitelistAddress;\\n\\n    // Mapping from owner address to token ID.\\n    mapping (address => uint256) private _tokens;\\n\\n    // Mapping owner address to token count.\\n    mapping (address => uint256) private _balances;\\n\\n\\n    // Mapping from token ID to owner address.\\n    mapping (uint256 => address) private _owners;\\n\\n    // Mapping from token ID to approved address.\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals.\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    \\n\\n    // Mapping token ID to mass value.\\n    mapping (uint256 => uint256) private _values;\\n\\n    // Mapping token ID to all quantity merged into it.\\n    mapping (uint256 => uint256) private _mergeCount;\\n\\n\\n    function getMergeCount(uint256 tokenId) public view returns (uint256 mergeCount) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        return _mergeCount[tokenId];\\n    }\\n\\n    modifier onlyPak() {\\n        require(_msgSender() == _pak, \\\"Merge: msg.sender is not pak\\\");\\n        _;\\n    }\\n\\n    modifier onlyValidWhitelist() {\\n        require(_whitelistAddress[_msgSender()], \\\"Merge: Invalid msg.sender\\\");\\n        _;\\n    }\\n\\n    modifier onlyValidSender() {\\n        require(INiftyRegistry(_registry).isValidNiftySender(_msgSender()), \\\"Merge: Invalid msg.sender\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Set the values carefully!\\n     *\\n     * Requirements:\\n     *\\n     * - `registry_` enforce access control on state-changing ops\\n     * - `omnibus_` for efficient minting of initial token stock\\n     * - `metadataGenerator_` \\n     * - `pak_` - Initial pak address (0x2Ce780D7c743A57791B835a9d6F998B15BBbA5a4)\\n     *\\n     */\\n    \\n    constructor(address registry_, address omnibus_, address metadataGenerator_, address pak_) {\\n        _registry = registry_;\\n        _omnibus = omnibus_;\\n        _metadataGenerator = IMergeMetadata(metadataGenerator_);\\n        _name = \\\"merge.\\\";\\n        _symbol = \\\"m\\\";\\n\\n        _pak = pak_;\\n        _receiver = pak_;\\n\\n        _dead = 0x000000000000000000000000000000000000dEaD;\\n\\n\\n        _percentageTotal = 10000;\\n        _percentageRoyalty = 1000;\\n\\n\\n        _blacklistAddress[address(this)] = true;\\n\\n        _whitelistAddress[omnibus_] = true;              \\n    }\\n\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    } \\n\\n    function totalSupply() public view returns (uint256) {\\n        return _countToken;\\n    }\\n \\n    function merge(uint256 tokenIdRcvr, uint256 tokenIdSndr) external onlyValidWhitelist returns (uint256 tokenIdDead) {        \\n        address ownerOfTokenIdRcvr = ownerOf(tokenIdRcvr);\\n        address ownerOfTokenIdSndr = ownerOf(tokenIdSndr);\\n        require(ownerOfTokenIdRcvr == ownerOfTokenIdSndr, \\\"Merge: Illegal argument disparate owner.\\\");\\n        require(_msgSender() == ownerOfTokenIdRcvr, \\\"ERC721: msg.sender is not token owner.\\\");\\n        return _merge(tokenIdRcvr, tokenIdSndr, ownerOfTokenIdRcvr, ownerOfTokenIdSndr); \\n    }\\n\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        require(_exists(tokenId), \\\"ERC721: transfer attempt for nonexistent token\\\");\\n        require(ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n        require(!_blacklistAddress[to], \\\"Merge: transfer attempt to blacklist address\\\");\\n        require(from != to, \\\"ERC721: transfer attempt to self\\\");\\n\\n        if(to == _dead){\\n            _burn(tokenId);\\n            return;\\n        }\\n\\n        _approve(address(0), tokenId);\\n\\n        bool fromIsWhitelisted = isWhitelisted(from);\\n        bool toIsWhitelisted = isWhitelisted(to);\\n\\n        if(!fromIsWhitelisted && toIsWhitelisted){            \\n            delete _tokens[from];            \\n            _owners[tokenId] = to;\\n\\n            _balances[to] += 1;\\n            delete _balances[from];            \\n\\n            emit Transfer(from, to, tokenId);\\n            return;\\n        }\\n\\n        if(fromIsWhitelisted && toIsWhitelisted) {\\n\\n            _balances[to] += 1;\\n            _balances[from] -= 1;\\n            \\n            _owners[tokenId] = to;\\n\\n            emit Transfer(from, to, tokenId);\\n            return;\\n        }\\n\\n        if(_tokens[to] == 0){            \\n\\n            _tokens[to] = tokenId;\\n            _owners[tokenId] = to;\\n\\n            _balances[to] += 1;\\n            _balances[from] -= 1;\\n\\n            emit Transfer(from, to, tokenId);\\n            return;\\n        }        \\n\\n        emit Transfer(from, to, tokenId);\\n\\n        uint256 tokenIdRcvr = _tokens[to];\\n        uint256 tokenIdSndr = tokenId;\\n        uint256 tokenIdDead = _merge(tokenIdRcvr, tokenIdSndr, to, from);\\n\\n        if(tokenIdDead == tokenIdRcvr){\\n            _owners[tokenIdSndr] = to;\\n            _tokens[to] = tokenIdSndr;\\n        } else {\\n            _owners[tokenIdRcvr] = to;\\n            _tokens[to] = tokenIdRcvr;\\n        }\\n        delete _owners[tokenIdDead];\\n    }\\n\\n    function _merge(uint256 tokenIdRcvr, uint256 tokenIdSndr, address ownerRcvr, address ownerSndr) internal returns (uint256 tokenIdDead) {\\n        require(tokenIdRcvr != tokenIdSndr, \\\"Merge: Illegal argument identical tokenId.\\\");\\n\\n        uint256 massRcvr = decodeMass(_values[tokenIdRcvr]);\\n        uint256 massSndr = decodeMass(_values[tokenIdSndr]);\\n\\n        if(!_whitelistAddress[ownerRcvr]){\\n            _balances[ownerRcvr] = 1;\\n        }\\n        _balances[ownerSndr] -= 1;\\n        \\n        uint256 massSmall = massRcvr;\\n        uint256 massLarge = massSndr;\\n\\n        uint256 tokenIdSmall = tokenIdRcvr;\\n        uint256 tokenIdLarge = tokenIdSndr;\\n\\n        if (massRcvr >= massSndr) {\\n\\n            massSmall = massSndr;\\n            massLarge = massRcvr;\\n\\n            tokenIdSmall = tokenIdSndr;\\n            tokenIdLarge = tokenIdRcvr;\\n        }\\n\\n        emit Transfer(ownerOf(tokenIdSmall), address(0), tokenIdSmall);\\n\\n        _values[tokenIdLarge] += massSmall;\\n\\n        uint256 combinedMass = massLarge + massSmall;\\n\\n        if(combinedMass > _alphaMass) {\\n            _alphaId = tokenIdLarge;\\n            _alphaMass = combinedMass;\\n            emit AlphaMassUpdate(_alphaId, combinedMass);\\n        }\\n        \\n        _mergeCount[tokenIdLarge]++;\\n\\n        delete _values[tokenIdSmall];\\n\\n        _countToken -= 1;\\n\\n        emit MassUpdate(tokenIdSmall, tokenIdLarge, combinedMass);\\n\\n        return tokenIdSmall;\\n    }\\n\\n    function setRoyaltyBips(uint256 percentageRoyalty_) external onlyPak {\\n        require(percentageRoyalty_ <= _percentageTotal, \\\"Merge: Illegal argument more than 100%\\\");\\n        _percentageRoyalty = percentageRoyalty_;\\n    }\\n\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) external view returns (address, uint256) {\\n        uint256 royaltyAmount = (salePrice * _percentageRoyalty) / _percentageTotal;\\n        return (_receiver, royaltyAmount);\\n    }\\n\\n    function setBlacklistAddress(address address_, bool status) external onlyPak {\\n        require(address_ != _omnibus, \\\"Merge: Illegal argument address_ is _omnibus.\\\");\\n        _blacklistAddress[address_] = status;\\n    }\\n\\n    function setPak(address pak_) external onlyPak {  \\n        _pak = pak_;\\n    }\\n\\n    function setRoyaltyReceiver(address receiver_) external onlyPak {  \\n        _receiver = receiver_;\\n    }\\n    \\n    function setMetadataGenerator(address metadataGenerator_) external onlyPak {  \\n        _metadataGenerator = IMergeMetadata(metadataGenerator_);\\n    }\\n   \\n    function whitelistUpdate(address address_, bool status) external onlyPak {\\n        if(address_ == _omnibus){\\n            require(status != false, \\\"Merge: Illegal argument _omnibus can't be removed.\\\");\\n        }\\n\\n        if(status == false) {\\n            require(balanceOf(address_) <= 1, \\\"Merge: Address with more than one token can't be removed.\\\");\\n        }\\n\\n        _whitelistAddress[address_] = status;\\n    }\\n\\n    function isWhitelisted(address address_) public view returns (bool) {\\n        return _whitelistAddress[address_];\\n    }\\n\\n    function isBlacklisted(address address_) public view returns (bool) {\\n        return _blacklistAddress[address_];\\n    }\\n\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: owner query for nonexistent token\\\");        \\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Generate the NFTs of this collection. \\n     *\\n     * [20001000, 20000900, ]\\n     *\\n     * Requirements:\\n     *\\n     * - `values_` provided as a list of addresses, each of\\n     *             which implicitly corresponds to a tokenId, \\n     *             derrived by the index of the value in the \\n     *             input array. The values map to a color\\n     *             attribute.\\n     *\\n     * Emits a series of {Transfer} events.\\n     */\\n    function mint(uint256[] memory values_) external onlyValidSender {\\n        require(!_mintingFinalized, \\\"Merge: Minting is finalized.\\\");\\n\\n        uint256 index = _countMint;\\n        uint256 massAdded = 0;\\n\\n        uint256 alphaId = _alphaId;\\n        uint256 alphaMass = _alphaMass;\\n\\n        for (uint256 i = 1; i <= values_.length; i++) {\\n\\n            index = _countMint + i;\\n\\n            _values[index] = values_[i - 1];\\n\\n            _owners[index] = _omnibus;\\n\\n            (uint256 class, uint256 mass) = decodeClassAndMass(values_[i - 1]);\\n            require(class > 0 && class <= 4, \\\"Merge: Class must be between 1 and 4.\\\");\\n            require(mass > 0 && mass < 99999999, \\\"Merge: Mass must be between 1 and 99999999.\\\");          \\n\\n            if(alphaMass < mass){\\n                alphaMass = mass;\\n                alphaId = index;\\n            }\\n\\n            massAdded += mass;\\n\\n            emit Transfer(address(0), _omnibus, index);\\n        }\\n\\n        _countMint += values_.length;\\n        _countToken += values_.length;\\n\\n        _balances[_omnibus] = _countMint;\\n\\n        _massTotal += massAdded;\\n\\n        if(_alphaId != alphaId) {\\n            _alphaId = alphaId;\\n            _alphaMass = alphaMass;\\n            emit AlphaMassUpdate(alphaId, alphaMass);\\n        }        \\n    }\\n\\n    function finalize() external onlyPak {\\n        _mintingFinalized = true;\\n    }\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        return _balances[owner];        \\n    }\\n\\n    function massOf(uint256 tokenId) public view virtual returns (uint256) {\\n        return decodeMass(_values[tokenId]);\\n    }\\n\\n    function getValueOf(uint256 tokenId) public view virtual returns (uint256) {\\n        return _values[tokenId];\\n    }\\n\\n    function tokenOf(address owner) public view virtual returns (uint256) {\\n        uint256 token = _tokens[owner];\\n        return token;\\n    }\\n\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");       \\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return _values[tokenId] != 0;\\n    }\\n\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n\\n        address owner = ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }   \\n\\n    function tokenURI(uint256 tokenId) public virtual view override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        \\n        return _metadataGenerator.tokenMetadata(\\n            tokenId, \\n            decodeClass(_values[tokenId]), \\n            decodeMass(_values[tokenId]), \\n            decodeMass(_values[_alphaId]), \\n            tokenId == _alphaId,\\n            getMergeCount(tokenId));\\n    }\\n\\n    function encodeClassAndMass(uint256 class, uint256 mass) public pure returns (uint256) {        \\n        require(class > 0 && class <= 4, \\\"Merge: Class must be between 1 and 4.\\\");\\n        require(mass > 0 && mass < 99999999, \\\"Merge: Mass must be between 1 and 99999999.\\\");            \\n        return ((class * 100000000) + mass);\\n    }\\n\\n    function decodeClassAndMass(uint256 value) public pure returns (uint256, uint256) {\\n        uint256 class = value.div(100000000);        \\n        uint256 mass = value.sub(class.mul(100000000));\\n        require(class > 0 && class <= 4, \\\"Merge: Class must be between 1 and 4.\\\");\\n        require(mass > 0 && mass < 99999999, \\\"Merge: Mass must be between 1 and 99999999.\\\");             \\n        return (class, mass);\\n    }\\n\\n    function decodeClass(uint256 value) public pure returns (uint256) {\\n        return value.div(100000000);\\n    }    \\n\\n    function decodeMass(uint256 value) public pure returns (uint256) {\\n        return value.sub(decodeClass(value).mul(100000000));\\n    }\\n\\n    function _msgSender() internal view returns (address) {\\n        return msg.sender;\\n    }\\n     \\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {\\n        if (isContract(to)) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                }\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n        return true;\\n    }    \\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        bytes4 _ERC165_ = 0x01ffc9a7;\\n        bytes4 _ERC721_ = 0x80ac58cd;\\n        bytes4 _ERC2981_ = 0x2a55205a;\\n        bytes4 _ERC721Metadata_ = 0x5b5e139f;\\n        return interfaceId == _ERC165_ \\n            || interfaceId == _ERC721_\\n            || interfaceId == _ERC2981_\\n            || interfaceId == _ERC721Metadata_;\\n    }\\n\\n\\n    function burn(uint256 tokenId) public {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n\\n    function _burn(uint256 tokenId) internal {\\n        address owner = ownerOf(tokenId);\\n        _approve(address(0), tokenId);\\n\\n        _massTotal -= decodeMass(_values[tokenId]);\\n\\n        delete _tokens[owner];\\n        delete _owners[tokenId];\\n        delete _values[tokenId];\\n\\n        _countToken -= 1;\\n        _balances[owner] -= 1;        \\n\\n        emit MassUpdate(tokenId, 0, 0);\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n}\"\r\n    },\r\n    \"contracts/util/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/MergeMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/** \\n * XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n * XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n * XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  .***   XXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n * XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  ,*********  XXXXXXXXXXXXXXXXXXXXXXXXXXX\\n * XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  ***************  XXXXXXXXXXXXXXXXXXXXXXXX\\n * XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  .*******************  XXXXXXXXXXXXXXXXXXXXXX\\n * XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  ***********    **********  XXXXXXXXXXXXXXXXXXX\\n * XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX   ***********       ***********  XXXXXXXXXXXXXXXXX\\n * XXXXXXXXXXXXXXXXXXXXXXXXXXXX  ***********         ***************  XXXXXXXXXXXXXX\\n * XXXXXXXXXXXXXXXXXXXXXXXXXX  ***********           ****    ********* XXXXXXXXXXXXX\\n * XXXXXXXXXXXXXXXXXXXXXXXXXX *********      ***    ***      *********  XXXXXXXXXXXX\\n * XXXXXXXXXXXXXXXXXXXXXXXXXX  **********  *****          *********** XXXXXXXXXXXXXX\\n * XXXXXXXXXXXXXXXXXXXXXX   /////.*************         ***********  XXXXXXXXXXXXXXX\\n * XXXXXXXXXXXXXXXXXXX  /////////...***********      ************  XXXXXXXXXXXXXXXXX\\n * XXXXXXXXXXXXXXXXX/ ///////////..... /////////   ///////////   XXXXXXXXXXXXXXXXXXX\\n * XXXXXXXXXXXXXXXX  /    //////.........///////////////////   XXXXXXXXXXXXXXXXXXXXX\\n * XXXXXXXXXXXXXXXXXXXX .///////...........//////////////   XXXXXXXXXXXXXXXXXXXXXXXX\\n * XXXXXXXXXXXXXXXXXXX .///////.....//..////  /////////  XXXXXXXXXXXXXXXXXXXXXXXXXXX\\n * XXXXXXXXXXXXXXXXX# /////////////////////  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n * XXXXXXXXXXXXXXX   ////////////////////   XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n * XXXXXXXXXXXX   ////////////// //////   XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n * XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n * XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n */\\n\\nimport {ABDKMath64x64} from \\\"../util/ABDKMath64x64.sol\\\";\\nimport {Base64} from \\\"../util/Base64.sol\\\";\\nimport {Roots} from \\\"../util/Roots.sol\\\";\\nimport {Strings} from \\\"../util/Strings.sol\\\";\\n\\ninterface IMergeMetadata {    \\n    function tokenMetadata(\\n        uint256 tokenId, \\n        uint256 rarity, \\n        uint256 tokenMass, \\n        uint256 alphaMass, \\n        bool isAlpha, \\n        uint256 mergeCount) external view returns (string memory);\\n}\\n\\ncontract MergeMetadata is IMergeMetadata {\\n    \\n    struct ERC721MetadataStructure {\\n        bool isImageLinked;\\n        string name;\\n        string description;\\n        string createdBy;\\n        string image;\\n        ERC721MetadataAttribute[] attributes;\\n    }\\n\\n    struct ERC721MetadataAttribute {\\n        bool includeDisplayType;\\n        bool includeTraitType;\\n        bool isValueAString;\\n        string displayType;\\n        string traitType;\\n        string value;\\n    }\\n    \\n    using ABDKMath64x64 for int128;    \\n    using Base64 for string;\\n    using Roots for uint;    \\n    using Strings for uint256;    \\n    \\n    address public owner;  \\n\\n    string private _name;\\n    string private _imageBaseURI;\\n    string private _imageExtension;\\n    uint256 private _maxRadius;\\n    string[] private _imageParts;\\n    mapping (string => string) private _classStyles;\\n  \\n    string constant private _RADIUS_TAG = '<RADIUS>';\\n    string constant private _CLASS_TAG = '<CLASS>';  \\n    string constant private _CLASS_STYLE_TAG = '<CLASS_STYLE>';  \\n  \\n    constructor() {\\n        owner = msg.sender;\\n        _name = \\\"m\\\";\\n        _imageBaseURI = \\\"\\\"; // Set to empty string - results in on-chain SVG generation by default unless this is set later\\n        _imageExtension = \\\"\\\"; // Set to empty string - can be changed later to remain empty, .png, .mp4, etc\\n        _maxRadius = 1000;\\n\\n        // Deploy with default SVG image parts - can be completely replaced later\\n        _imageParts.push(\\\"<svg xmlns='http://www.w3.org/2000/svg' version='1.1' width='2000' height='2000'>\\\");\\n            _imageParts.push(\\\"<style>\\\");\\n                _imageParts.push(\\\".m1 #c{fill: #fff;}\\\");\\n                _imageParts.push(\\\".m1 #r{fill: #000;}\\\");\\n                _imageParts.push(\\\".m2 #c{fill: #fc3;}\\\");\\n                _imageParts.push(\\\".m2 #r{fill: #000;}\\\");\\n                _imageParts.push(\\\".m3 #c{fill: #fff;}\\\");\\n                _imageParts.push(\\\".m3 #r{fill: #33f;}\\\");\\n                _imageParts.push(\\\".m4 #c{fill: #fff;}\\\");\\n                _imageParts.push(\\\".m4 #r{fill: #f33;}\\\");\\n                _imageParts.push(\\\".a #c{fill: #000 !important;}\\\");\\n                _imageParts.push(\\\".a #r{fill: #fff !important;}\\\");\\n                _imageParts.push(_CLASS_STYLE_TAG);\\n            _imageParts.push(\\\"</style>\\\");\\n            _imageParts.push(\\\"<g class='\\\");\\n                _imageParts.push(_CLASS_TAG);\\n                _imageParts.push(\\\"'>\\\");\\n                    _imageParts.push(\\\"<rect id='r' width='2000' height='2000'/>\\\");\\n                    _imageParts.push(\\\"<circle id='c' cx='1000' cy='1000' r='\\\");\\n                        _imageParts.push(_RADIUS_TAG);\\n                    _imageParts.push(\\\"'/>\\\");\\n            _imageParts.push(\\\"</g>\\\");                \\n        _imageParts.push(\\\"</svg>\\\");\\n    }        \\n    \\n    function setName(string calldata name_) external { \\n        _requireOnlyOwner();       \\n        _name = name_;\\n    }\\n\\n    function setImageBaseURI(string calldata imageBaseURI_, string calldata imageExtension_) external {        \\n        _requireOnlyOwner();\\n        _imageBaseURI = imageBaseURI_;\\n        _imageExtension = imageExtension_;\\n    }\\n\\n    function setMaxRadius(uint256 maxRadius_) external {\\n        _requireOnlyOwner();\\n        _maxRadius = maxRadius_;\\n    }    \\n\\n    function tokenMetadata(uint256 tokenId, uint256 rarity, uint256 tokenMass, uint256 alphaMass, bool isAlpha, uint256 mergeCount) external view override returns (string memory) {        \\n        string memory base64Json = Base64.encode(bytes(string(abi.encodePacked(_getJson(tokenId, rarity, tokenMass, alphaMass, isAlpha, mergeCount)))));\\n        return string(abi.encodePacked('data:application/json;base64,', base64Json));\\n    }\\n\\n    function updateImageParts(string[] memory imageParts_) public {\\n        _requireOnlyOwner();\\n        _imageParts = imageParts_;\\n    }\\n\\n    function updateClassStyle(string calldata cssClass, string calldata cssStyle) external {\\n        _requireOnlyOwner();\\n        _classStyles[cssClass] = cssStyle;\\n    }\\n\\n    function getClassStyle(string memory cssClass) public view returns (string memory) {\\n        return _classStyles[cssClass];\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function imageBaseURI() public view returns (string memory) {\\n        return _imageBaseURI;\\n    }\\n\\n    function imageExtension() public view returns (string memory) {\\n        return _imageExtension;\\n    }\\n\\n    function maxRadius() public view returns (uint256) {\\n        return _maxRadius;\\n    }            \\n\\n    function getClassString(uint256 tokenId, uint256 rarity, bool isAlpha, bool offchainImage) public pure returns (string memory) {\\n        return _getClassString(tokenId, rarity, isAlpha, offchainImage);\\n    }\\n\\n    function _getJson(uint256 tokenId, uint256 rarity, uint256 tokenMass, uint256 alphaMass, bool isAlpha, uint256 mergeCount) private view returns (string memory) {        \\n        string memory imageData = \\n            bytes(_imageBaseURI).length == 0 ? \\n                _getSvg(tokenId, rarity, tokenMass, alphaMass, isAlpha) :\\n                string(abi.encodePacked(imageBaseURI(), _getClassString(tokenId, rarity, isAlpha, true), \\\"_\\\", uint256(int256(_getScaledRadius(tokenMass, alphaMass, _maxRadius).toInt())).toString(), imageExtension()));\\n\\n        ERC721MetadataStructure memory metadata = ERC721MetadataStructure({\\n            isImageLinked: bytes(_imageBaseURI).length > 0, \\n            name: string(abi.encodePacked(name(), \\\"(\\\", tokenMass.toString(), \\\") #\\\", tokenId.toString())),\\n            description: tokenMass.toString(),\\n            createdBy: \\\"Pak\\\",\\n            image: imageData,\\n            attributes: _getJsonAttributes(tokenId, rarity, tokenMass, mergeCount, isAlpha)\\n        });\\n\\n        return _generateERC721Metadata(metadata);\\n    }        \\n\\n    function _getJsonAttributes(uint256 tokenId, uint256 rarity, uint256 tokenMass, uint256 mergeCount, bool isAlpha) private pure returns (ERC721MetadataAttribute[] memory) {\\n        uint256 tensDigit = tokenId % 100 / 10;\\n        uint256 onesDigit = tokenId % 10;\\n        uint256 class = tensDigit * 10 + onesDigit;\\n\\n        ERC721MetadataAttribute[] memory metadataAttributes = new ERC721MetadataAttribute[](5);\\n        metadataAttributes[0] = _getERC721MetadataAttribute(false, true, false, \\\"\\\", \\\"Mass\\\", tokenMass.toString());\\n        metadataAttributes[1] = _getERC721MetadataAttribute(false, true, false, \\\"\\\", \\\"Alpha\\\", isAlpha ? \\\"1\\\" : \\\"0\\\");\\n        metadataAttributes[2] = _getERC721MetadataAttribute(false, true, false, \\\"\\\", \\\"Tier\\\", rarity.toString());\\n        metadataAttributes[3] = _getERC721MetadataAttribute(false, true, false, \\\"\\\", \\\"Class\\\", class.toString());\\n        metadataAttributes[4] = _getERC721MetadataAttribute(false, true, false, \\\"\\\", \\\"Merges\\\", mergeCount.toString());\\n        return metadataAttributes;\\n    }    \\n\\n    function _getERC721MetadataAttribute(bool includeDisplayType, bool includeTraitType, bool isValueAString, string memory displayType, string memory traitType, string memory value) private pure returns (ERC721MetadataAttribute memory) {\\n        ERC721MetadataAttribute memory attribute = ERC721MetadataAttribute({\\n            includeDisplayType: includeDisplayType,\\n            includeTraitType: includeTraitType,\\n            isValueAString: isValueAString,\\n            displayType: displayType,\\n            traitType: traitType,\\n            value: value\\n        });\\n\\n        return attribute;\\n    }    \\n\\n    function _getSvg(uint256 tokenId, uint256 rarity, uint256 tokenMass, uint256 alphaMass, bool isAlpha) private view returns (string memory) {\\n        bytes memory byteString;\\n        for (uint i = 0; i < _imageParts.length; i++) {\\n          if (_checkTag(_imageParts[i], _RADIUS_TAG)) {\\n            byteString = abi.encodePacked(byteString, _floatToString(_getScaledRadius(tokenMass, alphaMass, _maxRadius)));\\n          } else if (_checkTag(_imageParts[i], _CLASS_TAG)) {\\n            byteString = abi.encodePacked(byteString, _getClassString(tokenId, rarity, isAlpha, false));\\n          } else if (_checkTag(_imageParts[i], _CLASS_STYLE_TAG)) {\\n              uint256 tensDigit = tokenId % 100 / 10;\\n              uint256 onesDigit = tokenId % 10;\\n              uint256 class = tensDigit * 10 + onesDigit;\\n              string memory classCss = getClassStyle(_getTokenIdClass(class));\\n              if(bytes(classCss).length > 0) {\\n                  byteString = abi.encodePacked(byteString, classCss);\\n              }            \\n          } else {\\n            byteString = abi.encodePacked(byteString, _imageParts[i]);\\n          }\\n        }\\n        return string(byteString); \\n    }\\n\\n    function _getScaledRadius(uint256 tokenMass, uint256 alphaMass, uint256 maximumRadius) private pure returns (int128) {\\n        int128 radiusMass = _getRadius64x64(tokenMass);\\n        int128 radiusAlphaMass = _getRadius64x64(alphaMass);\\n        int128 scalePercentage = ABDKMath64x64.div(radiusMass, radiusAlphaMass);                \\n        int128 scaledRadius = ABDKMath64x64.mul(ABDKMath64x64.fromUInt(maximumRadius), scalePercentage);\\n        if(uint256(int256(scaledRadius.toInt())) == 0) {\\n            scaledRadius = ABDKMath64x64.fromUInt(1);\\n        }\\n        return scaledRadius;\\n    }\\n\\n    // Radius = Cube Root(Mass) * Cube Root (0.23873241463)\\n    // Radius = Cube Root(Mass) * 0.62035049089\\n    function _getRadius64x64(uint256 mass) private pure returns (int128) {        \\n        int128 cubeRootScalar = ABDKMath64x64.divu(62035049089, 100000000000);\\n        int128 cubeRootMass = ABDKMath64x64.divu(mass.nthRoot(3, 6, 32), 1000000);\\n        int128 radius = ABDKMath64x64.mul(cubeRootMass, cubeRootScalar);        \\n        return radius;\\n    }            \\n\\n    function _generateERC721Metadata(ERC721MetadataStructure memory metadata) private pure returns (string memory) {\\n      bytes memory byteString;    \\n    \\n        byteString = abi.encodePacked(\\n          byteString,\\n          _openJsonObject());\\n    \\n        byteString = abi.encodePacked(\\n          byteString,\\n          _pushJsonPrimitiveStringAttribute(\\\"name\\\", metadata.name, true));\\n    \\n        byteString = abi.encodePacked(\\n          byteString,\\n          _pushJsonPrimitiveStringAttribute(\\\"description\\\", metadata.description, true));\\n    \\n        byteString = abi.encodePacked(\\n          byteString,\\n          _pushJsonPrimitiveStringAttribute(\\\"created_by\\\", metadata.createdBy, true));\\n    \\n        if(metadata.isImageLinked) {\\n            byteString = abi.encodePacked(\\n                byteString,\\n                _pushJsonPrimitiveStringAttribute(\\\"image\\\", metadata.image, true));\\n        } else {\\n            byteString = abi.encodePacked(\\n                byteString,\\n                _pushJsonPrimitiveStringAttribute(\\\"image_data\\\", metadata.image, true));\\n        }\\n\\n        byteString = abi.encodePacked(\\n          byteString,\\n          _pushJsonComplexAttribute(\\\"attributes\\\", _getAttributes(metadata.attributes), false));\\n    \\n        byteString = abi.encodePacked(\\n          byteString,\\n          _closeJsonObject());\\n    \\n        return string(byteString);\\n    }\\n\\n    function _getAttributes(ERC721MetadataAttribute[] memory attributes) private pure returns (string memory) {\\n        bytes memory byteString;\\n    \\n        byteString = abi.encodePacked(\\n          byteString,\\n          _openJsonArray());\\n    \\n        for (uint i = 0; i < attributes.length; i++) {\\n          ERC721MetadataAttribute memory attribute = attributes[i];\\n\\n          byteString = abi.encodePacked(\\n            byteString,\\n            _pushJsonArrayElement(_getAttribute(attribute), i < (attributes.length - 1)));\\n        }\\n    \\n        byteString = abi.encodePacked(\\n          byteString,\\n          _closeJsonArray());\\n    \\n        return string(byteString);\\n    }\\n\\n    function _getAttribute(ERC721MetadataAttribute memory attribute) private pure returns (string memory) {\\n        bytes memory byteString;\\n        \\n        byteString = abi.encodePacked(\\n          byteString,\\n          _openJsonObject());\\n    \\n        if(attribute.includeDisplayType) {\\n          byteString = abi.encodePacked(\\n            byteString,\\n            _pushJsonPrimitiveStringAttribute(\\\"display_type\\\", attribute.displayType, true));\\n        }\\n    \\n        if(attribute.includeTraitType) {\\n          byteString = abi.encodePacked(\\n            byteString,\\n            _pushJsonPrimitiveStringAttribute(\\\"trait_type\\\", attribute.traitType, true));\\n        }\\n    \\n        if(attribute.isValueAString) {\\n          byteString = abi.encodePacked(\\n            byteString,\\n            _pushJsonPrimitiveStringAttribute(\\\"value\\\", attribute.value, false));\\n        } else {\\n          byteString = abi.encodePacked(\\n            byteString,\\n            _pushJsonPrimitiveNonStringAttribute(\\\"value\\\", attribute.value, false));\\n        }\\n    \\n        byteString = abi.encodePacked(\\n          byteString,\\n          _closeJsonObject());\\n    \\n        return string(byteString);\\n    }\\n\\n    function _getClassString(uint256 tokenId, uint256 rarity, bool isAlpha, bool offchainImage) private pure returns (string memory) {\\n        bytes memory byteString;    \\n    \\n        byteString = abi.encodePacked(byteString, _getRarityClass(rarity));\\n        \\n        if(isAlpha) {\\n            byteString = abi.encodePacked(\\n              byteString,\\n              string(abi.encodePacked(offchainImage ? \\\"_\\\" : \\\" \\\", \\\"a\\\")));\\n        }\\n\\n        uint256 tensDigit = tokenId % 100 / 10;\\n        uint256 onesDigit = tokenId % 10;\\n        uint256 class = tensDigit * 10 + onesDigit;\\n\\n        byteString = abi.encodePacked(\\n          byteString,\\n          string(abi.encodePacked(offchainImage ? \\\"_\\\" : \\\" \\\", _getTokenIdClass(class))));\\n\\n        return string(byteString);    \\n    }\\n\\n    function _getRarityClass(uint256 rarity) private pure returns (string memory) {\\n        return string(abi.encodePacked(\\\"m\\\", rarity.toString()));\\n    }\\n\\n    function _getTokenIdClass(uint256 class) private pure returns (string memory) {\\n        return string(abi.encodePacked(\\\"c\\\", class.toString()));\\n    }\\n\\n    function _checkTag(string storage a, string memory b) private pure returns (bool) {\\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\\n    }\\n\\n    function _floatToString(int128 value) private pure returns (string memory) {\\n        uint256 decimal4 = (value & 0xFFFFFFFFFFFFFFFF).mulu(10000);\\n        return string(abi.encodePacked(uint256(int256(value.toInt())).toString(), '.', _decimal4ToString(decimal4)));\\n    }\\n  \\n    function _decimal4ToString(uint256 decimal4) private pure returns (string memory) {\\n        bytes memory decimal4Characters = new bytes(4);\\n        for (uint i = 0; i < 4; i++) {\\n          decimal4Characters[3 - i] = bytes1(uint8(0x30 + decimal4 % 10));\\n          decimal4 /= 10;\\n        }\\n        return string(abi.encodePacked(decimal4Characters));\\n    }\\n\\n    function _requireOnlyOwner() private view {\\n        require(msg.sender == owner, \\\"You are not the owner\\\");\\n    }\\n\\n    function _openJsonObject() private pure returns (string memory) {        \\n        return string(abi.encodePacked(\\\"{\\\"));\\n    }\\n\\n    function _closeJsonObject() private pure returns (string memory) {\\n        return string(abi.encodePacked(\\\"}\\\"));\\n    }\\n\\n    function _openJsonArray() private pure returns (string memory) {        \\n        return string(abi.encodePacked(\\\"[\\\"));\\n    }\\n\\n    function _closeJsonArray() private pure returns (string memory) {        \\n        return string(abi.encodePacked(\\\"]\\\"));\\n    }\\n\\n    function _pushJsonPrimitiveStringAttribute(string memory key, string memory value, bool insertComma) private pure returns (string memory) {\\n        return string(abi.encodePacked('\\\"', key, '\\\": \\\"', value, '\\\"', insertComma ? ',' : ''));\\n    }\\n\\n    function _pushJsonPrimitiveNonStringAttribute(string memory key, string memory value, bool insertComma) private pure returns (string memory) {\\n        return string(abi.encodePacked('\\\"', key, '\\\": ', value, insertComma ? ',' : ''));\\n    }\\n\\n    function _pushJsonComplexAttribute(string memory key, string memory value, bool insertComma) private pure returns (string memory) {\\n        return string(abi.encodePacked('\\\"', key, '\\\": ', value, insertComma ? ',' : ''));\\n    }\\n\\n    function _pushJsonArrayElement(string memory value, bool insertComma) private pure returns (string memory) {\\n        return string(abi.encodePacked(value, insertComma ? ',' : ''));\\n    }\\n}\"\r\n    },\r\n    \"contracts/util/ABDKMath64x64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math 64.64 Smart Contract Library.  Copyright \u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.8.6;\\n\\n/**\\n * Smart contract library of mathematical functions operating with signed\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n * represented by int128 type holding only the numerator.\\n */\\nlibrary ABDKMath64x64 {\\n  /*\\n   * Minimum value signed 64.64-bit fixed point number may have. \\n   */\\n  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n\\n  /*\\n   * Maximum value signed 64.64-bit fixed point number may have. \\n   */\\n  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n  /**\\n   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function fromInt (int256 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\n      return int128 (x << 64);\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into signed 64-bit integer number\\n   * rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64-bit integer number\\n   */\\n  function toInt (int128 x) internal pure returns (int64) {\\n    unchecked {\\n      return int64 (x >> 64);\\n    }\\n  }\\n\\n  /**\\n   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function fromUInt (uint256 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x <= 0x7FFFFFFFFFFFFFFF);\\n      return int128 (int256 (x << 64));\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\n   * number rounding down.  Revert on underflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return unsigned 64-bit integer number\\n   */\\n  function toUInt (int128 x) internal pure returns (uint64) {\\n    unchecked {\\n      require (x >= 0);\\n      return uint64 (uint128 (x >> 64));\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\n   * number rounding down.  Revert on overflow.\\n   *\\n   * @param x signed 128.128-bin fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function from128x128 (int256 x) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = x >> 64;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\n   * number.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 128.128 fixed point number\\n   */\\n  function to128x128 (int128 x) internal pure returns (int256) {\\n    unchecked {\\n      return int256 (x) << 64;\\n    }\\n  }\\n\\n  /**\\n   * Calculate x + y.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function add (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) + y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x - y.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function sub (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) - y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding down.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function mul (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) * y >> 64;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\n   * number and y is signed 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64 fixed point number\\n   * @param y signed 256-bit integer number\\n   * @return signed 256-bit integer number\\n   */\\n  function muli (int128 x, int256 y) internal pure returns (int256) {\\n    unchecked {\\n      if (x == MIN_64x64) {\\n        require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\n          y <= 0x1000000000000000000000000000000000000000000000000);\\n        return -y << 63;\\n      } else {\\n        bool negativeResult = false;\\n        if (x < 0) {\\n          x = -x;\\n          negativeResult = true;\\n        }\\n        if (y < 0) {\\n          y = -y; // We rely on overflow behavior here\\n          negativeResult = !negativeResult;\\n        }\\n        uint256 absoluteResult = mulu (x, uint256 (y));\\n        if (negativeResult) {\\n          require (absoluteResult <=\\n            0x8000000000000000000000000000000000000000000000000000000000000000);\\n          return -int256 (absoluteResult); // We rely on overflow behavior here\\n        } else {\\n          require (absoluteResult <=\\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n          return int256 (absoluteResult);\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64 fixed point number\\n   * @param y unsigned 256-bit integer number\\n   * @return unsigned 256-bit integer number\\n   */\\n  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\\n    unchecked {\\n      if (y == 0) return 0;\\n\\n      require (x >= 0);\\n\\n      uint256 lo = (uint256 (int256 (x)) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n      uint256 hi = uint256 (int256 (x)) * (y >> 128);\\n\\n      require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n      hi <<= 64;\\n\\n      require (hi <=\\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\n      return hi + lo;\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function div (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n      int256 result = (int256 (x) << 64) / y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @param y signed 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function divi (int256 x, int256 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n\\n      bool negativeResult = false;\\n      if (x < 0) {\\n        x = -x; // We rely on overflow behavior here\\n        negativeResult = true;\\n      }\\n      if (y < 0) {\\n        y = -y; // We rely on overflow behavior here\\n        negativeResult = !negativeResult;\\n      }\\n      uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\\n      if (negativeResult) {\\n        require (absoluteResult <= 0x80000000000000000000000000000000);\\n        return -int128 (absoluteResult); // We rely on overflow behavior here\\n      } else {\\n        require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return int128 (absoluteResult); // We rely on overflow behavior here\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @param y unsigned 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function divu (uint256 x, uint256 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n      uint128 result = divuu (x, y);\\n      require (result <= uint128 (MAX_64x64));\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate -x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function neg (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != MIN_64x64);\\n      return -x;\\n    }\\n  }\\n\\n  /**\\n   * Calculate |x|.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function abs (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != MIN_64x64);\\n      return x < 0 ? -x : x;\\n    }\\n  }\\n\\n  /**\\n   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function inv (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != 0);\\n      int256 result = int256 (0x100000000000000000000000000000000) / x;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function avg (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      return int128 ((int256 (x) + int256 (y)) >> 1);\\n    }\\n  }\\n\\n  /**\\n   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\n   * Revert on overflow or in case x * y is negative.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function gavg (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 m = int256 (x) * int256 (y);\\n      require (m >= 0);\\n      require (m <\\n          0x4000000000000000000000000000000000000000000000000000000000000000);\\n      return int128 (sqrtu (uint256 (m)));\\n    }\\n  }\\n\\n  /**\\n   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y uint256 value\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function pow (int128 x, uint256 y) internal pure returns (int128) {\\n    unchecked {\\n      bool negative = x < 0 && y & 1 == 1;\\n\\n      uint256 absX = uint128 (x < 0 ? -x : x);\\n      uint256 absResult;\\n      absResult = 0x100000000000000000000000000000000;\\n\\n      if (absX <= 0x10000000000000000) {\\n        absX <<= 63;\\n        while (y != 0) {\\n          if (y & 0x1 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x2 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x4 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x8 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          y >>= 4;\\n        }\\n\\n        absResult >>= 64;\\n      } else {\\n        uint256 absXShift = 63;\\n        if (absX < 0x1000000000000000000000000) { absX <<= 32; absXShift -= 32; }\\n        if (absX < 0x10000000000000000000000000000) { absX <<= 16; absXShift -= 16; }\\n        if (absX < 0x1000000000000000000000000000000) { absX <<= 8; absXShift -= 8; }\\n        if (absX < 0x10000000000000000000000000000000) { absX <<= 4; absXShift -= 4; }\\n        if (absX < 0x40000000000000000000000000000000) { absX <<= 2; absXShift -= 2; }\\n        if (absX < 0x80000000000000000000000000000000) { absX <<= 1; absXShift -= 1; }\\n\\n        uint256 resultShift = 0;\\n        while (y != 0) {\\n          require (absXShift < 64);\\n\\n          if (y & 0x1 != 0) {\\n            absResult = absResult * absX >> 127;\\n            resultShift += absXShift;\\n            if (absResult > 0x100000000000000000000000000000000) {\\n              absResult >>= 1;\\n              resultShift += 1;\\n            }\\n          }\\n          absX = absX * absX >> 127;\\n          absXShift <<= 1;\\n          if (absX >= 0x100000000000000000000000000000000) {\\n              absX >>= 1;\\n              absXShift += 1;\\n          }\\n\\n          y >>= 1;\\n        }\\n\\n        require (resultShift < 64);\\n        absResult >>= 64 - resultShift;\\n      }\\n      int256 result = negative ? -int256 (absResult) : int256 (absResult);\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate sqrt (x) rounding down.  Revert if x < 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function sqrt (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x >= 0);\\n      return int128 (sqrtu (uint256 (int256 (x)) << 64));\\n    }\\n  }\\n\\n  /**\\n   * Calculate binary logarithm of x.  Revert if x <= 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function log_2 (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x > 0);\\n\\n      int256 msb = 0;\\n      int256 xc = x;\\n      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n      int256 result = msb - 64 << 64;\\n      uint256 ux = uint256 (int256 (x)) << uint256 (127 - msb);\\n      for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n        ux *= ux;\\n        uint256 b = ux >> 255;\\n        ux >>= 127 + b;\\n        result += bit * int256 (b);\\n      }\\n\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate natural logarithm of x.  Revert if x <= 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function ln (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x > 0);\\n\\n      return int128 (int256 (\\n          uint256 (int256 (log_2 (x))) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128));\\n    }\\n  }\\n\\n  /**\\n   * Calculate binary exponent of x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function exp_2 (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x < 0x400000000000000000); // Overflow\\n\\n      if (x < -0x400000000000000000) return 0; // Underflow\\n\\n      uint256 result = 0x80000000000000000000000000000000;\\n\\n      if (x & 0x8000000000000000 > 0)\\n        result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\n      if (x & 0x4000000000000000 > 0)\\n        result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\n      if (x & 0x2000000000000000 > 0)\\n        result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\n      if (x & 0x1000000000000000 > 0)\\n        result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\n      if (x & 0x800000000000000 > 0)\\n        result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\n      if (x & 0x400000000000000 > 0)\\n        result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\n      if (x & 0x200000000000000 > 0)\\n        result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\n      if (x & 0x100000000000000 > 0)\\n        result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\n      if (x & 0x80000000000000 > 0)\\n        result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\n      if (x & 0x40000000000000 > 0)\\n        result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\n      if (x & 0x20000000000000 > 0)\\n        result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\n      if (x & 0x10000000000000 > 0)\\n        result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\n      if (x & 0x8000000000000 > 0)\\n        result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\n      if (x & 0x4000000000000 > 0)\\n        result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\n      if (x & 0x2000000000000 > 0)\\n        result = result * 0x1000162E525EE054754457D5995292026 >> 128;\\n      if (x & 0x1000000000000 > 0)\\n        result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\n      if (x & 0x800000000000 > 0)\\n        result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\n      if (x & 0x400000000000 > 0)\\n        result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\n      if (x & 0x200000000000 > 0)\\n        result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\n      if (x & 0x100000000000 > 0)\\n        result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\n      if (x & 0x80000000000 > 0)\\n        result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\n      if (x & 0x40000000000 > 0)\\n        result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\n      if (x & 0x20000000000 > 0)\\n        result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\n      if (x & 0x10000000000 > 0)\\n        result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\n      if (x & 0x8000000000 > 0)\\n        result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\n      if (x & 0x4000000000 > 0)\\n        result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\n      if (x & 0x2000000000 > 0)\\n        result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\n      if (x & 0x1000000000 > 0)\\n        result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\n      if (x & 0x800000000 > 0)\\n        result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\n      if (x & 0x400000000 > 0)\\n        result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\n      if (x & 0x200000000 > 0)\\n        result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\n      if (x & 0x100000000 > 0)\\n        result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\n      if (x & 0x80000000 > 0)\\n        result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\n      if (x & 0x40000000 > 0)\\n        result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\n      if (x & 0x20000000 > 0)\\n        result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\n      if (x & 0x10000000 > 0)\\n        result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\n      if (x & 0x8000000 > 0)\\n        result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\n      if (x & 0x4000000 > 0)\\n        result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\n      if (x & 0x2000000 > 0)\\n        result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\n      if (x & 0x1000000 > 0)\\n        result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\n      if (x & 0x800000 > 0)\\n        result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\n      if (x & 0x400000 > 0)\\n        result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\\n      if (x & 0x200000 > 0)\\n        result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\\n      if (x & 0x100000 > 0)\\n        result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\\n      if (x & 0x80000 > 0)\\n        result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\n      if (x & 0x40000 > 0)\\n        result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\n      if (x & 0x20000 > 0)\\n        result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\n      if (x & 0x10000 > 0)\\n        result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\n      if (x & 0x8000 > 0)\\n        result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\n      if (x & 0x4000 > 0)\\n        result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\n      if (x & 0x2000 > 0)\\n        result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\\n      if (x & 0x1000 > 0)\\n        result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\n      if (x & 0x800 > 0)\\n        result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\n      if (x & 0x400 > 0)\\n        result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\\n      if (x & 0x200 > 0)\\n        result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\n      if (x & 0x100 > 0)\\n        result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\\n      if (x & 0x80 > 0)\\n        result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\n      if (x & 0x40 > 0)\\n        result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\n      if (x & 0x20 > 0)\\n        result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\\n      if (x & 0x10 > 0)\\n        result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\n      if (x & 0x8 > 0)\\n        result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\n      if (x & 0x4 > 0)\\n        result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\n      if (x & 0x2 > 0)\\n        result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\\n      if (x & 0x1 > 0)\\n        result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\\n\\n      result >>= uint256 (int256 (63 - (x >> 64)));\\n      require (result <= uint256 (int256 (MAX_64x64)));\\n\\n      return int128 (int256 (result));\\n    }\\n  }\\n\\n  /**\\n   * Calculate natural exponent of x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function exp (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x < 0x400000000000000000); // Overflow\\n\\n      if (x < -0x400000000000000000) return 0; // Underflow\\n\\n      return exp_2 (\\n          int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @param y unsigned 256-bit integer number\\n   * @return unsigned 64.64-bit fixed point number\\n   */\\n  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\\n    unchecked {\\n      require (y != 0);\\n\\n      uint256 result;\\n\\n      if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n        result = (x << 64) / y;\\n      else {\\n        uint256 msb = 192;\\n        uint256 xc = x >> 192;\\n        if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n        if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n        if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n        if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n        if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n        if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n        result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\\n        require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n        uint256 hi = result * (y >> 128);\\n        uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n        uint256 xh = x >> 192;\\n        uint256 xl = x << 64;\\n\\n        if (xl < lo) xh -= 1;\\n        xl -= lo; // We rely on overflow behavior here\\n        lo = hi << 128;\\n        if (xl < lo) xh -= 1;\\n        xl -= lo; // We rely on overflow behavior here\\n\\n        assert (xh == hi >> 128);\\n\\n        result += xl / y;\\n      }\\n\\n      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n      return uint128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\n   * number.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return unsigned 128-bit integer number\\n   */\\n  function sqrtu (uint256 x) private pure returns (uint128) {\\n    unchecked {\\n      if (x == 0) return 0;\\n      else {\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\\n        if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\\n        if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\\n        if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\\n        if (xx >= 0x100) { xx >>= 8; r <<= 4; }\\n        if (xx >= 0x10) { xx >>= 4; r <<= 2; }\\n        if (xx >= 0x8) { r <<= 1; }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return uint128 (r < r1 ? r : r1);\\n      }\\n    }\\n  }\\n}\"\r\n    },\r\n    \"contracts/util/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\"\r\n    },\r\n    \"contracts/util/Roots.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.6;\\n\\nlibrary Roots {\\n\\n// calculates a^(1/n) to dp decimal places\\n    // maxIts bounds the number of iterations performed\\n    function nthRoot(uint _a, uint _n, uint _dp, uint _maxIts) pure internal returns(uint) {\\n        assert (_n > 1);\\n\\n        // The scale factor is a crude way to turn everything into integer calcs.\\n        // Actually do (a * (10 ^ ((dp + 1) * n))) ^ (1/n)\\n        // We calculate to one extra dp and round at the end\\n        uint one = 10 ** (1 + _dp);\\n        uint a0 = one ** _n * _a;\\n\\n        // Initial guess: 1.0\\n        uint xNew = one;\\n\\n        uint iter = 0;\\n        while (iter < _maxIts) {\\n            uint x = xNew;\\n            uint t0 = x ** (_n - 1);\\n            if (x * t0 > a0) {\\n                xNew = x - (x - a0 / t0) / _n;\\n            } else {\\n                xNew = x + (a0 / t0 - x) / _n;\\n            }\\n            ++iter;\\n            if(xNew == x) {\\n                break;\\n            }\\n        }\\n\\n        // Round to nearest in the last dp.\\n        return (xNew + 5) / 10;\\n    }\\n}\"\r\n    },\r\n    \"contracts/util/Strings.sol\": {\r\n      \"content\": \"/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"omnibus_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"metadataGenerator_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pak_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"alphaMass\",\"type\":\"uint256\"}],\"name\":\"AlphaMassUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenIdBurned\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenIdPersist\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mass\",\"type\":\"uint256\"}],\"name\":\"MassUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_alphaId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_alphaMass\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_countMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_countToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dead\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_massTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_metadataGenerator\",\"outputs\":[{\"internalType\":\"contract IMergeMetadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mintingFinalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_omnibus\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pak\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_percentageRoyalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_percentageTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_receiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"decodeClass\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"decodeClassAndMass\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"decodeMass\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"class\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mass\",\"type\":\"uint256\"}],\"name\":\"encodeClassAndMass\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getMergeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mergeCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getValueOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"massOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIdRcvr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdSndr\",\"type\":\"uint256\"}],\"name\":\"merge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIdDead\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"values_\",\"type\":\"uint256[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setBlacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metadataGenerator_\",\"type\":\"address\"}],\"name\":\"setMetadataGenerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pak_\",\"type\":\"address\"}],\"name\":\"setPak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentageRoyalty_\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyBips\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"}],\"name\":\"setRoyaltyReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokenOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"whitelistUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Merge", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "0000000000000000000000006e53130ddff21e3bc963ee902005223b9a202106000000000000000000000000e052113bd7d7700d623414a0a4585bcae754e9d50000000000000000000000004e1e18aaccdf9acfd2e8847654a3871dfd234f020000000000000000000000002ce780d7c743a57791b835a9d6f998b15bbba5a4", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}