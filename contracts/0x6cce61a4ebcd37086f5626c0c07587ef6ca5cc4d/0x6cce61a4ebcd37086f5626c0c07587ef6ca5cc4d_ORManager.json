{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IORManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {BridgeLib} from \\\"../library/BridgeLib.sol\\\";\\n\\ninterface IORManager {\\n    event ChainInfoUpdated(uint64 indexed id, BridgeLib.ChainInfo chainInfo);\\n    event ChainTokenUpdated(uint64 indexed id, BridgeLib.TokenInfo tokenInfo);\\n    event EbcsUpdated(address[] ebcs, bool[] statuses);\\n    event SubmitterFeeUpdated(address submitter);\\n    event ProtocolFeeUpdated(uint64 protocolFee);\\n    event MinChallengeRatioUpdated(uint64 minChallengeRatio);\\n    event ChallengeUserRatioUpdated(uint64 challengeUserRatio);\\n    event FeeChallengeSecondUpdated(uint64 feeChallengeSecond);\\n    event FeeTakeOnChallengeSecondUpdated(uint64 feeTakeOnChallengeSecond);\\n    event MaxMDCLimitUpdated(uint64 maxMDCLimit);\\n    event ExtraTransferContractsUpdated(uint64[] chainIds, uint[] extraTransferContracts);\\n\\n    function registerChains(uint64 enableTime, BridgeLib.ChainInfo[] calldata chains_) external;\\n\\n    function updateChainSpvs(uint64 enableTime, uint64 id, address[] calldata spvs, uint[] calldata indexs) external;\\n\\n    function getChainInfo(uint64 id) external view returns (BridgeLib.ChainInfo memory);\\n\\n    function updateChainTokens(\\n        uint64 enableTime,\\n        uint64[] memory ids,\\n        BridgeLib.TokenInfo[] calldata tokenInfos\\n    ) external;\\n\\n    function getChainTokenInfo(uint64 id, uint token) external view returns (BridgeLib.TokenInfo memory);\\n\\n    function ebcIncludes(address ebc) external view returns (bool);\\n\\n    function updateEbcs(address[] calldata ebcs_, bool[] calldata statuses) external;\\n\\n    function submitter() external view returns (address);\\n\\n    function updateSubmitter(uint64 enableTime, address submitter_) external;\\n\\n    function protocolFee() external view returns (uint64);\\n\\n    function updateProtocolFee(uint64 enableTime, uint64 protocolFee_) external;\\n\\n    function minChallengeRatio() external view returns (uint64);\\n\\n    function updateMinChallengeRatio(uint64 enableTime, uint64 minChallengeRatio_) external;\\n\\n    function challengeUserRatio() external view returns (uint64);\\n\\n    function updateChallengeUserRatio(uint64 enableTime, uint64 challengeUserRatio_) external;\\n\\n    function feeChallengeSecond() external view returns (uint64);\\n\\n    function updateFeeChallengeSecond(uint64 enableTime, uint64 feeChallengeSecond_) external;\\n\\n    function feeTakeOnChallengeSecond() external view returns (uint64);\\n\\n    function updateFeeTakeOnChallengeSecond(uint64 enableTime, uint64 feeTakeOnChallengeSecond_) external;\\n\\n    function maxMDCLimit() external view returns (uint64);\\n\\n    function updateMaxMDCLimit(uint64 maxMDCLimit_) external;\\n\\n    function getExtraTransferContract(uint64 chainId) external view returns (uint);\\n\\n    function updateExtraTransferContracts(\\n        uint64 enableTime,\\n        uint64[] calldata chainIds,\\n        uint[] calldata extraTransferContracts\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/library/BridgeLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nlibrary BridgeLib {\\n    struct TokenInfo {\\n        uint token; // uint160(address) will overflow in the token used for starknet\\n        address mainnetToken;\\n        uint8 decimals;\\n    }\\n\\n    struct ChainInfo {\\n        uint64 id;\\n        uint192 batchLimit;\\n        uint64 minVerifyChallengeSourceTxSecond;\\n        uint64 maxVerifyChallengeSourceTxSecond;\\n        uint64 minVerifyChallengeDestTxSecond;\\n        uint64 maxVerifyChallengeDestTxSecond;\\n        uint nativeToken;\\n        address[] spvs;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/library/ConstantsLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nlibrary ConstantsLib {\\n    uint constant RATIO_MULTIPLE = 1000000;\\n\\n    uint constant MIN_ENABLE_DELAY = 120; // Unit: second\\n\\n    uint constant DEALER_WITHDRAW_DELAY = 3600; // Unit: second\\n\\n    uint constant WITHDRAW_DURATION = 3360; // Unit: second\\n\\n    uint constant LOCK_DURATION = 240; // Unit: second\\n    // uint constant DEALER_WITHDRAW_DELAY = 30; // Unit: second for test off-chain\\n\\n    // uint constant WITHDRAW_DURATION = 300; // Unit: second for test off-chain\\n\\n    // uint constant LOCK_DURATION = 180; // Unit: second for test off-chain\\n\\n    uint constant EBC_AMOUNT_PARAMS_MODULUS = 10000;\\n}\\n\"\r\n    },\r\n    \"contracts/library/HelperLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nlibrary HelperLib {\\n    function hash(bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(data);\\n    }\\n\\n    function includes(uint[] memory arr, uint element) internal pure returns (bool) {\\n        for (uint i = 0; i < arr.length; ) {\\n            if (element == arr[i]) {\\n                return true;\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function arrayIncludes(uint[] memory arr, uint[] memory elements) internal pure returns (bool) {\\n        for (uint i = 0; i < elements.length; i++) {\\n            bool ic = false;\\n            for (uint j = 0; j < arr.length; ) {\\n                if (elements[i] == arr[j]) {\\n                    ic = true;\\n                    break;\\n                }\\n                unchecked {\\n                    j++;\\n                }\\n            }\\n\\n            if (!ic) return false;\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function includes(address[] memory arr, address element) internal pure returns (bool) {\\n        for (uint i = 0; i < arr.length; ) {\\n            if (element == arr[i]) {\\n                return true;\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function arrayIncludes(address[] memory arr, address[] memory elements) internal pure returns (bool) {\\n        for (uint i = 0; i < elements.length; i++) {\\n            bool ic = false;\\n            for (uint j = 0; j < arr.length; ) {\\n                if (elements[i] == arr[j]) {\\n                    ic = true;\\n                    break;\\n                }\\n                unchecked {\\n                    j++;\\n                }\\n            }\\n\\n            if (!ic) return false;\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ORManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interface/IORManager.sol\\\";\\nimport {VersionAndEnableTime} from \\\"./VersionAndEnableTime.sol\\\";\\nimport {HelperLib} from \\\"./library/HelperLib.sol\\\";\\n\\ncontract ORManager is IORManager, Ownable, VersionAndEnableTime {\\n    using HelperLib for bytes;\\n\\n    // Ownable._owner use a slot\\n    // VersionAndEnableTime._version and _enableTime use a slot\\n\\n    // Warning: the following order and type changes will cause state verification changes\\n    mapping(uint64 => BridgeLib.ChainInfo) private _chains;\\n    mapping(bytes32 => BridgeLib.TokenInfo) private _chainTokens; // hash(chainId, token) => TokenInfo\\n    mapping(address => bool) private _ebcs;\\n    address private _submitter;\\n    uint64 private _protocolFee;\\n    uint64 private _minChallengeRatio = 20000; // 10,000 percent\\n    uint64 private _challengeUserRatio; // 10,000 percent\\n    uint64 private _feeChallengeSecond;\\n    uint64 private _feeTakeOnChallengeSecond;\\n    uint64 private _maxMDCLimit = 2 ** 64 - 1;\\n    mapping(uint64 => uint) private _extraTransferContracts; // Cross-address transfer contracts. chainId => contractAddress\\n\\n    constructor(address owner_) {\\n        require(owner_ != address(0), \\\"OZ\\\");\\n        _transferOwnership(owner_);\\n    }\\n\\n    // TODO: setting the same chainId or token affect the protocol?\\n    function registerChains(uint64 enableTime, BridgeLib.ChainInfo[] calldata chains_) external onlyOwner {\\n        versionIncreaseAndEnableTime(enableTime);\\n\\n        unchecked {\\n            for (uint i = 0; i < chains_.length; i++) {\\n                // TODO: There may be some settings that need to restrict modification\\n\\n                // TODO: ORMakerDeposit.checkChallenge use maxVerifyChallengeSourceTxSecond, maxVerifyChallengeSourceTxSecond cannot be modified.\\n                //       Or make some adjustments when using\\n\\n                _chains[chains_[i].id] = chains_[i];\\n                emit ChainInfoUpdated(chains_[i].id, chains_[i]);\\n            }\\n        }\\n    }\\n\\n    function updateChainSpvs(\\n        uint64 enableTime,\\n        uint64 id,\\n        address[] calldata spvs,\\n        uint[] calldata indexs\\n    ) external onlyOwner {\\n        versionIncreaseAndEnableTime(enableTime);\\n\\n        unchecked {\\n            for (uint i = 0; i < spvs.length; i++) {\\n                if (i < indexs.length) {\\n                    _chains[id].spvs[indexs[i]] = spvs[i];\\n                } else {\\n                    _chains[id].spvs.push(spvs[i]);\\n                }\\n            }\\n        }\\n        emit ChainInfoUpdated(id, _chains[id]);\\n    }\\n\\n    function getChainInfo(uint64 id) external view returns (BridgeLib.ChainInfo memory) {\\n        return _chains[id];\\n    }\\n\\n    function updateChainTokens(\\n        uint64 enableTime,\\n        uint64[] calldata ids,\\n        BridgeLib.TokenInfo[] calldata tokenInfos\\n    ) external onlyOwner {\\n        versionIncreaseAndEnableTime(enableTime);\\n\\n        unchecked {\\n            for (uint i = 0; i < ids.length; i++) {\\n                // TODO: If the token of layer2 changes, how should it be handled here?\\n                bytes32 key = abi.encodePacked(ids[i], tokenInfos[i].token).hash();\\n                _chainTokens[key] = tokenInfos[i];\\n                emit ChainTokenUpdated(ids[i], tokenInfos[i]);\\n            }\\n        }\\n    }\\n\\n    function getChainTokenInfo(uint64 id, uint token) external view returns (BridgeLib.TokenInfo memory) {\\n        bytes32 key = abi.encodePacked(id, token).hash();\\n        return _chainTokens[key];\\n    }\\n\\n    function ebcIncludes(address ebc) external view returns (bool) {\\n        return _ebcs[ebc];\\n    }\\n\\n    function updateEbcs(address[] calldata ebcs_, bool[] calldata statuses) external onlyOwner {\\n        unchecked {\\n            for (uint i = 0; i < ebcs_.length; i++) {\\n                if (i < statuses.length) {\\n                    _ebcs[ebcs_[i]] = statuses[i];\\n                } else {\\n                    _ebcs[ebcs_[i]] = true;\\n                }\\n            }\\n        }\\n        emit EbcsUpdated(ebcs_, statuses);\\n    }\\n\\n    function submitter() external view returns (address) {\\n        return _submitter;\\n    }\\n\\n    function updateSubmitter(uint64 enableTime, address submitter_) external onlyOwner {\\n        versionIncreaseAndEnableTime(enableTime);\\n\\n        _submitter = submitter_;\\n        emit SubmitterFeeUpdated(_submitter);\\n    }\\n\\n    function protocolFee() external view returns (uint64) {\\n        return _protocolFee;\\n    }\\n\\n    function updateProtocolFee(uint64 enableTime, uint64 protocolFee_) external onlyOwner {\\n        versionIncreaseAndEnableTime(enableTime);\\n\\n        _protocolFee = protocolFee_;\\n        emit ProtocolFeeUpdated(_protocolFee);\\n    }\\n\\n    function minChallengeRatio() external view returns (uint64) {\\n        return _minChallengeRatio;\\n    }\\n\\n    function updateMinChallengeRatio(uint64 enableTime, uint64 minChallengeRatio_) external onlyOwner {\\n        versionIncreaseAndEnableTime(enableTime);\\n\\n        _minChallengeRatio = minChallengeRatio_;\\n        emit MinChallengeRatioUpdated(_minChallengeRatio);\\n    }\\n\\n    function challengeUserRatio() external view returns (uint64) {\\n        return _challengeUserRatio;\\n    }\\n\\n    function updateChallengeUserRatio(uint64 enableTime, uint64 challengeUserRatio_) external onlyOwner {\\n        versionIncreaseAndEnableTime(enableTime);\\n\\n        _challengeUserRatio = challengeUserRatio_;\\n        emit ChallengeUserRatioUpdated(_challengeUserRatio);\\n    }\\n\\n    function feeChallengeSecond() external view returns (uint64) {\\n        return _feeChallengeSecond;\\n    }\\n\\n    function updateFeeChallengeSecond(uint64 enableTime, uint64 feeChallengeSecond_) external onlyOwner {\\n        versionIncreaseAndEnableTime(enableTime);\\n\\n        _feeChallengeSecond = feeChallengeSecond_;\\n        emit FeeChallengeSecondUpdated(_feeChallengeSecond);\\n    }\\n\\n    function feeTakeOnChallengeSecond() external view returns (uint64) {\\n        return _feeTakeOnChallengeSecond;\\n    }\\n\\n    function updateFeeTakeOnChallengeSecond(uint64 enableTime, uint64 feeTakeOnChallengeSecond_) external onlyOwner {\\n        versionIncreaseAndEnableTime(enableTime);\\n\\n        _feeTakeOnChallengeSecond = feeTakeOnChallengeSecond_;\\n        emit FeeTakeOnChallengeSecondUpdated(_feeTakeOnChallengeSecond);\\n    }\\n\\n    function maxMDCLimit() external view returns (uint64) {\\n        return _maxMDCLimit;\\n    }\\n\\n    function updateMaxMDCLimit(uint64 maxMDCLimit_) external onlyOwner {\\n        _maxMDCLimit = maxMDCLimit_;\\n        emit MaxMDCLimitUpdated(_maxMDCLimit);\\n    }\\n\\n    function getExtraTransferContract(uint64 chainId) external view returns (uint) {\\n        return _extraTransferContracts[chainId];\\n    }\\n\\n    function updateExtraTransferContracts(\\n        uint64 enableTime,\\n        uint64[] calldata chainIds,\\n        uint[] calldata extraTransferContracts\\n    ) external onlyOwner {\\n        versionIncreaseAndEnableTime(enableTime);\\n\\n        require(chainIds.length == extraTransferContracts.length, \\\"CEOF\\\");\\n\\n        for (uint i = 0; i < chainIds.length; i++) {\\n            _extraTransferContracts[chainIds[i]] = extraTransferContracts[i];\\n        }\\n        emit ExtraTransferContractsUpdated(chainIds, extraTransferContracts);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/VersionAndEnableTime.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {ConstantsLib} from \\\"./library/ConstantsLib.sol\\\";\\n\\ncontract VersionAndEnableTime {\\n    uint192 private _version;\\n    uint64 private _enableTime;\\n\\n    // TODO: modify requires more gas\\n    // modifier versionIncreaseAndEnableTime(uint64 enableTime) {\\n    //     require(enableTime - block.timestamp >= ConstantsLib.MIN_ENABLE_DELAY, \\\"OFET\\\");\\n\\n    //     _;\\n    //     _version += 1;\\n\\n    //     _enableTime = enableTime;\\n    // }\\n\\n    function versionIncreaseAndEnableTime(uint64 enableTime) public {\\n        require(enableTime - block.timestamp >= ConstantsLib.MIN_ENABLE_DELAY, \\\"OFET\\\");\\n\\n        _version += 1;\\n        _enableTime = enableTime;\\n    }\\n\\n    function getVersionAndEnableTime() external view returns (uint192 version, uint64 enableTime) {\\n        return (_version, _enableTime);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"},{\"internalType\":\"uint192\",\"name\":\"batchLimit\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"minVerifyChallengeSourceTxSecond\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxVerifyChallengeSourceTxSecond\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"minVerifyChallengeDestTxSecond\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxVerifyChallengeDestTxSecond\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"nativeToken\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"spvs\",\"type\":\"address[]\"}],\"indexed\":false,\"internalType\":\"struct BridgeLib.ChainInfo\",\"name\":\"chainInfo\",\"type\":\"tuple\"}],\"name\":\"ChainInfoUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"mainnetToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct BridgeLib.TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"}],\"name\":\"ChainTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"challengeUserRatio\",\"type\":\"uint64\"}],\"name\":\"ChallengeUserRatioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"ebcs\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"statuses\",\"type\":\"bool[]\"}],\"name\":\"EbcsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"chainIds\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"extraTransferContracts\",\"type\":\"uint256[]\"}],\"name\":\"ExtraTransferContractsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"feeChallengeSecond\",\"type\":\"uint64\"}],\"name\":\"FeeChallengeSecondUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"feeTakeOnChallengeSecond\",\"type\":\"uint64\"}],\"name\":\"FeeTakeOnChallengeSecondUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"maxMDCLimit\",\"type\":\"uint64\"}],\"name\":\"MaxMDCLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"minChallengeRatio\",\"type\":\"uint64\"}],\"name\":\"MinChallengeRatioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"protocolFee\",\"type\":\"uint64\"}],\"name\":\"ProtocolFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"}],\"name\":\"SubmitterFeeUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"challengeUserRatio\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ebc\",\"type\":\"address\"}],\"name\":\"ebcIncludes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeChallengeSecond\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTakeOnChallengeSecond\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"}],\"name\":\"getChainInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"},{\"internalType\":\"uint192\",\"name\":\"batchLimit\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"minVerifyChallengeSourceTxSecond\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxVerifyChallengeSourceTxSecond\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"minVerifyChallengeDestTxSecond\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxVerifyChallengeDestTxSecond\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"nativeToken\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"spvs\",\"type\":\"address[]\"}],\"internalType\":\"struct BridgeLib.ChainInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"getChainTokenInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"mainnetToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct BridgeLib.TokenInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"}],\"name\":\"getExtraTransferContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersionAndEnableTime\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"version\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"enableTime\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMDCLimit\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minChallengeRatio\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"enableTime\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"},{\"internalType\":\"uint192\",\"name\":\"batchLimit\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"minVerifyChallengeSourceTxSecond\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxVerifyChallengeSourceTxSecond\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"minVerifyChallengeDestTxSecond\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxVerifyChallengeDestTxSecond\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"nativeToken\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"spvs\",\"type\":\"address[]\"}],\"internalType\":\"struct BridgeLib.ChainInfo[]\",\"name\":\"chains_\",\"type\":\"tuple[]\"}],\"name\":\"registerChains\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"submitter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"enableTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"spvs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"indexs\",\"type\":\"uint256[]\"}],\"name\":\"updateChainSpvs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"enableTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64[]\",\"name\":\"ids\",\"type\":\"uint64[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"mainnetToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct BridgeLib.TokenInfo[]\",\"name\":\"tokenInfos\",\"type\":\"tuple[]\"}],\"name\":\"updateChainTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"enableTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"challengeUserRatio_\",\"type\":\"uint64\"}],\"name\":\"updateChallengeUserRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"ebcs_\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"statuses\",\"type\":\"bool[]\"}],\"name\":\"updateEbcs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"enableTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64[]\",\"name\":\"chainIds\",\"type\":\"uint64[]\"},{\"internalType\":\"uint256[]\",\"name\":\"extraTransferContracts\",\"type\":\"uint256[]\"}],\"name\":\"updateExtraTransferContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"enableTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"feeChallengeSecond_\",\"type\":\"uint64\"}],\"name\":\"updateFeeChallengeSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"enableTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"feeTakeOnChallengeSecond_\",\"type\":\"uint64\"}],\"name\":\"updateFeeTakeOnChallengeSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"maxMDCLimit_\",\"type\":\"uint64\"}],\"name\":\"updateMaxMDCLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"enableTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"minChallengeRatio_\",\"type\":\"uint64\"}],\"name\":\"updateMinChallengeRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"enableTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"protocolFee_\",\"type\":\"uint64\"}],\"name\":\"updateProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"enableTime\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"submitter_\",\"type\":\"address\"}],\"name\":\"updateSubmitter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"enableTime\",\"type\":\"uint64\"}],\"name\":\"versionIncreaseAndEnableTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ORManager", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "10", "ConstructorArguments": "0000000000000000000000008a700fdb6121a57c59736041d9aa21dfd8820660", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}