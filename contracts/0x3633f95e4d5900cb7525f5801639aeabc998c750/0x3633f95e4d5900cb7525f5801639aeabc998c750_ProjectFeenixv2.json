{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n//taking over the Esports scene!!!\r\n//@devs Fid and Hamp\r\n//remake of first contract cuz of code failure\r\n//projectfeenix.games \r\n//https://t.me/projectfeenix \r\n//all the links http://linktr.ee/projectfeenix\r\npragma solidity ^0.6.12;\r\n    abstract contract Context {\r\n        function _msgSender() internal view virtual returns (address payable) {\r\n            return msg.sender;\r\n        }\r\n        function _msgData() internal view virtual returns (bytes memory) {\r\n            this;\r\n             msg.data;\r\n        }\r\n    }\r\n    interface IERC20 {\r\n        function totalSupply() external view returns (uint256);\r\n        function balanceOf(address account) external view returns (uint256);\r\n        function transfer(address recipient, uint256 amount) external returns (bool);\r\n        function allowance(address owner, address spender) external view returns (uint256);\r\n        function approve(address spender, uint256 amount) external returns (bool);\r\n        function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n        event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    }\r\n\r\n    //safemath is copied cuz why reinvent the wheel:) omegalul\r\n    library SafeMath {\r\n        /**\r\n        * @dev Returns the addition of two unsigned integers, reverting on\r\n        * overflow.\r\n        *\r\n        * Counterpart to Solidity's `+` operator.\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - Addition cannot overflow.\r\n        */\r\n        function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            uint256 c = a + b;\r\n            require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n            return c;\r\n        }\r\n\r\n        /**\r\n        * @dev Returns the subtraction of two unsigned integers, reverting on\r\n        * overflow (when the result is negative).\r\n        *\r\n        * Counterpart to Solidity's `-` operator.\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - Subtraction cannot overflow.\r\n        */\r\n        function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            return sub(a, b, \"SafeMath: subtraction overflow\");\r\n        }\r\n\r\n        /**\r\n        * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n        * overflow (when the result is negative).\r\n        *\r\n        * Counterpart to Solidity's `-` operator.\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - Subtraction cannot overflow.\r\n        */\r\n        function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n            require(b <= a, errorMessage);\r\n            uint256 c = a - b;\r\n\r\n            return c;\r\n        }\r\n\r\n        /**\r\n        * @dev Returns the multiplication of two unsigned integers, reverting on\r\n        * overflow.\r\n        *\r\n        * Counterpart to Solidity's `*` operator.\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - Multiplication cannot overflow.\r\n        */\r\n        function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) {\r\n                return 0;\r\n            }\r\n\r\n            uint256 c = a * b;\r\n            require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n            return c;\r\n        }\r\n\r\n        /**\r\n        * @dev Returns the integer division of two unsigned integers. Reverts on\r\n        * division by zero. The result is rounded towards zero.\r\n        *\r\n        * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n        * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n        * uses an invalid opcode to revert (consuming all remaining gas).\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - The divisor cannot be zero.\r\n        */\r\n        function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            return div(a, b, \"SafeMath: division by zero\");\r\n        }\r\n\r\n        /**\r\n        * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n        * division by zero. The result is rounded towards zero.\r\n        *\r\n        * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n        * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n        * uses an invalid opcode to revert (consuming all remaining gas).\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - The divisor cannot be zero.\r\n        */\r\n        function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n            require(b > 0, errorMessage);\r\n            uint256 c = a / b;\r\n            // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n            return c;\r\n        }\r\n\r\n        /**\r\n        * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n        * Reverts when dividing by zero.\r\n        *\r\n        * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n        * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n        * invalid opcode to revert (consuming all remaining gas).\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - The divisor cannot be zero.\r\n        */\r\n        function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            return mod(a, b, \"SafeMath: modulo by zero\");\r\n        }\r\n\r\n        /**\r\n        * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n        * Reverts with custom message when dividing by zero.\r\n        *\r\n        * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n        * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n        * invalid opcode to revert (consuming all remaining gas).\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - The divisor cannot be zero.\r\n        */\r\n        function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n            require(b != 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n    //same with lib\r\n    library Address {\r\n        function isContract(address account) internal view returns (bool) {\r\n            bytes32 codehash;\r\n            bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n            assembly { codehash := extcodehash(account) }\r\n            return (codehash != accountHash && codehash != 0x0);\r\n        }\r\n        function sendValue(address payable recipient, uint256 amount) internal {\r\n            require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n            (bool success, ) = recipient.call{ value: amount }(\"\");\r\n            require(success, \"Address: unable to send value, recipient may have reverted\");\r\n        }\r\n        function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n        }\r\n        function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n            return _functionCallWithValue(target, data, 0, errorMessage);\r\n        }\r\n        function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n            return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n        }\r\n        function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n            require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n            return _functionCallWithValue(target, data, value, errorMessage);\r\n        }\r\n\r\n        function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n            require(isContract(target), \"Address: call to non-contract\");\r\n            (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n            if (success) {\r\n                return returndata;\r\n            } else {\r\n                if (returndata.length > 0) {\r\n                    assembly {\r\n                        let returndata_size := mload(returndata)\r\n                        revert(add(32, returndata), returndata_size)\r\n                    }\r\n                } else {\r\n                    revert(errorMessage);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    contract Ownable is Context {\r\n        address private _owner;\r\n        address private _previousOwner;\r\n\r\n        event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n        constructor () internal {\r\n            address msgSender = _msgSender();\r\n            _owner = msgSender;\r\n            emit OwnershipTransferred(address(0), msgSender);\r\n        }\r\n        function owner() public view returns (address) {\r\n            return _owner;\r\n        }\r\n        modifier onlyOwner() {\r\n            require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n            _;\r\n        }\r\n        function renounceOwnership() public virtual onlyOwner {\r\n            emit OwnershipTransferred(_owner, address(0));\r\n            _owner = address(0);\r\n        }\r\n        function transferOwnership(address newOwner) public virtual onlyOwner {\r\n            require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n            emit OwnershipTransferred(_owner, newOwner);\r\n            _owner = newOwner;\r\n        }\r\n    }  \r\n\r\n    interface IUniswapV2Factory {\r\n        event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n        function feeTo() external view returns (address);\r\n        function feeToSetter() external view returns (address);\r\n        function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n        function allPairs(uint) external view returns (address pair);\r\n        function allPairsLength() external view returns (uint);\r\n        function createPair(address tokenA, address tokenB) external returns (address pair);\r\n        function setFeeTo(address) external;\r\n        function setFeeToSetter(address) external;\r\n    } \r\n    interface IUniswapV2Pair {\r\n        event Approval(address indexed owner, address indexed spender, uint value);\r\n        event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n        function name() external pure returns (string memory);\r\n        function symbol() external pure returns (string memory);\r\n        function decimals() external pure returns (uint8);\r\n        function totalSupply() external view returns (uint);\r\n        function balanceOf(address owner) external view returns (uint);\r\n        function allowance(address owner, address spender) external view returns (uint);\r\n        function approve(address spender, uint value) external returns (bool);\r\n        function transfer(address to, uint value) external returns (bool);\r\n        function transferFrom(address from, address to, uint value) external returns (bool);\r\n        function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n        function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n        function nonces(address owner) external view returns (uint);\r\n        function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n        event Swap(\r\n            address indexed sender,\r\n            uint amount0In,\r\n            uint amount1In,\r\n            uint amount0Out,\r\n            uint amount1Out,\r\n            address indexed to\r\n        );\r\n        event Sync(uint112 reserve0, uint112 reserve1);\r\n        function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n        function factory() external view returns (address);\r\n        function token0() external view returns (address);\r\n        function token1() external view returns (address);\r\n        function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n        function price0CumulativeLast() external view returns (uint);\r\n        function price1CumulativeLast() external view returns (uint);\r\n        function kLast() external view returns (uint);\r\n        function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n        function skim(address to) external;\r\n        function sync() external;\r\n        function initialize(address, address) external;\r\n    }\r\n\r\n    interface IUniswapV2Router01 {\r\n        function factory() external pure returns (address);\r\n        function WETH() external pure returns (address);\r\n\r\n        function addLiquidity(\r\n            address tokenA,\r\n            address tokenB,\r\n            uint amountADesired,\r\n            uint amountBDesired,\r\n            uint amountAMin,\r\n            uint amountBMin,\r\n            address to,\r\n            uint deadline\r\n        ) external returns (uint amountA, uint amountB, uint liquidity);\r\n        function addLiquidityETH(\r\n            address token,\r\n            uint amountTokenDesired,\r\n            uint amountTokenMin,\r\n            uint amountETHMin,\r\n            address to,\r\n            uint deadline\r\n        ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n        function swapExactTokensForTokens(\r\n            uint amountIn,\r\n            uint amountOutMin,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n        ) external returns (uint[] memory amounts);\r\n        function swapTokensForExactTokens(\r\n            uint amountOut,\r\n            uint amountInMax,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n        ) external returns (uint[] memory amounts);\r\n        function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n            external\r\n            payable\r\n            returns (uint[] memory amounts);\r\n        function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n            external\r\n            returns (uint[] memory amounts);\r\n        function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n            external\r\n            returns (uint[] memory amounts);\r\n        function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n            external\r\n            payable\r\n            returns (uint[] memory amounts);\r\n\r\n        function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n        function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n        function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n        function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n        function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n    }\r\n\r\n    interface IUniswapV2Router02 is IUniswapV2Router01 {\r\n        function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            uint amountIn,\r\n            uint amountOutMin,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n        ) external;\r\n        function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n            uint amountOutMin,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n        ) external payable;\r\n        function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            uint amountIn,\r\n            uint amountOutMin,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n        ) external;\r\n    }\r\n\r\n    // Contract Feenix starts\r\n    contract ProjectFeenixv2 is Context, IERC20, Ownable {\r\n\r\n        using SafeMath for uint256;\r\n        using Address for address;\r\n        //strings\r\n        string private _name = 'ProjectFeenixv2';\r\n        string private _symbol = 'FeenixV2';\r\n        uint8 private _decimals = 9;\r\n        uint256 private _taxFee = 2; \r\n        uint256 private _devFee = 5;\r\n        //tax fee\r\n        uint256 private _previousTaxFee = _taxFee;\r\n        uint256 private _previousdevFee = _devFee;\r\n        uint256 private constant MAX = ~uint256(0);\r\n        uint256 private _tTotal = 700000000000000e9;\r\n        uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n        uint256 private _tFeeTotal;\r\n        uint256 private _maxTxAmount = 5000000000000e9;\r\n        //mapping\r\n        mapping (address => uint256) private _rOwned;\r\n        mapping (address => uint256) private _tOwned;\r\n        mapping (address => mapping (address => uint256)) private _allowances;\r\n        mapping (address => bool) private _isExcludedFromFee;\r\n        mapping (address => bool) private _isExcluded;\r\n        address[] private _excluded;  \r\n        address payable public _developmentWalletAddress;\r\n\r\n        IUniswapV2Router02 public immutable uniswapV2Router;\r\n        address public immutable uniswapV2Pair;\r\n\r\n        bool inSwap = false;\r\n        bool public swapEnabled = true;\r\n\r\n        //minimum amount of tokens to be swaped => 1M\r\n        uint256 private _numOfTokensToExchangeFordevFee = 1 * 10**6 * 10**9;\r\n        event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n        event SwapEnabledUpdated(bool enabled);\r\n        modifier lockTheSwap {\r\n            inSwap = true;\r\n            _;\r\n            inSwap = false;\r\n        }\r\n        constructor (address payable developmentWalletAddress) public {\r\n            _developmentWalletAddress = developmentWalletAddress;\r\n            _rOwned[_msgSender()] = _rTotal;\r\n\r\n            IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); // UniswapV2 for Ethereum network\r\n            uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n                .createPair(address(this), _uniswapV2Router.WETH());\r\n            uniswapV2Router = _uniswapV2Router;\r\n            _isExcludedFromFee[owner()] = true;\r\n            _isExcludedFromFee[address(this)] = true;\r\n\r\n            emit Transfer(address(0), _msgSender(), _tTotal);\r\n        }\r\n        function name() public view returns (string memory) {\r\n            return _name;\r\n        }\r\n        function symbol() public view returns (string memory) {\r\n            return _symbol;\r\n        }\r\n        function decimals() public view returns (uint8) {\r\n            return _decimals;\r\n        }\r\n        function totalSupply() public view override returns (uint256) {\r\n            return _tTotal;\r\n        }\r\n        function balanceOf(address account) public view override returns (uint256) {\r\n            if (_isExcluded[account]) return _tOwned[account];\r\n            return tokenFromReflection(_rOwned[account]);\r\n        }\r\n        function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n            _transfer(_msgSender(), recipient, amount);\r\n            return true;\r\n        }\r\n        function allowance(address owner, address spender) public view override returns (uint256) {\r\n            return _allowances[owner][spender];\r\n        }\r\n        function approve(address spender, uint256 amount) public override returns (bool) {\r\n            _approve(_msgSender(), spender, amount);\r\n            return true;\r\n        }\r\n        function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n            _transfer(sender, recipient, amount);\r\n            _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n            return true;\r\n        }\r\n        function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n            _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n            return true;\r\n        }\r\n        function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n            _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n            return true;\r\n        }\r\n        function isExcluded(address account) public view returns (bool) {\r\n            return _isExcluded[account];\r\n        }\r\n        function setExcludeFromFee(address account, bool excluded) external onlyOwner() {\r\n            _isExcludedFromFee[account] = excluded;\r\n        }\r\n        function totalFees() public view returns (uint256) {\r\n            return _tFeeTotal;\r\n        }\r\n        function deliver(uint256 tAmount) public {\r\n            address sender = _msgSender();\r\n            require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\r\n            (uint256 rAmount,,,,,) = _getValues(tAmount);\r\n            _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n            _rTotal = _rTotal.sub(rAmount);\r\n            _tFeeTotal = _tFeeTotal.add(tAmount);\r\n        }\r\n        function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\r\n            require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n            if (!deductTransferFee) {\r\n                (uint256 rAmount,,,,,) = _getValues(tAmount);\r\n                return rAmount;\r\n            } else {\r\n                (,uint256 rTransferAmount,,,,) = _getValues(tAmount);\r\n                return rTransferAmount;\r\n            }\r\n        }\r\n        function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n            require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n            uint256 currentRate =  _getRate();\r\n            return rAmount.div(currentRate);\r\n        }\r\n        function excludeAccount(address account) external onlyOwner() {\r\n            require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Uniswap router.');\r\n            require(!_isExcluded[account], \"Account is already excluded\");\r\n            if(_rOwned[account] > 0) {\r\n                _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n            }\r\n            _isExcluded[account] = true;\r\n            _excluded.push(account);\r\n        }\r\n        function includeAccount(address account) external onlyOwner() {\r\n            require(_isExcluded[account], \"Account is already excluded\");\r\n            for (uint256 i = 0; i < _excluded.length; i++) {\r\n                if (_excluded[i] == account) {\r\n                    _excluded[i] = _excluded[_excluded.length - 1];\r\n                    _tOwned[account] = 0;\r\n                    _isExcluded[account] = false;\r\n                    _excluded.pop();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        function removeAllFee() private {\r\n            if(_taxFee == 0 && _devFee == 0) return;\r\n            _previousTaxFee = _taxFee;\r\n            _previousdevFee = _devFee;\r\n            _taxFee = 0;\r\n            _devFee = 0;\r\n        }\r\n        function restoreAllFee() private {\r\n            _taxFee = _previousTaxFee;\r\n            _devFee = _previousdevFee;\r\n        }\r\n        function isExcludedFromFee(address account) public view returns(bool) {\r\n            return _isExcludedFromFee[account];\r\n        }\r\n        function _approve(address owner, address spender, uint256 amount) private {\r\n            require(owner != address(0), \"ERC20: approve from the zero address\");\r\n            require(spender != address(0), \"ERC20: approve to the zero address\");\r\n            _allowances[owner][spender] = amount;\r\n            emit Approval(owner, spender, amount);\r\n        }\r\n        function _transfer(address sender, address recipient, uint256 amount) private {\r\n            require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n            require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n            require(amount > 0, \"Transfer amount must be greater than zero\");  \r\n            if(sender != owner() && recipient != owner())\r\n                require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if(contractTokenBalance >= _maxTxAmount)\r\n            {\r\n                contractTokenBalance = _maxTxAmount;\r\n            }\r\n            bool overMinTokenBalance = contractTokenBalance >= _numOfTokensToExchangeFordevFee;\r\n            if (!inSwap && swapEnabled && overMinTokenBalance && sender != uniswapV2Pair) {\r\n                swapTokensForEth(contractTokenBalance);\r\n                \r\n                uint256 contractETHBalance = address(this).balance;\r\n                if(contractETHBalance > 0) {\r\n                    sendETHTodevelopmentWalletAddress(address(this).balance);\r\n                }\r\n            }\r\n            bool takeFee = true;\r\n            if(_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]){\r\n                takeFee = false;\r\n            }\r\n            _tokenTransfer(sender,recipient,amount,takeFee);\r\n        }\r\n        function swapTokensForEth(uint256 tokenAmount) private lockTheSwap{\r\n            address[] memory path = new address[](2);\r\n            path[0] = address(this);\r\n            path[1] = uniswapV2Router.WETH();\r\n            _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n            // swapping\r\n            uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                tokenAmount,\r\n                0,\r\n                path,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n        }\r\n        //devwallet tax to eth function\r\n        function sendETHTodevelopmentWalletAddress(uint256 amount) private {\r\n            _developmentWalletAddress.transfer(amount);\r\n        }\r\n        function manualSwap() external onlyOwner() {\r\n            uint256 contractBalance = balanceOf(address(this));\r\n            swapTokensForEth(contractBalance);\r\n        }\r\n        function manualSend() external onlyOwner() {\r\n            uint256 contractETHBalance = address(this).balance;\r\n            sendETHTodevelopmentWalletAddress(contractETHBalance);\r\n        }\r\n        function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\r\n            if(!takeFee)\r\n                removeAllFee();\r\n\r\n            if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n                _transferFromExcluded(sender, recipient, amount);\r\n            } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n                _transferToExcluded(sender, recipient, amount);\r\n            } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n                _transferStandard(sender, recipient, amount);\r\n            } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n                _transferBothExcluded(sender, recipient, amount);\r\n            } else {\r\n                _transferStandard(sender, recipient, amount);\r\n            }\r\n\r\n            if(!takeFee)\r\n                restoreAllFee();\r\n        }\r\n        function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n            (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tdevelopmentWalletAddress) = _getValues(tAmount);\r\n            _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount); \r\n            _takedevfee(tdevelopmentWalletAddress); \r\n            _reflectFee(rFee, tFee);\r\n            emit Transfer(sender, recipient, tTransferAmount);\r\n        }\r\n        function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n            (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tdevfee) = _getValues(tAmount);\r\n            _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n            _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);    \r\n            _takedevfee(tdevfee);           \r\n            _reflectFee(rFee, tFee);\r\n            emit Transfer(sender, recipient, tTransferAmount);\r\n        }\r\n        function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n            (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tdevfee) = _getValues(tAmount);\r\n            _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n            _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount); \r\n            _takedevfee(tdevfee);   \r\n            _reflectFee(rFee, tFee);\r\n            emit Transfer(sender, recipient, tTransferAmount);\r\n        }\r\n        function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n            (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tdevfee) = _getValues(tAmount);\r\n            _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n            _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n            _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);   \r\n            _takedevfee(tdevfee);         \r\n            _reflectFee(rFee, tFee);\r\n            emit Transfer(sender, recipient, tTransferAmount);\r\n        }\r\n        function _takedevfee(uint256 tdevfee) private {\r\n            uint256 currentRate =  _getRate();\r\n            uint256 rdevfee = tdevfee.mul(currentRate);\r\n            _rOwned[address(this)] = _rOwned[address(this)].add(rdevfee);\r\n            if(_isExcluded[address(this)])\r\n                _tOwned[address(this)] = _tOwned[address(this)].add(tdevfee);\r\n        }\r\n        function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n            _rTotal = _rTotal.sub(rFee);\r\n            _tFeeTotal = _tFeeTotal.add(tFee);\r\n        }\r\n        receive() external payable {}\r\n        function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n            (uint256 tTransferAmount, uint256 tFee, uint256 tdevfee) = _getTValues(tAmount, _taxFee, _devFee);\r\n            uint256 currentRate =  _getRate();\r\n            (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, currentRate);\r\n            return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tdevfee);\r\n        }\r\n        function _getTValues(uint256 tAmount, uint256 taxFee, uint256 devFee) private pure returns (uint256, uint256, uint256) {\r\n            uint256 tFee = tAmount.mul(taxFee).div(100);\r\n            uint256 tdevfee = tAmount.mul(devFee).div(100);\r\n            uint256 tTransferAmount = tAmount.sub(tFee).sub(tdevfee);\r\n            return (tTransferAmount, tFee, tdevfee);\r\n        }\r\n        function _getRValues(uint256 tAmount, uint256 tFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n            uint256 rAmount = tAmount.mul(currentRate);\r\n            uint256 rFee = tFee.mul(currentRate);\r\n            uint256 rTransferAmount = rAmount.sub(rFee);\r\n            return (rAmount, rTransferAmount, rFee);\r\n        }\r\n        function _getRate() private view returns(uint256) {\r\n            (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n            return rSupply.div(tSupply);\r\n        }\r\n        function _getCurrentSupply() private view returns(uint256, uint256) {\r\n            uint256 rSupply = _rTotal;\r\n            uint256 tSupply = _tTotal;      \r\n            for (uint256 i = 0; i < _excluded.length; i++) {\r\n                if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n                rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n                tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n            }\r\n            if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n            return (rSupply, tSupply);\r\n        }\r\n        function _getTaxFee() private view returns(uint256) {\r\n            return _taxFee;\r\n        }\r\n        function _getMaxTxAmount() private view returns(uint256) {\r\n            return _maxTxAmount;\r\n        }\r\n        function _getETHBalance() public view returns(uint256 balance) {\r\n            return address(this).balance;\r\n        }\r\n        function _setTaxFee(uint256 taxFee) external onlyOwner() {\r\n            require(taxFee >= 0 && taxFee <= 10, 'taxFee should be in 0 - 10');\r\n            _taxFee = taxFee;\r\n        }\r\n        function _setdevFee(uint256 devFee) external onlyOwner() {\r\n            require(devFee >= 1 && devFee <= 5, 'devFee should be in 1 - 5');\r\n            _devFee = devFee;\r\n        }\r\n        function _setdevelopmentWalletAddress(address payable developmentWalletAddress) external onlyOwner() {\r\n            _developmentWalletAddress = developmentWalletAddress;\r\n        }\r\n        function _setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {\r\n            require(maxTxAmount >= 700000000000000e9 , 'maxTxAmount should be greater than 700000000000000e9');\r\n            _maxTxAmount = maxTxAmount;\r\n        }\r\n    }", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"developmentWalletAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_developmentWalletAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getETHBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"_setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"_setTaxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"}],\"name\":\"_setdevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"developmentWalletAddress\",\"type\":\"address\"}],\"name\":\"_setdevelopmentWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"setExcludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ProjectFeenixv2", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000007cf34cabf453220e4a67a322987779fc9cbe62eb", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://db337daa59bb80f73ae4388baad365fec11629c84bc052a471fd652dff8aaffe"}