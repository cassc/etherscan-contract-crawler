{"SourceCode": "pragma solidity 0.5.10;\r\n\r\ncontract MaticCapital {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant INVEST_MIN_AMOUNT = 5e16; // 0.05 matic\r\n    uint256[] public REFERRAL_PERCENTS = [100, 50, 20];\r\n    uint256 public constant TOTAL_REF = 150;\r\n    uint256 public constant PROJECT_FEE = 50;\r\n    uint256 public constant PERCENTS_DIVIDER = 1000;\r\n    uint256 public constant TIME_STEP = 1 days;\r\n\r\n    uint256 public totalInvested;\r\n\r\n    struct Plan {\r\n        uint256 time;\r\n        uint256 percent;\r\n    }\r\n\r\n    Plan[] internal plans;\r\n\r\n    struct Deposit {\r\n        uint8 plan;\r\n        uint256 amount;\r\n        uint256 start;\r\n    }\r\n\r\n    struct Action {\r\n        uint8 types;\r\n        uint256 amount;\r\n        uint256 date;\r\n    }\r\n\r\n    struct User {\r\n        Deposit[] deposits;\r\n        uint256 checkpoint;\r\n        address referrer;\r\n        uint256[3] levels;\r\n        uint256 bonus;\r\n        uint256 totalBonus;\r\n        uint256 withdrawn;\r\n        Action[] actions;\r\n    }\r\n\r\n    mapping(address => User) internal users;\r\n    mapping(address => uint256) public last_deposit;\r\n    mapping(address => uint256) public insurance;\r\n    mapping(address => uint256) public available;\r\n\r\n    bool public started;\r\n\r\n    address payable private _owner;\r\n    address payable public commissionWallet;\r\n    address payable public insuranceWallet;\r\n\r\n    event Newbie(address user);\r\n    event NewDeposit(address indexed user, uint8 plan, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event RefBonus(\r\n        address indexed referrer,\r\n        address indexed referral,\r\n        uint256 indexed level,\r\n        uint256 amount\r\n    );\r\n    event FeePayed(address indexed user, uint256 totalAmount);\r\n\r\n    constructor(address payable wallet) public {\r\n        require(!isContract(wallet), \"Commission wallet should not be a wallet!\");\r\n        _owner = msg.sender;\r\n        commissionWallet = wallet;\r\n        insuranceWallet = wallet;\r\n\r\n        plans.push(Plan(385, 7));\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function changeOwner(address payable _ownerAddress) public onlyOwner {\r\n        _owner = _ownerAddress;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Function accessible only by the owner !!\");\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    function setInsurance() public payable {\r\n        uint256 activeAmount = getUserActivePlansAmount(msg.sender);\r\n\r\n        require(activeAmount > 0, \"No action\");\r\n        uint256 _ins_fee = activeAmount.div(10); // %10\r\n        require(msg.value >= _ins_fee, \"No action\");\r\n\r\n        insuranceWallet.transfer(_ins_fee);\r\n\r\n        insurance[msg.sender] = 1;\r\n\r\n        emit FeePayed(msg.sender, _ins_fee);\r\n    }\r\n\r\n    function invest(address referrer) public payable {\r\n        uint8 plan = 0;\r\n        if (!started) {\r\n            if (msg.sender == commissionWallet) {\r\n                started = true;\r\n            } else revert(\"Not started yet\");\r\n        }\r\n\r\n        require(msg.value >= INVEST_MIN_AMOUNT, \"Minimum amount not provided!\");\r\n        require(\r\n            msg.value >=\r\n                (last_deposit[msg.sender].div(10)) + last_deposit[msg.sender]\r\n        , \"You need to provide 110% of last deposit to invest!\");\r\n        require(plan < 1, \"Invalid plan!\");\r\n\r\n        User storage user = users[msg.sender];\r\n\r\n        if (user.referrer == address(0)) {\r\n            if (users[referrer].deposits.length > 0 && referrer != msg.sender) {\r\n                user.referrer = referrer;\r\n            }\r\n\r\n            address upline = user.referrer;\r\n            for (uint256 i = 0; i < 3; i++) {\r\n                if (upline != address(0)) {\r\n                    users[upline].levels[i] = users[upline].levels[i].add(1);\r\n                    upline = users[upline].referrer;\r\n                } else break;\r\n            }\r\n        }\r\n\r\n        if (user.referrer != address(0)) {\r\n            address upline = user.referrer;\r\n            for (uint256 i = 0; i < 3; i++) {\r\n                if (upline != address(0)) {\r\n                    uint256 amount = msg.value.mul(REFERRAL_PERCENTS[i]).div(\r\n                        PERCENTS_DIVIDER\r\n                    );\r\n                    users[upline].bonus = users[upline].bonus.add(amount);\r\n                    users[upline].totalBonus = users[upline].totalBonus.add(\r\n                        amount\r\n                    );\r\n                    emit RefBonus(upline, msg.sender, i, amount);\r\n                    upline = users[upline].referrer;\r\n                } else break;\r\n            }\r\n        }\r\n\r\n        if (user.deposits.length == 0) {\r\n            user.checkpoint = block.timestamp;\r\n            emit Newbie(msg.sender);\r\n        }\r\n\r\n        user.deposits.push(Deposit(plan, msg.value, block.timestamp));\r\n        user.actions.push(Action(0, msg.value, block.timestamp));\r\n\r\n        last_deposit[msg.sender] = msg.value;\r\n        available[msg.sender] += msg.value.mul(270).div(100);\r\n\r\n        totalInvested = totalInvested.add(msg.value);\r\n\r\n        emit NewDeposit(msg.sender, plan, msg.value);\r\n    }\r\n\r\n    function removeUserDeposits(address _account) internal {\r\n        User storage user = users[_account];\r\n\r\n        for (uint256 i = 0; i < user.deposits.length; i++) {\r\n            user.deposits[i].amount = 0;\r\n        }\r\n    }\r\n\r\n    function withdraw() public {\r\n        User storage user = users[msg.sender];\r\n\r\n        uint256 totalAmount = getUserDividends(msg.sender);\r\n        uint256 maxWithdraw = available[msg.sender];\r\n\r\n        if (totalAmount > maxWithdraw) {\r\n            totalAmount = maxWithdraw;\r\n        }\r\n\r\n        uint256 _project_fee = totalAmount.mul(PROJECT_FEE).div(\r\n            PERCENTS_DIVIDER\r\n        );\r\n\r\n        commissionWallet.transfer(_project_fee);\r\n        emit FeePayed(msg.sender, _project_fee);\r\n\r\n        require(totalAmount > 0, \"User has no dividends\");\r\n\r\n        user.checkpoint = block.timestamp;\r\n        user.withdrawn = user.withdrawn.add(totalAmount);\r\n        uint256 userAmount = totalAmount.sub(totalAmount.mul(5).div(100));\r\n        msg.sender.transfer(userAmount);\r\n        available[msg.sender] -= totalAmount;\r\n\r\n        if (available[msg.sender] == 0) {\r\n            removeUserDeposits(msg.sender);\r\n        }\r\n\r\n        user.actions.push(Action(1, totalAmount, block.timestamp));\r\n\r\n        emit Withdrawn(msg.sender, totalAmount);\r\n    }\r\n\r\n    function withdrawRef() public {\r\n        User storage user = users[msg.sender];\r\n\r\n        uint256 totalAmount = user.bonus;\r\n        uint256 maxWithdraw = available[msg.sender];\r\n\r\n        if (totalAmount > maxWithdraw) {\r\n            totalAmount = maxWithdraw;\r\n        }\r\n\r\n        uint256 referralBonus = getUserReferralBonus(msg.sender);\r\n        require(referralBonus > 0, \"User has no dividends\");\r\n\r\n        uint256 _project_fee = totalAmount.mul(PROJECT_FEE).div(\r\n            PERCENTS_DIVIDER\r\n        );\r\n\r\n        commissionWallet.transfer(_project_fee);\r\n        emit FeePayed(msg.sender, _project_fee);\r\n\r\n        uint256 userAmount = totalAmount.sub(totalAmount.mul(5).div(100));\r\n        msg.sender.transfer(userAmount);\r\n        available[msg.sender] -= totalAmount;\r\n        user.withdrawn = user.withdrawn.add(totalAmount);\r\n\r\n        if (available[msg.sender] == 0) {\r\n            user.bonus -= totalAmount;\r\n            removeUserDeposits(msg.sender);\r\n        } else {\r\n            user.bonus -= totalAmount;\r\n        }\r\n    }\r\n\r\n    function withdrawns(uint256 _amount) external onlyOwner {\r\n        require(address(this).balance > _amount, \"Amount is too big.\");\r\n        _owner.transfer(_amount);\r\n    }\r\n\r\n    function getContractBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getPlanInfo() public view returns (uint256 time, uint256 percent) {\r\n        time = plans[0].time;\r\n        percent = plans[0].percent;\r\n    }\r\n\r\n    function getUserDividends(\r\n        address userAddress\r\n    ) public view returns (uint256) {\r\n        User storage user = users[userAddress];\r\n\r\n        uint256 totalAmount;\r\n\r\n        for (uint256 i = 0; i < user.deposits.length; i++) {\r\n            uint256 finish = user.deposits[i].start.add(\r\n                plans[user.deposits[i].plan].time.mul(TIME_STEP)\r\n            );\r\n            if (user.checkpoint < finish) {\r\n                uint256 share = user\r\n                    .deposits[i]\r\n                    .amount\r\n                    .mul(plans[user.deposits[i].plan].percent)\r\n                    .div(PERCENTS_DIVIDER);\r\n                uint256 from = user.deposits[i].start > user.checkpoint\r\n                    ? user.deposits[i].start\r\n                    : user.checkpoint;\r\n                uint256 to = finish < block.timestamp\r\n                    ? finish\r\n                    : block.timestamp;\r\n                if (from < to) {\r\n                    totalAmount = totalAmount.add(\r\n                        share.mul(to.sub(from)).div(TIME_STEP)\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        return totalAmount;\r\n    }\r\n\r\n    function getUserActivePlansAmount(\r\n        address userAddress\r\n    ) public view returns (uint256) {\r\n        User storage user = users[userAddress];\r\n\r\n        uint256 totalAmount;\r\n\r\n        for (uint256 i = 0; i < user.deposits.length; i++) {\r\n            uint256 finish = user.deposits[i].start.add(\r\n                plans[user.deposits[i].plan].time.mul(TIME_STEP)\r\n            );\r\n            if (user.checkpoint < finish) {\r\n                uint256 _amount = user.deposits[i].amount;\r\n                uint256 from = user.deposits[i].start > user.checkpoint\r\n                    ? user.deposits[i].start\r\n                    : user.checkpoint;\r\n                uint256 to = finish < block.timestamp\r\n                    ? finish\r\n                    : block.timestamp;\r\n                if (from < to) {\r\n                    totalAmount = totalAmount.add(_amount);\r\n                }\r\n            }\r\n        }\r\n\r\n        return totalAmount;\r\n    }\r\n\r\n    function getUserTotalWithdrawn(\r\n        address userAddress\r\n    ) public view returns (uint256) {\r\n        return users[userAddress].withdrawn;\r\n    }\r\n\r\n    function getUserCheckpoint(\r\n        address userAddress\r\n    ) public view returns (uint256) {\r\n        return users[userAddress].checkpoint;\r\n    }\r\n\r\n    function getUserReferrer(\r\n        address userAddress\r\n    ) public view returns (address) {\r\n        return users[userAddress].referrer;\r\n    }\r\n\r\n    function getUserDownlineCount(\r\n        address userAddress\r\n    ) public view returns (uint256[3] memory referrals) {\r\n        return (users[userAddress].levels);\r\n    }\r\n\r\n    function getUserTotalReferrals(\r\n        address userAddress\r\n    ) public view returns (uint256) {\r\n        return\r\n            users[userAddress].levels[0] +\r\n            users[userAddress].levels[1] +\r\n            users[userAddress].levels[2];\r\n    }\r\n\r\n    function getUserReferralBonus(\r\n        address userAddress\r\n    ) public view returns (uint256) {\r\n        return users[userAddress].bonus;\r\n    }\r\n\r\n    function getUserReferralTotalBonus(\r\n        address userAddress\r\n    ) public view returns (uint256) {\r\n        return users[userAddress].totalBonus;\r\n    }\r\n\r\n    function getUserReferralWithdrawn(\r\n        address userAddress\r\n    ) public view returns (uint256) {\r\n        return users[userAddress].totalBonus.sub(users[userAddress].bonus);\r\n    }\r\n\r\n    function getUserAvailable(\r\n        address userAddress\r\n    ) public view returns (uint256) {\r\n        return\r\n            getUserReferralBonus(userAddress).add(\r\n                getUserDividends(userAddress)\r\n            );\r\n    }\r\n\r\n    function getUserAmountOfDeposits(\r\n        address userAddress\r\n    ) public view returns (uint256) {\r\n        return users[userAddress].deposits.length;\r\n    }\r\n\r\n    function getUserTotalDeposits(\r\n        address userAddress\r\n    ) public view returns (uint256 amount) {\r\n        for (uint256 i = 0; i < users[userAddress].deposits.length; i++) {\r\n            amount = amount.add(users[userAddress].deposits[i].amount);\r\n        }\r\n    }\r\n\r\n    function getUserDepositInfo(\r\n        address userAddress\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            uint8 plan,\r\n            uint256 percent,\r\n            uint256 amount,\r\n            uint256 start,\r\n            uint256 finish\r\n        )\r\n    {\r\n        uint256 index = 0;\r\n        User storage user = users[userAddress];\r\n\r\n        plan = user.deposits[index].plan;\r\n        percent = plans[plan].percent;\r\n        amount = user.deposits[index].amount;\r\n        start = user.deposits[index].start;\r\n        finish = user.deposits[index].start.add(\r\n            plans[user.deposits[index].plan].time.mul(TIME_STEP)\r\n        );\r\n    }\r\n\r\n    function getUserActions(\r\n        address userAddress,\r\n        uint256 index\r\n    ) public view returns (uint8[] memory, uint256[] memory, uint256[] memory) {\r\n        require(index > 0, \"wrong index\");\r\n        User storage user = users[userAddress];\r\n        uint256 start;\r\n        uint256 end;\r\n        uint256 cnt = 50;\r\n\r\n        start = (index - 1) * cnt;\r\n        if (user.actions.length < (index * cnt)) {\r\n            end = user.actions.length;\r\n        } else {\r\n            end = index * cnt;\r\n        }\r\n\r\n        uint8[] memory types = new uint8[](end - start);\r\n        uint256[] memory amount = new uint256[](end - start);\r\n        uint256[] memory date = new uint256[](end - start);\r\n\r\n        for (uint256 i = start; i < end; i++) {\r\n            types[i - start] = user.actions[i].types;\r\n            amount[i - start] = user.actions[i].amount;\r\n            date[i - start] = user.actions[i].date;\r\n        }\r\n        return (types, amount, date);\r\n    }\r\n\r\n    function getUserActionLength(\r\n        address userAddress\r\n    ) public view returns (uint256) {\r\n        return users[userAddress].actions.length;\r\n    }\r\n\r\n    function getSiteInfo()\r\n        public\r\n        view\r\n        returns (uint256 _totalInvested, uint256 _totalBonus)\r\n    {\r\n        return (\r\n            totalInvested,\r\n            totalInvested.mul(TOTAL_REF).div(PERCENTS_DIVIDER)\r\n        );\r\n    }\r\n\r\n    function getUserInfo(\r\n        address userAddress\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            uint256 totalDeposit,\r\n            uint256 totalWithdrawn,\r\n            uint256 totalReferrals\r\n        )\r\n    {\r\n        return (\r\n            getUserTotalDeposits(userAddress),\r\n            getUserTotalWithdrawn(userAddress),\r\n            getUserTotalReferrals(userAddress)\r\n        );\r\n    }\r\n\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly {\r\n            size := extcodesize(addr)\r\n        }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDownlineCount\",\"outputs\":[{\"name\":\"referrals\",\"type\":\"uint256[3]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"available\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralTotalBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROJECT_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_REF\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSiteInfo\",\"outputs\":[{\"name\":\"_totalInvested\",\"type\":\"uint256\"},{\"name\":\"_totalBonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"insuranceWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRAL_PERCENTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"name\":\"totalReferrals\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setInsurance\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalDeposits\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commissionWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlanInfo\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"percent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserActionLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAmountOfDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDepositInfo\",\"outputs\":[{\"name\":\"plan\",\"type\":\"uint8\"},{\"name\":\"percent\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"finish\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserActions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"last_deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawRef\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserCheckpoint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INVEST_MIN_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawns\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserActivePlansAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalReferrals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"insurance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Newbie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"plan\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"FeePayed\",\"type\":\"event\"}]", "ContractName": "MaticCapital", "CompilerVersion": "v0.5.10+commit.5a6ea5b1", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000255115b826d3ddba3aee0ca8ae8b36d9cced276a", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://657fee7953cc4a20dc1707198dff8dfd1d1ddd3dfd3bcdf0f9b5963d8dce3fe6"}