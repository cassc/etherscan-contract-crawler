{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IController.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\ninterface IController {\\n    \\n   /* ============ Custom Errors ============ */\\n    \\n    /// @notice Emitted when the number of resources and resourceIds mismatch.\\n    error Controller__ArrayLengthMismatch(uint256 resourcesLength, uint256 resourcesIdsLength);\\n    /// @notice Emitted when the caller is not a factory.\\n    error Controller__CallerNotFactory(address caller);\\n    /// @notice Emitted when a factory already exists on the Controller.\\n    error Controller__FactoryExists();\\n    /// @notice Emitted when a factory does not exist on the Controller.\\n    error Controller__FactoryInvalid();\\n    /// @notice Emitted when a fee type already exists on the Controller.\\n    error Controller__FeeTypeExists();\\n    /// @notice Emitted when a fee type does not exist on the Controller.\\n    error Controller__FeeTypeInvalid();\\n    /// @notice Emitted when the Controller is already initialized.\\n    error Controller__IsInitialized();\\n    /// @notice Emitted when a module is already enabled on the Controller.\\n    error Controller__ModuleExists();\\n    /// @notice Emitted when a module is not enabled on the Controller.\\n    error Controller__ModuleInvalid();\\n    /// @notice Emitted when a resource or resourceId is already enabled on the Controller.\\n    error Controller__ResourceExists();\\n    /// @notice Emitted when a resource is not enabled on the Controller.\\n    error Controller__ResourceInvalid();\\n    /// @notice Emitted when a SetToken is already enabled on the Controller. \\n    error Controller__SetExists();\\n    /// @notice Emitted when a SetToken is not enabled on the Controller.\\n    error Controller__SetInvalid();\\n    /// @notice Emitted when the Controller is not initialized.\\n    error Controller__Uninitialized();\\n    /// @notice Emitted when a zero address is provided.\\n    error Controller__ZeroAddress();\\n\\n   /* ============ Functions ============ */\\n\\n    function addSet(address _setToken) external;\\n    function feeRecipient() external view returns(address);\\n    function getModuleFee(address _module, uint256 _feeType) external view returns(uint256);\\n    function isModule(address _module) external view returns(bool);\\n    function isSet(address _setToken) external view returns(bool);\\n    function isSystemContract(address _contractAddress) external view returns (bool);\\n    function resourceId(uint256 _id) external view returns(address);\\n}\"\r\n    },\r\n    \"contracts/lib/AddressArrayUtils.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n/* solhint-disable var-name-mixedcase */\\n\\npragma solidity 0.8.21;\\n\\n/**\\n * @title AddressArrayUtils\\n * @author Set Protocol\\n *\\n * Utility functions to handle Address Arrays\\n *\\n * CHANGELOG\\n * - 4/21/21: Added validatePairsWithArray methods\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n * - 9/28/23: Switch hasDuplicate() `A` parameter from memory to calldata\\n */\\nlibrary AddressArrayUtils {\\n\\n    /* ============ Custom Errors ============ */\\n\\n    /// @notice Emitted when the array contains duplicate addresses.\\n    error AddressArrayUtils__ArrayContainsDuplicates();\\n    /// @notice Emitted when the provided index is out of the bounds of the array.\\n    error AddressArrayUtils__ArrayIndexOutOfBounds(uint256 index, uint256 length);\\n    /// @notice Emitted when the array is empty.\\n    error AddressArrayUtils__ArrayIsEmpty();\\n    /// @notice Emitted when a target address is not found within the array.\\n    error AddressArrayUtils__ArrayItemNotFound(address target);\\n    /// @notice Emitted when two arrays being validated have mismatched lengths.\\n    error AddressArrayUtils__ArrayLengthMismatch(uint256 lengthA, uint256 lengthB);\\n\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i; i < length; ) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n            unchecked { ++i; }\\n        }\\n        return (type(uint256).max, false);\\n    }\\n\\n    /**\\n    * Returns true if the value is present in the list. Uses indexOf internally.\\n    * @param A The input array to search\\n    * @param a The value to find\\n    * @return Returns isIn for the first occurrence starting from index 0\\n    */\\n    function contains(address[] memory A, address a) internal pure returns (bool) {\\n        (, bool isIn) = indexOf(A, a);\\n        return isIn;\\n    }\\n\\n    /**\\n    * Returns true if there are 2 elements that are the same in an array\\n    * @param A The input array to search\\n    * @return Returns boolean for the first occurrence of a duplicate\\n    */\\n    function hasDuplicate(address[] calldata A) internal pure returns(bool) {\\n        if (A.length == 0) revert AddressArrayUtils__ArrayIsEmpty();\\n\\n        uint256 length = A.length;\\n        for (uint256 i; i < length - 1; ) {\\n            address current = A[i];\\n            for (uint256 j = i + 1; j < length;) {\\n                if (current == A[j]) {\\n                    return true;\\n                }\\n                unchecked { ++j; }\\n            }\\n            unchecked { ++i; }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The address to remove\\n     * @return Returns the array with the object removed.\\n     */\\n    function remove(address[] memory A, address a)\\n        internal\\n        pure\\n        returns (address[] memory)\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert AddressArrayUtils__ArrayItemNotFound(a);\\n        } else {\\n            (address[] memory _A,) = pop(A, index);\\n            return _A;\\n        }\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The address to remove\\n     */\\n    function removeStorage(address[] storage A, address a)\\n        internal\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert AddressArrayUtils__ArrayItemNotFound(a);\\n        } else {\\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\\n            A.pop();\\n        }\\n    }\\n\\n    /**\\n    * Removes specified index from array\\n    * @param A The input array to search\\n    * @param index The index to remove\\n    * @return Returns the new array and the removed entry\\n    */\\n    function pop(address[] memory A, uint256 index)\\n        internal\\n        pure\\n        returns (address[] memory, address)\\n    {\\n        uint256 length = A.length;\\n        if (index >= length) revert AddressArrayUtils__ArrayIndexOutOfBounds(index, length);\\n        address[] memory newAddresses = new address[](length - 1);\\n        for (uint256 i; i < index; ) {\\n            newAddresses[i] = A[i];\\n            unchecked { ++i; }\\n        }\\n        for (uint256 j = index + 1; j < length;) {\\n            newAddresses[j - 1] = A[j];\\n            unchecked { ++j; }\\n        }\\n        return (newAddresses, A[index]);\\n    }\\n\\n    /**\\n     * Returns the combination of the two arrays\\n     * @param A The first array\\n     * @param B The second array\\n     * @return Returns A extended by B\\n     */\\n    function extend(address[] memory A, address[] memory B) internal pure returns (address[] memory) {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        address[] memory newAddresses = new address[](aLength + bLength);\\n        for (uint256 i; i < aLength; ) {\\n            newAddresses[i] = A[i];\\n            unchecked { ++i; }\\n        }\\n        for (uint256 j; j < bLength;) {\\n            newAddresses[aLength + j] = B[j];\\n            unchecked { ++j; }\\n        }\\n        return newAddresses;\\n    }\\n\\n    /**\\n     * Validate that address and uint array lengths match. Validate address array is not empty\\n     * and contains no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of uint\\n     */\\n    function validatePairsWithArray(address[] calldata A, uint256[] calldata B) internal pure {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        if (aLength != bLength)\\n            revert AddressArrayUtils__ArrayLengthMismatch(aLength, bLength);\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate that address and bool array lengths match. Validate address array is not empty\\n     * and contains no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of bool\\n     */\\n    function validatePairsWithArray(address[] calldata A, bool[] calldata B) internal pure {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        if (aLength != bLength)\\n            revert AddressArrayUtils__ArrayLengthMismatch(aLength, bLength);\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate that address and string array lengths match. Validate address array is not empty\\n     * and contains no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of strings\\n     */\\n    function validatePairsWithArray(address[] calldata A, string[] calldata B) internal pure {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        if (aLength != bLength) revert AddressArrayUtils__ArrayLengthMismatch(aLength, bLength);\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate that address array lengths match, and calling address array are not empty\\n     * and contain no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of addresses\\n     */\\n    function validatePairsWithArray(address[] calldata A, address[] calldata B) internal pure {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        if (aLength != bLength) revert AddressArrayUtils__ArrayLengthMismatch(aLength, bLength);\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate that address and bytes array lengths match. Validate address array is not empty\\n     * and contains no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of bytes\\n     */\\n    function validatePairsWithArray(address[] calldata A, bytes[] calldata B) internal pure {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        if (aLength != bLength) revert AddressArrayUtils__ArrayLengthMismatch(aLength, bLength);\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate address array is not empty and contains no duplicate elements.\\n     *\\n     * @param A          Array of addresses\\n     */\\n    function _validateLengthAndUniqueness(address[] calldata A) internal pure {\\n        if (A.length == 0) revert AddressArrayUtils__ArrayIsEmpty();\\n        if (hasDuplicate(A)) revert AddressArrayUtils__ArrayContainsDuplicates();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/Controller.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity 0.8.21;\\n\\nimport { IController } from \\\"../interfaces/IController.sol\\\";\\nimport { Ownable2Step } from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport { AddressArrayUtils } from \\\"../lib/AddressArrayUtils.sol\\\";\\n\\n/**\\n * @title Controller\\n * @author Set Protocol\\n *\\n * Contract that houses state for approvals and system contracts such as added Sets,\\n * modules, factories, resources (like price oracles), and protocol fee configurations.\\n *\\n * CHANGELOG\\n * - 9/13/23: Switch from Ownable to Ownable2Step\\n * - 9/18/23: Upgrade to Solidity 0.8.21\\n * - 9/26/23: Added custom errors\\n */\\ncontract Controller is IController, Ownable2Step {\\n    using AddressArrayUtils for address[];\\n\\n    /* ============ Events ============ */\\n\\n    event FactoryAdded(address indexed _factory);\\n    event FactoryRemoved(address indexed _factory);\\n    event FeeEdited(address indexed _module, uint256 indexed _feeType, uint256 _feePercentage);\\n    event FeeRecipientChanged(address _newFeeRecipient);\\n    event ModuleAdded(address indexed _module);\\n    event ModuleRemoved(address indexed _module);\\n    event ResourceAdded(address indexed _resource, uint256 _id);\\n    event ResourceRemoved(address indexed _resource, uint256 _id);\\n    event SetAdded(address indexed _setToken, address indexed _factory);\\n    event SetRemoved(address indexed _setToken);\\n\\n    /* ============ Modifiers ============ */\\n\\n    /**\\n     * Throws if function is called by any address other than a valid factory.\\n     */\\n    modifier onlyFactory() {\\n        if (!isFactory[msg.sender]) revert Controller__CallerNotFactory(msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyInitialized() {\\n        if (!isInitialized) revert Controller__Uninitialized();\\n        _;\\n    }\\n\\n    /* ============ State Variables ============ */\\n\\n    // List of enabled Sets\\n    address[] public sets;\\n    // List of enabled factories of SetTokens\\n    address[] public factories;\\n    // List of enabled Modules; Modules extend the functionality of SetTokens\\n    address[] public modules;\\n    // List of enabled Resources; Resources provide data, functionality, or\\n    // permissions that can be drawn upon from Module, SetTokens or factories\\n    address[] public resources;\\n\\n    // Mappings to check whether address is valid Set, Factory, Module or Resource\\n    mapping(address => bool) public isSet;\\n    mapping(address => bool) public isFactory;\\n    mapping(address => bool) public isModule;\\n    mapping(address => bool) public isResource;\\n\\n    // Mapping of modules to fee types to fee percentage. A module can have multiple feeTypes\\n    // Fee is denominated in precise unit percentages (100% = 1e18, 1% = 1e16)\\n    mapping(address => mapping(uint256 => uint256)) public fees;\\n\\n    // Mapping of resource ID to resource address, which allows contracts to fetch the correct\\n    // resource while providing an ID\\n    mapping(uint256 => address) public resourceId;\\n\\n    // Recipient of protocol fees\\n    address public feeRecipient;\\n\\n    // Return true if the controller is initialized\\n    bool public isInitialized;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Initializes the initial fee recipient on deployment.\\n     *\\n     * @param _feeRecipient          Address of the initial protocol fee recipient\\n     */\\n    constructor(address _feeRecipient) {\\n        feeRecipient = _feeRecipient;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * Initializes any predeployed factories, modules, and resources post deployment. Note: This function can\\n     * only be called by the owner once to batch initialize the initial system contracts.\\n     *\\n     * @param _factories             List of factories to add\\n     * @param _modules               List of modules to add\\n     * @param _resources             List of resources to add\\n     * @param _resourceIds           List of resource IDs associated with the resources\\n     */\\n    function initialize(\\n        address[] memory _factories,\\n        address[] memory _modules,\\n        address[] memory _resources,\\n        uint256[] memory _resourceIds\\n    )\\n        external\\n        onlyOwner\\n    {\\n        if (isInitialized) revert Controller__IsInitialized();\\n        uint256 resourcesLength = _resources.length;\\n        uint256 resourceIdsLength = _resourceIds.length;\\n        if (resourceIdsLength != resourcesLength) revert Controller__ArrayLengthMismatch(resourcesLength, resourceIdsLength);\\n\\n        factories = _factories;\\n        modules = _modules;\\n        resources = _resources;\\n\\n        uint256 factoriesLength = _factories.length;\\n        // Loop through and initialize isModule, isFactory, and isResource mapping\\n        for (uint256 i; i < factoriesLength; ) {\\n            if (_factories[i] == address(0)) revert Controller__ZeroAddress();\\n            isFactory[_factories[i]] = true;\\n            unchecked { ++i; }\\n        }\\n        uint256 modulesLength = _modules.length;\\n        for (uint256 i; i < modulesLength; ) {\\n            if (_modules[i] == address(0)) revert Controller__ZeroAddress();\\n            isModule[_modules[i]] = true;\\n            unchecked { ++i; }\\n        }\\n\\n        for (uint256 i; i < resourcesLength; ) {\\n            if (_resources[i] == address(0)) revert Controller__ZeroAddress();\\n            if (resourceId[_resourceIds[i]] != address(0)) revert Controller__ResourceExists();\\n            isResource[_resources[i]] = true;\\n            resourceId[_resourceIds[i]] = _resources[i];\\n            unchecked { ++i; }\\n        }\\n\\n        // Set to true to only allow initialization once\\n        isInitialized = true;\\n    }\\n\\n    /**\\n     * PRIVILEGED FACTORY FUNCTION. Adds a newly deployed SetToken as an enabled SetToken.\\n     *\\n     * @param _setToken               Address of the SetToken contract to add\\n     */\\n    function addSet(address _setToken) external onlyInitialized onlyFactory {\\n        if (isSet[_setToken]) revert Controller__SetExists();\\n\\n        isSet[_setToken] = true;\\n\\n        sets.push(_setToken);\\n\\n        emit SetAdded(_setToken, msg.sender);\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to remove a Set\\n     *\\n     * @param _setToken               Address of the SetToken contract to remove\\n     */\\n    function removeSet(address _setToken) external onlyInitialized onlyOwner {\\n        if (!isSet[_setToken]) revert Controller__SetInvalid();\\n\\n        sets = sets.remove(_setToken);\\n\\n        isSet[_setToken] = false;\\n\\n        emit SetRemoved(_setToken);\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to add a factory\\n     *\\n     * @param _factory               Address of the factory contract to add\\n     */\\n    function addFactory(address _factory) external onlyInitialized onlyOwner {\\n        if (isFactory[_factory]) revert Controller__FactoryExists();\\n\\n        isFactory[_factory] = true;\\n\\n        factories.push(_factory);\\n\\n        emit FactoryAdded(_factory);\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to remove a factory\\n     *\\n     * @param _factory               Address of the factory contract to remove\\n     */\\n    function removeFactory(address _factory) external onlyInitialized onlyOwner {\\n        if (!isFactory[_factory]) revert Controller__FactoryInvalid();\\n\\n        factories = factories.remove(_factory);\\n\\n        isFactory[_factory] = false;\\n\\n        emit FactoryRemoved(_factory);\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to add a module\\n     *\\n     * @param _module               Address of the module contract to add\\n     */\\n    function addModule(address _module) external onlyInitialized onlyOwner {\\n        if (isModule[_module]) revert Controller__ModuleExists();\\n\\n        isModule[_module] = true;\\n\\n        modules.push(_module);\\n\\n        emit ModuleAdded(_module);\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to remove a module\\n     *\\n     * @param _module               Address of the module contract to remove\\n     */\\n    function removeModule(address _module) external onlyInitialized onlyOwner {\\n        if (!isModule[_module]) revert Controller__ModuleInvalid();\\n\\n        modules = modules.remove(_module);\\n\\n        isModule[_module] = false;\\n\\n        emit ModuleRemoved(_module);\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to add a resource\\n     *\\n     * @param _resource               Address of the resource contract to add\\n     * @param _id                     New ID of the resource contract\\n     */\\n    function addResource(address _resource, uint256 _id) external onlyInitialized onlyOwner {\\n        if (isResource[_resource] || resourceId[_id] != address(0)) revert Controller__ResourceExists();\\n\\n        isResource[_resource] = true;\\n\\n        resourceId[_id] = _resource;\\n\\n        resources.push(_resource);\\n\\n        emit ResourceAdded(_resource, _id);\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to remove a resource\\n     *\\n     * @param _id               ID of the resource contract to remove\\n     */\\n    function removeResource(uint256 _id) external onlyInitialized onlyOwner {\\n        address resourceToRemove = resourceId[_id];\\n\\n        if (resourceToRemove == address(0)) revert Controller__ResourceInvalid();\\n\\n        resources = resources.remove(resourceToRemove);\\n\\n        delete resourceId[_id];\\n\\n        isResource[resourceToRemove] = false;\\n\\n        emit ResourceRemoved(resourceToRemove, _id);\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to add a fee to a module\\n     *\\n     * @param _module               Address of the module contract to add fee to\\n     * @param _feeType              Type of the fee to add in the module\\n     * @param _newFeePercentage     Percentage of fee to add in the module (denominated in preciseUnits eg 1% = 1e16)\\n     */\\n    function addFee(address _module, uint256 _feeType, uint256 _newFeePercentage) external onlyInitialized onlyOwner {\\n        if (!isModule[_module]) revert Controller__ModuleInvalid();\\n\\n        if (fees[_module][_feeType] != 0) revert Controller__FeeTypeExists();\\n\\n        fees[_module][_feeType] = _newFeePercentage;\\n\\n        emit FeeEdited(_module, _feeType, _newFeePercentage);\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to edit a fee in an existing module\\n     *\\n     * @param _module               Address of the module contract to edit fee\\n     * @param _feeType              Type of the fee to edit in the module\\n     * @param _newFeePercentage     Percentage of fee to edit in the module (denominated in preciseUnits eg 1% = 1e16)\\n     */\\n    function editFee(address _module, uint256 _feeType, uint256 _newFeePercentage) external onlyInitialized onlyOwner {\\n        if (!isModule[_module]) revert Controller__ModuleInvalid();\\n\\n        if (fees[_module][_feeType] == 0) revert Controller__FeeTypeInvalid();\\n\\n        fees[_module][_feeType] = _newFeePercentage;\\n\\n        emit FeeEdited(_module, _feeType, _newFeePercentage);\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows governance to edit the protocol fee recipient\\n     *\\n     * @param _newFeeRecipient      Address of the new protocol fee recipient\\n     */\\n    function editFeeRecipient(address _newFeeRecipient) external onlyInitialized onlyOwner {\\n        if (_newFeeRecipient == address(0)) revert Controller__ZeroAddress();\\n\\n        feeRecipient = _newFeeRecipient;\\n\\n        emit FeeRecipientChanged(_newFeeRecipient);\\n    }\\n\\n    /* ============ External Getter Functions ============ */\\n\\n    function getModuleFee(\\n        address _moduleAddress,\\n        uint256 _feeType\\n    )\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return fees[_moduleAddress][_feeType];\\n    }\\n\\n    function getFactories() external view returns (address[] memory) {\\n        return factories;\\n    }\\n\\n    function getModules() external view returns (address[] memory) {\\n        return modules;\\n    }\\n\\n    function getResources() external view returns (address[] memory) {\\n        return resources;\\n    }\\n\\n    function getSets() external view returns (address[] memory) {\\n        return sets;\\n    }\\n\\n    /**\\n     * Check if a contract address is a module, Set, resource, factory or controller\\n     *\\n     * @param  _contractAddress           The contract address to check\\n     */\\n    function isSystemContract(address _contractAddress) external view returns (bool) {\\n        return (\\n            isSet[_contractAddress] ||\\n            isModule[_contractAddress] ||\\n            isResource[_contractAddress] ||\\n            isFactory[_contractAddress] ||\\n            _contractAddress == address(this)\\n        );\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"AddressArrayUtils__ArrayIndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressArrayUtils__ArrayItemNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"resourcesLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourcesIdsLength\",\"type\":\"uint256\"}],\"name\":\"Controller__ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Controller__CallerNotFactory\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Controller__FactoryExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Controller__FactoryInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Controller__FeeTypeExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Controller__FeeTypeInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Controller__IsInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Controller__ModuleExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Controller__ModuleInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Controller__ResourceExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Controller__ResourceInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Controller__SetExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Controller__SetInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Controller__Uninitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Controller__ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"FactoryAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"FactoryRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_feeType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feePercentage\",\"type\":\"uint256\"}],\"name\":\"FeeEdited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newFeeRecipient\",\"type\":\"address\"}],\"name\":\"FeeRecipientChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"ModuleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"ModuleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_resource\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"ResourceAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_resource\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"ResourceRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_setToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"SetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_setToken\",\"type\":\"address\"}],\"name\":\"SetRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"addFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newFeePercentage\",\"type\":\"uint256\"}],\"name\":\"addFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"addModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_resource\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"addResource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_setToken\",\"type\":\"address\"}],\"name\":\"addSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newFeePercentage\",\"type\":\"uint256\"}],\"name\":\"editFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFeeRecipient\",\"type\":\"address\"}],\"name\":\"editFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"factories\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFactories\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_moduleAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeType\",\"type\":\"uint256\"}],\"name\":\"getModuleFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getModules\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getResources\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_factories\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_modules\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_resources\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_resourceIds\",\"type\":\"uint256[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFactory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isModule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isResource\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"isSystemContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"modules\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"removeFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"removeModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"removeResource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_setToken\",\"type\":\"address\"}],\"name\":\"removeSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"resourceId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"resources\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Controller", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000073e3552cdbe9f4f38a1ddf1262b87aa208d2225c", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}