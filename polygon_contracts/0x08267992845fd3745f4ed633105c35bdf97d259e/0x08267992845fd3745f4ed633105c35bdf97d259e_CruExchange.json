{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC20/interfaces/IERC20Collateral.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.18;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IERC20Collateral is IERC20{\\r\\n    function decimals() external view returns (uint8);\\r\\n}\"\r\n    },\r\n    \"contracts/ERC20/interfaces/IOperable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IOperable is IERC20{\\r\\n    function mint(uint256 amount) external;\\r\\n    function burn(uint amount) external;\\r\\n    function raise(uint256 amount) external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IOperableAward is IOperable {\\r\\n    function setAwardSupply(uint256 supply) external;\\r\\n}\"\r\n    },\r\n    \"contracts/Exchange/CruExchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\nimport \\\"../Marketplace/Tax.sol\\\";\\r\\nimport \\\"../ERC20/interfaces/IOperable.sol\\\";\\r\\n\\r\\ncontract CruExchange is ReentrancyGuard, Tax {\\r\\n    using ECDSALib for bytes;\\r\\n    using SafeERC20 for IERC20;\\r\\n    uint256 private fxRate = 1000000; //cru equivalent per USDT\\r\\n    IOperable private cruToken;\\r\\n\\r\\n    event Exchange(\\r\\n        address indexed sender,\\r\\n        uint256 cruAmount,\\r\\n        uint256 collateralSent,\\r\\n        uint256 fxRate,\\r\\n        uint256 taxPercentage\\r\\n    );\\r\\n\\r\\n    event NewRate(uint256 previous, uint256 current);\\r\\n\\r\\n    constructor(\\r\\n        address _cruToken,\\r\\n        address _wosStakingAddress,\\r\\n        address _collateral,\\r\\n        address _aggAddress,\\r\\n        IECDSASignature2 _signature,\\r\\n        IUAC _uac\\r\\n    )\\r\\n        Tax(\\r\\n            _wosStakingAddress,\\r\\n            _collateral,\\r\\n            _aggAddress,\\r\\n            _signature,\\r\\n            _uac\\r\\n        )\\r\\n    {\\r\\n        cruToken = IOperable(_cruToken);\\r\\n    }\\r\\n\\r\\n    function swap(uint256 cruAmount) external nonReentrant {\\r\\n        uac.verifyAll(msg.sender, 3);\\r\\n        uint256 senderBalance = cruToken.balanceOf(msg.sender);\\r\\n        require(cruAmount <= senderBalance, \\\"you don't have enough CRU Tokens\\\");\\r\\n\\r\\n        IERC20(cruToken).safeTransferFrom(msg.sender, address(this), cruAmount);\\r\\n        cruToken.burn(cruAmount);\\r\\n\\r\\n        uint256 collateralToSend = converAmount(cruAmount);\\r\\n\\r\\n        _collateralTransfer(msg.sender, _getPriceWithoutTax(collateralToSend)); //send the USDT to the sender\\r\\n        _taxDistribution(collateralToSend);\\r\\n\\r\\n        emit Exchange(\\r\\n            msg.sender,\\r\\n            cruAmount,\\r\\n            _getPriceWithoutTax(collateralToSend),\\r\\n            fxRate,\\r\\n            tax\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function converAmount(uint cruAmount) private view returns (uint256) {\\r\\n        if (fxRate < raise(1)) return cruAmount / (raise(1) / fxRate);\\r\\n        return cruAmount * (fxRate / raise(1));\\r\\n    }\\r\\n\\r\\n    function changeFxRate(\\r\\n        uint256 amount,\\r\\n        uint256 nonce,\\r\\n        uint256 timestamp,\\r\\n        bytes[] memory signatures\\r\\n    ) external onlyOwner {\\r\\n        signature.verifyMessage(\\r\\n            abi.encodePacked(amount, msg.sender).hash(),\\r\\n            nonce,\\r\\n            timestamp,\\r\\n            signatures\\r\\n        );\\r\\n\\r\\n        emit NewRate(fxRate, amount);\\r\\n        fxRate = amount;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/ISimpleStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.18;\\r\\n\\r\\ninterface ISimpleStaking{\\r\\n    function distribute() external;\\r\\n}\"\r\n    },\r\n    \"contracts/Marketplace/CollateralWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport \\\"../util/CriticalTracer.sol\\\";\\r\\nimport \\\"../ERC20/interfaces/IERC20Collateral.sol\\\";\\r\\nimport \\\"../Security2/Interfaces/IECDSASignature2.sol\\\";\\r\\nimport \\\"../Security2/Security2Base.sol\\\";\\r\\nimport \\\"./DecimalUtils.sol\\\";\\r\\n\\r\\nabstract contract CollateralWrapper is\\r\\n    Security2Base,\\r\\n    DecimalUtils,\\r\\n    CriticalTracer\\r\\n{\\r\\n    using ECDSALib for bytes;\\r\\n    using SafeERC20 for IERC20;\\r\\n    IERC20 private collateral;\\r\\n\\r\\n    event CollateralAddressChanged(address newCollateralAddress);\\r\\n\\r\\n    constructor(\\r\\n        address _collateral,\\r\\n        IECDSASignature2 _signature,\\r\\n        IUAC _uac\\r\\n    ) Security2Base(_signature, _uac) DecimalUtils(_signature, _uac) {\\r\\n        require(_collateral != address(0), \\\"Collateral cannot be zero\\\");\\r\\n        collateral = IERC20(_collateral);\\r\\n        _setDecimalTo(_collateral, 1); //1 USDT\\r\\n    }\\r\\n\\r\\n    function getCollateralAddress() external view returns (address) {\\r\\n        return address(collateral);\\r\\n    }\\r\\n\\r\\n    function _collateralTransfer(\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal validateBalance(amount) {\\r\\n        require(to != address(0), _ctMsg(\\\"address cannot be zero\\\"));\\r\\n        require(amount > 0, _ctMsg(\\\"amount cannot be zero\\\"));\\r\\n        require(\\r\\n            amount <= _collateralBalanceOf(address(this)),\\r\\n            _ctMsg(\\\"not enough collateral\\\")\\r\\n        );\\r\\n        uac.verifyGameStatus(3);\\r\\n        collateral.safeTransfer(to, amount);\\r\\n    }\\r\\n\\r\\n    function _collateralTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal validateBalanceFrom(amount) {\\r\\n        require(to != address(0), _ctMsg(\\\"address cannot be zero\\\"));\\r\\n        require(from != address(0), _ctMsg(\\\"the from address cannot be zero\\\"));\\r\\n        require(amount > 0, _ctMsg(\\\"amount cannot be zero\\\"));\\r\\n        uac.verifyGameStatus(3);\\r\\n        collateral.safeTransferFrom(from, to, amount);\\r\\n    }\\r\\n\\r\\n    function _collateralBalanceOf(\\r\\n        address account\\r\\n    ) internal view returns (uint256) {\\r\\n        return collateral.balanceOf(account);\\r\\n    }\\r\\n\\r\\n    function extractCollateral(\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 nonce,\\r\\n        uint256 timestamp,\\r\\n        bytes[] memory signatures\\r\\n    ) external {\\r\\n        signature.verifyMessage(\\r\\n            abi.encodePacked(to, amount, msg.sender).hash(),\\r\\n            nonce,\\r\\n            timestamp,\\r\\n            signatures\\r\\n        );\\r\\n        _collateralTransfer(to, amount);\\r\\n    }\\r\\n\\r\\n    function decimals() external view returns (uint8) {\\r\\n        return getDecimals(1); //1 USDT\\r\\n    }\\r\\n\\r\\n    function raise(uint256 amount) internal view returns (uint256) {\\r\\n        return amount * 10 ** getDecimals(1); //1 USDT\\r\\n    }\\r\\n\\r\\n    modifier validateBalance(uint256 price) {\\r\\n        require(\\r\\n            collateral.balanceOf(address(this)) >= price,\\r\\n            _ctMsg(\\\"there is not enough collateral to transfer\\\")\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier validateBalanceFrom(uint256 price) {\\r\\n        require(\\r\\n            collateral.balanceOf(msg.sender) >= price,\\r\\n            _ctMsg(\\\"you dont have enough collateral\\\")\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Marketplace/DecimalUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport \\\"../ERC20/interfaces/IERC20Collateral.sol\\\";\\r\\nimport \\\"../Security2/Security2Base.sol\\\";\\r\\n\\r\\ncontract DecimalUtils {\\r\\n    using ECDSALib for bytes;\\r\\n    mapping(uint => uint8) private decimalsByToken;\\r\\n    IECDSASignature2 private signature;\\r\\n    IUAC private uac;\\r\\n\\r\\n    constructor(IECDSASignature2 _signature, IUAC _uac) {\\r\\n        require(address(_signature) != address(0), \\\"Signature cannot be zero\\\");\\r\\n        require(address(_uac) != address(0), \\\"Uac cannot be zero\\\");\\r\\n        signature = _signature;\\r\\n        uac = _uac;\\r\\n        decimalsByToken[1] = 6; //USDT\\r\\n        decimalsByToken[2] = 6; //BAR\\r\\n        decimalsByToken[3] = 6; //WOS\\r\\n        decimalsByToken[4] = 6; //CRU\\r\\n    }\\r\\n\\r\\n    function setDecimalTo(\\r\\n        address token,\\r\\n        uint key,\\r\\n        uint256 nonce,\\r\\n        uint256 timestamp,\\r\\n        bytes[] memory signatures\\r\\n    ) external {\\r\\n        signature.verifyMessage(\\r\\n            abi.encodePacked(token, key, msg.sender).hash(),\\r\\n            nonce,\\r\\n            timestamp,\\r\\n            signatures\\r\\n        );\\r\\n        _setDecimalTo(token, key);\\r\\n    }\\r\\n\\r\\n    function _setDecimalTo(address token, uint key) internal {\\r\\n        uac.verifyGameStatus(5);\\r\\n        IERC20Collateral erc20Token = IERC20Collateral(token);\\r\\n        uint8 decimals = erc20Token.decimals();\\r\\n        decimalsByToken[key] = decimals;\\r\\n    }\\r\\n\\r\\n    function getDecimals(uint key) internal view returns (uint8) {\\r\\n        uint8 tDecimals = decimalsByToken[key];\\r\\n        return tDecimals > 0 ? tDecimals : 6;\\r\\n    }\\r\\n\\r\\n    function raise(uint256 amount, uint key) internal view returns (uint256) {\\r\\n        return amount * 10 ** getDecimals(key);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Marketplace/Tax.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./CollateralWrapper.sol\\\";\\r\\nimport \\\"./../ISimpleStaking.sol\\\";\\r\\n\\r\\ncontract Tax is CollateralWrapper {\\r\\n    using ECDSALib for bytes;\\r\\n\\r\\n    uint256 tax = 5;\\r\\n    uint256 taxStakingPercent = 20;\\r\\n    uint256 taxDGPercent = 20;\\r\\n    uint256 taxJSPercent = 20;\\r\\n    uint256 taxAggPercent = 20;\\r\\n    uint256 taxOpPercent = 10;\\r\\n    uint256 taxSlPercent = 10;\\r\\n    address private WosStakingAddress;\\r\\n    address private DG;\\r\\n    address private JS;\\r\\n    address private OpWallet;\\r\\n    address private Agregadores;\\r\\n    address private SLWallet;\\r\\n\\r\\n    constructor(\\r\\n        address _wosStakingAddress,\\r\\n        address _collateral,\\r\\n        address _aggAddress,\\r\\n        IECDSASignature2 _signature,\\r\\n        IUAC _uac\\r\\n    ) CollateralWrapper(_collateral, _signature, _uac) {\\r\\n        WosStakingAddress = _wosStakingAddress; //Smart Contract\\r\\n        Agregadores = _aggAddress; //Contract\\r\\n        require(\\r\\n            WosStakingAddress != address(0),\\r\\n            \\\"StakingAddress cannot be zero\\\"\\r\\n        );\\r\\n        require(\\r\\n            _aggAddress != address(0),\\r\\n            \\\"AggAddress cannot be zero\\\"\\r\\n        );\\r\\n        DG = 0x9Fe30a5c5424BC3E461AD13B4947465e6460113d; //wallet\\r\\n        JS = 0x491f38D5ae8Dc0C1fB7Ad7AB3A122393F758937F; //wallet\\r\\n        OpWallet = 0x8A1078E9C93D98E724b54841fbb60E7Ea28d1654; //wallet\\r\\n        SLWallet = 0xC3353c719b7D987123b248d5Fe4b35cbC05e5fa7; //wallet\\r\\n        //-----------------------------------------------------------------\\r\\n    }\\r\\n\\r\\n    function setStakingAddress(\\r\\n        address newAddress,\\r\\n        uint256 nonce,\\r\\n        uint256 timestamp,\\r\\n        bytes[] memory signatures\\r\\n    ) external {\\r\\n        signature.verifyMessage(\\r\\n            abi.encodePacked(newAddress, msg.sender).hash(),\\r\\n            nonce,\\r\\n            timestamp,\\r\\n            signatures\\r\\n        );\\r\\n        require(\\r\\n            WosStakingAddress != address(0),\\r\\n            \\\"StakingAddress cannot be zero\\\"\\r\\n        );\\r\\n        WosStakingAddress = newAddress;\\r\\n    }\\r\\n\\r\\n    function setGlobalFeePercent(\\r\\n        uint256 newTax,\\r\\n        uint256 nonce,\\r\\n        uint256 timestamp,\\r\\n        bytes[] memory signatures\\r\\n    ) external {\\r\\n        require(newTax <= 5 && newTax > 0, \\\"Invalid tax amount\\\");\\r\\n        _verifySignatures(newTax, nonce, timestamp, signatures);\\r\\n        tax = newTax;\\r\\n    }\\r\\n\\r\\n    function setTaxStakingPercent(\\r\\n        uint256 newTaxStakingPercent,\\r\\n        uint256 nonce,\\r\\n        uint256 timestamp,\\r\\n        bytes[] memory signatures\\r\\n    ) external {\\r\\n        require(\\r\\n            newTaxStakingPercent <= 100 && newTaxStakingPercent > 0,\\r\\n            \\\"Tax must be greater than 0 and smaller than 100%\\\"\\r\\n        );\\r\\n        _verifySignatures(newTaxStakingPercent, nonce, timestamp, signatures);\\r\\n        taxStakingPercent = newTaxStakingPercent;\\r\\n        _totalTaxPercentageVerify();\\r\\n    }\\r\\n\\r\\n    function setTaxDGPercent(\\r\\n        uint256 newTaxDGPercent,\\r\\n        uint256 nonce,\\r\\n        uint256 timestamp,\\r\\n        bytes[] memory signatures\\r\\n    ) external {\\r\\n        require(\\r\\n            newTaxDGPercent > 0 && newTaxDGPercent <= 100,\\r\\n            \\\"Tax must be greater than 0 and smaller than 100%\\\"\\r\\n        );\\r\\n        _verifySignatures(newTaxDGPercent, nonce, timestamp, signatures);\\r\\n        taxDGPercent = newTaxDGPercent;\\r\\n        _totalTaxPercentageVerify();\\r\\n    }\\r\\n\\r\\n    function setTaxJSPercent(\\r\\n        uint256 newTaxJSPercent,\\r\\n        uint256 nonce,\\r\\n        uint256 timestamp,\\r\\n        bytes[] memory signatures\\r\\n    ) external {\\r\\n        require(\\r\\n            newTaxJSPercent > 0 && newTaxJSPercent <= 100,\\r\\n            \\\"Tax must be greater than 0 and smaller than 100%\\\"\\r\\n        );\\r\\n        _verifySignatures(newTaxJSPercent, nonce, timestamp, signatures);\\r\\n        taxJSPercent = newTaxJSPercent;\\r\\n        _totalTaxPercentageVerify();\\r\\n    }\\r\\n\\r\\n    function setTaxAggPercent(\\r\\n        uint256 newTaxAggPercent,\\r\\n        uint256 nonce,\\r\\n        uint256 timestamp,\\r\\n        bytes[] memory signatures\\r\\n    ) external {\\r\\n        require(\\r\\n            newTaxAggPercent > 0 && newTaxAggPercent <= 100,\\r\\n            \\\"Tax must be greater than 0 and smaller than 100%\\\"\\r\\n        );\\r\\n        _verifySignatures(newTaxAggPercent, nonce, timestamp, signatures);\\r\\n        taxAggPercent = newTaxAggPercent;\\r\\n        _totalTaxPercentageVerify();\\r\\n    }\\r\\n\\r\\n    function setTaxOpPercent(\\r\\n        uint256 newTaxOpPercent,\\r\\n        uint256 nonce,\\r\\n        uint256 timestamp,\\r\\n        bytes[] memory signatures\\r\\n    ) external {\\r\\n        require(\\r\\n            newTaxOpPercent > 0 && newTaxOpPercent <= 100,\\r\\n            \\\"Tax must be greater than 0 and smaller than 100%\\\"\\r\\n        );\\r\\n        _verifySignatures(newTaxOpPercent, nonce, timestamp, signatures);\\r\\n        taxOpPercent = newTaxOpPercent;\\r\\n        _totalTaxPercentageVerify();\\r\\n    }\\r\\n\\r\\n    function setTaxSlPercent(\\r\\n        uint256 newTaxSlPercent,\\r\\n        uint256 nonce,\\r\\n        uint256 timestamp,\\r\\n        bytes[] memory signatures\\r\\n    ) external {\\r\\n        require(\\r\\n            newTaxSlPercent > 0 && newTaxSlPercent <= 100,\\r\\n            \\\"Tax must be greater than 0 and smaller than 100%\\\"\\r\\n        );\\r\\n        _verifySignatures(newTaxSlPercent, nonce, timestamp, signatures);\\r\\n        taxSlPercent = newTaxSlPercent;\\r\\n        _totalTaxPercentageVerify();\\r\\n    }\\r\\n\\r\\n    function _verifySignatures(\\r\\n        uint256 amount,\\r\\n        uint256 nonce,\\r\\n        uint256 timestamp,\\r\\n        bytes[] memory signatures\\r\\n    ) private {\\r\\n        signature.verifyMessage(\\r\\n            abi.encodePacked(amount, msg.sender).hash(),\\r\\n            nonce,\\r\\n            timestamp,\\r\\n            signatures\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _totalTaxPercentageVerify() private view {\\r\\n        uint total = taxStakingPercent +\\r\\n            taxDGPercent +\\r\\n            taxJSPercent +\\r\\n            taxAggPercent +\\r\\n            taxOpPercent +\\r\\n            taxSlPercent;\\r\\n        require(total <= 100, \\\"Total tax percentage cannot exceed 100\\\");\\r\\n    }\\r\\n\\r\\n    function _getPriceWithoutTax(\\r\\n        uint256 price\\r\\n    ) internal view returns (uint256) {\\r\\n        return price - (tax * price) / 100;\\r\\n    }\\r\\n\\r\\n    function _taxDistribution(uint256 price) internal {\\r\\n        uint256 taxAmount = (tax * price) / 100;\\r\\n\\r\\n        uint256 amountStaking = (taxAmount * taxStakingPercent) / 100;\\r\\n        uint256 amountDG = (taxAmount * taxDGPercent) / 100;\\r\\n        uint256 amountJS = (taxAmount * taxJSPercent) / 100;\\r\\n        uint256 amountAgg = (taxAmount * taxAggPercent) / 100;\\r\\n        uint256 amountOp = (taxAmount * taxOpPercent) / 100;\\r\\n        uint256 amountSl = (taxAmount * taxSlPercent) / 100;\\r\\n\\r\\n        _ctSign(\\\"TX_T_STEP_1\\\");\\r\\n        _collateralTransfer(WosStakingAddress, amountStaking);\\r\\n\\r\\n        _ctSign(\\\"TX_T_STEP_2\\\");\\r\\n        _collateralTransfer(DG, amountDG);\\r\\n\\r\\n        _ctSign(\\\"TX_T_STEP_3\\\");\\r\\n        _collateralTransfer(JS, amountJS);\\r\\n\\r\\n        _ctSign(\\\"TX_T_STEP_4\\\");\\r\\n        _collateralTransfer(Agregadores, amountAgg);\\r\\n\\r\\n        _ctSign(\\\"TX_T_STEP_5\\\");\\r\\n        _collateralTransfer(OpWallet, amountOp);\\r\\n\\r\\n        _ctSign(\\\"TX_T_STEP_6\\\");\\r\\n        _collateralTransfer(SLWallet, amountSl);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Security2/Interfaces/IECDSASignature2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.18;\\r\\n\\r\\ninterface IECDSASignature2 {\\r\\n    function verifyMessage(bytes32 messageHash, uint256 nonce, uint256 timestamp, bytes[] memory signatures) external;\\r\\n    function signatureStatus(bytes32 messageHash, uint256 nonce, uint256 timestamp, bytes[] memory signatures) external view returns(uint8);\\r\\n}\"\r\n    },\r\n    \"contracts/Security2/Interfaces/IUAC.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.18;\\r\\n\\r\\ninterface IUAC {\\r\\n    function verifyUser(address user) external view;\\r\\n    function verifyGameStatus(uint256 _panicLevel) external view;\\r\\n    function verifyAll(address user, uint256 _panicLevel) external view;\\r\\n    function isUserBanned(address user) external view returns (bool);\\r\\n    function getGameStatus() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Security2/libs/ECDSALib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary ECDSALib {\\r\\n    function hash(bytes memory encodePackedMsg) internal pure returns (bytes32) {\\r\\n        return keccak256(encodePackedMsg);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/Security2/Security2Base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport \\\"./Interfaces/IECDSASignature2.sol\\\";\\r\\nimport \\\"./Interfaces/IUAC.sol\\\";\\r\\nimport \\\"./libs/ECDSALib.sol\\\";\\r\\n\\r\\nabstract contract Security2Base {\\r\\n    IECDSASignature2 internal signature;\\r\\n    IUAC internal uac;\\r\\n\\r\\n    constructor(IECDSASignature2 _signature, IUAC _uac) {\\r\\n        require(address(_signature) != address(0), \\\"Signature cannot be zero\\\");\\r\\n        require(address(_uac) != address(0), \\\"Uac cannot be zero\\\");\\r\\n        signature = _signature;\\r\\n        uac = _uac;\\r\\n    }\\r\\n\\r\\n    function setUAC(\\r\\n        IUAC _uac,\\r\\n        uint256 nonce,\\r\\n        uint256 timestamp,\\r\\n        bytes[] memory signatures\\r\\n    ) external {\\r\\n        bytes32 hash = keccak256(abi.encodePacked(address(_uac), msg.sender));\\r\\n        signature.verifyMessage(hash, nonce, timestamp, signatures);\\r\\n        uac = _uac;\\r\\n    }\\r\\n\\r\\n    function setSignatureAuditor(\\r\\n        IECDSASignature2 _signature,\\r\\n        uint256 nonce,\\r\\n        uint256 timestamp,\\r\\n        bytes[] memory signatures\\r\\n    ) external {\\r\\n        bytes32 hash = keccak256(\\r\\n            abi.encodePacked(address(_signature), msg.sender)\\r\\n        );\\r\\n        signature.verifyMessage(hash, nonce, timestamp, signatures);\\r\\n        signature = _signature;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/util/CriticalTracer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\nabstract contract CriticalTracer is Ownable {\\r\\n    string private trace;\\r\\n    bool private enabled = false;\\r\\n\\r\\n    function _ctMsg(string memory message) internal view returns (string memory) {\\r\\n        if (!enabled) return message;\\r\\n        return string.concat(message, \\\"; \\\", trace);\\r\\n    }\\r\\n\\r\\n    function _ctSign(string memory sign) internal {\\r\\n        trace = sign;\\r\\n    }\\r\\n\\r\\n    function setTracerStatus(bool enable) onlyOwner public {\\r\\n        enabled = enable;\\r\\n    }\\r\\n\\r\\n    function getTracerStatus() public view returns (bool) {\\r\\n        return enabled;\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cruToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wosStakingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aggAddress\",\"type\":\"address\"},{\"internalType\":\"contract IECDSASignature2\",\"name\":\"_signature\",\"type\":\"address\"},{\"internalType\":\"contract IUAC\",\"name\":\"_uac\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCollateralAddress\",\"type\":\"address\"}],\"name\":\"CollateralAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cruAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralSent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fxRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taxPercentage\",\"type\":\"uint256\"}],\"name\":\"Exchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previous\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"current\",\"type\":\"uint256\"}],\"name\":\"NewRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"changeFxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"extractCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTracerStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"setDecimalTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"setGlobalFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IECDSASignature2\",\"name\":\"_signature\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"setSignatureAuditor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"setStakingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTaxAggPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"setTaxAggPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTaxDGPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"setTaxDGPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTaxJSPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"setTaxJSPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTaxOpPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"setTaxOpPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTaxSlPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"setTaxSlPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTaxStakingPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"setTaxStakingPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setTracerStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUAC\",\"name\":\"_uac\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"setUAC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cruAmount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CruExchange", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000ca930e0000115217a4868f6012a9ab253b7f0cf1000000000000000000000000bfb99535decb745ff309bbec8dc08cd20cf59db8000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f000000000000000000000000441df4a0f1c927f343dca95a4d60f116884bf091000000000000000000000000b34776b3148993e4e010ec8edd627f0276e3886b00000000000000000000000061825ce7e3075457b446cfc4501aa95ef70e7db2", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}