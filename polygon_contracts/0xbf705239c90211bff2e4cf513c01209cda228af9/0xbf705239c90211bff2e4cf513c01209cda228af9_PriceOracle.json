{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./abstract/AuthModifiers.sol\\\";\\nimport \\\"./interfaces/IPriceOracle.sol\\\";\\n\\ncontract PriceOracle is IPriceOracle, Ownable, AuthModifiers {\\n    uint256 public price;\\n    uint32 public lastUpdateTimestamp;\\n\\n    constructor(address _registry, uint256 _price) {\\n        __AuthModifiers_init(_registry);\\n        price = _price;\\n        lastUpdateTimestamp = uint32(block.timestamp);\\n    }\\n\\n    function setPrice(uint256 _price) external onlyPriceOracle {\\n        emit UpdatePrice(price, _price);\\n        price = _price;\\n        lastUpdateTimestamp = uint32(block.timestamp);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/abstract/AuthModifiers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IRegistry.sol\\\";\\n\\nabstract contract AuthModifiers is Initializable {\\n    IRegistry private registry;\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __AuthModifiers_init_unchained(address _registry) internal initializer {\\n        registry = IRegistry(_registry);\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __AuthModifiers_init(address _registry) public initializer {\\n        __AuthModifiers_init_unchained(_registry);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than a GET Protocol Relayer admin account.\\n     */\\n    modifier onlyIntegratorAdmin() {\\n        registry.auth().hasIntegratorAdminRole(msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than a GET Protocol Relayer account.\\n     */\\n    modifier onlyRelayer() {\\n        registry.auth().hasRelayerRole(msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any contract other than a GET Protocol Factory contract.\\n     */\\n    modifier onlyFactory() {\\n        registry.auth().hasFactoryRole(msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any contract different from an instance of a GET protocol Event Contract\\n     */\\n    modifier onlyEvent() {\\n        registry.auth().hasEventRole(msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any contract other than the GET Protocol TopUp Contract.\\n     */\\n    modifier onlyTopUp() {\\n        registry.auth().hasTopUpRole(msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the GET Protocol EOA(S) designated for TopUps.\\n     */\\n    modifier onlyCustodialTopUp() {\\n        registry.auth().hasCustodialTopUpRole(msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any contract other than the PriceOracle update EOA.\\n     */\\n    modifier onlyPriceOracle() {\\n        registry.auth().hasPriceOracleRole(msg.sender);\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IPriceOracle {\\n    event UpdatePrice(uint256 _old, uint256 _new);\\n\\n    function price() external view returns (uint256);\\n\\n    function lastUpdateTimestamp() external view returns (uint32);\\n\\n    function setPrice(uint256 _price) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IAuth.sol\\\";\\nimport \\\"./IEconomics.sol\\\";\\nimport \\\"./IEventFactory.sol\\\";\\nimport \\\"./IPriceOracle.sol\\\";\\nimport \\\"./ITopUp.sol\\\";\\n\\ninterface IRegistry {\\n    event UpdateAuth(address _old, address _new);\\n    event UpdateEconomics(address _old, address _new);\\n    event UpdateEventFactory(address _old, address _new);\\n    event UpdatePriceOracle(address _old, address _new);\\n    event UpdateTopUp(address _old, address _new);\\n    event UpdateBaseURI(string _old, string _new);\\n\\n    function auth() external view returns (IAuth);\\n\\n    function economics() external view returns (IEconomics);\\n\\n    function eventFactory() external view returns (IEventFactory);\\n\\n    function priceOracle() external view returns (IPriceOracle);\\n\\n    function topUp() external view returns (ITopUp);\\n\\n    function baseURI() external view returns (string memory);\\n\\n    function setAuth(address _auth) external;\\n\\n    function setEconomics(address _economics) external;\\n\\n    function setEventFactory(address _eventFactory) external;\\n\\n    function setPriceOracle(address _priceOracle) external;\\n\\n    function setTopUp(address _topUp) external;\\n\\n    function setBaseURI(string memory _baseURI) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAuth.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\n\\ninterface IAuth is IAccessControlUpgradeable {\\n    function hasIntegratorAdminRole(address) external view;\\n\\n    function hasFactoryRole(address) external view;\\n\\n    function hasEventRole(address) external view;\\n\\n    function hasRelayerRole(address) external view;\\n\\n    function hasTopUpRole(address) external view;\\n\\n    function hasCustodialTopUpRole(address) external view;\\n\\n    function hasPriceOracleRole(address) external view;\\n\\n    function grantEventRole(address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEconomics.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IEventImplementation.sol\\\";\\n\\ninterface IEconomics {\\n    // Data structure containing all the different rates for a particular relayer.\\n    //   100% (1) 1_000_000,\\n    //   10% (0.1) = 100_000,\\n    //   1% (0.01) = 10_000,\\n    //   0.1% (0.001) = 1_000,\\n    //   0.01% (0.0001) = 100,\\n    //   0.001% (0,00001) = 10,\\n    //   0.0001% = (0.000001) = 1\\n    // All scaled by 1_000_000.\\n    //\\n    // USD values (e.g. minFee, maxFee) are scaled by 1_000 (tenth of a cent).\\n    struct DynamicRates {\\n        uint24 minFee;\\n        uint24 maxFee;\\n        uint24 mintRate;\\n    }\\n\\n    struct IntegratorData {\\n        uint32 index;\\n        uint32 activeTicketCount;\\n        bool isBillingEnabled;\\n        bool isConfigured;\\n        uint256 availableFuel;\\n        uint256 reservedFuel;\\n        uint256 price;\\n        DynamicRates rates;\\n        string name;\\n    }\\n\\n    struct RelayerData {\\n        uint32 integratorIndex;\\n    }\\n\\n    // The destinations array exists to define the 'splits' of the revenue of the protocol. As a simple example, lets\\n    // say that the foundation takes 80% and the DAO takes 20%, then the percentages within this array *must* sum to\\n    // 1 million in any order. The DAO address would have a percentage value of 200k and the foundation 800k.\\n    //\\n    // The precision of the percentage variable matches that of the rates above:\\n    //   100% (1) 1_000_000,\\n    //   ...\\n    //   0.0001% = (0.000001) = 1\\n    struct SpentFuelDestination {\\n        address payable destination;\\n        uint24 percentage;\\n        string label;\\n    }\\n\\n    event IntegratorToppedUp(\\n        uint32 indexed _integratorIndex,\\n        uint256 indexed _amount,\\n        uint256 _price,\\n        uint256 indexed _newAveragePrice\\n    );\\n    event FuelReserved(uint32 _integratorIndex, uint32 _ticketCount, uint256 _fuel);\\n    event BasicTaxCharged(uint32 _integratorIndex, uint32 _actionCount, uint256 _fuel);\\n    event TicketFuelEmptied(uint32 _integratorIndex, uint32 _ticketCount, uint256 _fuel);\\n    event SpentFuelCollected(\\n        SpentFuelDestination _destination,\\n        uint256 _spentFuel,\\n        uint256 _amount,\\n        uint32 _spentFuelTicketCount\\n    );\\n    event AccountBalanceCorrected(\\n        uint32 _integratorIndex,\\n        uint256 _oldBalance,\\n        uint256 _newBalance,\\n        uint256 _difference\\n    );\\n    event UpdateBasicTaxRate(uint24 _old, uint24 _new);\\n    event UpdateFuelToken(address _old, address _new);\\n    event UpdateSpentFuel(uint256 _old, uint256 _new);\\n    event UpdateDynamicRates(uint32 _integratorIndex, DynamicRates _dynamicRates);\\n    event IntegratorConfigured(\\n        uint32 _integratorIndex,\\n        string _name,\\n        address _relayerAddress,\\n        DynamicRates _dynamicRates\\n    );\\n    event IntegratorDisabled(uint32 _integratorIndex);\\n    event RelayerAdded(address _relayerAddress, uint32 _integratorIndex);\\n    event RelayerRemoved(address _relayerAddress, uint32 _integratorIndex);\\n    event EnableIntegratorBilling(uint32 _integratorIndex);\\n    event DisableIntegratorBilling(uint32 _integratorIndex);\\n    event UpdateSpentFuelDestinations(SpentFuelDestination[] _old, SpentFuelDestination[] _new);\\n\\n    function fuelToken() external returns (IERC20);\\n\\n    function basicTaxRate() external returns (uint24);\\n\\n    function spentFuelTicketCount() external returns (uint32);\\n\\n    function spentFuel() external returns (uint256);\\n\\n    function spentFuelDestinations(uint256 _index)\\n        external\\n        returns (\\n            address payable,\\n            uint24,\\n            string memory\\n        );\\n\\n    function integratorCount() external returns (uint32);\\n\\n    function topUpIntegrator(\\n        uint32 _integratorIndex,\\n        address _sender,\\n        uint256 _amount,\\n        uint256 _price\\n    ) external returns (uint256);\\n\\n    function reserveFuel(address _relayerAddress, IEventImplementation.TicketAction[] memory _ticketActions)\\n        external\\n        returns (uint256);\\n\\n    function spendBasicAction(address _relayerAddress, uint32 _actionCount) external returns (uint256);\\n\\n    function spendTicketReserved(address _relayerAddress, uint32 _ticketCount) external returns (uint256);\\n\\n    function safeCollectSpentFuel() external;\\n\\n    function correctAccountBalance(address _relayerAddress, uint256 _newBalance) external;\\n\\n    function setupIntegrator(\\n        string calldata _name,\\n        address _relayerAddress,\\n        DynamicRates calldata _dynamicRates\\n    ) external;\\n\\n    function disableIntegrator(address _relayerAddress) external;\\n\\n    function addRelayer(address _relayerAddress, uint32 _integratorIndex) external;\\n\\n    function removeRelayer(address _relayerAddress) external;\\n\\n    function updateDynamicRates(address _relayerAddress, DynamicRates memory dynamicRates) external;\\n\\n    function enableIntegratorBilling(address _relayerAddress) external;\\n\\n    function disableIntegratorBilling(address _relayerAddress) external;\\n\\n    function setBasicTaxRate(uint24 _basicTaxRate) external;\\n\\n    function setFuelToken(address _fuelToken) external;\\n\\n    function setSpentFuel(uint256 _spentFuel) external;\\n\\n    function setSpentFuelDestinations(SpentFuelDestination[] memory _spentFuelDestinations) external;\\n\\n    function viewIntegratorAveragePrice(uint32 _integratorIndex) external view returns (uint256);\\n\\n    function viewIntegratorAvailableFuel(uint32 _integratorIndex) external view returns (uint256);\\n\\n    function viewIntegratorUSDBalance(uint32 _integratorIndex) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEventFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IEventFactory {\\n    event EventCreated(\\n        address indexed relayerAddress,\\n        uint256 indexed eventIndex,\\n        address indexed eventImplementationProxy\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITopUp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\ninterface ITopUp {\\n    event ToppedUpCustodial(\\n        uint32 indexed _integratorIndex,\\n        address indexed _debitedAccount,\\n        uint256 _availableFuel,\\n        uint256 _amountFuel,\\n        uint256 _price,\\n        bytes32 _externalId\\n    );\\n    event ToppedUpNonCustodial(\\n        uint32 indexed _integratorIndex,\\n        address indexed _debitedAccount,\\n        uint256 _availableFuel,\\n        uint256 _amountFuel,\\n        uint256 _price\\n    );\\n    event UpdateBaseToken(address _old, address _new);\\n    event UpdateWeth(address _old, address _new);\\n    event UpdateRouter(address _old, address _new);\\n    event UpdateOracle(address _old, address _new);\\n\\n    function baseToken() external returns (IERC20Metadata);\\n\\n    function weth() external returns (IERC20);\\n\\n    function router() external returns (IUniswapV2Router02);\\n\\n    function topUpCustodial(\\n        uint32 _integratorIndex,\\n        uint256 _amountIn,\\n        uint256 _amountOutMin,\\n        bytes32 _externalId\\n    ) external;\\n\\n    function topUpNonCustodial(uint32 _integratorIndex, uint256 _amountFuel) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function setBaseToken(address _baseToken) external;\\n\\n    function setWeth(address _weth) external;\\n\\n    function setRouter(address _router) external;\\n\\n    function setApprovals() external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEventImplementation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IEventImplementation {\\n    enum TicketFlags {\\n        SCANNED, // 0\\n        CHECKED_IN, // 1\\n        INVALIDATED, // 2\\n        CLAIMED // 3\\n    }\\n\\n    struct BalanceUpdates {\\n        address owner;\\n        uint64 quantity;\\n    }\\n\\n    struct TokenData {\\n        address owner;\\n        uint40 basePrice;\\n        uint8 booleanFlags;\\n    }\\n\\n    struct AddressData {\\n        // uint64 more than enough\\n        uint64 balance;\\n    }\\n\\n    struct EventData {\\n        uint32 index;\\n        uint64 startTime;\\n        uint64 endTime;\\n        int32 latitude;\\n        int32 longitude;\\n        string currency;\\n        string name;\\n        string shopUrl;\\n        string imageUrl;\\n    }\\n\\n    struct TicketAction {\\n        uint256 tokenId;\\n        bytes32 externalId; // sha256 hashed, emitted in event only.\\n        address to;\\n        uint64 orderTime;\\n        uint40 basePrice;\\n    }\\n\\n    struct EventFinancing {\\n        uint64 palletIndex;\\n        address bondCouncil;\\n        bool financingConfigured;\\n        bool financingActive;\\n        bool primaryBlocked;\\n        bool secondaryBlocked;\\n        bool scanBlocked;\\n        bool claimBlocked;\\n    }\\n\\n    event PrimaryMint(TicketAction[] ticketActions, uint256 getUsed);\\n\\n    event SecondarySale(TicketAction[] ticketActions, uint256 getUsed);\\n\\n    event Scanned(TicketAction[] ticketActions, uint256 getUsed);\\n\\n    event CheckedIn(TicketAction[] ticketActions, uint256 getUsed);\\n\\n    event Invalidated(TicketAction[] ticketActions, uint256 getUsed);\\n\\n    event Claimed(TicketAction[] ticketActions, uint256 getUsed);\\n\\n    event UnderWriterSet(address eventAddress, address underWriterAddress, address requester);\\n\\n    event EventDataSet(EventData indexed _eventData);\\n\\n    event EventDataUpdated(EventData indexed _eventData);\\n\\n    event UpdateFinancing(EventFinancing indexed financing);\\n\\n    function batchActions(\\n        TicketAction[] calldata ticketActions,\\n        uint8[] memory actionCounts,\\n        BalanceUpdates[] calldata balanceUpdates\\n    ) external;\\n\\n    function setEventData(EventData memory _eventData) external;\\n\\n    function updateEventData(EventData memory _eventData) external;\\n\\n    function setFinancing(EventFinancing memory _financing) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.4;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.4;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external view returns (address);\\n    function WETH() external view returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_old\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"UpdatePrice\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"__AuthModifiers_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTimestamp\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PriceOracle", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "0000000000000000000000003ccbe2726a40d46d350e6262803092963e69a7730000000000000000000000000000000000000000000000002f2f39fc6c540000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}