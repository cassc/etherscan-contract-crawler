{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n// owned by Endblock\r\n\r\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/IAccessControl.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {AccessControl-_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/AccessControl.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\r\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\r\n     *\r\n     * Format of the revert message is described in {_checkRole}.\r\n     *\r\n     * _Available since v4.6._\r\n     */\r\n    function _checkRole(bytes32 role) internal view virtual {\r\n        _checkRole(role, _msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view virtual {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"AccessControl: account \",\r\n                        Strings.toHexString(uint160(account), 20),\r\n                        \" is missing role \",\r\n                        Strings.toHexString(uint256(role), 32)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     *\r\n     * NOTE: This function is deprecated in favor of {_grantRole}.\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     */\r\n    function _grantRole(bytes32 role, address account) internal virtual {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function _revokeRole(bytes32 role, address account) internal virtual {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/Pausable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an  stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: contracts/a6-prod-halborn/AutoPOOL.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\ninterface IAffiliate {\r\n    function setAffiliator(address account, bool enable) external;\r\n\r\n    function isAffiliate(address affiliator, address affiliate)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function isAffiliator(address account) external view returns (bool);\r\n\r\n    function getAffiliator(address affiliate) external view returns (address);\r\n\r\n    function setAffiliate(address affiliate, bool enable) external;\r\n\r\n    function resetAffiliate(\r\n        address affiliator,\r\n        address affiliate,\r\n        bool enable\r\n    ) external;\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC_20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function mint(address to, uint256 amount) external;\r\n\r\n    function burnFrom(address account, uint256 amount) external;\r\n}\r\n\r\n\r\n\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x095ea7b3, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: APPROVE_FAILED\"\r\n        );\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0xa9059cbb, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: TRANSFER_FAILED\"\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: TRANSFER_FROM_FAILED\"\r\n        );\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, \"TransferHelper: ETH_TRANSFER_FAILED\");\r\n    }\r\n}\r\n\r\ninterface ITRANSFER {\r\n    function receiveFromContract() external payable;\r\n}\r\n\r\n\r\n\r\ninterface IFLOW {\r\n\r\n    function receiveFromContract(uint256 amount) external;\r\n    function updateFromContract(uint256 amount) external;\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.8.17;\r\n\r\nlibrary Helper {\r\n\r\n\r\n\r\n    struct CONFIG {\r\n        uint32 blockDelayQtyDistr;\r\n        uint32 nextFundRate; //0...10000\r\n        uint32 affiliateRate; //0...10000\r\n        uint32 feeRate; //0...10000\r\n        uint32 stakeRate; //0...10000\r\n        uint32 strewRate; //0...10000\r\n        uint32 rateQty;\r\n        uint256 baseLimit;\r\n        uint256 weiAmount;\r\n        \r\n    }\r\n\r\n\r\n\r\n    struct CURRENT {\r\n        uint256 initBlockDistr;\r\n        uint256 last_tokenId;\r\n        uint256 first_tokenId;\r\n        uint256 currentPoolAmount;\r\n\r\n    }\r\n\r\n    struct EXERNAL {\r\n        address  operation;\r\n        address  stakend;\r\n    }\r\n\r\n    struct DISTRIBUTION {\r\n        uint256 net;\r\n        uint256 nextFund;\r\n        uint256[] rewards;\r\n    }\r\n\r\n\r\n    struct STATUS {\r\n            bool ok;\r\n            State status;\r\n            uint256 blLeftDistr;\r\n            uint256 net;\r\n            uint256 nextFund;\r\n            uint256[] rewards;\r\n    }\r\n\r\n\r\n\r\n    struct PREVSTATUS {\r\n            bool ok;\r\n            uint256 net;\r\n            uint256 nextFund;\r\n            uint256[] rewards;\r\n    }\r\n\r\n    enum State {\r\n        ACTIVE,\r\n        CLOSED_WINNER,\r\n        CLOSED_DISTRIBUTION,\r\n        CLOSED_NOWINNERS,\r\n        LOCKED\r\n    }\r\n\r\n\r\n    function getRemainingBlocks(\r\n        CONFIG memory config,\r\n        CURRENT memory current,\r\n        uint256 blockNumber\r\n        ) internal pure returns ( uint256 blockLeftDistr) {\r\n\r\n        if (blockNumber > current.initBlockDistr) {\r\n\r\n            if (config.blockDelayQtyDistr > (blockNumber - current.initBlockDistr) ) {\r\n                blockLeftDistr = config.blockDelayQtyDistr - (blockNumber - current.initBlockDistr);\r\n            } else {\r\n                blockLeftDistr = 0;\r\n            }\r\n        } else {\r\n            blockLeftDistr = config.blockDelayQtyDistr + (current.initBlockDistr - blockNumber);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function getStatus(\r\n        CONFIG memory config,\r\n        CURRENT memory current,\r\n        uint256 blockNumber\r\n        ) internal pure returns (State) {\r\n        ( uint256 blLeftDistr) = getRemainingBlocks(\r\n            config,\r\n            current,\r\n            blockNumber\r\n        );\r\n\r\n\r\n        if (blLeftDistr == 0) {\r\n\r\n            if(getTicketQTY(current)==0) return State.CLOSED_NOWINNERS;\r\n\r\n            return State.CLOSED_DISTRIBUTION;\r\n        }\r\n\r\n        return State.ACTIVE;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    function rnd(uint max,bytes32 seed) internal view returns (uint256) {\r\n\r\n        return uint256(keccak256(abi.encodePacked(block.number,  block.prevrandao, block.timestamp,seed )))%max;\r\n    }\r\n\r\n\r\n    function splitBase(CONFIG memory config, uint256 base)\r\n        internal\r\n        pure\r\n        returns (\r\n            uint256 tnet,\r\n            uint256 nextFund\r\n            )\r\n      {\r\n        nextFund = (base * config.nextFundRate) / 10000;\r\n        tnet = base - nextFund;\r\n    }\r\n\r\n\r\n\r\n    function calculateRewardDistr(\r\n        mapping(uint32 => uint32) storage _priceRates,\r\n        CONFIG memory config, \r\n        uint256 deposit)\r\n        internal\r\n        view\r\n        returns (DISTRIBUTION memory distr)\r\n        {\r\n\r\n        (distr.net,  distr.nextFund) = splitBase(\r\n            config,\r\n            deposit\r\n        );\r\n     \r\n        distr.rewards = calcrew(_priceRates,config, distr.net);\r\n\r\n    }\r\n\r\n\r\n\r\n    function calcrew(\r\n        mapping(uint32 => uint32) storage _priceRates,\r\n        CONFIG memory config, \r\n        uint256 remainder)\r\n        internal\r\n        view\r\n        returns (uint256[] memory rewards)\r\n        {\r\n\r\n        uint32 lg = config.rateQty;            \r\n        rewards = new uint256[](lg);\r\n\r\n        unchecked{\r\n            for (uint32 i ; i < lg; i++) {\r\n                rewards[i] = (remainder * _priceRates[i]) /10000;\r\n            \r\n            }\r\n        }\r\n    }\r\n\r\n    function getRewards(\r\n        mapping(uint32 => uint32) storage _priceRates,\r\n        CONFIG memory config,\r\n        CURRENT memory current, \r\n        uint256 remainder)\r\n        internal\r\n        view\r\n        returns (uint256[] memory rewards)\r\n        {\r\n\r\n        uint32 tkQTY = getTicketQTY(current);            \r\n        uint32 lg = config.rateQty;            \r\n        rewards = new uint256[](tkQTY);\r\n\r\n        if(tkQTY==0) return rewards;\r\n\r\n        if(tkQTY > lg ) {\r\n\r\n            return calcrew(_priceRates,config,remainder);   \r\n        }\r\n\r\n        uint32 tot_rate=0;\r\n\r\n        unchecked{\r\n\r\n            for (uint32 i ; i < tkQTY; i++) {\r\n                tot_rate+=_priceRates[i];\r\n            }\r\n\r\n            \r\n            uint256 tot_acum=0;\r\n            for (uint32 i ; i < tkQTY; i++) {\r\n                rewards[i] = (remainder *  ((_priceRates[i] * 10000) / tot_rate)  ) /10000;\r\n                tot_acum+=rewards[i];\r\n            }\r\n\r\n\r\n            if(tot_acum < remainder){\r\n                rewards[0]+=remainder - tot_acum;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function getCurrentValues(\r\n        mapping(uint32 => uint32) storage _priceRates,\r\n        CONFIG memory config,\r\n        CURRENT memory current,\r\n        uint256 blockNumber)\r\n        internal\r\n        view\r\n        returns (\r\n            STATUS memory st\r\n        )\r\n        {\r\n        ( st.blLeftDistr) = getRemainingBlocks(\r\n            config,\r\n            current,\r\n            blockNumber\r\n        );\r\n\r\n        st.status = getStatus(config, current, blockNumber);\r\n\r\n        ( st.net, st.nextFund)=splitBase(config, current.currentPoolAmount);\r\n        st.rewards = calcrew(_priceRates,config, st.net);\r\n\r\n        if (st.status != State.ACTIVE) {\r\n            st.blLeftDistr = config.blockDelayQtyDistr;\r\n            ( st.net, st.nextFund)=splitBase(config, st.nextFund);\r\n            st.rewards = calcrew(_priceRates,config, st.net);    \r\n\r\n        }\r\n      \r\n        st.ok = true;\r\n    }\r\n\r\n\r\n    function getWinners(\r\n        bytes32 seed,\r\n        uint32 winQty,\r\n        uint256 size,\r\n        uint256 from,\r\n        uint256 to\r\n        \r\n        ) internal  pure returns (bool ok, uint256[] memory winners) {\r\n        winners = new uint256[](winQty);\r\n        uint256 win = 0;\r\n        uint256 ix = 0;\r\n        bool exist = false;\r\n        uint256 f = winners.length;\r\n\r\n        if (winQty > size || from > to || to >= size || winQty < 2) {\r\n            return (false, winners);\r\n        }\r\n\r\n        if ((to - from) + 1 < winQty) {\r\n            return (false, winners);\r\n        }\r\n\r\n        if ((to - from) < 2) {\r\n            winners = new uint256[](2);\r\n\r\n            win = (uint256(keccak256(abi.encodePacked(seed )))) % 2;            \r\n            uint256 sec= win==1 ? 0 : 1;\r\n\r\n            winners[win]=from;\r\n            winners[sec]=to;\r\n            return (true, winners);\r\n        }\r\n\r\n\r\n\r\n        for (uint256 i ; i < f; i++) {\r\n\r\n            if (ix > winners.length-1) {\r\n                break;\r\n            }\r\n\r\n            win = from + (uint256(keccak256(abi.encodePacked(i,seed )))) % (to-from+1);            \r\n\r\n            exist = false;\r\n\r\n            for (uint256 k ; k < ix; k++) {\r\n                if (winners[k] == win) {\r\n                    exist = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (exist) {\r\n                f++;\r\n                continue;\r\n            }\r\n\r\n\r\n            if (ix > winners.length-1) {    \r\n                break;\r\n            }\r\n\r\n            winners[ix] = win;\r\n            ix++;\r\n        }\r\n\r\n        ok = true;\r\n    }\r\n\r\n\r\n\r\n\r\n    function getWinners2(\r\n        mapping(uint256 => address) storage _ownedtickets,\r\n        CONFIG memory config,CURRENT memory current,\r\n        uint256 blockNumber,\r\n        bytes32 seed\r\n        )\r\n        internal\r\n        view\r\n        returns (\r\n            bool ok,\r\n            uint256[] memory winTickets,\r\n            address[] memory winners\r\n        )\r\n        {\r\n        State st = getStatus(config, current, blockNumber);\r\n\r\n        winTickets = new uint256[](0);\r\n        winners = new address[](0);\r\n\r\n        if (st == State.ACTIVE) {\r\n            return (false, winTickets, winners);\r\n        }\r\n\r\n        if (st == State.CLOSED_NOWINNERS) {\r\n            return (true, winTickets, winners);\r\n        }\r\n\r\n        uint32 lg = config.rateQty;\r\n\r\n        uint32 tkQTY = getTicketQTY(current);\r\n\r\n        if(tkQTY==1){\r\n            winTickets = new uint256[](1);\r\n            winners = new address[](1);\r\n            winners[0] = _ownedtickets[current.last_tokenId];\r\n            winTickets[0] = current.last_tokenId;\r\n            return (true, winTickets, winners);\r\n        }\r\n\r\n\r\n        uint32 awardsQty = tkQTY > (uint32)(lg)\r\n            ? (uint32)(lg)\r\n            : (uint32)(tkQTY);\r\n\r\n\r\n        (ok, winTickets) = getWinners(\r\n            seed,\r\n            awardsQty,\r\n            current.last_tokenId+1,//size\r\n            current.first_tokenId, //from\r\n            current.last_tokenId  //to\r\n        );\r\n\r\n\r\n        if (!ok) {\r\n            return (false, winTickets, winners);\r\n        }\r\n\r\n        winners = new address[](winTickets.length);\r\n\r\n        for (uint256 i ; i < winTickets.length; i++) {\r\n            winners[i] = _ownedtickets[winTickets[i]];\r\n        }\r\n        ok=true;\r\n    }\r\n\r\n\r\n    function getTicketQTY(CURRENT memory current) internal pure returns(uint32){\r\n        if(current.last_tokenId > current.first_tokenId){\r\n            return (uint32)( current.last_tokenId - current.first_tokenId + 1);\r\n        }else{\r\n            if(current.last_tokenId == 0)  return 0;\r\n            return 1;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n//import \"./Helper.sol\"  ;\r\n\r\n\r\npragma solidity ^0.8.17;\r\n\r\n// EB v 4.0.34\r\ncontract LottoPOOL is Pausable, AccessControl {\r\n\r\n\r\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\r\n\r\n    uint256 public lastTicketID;\r\n    Helper.CONFIG public config;\r\n    Helper.CURRENT public current;\r\n    Helper.EXERNAL public extern;\r\n    IERC_20 public endtoken;\r\n    IAffiliate public affiliates;\r\n\r\n    mapping(uint32 => uint32) public priceRates;\r\n    mapping(uint256 => address) public ownedTickets;\r\n    mapping(address => uint256) public balanceTickets;\r\n    mapping(address => uint256) private _pendingAwards;\r\n  \r\n\r\n\r\n\r\n\r\n\r\n    event NewDeposit(\r\n        address indexed account,\r\n        uint256 amount,\r\n        address indexed affiliator,\r\n        uint256 feeAfiliate,\r\n        uint256 indexed tokenId,\r\n        uint256 deposit,\r\n        uint8 ticketQty\r\n    );\r\n    event Withdrawed(address indexed account, uint256 coins);\r\n    event Awarded(\r\n        address indexed account,\r\n        uint256 coins,\r\n        uint32 reward,\r\n        uint32 state\r\n    );\r\n\r\n    event StateChanged( address indexed poolID, uint256 blockNumber,uint32 status);\r\n\r\n\r\n    constructor(\r\n        uint32 initBlockDelayQtyDistr,\r\n        uint256 _weiAmount,\r\n        IERC_20 end_token,\r\n        IAffiliate _affiliate,\r\n        address  _stakend,\r\n        address _operation\r\n\r\n    ) {\r\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n        _grantRole(ADMIN_ROLE, msg.sender);\r\n        affiliates = (IAffiliate)(_affiliate);\r\n        endtoken = (IERC_20)(end_token);\r\n        config.blockDelayQtyDistr = initBlockDelayQtyDistr;\r\n\r\n        // deposit end 100% burn\r\n        config.affiliateRate = 500; // 5%\r\n        config.stakeRate = 0; // 45%\r\n\r\n        //reward discount eth\r\n        config.feeRate = 1000; // 10%\r\n        config.nextFundRate = 1000; // 10%\r\n        config.strewRate = 1000; // 10% only lotto price\r\n\r\n        // lotto winners % price eth\r\n\r\n        setRate(4000,0);\r\n        setRate(2500,1);\r\n        setRate(1000,2);\r\n        setRate(600,3);\r\n        setRate(400,4);\r\n\r\n        for(uint32 i=5; i < 20; i++){\r\n            setRate(100,i);\r\n        }\r\n\r\n\r\n        config.weiAmount = _weiAmount; // 0.01 ether;\r\n        current.initBlockDistr = block.number;\r\n\r\n        extern.stakend = _stakend;\r\n        extern.operation = _operation;\r\n\r\n        config.baseLimit = 20000000000000000000; \r\n\r\n    }\r\n\r\n\r\n\r\n    // This function is called for all messages sent to\r\n    // this contract, except plain Ether transfers\r\n    // (there is no other function except the receive function).\r\n    // Any call with non-empty calldata to this contract will execute\r\n    // the fallback function (even if Ether is sent along with the call).\r\n    fallback() external payable {}\r\n\r\n    // This function is called for plain Ether transfers, i.e.\r\n    // for every call with empty calldata.\r\n    receive() external payable {\r\n\r\n        current.currentPoolAmount += msg.value;\r\n    }\r\n\r\n\r\n    function receiveFromContract() public payable {\r\n        update(block.number);\r\n        current.currentPoolAmount += msg.value;\r\n        \r\n    }\r\n\r\n    function setRate(uint32 newRate,uint32 index) \r\n        public\r\n        onlyRole(ADMIN_ROLE)\r\n\r\n        {\r\n\r\n        require(newRate <= 10000, \"LottoPOOL: Invalid stakeRate\");\r\n        \r\n        priceRates[index]=newRate;\r\n        if(index>=config.rateQty) config.rateQty =index +1;\r\n\r\n    }    \r\n\r\n    function setRateQty(uint32 newQty) \r\n        external\r\n        onlyRole(ADMIN_ROLE)\r\n\r\n        {\r\n        require(newQty > 0, \"LottoPOOL: Invalid newQty\");\r\n\r\n        config.rateQty=newQty;\r\n    }\r\n\r\n\r\n    function changeWeiAmount(uint256 newWeiAmount)\r\n        external\r\n        onlyRole(ADMIN_ROLE)\r\n        {\r\n        require(newWeiAmount > 0, \"LottoPOOL: new amount must be greater than 0\");\r\n        config.weiAmount = newWeiAmount;\r\n\r\n    }\r\n\r\n    function changeBaseLimit(uint256 newlimit)\r\n        external\r\n        onlyRole(ADMIN_ROLE)\r\n        {\r\n        require(newlimit > 0, \"LottoPOOL: new amount must be greater than 0\");\r\n        config.baseLimit = newlimit;\r\n    }\r\n\r\n\r\n\r\n\r\n    function changeBlockDelayQtyDistr(uint32 newBlockDelayQty)\r\n        external\r\n        onlyRole(ADMIN_ROLE)\r\n        {\r\n        require(\r\n            newBlockDelayQty > 0,\r\n            \"LottoPOOL: new quantity must be greater than 0\"\r\n        );\r\n\r\n        config.blockDelayQtyDistr = newBlockDelayQty;\r\n    }\r\n\r\n    function changeOperation(address payable newOper)\r\n        external\r\n        onlyRole(ADMIN_ROLE)\r\n        {\r\n        require(newOper != address(0), \"LottoPOOL: Invalid address\");\r\n        extern.operation = newOper;\r\n    }\r\n\r\n\r\n\r\n    function changeAffiliate(address  newafil)\r\n        external\r\n        onlyRole(ADMIN_ROLE)\r\n        {\r\n        require(newafil != address(0), \"LottoPOOL: Invalid address\");\r\n\r\n        affiliates = (IAffiliate)(newafil);\r\n    }\r\n\r\n    function changeStakEnd(address  newStake)\r\n        external\r\n        onlyRole(ADMIN_ROLE)\r\n        {\r\n        require(newStake != address(0), \"LottoPOOL: Invalid address\");\r\n\r\n        extern.stakend = newStake;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    function changeDistrRate(\r\n        uint32 stakeRate,\r\n        uint32 affiliateRate,\r\n        uint32 nextFundRate\r\n        )\r\n        external\r\n        onlyRole(ADMIN_ROLE)\r\n        {\r\n        require(stakeRate <= 10000, \"LottoPOOL: Invalid stakeRate\");\r\n        require(affiliateRate <= 10000, \"LottoPOOL: Invalid affiliateRate\");\r\n        require(nextFundRate <= 10000, \"LottoPOOL: Invalid nextFundRate\");\r\n\r\n\r\n        uint depositRate= affiliateRate + stakeRate ;\r\n        require( depositRate <= 10000, \"LottoPOOL: sum depositRate exceeds 100% \");\r\n\r\n        uint baseRate= nextFundRate ;\r\n        require( baseRate <= 10000, \"LottoPOOL: sum baseRate exceeds 100% \");\r\n\r\n\r\n        config.stakeRate = stakeRate;\r\n         config.affiliateRate = affiliateRate;\r\n        config.nextFundRate = nextFundRate;\r\n \r\n    }\r\n\r\n\r\n    function withdraw() external whenNotPaused {\r\n        update(block.number);\r\n\r\n        require(_pendingAwards[_msgSender()] > 0, \"LottoPOOL: no pending awards!\");\r\n\r\n        uint256 aw = _pendingAwards[_msgSender()];\r\n\r\n        _pendingAwards[_msgSender()] = 0;\r\n\r\n        if (aw > 0) {\r\n            payable(_msgSender()).transfer(aw);\r\n        }\r\n\r\n        emit Withdrawed(_msgSender(), aw);\r\n    }\r\n\r\n    function getPendingAwards(address account)\r\n        external\r\n        view\r\n        returns (uint256 balance)\r\n        {\r\n        balance = _pendingAwards[account];\r\n    }\r\n\r\n    function getCurrentValues()\r\n        external\r\n        view\r\n        returns (\r\n            Helper.STATUS memory st\r\n        )\r\n\r\n        {\r\n\r\n        (st)=Helper.getCurrentValues(priceRates, config, current,block.number);\r\n\r\n    }\r\n\r\n\r\n   \r\n\r\n\r\n    function getPreviousRound()\r\n        public \r\n        view\r\n        returns (\r\n            bool ok,\r\n            Helper.PREVSTATUS memory st,\r\n            uint256[] memory winTickets,\r\n            address[] memory winners\r\n        )\r\n        {\r\n\r\n        ( st.net, st.nextFund)=Helper.splitBase(config, current.currentPoolAmount);\r\n\r\n        st.rewards = Helper.getRewards(priceRates,config,current, st.net);\r\n\r\n        bytes32 seed=keccak256(abi.encodePacked(\r\n                            current.initBlockDistr,\r\n                            current.last_tokenId\r\n                        ));\r\n\r\n        unchecked{\r\n            (ok, winTickets, winners) = Helper.getWinners2(ownedTickets,config, current,block.number,seed);\r\n        }\r\n        st.ok=ok;\r\n\r\n    }\r\n\r\n\r\n    function calcENDToDistribute(address _affiliate, uint256 amount)\r\n        internal\r\n        view\r\n        returns (\r\n            address affiliator,\r\n            uint256 net,\r\n            uint256 stk_amount,\r\n            uint256 aff_amount\r\n        )\r\n        {\r\n\r\n        aff_amount = (amount * config.affiliateRate) / 10000;\r\n        stk_amount = (amount * config.stakeRate) / 10000;\r\n\r\n        affiliator = affiliates.getAffiliator(_affiliate);\r\n\r\n        if (amount < 20) {\r\n            return (affiliator, amount, 0,0);\r\n        }\r\n\r\n        net = amount - (stk_amount + aff_amount);\r\n    }\r\n\r\n\r\n    function updatePool() external {\r\n        update(block.number);\r\n        \r\n    }\r\n\r\n    function update(uint256 blockNumber) internal {\r\n\r\n        Helper.State st = Helper.getStatus(config, current, blockNumber);\r\n\r\n        if (st == Helper.State.ACTIVE) {\r\n            return;\r\n        }\r\n\r\n\r\n        (bool ok,Helper.PREVSTATUS memory pst,  , address[] memory winners)=getPreviousRound();\r\n\r\n        if (!ok || !pst.ok) {\r\n            return;\r\n        }\r\n\r\n\r\n        if (st == Helper.State.CLOSED_DISTRIBUTION) {\r\n\r\n            for (uint256 i ; i < winners.length; i++) {\r\n                _pendingAwards[winners[i]]+= winners.length==1 ? pst.net :   pst.rewards[i];\r\n\r\n                emit Awarded(\r\n                    winners[i],\r\n                    winners.length==1 ? pst.net :   pst.rewards[i],\r\n                    (uint32)(i + 1),\r\n                    (uint32)(st)\r\n                );\r\n            }\r\n        }\r\n\r\n\r\n\r\n        current.first_tokenId = 0;\r\n\r\n        current.last_tokenId = 0;\r\n\r\n        current.initBlockDistr = blockNumber;\r\n\r\n        emit StateChanged( address(this), block.number,(uint32)(st));\r\n        \r\n        if (st == Helper.State.CLOSED_NOWINNERS) {\r\n            return;\r\n        }\r\n\r\n        current.currentPoolAmount = pst.nextFund;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    function playAutoPOOL(address account , uint256 blockNmber ,uint8 tkQty) internal  {\r\n\r\n        if (current.initBlockDistr == 0) {\r\n            current.initBlockDistr = blockNmber;\r\n        }\r\n\r\n        uint256 lastID =lastTicketID;\r\n\r\n        if (current.first_tokenId == 0) {\r\n            current.first_tokenId = lastID+1;\r\n        }\r\n\r\n\r\n        unchecked {\r\n            for(uint i; i<tkQty; i++ ){\r\n                lastID++;\r\n                ownedTickets[lastID] = account;\r\n                balanceTickets[account]++; \r\n            }\r\n        }\r\n\r\n\r\n        current.last_tokenId = lastID;\r\n        lastTicketID=lastID;\r\n\r\n    }\r\n\r\n\r\n    function isLocked() public view returns(bool){\r\n\r\n        Helper.State status = Helper.getStatus(config, current, block.number);\r\n\r\n        ( uint256 net, uint256  nextFund)=Helper.splitBase(config, current.currentPoolAmount);\r\n\r\n        uint256 base =config.baseLimit;\r\n\r\n        if (status == Helper.State.ACTIVE || status == Helper.State.CLOSED_NOWINNERS) {\r\n            return base > net ? true:false;\r\n\r\n        }else{\r\n            return base > nextFund ? true:false;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function getTicketQTY() external view returns(uint32){\r\n        return Helper.getTicketQTY(current);        \r\n    }\r\n\r\n\r\n\r\n    function deposit(uint8 tkQty) external  whenNotPaused {\r\n\r\n        require( tkQty > 0 && tkQty <= 100,\"LottoPOOL: Invalid 0 < tkQty <= 100 \" );\r\n\r\n        uint256 amount = config.weiAmount * tkQty;\r\n\r\n        require(\r\n            endtoken.balanceOf(_msgSender()) >= amount,\r\n            \"LottoPOOL: amount must be greater than weiAmount * tkQty \"\r\n        );\r\n\r\n\r\n        require( isLocked()==false , \"LottoPOOL: is Locked  \"  );\r\n\r\n\r\n        update(block.number);\r\n\r\n        playAutoPOOL(_msgSender() , block.number,tkQty);\r\n\r\n        (address affiliator, uint256 net, uint256 stk_amount, uint256 aff_amount) = calcENDToDistribute(\r\n            _msgSender(),\r\n            amount\r\n        );\r\n\r\n        endtoken.burnFrom(_msgSender(), amount);\r\n\r\n        if (!affiliates.isAffiliator(_msgSender())) {\r\n            affiliates.setAffiliator(_msgSender(), true);\r\n        }\r\n\r\n        if (affiliator != address(0) ){ \r\n            endtoken.mint(address(affiliator), aff_amount);\r\n        }else{\r\n           endtoken.mint(address(extern.operation), aff_amount);\r\n        }\r\n        \r\n\r\n        if (stk_amount > 0 && extern.stakend != address(0)) {\r\n\r\n            (IFLOW)(extern.stakend).updateFromContract(stk_amount);\r\n\r\n        }\r\n\r\n\r\n        emit NewDeposit(\r\n            _msgSender(),\r\n            net,\r\n            affiliator,\r\n            aff_amount,\r\n            current.last_tokenId,\r\n            amount,\r\n            tkQty\r\n        );\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    function _transfer(address payable to, uint256 amount) internal {\r\n        if (amount > 0) {\r\n            if (Address.isContract(to)) {\r\n                (ITRANSFER)(to).receiveFromContract{value: amount}();\r\n            } else {\r\n                //payable(to).transfer(amount);\r\n\r\n                // Call returns a boolean value indicating success or failure.\r\n                // This is the current recommended method to use.\r\n                (bool sent, ) = to.call{value: amount}(\"\");\r\n                require(sent, \"LottoPOOL:Failed to send Ether\");\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function pause() public onlyRole(ADMIN_ROLE) {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyRole(ADMIN_ROLE) {\r\n        _unpause();\r\n    }\r\n\r\n//aaaaa aaaa produccion!!\r\nfunction emergencyWithdraw(address destination,uint256 amount) external onlyRole(ADMIN_ROLE){\r\n    payable(destination).transfer(amount);\r\n}\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"initBlockDelayQtyDistr\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_weiAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC_20\",\"name\":\"end_token\",\"type\":\"address\"},{\"internalType\":\"contract IAffiliate\",\"name\":\"_affiliate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakend\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coins\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"reward\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"state\",\"type\":\"uint32\"}],\"name\":\"Awarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"affiliator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAfiliate\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"ticketQty\",\"type\":\"uint8\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolID\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"status\",\"type\":\"uint32\"}],\"name\":\"StateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coins\",\"type\":\"uint256\"}],\"name\":\"Withdrawed\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"affiliates\",\"outputs\":[{\"internalType\":\"contract IAffiliate\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newafil\",\"type\":\"address\"}],\"name\":\"changeAffiliate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newlimit\",\"type\":\"uint256\"}],\"name\":\"changeBaseLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newBlockDelayQty\",\"type\":\"uint32\"}],\"name\":\"changeBlockDelayQtyDistr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"stakeRate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"affiliateRate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nextFundRate\",\"type\":\"uint32\"}],\"name\":\"changeDistrRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOper\",\"type\":\"address\"}],\"name\":\"changeOperation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStake\",\"type\":\"address\"}],\"name\":\"changeStakEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newWeiAmount\",\"type\":\"uint256\"}],\"name\":\"changeWeiAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockDelayQtyDistr\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nextFundRate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"affiliateRate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"feeRate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"stakeRate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"strewRate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"rateQty\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"baseLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"current\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"initBlockDistr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"first_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPoolAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tkQty\",\"type\":\"uint8\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endtoken\",\"outputs\":[{\"internalType\":\"contract IERC_20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extern\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakend\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentValues\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"},{\"internalType\":\"enum Helper.State\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"blLeftDistr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"net\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextFund\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Helper.STATUS\",\"name\":\"st\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPendingAwards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPreviousRound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"net\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextFund\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Helper.PREVSTATUS\",\"name\":\"st\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"winTickets\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTicketQTY\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTicketID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownedTickets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"priceRates\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveFromContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newRate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"name\":\"setRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newQty\",\"type\":\"uint32\"}],\"name\":\"setRateQty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LottoPOOL", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000003e7000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000c087f8d6a1f14f71bb7cc7e1b061ca297af75550000000000000000000000009e570469f7bace79013d7a4bbc8430c8d76338eb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000090c4d36ded5ee2a72bfc5f084725b850717b01a", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5fb03afe369a85ddd4b1e9c8c3e748fb7290aa296e6d4611ffc60f7e73d77dae"}