{"SourceCode": "{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"lockupASL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"./ReentrancyGuard.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\ncontract ClaimASL is Ownable, ReentrancyGuard {\\r\\n    // ============= VARIABLES ============\\r\\n\\r\\n    // Contract address of the staked token\\r\\n    IERC20 public immutable claimToken;\\r\\n    // Timestamp of when the rewards start\\r\\n    uint256 public StartLockDate;\\r\\n\\r\\n    uint256 public LockDuration = 50 days;\\r\\n\\r\\n    uint256 public ClaimDuration = 28 days;\\r\\n\\r\\n    uint256 public laps_duration = 7 days;\\r\\n\\r\\n    mapping(address =\\u003e uint) public userLastClaim;\\r\\n\\r\\n    mapping(address =\\u003e bool) public userIsWhitelisted;\\r\\n\\r\\n    mapping(address =\\u003e uint) public userStartLockPeriod;\\r\\n\\r\\n    mapping(address =\\u003e uint) public userStartClaimPeriod;\\r\\n\\r\\n    mapping(address =\\u003e uint) public userEndClaimPeriod;\\r\\n\\r\\n    mapping(address =\\u003e uint) public userTokensToClaimPerDay;\\r\\n\\r\\n    mapping(address =\\u003e uint) public userTokensToClaim;\\r\\n\\r\\n    mapping(address =\\u003e uint) public userTokensClaimed;\\r\\n\\r\\n    constructor(\\r\\n        address _claimToken\\r\\n    ) {\\r\\n        claimToken = IERC20(_claimToken);\\r\\n        StartLockDate=block.timestamp;\\r\\n    }\\r\\n\\r\\n    // ============= MODIFIERS ============\\r\\n\\r\\n    modifier checkBeforeEndLockup {\\r\\n      require ( block.timestamp \\u003c StartLockDate + LockDuration ) ;\\r\\n      _ ;\\r\\n    }\\r\\n\\r\\n    modifier update_userData(address _account) {\\r\\n\\r\\n        if (_account != address(0)) {\\r\\n            if(userIsWhitelisted[_account]==true){\\r\\n                userStartClaimPeriod[_account]=userStartLockPeriod[_account]+LockDuration;\\r\\n                userTokensToClaim[_account]=userTokensToClaimPerDay[_account]*(LockDuration/86400);\\r\\n                userEndClaimPeriod[_account]=userStartClaimPeriod[_account]+ClaimDuration;\\r\\n                if(userLastClaim[_account]==0){\\r\\n                    userLastClaim[_account]=userStartClaimPeriod[_account];\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    event StartLockupEvent( address indexed _user);\\r\\n    event Add_Users_List( uint256[] listTokensToClaimPerDay, address[] indexed listAddress);\\r\\n    event Change_Tokens_Users_List( uint256[] listTokensToClaimPerDay, address[] indexed listAddress);\\r\\n    event Remove_Users_List( address[] indexed listAddress);\\r\\n\\r\\n    // ============= FUNCTIONS ============\\r\\n\\r\\n     // Function that whitelist users. The claiming period lasts 1000 days.\\r\\n    function add_Users_Claiming_List(uint256[] calldata listTokensToClaimPerDay, address[] calldata listAddress) onlyOwner public returns (bool) {\\r\\n        require(listTokensToClaimPerDay.length==listAddress.length);\\r\\n        for(uint i;i\\u003clistAddress.length;i++){\\r\\n            address address_user=listAddress[i];\\r\\n            uint256 tokensPerDay_user=listTokensToClaimPerDay[i];\\r\\n            // only users who are not whitelisted yet can be added\\r\\n            if(userIsWhitelisted[address_user]==false){\\r\\n                userIsWhitelisted[address_user]=true;\\r\\n                userTokensToClaimPerDay[address_user]=tokensPerDay_user;\\r\\n            }\\r\\n        }\\r\\n        emit Add_Users_List(listTokensToClaimPerDay, listAddress);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // To correct the number of tokens assigned to a Wallet\\r\\n    function change_Users_TokensToClaimPerDay(uint256[] calldata listTokensToClaimPerDay, address[] calldata listAddress) onlyOwner public returns (bool) {\\r\\n        require(listTokensToClaimPerDay.length==listAddress.length);\\r\\n        for(uint i;i\\u003clistAddress.length;i++){\\r\\n            address address_user=listAddress[i];\\r\\n            uint256 new_tokens_user=listTokensToClaimPerDay[i];\\r\\n            if(userIsWhitelisted[address_user]==true){\\r\\n                userTokensToClaimPerDay[address_user]=new_tokens_user;\\r\\n                if(new_tokens_user==0){\\r\\n                    userIsWhitelisted[address_user]=false;\\r\\n                    userLastClaim[address_user]=0;\\r\\n                    userStartLockPeriod[address_user]=0;\\r\\n                    userTokensToClaimPerDay[address_user]=0;\\r\\n                    userTokensClaimed[address_user]=0;\\r\\n                    userStartClaimPeriod[address_user]=0;\\r\\n                    userEndClaimPeriod[address_user]=0;\\r\\n                    userTokensToClaim[address_user]=0;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        emit Change_Tokens_Users_List(listTokensToClaimPerDay, listAddress);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // To remove a Wallet from the whitelist\\r\\n    function remove_from_List(address[] calldata listAddress) onlyOwner public returns (bool) {\\r\\n        for(uint i;i\\u003clistAddress.length;i++){\\r\\n            address address_user=listAddress[i];\\r\\n            userIsWhitelisted[address_user]=false;\\r\\n            userLastClaim[address_user]=0;\\r\\n            userStartLockPeriod[address_user]=0;\\r\\n            userTokensToClaimPerDay[address_user]=0;\\r\\n            userTokensClaimed[address_user]=0;\\r\\n            userStartClaimPeriod[address_user]=0;\\r\\n            userEndClaimPeriod[address_user]=0;\\r\\n            userTokensToClaim[address_user]=0;\\r\\n        }\\r\\n        emit Remove_Users_List(listAddress);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function startLockup() public returns (bool) {\\r\\n        require(userIsWhitelisted[msg.sender]==true,\\\"Not Whitelisted\\\");\\r\\n        require(userStartLockPeriod[msg.sender]==0,\\\"Lockup Period already started\\\");\\r\\n        userStartLockPeriod[msg.sender]=block.timestamp;\\r\\n        emit StartLockupEvent(msg.sender);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function change_LockDuration(uint256 _LockDuration) checkBeforeEndLockup onlyOwner public returns ( bool ) {\\r\\n        require(block.timestamp\\u003cStartLockDate+_LockDuration);\\r\\n        LockDuration=_LockDuration;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function change_ClaimDuration(uint256 _ClaimDuration) checkBeforeEndLockup onlyOwner public returns ( bool ) {\\r\\n        ClaimDuration=_ClaimDuration;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function change_laps_duration(uint256 _laps_duration) checkBeforeEndLockup onlyOwner public returns ( bool ) {\\r\\n        laps_duration=_laps_duration;\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function Claim() external update_userData(msg.sender) nonReentrant returns (bool) {\\r\\n        require(userIsWhitelisted[msg.sender]==true,\\\"Not Whitelisted\\\");\\r\\n        //check on the date of the user\\r\\n        require ( block.timestamp \\u003e= userStartClaimPeriod[msg.sender],\\\"Claim period not started\\\") ;\\r\\n        //double security\\r\\n        require(userTokensClaimed[msg.sender]\\u003cuserTokensToClaim[msg.sender], \\\"All tokens already claimed\\\");\\r\\n        uint256 now_time=block.timestamp;\\r\\n        if (now_time\\u003euserEndClaimPeriod[msg.sender]) {\\r\\n            now_time=userEndClaimPeriod[msg.sender];\\r\\n        }\\r\\n        //nomber of intervals of time (7 days) since the last claim\\r\\n        uint256 user_laps_lastUpdate=(now_time-userLastClaim[msg.sender])/(laps_duration);\\r\\n        require(user_laps_lastUpdate\\u003e0,\\\"Nothing to claim\\\");\\r\\n        //by default, 4 intervals of 7 days ==\\u003e 28 days. So division by 4\\r\\n        uint256 number_laps=ClaimDuration/laps_duration;\\r\\n        uint256 user_tokens_perLaps=userTokensToClaim[msg.sender]/number_laps;\\r\\n        //tokens that can be claimed\\r\\n        uint256 tokens_available=user_laps_lastUpdate*user_tokens_perLaps;\\r\\n        //save the date of last claim\\r\\n        userLastClaim[msg.sender]=userLastClaim[msg.sender]+(user_laps_lastUpdate*laps_duration);\\r\\n        userTokensClaimed[msg.sender]+=tokens_available;\\r\\n\\r\\n        claimToken.transfer(msg.sender,tokens_available);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function return_To_Owner(uint256 _amount)  external onlyOwner {\\r\\n        claimToken.transfer(_owner, _amount);\\r\\n    }\\r\\n\\r\\n}\\r\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address public _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and making it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        _nonReentrantBefore();\\r\\n        _;\\r\\n        _nonReentrantAfter();\\r\\n    }\\r\\n\\r\\n    function _nonReentrantBefore() private {\\r\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n    }\\r\\n\\r\\n    function _nonReentrantAfter() private {\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"listTokensToClaimPerDay\",\"type\":\"uint256[]\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"listAddress\",\"type\":\"address[]\"}],\"name\":\"Add_Users_List\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"listTokensToClaimPerDay\",\"type\":\"uint256[]\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"listAddress\",\"type\":\"address[]\"}],\"name\":\"Change_Tokens_Users_List\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"listAddress\",\"type\":\"address[]\"}],\"name\":\"Remove_Users_List\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"StartLockupEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ClaimDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"StartLockDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"listTokensToClaimPerDay\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"listAddress\",\"type\":\"address[]\"}],\"name\":\"add_Users_Claiming_List\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ClaimDuration\",\"type\":\"uint256\"}],\"name\":\"change_ClaimDuration\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_LockDuration\",\"type\":\"uint256\"}],\"name\":\"change_LockDuration\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"listTokensToClaimPerDay\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"listAddress\",\"type\":\"address[]\"}],\"name\":\"change_Users_TokensToClaimPerDay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_laps_duration\",\"type\":\"uint256\"}],\"name\":\"change_laps_duration\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"laps_duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"listAddress\",\"type\":\"address[]\"}],\"name\":\"remove_from_List\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"return_To_Owner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startLockup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userEndClaimPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userIsWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLastClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStartClaimPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStartLockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTokensClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTokensToClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTokensToClaimPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ClaimASL", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000f8dda7b3748254d562f476119b0ae6044bad10a5", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d72c8f4957fe401d28b1942e79ca5d27714259b01b6fc36c4bf2a738023f4450"}