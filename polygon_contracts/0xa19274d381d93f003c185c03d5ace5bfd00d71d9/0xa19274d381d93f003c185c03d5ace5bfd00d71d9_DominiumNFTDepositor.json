{"SourceCode": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {size := extcodesize(account)}\r\n        return size > 0;\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value : weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface IOwnable {\r\n    function manager() external view returns (address);\r\n\r\n    function renounceManagement() external;\r\n\r\n    function pushManagement(address newOwner_) external;\r\n\r\n    function pullManagement() external;\r\n}\r\n\r\ncontract Ownable is IOwnable {\r\n\r\n    address internal _owner;\r\n    address internal _newOwner;\r\n\r\n    event OwnershipPushed(address indexed previousOwner, address indexed newOwner);\r\n    event OwnershipPulled(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipPushed(address(0), _owner);\r\n    }\r\n\r\n    function manager() public view override returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceManagement() public virtual override onlyManager() {\r\n        emit OwnershipPushed(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function pushManagement(address newOwner_) public virtual override onlyManager() {\r\n        require(newOwner_ != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipPushed(_owner, newOwner_);\r\n        _newOwner = newOwner_;\r\n    }\r\n\r\n    function pullManagement() public virtual override {\r\n        require(msg.sender == _newOwner, \"Ownable: must be new owner to pull\");\r\n        emit OwnershipPulled(_owner, _newOwner);\r\n        _owner = _newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {// Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface ITreasury {\r\n    function mintRewards( address _recipient, uint _amount ) external;\r\n}\r\n\r\ninterface IOHMERC20 {\r\n    function burnFrom(address account_, uint256 amount_) external;\r\n}\r\n\r\n\r\ninterface ERC721 {\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n    function approve(address _approved, uint256 _tokenId) external payable;\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n    function getApproved(uint256 _tokenId) external view returns (address);\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n}\r\n\r\ncontract DOMERC721 {\r\n  mapping(uint => NFTType) public NFTTypes;\r\n  uint public nftTypesSize;\r\n\r\n  mapping(uint256 => uint) public TokenTypes;\r\n  \r\n  struct NFTType {\r\n    uint cost; // Cost for each NFT (in USD)\r\n    string name; // Name for each NFT\r\n    uint256 rewardAmount; // Reward Amount for each NFT\r\n    uint256 stakingCost; // Cost to stake each NFT\r\n    string baseExtension; // Path for nft attributes/image\r\n    bool available; // Still for sale\r\n  }\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\ncontract DominiumNFTDepository is Ownable, IERC721Receiver {\r\n  using SafeERC20 for IERC20;\r\n  using SafeMath for uint256;\r\n\r\n  address public nftContract;\r\n  address public feeCoin;\r\n  address public initialFeeCoin;\r\n  address public treasury; \r\n  address public liquidityPair;\r\n\r\n  bool public locked; // Locks all deposits, claims, and withdrawls\r\n  uint256 public feeLength; // Amount of time til fee expires\r\n  uint256 public initialFeeLength; // Amout of time til the next fee after initial deposit\r\n  uint256 public claimLength; // Length of time between claims\r\n\r\n  uint256 public feeLiquidityPercent; // Percent of fee going to the liquidity\r\n\r\n  uint public maxClaimFee; // Max that the fee can be before it resets on monthly fee pay\r\n  uint public claimFeeIncrement; // Amount that the fee will increment upon claim\r\n\r\n  uint public maxEpochs; // How many times the rewards will accumulate til monthly fee will need to be paid\r\n\r\n  mapping(uint => uint256) public monthlyCost; // Each Token Type mapped to a monthly cost\r\n\r\n  mapping(address => uint256[]) private deposits; // Each address mapped to all the deposited token IDs\r\n \r\n  mapping(uint256 => vestedInfo) public inventory; // Each token ID mapped to the info about each one\r\n\r\n  struct vestedInfo {\r\n    address owner; // Address of the owner\r\n    uint256 epochs; // How many times claimed\r\n    uint256 nextTimestamp; // Timestamp of next claim\r\n    uint256 feeExpiration; // Timestamp of when fee time expires\r\n    uint256 claimLength; // Current length of time between claims\r\n    uint claimFee; // Current fee to claim balance (out of 1000)\r\n    uint maxEpochs; // Current maxEpochs\r\n    bool locked; // Lock NFT to prevent claiming or withdraw\r\n  }\r\n  \r\n    uint256 private unlocked = 1;\r\n    modifier lock() {\r\n        require(unlocked == 1, \"Queue Locked\");\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n\r\n  constructor(\r\n    address _nftContract, // 0xa04a030f4c8b22b11e98e1cbaf280e0ff01fed79\r\n    address _feeCoin,\r\n    address _initialFeeCoin,\r\n    address _treasury\r\n  ) {\r\n    nftContract = _nftContract;\r\n    feeCoin = _feeCoin;\r\n    initialFeeCoin = _initialFeeCoin;\r\n    treasury = _treasury;\r\n    feeLength = 30 days;\r\n    initialFeeLength = 60 days;\r\n    claimLength = 1 days;\r\n\r\n    feeLiquidityPercent = 30;\r\n\r\n    maxEpochs = 32;\r\n\r\n    maxClaimFee = 200;\r\n    claimFeeIncrement = 50;\r\n  }\r\n\r\n  function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\r\n      return this.onERC721Received.selector;\r\n  }\r\n\r\n  function deposit(uint256 tokenID) public lock {\r\n    require(!locked, \"Deposit: All deposits are currently locked.\");\r\n    require(ERC721(nftContract).ownerOf(tokenID) == msg.sender, \"Deposit: You are not the owner of this token ID.\");\r\n    require(IERC20(initialFeeCoin).balanceOf(msg.sender) >= getStakingCost(tokenID), \"PayFee: You don't have enough for the fee.\");\r\n\r\n    addDeposit(msg.sender, tokenID);\r\n\r\n    ERC721(nftContract).safeTransferFrom(msg.sender, address(this), tokenID);\r\n\r\n    IERC20(initialFeeCoin).safeTransferFrom(msg.sender, address(this), getStakingCost(tokenID));\r\n    IERC20(initialFeeCoin).safeTransfer( liquidityPair, getStakingCost(tokenID).div(100).mul(feeLiquidityPercent)); // Going to the liqudity\r\n    IERC20(initialFeeCoin).safeTransfer( treasury, getStakingCost(tokenID).div(100).mul(100 - feeLiquidityPercent)); // Going to the treasury\r\n  }\r\n\r\n  function withdraw(uint256 tokenID) public lock {\r\n    require(!locked, \"Withdraw: All withdrawls are currently locked.\");\r\n    require(!inventory[tokenID].locked, \"Withdraw: Withdraw is locked for this token ID.\");\r\n    require(inventory[tokenID].owner == msg.sender, \"Withdraw: You are not the owner for this token ID.\");\r\n    \r\n    ERC721(nftContract).safeTransferFrom(address(this), msg.sender, tokenID);\r\n    deleteDeposit(msg.sender, tokenID);\r\n  }\r\n\r\n  function claimAll() public {\r\n    require(deposits[msg.sender].length > 0, \"ClaimAll: No NFTs available to claim\");\r\n    \r\n    for ( uint i=0; i < deposits[msg.sender].length; i++ ) {\r\n      if( block.timestamp >= inventory[deposits[msg.sender][i]].nextTimestamp ){\r\n        claim(deposits[msg.sender][i]);\r\n      }\r\n    }\r\n  }\r\n  \r\n  function payFeeAll() public lock {\r\n    require(deposits[msg.sender].length > 0, \"ClaimAll: No NFTs available to claim\");\r\n    \r\n    for ( uint i=0; i < deposits[msg.sender].length; i++ ) {\r\n      if( !isFeePaid( deposits[msg.sender][i] ) ){\r\n        payFee( deposits[msg.sender][i] );\r\n      }\r\n    }\r\n  }\r\n  \r\n  function claim(uint256 tokenID) public lock {\r\n    require(!locked, \"Claim: All claims are currently locked.\");\r\n    require(!inventory[tokenID].locked, \"Claim: Claim is locked for this token ID.\");\r\n    require(isFeePaid(tokenID), \"Claim: Fee required to be paid for this token ID.\");\r\n    require(inventory[tokenID].owner == msg.sender, \"Claim: In order to claim you must be the owner.\");\r\n\r\n    if (block.timestamp >= inventory[tokenID].nextTimestamp) {\r\n      claimBalance(tokenID);\r\n    }\r\n  }\r\n\r\n  function payFee(uint256 tokenID) public lock {\r\n    require(inventory[tokenID].owner == msg.sender, \"PayFee: You are not the owner.\");\r\n    require(!isFeePaid(tokenID), \"PayFee: You still have enough time in your period.\");\r\n    require(IERC20(feeCoin).balanceOf(msg.sender) >= monthlyCost[getTokenType(tokenID)], \"PayFee: You don't have enough for the fee.\");\r\n    \r\n    IERC20(feeCoin).safeTransferFrom(msg.sender, treasury, monthlyCost[getTokenType(tokenID)]);\r\n\r\n    claimBalance(tokenID);\r\n\r\n    inventory[tokenID].feeExpiration = block.timestamp + feeLength;\r\n    inventory[tokenID].nextTimestamp = block.timestamp;\r\n    inventory[tokenID].claimFee = 0;\r\n    inventory[tokenID].epochs = 0;\r\n    inventory[tokenID].maxEpochs = maxEpochs;\r\n  }\r\n\r\n  function balanceOf(address _address) public view returns (uint) {\r\n    return deposits[_address].length;\r\n  }\r\n\r\n  // Policy Functions\r\n  function setFeeLength(uint256 _feeLength) public onlyManager() {\r\n    feeLength = _feeLength;\r\n  }  \r\n\r\n  function setMaxEpochs(uint256 _maxEpochs) public onlyManager() {\r\n    maxEpochs = _maxEpochs;\r\n  }  \r\n\r\n  function setInitialFeeLength(uint256 _feeLength) public onlyManager() {\r\n    initialFeeLength = _feeLength;\r\n  }  \r\n\r\n  function setClaimlength(uint256 _claimLength) public onlyManager() {\r\n    claimLength = _claimLength;\r\n  }  \r\n\r\n  function setClaimFees(uint _feeIncrement, uint _feeMax) public onlyManager() {\r\n    require( _feeMax <= 1000, \"setClaimFees: Max fee is too great.\");\r\n    require( _feeIncrement <= _feeMax, \"setClaimFees: Fee increment is too great.\");\r\n    claimFeeIncrement = _feeIncrement;\r\n    maxClaimFee = _feeMax;\r\n  }  \r\n\r\n  function setMonthlyCost(uint _tokenType, uint256 _amount) public onlyManager() {\r\n    monthlyCost[_tokenType] = _amount;\r\n  }  \r\n\r\n  function setLiquidityFeePercent(uint256 _fee) public onlyManager() {\r\n    require( _fee <= 100, \"Fee too high\" );\r\n    feeLiquidityPercent = _fee;\r\n  }\r\n\r\n  function setLiquidityPairAddress(address _address) public onlyManager() {\r\n    liquidityPair = _address;\r\n  }\r\n\r\n  function managerSafeNFTWithdrawal(uint256 tokenID, address recipient) public onlyManager() {\r\n    deleteDeposit(inventory[tokenID].owner, tokenID);\r\n    ERC721(nftContract).safeTransferFrom(address(this), recipient, tokenID);\r\n  }\r\n\r\n  function managerBypassNFTWithdrawal(uint256 tokenID) public onlyManager() {\r\n    ERC721(nftContract).safeTransferFrom(address(this), msg.sender, tokenID); // Forcefully withdraw NFT and bypass deleteDeposit() in emergency or incase of accidental transfer\r\n  }\r\n\r\n  function managerTokenWithdrawal(address tokenAddress, address recipient) public onlyManager() {\r\n    IERC20(tokenAddress).safeTransferFrom(address(this), recipient, IERC20(tokenAddress).balanceOf(address(this)));\r\n  }\r\n\r\n  function toggleNFTLock(uint256 tokenID) public onlyManager() {\r\n    require(inventory[tokenID].owner == address(0x0), \"toggleNFTLock: Token ID does not exist.\");\r\n    inventory[tokenID].locked = !inventory[tokenID].locked;\r\n  }\r\n\r\n  function toggleLock() public onlyManager() {\r\n    locked = !locked;\r\n  }\r\n\r\n  enum CONTRACTS { nftContract, feeCoin, treasury, initialfeecoin }\r\n  function setContract(CONTRACTS _contracts, address _address) public onlyManager() {\r\n    if (_contracts == CONTRACTS.nftContract) { // 0\r\n      nftContract = _address;\r\n    } else if (_contracts == CONTRACTS.feeCoin) { // 1\r\n      feeCoin = _address;\r\n    }else if (_contracts == CONTRACTS.treasury) { // 2\r\n      treasury = _address;\r\n    } else if (_contracts == CONTRACTS.initialfeecoin) { // 3\r\n      initialFeeCoin = _address;\r\n    }\r\n  }\r\n\r\n  // Internal Functions\r\n  function addDeposit(address _recipient, uint256 _tokenID) internal {\r\n    require(inventory[_tokenID].owner == address(0x0), \"addDeposit: Token ID already exists.\");\r\n\r\n    inventory[_tokenID].owner = _recipient;\r\n    inventory[_tokenID].nextTimestamp = block.timestamp;\r\n    inventory[_tokenID].claimLength = claimLength;\r\n    inventory[_tokenID].epochs = 0;\r\n    inventory[_tokenID].claimFee = 0;\r\n    inventory[_tokenID].maxEpochs = 65;\r\n    inventory[_tokenID].locked = false;\r\n    inventory[_tokenID].feeExpiration = block.timestamp + initialFeeLength;\r\n\r\n    deposits[_recipient].push(_tokenID);\r\n  }\r\n\r\n  function deleteDeposit(address _recipient, uint256 _tokenID) internal {\r\n    delete inventory[_tokenID];\r\n\r\n    uint256[] memory list = new uint256[](deposits[_recipient].length-1);\r\n    uint z=0;\r\n    for (uint i=0; i < deposits[_recipient].length; i++) {\r\n      if (deposits[_recipient][i] != _tokenID) {\r\n        list[z] = deposits[_recipient][i];\r\n        z++;\r\n      }\r\n    }\r\n    deposits[_recipient] = list;\r\n  }\r\n\r\n  function claimBalance(uint256 _tokenID) internal {\r\n      uint256 toMint = 0;\r\n     \r\n      for (uint256 i=inventory[_tokenID].nextTimestamp; i < block.timestamp; ) {\r\n        if ( inventory[_tokenID].epochs >= inventory[_tokenID].maxEpochs ) {\r\n          break; // Stop adding rewards if maxEpochs is reached\r\n        }\r\n\r\n        i += inventory[_tokenID].claimLength;\r\n        inventory[_tokenID].nextTimestamp = i;\r\n        inventory[_tokenID].epochs++;\r\n        toMint += getRewardAmount(_tokenID);\r\n      }\r\n\r\n      uint256 fee = toMint.mul( inventory[_tokenID].claimFee ).div( 1000 );\r\n\r\n      inventory[_tokenID].claimLength = claimLength;\r\n      inventory[_tokenID].claimFee += claimFeeIncrement;\r\n\r\n      if ( inventory[_tokenID].claimFee >= maxClaimFee ) {\r\n        inventory[_tokenID].claimFee = maxClaimFee;\r\n      }\r\n\r\n      ITreasury(treasury).mintRewards(\r\n        inventory[_tokenID].owner, \r\n        toMint.sub(fee)\r\n      );\r\n  }\r\n\r\n  // Visual Functions\r\n  function isFeePaid(uint256 tokenID) public view returns (bool) {\r\n    return block.timestamp <= inventory[tokenID].feeExpiration;\r\n  }\r\n\r\n  function listAll(address _address) public view returns (uint256[] memory) {\r\n    uint256[] memory list = new uint256[](deposits[_address].length);\r\n    for (uint i=0; i < deposits[_address].length; i++) {\r\n      list[i] = deposits[_address][i];\r\n    }\r\n    return list;\r\n  }\r\n  \r\n\r\n  function claimableAmount(uint256 tokenID) public view returns (uint256) {\r\n    uint256 toMint = 0;\r\n    for (uint256 i=inventory[tokenID].nextTimestamp; i < block.timestamp; ) {\r\n      i += inventory[tokenID].claimLength;\r\n      toMint += getRewardAmount(tokenID);\r\n    }\r\n    return toMint;\r\n  }\r\n  \r\n  function getTokenType(uint256 tokenID) public view returns (uint) {\r\n    return DOMERC721(nftContract).TokenTypes(tokenID);\r\n  }\r\n\r\n  function getRewardAmount(uint256 tokenID) public view returns (uint256) {\r\n    uint256 _rewardAmount;\r\n    (, , _rewardAmount, , , ) = DOMERC721(nftContract).NFTTypes(getTokenType(tokenID));\r\n    return _rewardAmount;\r\n  }\r\n\r\n  function getStakingCost(uint256 tokenID) public view returns (uint256) {\r\n    uint256 _stakingCost; \r\n    (, , , _stakingCost, , ) = DOMERC721(nftContract).NFTTypes(getTokenType(tokenID));\r\n    return _stakingCost;\r\n  }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeCoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialFeeCoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPushed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFeeIncrement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"claimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeLiquidityPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"getRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"getStakingCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"getTokenType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialFeeCoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialFeeLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"inventory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epochs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeExpiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxEpochs\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"isFeePaid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"listAll\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"managerBypassNFTWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"managerSafeNFTWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"managerTokenWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxClaimFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxEpochs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"monthlyCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"payFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payFeeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"pushManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeIncrement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeMax\",\"type\":\"uint256\"}],\"name\":\"setClaimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimLength\",\"type\":\"uint256\"}],\"name\":\"setClaimlength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DominiumNFTDepository.CONTRACTS\",\"name\":\"_contracts\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeLength\",\"type\":\"uint256\"}],\"name\":\"setFeeLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeLength\",\"type\":\"uint256\"}],\"name\":\"setInitialFeeLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setLiquidityPairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxEpochs\",\"type\":\"uint256\"}],\"name\":\"setMaxEpochs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMonthlyCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"toggleNFTLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DominiumNFTDepository", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000a04a030f4c8b22b11e98e1cbaf280e0ff01fed790000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000413f6c6d3918a967f979f1559eaa58d5b0a0696f", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1bd6e16db3d24ed72dc44d3b8eb5c5c13d360402b8d9e02de7f63e62ae3bb978"}