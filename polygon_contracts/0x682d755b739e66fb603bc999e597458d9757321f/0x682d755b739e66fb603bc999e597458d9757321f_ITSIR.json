{"SourceCode": "// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n/**\r\n * @dev Implementation of the `IERC20` interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using `_mint`.\r\n * For a generic mechanism see `ERC20Mintable`.\r\n *\r\n * *For a detailed writeup see our guide [How to implement supply\r\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See `IERC20.approve`.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) internal _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See `IERC20.totalSupply`.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.balanceOf`.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transfer`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.allowance`.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.approve`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transferFrom`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of `ERC20`;\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `value`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to `transfer`, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a `Transfer` event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destoys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a `Transfer` event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an `Approval` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n}\r\n\r\n// File: contracts/ITSIR.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\ncontract ITSIR is ERC20 {\r\n    string public constant name = \"ITSIR\";\r\n    string public constant symbol = \"SIR\";\r\n    uint256 public constant initialSupply = 3 * (10 ** 9) * (10 ** uint256(decimals));\r\n    uint256 private constant UNIX_DAY_TIME = 86400;\r\n    uint8 public constant decimals = 18;\r\n\r\n    constructor() public {\r\n        address _owner = 0xE664849f4C287E4fAc5981C9d0336787916C89d7;\r\n        super._mint(_owner, initialSupply);\r\n        owner = _owner;\r\n    }\r\n\r\n    /**\r\n    *\r\n    * Ownership features\r\n    *\r\n    */\r\n    address public owner;\r\n    address public potentialOwner;\r\n    \r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnerNominated(address indexed potentialOwner);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not owner\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n    * @dev Allows the current owner to relinquish control of the contract.\r\n    * @notice Renouncing to ownership will leave the contract without an owner.\r\n    * It will not be possible to call the functions with the `onlyOwner`\r\n    * modifier anymore.\r\n    */\r\n    function renounceOwnership() external onlyOwner {\r\n        emit OwnershipRenounced(owner);\r\n        owner = address(0);\r\n        potentialOwner = address(0);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @notice Transfer Ownership will nominate a owner.\r\n    * Ownership takes over when the nominated owner accepts ownership.\r\n    * @param pendingOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address pendingOwner) external onlyOwner {\r\n        require(pendingOwner != address(0), \"Potential owner can not be the zero address\");\r\n        potentialOwner = pendingOwner;\r\n        emit OwnerNominated(pendingOwner);\r\n    }\r\n\r\n    /**\r\n    * @dev Accept to transfer control of the contract to a potentialOwner.\r\n    */\r\n    function acceptOwnership() external {\r\n        require(\r\n            msg.sender == potentialOwner,\r\n            \"You must be nominated before you accept ownership\"\r\n        );\r\n        emit OwnershipTransferred(owner, potentialOwner);\r\n        owner = potentialOwner;\r\n        potentialOwner = address(0);\r\n    } \r\n    \r\n    /**\r\n    *\r\n    * Pause features\r\n    *\r\n    */\r\n    event Pause();\r\n    event Unpause();\r\n    \r\n    bool public paused = false;\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is not paused.\r\n    */\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"Paused by owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is paused.\r\n    */\r\n    modifier whenPaused() {\r\n        require(paused, \"Not paused\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n    * @dev Called by the owner to pause, triggers stopped state\r\n    */\r\n    function pause() public onlyOwner whenNotPaused {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n    * @dev Called by the owner to unpause, returns to normal state\r\n    */\r\n    function unpause() public onlyOwner whenPaused {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n    \r\n    /**\r\n    *\r\n    * Freeze features\r\n    *\r\n    */\r\n    event Frozen(address target);\r\n    event Unfrozen(address target);\r\n\r\n    mapping(address => bool) internal freezes;\r\n    \r\n    modifier whenNotFrozen() {\r\n        require(!freezes[msg.sender], \"Sender account is frozen\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Freeze the holder's address.\r\n    * @param _target The address to freeze.\r\n    */\r\n    function freeze(address _target) public onlyOwner {\r\n        freezes[_target] = true;\r\n        emit Frozen(_target);\r\n    }\r\n    /**\r\n    * @dev Unfreeze the holder's address.\r\n    * @param _target The address to unfreeze.\r\n    */\r\n    function unfreeze(address _target) public onlyOwner {\r\n        freezes[_target] = false;\r\n        emit Unfrozen(_target);\r\n    }\r\n\r\n    /**\r\n    * @dev Check if the holder's address is frozen.\r\n    * @param _target The address to check.\r\n    */\r\n    function isFrozen(address _target) public view returns (bool) {\r\n        return freezes[_target];\r\n    }\r\n\r\n    /**\r\n    *\r\n    * Transfer features\r\n    *\r\n    */\r\n\r\n    /**\r\n    * @dev Moves tokens from the caller's account to recipient.\r\n    * @param _to The address of recipient.\r\n    * @param _value Amount of tokens to transfer.\r\n    */\r\n    function transfer(address _to, uint256 _value)\r\n        public\r\n        whenNotFrozen\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        _releaseLock(msg.sender);\r\n        require(_value <= super.balanceOf(msg.sender), \"Insufficient balance\");\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Moves tokens from sender to recipient using the allowance mechanism.\r\n    * @param _from The address of sender.\r\n    * @param _to The address of recipient.\r\n    * @param _value Amount of tokens to transfer.\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        public\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        require(!freezes[_from], \"From account is frozen\");\r\n        _releaseLock(_from);\r\n        require(_value <= super.balanceOf(_from), \"Insufficient balance\");\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n    \r\n    /**\r\n    *\r\n    * Burn features\r\n    *\r\n    */\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n    * @dev Destroys tokens from account, reducing the total supply.\r\n    * @param _who The address to destroy tokens.\r\n    * @param _value Amount of tokens to destroy.\r\n    */\r\n    function burn(address _who, uint256 _value) public onlyOwner {\r\n        require(_value <= super.balanceOf(_who), \"Insufficient balance\");\r\n        \r\n        _burn(_who, _value);\r\n        emit Burn(_who, _value);\r\n    }\r\n\r\n    /**\r\n    *\r\n    * Lock features\r\n    *\r\n    */\r\n    struct LockInfo {\r\n        uint256 releaseStartTime;\r\n        uint256 releaseDays;\r\n        uint256 unitValue;\r\n        uint256 extraValue;\r\n    }\r\n\r\n    mapping(address => LockInfo[]) internal lockInfo;\r\n\r\n    event Lock(address indexed holder, uint256 value, uint256 releaseTime);\r\n    event Lock(\r\n        address indexed holder,\r\n        uint256 totalValue,\r\n        uint256 releaseDays,\r\n        uint256 releaseStartTime\r\n    );\r\n    event Unlock(address indexed holder, uint256 value);\r\n    \r\n    /**\r\n    * @dev Returns the amount of tokens owned by the account.\r\n    * @param _holder The address to check the balance.\r\n    */\r\n    function balanceOf(address _holder) public view returns (uint256) {\r\n        uint256 lockedBalance = 0;\r\n        uint256 length = lockInfo[_holder].length;\r\n        for (uint256 i = 0; i < length; i++ ) {\r\n            LockInfo memory acc = lockInfo[_holder][i];\r\n            lockedBalance = lockedBalance.add(\r\n                acc.unitValue.mul(acc.releaseDays).add(acc.extraValue)\r\n            );\r\n        }\r\n        return super.balanceOf(_holder).add(lockedBalance);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the amount of total, locked, and available tokens owned by the account.\r\n    * @param _holder The address to check the balance.\r\n    */\r\n    function detailBalance(address _holder)\r\n        public\r\n        view\r\n        returns (uint256 totalBalance, uint256 lockedBalance, uint256 availableBalance)\r\n    {\r\n        uint256 length = lockInfo[_holder].length;\r\n        for (uint256 i = 0; i < length; i++ ) {\r\n            LockInfo memory acc = lockInfo[_holder][i];\r\n            \r\n            if (acc.releaseStartTime > block.timestamp) {\r\n                lockedBalance = lockedBalance.add(\r\n                    acc.releaseDays.mul(acc.unitValue).add(acc.extraValue)\r\n                );\r\n                continue;\r\n            }\r\n\r\n            uint256 pastDays = block.timestamp\r\n                .sub(acc.releaseStartTime)\r\n                .div(UNIX_DAY_TIME)\r\n                .add(1);\r\n\r\n            if (acc.releaseDays > pastDays) {\r\n                uint256 leftDays = acc.releaseDays.sub(pastDays);\r\n                lockedBalance = lockedBalance.add(\r\n                    acc.unitValue.mul(leftDays).add(acc.extraValue)\r\n                );\r\n            }\r\n        }\r\n        totalBalance = balanceOf(_holder);\r\n        availableBalance = totalBalance.sub(lockedBalance);\r\n    }\r\n\r\n    /**\r\n    * @dev Release expired locked tokens and apply to available balance.\r\n    * @param _holder The address to release expired locked tokens.\r\n    */\r\n    function releaseLockByOwner(address _holder) public onlyOwner returns (bool) {\r\n        _releaseLock(_holder);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Release expired locked tokens and apply to available balance.\r\n    */\r\n    function releaseLock() public returns (bool) {\r\n        _releaseLock(msg.sender);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the number of locks applied to the holder.\r\n    * @param _holder The address to check the number of locks.\r\n    */\r\n    function lockCount(address _holder) public view returns (uint256) {\r\n        return lockInfo[_holder].length;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the lock information applied to the holder.\r\n    * @notice Locked tokens starts unlocking at `releaseStartTime` and is unlocked for\r\n    * `releaseDays` days. Amount of tokens unlocking per day is the total amount of locked tokens\r\n    * divided by `releaseDays`, rounded down. Amount of rounded down tokens is unlocking on the\r\n    * last day. (`extraValue`)\r\n    * @param _holder The address to check the lock information.\r\n    * @param _idx The index number of lock to check.\r\n    * @return releaseStartTime Time to start releasing.\r\n    * @return releaseDays Lock release period. (days)\r\n    * @return unitValue Amount of tokens to unlock per day.\r\n    * @return extraValue Amount of remaining tokens to unlock on the last day.\r\n    */\r\n    function lockState(address _holder, uint256 _idx)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 releaseStartTime,\r\n            uint256 releaseDays,\r\n            uint256 unitValue,\r\n            uint256 extraValue\r\n        )\r\n    {\r\n        releaseStartTime = lockInfo[_holder][_idx].releaseStartTime;\r\n        releaseDays = lockInfo[_holder][_idx].releaseDays;\r\n        unitValue = lockInfo[_holder][_idx].unitValue;\r\n        extraValue = lockInfo[_holder][_idx].extraValue;\r\n    }\r\n\r\n    /**\r\n    * @dev Lock tokens so that it cannot be used until a set point in time.\r\n    * @param _holder The address to lock tokens.\r\n    * @param _value Amount of tokens to lock.\r\n    * @param _releaseTime The lock is releaseing at `_releaseTime`.\r\n    */\r\n    function lock(address _holder, uint256 _value, uint256 _releaseTime) public onlyOwner {\r\n        require(_value > 0, \"Invalid lock value\");\r\n        require(_releaseTime > block.timestamp, \"Token release time must be after the current time.\");\r\n        _releaseLock(_holder);\r\n        require(super.balanceOf(_holder) >= _value, \"Insufficient balance\");\r\n        _balances[_holder] = _balances[_holder].sub(_value);\r\n        lockInfo[_holder].push(\r\n            LockInfo(_releaseTime, 1, _value, 0)\r\n        );\r\n        emit Lock(_holder, _value, _releaseTime);\r\n    }\r\n\r\n    /**\r\n    * @dev Lock tokens so that it cannot be used until a set point in time.\r\n    * @notice Same as function dailyLockAfter except the way to specify the release point.\r\n    * @param _holder The address to lock tokens.\r\n    * @param _value Amount of tokens to lock.\r\n    * @param _afterTime The lock is releasing after `_afterTime` time. (now + _afterTime)\r\n    */\r\n    function lockAfter(address _holder, uint256 _value, uint256 _afterTime) public onlyOwner {\r\n        lock(_holder, _value, block.timestamp.add(_afterTime));\r\n    }\r\n\r\n    /**\r\n    * @dev Lock tokens so that it cannot be used until a set point in time.\r\n    * @notice A certain number of locked tokens are unlocking each day. It starts unlocking at\r\n    * `_releaseStartTime` and is unlocked for`_releaseDays` days. Amount of tokens unlocking per\r\n    * day is the total amount of locked tokens divided by `releaseDays`, rounded down. Amount of\r\n    * rounded down tokens is unlocking on the last day. (`extraValue`)\r\n    * @param _holder The address to lock tokens.\r\n    * @param _totalValue Total amount of tokens to lock.\r\n    * @param _releaseDays Lock release period. (days)\r\n    * @param _releaseStartTime Time to start releasing.\r\n    */\r\n    function dailyLock(\r\n        address _holder,\r\n        uint256 _totalValue,\r\n        uint256 _releaseDays,\r\n        uint256 _releaseStartTime\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(_totalValue > 0, \"Invalid lock totalValue\");\r\n        require(\r\n            _releaseDays > 0 && _releaseDays <= 1000,\r\n            \"Invalid releaseDays (0 < releaseDays <= 1000\"\r\n        );\r\n        require(_releaseStartTime > block.timestamp, \"Token release start time must be after the current time.\");\r\n\r\n        _releaseLock(_holder);\r\n        require(_totalValue <= super.balanceOf(_holder), \"Insufficient balance\");\r\n\r\n        uint256 unitValue = _totalValue.div(_releaseDays);\r\n        uint256 extraValue = _totalValue.sub(unitValue.mul(_releaseDays));\r\n        \r\n        _balances[_holder] = _balances[_holder].sub(_totalValue);\r\n\r\n        lockInfo[_holder].push(\r\n            LockInfo(_releaseStartTime, _releaseDays, unitValue, extraValue)\r\n        );\r\n\r\n        emit Lock(_holder, _totalValue, _releaseDays, _releaseStartTime);\r\n    }\r\n\r\n    /**\r\n    * @dev Lock tokens so that it cannot be used until a set point in time.\r\n    * @notice Same as function dailyLockAfter except the way to specify the release point.\r\n    * @param _holder The address to lock tokens.\r\n    * @param _totalValue Total amount of tokens to lock.\r\n    * @param _releaseDays Lock release period. (days)\r\n    * @param _afterTime The lock starting to release after `_afterTime` time. (now + _afterTime)\r\n    */\r\n    function dailyLockAfter(\r\n        address _holder,\r\n        uint256 _totalValue,\r\n        uint256 _releaseDays,\r\n        uint256 _afterTime\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        dailyLock(_holder, _totalValue, _releaseDays, block.timestamp.add(_afterTime));\r\n    }\r\n\r\n    /**\r\n    * @dev Forcibly releases the lock and apply to available balance.\r\n    * @param _holder The address to unlock tokens.\r\n    * @param i Index of lock to unlock tokens.\r\n    */\r\n    function unlock(address _holder, uint256 i) public onlyOwner {\r\n        require(i < lockInfo[_holder].length, \"No lock\");\r\n\r\n        uint256 unlockValue;\r\n        LockInfo memory acc = lockInfo[_holder][i];\r\n\r\n        unlockValue = acc.releaseDays.mul(acc.unitValue).add(acc.extraValue);\r\n\r\n        _balances[_holder] = _balances[_holder].add(unlockValue);\r\n        emit Unlock(_holder, unlockValue);\r\n\r\n        if (i != lockInfo[_holder].length - 1) {\r\n            lockInfo[_holder][i] = lockInfo[_holder][lockInfo[_holder].length - 1];\r\n        }\r\n        lockInfo[_holder].length--;\r\n    }\r\n\r\n    /**\r\n    * @dev Moves tokens from the caller's account to the recipient and lock those token.\r\n    * @notice The lock method is the same as the lock function.\r\n    * @param _to The address of recipient.\r\n    * @param _value Amount of tokens to transfer and lock.\r\n    * @param _releaseTime The lock is releaseing at `_releaseTime`.\r\n    */\r\n    function transferWithLock(address _to, uint256 _value, uint256 _releaseTime)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(_to != address(0), \"Invalid address\");\r\n        require(_value <= super.balanceOf(owner), \"Insufficient balance\");\r\n        require(_releaseTime > block.timestamp, \"Token release time must be after the current time.\");\r\n\r\n        _balances[owner] = _balances[owner].sub(_value);\r\n\r\n        lockInfo[_to].push(\r\n            LockInfo(_releaseTime, 1, _value, 0)\r\n        );\r\n\r\n        emit Transfer(owner, _to, _value);\r\n        emit Lock(_to, _value, _releaseTime);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Moves tokens from the caller's account to the recipient and lock those token.\r\n    * @notice Same as function transferWithLock except the way to specify the release point.\r\n    * @param _to The address of recipient.\r\n    * @param _value Amount of tokens to transfer and lock.\r\n    * @param _afterTime The lock is releasing after `_afterTime` time. (now + _afterTime)\r\n    */\r\n    function transferWithLockAfter(address _to, uint256 _value, uint256 _afterTime)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        transferWithLock(_to, _value, block.timestamp.add(_afterTime));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Moves tokens from the caller's account to the recipient and lock those token.\r\n    * @notice The lock method is the same as the dailyLock function.\r\n    * @param _to The address of recipient.\r\n    * @param _totalValue Total amount of tokens to transfer and lock.\r\n    * @param _releaseDays Lock release period. (days)\r\n    * @param _releaseStartTime Time to start releasing.\r\n    */\r\n    function transferWithDailyLock(\r\n        address _to,\r\n        uint256 _totalValue,\r\n        uint256 _releaseDays,\r\n        uint256 _releaseStartTime\r\n    )\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(_to != address(0), \"Invalid address\");\r\n        require(_totalValue > 0, \"Invalid totalValue\");\r\n        require(_totalValue <= super.balanceOf(owner), \"Insufficient balance\");\r\n        require(\r\n            _releaseDays > 0 && _releaseDays <= 1000,\r\n            \"Invalid releaseDays (0 < releaseDays <= 1000)\"\r\n        );\r\n        require(_releaseStartTime > block.timestamp, \"Token release start time must be after the current time.\");\r\n        \r\n        uint256 unitValue = _totalValue.div(_releaseDays);\r\n        uint256 extraValue = _totalValue.sub(unitValue.mul(_releaseDays));\r\n        \r\n        _balances[owner] = _balances[owner].sub(_totalValue);\r\n\r\n        lockInfo[_to].push(\r\n            LockInfo(_releaseStartTime, _releaseDays, unitValue, extraValue)\r\n        );\r\n\r\n        emit Transfer(owner, _to, _totalValue);\r\n        emit Lock(_to, _totalValue, _releaseDays, _releaseStartTime);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Moves tokens from the caller's account to the recipient and lock those token.\r\n    * @notice Same as function transferWithDailyLock except the way to specify the release point.\r\n    * @param _to The address of recipient.\r\n    * @param _totalValue Total amount of tokens to transfer and lock.\r\n    * @param _releaseDays Lock release period. (days)\r\n    * @param _afterTime The lock starting to release after `_afterTime` time. (now + _afterTime)\r\n    */\r\n    function transferWithDailyLockAfter(\r\n        address _to,\r\n        uint256 _totalValue,\r\n        uint256 _releaseDays,\r\n        uint256 _afterTime\r\n    )\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        transferWithDailyLock(_to, _totalValue, _releaseDays, block.timestamp.add(_afterTime));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the current time.\r\n    */    \r\n    function currentTime() public view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    /**\r\n    * @dev Release expired locked tokens and apply to available balance.\r\n    * @param _holder The address to release expired locked tokens.\r\n    */\r\n    function _releaseLock(address _holder) internal {\r\n        uint256 unlockedValue = 0;\r\n        for (uint256 i = 0; i < lockInfo[_holder].length; i++) {\r\n            LockInfo memory acc = lockInfo[_holder][i];\r\n\r\n            if (acc.releaseStartTime > block.timestamp) {\r\n                continue;\r\n            }\r\n\r\n            uint256 pastDays = block.timestamp\r\n                .sub(acc.releaseStartTime)\r\n                .div(UNIX_DAY_TIME)\r\n                .add(1);\r\n            if (acc.releaseDays > pastDays) {\r\n                lockInfo[_holder][i].releaseStartTime = lockInfo[_holder][i].releaseStartTime.add(\r\n                    pastDays.mul(UNIX_DAY_TIME)\r\n                );\r\n                lockInfo[_holder][i].releaseDays = lockInfo[_holder][i].releaseDays.sub(pastDays);\r\n\r\n                unlockedValue = unlockedValue.add(pastDays.mul(acc.unitValue));\r\n            } else {\r\n                unlockedValue = unlockedValue.add(\r\n                    acc.releaseDays.mul(acc.unitValue).add(acc.extraValue)\r\n                );\r\n                if (i != lockInfo[_holder].length - 1) {\r\n                    lockInfo[_holder][i] = lockInfo[_holder][lockInfo[_holder].length - 1];\r\n                    i--;\r\n                }\r\n                lockInfo[_holder].length--;\r\n            }\r\n        }\r\n        _balances[_holder] = _balances[_holder].add(unlockedValue);\r\n        emit Unlock(_holder, unlockedValue);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"Frozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseDays\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseStartTime\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"potentialOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"Unfrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_releaseDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_releaseStartTime\",\"type\":\"uint256\"}],\"name\":\"dailyLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_releaseDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_afterTime\",\"type\":\"uint256\"}],\"name\":\"dailyLockAfter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"detailBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"isFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_releaseTime\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_afterTime\",\"type\":\"uint256\"}],\"name\":\"lockAfter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"lockCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"lockState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"releaseStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extraValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"potentialOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"releaseLockByOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_releaseDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_releaseStartTime\",\"type\":\"uint256\"}],\"name\":\"transferWithDailyLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_releaseDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_afterTime\",\"type\":\"uint256\"}],\"name\":\"transferWithDailyLockAfter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_releaseTime\",\"type\":\"uint256\"}],\"name\":\"transferWithLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_afterTime\",\"type\":\"uint256\"}],\"name\":\"transferWithLockAfter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"unfreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ITSIR", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://86b6609d520d50962811d756f2862a9383c4b2002a72d182dcb57087100f2cfc"}