{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17; \r\n\r\n//*******************************************************************//\r\n//------------------ Contract to Manage Ownership -------------------//\r\n//*******************************************************************//\r\ncontract owned\r\n{\r\n    address internal owner;\r\n    address internal newOwner;\r\n    address public signer;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        signer = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    modifier onlySigner {\r\n        require(msg.sender == signer, 'caller must be signer');\r\n        _;\r\n    }\r\n\r\n\r\n    function changeSigner(address _signer) public onlyOwner {\r\n        signer = _signer;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    //the reason for this flow is to protect owners from sending ownership to unintended address due to human error\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n\r\n//*******************************************************************//\r\n//------------------         token interface        -------------------//\r\n//*******************************************************************//\r\n\r\n interface tokenInterface\r\n {\r\n    function transfer(address _to, uint256 _amount) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _amount) external returns (bool);\r\n }\r\n\r\n\r\n\r\n//*******************************************************************//\r\n//------------------        MAIN contract         -------------------//\r\n//*******************************************************************//\r\n\r\ncontract Meta_Power_Main is owned {\r\n\r\n\r\n    uint public minInvestAmount;\r\n    uint public maxInvestAmount;\r\n\r\n    address public tokenAddress;\r\n    uint public oneDay = 1 days; // this can be changed for testing,  like '30 min' , '100' etc\r\n    uint public maxPayout = 30000; // = 300%\r\n\r\n     struct userInfo {\r\n        uint joinTime;\r\n        address referrer;\r\n        uint investedAmount;\r\n        uint returnPercent;\r\n        uint lastWithdrawTime;\r\n        uint totalPaidROI;\r\n        bool capped;\r\n    }\r\n\r\n    mapping(address => uint) public totalBusiness;\r\n    mapping(address => uint) public totalBusinessFrom;\r\n    mapping(address => uint) public totalInvest;\r\n    mapping(address => uint) public totalPaid;\r\n\r\n    mapping ( address => address[]) public referred;\r\n    mapping ( address => uint) public bonus; // \r\n    mapping ( address => uint[10]) public lastBonusTime; // \r\n    mapping ( address => uint[10]) public totalBonusPaid; //\r\n    mapping (address => uint) public referralWithdraw;\r\n    mapping (address => uint) public totalReferralWithdraw;\r\n    mapping (address => uint) public mentorGain;\r\n    mapping (address => uint) public totalMentorGain;\r\n\r\n    mapping (address => uint) public totalTeam;\r\n\r\n    mapping ( address => userInfo[]) public userInfos;\r\n    mapping(address => uint) public investIndexCount;\r\n\r\n\r\n\r\n\r\n\r\n    uint public defaultROI = 50 ; // equal to 0.5% daily \r\n                             \r\n    uint public div = 10 ** 4; // for roi percent calculation\r\n    uint[10] public levelIncome; // values in percent\r\n    uint[10] public mentorROI; // values in percent\r\n    uint[10] public bonusTarget; // values in percent\r\n    uint[10] public rewardBonus; // values in percent\r\n\r\n    constructor () {\r\n\r\n\r\n    }\r\n\r\n    function initialise0 () public onlyOwner returns(bool) {\r\n        require(investIndexCount[msg.sender] == 0, \"can't call twice\");\r\n        userInfo memory UserInfo;\r\n\r\n        UserInfo = userInfo({\r\n            joinTime: block.timestamp,\r\n            referrer: msg.sender,\r\n            investedAmount: 1,  \r\n            returnPercent: defaultROI,\r\n            lastWithdrawTime: block.timestamp,\r\n            totalPaidROI: 0,\r\n            capped: false\r\n        });\r\n        userInfos[msg.sender].push(UserInfo);\r\n        investIndexCount[msg.sender] = 1;\r\n        return true;\r\n    }\r\n\r\n\r\n    function initialize1() public onlyOwner returns (bool) {\r\n\r\n        require(levelIncome[0] == 0, \"can't call twice\");\r\n\r\n        levelIncome[0] = 1000; // for level 1\r\n        levelIncome[1] = 200; // for level 2\r\n        levelIncome[2] = 100; // for level 3\r\n        levelIncome[3] = 100; // for level 4\r\n        levelIncome[4] = 50; // for level 5\r\n        levelIncome[5] = 50; // for level 6\r\n        levelIncome[6] = 25; // for level 7\r\n        levelIncome[7] = 25; // for level 8\r\n        levelIncome[8] = 25; // for level 9\r\n        levelIncome[9] = 25; // for level 10\r\n\r\n        mentorROI[0] = 1500; // for level 1\r\n        mentorROI[1] = 1000; // for level 2\r\n        mentorROI[2] = 100; // for level 3\r\n        mentorROI[3] = 400; // for level 4\r\n        mentorROI[4] = 200; // for level 5\r\n        mentorROI[5] = 200; // for level 6\r\n        mentorROI[6] = 300; // for level 7\r\n        mentorROI[7] = 400; // for level 8\r\n        mentorROI[8] = 200; // for level 9\r\n        mentorROI[9] = 300; // for level 10\r\n\r\n        bonusTarget[0] = 2000 * (10 ** 18); // for level 1\r\n        bonusTarget[1] = 5000 * (10 ** 18); // for level 2\r\n        bonusTarget[2] = 15000 * (10 ** 18); // for level 3\r\n        bonusTarget[3] = 35000 * (10 ** 18); // for level 4\r\n        bonusTarget[4] = 90000 * (10 ** 18); // for level 5\r\n        bonusTarget[5] = 150000 * (10 ** 18); // for level 6\r\n        bonusTarget[6] = 300000 * (10 ** 18); // for level 7\r\n        bonusTarget[7] = 600000 * (10 ** 18); // for level 8\r\n        bonusTarget[8] = 1000000 * (10 ** 18); // for level 9\r\n        bonusTarget[9] = 1500000 * (10 ** 18); // for level 10\r\n\r\n        rewardBonus[0] = 1 * (10 ** 18); // for level 1\r\n        rewardBonus[1] = 25 * (10 ** 17); // for level 2\r\n        rewardBonus[2] = 11 * (10 ** 18); // for level 3\r\n        rewardBonus[3] = 24 * (10 ** 18); // for level 4\r\n        rewardBonus[4] = 55 * (10 ** 18); // for level 5\r\n        rewardBonus[5] = 120 * (10 ** 18); // for level 6\r\n        rewardBonus[6] = 240 * (10 ** 18); // for level 7\r\n        rewardBonus[7] = 440 * (10 ** 18); // for level 8\r\n        rewardBonus[8] = 740 * (10 ** 18); // for level 9\r\n        rewardBonus[9] = 1001 * (10 ** 18); // for level 10\r\n        return true;\r\n    }\r\n\r\n\r\n    function setTokenAddress(address _tokenAddress) public onlyOwner returns(bool){\r\n        tokenAddress = _tokenAddress;\r\n        return true;\r\n    }\r\n\r\n    function setInvestAmountCap(uint _min, uint _max) public onlyOwner returns(bool){\r\n        minInvestAmount = _min;\r\n        maxInvestAmount = _max;\r\n        return true;\r\n    }\r\n\r\n    event newJnvestEv(address user, address referrer,uint amount,uint eventTime);\r\n    event nextJnvestEv(address user, uint amount,uint eventTime, uint investIndex);\r\n    event directPaidEv(address paidTo,uint level,uint amount,address user,uint eventTime);\r\n\r\n    event bonusEv(address receiver,address sender,uint newPercent,uint eventTime);\r\n\r\n    function firstInvest(address _referrer, uint _amount) public returns(bool) {\r\n        require(userInfos[msg.sender].length == 0, \"already invested\");\r\n        require(userInfos[_referrer].length > 0, \"Invalid referrer\");\r\n        require(_amount >= minInvestAmount && _amount <= maxInvestAmount, \"Invalid Amount\");\r\n        tokenInterface(tokenAddress).transferFrom(msg.sender, address(this), _amount);\r\n\r\n        userInfo memory UserInfo;\r\n\r\n        UserInfo = userInfo({\r\n            joinTime: block.timestamp,\r\n            referrer: _referrer,\r\n            investedAmount: _amount,  \r\n            returnPercent: defaultROI,\r\n            lastWithdrawTime: block.timestamp,\r\n            totalPaidROI: 0,\r\n            capped: false\r\n        });\r\n        userInfos[msg.sender].push(UserInfo);\r\n        totalInvest[msg.sender] += _amount;\r\n        investIndexCount[msg.sender] = 1;\r\n        referred[_referrer].push(msg.sender);\r\n\r\n        emit newJnvestEv(msg.sender, _referrer, _amount, block.timestamp);\r\n\r\n\r\n        // pay direct\r\n        address _ref = _referrer;\r\n        address lastRef = msg.sender;\r\n        \r\n\r\n        for(uint i=0;i<10;i++) {\r\n            totalBusiness[_ref] += _amount;\r\n            totalTeam[_ref] += 1;\r\n            totalBusinessFrom[lastRef] += _amount;\r\n            uint amt = _amount * levelIncome[i] / 10000;\r\n            \r\n            // chek for max pay limit\r\n            uint tp = totalPaid[_ref];\r\n            if ( tp + amt > totalInvest[_ref]  * maxPayout / 10000  ) {\r\n                amt = (totalInvest[_ref] * maxPayout / 10000 ) - tp;\r\n                capReached(_ref);\r\n            }\r\n            referralWithdraw[_ref] += amt;\r\n            totalReferralWithdraw[_ref] += amt;\r\n            totalPaid[_ref] += amt;\r\n\r\n            emit directPaidEv(_ref, i, amt, msg.sender, block.timestamp);\r\n            lastRef = _ref;\r\n            _ref = userInfos[_ref][0].referrer;\r\n        }\r\n\r\n        userInfo memory temp = userInfos[_referrer][0];\r\n        //if booster\r\n        if(!temp.capped && block.timestamp - temp.joinTime <= 30 * oneDay && _amount >= temp.investedAmount && temp.investedAmount >= ( 10* ( 10**19 ) ) && _amount >= (10 * (10 ** 19)) && temp.returnPercent < 125 ) {\r\n            temp.returnPercent = temp.returnPercent + 10; // increase = 0.1 % daily \r\n            if ( temp.returnPercent > 100 )  temp.returnPercent = 125; // persecond increase = 1.25 %\r\n            emit bonusEv(_referrer, msg.sender, temp.returnPercent, block.timestamp);\r\n            userInfos[_referrer][0].returnPercent = temp.returnPercent;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function nextInvest(uint _amount) public returns(bool) {\r\n\r\n        require(_amount >= minInvestAmount && _amount <= maxInvestAmount, \"Invalid Amount\");\r\n        tokenInterface(tokenAddress).transferFrom(msg.sender, address(this), _amount);\r\n\r\n        userInfo memory UserInfo;\r\n\r\n        UserInfo = userInfo({\r\n            joinTime: block.timestamp,\r\n            referrer: userInfos[msg.sender][0].referrer,\r\n            investedAmount: _amount,  \r\n            returnPercent: defaultROI,\r\n            lastWithdrawTime: block.timestamp,\r\n            totalPaidROI: 0,\r\n            capped : false\r\n        });\r\n        userInfos[msg.sender].push(UserInfo);\r\n        totalInvest[msg.sender] += _amount;\r\n        uint len = userInfos[msg.sender].length;\r\n        investIndexCount[msg.sender] = len;\r\n\r\n        emit nextJnvestEv(msg.sender, _amount, block.timestamp,len -1 );\r\n\r\n\r\n        // pay direct\r\n        address _ref = userInfos[msg.sender][0].referrer;\r\n        address lastRef = msg.sender;\r\n\r\n        for(uint i=0;i<10;i++) {\r\n            totalBusiness[_ref] += _amount;\r\n            totalBusinessFrom[lastRef] += _amount;\r\n\r\n            uint amt = _amount * levelIncome[i] / 10000;\r\n            \r\n            // chek for max pay limit\r\n            uint tp = totalPaid[_ref];\r\n            if ( tp + amt > totalInvest[_ref]  * maxPayout / 10000  ) {\r\n\r\n                amt = (totalInvest[_ref] * maxPayout / 10000 ) - tp;\r\n                capReached(_ref);\r\n            }\r\n            referralWithdraw[_ref] += amt;\r\n            totalReferralWithdraw[_ref] += amt;\r\n            totalPaid[_ref] += amt;\r\n\r\n            emit directPaidEv(_ref, i, amt, msg.sender, block.timestamp);\r\n            lastRef = _ref;\r\n            _ref = userInfos[_ref][0].referrer;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    function withdraw(address forUser) public returns(bool) {\r\n        withdrawReferral(forUser);\r\n        withdrawROI(forUser);\r\n        withdrawBonus(forUser);\r\n        withdrawMentorGain(forUser);\r\n        return true;\r\n    }\r\n\r\n    function withdrawReferral(address forUser) internal returns(bool) {\r\n        uint amt = referralWithdraw[forUser];\r\n        referralWithdraw[forUser] = 0;\r\n        tokenInterface(tokenAddress).transfer(forUser,amt);        \r\n        return true;\r\n    }\r\n\r\n    event withdrawROIEv(address caller,uint roiAmount,uint forDay,uint percent, uint eventTime );\r\n    event mentorPaidEv(address paidTo,uint level,uint amount,address user,uint eventTime);\r\n    function withdrawROI(address forUser) internal returns(bool) {\r\n       \r\n       uint tp = totalPaid[forUser];\r\n       uint totalRoiAmount;\r\n\r\n       uint lenth = userInfos[forUser].length;\r\n\r\n       for(uint forIndex = 0; forIndex < lenth; forIndex++) {\r\n\r\n            userInfo memory temp = userInfos[forUser][forIndex];\r\n            if(tp < totalInvest[forUser] * maxPayout / 10000 && ! temp.capped ) {\r\n                uint totalDays = (block.timestamp - temp.lastWithdrawTime) / oneDay;\r\n                if (totalDays > 0) {\r\n                    uint roiAmount = totalDays *  temp.investedAmount *  temp.returnPercent / div;\r\n\r\n                    // chek for max pay limit\r\n                    if ( tp + roiAmount >= totalInvest[forUser]  * maxPayout / 10000  ) {\r\n                        roiAmount = (totalInvest[forUser]  * maxPayout / 10000) - tp;\r\n                        capReached(forUser);\r\n                    }\r\n                    totalRoiAmount += roiAmount;\r\n                    userInfos[forUser][forIndex].totalPaidROI += roiAmount;\r\n                    userInfos[forUser][forIndex].lastWithdrawTime = block.timestamp;           \r\n                    emit withdrawROIEv(forUser, roiAmount, totalDays,temp.returnPercent, block.timestamp );\r\n                }\r\n            }\r\n       }\r\n\r\n\r\n        totalPaid[forUser] += totalRoiAmount;                \r\n        tokenInterface(tokenAddress).transfer(forUser,totalRoiAmount);\r\n                 \r\n\r\n        if ( totalRoiAmount > 0) {\r\n                // pay mentor\r\n                address _ref = userInfos[forUser][0].referrer;\r\n                for(uint i=0;i<10;i++) {\r\n                    uint amt = totalRoiAmount * mentorROI[i] / 10000;\r\n\r\n                    // chek for max pay limit\r\n                    uint tpd = totalPaid[_ref];\r\n                    if ( tpd + amt > totalInvest[_ref]  * maxPayout / 10000  ) {\r\n                        \r\n                        amt = (totalInvest[_ref] * maxPayout / 10000 ) - tpd;\r\n                        capReached(_ref);\r\n                    }\r\n                    totalPaid[_ref] += amt;\r\n\r\n                    mentorGain[_ref] += amt;\r\n                    totalMentorGain[_ref] += amt;\r\n                    //tokenInterface(tokenAddress).transfer(_ref,amt);\r\n                    emit mentorPaidEv(_ref, i, amt, forUser, block.timestamp);\r\n                    _ref = userInfos[_ref][0].referrer;\r\n                }  \r\n\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function capReached(address _user) internal returns(bool) {\r\n        uint len = userInfos[_user].length;\r\n        for(uint i=0;i<len;i++) {\r\n            userInfos[_user][i].capped = true;\r\n        }\r\n        return true;\r\n    } \r\n\r\n    function viewMyRoi(address forUser) public view returns(uint) {\r\n       \r\n       uint tp = totalPaid[forUser];\r\n       uint totalRoiAmount;\r\n\r\n       uint lenth = userInfos[forUser].length;\r\n\r\n       for(uint forIndex = 0; forIndex < lenth; forIndex++) {\r\n\r\n            userInfo memory temp = userInfos[forUser][forIndex];\r\n            if(tp < totalInvest[forUser] * maxPayout / 10000 && ! temp.capped ) {\r\n                uint totalDays = (block.timestamp - temp.lastWithdrawTime) / oneDay;\r\n                if (totalDays > 0) {\r\n                    uint roiAmount = totalDays *  temp.investedAmount *  temp.returnPercent / div;\r\n\r\n                    // chek for max pay limit\r\n                    if ( tp + roiAmount >= totalInvest[forUser]  * maxPayout / 10000  ) {\r\n                        roiAmount = (totalInvest[forUser]  * maxPayout / 10000) - tp;\r\n                    }\r\n                    totalRoiAmount += roiAmount;\r\n               }\r\n            }\r\n       }\r\n        return totalRoiAmount;\r\n    }\r\n\r\n    function withdrawMentorGain(address forUser) internal returns(bool) {\r\n        if (mentorGain[forUser] > 0) {\r\n            uint amt = mentorGain[forUser];\r\n            mentorGain[forUser] = 0;\r\n            tokenInterface(tokenAddress).transfer(forUser,amt);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function claimRewardBonus() public returns(bool) {\r\n        withdrawBonus(msg.sender);\r\n        for(uint i=9;i>=0;i--) {\r\n            if(totalBusiness[msg.sender] >= bonusTarget[i] && eligible(msg.sender,bonusTarget[i])) {\r\n                bonus[msg.sender] = i+1;\r\n                lastBonusTime[msg.sender][i] = block.timestamp;\r\n                break;\r\n            }\r\n\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function eligible(address _user, uint amount) public view returns(bool) {\r\n        uint sum;\r\n        uint len = referred[_user].length;\r\n        address _ref;\r\n        if (len > 0) {\r\n            for(uint i=0;i<len;i++) {\r\n                _ref = referred[_user][i];\r\n                if(totalBusinessFrom[_ref] >= amount * 4/10 && ( sum == 0 || sum == 3 || sum == 6 )) sum += 4;\r\n                else if (totalBusinessFrom[_ref] >= amount * 3/10) sum += 3;\r\n                if(sum == 10) return true;\r\n            }\r\n        }\r\n        else return false;\r\n\r\n    }\r\n    \r\n    function recover(uint _amount) public returns (bool) {\r\n        require(msg.sender == owner, \"restricted call\");\r\n        payable(msg.sender).transfer(address(this).balance);\r\n        tokenInterface(tokenAddress).transfer(msg.sender,_amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    event withdrawBonusEv(address user,uint totalBonus,uint eventTime);\r\n    function withdrawBonus(address forUser) internal returns(bool) {\r\n        uint totalBonus;\r\n        for(uint i=0;i<10;i++) {\r\n            uint bp = totalBonusPaid[forUser][i];\r\n            if (bonus[forUser] == i+1 && bp < 150 * rewardBonus[i]) {\r\n                uint day = ( block.timestamp - lastBonusTime[forUser][i] ) / oneDay ;\r\n                uint amt = rewardBonus[i] * day;\r\n                if(bp + amt > 150 * rewardBonus[i]) amt = (150 * rewardBonus[i]) - bp;\r\n                totalBonusPaid[forUser][i] += amt;\r\n                totalBonus += amt;\r\n                lastBonusTime[forUser][i] = block.timestamp;\r\n                break;\r\n            }\r\n        } \r\n        if(totalBonus > 0 ) {\r\n\r\n            tokenInterface(tokenAddress).transfer(forUser,totalBonus);\r\n            emit withdrawBonusEv(forUser, totalBonus, block.timestamp);\r\n        }       \r\n        return true;\r\n    }\r\n\r\n    function viewMyBonus(address forUser) public view returns(uint) {\r\n\r\n         uint totalBonus;\r\n        for(uint i=0;i<10;i++) {\r\n            uint bp = totalBonusPaid[forUser][i];\r\n            if (bonus[forUser] == i+1 && bp < 150 * rewardBonus[i]) {\r\n                uint day = ( block.timestamp - lastBonusTime[forUser][i] ) / oneDay ;\r\n                uint amt = rewardBonus[i] * day;\r\n                if(bp + amt > 150 * rewardBonus[i]) amt = (150 * rewardBonus[i]) - bp;\r\n\r\n                totalBonus += amt;\r\n                break;\r\n            }\r\n        } \r\n\r\n        return totalBonus;\r\n    }\r\n\r\n    function totalDirect(address _user) public view returns(uint) {\r\n        return referred[_user].length;\r\n    }\r\n\r\n    function totalROI(address _user) public view returns(uint) { \r\n        uint len = investIndexCount[_user];\r\n        uint amt;\r\n        for(uint i=0;i<len;i++) {\r\n            amt += userInfos[_user][i].totalPaidROI;\r\n        }\r\n        return amt;\r\n    }\r\n\r\n    event Received(address sender,uint coinAmount);\r\n    receive() external payable {\r\n        emit Received(msg.sender, msg.value);\r\n    }\r\n\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinAmount\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventTime\",\"type\":\"uint256\"}],\"name\":\"bonusEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paidTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventTime\",\"type\":\"uint256\"}],\"name\":\"directPaidEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paidTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventTime\",\"type\":\"uint256\"}],\"name\":\"mentorPaidEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventTime\",\"type\":\"uint256\"}],\"name\":\"newJnvestEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investIndex\",\"type\":\"uint256\"}],\"name\":\"nextJnvestEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventTime\",\"type\":\"uint256\"}],\"name\":\"withdrawBonusEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"forDay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventTime\",\"type\":\"uint256\"}],\"name\":\"withdrawROIEv\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonusTarget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"changeSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewardBonus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultROI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"div\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"eligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"firstInvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialise0\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize1\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investIndexCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastBonusTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxInvestAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mentorGain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mentorROI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minInvestAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"nextInvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recover\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referred\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setInvestAmountCap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalBonusPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalBusiness\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalBusinessFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"totalDirect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalInvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalMentorGain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"totalROI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalReferralWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"joinTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"investedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"returnPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdrawTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPaidROI\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"capped\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forUser\",\"type\":\"address\"}],\"name\":\"viewMyBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forUser\",\"type\":\"address\"}],\"name\":\"viewMyRoi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forUser\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Meta_Power_Main", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://23771aadec02c84afe93656d5af6890d195ed38d6cab1897bb8934c5b3c6b251"}