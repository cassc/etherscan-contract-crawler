{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/AwakeningProcess.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./interfaces/IGuardians.sol\\\";\\r\\nimport \\\"./interfaces/IGuardiansAwake.sol\\\";\\r\\n\\r\\ncontract AwakeningProcess is Ownable {\\r\\n    address public s_guardiansSleep;\\r\\n    address public s_guardiansAwake;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    function awakening(uint256 tokenId, string calldata uri) public {\\r\\n        IGuardians GuardiansSleep = IGuardians(s_guardiansSleep);\\r\\n        IGuardiansAwake GuardiansAwake = IGuardiansAwake(s_guardiansAwake);\\r\\n        require (!GuardiansSleep.mintable(tokenId) && GuardiansAwake.mintable(tokenId), \\\"Invalid\\\");\\r\\n        address tokenOwner = GuardiansSleep.ownerOf(tokenId);\\r\\n        require(tokenOwner == msg.sender || msg.sender == owner(), \\\"Invalid\\\");\\r\\n        GuardiansSleep.burn(tokenId);\\r\\n        GuardiansAwake.mint(tokenOwner, tokenId, uri);\\r\\n    }\\r\\n\\r\\n    function setGuardiansSleep(address guardiansSleep) public onlyOwner {\\r\\n        s_guardiansSleep = guardiansSleep;\\r\\n    }\\r\\n\\r\\n    function setGuardiansAwake(address guardiansAwake) public onlyOwner {\\r\\n        s_guardiansAwake = guardiansAwake;\\r\\n    }\\r\\n\\r\\n    function batchMintSleep(address[] memory recipients, uint256[] memory tokenIds) public onlyOwner {\\r\\n        IGuardians(s_guardiansSleep).batchMint(recipients, tokenIds);\\r\\n    }\\r\\n\\r\\n    function burnSleep(uint256 tokenId) public onlyOwner {\\r\\n        IGuardians(s_guardiansSleep).burn(tokenId);\\r\\n    }\\r\\n\\r\\n    function burnAwake(uint256 tokenId) public onlyOwner {\\r\\n        IGuardiansAwake(s_guardiansAwake).burn(tokenId);\\r\\n    }\\r\\n\\r\\n    function transferOwnershipSleep(address newOwner) public onlyOwner {\\r\\n        IGuardians(s_guardiansSleep).transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function transferOwnershipAwake(address newOwner) public onlyOwner {\\r\\n        IGuardiansAwake(s_guardiansAwake).transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IGuardians.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\ninterface IGuardians {\\r\\n    function setAdmin(address admin) external;\\r\\n    function setBaseURI(string calldata baseURI) external;\\r\\n    function setMaxMintable(uint256 maxMintable) external;\\r\\n    function superMint(address to, uint256 tokenId) external;\\r\\n    function unStop() external;\\r\\n    function stop() external;\\r\\n    function batchMint(address[] memory recipients, uint256[] memory tokenIds) external;\\r\\n    function mintable(uint256 tokenId) external view returns (bool);\\r\\n    function mint(address to, uint256 tokenId) external;\\r\\n    function batchMintable(uint256[] memory tokenIds) external view returns (bool);\\r\\n    function batchMintForOne(address to, uint256[] memory tokenIds) external;\\r\\n    function burn(uint256 tokenId) external;\\r\\n    function transferOwnership(address newOwner) external;\\r\\n    function ownerOf(uint256 tokenId) external view returns (address);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IGuardiansAwake.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\ninterface IGuardiansAwake {\\r\\n    function setMaxMintable(uint256 maxMintable) external;\\r\\n    function stop() external;\\r\\n    function unstop() external;\\r\\n    function setValidContract(address addr, bool value) external;\\r\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external;\\r\\n    function mintable(uint256 tokenId) external view returns (bool);\\r\\n    function setTokenURI(uint256 tokenId, string memory baseURI) external;\\r\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n    function mint(address to, uint256 tokenId, string calldata uri) external;\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n    function burn(uint256 tokenId) external;\\r\\n    function getValidContract(address addr) external view returns (bool);\\r\\n    function approve(address to, uint256 tokenId) external;\\r\\n    function setApprovalForAll(address operator, bool approved) external;\\r\\n    function transferOwnership(address newOwner) external;\\r\\n    function ownerOf(uint256 tokenId) external view returns (address);\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"awakening\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchMintSleep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burnAwake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burnSleep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_guardiansAwake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_guardiansSleep\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardiansAwake\",\"type\":\"address\"}],\"name\":\"setGuardiansAwake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardiansSleep\",\"type\":\"address\"}],\"name\":\"setGuardiansSleep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnershipAwake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnershipSleep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AwakeningProcess", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}