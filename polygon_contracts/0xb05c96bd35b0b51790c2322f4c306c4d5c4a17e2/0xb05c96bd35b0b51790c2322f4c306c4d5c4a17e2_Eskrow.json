{"SourceCode": "// SPDX-License-Identifier: GD\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\r\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```solidity\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n *\r\n * [WARNING]\r\n * ====\r\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\r\n * unusable.\r\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\r\n *\r\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\r\n * array of EnumerableSet.\r\n * ====\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastValue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastValue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        bytes32[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\n// \r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\utils\\Context.sol\r\n\r\n// \r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\access\\Ownable.sol\r\n\r\n// \r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts\\EskrowHelpers\\EskrowStructs.sol\r\n\r\n// \r\npragma solidity ^0.8.19;\r\n\r\nabstract contract EskrowStructs {\r\n    struct Escrow {\r\n        bytes32 escrowId;\r\n        address payable party1;\r\n        address payable party2;\r\n        address token1;\r\n        address token2;\r\n        uint256 token1RequiredQty;\r\n        uint256 token1DepositedQty;\r\n        uint256 token2RequiredQty;\r\n        uint256 token2DepositedQty;\r\n        uint expiryEpoch;\r\n        uint settleFromEpoch;\r\n        uint16 feeInPpt;\r\n        bool isParty1LockRefund;\r\n        bool isParty2LockRefund;\r\n        bool hasParty1Withdrawn;\r\n        bool hasParty2Withdrawn;\r\n        string description;\r\n    }\r\n\r\n    struct EscrowExt {\r\n        // struct Escrow\r\n        bytes32 escrowId;\r\n        address payable party1;\r\n        address payable party2;\r\n        address token1;\r\n        address token2;\r\n        uint256 token1RequiredQty;\r\n        uint256 token1DepositedQty;\r\n        uint256 token2RequiredQty;\r\n        uint256 token2DepositedQty;\r\n        uint expiryEpoch;\r\n        uint settleFromEpoch;\r\n        uint16 feeInPpt;\r\n        bool isParty1LockRefund;\r\n        bool isParty2LockRefund;\r\n        bool hasParty1Withdrawn;\r\n        bool hasParty2Withdrawn;\r\n        string description;\r\n        // -----\r\n        // Extension\r\n        uint256 token1FeeInQty;\r\n        uint256 token2FeeInQty;\r\n        bool isReadyToSettle;\r\n        bool isExpired;\r\n        bool isFullyWithdrawn;\r\n    }\r\n}\r\n\r\n// File: contracts\\EskrowHelpers\\EskrowEvents.sol\r\n\r\n// \r\npragma solidity ^0.8.19;\r\n\r\nabstract contract EskrowEvents {\r\n    // ==============================\r\n    // // EVENTS\r\n    // event Checkpoint( string message );\r\n    // event Checkpoint( uint256 value );\r\n    // event Checkpoint( address value );\r\n\r\n    event EscrowCreated(\r\n        bytes32 indexed _escrowId,\r\n        address indexed _party1,\r\n        address indexed _party2\r\n    );\r\n    event EscrowRemoved(bytes32 indexed _escrowId, address _party);\r\n    event EscrowFunded(\r\n        bytes32 indexed _escrowId,\r\n        address indexed _party,\r\n        address indexed _token,\r\n        uint256 _qty\r\n    );\r\n    event EscrowRefunded(\r\n        bytes32 indexed _escrowId,\r\n        address indexed _party,\r\n        address indexed _token,\r\n        uint256 _quantity\r\n    );\r\n    event EscrowSettled(\r\n        bytes32 indexed _escrowId,\r\n        address indexed _party,\r\n        address _token,\r\n        uint256 _quantity\r\n    );\r\n\r\n    event EscrowIsFullyFunded(\r\n        bytes32 indexed _escrowId,\r\n        address indexed _party1,\r\n        address indexed _party2\r\n    );\r\n\r\n    event EscrowError(\r\n        address indexed _origin,\r\n        bytes32 indexed _escrowId,\r\n        string indexed _method,\r\n        uint32 _code\r\n    );\r\n}\r\n\r\n// File: contracts\\EskrowHelpers\\IEskrowSub.sol\r\n\r\n// \r\npragma solidity ^0.8.19;\r\n/**\r\n * @dev Interface of the EskroSub contract.\r\n */\r\ninterface IEskrowSub {\r\n    function toEscrowExt(\r\n        EskrowStructs.Escrow memory _escrowId,\r\n        uint256 _blockTime\r\n    ) external pure returns (EskrowStructs.EscrowExt memory);\r\n\r\n    function create(\r\n        EskrowStructs.Escrow memory _escrowId,\r\n        address _msgSender\r\n    ) external returns (EskrowStructs.Escrow memory);\r\n\r\n    function validateRemove(\r\n        address _msgInitiator,\r\n        EskrowStructs.Escrow memory _escrowId\r\n    ) external returns (uint32 code);\r\n\r\n    function validateDeposit(\r\n        address _msgInitiator,\r\n        EskrowStructs.Escrow memory _escrowId,\r\n        address _token,\r\n        uint256 _quantity\r\n    )\r\n        external\r\n        returns (\r\n            uint32 code,\r\n            uint256 token1Qty,\r\n            uint256 token2Qty,\r\n            bool isFullyDeposited\r\n        );\r\n\r\n    function validateRefund(\r\n        address _msgInitiator,\r\n        EskrowStructs.Escrow memory _escrowId,\r\n        bool _isByForce\r\n    ) external returns (uint32 code, address token, address bene, uint256 qty);\r\n\r\n    function validateSettle(\r\n        address _msgInitiator,\r\n        EskrowStructs.Escrow memory _escrowId\r\n    ) external returns (uint32 code, address token, address bene, uint256 qty);\r\n}\r\n\r\n// File: contracts\\Eskrow.sol\r\n\r\n// \r\npragma solidity ^0.8.19;\r\ncontract Eskrow is EskrowEvents, Ownable {\r\n    using EnumerableSet for EnumerableSet.Bytes32Set;\r\n\r\n    // ==============================\r\n    // STATE VARIABLES\r\n    //\r\n    string contractName;\r\n    mapping(address => uint256) internal treasuryByToken;\r\n    EnumerableSet.Bytes32Set internal escrowIds;\r\n    mapping(bytes32 => EskrowStructs.Escrow) internal escrows;\r\n    mapping(address => EnumerableSet.Bytes32Set) internal escrowIdsByParty;\r\n    IEskrowSub internal eskrowSub;\r\n    bool internal configIsPaused;\r\n    address public configFeeAddress;\r\n    uint16 public configFeeInPptPct;\r\n\r\n    // ==============================\r\n    // FUNCTIONS\r\n\r\n    // Initializations\r\n    constructor() {\r\n        contractName = \"Eskrow v1.5.5\";\r\n\r\n        configIsPaused = false;\r\n        configFeeAddress = address(0x0);\r\n        configFeeInPptPct = 0; // 1 ppt == (1/1000 of 1%)\r\n        eskrowSub = IEskrowSub(payable(address(0x0)));\r\n    }\r\n\r\n    // Note: Users should NEVER send ETHER (or ANY token) to contract.\r\n    receive() external payable virtual {}\r\n\r\n    //----------\r\n    function _breakOnSystemPause() internal view {\r\n        require(\r\n            !configIsPaused,\r\n            \"===> HARD EXIT. Contract paused. Please refer to community.\"\r\n        );\r\n\r\n        require(\r\n            address(eskrowSub) != address(0x0),\r\n            \"===> Please set EskrowSub adress.\"\r\n        );\r\n    }\r\n\r\n    function _breakOnInvalidEscrowId(bytes32 _escrowId) internal view {\r\n        require(escrowIds.contains(_escrowId), \"==> Invalid EscrowId.\");\r\n    }\r\n\r\n    // ===================\r\n    // ADMIN CONFIG SETTINGS !!! OWNER ONLY\r\n    function setConfigIsPaused(bool _isPause) external onlyOwner {\r\n        configIsPaused = _isPause;\r\n    }\r\n\r\n    function setConfigFeeAddress(address _wallet) external onlyOwner {\r\n        configFeeAddress = _wallet;\r\n    }\r\n\r\n    function setConfigFeeInPptPct(uint16 _feeInPptPct) external onlyOwner {\r\n        configFeeInPptPct = _feeInPptPct;\r\n    }\r\n\r\n    function setEskrowSub(address payable _implementation) external onlyOwner {\r\n        if (_implementation != address(0)) {\r\n            eskrowSub = IEskrowSub(_implementation);\r\n        }\r\n    }\r\n\r\n    // ==============================\r\n    // ==============================\r\n    // Function Group: Create Escrow\r\n    function create(\r\n        address payable _party1,\r\n        address payable _party2,\r\n        address _token1,\r\n        uint256 _token1RequiredQty,\r\n        address _token2,\r\n        uint256 _token2RequiredQty,\r\n        bool _isParty1LockRefund,\r\n        bool _isParty2LockRefund,\r\n        uint _expiryEpoch,\r\n        uint _settleFromEpoch,\r\n        string memory _description\r\n    ) external virtual returns (EskrowStructs.Escrow memory escrow) {\r\n        _breakOnSystemPause();\r\n\r\n        escrow = EskrowStructs.Escrow({\r\n            escrowId: 0, // Set by eskrowSub.create()\r\n            party1: _party1,\r\n            party2: _party2,\r\n            token1: _token1,\r\n            token2: _token2,\r\n            token1RequiredQty: _token1RequiredQty,\r\n            token1DepositedQty: 0,\r\n            token2RequiredQty: _token2RequiredQty,\r\n            token2DepositedQty: 0,\r\n            feeInPpt: configFeeInPptPct,\r\n            expiryEpoch: _expiryEpoch,\r\n            settleFromEpoch: _settleFromEpoch,\r\n            isParty1LockRefund: _isParty1LockRefund,\r\n            isParty2LockRefund: _isParty2LockRefund,\r\n            hasParty1Withdrawn: false,\r\n            hasParty2Withdrawn: false,\r\n            description: _description\r\n        });\r\n\r\n        escrow = eskrowSub.create(escrow, _msgSender());\r\n        if ((escrow.escrowId != 0) && !escrowIds.contains(escrow.escrowId)) {\r\n            // Add the new escrow into storage\r\n            escrows[escrow.escrowId] = escrow;\r\n            escrowIds.add(escrow.escrowId);\r\n            escrowIdsByParty[_party1].add(escrow.escrowId);\r\n            escrowIdsByParty[_party2].add(escrow.escrowId);\r\n\r\n            emit EscrowCreated(escrow.escrowId, _party1, _party2);\r\n        }\r\n        return escrow;\r\n    }\r\n\r\n    // ==============================\r\n    // Function Group: Deposit ERC20 tokens\r\n    function depositErc20(\r\n        bytes32 _escrowId,\r\n        address _token,\r\n        uint256 _quantity\r\n    ) external virtual returns (uint32 _code) {\r\n        _breakOnSystemPause();\r\n        _breakOnInvalidEscrowId(_escrowId);\r\n\r\n        (\r\n            uint32 code,\r\n            uint256 token1Qty,\r\n            uint256 token2Qty,\r\n            bool isFullyDeposited\r\n        ) = eskrowSub.validateDeposit(\r\n                _msgSender(),\r\n                escrows[_escrowId],\r\n                _token,\r\n                _quantity\r\n            );\r\n\r\n        if (code == 0) {\r\n            if (\r\n                IERC20(_token).transferFrom(\r\n                    _msgSender(),\r\n                    address(this),\r\n                    _quantity\r\n                )\r\n            ) {\r\n                escrows[_escrowId].token1DepositedQty = token1Qty;\r\n                escrows[_escrowId].token2DepositedQty = token2Qty;\r\n                treasuryByToken[_token] += _quantity;\r\n\r\n                emit EscrowFunded(_escrowId, _msgSender(), _token, _quantity);\r\n\r\n                // Emit event if isFullyDeposited (is not the same as isReadyForSettle)\r\n                if (isFullyDeposited) {\r\n                    emit EscrowIsFullyFunded(\r\n                        _escrowId,\r\n                        escrows[_escrowId].party1,\r\n                        escrows[_escrowId].party2\r\n                    );\r\n                }\r\n\r\n                return 0;\r\n            }\r\n            return 1;\r\n        }\r\n        return code;\r\n    }\r\n\r\n    // ==============================\r\n    // Function Group: Refund escrow\r\n    function refund(bytes32 _escrowId) external virtual returns (uint32 _code) {\r\n        _breakOnSystemPause();\r\n        _breakOnInvalidEscrowId(_escrowId);\r\n\r\n        (uint32 code, address token, address bene, uint256 qty) = eskrowSub\r\n            .validateRefund(_msgSender(), escrows[_escrowId], false);\r\n\r\n        if (code == 0) {\r\n            if (IERC20(token).transfer(bene, qty)) {\r\n                if (bene == escrows[_escrowId].party1) {\r\n                    treasuryByToken[token] -= escrows[_escrowId]\r\n                        .token1DepositedQty;\r\n                    escrows[_escrowId].token1DepositedQty = 0;\r\n                }\r\n\r\n                if (bene == escrows[_escrowId].party2) {\r\n                    treasuryByToken[token] -= escrows[_escrowId]\r\n                        .token2DepositedQty;\r\n                    escrows[_escrowId].token2DepositedQty = 0;\r\n                }\r\n\r\n                emit EscrowRefunded(_escrowId, bene, token, qty);\r\n                return 0;\r\n            } else {\r\n                return 1;\r\n            }\r\n        }\r\n        return code;\r\n    }\r\n\r\n    // ==============================\r\n    // Function Group: Settle\r\n    function settle(bytes32 _escrowId) external virtual returns (uint32 _code) {\r\n        _breakOnSystemPause();\r\n        _breakOnInvalidEscrowId(_escrowId);\r\n\r\n        (uint32 code, address token, address bene, uint256 qty) = eskrowSub\r\n            .validateSettle(_msgSender(), escrows[_escrowId]);\r\n\r\n        if (code == 0) {\r\n            if (IERC20(token).transfer(bene, qty)) {\r\n                if (bene == escrows[_escrowId].party1) {\r\n                    escrows[_escrowId].hasParty1Withdrawn = true;\r\n                    treasuryByToken[token] -= escrows[_escrowId]\r\n                        .token2DepositedQty;\r\n                }\r\n                if (bene == escrows[_escrowId].party2) {\r\n                    escrows[_escrowId].hasParty2Withdrawn = true;\r\n                    treasuryByToken[token] -= escrows[_escrowId]\r\n                        .token1DepositedQty;\r\n                }\r\n\r\n                emit EscrowSettled(_escrowId, bene, token, qty);\r\n\r\n                return 0;\r\n            } else {\r\n                return 1;\r\n            }\r\n        }\r\n        return code;\r\n    }\r\n\r\n    // ==============================\r\n    // Function Group: Remove Escrow\r\n    function remove(bytes32 _escrowId) external virtual returns (bool success) {\r\n        _breakOnSystemPause();\r\n        _breakOnInvalidEscrowId(_escrowId);\r\n\r\n        uint32 code = eskrowSub.validateRemove(_msgSender(), escrows[_escrowId]); \r\n        if (code == 0) {\r\n            address party1 = escrows[_escrowId].party1;\r\n            address party2 = escrows[_escrowId].party2;\r\n\r\n            escrowIds.remove(_escrowId);\r\n            delete escrows[_escrowId];\r\n\r\n            _removeBaseEscrowIdsByParty(_escrowId, party1);\r\n            _removeBaseEscrowIdsByParty(_escrowId, party2);\r\n\r\n            emit EscrowRemoved(_escrowId, party1);\r\n            emit EscrowRemoved(_escrowId, party2);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function _removeBaseEscrowIdsByParty(\r\n        bytes32 _escrowId,\r\n        address _party\r\n    ) private {\r\n        escrowIdsByParty[_party].remove(_escrowId);\r\n        if (escrowIdsByParty[_party].length() == 0) {\r\n            delete escrowIdsByParty[_party];\r\n        }\r\n    }\r\n\r\n    // ==============================\r\n    // ADMIN FUNCTION: Withdraw earned fees (and expired escrows)\r\n    function adminWithdrawAccumulatedFees(\r\n        address _token\r\n    ) external virtual onlyOwner returns (uint256 fees) {\r\n        require(configFeeAddress != address(0), \"===> Invalid Fee Address\");\r\n\r\n        fees =\r\n            IERC20(_token).balanceOf(address(this)) -\r\n            treasuryByToken[_token];\r\n        if (IERC20(_token).transfer(configFeeAddress, fees)) {\r\n            return fees;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    // Do NOT send Ether to contract. Escrow Funding is via the DepositErc20().\r\n    // But, just in case, this allow admin to withdraw any ETH accidentally sent here.\r\n    function adminWithdrawEther(uint256 _gwei) external virtual onlyOwner {\r\n        require(\r\n            configFeeAddress != address(0),\r\n            \"===> Invalid Withdrawal Address\"\r\n        );\r\n        payable(configFeeAddress).transfer(_gwei);\r\n    }\r\n\r\n    // ==============================\r\n    // Function Group: Getters\r\n    //\r\n    //\r\n    function getVersion()\r\n        external\r\n        view\r\n        virtual\r\n        returns (string memory version)\r\n    {\r\n        return contractName;\r\n    }\r\n\r\n    //\r\n    function getEscrowExt(\r\n        bytes32 _escrowId\r\n    ) external view virtual returns (EskrowStructs.EscrowExt memory) {\r\n        return eskrowSub.toEscrowExt(escrows[_escrowId], block.timestamp);\r\n    }\r\n\r\n    //\r\n    function getEscrowIdsByParty(\r\n        address _party\r\n    ) external view virtual returns (bytes32[] memory) {\r\n        return escrowIdsByParty[_party].values();\r\n    }\r\n\r\n    //\r\n    function getAccumulatedFees(\r\n        address _token\r\n    ) external virtual returns (uint256 fees) {\r\n        fees =\r\n            IERC20(_token).balanceOf(address(this)) -\r\n            treasuryByToken[_token];\r\n        return fees;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_escrowId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_party1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_party2\",\"type\":\"address\"}],\"name\":\"EscrowCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_origin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_escrowId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_method\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_code\",\"type\":\"uint32\"}],\"name\":\"EscrowError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_escrowId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_party\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_qty\",\"type\":\"uint256\"}],\"name\":\"EscrowFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_escrowId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_party1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_party2\",\"type\":\"address\"}],\"name\":\"EscrowIsFullyFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_escrowId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_party\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"EscrowRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_escrowId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_party\",\"type\":\"address\"}],\"name\":\"EscrowRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_escrowId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_party\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"EscrowSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"adminWithdrawAccumulatedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gwei\",\"type\":\"uint256\"}],\"name\":\"adminWithdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"configFeeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"configFeeInPptPct\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_party1\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_party2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_token1RequiredQty\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_token2RequiredQty\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isParty1LockRefund\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isParty2LockRefund\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_expiryEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_settleFromEpoch\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"create\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"escrowId\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"party1\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"party2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token1RequiredQty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1DepositedQty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token2RequiredQty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token2DepositedQty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settleFromEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"feeInPpt\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isParty1LockRefund\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isParty2LockRefund\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasParty1Withdrawn\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasParty2Withdrawn\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct EskrowStructs.Escrow\",\"name\":\"escrow\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_escrowId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"depositErc20\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"_code\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getAccumulatedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_escrowId\",\"type\":\"bytes32\"}],\"name\":\"getEscrowExt\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"escrowId\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"party1\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"party2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token1RequiredQty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1DepositedQty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token2RequiredQty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token2DepositedQty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settleFromEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"feeInPpt\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isParty1LockRefund\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isParty2LockRefund\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasParty1Withdrawn\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasParty2Withdrawn\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"token1FeeInQty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token2FeeInQty\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isReadyToSettle\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isExpired\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFullyWithdrawn\",\"type\":\"bool\"}],\"internalType\":\"struct EskrowStructs.EscrowExt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_party\",\"type\":\"address\"}],\"name\":\"getEscrowIdsByParty\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_escrowId\",\"type\":\"bytes32\"}],\"name\":\"refund\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"_code\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_escrowId\",\"type\":\"bytes32\"}],\"name\":\"remove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setConfigFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_feeInPptPct\",\"type\":\"uint16\"}],\"name\":\"setConfigFeeInPptPct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isPause\",\"type\":\"bool\"}],\"name\":\"setConfigIsPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_implementation\",\"type\":\"address\"}],\"name\":\"setEskrowSub\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_escrowId\",\"type\":\"bytes32\"}],\"name\":\"settle\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"_code\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Eskrow", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv2", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://345f9f4d5ad534773331497ed021b28089547c059d27ba1f88df7550b34ce899"}