{"SourceCode": "//-------------DEPENDENCIES--------------------------//\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/Pausable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers whenNotPaused and whenPaused, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by account.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by account.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * onlyOwner, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    function _onlyOwner() private view {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _onlyOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * onlyOwner functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (newOwner).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (newOwner).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if account is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, isContract will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's transfer: sends amount wei to\r\n     * recipient, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by transfer, making them unable to receive funds via\r\n     * transfer. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to recipient, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level call. A\r\n     * plain call is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If target reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[abi.decode].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - target must be a contract.\r\n     * - calling target with data must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[functionCall], but with\r\n     * errorMessage as a fallback revert reason when target reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[functionCall],\r\n     * but also transferring value wei to target.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least value.\r\n     * - the called Solidity function must be payable.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[functionCallWithValue], but\r\n     * with errorMessage as a fallback revert reason when target reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[functionCall],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[functionCall],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[functionCall],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[functionCall],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * interfaceId. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * \r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n    /**\r\n        @dev Handles the receipt of a single ERC1155 token type. This function is\r\n        called at the end of a safeTransferFrom after the balance has been updated.\r\n        To accept the transfer, this must return\r\n        bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))\r\n        (i.e. 0xf23a6e61, or its own function selector).\r\n        @param operator The address which initiated the transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param id The ID of the token being transferred\r\n        @param value The amount of tokens being transferred\r\n        @param data Additional data with no specified format\r\n        @return bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\")) if transfer is allowed\r\n    */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n\r\n    /**\r\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n        is called at the end of a safeBatchTransferFrom after the balances have\r\n        been updated. To accept the transfer(s), this must return\r\n        bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))\r\n        (i.e. 0xbc197c81, or its own function selector).\r\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n        @param data Additional data with no specified format\r\n        @return bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\")) if transfer is allowed\r\n    */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when value tokens of token type id are transferred from from to to by operator.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where operator, from and to are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when account grants or revokes permission to operator to transfer their tokens, according to\r\n     * approved.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type id changes to value, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for id, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that value will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type id owned by account.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - account cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - accounts and ids must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to operator to transfer the caller's tokens, according to approved,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - operator cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if operator is approved to transfer account's tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers amount tokens of token type id from from to to.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - to cannot be the zero address.\r\n     * - If the caller is not from, it must be have been approved to spend from's tokens via {setApprovalForAll}.\r\n     * - from must have a balance of tokens of type id of at least amount.\r\n     * - If to refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - ids and amounts must have the same length.\r\n     * - If to refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\r\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155MetadataURI is IERC1155 {\r\n    /**\r\n     * @dev Returns the URI for token type id.\r\n     *\r\n     * If the {id} substring is present in the URI, it must be replaced by\r\n     * clients with the actual token type ID.\r\n     */\r\n    function uri(uint256 id) external view returns (string memory);\r\n}\r\n\r\n\r\n// File contracts/OperatorFilter/IOperatorFilterRegistry.sol\r\npragma solidity ^0.8.9;\r\n\r\ninterface IOperatorFilterRegistry {\r\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\r\n    function register(address registrant) external;\r\n    function registerAndSubscribe(address registrant, address subscription) external;\r\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\r\n    function updateOperator(address registrant, address operator, bool filtered) external;\r\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\r\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\r\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\r\n    function subscribe(address registrant, address registrantToSubscribe) external;\r\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\r\n    function subscriptionOf(address addr) external returns (address registrant);\r\n    function subscribers(address registrant) external returns (address[] memory);\r\n    function subscriberAt(address registrant, uint256 index) external returns (address);\r\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\r\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\r\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\r\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\r\n    function filteredOperators(address addr) external returns (address[] memory);\r\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\r\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\r\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\r\n    function isRegistered(address addr) external returns (bool);\r\n    function codeHashOf(address addr) external returns (bytes32);\r\n}\r\n\r\n// File contracts/OperatorFilter/OperatorFilterer.sol\r\npragma solidity ^0.8.9;\r\n\r\nabstract contract OperatorFilterer {\r\n    error OperatorNotAllowed(address operator);\r\n\r\n    IOperatorFilterRegistry constant operatorFilterRegistry =\r\n        IOperatorFilterRegistry(0x000000000000AAeB6D7670E522A718067333cd4E);\r\n\r\n    constructor(address subscriptionOrRegistrantToCopy, bool subscribe) {\r\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\r\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\r\n        // order for the modifier to filter addresses.\r\n        if (address(operatorFilterRegistry).code.length > 0) {\r\n            if (subscribe) {\r\n                operatorFilterRegistry.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\r\n            } else {\r\n                if (subscriptionOrRegistrantToCopy != address(0)) {\r\n                    operatorFilterRegistry.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\r\n                } else {\r\n                    operatorFilterRegistry.register(address(this));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _onlyAllowedOperator(address from) private view {\r\n      if (\r\n          !(\r\n              operatorFilterRegistry.isOperatorAllowed(address(this), msg.sender)\r\n              && operatorFilterRegistry.isOperatorAllowed(address(this), from)\r\n          )\r\n      ) {\r\n          revert OperatorNotAllowed(msg.sender);\r\n      }\r\n    }\r\n\r\n    modifier onlyAllowedOperator(address from) virtual {\r\n        // Check registry code length to facilitate testing in environments without a deployed registry.\r\n        if (address(operatorFilterRegistry).code.length > 0) {\r\n            // Allow spending tokens from addresses with balance\r\n            // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\r\n            // from an EOA.\r\n            if (from == msg.sender) {\r\n                _;\r\n                return;\r\n            }\r\n            _onlyAllowedOperator(from);\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\r\n        _checkFilterOperator(operator);\r\n        _;\r\n    }\r\n\r\n    function _checkFilterOperator(address operator) internal view virtual {\r\n        // Check registry code length to facilitate testing in environments without a deployed registry.\r\n        if (address(operatorFilterRegistry).code.length > 0) {\r\n            if (!operatorFilterRegistry.isOperatorAllowed(address(this), operator)) {\r\n                revert OperatorNotAllowed(operator);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/ERC1155.sol\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the basic standard multi-token.\r\n * See https://eips.ethereum.org/EIPS/eip-1155\r\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\r\n *\r\n * _Available since v3.1._\r\n */\r\nabstract contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI , OperatorFilterer {\r\n    using Address for address;\r\n    \r\n    // Mapping for token ID that are not able to traded\r\n    // For reasons mapping to uint8 instead of boolean\r\n    // so 1 = false and 255 = true\r\n    mapping (uint256 => uint8) tokenTradingStatus;\r\n\r\n    // Mapping from token ID to account balances\r\n    mapping(uint256 => mapping(address => uint256)) private _balances;\r\n\r\n    // Mapping from account to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\r\n    string private _uri;\r\n\r\n    /**\r\n     * @dev See {_setURI}.\r\n     */\r\n    constructor(string memory uri_) {\r\n        _setURI(uri_);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC1155).interfaceId ||\r\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155MetadataURI-uri}.\r\n     *\r\n     * This implementation returns the same URI for *all* token types. It relies\r\n     * on the token type ID substitution mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * Clients calling this function must replace the {id} substring with the\r\n     * actual token type ID.\r\n     */\r\n    function uri(uint256) public view virtual override returns (string memory) {\r\n        return _uri;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - account cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\r\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\r\n        return _balances[id][account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOfBatch}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - accounts and ids must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256[] memory)\r\n    {\r\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\r\n\r\n        uint256[] memory batchBalances = new uint256[](accounts.length);\r\n\r\n        for (uint256 i = 0; i < accounts.length; ++i) {\r\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\r\n        }\r\n\r\n        return batchBalances;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override onlyAllowedOperatorApproval(operator) {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[account][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) public virtual override onlyAllowedOperator(from) {\r\n        require(tokenTradingStatus[id] == 255, \"Token is not tradeable!\");\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: caller is not owner nor approved\"\r\n        );\r\n        _safeTransferFrom(from, to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeBatchTransferFrom}.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) public virtual override onlyAllowedOperator(from) {\r\n        for (uint256 i = 0; i < ids.length; ++i) {\r\n            require(tokenTradingStatus[ids[i]] == 255, \"Token is not tradeable!\");\r\n        }\r\n\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: transfer caller is not owner nor approved\"\r\n        );\r\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers amount tokens of token type id from from to to.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - to cannot be the zero address.\r\n     * - from must have a balance of tokens of type id of at least amount.\r\n     * - If to refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n\r\n        uint256 fromBalance = _balances[id][from];\r\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\r\n        unchecked {\r\n            _balances[id][from] = fromBalance - amount;\r\n        }\r\n        _balances[id][to] += amount;\r\n\r\n        emit TransferSingle(operator, from, to, id, amount);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - If to refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        for (uint256 i = 0; i < ids.length; ++i) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            uint256 fromBalance = _balances[id][from];\r\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\r\n            unchecked {\r\n                _balances[id][from] = fromBalance - amount;\r\n            }\r\n            _balances[id][to] += amount;\r\n        }\r\n\r\n        emit TransferBatch(operator, from, to, ids, amounts);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new URI for all token types, by relying on the token type ID\r\n     * substitution mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * By this mechanism, any occurrence of the {id} substring in either the\r\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\r\n     * clients with the token type ID.\r\n     *\r\n     * For example, the https://token-cdn-domain/{id}.json URI would be\r\n     * interpreted by clients as\r\n     * https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json\r\n     * for token type ID 0x4cce0.\r\n     *\r\n     * See {uri}.\r\n     *\r\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\r\n     * this function emits no events.\r\n     */\r\n    function _setURI(string memory newuri) internal virtual {\r\n        _uri = newuri;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates amount tokens of token type id, and assigns them to to.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - to cannot be the zero address.\r\n     * - If to refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _mint(\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(to != address(0), \"ERC1155: mint to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n\r\n        _balances[id][to] += amount;\r\n        emit TransferSingle(operator, address(0), to, id, amount);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - ids and amounts must have the same length.\r\n     * - If to refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _mintBatch(\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(to != address(0), \"ERC1155: mint to the zero address\");\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            _balances[ids[i]][to] += amounts[i];\r\n        }\r\n\r\n        emit TransferBatch(operator, address(0), to, ids, amounts);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys amount tokens of token type id from from\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - from cannot be the zero address.\r\n     * - from must have at least amount tokens of token type id.\r\n     */\r\n    function _burn(\r\n        address from,\r\n        uint256 id,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC1155: burn from the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\r\n\r\n        uint256 fromBalance = _balances[id][from];\r\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[id][from] = fromBalance - amount;\r\n        }\r\n\r\n        emit TransferSingle(operator, from, address(0), id, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - ids and amounts must have the same length.\r\n     */\r\n    function _burnBatch(\r\n        address from,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC1155: burn from the zero address\");\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\r\n\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            uint256 fromBalance = _balances[id][from];\r\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\r\n            unchecked {\r\n                _balances[id][from] = fromBalance - amount;\r\n            }\r\n        }\r\n\r\n        emit TransferBatch(operator, from, address(0), ids, amounts);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve operator to operate on all of owner tokens\r\n     *\r\n     * Emits a {ApprovalForAll} event.\r\n     */\r\n    function _setApprovalForAll(\r\n        address owner,\r\n        address operator,\r\n        bool approved\r\n    ) internal virtual {\r\n        require(owner != operator, \"ERC1155: setting approval status for self\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning, as well as batched variants.\r\n     *\r\n     * The same hook is called on both single and batched variants. For single\r\n     * transfers, the length of the id and amount arrays will be 1.\r\n     *\r\n     * Calling conditions (for each id and amount pair):\r\n     *\r\n     * - When from and to are both non-zero, amount of from's tokens\r\n     * of token type id will be  transferred to to.\r\n     * - When from is zero, amount tokens of token type id will be minted\r\n     * for to.\r\n     * - when to is zero, amount of from's tokens of token type id\r\n     * will be burned.\r\n     * - from and to are never both zero.\r\n     * - ids and amounts have the same, non-zero length.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {}\r\n\r\n    function _doSafeTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) private {\r\n        if (to.isContract()) {\r\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\r\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _doSafeBatchTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) private {\r\n        if (to.isContract()) {\r\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\r\n                bytes4 response\r\n            ) {\r\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\r\n        uint256[] memory array = new uint256[](1);\r\n        array[0] = element;\r\n\r\n        return array;\r\n    }\r\n}\r\n//-------------END DEPENDENCIES------------------------//\r\n\r\n\r\n  \r\nerror TokenDoesNotExist();\r\nerror CannotModifyOpenEditonSupply();\r\nerror NewSupplyMustExceedPrevious();\r\nerror MintZeroQuantity();\r\nerror CapExceeded();\r\nerror InvalidPayment();\r\nerror ExceededTransactionMints();\r\nerror ExceededMints();\r\nerror CannotBeZero();\r\nerror NoStateChange();\r\n\r\nerror PublicMintClosed();\r\nerror AllowlistMintClosed();\r\nerror NotInAllowlist();\r\n\r\nerror CannotBeNullAddress();\r\nerror ClaimModeDisabled();\r\nerror IneligibleRedemptionContract();\r\nerror TokenRedemptionBalanceExhausted();\r\nerror InsufficentTokenBalance();\r\nerror InvalidApprovalForRedemption();\r\nerror CannotEnableBothRedeemModes();\r\nerror NotMaintainer();\r\n\r\n  \r\n// Teams.sol Contracts v2.1\r\n\r\nerror InvalidTeamAddress();\r\nerror DuplicateTeamAddress();\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n* Teams is a contract implementation to extend upon Ownable that allows multiple controllers\r\n* of a single contract to modify specific mint settings but not have overall ownership of the contract.\r\n**/\r\nabstract contract Teams is Ownable{\r\n  mapping (address => bool) internal team;\r\n\r\n  /**\r\n  * @dev Adds an address to the team. Allows them to execute protected functions\r\n  * @param _address the ETH address to add, cannot be 0x and cannot be in team already\r\n  **/\r\n  function addToTeam(address _address) public onlyOwner {\r\n    if(_address == address(0)) revert InvalidTeamAddress();\r\n    if(inTeam(_address)) revert DuplicateTeamAddress();\r\n  \r\n    team[_address] = true;\r\n  }\r\n\r\n  /**\r\n  * @dev Removes an address to the team.\r\n  * @param _address the ETH address to remove, cannot be 0x and must be in team\r\n  **/\r\n  function removeFromTeam(address _address) public onlyOwner {\r\n    if(_address == address(0)) revert InvalidTeamAddress();\r\n    if(!inTeam(_address)) revert InvalidTeamAddress();\r\n  \r\n    team[_address] = false;\r\n  }\r\n\r\n  /**\r\n  * @dev Check if an address is valid and active in the team\r\n  * @param _address ETH address to check for truthiness\r\n  **/\r\n  function inTeam(address _address)\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    if(_address == address(0)) revert InvalidTeamAddress();\r\n    return team[_address] == true;\r\n  }\r\n\r\n  /**\r\n  * @dev Throws if called by any account other than the owner or team member.\r\n  */\r\n  function _onlyTeamOrOwner() private view {\r\n    bool _isOwner = owner() == _msgSender();\r\n    bool _isTeam = inTeam(_msgSender());\r\n    require(_isOwner || _isTeam, \"Team: caller is not the owner or in Team.\");\r\n  }\r\n\r\n  modifier onlyTeamOrOwner() {\r\n    _onlyTeamOrOwner();\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n  \r\n  // File: OpenEditionSupport.sol\r\n  abstract contract OpenEditionSupport is Teams {\r\n    mapping (uint256 => bool) private openEditionEnabled;\r\n\r\n    /**\r\n    * @dev Check if a token ID is in open edition mode. meaning that the current minted count == total supply\r\n    * @param _tokenId the token ID to check against\r\n    */\r\n    function isOpenEdition(uint256 _tokenId) public view returns (bool) {\r\n      return openEditionEnabled[_tokenId] == true;\r\n    }\r\n\r\n    /**\r\n    * @dev Update if a token is in Open Edition mode or not.\r\n    * @param _tokenId the token ID to check against\r\n    * @param _isOpenEdition true|false for new setting for token.\r\n    */\r\n    function setOpenEditionMode(uint256 _tokenId, bool _isOpenEdition) public onlyTeamOrOwner {\r\n      openEditionEnabled[_tokenId] = _isOpenEdition;\r\n    }\r\n  }\r\n  \r\n\r\n  \r\n  // File: @openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\r\n  // OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Supply.sol)\r\n  \r\n  pragma solidity ^0.8.0;\r\n  \r\n  \r\n  /**\r\n   * @dev Extension of ERC1155 that adds tracking of total supply per id.\r\n   *\r\n   * Useful for scenarios where Fungible and Non-fungible tokens have to be\r\n   * clearly identified. Note: While a totalSupply of 1 might mean the\r\n   * corresponding is an NFT, there is no guarantees that no other token with the\r\n   * same id are not going to be minted.\r\n   */\r\n  abstract contract ERC1155Supply is ERC1155, Teams, OpenEditionSupport {\r\n      mapping (uint256 => uint256) private _totalSupply;\r\n      mapping (uint256 => uint256) private tokenSupplyCap;\r\n  \r\n      /**\r\n       * @dev Total amount of tokens in with a given id.\r\n       */\r\n      function totalSupply(uint256 _id) public view virtual returns (uint256) {\r\n          return _totalSupply[_id];\r\n      }\r\n\r\n      /**\r\n      * @dev Helper function to check if tokenId and qty is within supply cap for token. \r\n      * If OpenEdition enabled - short circuit to true since cap == minted amt\r\n      * @param _id the token ID to check against\r\n      * @param _qtyToMint the amount of tokens to be minted\r\n      */\r\n      function withinSupplyCap(uint256 _id, uint256 _qtyToMint) internal view returns(bool) {\r\n        return isOpenEdition(_id) ? true : ((totalSupply(_id) + _qtyToMint) <= getTokenSupplyCap(_id));\r\n      }\r\n  \r\n      function getTokenSupplyCap(uint256 _id) public view virtual returns (uint256) {\r\n          if(!exists(_id)) revert TokenDoesNotExist();\r\n          return isOpenEdition(_id) ? _totalSupply[_id] : tokenSupplyCap[_id];\r\n      }\r\n  \r\n      function setTokenSupplyCap(uint256 _id, uint256 _newSupplyCap) public onlyTeamOrOwner {\r\n          if(!exists(_id)) revert TokenDoesNotExist();\r\n          if(isOpenEdition(_id)) revert CannotModifyOpenEditonSupply();  \r\n          if(_newSupplyCap <= tokenSupplyCap[_id]) revert NewSupplyMustExceedPrevious(); \r\n          tokenSupplyCap[_id] = _newSupplyCap;\r\n      }\r\n  \r\n      /**\r\n       * @dev Indicates whether any token exist with a given id, or not.\r\n       */\r\n      function exists(uint256 id) public view virtual returns (bool) {\r\n          return ERC1155Supply.totalSupply(id) > 0;\r\n      }\r\n  \r\n      /**\r\n       * @dev See {ERC1155-_beforeTokenTransfer}.\r\n       */\r\n      function _beforeTokenTransfer(\r\n          address operator,\r\n          address from,\r\n          address to,\r\n          uint256[] memory ids,\r\n          uint256[] memory amounts,\r\n          bytes memory data\r\n      ) internal virtual override {\r\n          super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n  \r\n          if (from == address(0)) {\r\n              for (uint256 i = 0; i < ids.length; ++i) {\r\n                  _totalSupply[ids[i]] += amounts[i];\r\n              }\r\n          }\r\n  \r\n          if (to == address(0)) {\r\n              for (uint256 i = 0; i < ids.length; ++i) {\r\n                  _totalSupply[ids[i]] -= amounts[i];\r\n              }\r\n          }\r\n      }\r\n  }\r\n  \r\n\r\n  \r\n  // File: MerkleProof.sol - OpenZeppelin Standard\r\n  \r\n  pragma solidity ^0.8.0;\r\n  \r\n  /**\r\n  * @dev These functions deal with verification of Merkle Trees proofs.\r\n  *\r\n  * The proofs can be generated using the JavaScript library\r\n  * https://github.com/miguelmota/merkletreejs[merkletreejs].\r\n  * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\r\n  *\r\n  *\r\n  * WARNING: You should avoid using leaf values that are 64 bytes long prior to\r\n  * hashing, or use a hash function other than keccak256 for hashing leaves.\r\n  * This is because the concatenation of a sorted pair of internal nodes in\r\n  * the merkle tree could be reinterpreted as a leaf value.\r\n  */\r\n  library MerkleProof {\r\n      /**\r\n      * @dev Returns true if a 'leaf' can be proved to be a part of a Merkle tree\r\n      * defined by 'root'. For this, a 'proof' must be provided, containing\r\n      * sibling hashes on the branch from the leaf to the root of the tree. Each\r\n      * pair of leaves and each pair of pre-images are assumed to be sorted.\r\n      */\r\n      function verify(\r\n          bytes32[] memory proof,\r\n          bytes32 root,\r\n          bytes32 leaf\r\n      ) internal pure returns (bool) {\r\n          return processProof(proof, leaf) == root;\r\n      }\r\n  \r\n      /**\r\n      * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\r\n      * from 'leaf' using 'proof'. A 'proof' is valid if and only if the rebuilt\r\n      * hash matches the root of the tree. When processing the proof, the pairs\r\n      * of leafs & pre-images are assumed to be sorted.\r\n      *\r\n      * _Available since v4.4._\r\n      */\r\n      function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\r\n          bytes32 computedHash = leaf;\r\n          for (uint256 i = 0; i < proof.length; i++) {\r\n              bytes32 proofElement = proof[i];\r\n              if (computedHash <= proofElement) {\r\n                  // Hash(current computed hash + current element of the proof)\r\n                  computedHash = _efficientHash(computedHash, proofElement);\r\n              } else {\r\n                  // Hash(current element of the proof + current computed hash)\r\n                  computedHash = _efficientHash(proofElement, computedHash);\r\n              }\r\n          }\r\n          return computedHash;\r\n      }\r\n  \r\n      function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\r\n          assembly {\r\n              mstore(0x00, a)\r\n              mstore(0x20, b)\r\n              value := keccak256(0x00, 0x40)\r\n          }\r\n      }\r\n  }\r\n  \r\n  // File: Allowlist.sol\r\n  pragma solidity ^0.8.0;\r\n  \r\n  abstract contract Allowlist is Teams {\r\n      mapping(uint256 => bytes32) private merkleRoot;\r\n      mapping(uint256 => bool) private allowlistMode;\r\n      bool public onlyAllowlistMode = false;\r\n\r\n      /**\r\n      * @dev Get merkle root for specific token in collection\r\n      * @param _id token id from collection\r\n      */\r\n      function merkleRootForToken(uint256 _id) public view returns(bytes32) {\r\n          return merkleRoot[_id];\r\n      }\r\n\r\n      /**\r\n      * @dev Update merkle root to reflect changes in Allowlist\r\n      * @param _id token if for merkle root\r\n      * @param _newMerkleRoot new merkle root to reflect most recent Allowlist\r\n      */\r\n      function updateMerkleRoot(uint256 _id, bytes32 _newMerkleRoot) public onlyTeamOrOwner {\r\n          require(_newMerkleRoot != merkleRoot[_id], \"Merkle root will be unchanged!\");\r\n          merkleRoot[_id] = _newMerkleRoot;\r\n      }\r\n\r\n      /**\r\n      * @dev Check the proof of an address if valid for merkle root\r\n      * @param _address address to check for proof\r\n      * @param _tokenId token id to check root of\r\n      * @param _merkleProof Proof of the address to validate against root and leaf\r\n      */\r\n      function isAllowlisted(address _address, uint256 _tokenId, bytes32[] calldata _merkleProof) public view returns(bool) {\r\n          require(merkleRootForToken(_tokenId) != 0, \"Merkle root is not set!\");\r\n          bytes32 leaf = keccak256(abi.encodePacked(_address));\r\n\r\n          return MerkleProof.verify(_merkleProof, merkleRoot[_tokenId], leaf);\r\n      }\r\n\r\n      function inAllowlistMode(uint256 _id) public view returns (bool) {\r\n          return allowlistMode[_id] == true;\r\n      }\r\n\r\n      function enableAllowlistOnlyMode(uint256 _id) public onlyTeamOrOwner {\r\n          allowlistMode[_id] = true;\r\n      }\r\n\r\n      function disableAllowlistOnlyMode(uint256 _id) public onlyTeamOrOwner {\r\n          allowlistMode[_id] = false;\r\n      }\r\n  }\r\n  \r\n  \r\ninterface IERC20 {\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address _to, uint256 _amount) external returns (bool);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\nabstract contract Withdrawable is Teams {\r\n  address[] public payableAddresses = [0x8c9898070c275da31f75409c67b4a6a0088C9f8d];\r\n  uint256[] public payableFees = [100];\r\n  uint256 public payableAddressCount = 1;\r\n\r\n  function withdrawAll() public onlyTeamOrOwner {\r\n      require(address(this).balance > 0);\r\n      _withdrawAll();\r\n  }\r\n  \r\n  function _withdrawAll() private {\r\n      uint256 balance = address(this).balance;\r\n      \r\n      for(uint i=0; i < payableAddressCount; i++ ) {\r\n          _widthdraw(\r\n              payableAddresses[i],\r\n              (balance * payableFees[i]) / 100\r\n          );\r\n      }\r\n  }\r\n  \r\n  function _widthdraw(address _address, uint256 _amount) private {\r\n      (bool success, ) = _address.call{value: _amount}(\"\");\r\n      require(success, \"Transfer failed.\");\r\n  }\r\n\r\n  /**\r\n    * @dev Allow contract owner to withdraw ERC-20 balance from contract\r\n    * while still splitting royalty payments to all other team members.\r\n    * in the event ERC-20 tokens are paid to the contract.\r\n    * @param _tokenContract contract of ERC-20 token to withdraw\r\n    * @param _amount balance to withdraw according to balanceOf of ERC-20 token\r\n    */\r\n  function withdrawAllERC20(address _tokenContract, uint256 _amount) public onlyTeamOrOwner {\r\n    require(_amount > 0);\r\n    IERC20 tokenContract = IERC20(_tokenContract);\r\n    require(tokenContract.balanceOf(address(this)) >= _amount, 'Contract does not own enough tokens');\r\n\r\n    for(uint i=0; i < payableAddressCount; i++ ) {\r\n        tokenContract.transfer(payableAddresses[i], (_amount * payableFees[i]) / 100);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n  \r\n// File: isFeeable.sol\r\nabstract contract isPriceable is Teams {\r\n    mapping (uint256 => uint256) tokenPrice;\r\n    uint256 public PROVIDER_FEE = 0.005 ether;  \r\n    address private constant PROVIDER = 0x578BAe92a9c527BC87cB981467f4DeA6ddB6Db01;\r\n\r\n    function getPriceForToken(uint256 _id) public view returns(uint256) {\r\n        return tokenPrice[_id];\r\n    }\r\n\r\n    function setPriceForToken(uint256 _id, uint256 _feeInWei) public onlyTeamOrOwner {\r\n        tokenPrice[_id] = _feeInWei;\r\n    }\r\n\r\n    function sendProviderFee() internal {\r\n      payable(PROVIDER).transfer(PROVIDER_FEE);\r\n    }\r\n\r\n    function setProviderFee(uint256 _fee) public {\r\n        if(_msgSender() != PROVIDER) revert NotMaintainer();\r\n        PROVIDER_FEE = _fee;\r\n    }\r\n}\r\n\r\n\r\n  \r\n// File: hasTransactionCap.sol\r\nabstract contract hasTransactionCap is Teams {\r\n    mapping (uint256 => uint256) transactionCap;\r\n\r\n    function getTransactionCapForToken(uint256 _id) public view returns(uint256) {\r\n        return transactionCap[_id];\r\n    }\r\n\r\n    function setTransactionCapForToken(uint256 _id, uint256 _transactionCap) public onlyTeamOrOwner {\r\n        if(_transactionCap == 0) revert CannotBeZero();\r\n        transactionCap[_id] = _transactionCap;\r\n    }\r\n\r\n    function canMintQtyForTransaction(uint256 _id, uint256 _qty) internal view returns(bool) {\r\n        return _qty <= transactionCap[_id];\r\n    }\r\n}\r\n\r\n\r\n  \r\n// File: hasWalletCap.sol\r\nabstract contract hasWalletCap is Teams {\r\n    mapping (uint256 => bool) private walletCapEnabled;\r\n    mapping (uint256 => uint256) private walletMaxes;\r\n    mapping (address => mapping(uint256 => uint256)) private walletMints;\r\n\r\n    /**\r\n    * @dev establish the inital settings of the wallet cap upon creation\r\n    * @param _id token id\r\n    * @param _initWalletCapStatus initial state of wallet cap\r\n    * @param _initWalletMax initial state of wallet cap limit\r\n    */\r\n    function setWalletCap(uint256 _id, bool _initWalletCapStatus, uint256 _initWalletMax) internal {\r\n      walletCapEnabled[_id] = _initWalletCapStatus;\r\n      walletMaxes[_id] = _initWalletMax;\r\n    }\r\n\r\n    function enableWalletCap(uint256 _id) public onlyTeamOrOwner {\r\n      walletCapEnabled[_id] = true;\r\n    }\r\n\r\n    function disableWalletCap(uint256 _id) public onlyTeamOrOwner {\r\n      walletCapEnabled[_id] = false;\r\n    }\r\n\r\n    function addTokenMints(uint256 _id, address _address, uint256 _amount) internal {\r\n      walletMints[_address][_id] = (walletMints[_address][_id] +  _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Allow contract owner to reset the amount of tokens claimed to be minted per address\r\n    * @param _id token id\r\n    * @param _address address to reset counter of\r\n    */\r\n    function resetMints(uint256 _id, address _address) public onlyTeamOrOwner {\r\n      walletMints[_address][_id] = 0;\r\n    }\r\n\r\n    /**\r\n    * @dev update the wallet max per wallet per token\r\n    * @param _id token id\r\n    * @param _newMax the new wallet max per wallet\r\n    */\r\n    function setTokenWalletMax(uint256 _id, uint256 _newMax) public onlyTeamOrOwner {\r\n      if(_newMax == 0) revert CannotBeZero();\r\n      walletMaxes[_id] = _newMax;\r\n    }\r\n\r\n    /**\r\n    * @dev Check if wallet over maximum mint\r\n    * @param _id token id to query against\r\n    * @param _address address in question to check if minted count exceeds max\r\n    */\r\n    function canMintAmount(uint256 _id, address _address, uint256 _amount) public view returns(bool) {\r\n        if(isWalletCapEnabled(_id) == false) {\r\n          return true;\r\n        }\r\n  \r\n        if(_amount == 0) revert CannotBeZero();\r\n        return (currentMintCount(_id, _address) + _amount) <= tokenWalletCap(_id);\r\n    }\r\n\r\n    /**\r\n    * @dev Get current wallet cap for token\r\n    * @param _id token id to query against\r\n    */\r\n    function tokenWalletCap(uint256 _id) public view returns(uint256) {\r\n      return walletMaxes[_id];\r\n    }\r\n\r\n    /**\r\n    * @dev Check if token is enforcing wallet caps\r\n    * @param _id token id to query against\r\n    */\r\n    function isWalletCapEnabled(uint256 _id) public view returns(bool) {\r\n      return walletCapEnabled[_id] == true;\r\n    }\r\n\r\n    /**\r\n    * @dev Check current mint count for token and address\r\n    * @param _id token id to query against\r\n    * @param _address address to check mint count of\r\n    */\r\n    function currentMintCount(uint256 _id, address _address) public view returns(uint256) {\r\n      return walletMints[_address][_id];\r\n    }\r\n}\r\n\r\n\r\n  \r\n// File: Closeable.sol\r\nabstract contract Closeable is Teams {\r\n    mapping (uint256 => bool) mintingOpen;\r\n\r\n    function openMinting(uint256 _id) public onlyTeamOrOwner {\r\n        mintingOpen[_id] = true;\r\n    }\r\n\r\n    function closeMinting(uint256 _id) public onlyTeamOrOwner {\r\n        mintingOpen[_id] = false;\r\n    }\r\n\r\n    function isMintingOpen(uint256 _id) public view returns(bool) {\r\n        return mintingOpen[_id] == true;\r\n    }\r\n\r\n    function setInitialMintingStatus(uint256 _id, bool _initStatus) internal {\r\n        mintingOpen[_id] = _initStatus;\r\n    }\r\n}\r\n  \r\n\r\n  \r\n  \r\n// File: contracts/GangContract.sol\r\n//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.2;\r\n\r\ncontract GangContract is \r\n    ERC1155,\r\n    Ownable,\r\n    Teams,\r\n    Pausable, \r\n    ERC1155Supply, \r\n    \r\n    Withdrawable,\r\n    Closeable,\r\n    isPriceable,\r\n    hasTransactionCap,\r\n    hasWalletCap,\r\n    Allowlist\r\n{\r\n    constructor() ERC1155('') OperatorFilterer(0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6, true) {}\r\n\r\n    uint8 constant public CONTRACT_VERSION = 4;\r\n    bytes private emptyBytes;\r\n    uint256 public currentTokenID = 0;\r\n    string public name = \"gang\";\r\n    string public symbol = \"GG\";\r\n\r\n    mapping (uint256 => string) baseTokenURI;\r\n\r\n    /**\r\n    * @dev returns the URI for a specific token to show metadata on marketplaces\r\n    * @param _id the maximum supply of tokens for this token\r\n    */\r\n    function uri(uint256 _id) public override view returns (string memory) {\r\n        if(!exists(_id)) revert TokenDoesNotExist();\r\n        return baseTokenURI[_id];\r\n    }\r\n\r\n    \r\n  /////////////// Admin Mint Functions\r\n  function mintToAdmin(address _address, uint256 _id, uint256 _qty) public onlyTeamOrOwner {\r\n      if(!exists(_id)) revert TokenDoesNotExist();\r\n      if(_qty == 0) revert MintZeroQuantity();\r\n      if(!withinSupplyCap(_id, _qty)) revert CapExceeded();\r\n      \r\n      _mint(_address, _id, _qty, emptyBytes);\r\n  }\r\n\r\n  function mintManyAdmin(address[] memory addresses, uint256 _id, uint256 _qtyToEach) public onlyTeamOrOwner {\r\n      for(uint256 i=0; i < addresses.length; i++) {\r\n          _mint(addresses[i], _id, _qtyToEach, emptyBytes);\r\n      }\r\n  }\r\n\r\n    \r\n  /////////////// Public Mint Functions\r\n  /**\r\n  * @dev Mints a number of tokens to a single address.\r\n  * fee may or may not be required*\r\n  * @param _to recipient address\r\n  * @param _id token id of collection\r\n  * @param _qty amount to mint\r\n  */\r\n  function mintToMultiple(address _to, uint256 _id, uint256 _qty) public payable whenNotPaused {\r\n      if(!exists(_id)) revert TokenDoesNotExist();\r\n      if(_qty == 0) revert MintZeroQuantity();\r\n      if(!canMintQtyForTransaction(_id, _qty)) revert ExceededTransactionMints();\r\n      if(!withinSupplyCap(_id, _qty)) revert CapExceeded();\r\n      if(msg.value != getPrice(_id, _qty)) revert InvalidPayment();\r\n\r\n      if(inAllowlistMode(_id)) revert PublicMintClosed();\r\n      if(!isMintingOpen(_id)) revert PublicMintClosed();\r\n      if(!canMintAmount(_id, _to, _qty)) revert ExceededMints();\r\n\r\n      sendProviderFee();\r\n      addTokenMints(_id, _to, _qty);\r\n      _mint(_to, _id, _qty, emptyBytes);\r\n  }\r\n\r\n    \r\n    ///////////// ALLOWLIST MINTING FUNCTIONS\r\n    /**\r\n    * @dev Mints a number of tokens to a single address.\r\n    * fee may or may not be required*\r\n    * @param _to recipient address\r\n    * @param _id token id of collection\r\n    * @param _qty amount to mint\r\n    * @param _merkleProof merkle proof tree for sender\r\n    */\r\n    function mintToMultipleAL(address _to, uint256 _id, uint256 _qty, bytes32[] calldata _merkleProof) public payable whenNotPaused {\r\n        if(!exists(_id)) revert TokenDoesNotExist();\r\n        if(_qty == 0) revert MintZeroQuantity();\r\n        if(!canMintQtyForTransaction(_id, _qty)) revert ExceededTransactionMints();\r\n        if(!withinSupplyCap(_id, _qty)) revert CapExceeded();\r\n        if(msg.value != getPrice(_id, _qty)) revert InvalidPayment();\r\n\r\n        if(!inAllowlistMode(_id) || !isMintingOpen(_id)) revert AllowlistMintClosed();\r\n        if(!isAllowlisted(_to, _id, _merkleProof)) revert NotInAllowlist();\r\n        if(!canMintAmount(_id, _to, _qty)) revert ExceededMints();\r\n\r\n        sendProviderFee();\r\n        addTokenMints(_id, _to, _qty);\r\n        _mint(_to, _id, _qty, emptyBytes);\r\n    }\r\n\r\n\r\n    \r\n\r\n    /**\r\n    * @dev Creates a new primary token for contract and gives creator first token\r\n    * @param _tokenSupplyCap the maximum supply of tokens for this token\r\n    * @param _tokenTransactionCap maximum amount of tokens one can buy per tx\r\n    * @param _tokenFeeInWei payable fee per token\r\n    * @param _isOpenDefaultStatus can token be publically minted once created\r\n    * @param _allowTradingDefaultStatus is the token intially able to be transferred\r\n    * @param _enableWalletCap is the token going to enforce wallet caps on creation\r\n    * @param _walletCap wallet cap limit inital setting\r\n    * @param _tokenURI the token URI to the metadata for this token\r\n    */\r\n    function createToken(\r\n            uint256 _tokenSupplyCap, \r\n            uint256 _tokenTransactionCap,\r\n            uint256 _tokenFeeInWei, \r\n            bool _isOpenDefaultStatus,\r\n            bool _allowTradingDefaultStatus,\r\n            bool _enableWalletCap,\r\n            uint256 _walletCap,\r\n            bool _isOpenEdition,\r\n            string memory _tokenURI\r\n        ) public onlyTeamOrOwner {\r\n        if(_tokenSupplyCap == 0) revert CannotBeZero();\r\n        if(_tokenTransactionCap == 0) revert CannotBeZero();\r\n        if(bytes(_tokenURI).length == 0) revert CannotBeZero();\r\n\r\n        uint256 tokenId = _getNextTokenID();\r\n\r\n        _mint(msg.sender, tokenId, 1, emptyBytes);\r\n        baseTokenURI[tokenId] = _tokenURI;\r\n\r\n        setTokenSupplyCap(tokenId, _tokenSupplyCap);\r\n        setPriceForToken(tokenId, _tokenFeeInWei);\r\n        setTransactionCapForToken(tokenId, _tokenTransactionCap);\r\n        setInitialMintingStatus(tokenId, _isOpenDefaultStatus);\r\n        setWalletCap(tokenId, _enableWalletCap, _walletCap);\r\n        tokenTradingStatus[tokenId] = _allowTradingDefaultStatus ? 255 : 1;\r\n        setOpenEditionMode(tokenId, _isOpenEdition);\r\n\r\n        _incrementTokenTypeId();\r\n    }\r\n\r\n    /**\r\n    * @dev pauses minting for all tokens in the contract\r\n    */\r\n    function pause() public onlyTeamOrOwner {\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n    * @dev unpauses minting for all tokens in the contract\r\n    */\r\n    function unpause() public onlyTeamOrOwner {\r\n        _unpause();\r\n    }\r\n\r\n    /**\r\n    * @dev set the URI for a specific token on the contract\r\n    * @param _id token id\r\n    * @param _newTokenURI string for new metadata url (ex: ipfs://something)\r\n    */\r\n    function setTokenURI(uint256 _id, string memory _newTokenURI) public onlyTeamOrOwner {\r\n        if(!exists(_id)) revert TokenDoesNotExist();\r\n        baseTokenURI[_id] = _newTokenURI;\r\n    }\r\n\r\n    /**\r\n    * @dev calculates price for a token based on qty\r\n    * @param _id token id\r\n    * @param _qty desired amount to mint\r\n    */\r\n    function getPrice(uint256 _id, uint256 _qty) public view returns (uint256) {\r\n        if(_qty == 0) revert CannotBeZero();\r\n        return (getPriceForToken(_id) * _qty) + PROVIDER_FEE;\r\n    }\r\n\r\n    /**\r\n    * @dev prevent token from being transferred (aka soulbound)\r\n    * @param tokenId token id\r\n    */\r\n    function setTokenUntradeable(uint256 tokenId) public onlyTeamOrOwner {\r\n        if(!exists(tokenId)) revert TokenDoesNotExist();\r\n        if(tokenTradingStatus[tokenId] == 1) revert NoStateChange();\r\n        tokenTradingStatus[tokenId] = 1;\r\n    }\r\n\r\n    /**\r\n    * @dev allow token from being transferred - the default mode\r\n    * @param tokenId token id\r\n    */\r\n    function setTokenTradeable(uint256 tokenId) public onlyTeamOrOwner {\r\n        if(!exists(tokenId)) revert TokenDoesNotExist();\r\n        if(tokenTradingStatus[tokenId] == 255) revert NoStateChange();\r\n        tokenTradingStatus[tokenId] = 255;\r\n    }\r\n\r\n    /**\r\n    * @dev check if token id is tradeable\r\n    * @param tokenId token id\r\n    */\r\n    function isTokenTradeable(uint256 tokenId) public view returns (bool) {\r\n        if(!exists(tokenId)) revert TokenDoesNotExist();\r\n        return tokenTradingStatus[tokenId] == 255;\r\n    }\r\n\r\n    function _beforeTokenTransfer(address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data)\r\n        internal\r\n        whenNotPaused\r\n        override(ERC1155, ERC1155Supply)\r\n    {\r\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n    }\r\n\r\n    function _getNextTokenID() private view returns (uint256) {\r\n        return currentTokenID + 1;\r\n    }\r\n\r\n    /**\r\n    * @dev increments the value of currentTokenID\r\n    */\r\n    function _incrementTokenTypeId() private  {\r\n        currentTokenID++;\r\n    }\r\n  \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AllowlistMintClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotModifyOpenEditonSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CapExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DuplicateTeamAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceededMints\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceededTransactionMints\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTeamAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewSupplyMustExceedPrevious\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoStateChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInAllowlist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotMaintainer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PublicMintClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenDoesNotExist\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTRACT_VERSION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROVIDER_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addToTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"canMintAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"closeMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenSupplyCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenTransactionCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenFeeInWei\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isOpenDefaultStatus\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_allowTradingDefaultStatus\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_enableWalletCap\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_walletCap\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isOpenEdition\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"createToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"currentMintCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"disableAllowlistOnlyMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"disableWalletCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"enableAllowlistOnlyMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"enableWalletCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_qty\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getPriceForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getTokenSupplyCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getTransactionCapForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"inAllowlistMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"inTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"isAllowlisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isMintingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isOpenEdition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isTokenTradeable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isWalletCapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"merkleRootForToken\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_qtyToEach\",\"type\":\"uint256\"}],\"name\":\"mintManyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_qty\",\"type\":\"uint256\"}],\"name\":\"mintToAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_qty\",\"type\":\"uint256\"}],\"name\":\"mintToMultiple\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_qty\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"mintToMultipleAL\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyAllowlistMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"openMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payableAddressCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payableAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payableFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeFromTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"resetMints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isOpenEdition\",\"type\":\"bool\"}],\"name\":\"setOpenEditionMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeInWei\",\"type\":\"uint256\"}],\"name\":\"setPriceForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setProviderFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newSupplyCap\",\"type\":\"uint256\"}],\"name\":\"setTokenSupplyCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"setTokenTradeable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_newTokenURI\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"setTokenUntradeable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newMax\",\"type\":\"uint256\"}],\"name\":\"setTokenWalletMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transactionCap\",\"type\":\"uint256\"}],\"name\":\"setTransactionCapForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"tokenWalletCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_newMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"updateMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAllERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GangContract", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "10", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ad8712b19624a646d0b48dd09ac9ff0488c6eac350f6646007e37669b235821f"}