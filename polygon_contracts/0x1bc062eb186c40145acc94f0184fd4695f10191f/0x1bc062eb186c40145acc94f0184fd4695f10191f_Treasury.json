{"SourceCode": "// Sources flattened with hardhat v2.8.0 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/math/Math.sol@v3.4.2\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n\r\n\r\n          _____                    _____                    _____                    _____                   _______         \r\n         /\\    \\                  /\\    \\                  /\\    \\                  /\\    \\                 /::\\    \\        \r\n        /::\\____\\                /::\\    \\                /::\\    \\                /::\\____\\               /::::\\    \\       \r\n       /::::|   |               /::::\\    \\              /::::\\    \\              /:::/    /              /::::::\\    \\      \r\n      /:::::|   |              /::::::\\    \\            /::::::\\    \\            /:::/    /              /::::::::\\    \\     \r\n     /::::::|   |             /:::/\\:::\\    \\          /:::/\\:::\\    \\          /:::/    /              /:::/~~\\:::\\    \\    \r\n    /:::/|::|   |            /:::/__\\:::\\    \\        /:::/  \\:::\\    \\        /:::/____/              /:::/    \\:::\\    \\   \r\n   /:::/ |::|   |           /::::\\   \\:::\\    \\      /:::/    \\:::\\    \\      /::::\\    \\             /:::/    / \\:::\\    \\  \r\n  /:::/  |::|   | _____    /::::::\\   \\:::\\    \\    /:::/    / \\:::\\    \\    /::::::\\    \\   _____   /:::/____/   \\:::\\____\\ \r\n /:::/   |::|   |/\\    \\  /:::/\\:::\\   \\:::\\    \\  /:::/    /   \\:::\\    \\  /:::/\\:::\\    \\ /\\    \\ |:::|    |     |:::|    |\r\n/:: /    |::|   /::\\____\\/:::/  \\:::\\   \\:::\\____\\/:::/____/     \\:::\\____\\/:::/  \\:::\\    /::\\____\\|:::|____|     |:::|    |\r\n\\::/    /|::|  /:::/    /\\::/    \\:::\\  /:::/    /\\:::\\    \\      \\::/    /\\::/    \\:::\\  /:::/    / \\:::\\    \\   /:::/    / \r\n \\/____/ |::| /:::/    /  \\/____/ \\:::\\/:::/    /  \\:::\\    \\      \\/____/  \\/____/ \\:::\\/:::/    /   \\:::\\    \\ /:::/    /  \r\n         |::|/:::/    /            \\::::::/    /    \\:::\\    \\                       \\::::::/    /     \\:::\\    /:::/    /   \r\n         |::::::/    /              \\::::/    /      \\:::\\    \\                       \\::::/    /       \\:::\\__/:::/    /    \r\n         |:::::/    /               /:::/    /        \\:::\\    \\                      /:::/    /         \\::::::::/    /     \r\n         |::::/    /               /:::/    /          \\:::\\    \\                    /:::/    /           \\::::::/    /      \r\n         /:::/    /               /:::/    /            \\:::\\    \\                  /:::/    /             \\::::/    /       \r\n        /:::/    /               /:::/    /              \\:::\\____\\                /:::/    /               \\::/____/        \r\n        \\::/    /                \\::/    /                \\::/    /                \\::/    /                 ~~              \r\n         \\/____/                  \\/____/                  \\/____/                  \\/____/                                  \r\n                                                                                                                             \r\n\r\n\r\n*/\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v3.4.2\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/math/SafeMath.sol@v3.4.2\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v3.4.2\r\n\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/SafeERC20.sol@v3.4.2\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/ReentrancyGuard.sol@v3.4.2\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/lib/Babylonian.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\nlibrary Babylonian {\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n        // else z = 0\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v3.4.2\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/GSN/Context.sol@v3.4.2\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v3.4.2\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/owner/Operator.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\ncontract Operator is Context, Ownable {\r\n    address private _operator;\r\n\r\n    event OperatorTransferred(address indexed previousOperator, address indexed newOperator);\r\n\r\n    constructor() internal {\r\n        _operator = _msgSender();\r\n        emit OperatorTransferred(address(0), _operator);\r\n    }\r\n\r\n    function operator() public view returns (address) {\r\n        return _operator;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(_operator == msg.sender, \"operator: caller is not the operator\");\r\n        _;\r\n    }\r\n\r\n    function isOperator() public view returns (bool) {\r\n        return _msgSender() == _operator;\r\n    }\r\n\r\n    function transferOperator(address newOperator_) public onlyOwner {\r\n        _transferOperator(newOperator_);\r\n    }\r\n\r\n    function _transferOperator(address newOperator_) internal {\r\n        require(newOperator_ != address(0), \"operator: zero address given for new operator\");\r\n        emit OperatorTransferred(address(0), newOperator_);\r\n        _operator = newOperator_;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/utils/ContractGuard.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract ContractGuard {\r\n    mapping(uint256 => mapping(address => bool)) private _status;\r\n\r\n    function checkSameOriginReentranted() internal view returns (bool) {\r\n        return _status[block.number][tx.origin];\r\n    }\r\n\r\n    function checkSameSenderReentranted() internal view returns (bool) {\r\n        return _status[block.number][msg.sender];\r\n    }\r\n\r\n    modifier onlyOneBlock() {\r\n        require(!checkSameOriginReentranted(), \"ContractGuard: one block, one function\");\r\n        require(!checkSameSenderReentranted(), \"ContractGuard: one block, one function\");\r\n\r\n        _;\r\n\r\n        _status[block.number][tx.origin] = true;\r\n        _status[block.number][msg.sender] = true;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IBasisAsset.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface IBasisAsset {\r\n    function mint(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function burn(uint256 amount) external;\r\n\r\n    function burnFrom(address from, uint256 amount) external;\r\n\r\n    function isOperator() external returns (bool);\r\n\r\n    function operator() external view returns (address);\r\n\r\n    function transferOperator(address newOperator_) external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/IOracle.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IOracle {\r\n    function update() external;\r\n\r\n    function consult(address _token, uint256 _amountIn) external view returns (uint144 amountOut);\r\n\r\n    function twap(address _token, uint256 _amountIn) external view returns (uint144 _amountOut);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IMasonry.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IMasonry {\r\n    function balanceOf(address _mason) external view returns (uint256);\r\n\r\n    function earned(address _mason) external view returns (uint256);\r\n\r\n    function canWithdraw(address _mason) external view returns (bool);\r\n\r\n    function canClaimReward(address _mason) external view returns (bool);\r\n\r\n    function epoch() external view returns (uint256);\r\n\r\n    function nextEpochPoint() external view returns (uint256);\r\n\r\n    function getTombPrice() external view returns (uint256);\r\n\r\n    function setOperator(address _operator) external;\r\n\r\n    function setTreasury(address _treasury) external;\r\n\r\n    function setLockUp(uint256 _withdrawLockupEpochs, uint256 _rewardLockupEpochs) external;\r\n\r\n    function stake(uint256 _amount) external;\r\n\r\n    function withdraw(uint256 _amount) external;\r\n\r\n    function exit() external;\r\n\r\n    function claimReward() external;\r\n\r\n    function allocateSeigniorage(uint256 _amount) external;\r\n\r\n    function governanceRecoverUnsupported(address _token, uint256 _amount, address _to) external;\r\n}\r\n\r\n\r\n// File contracts/Treasury.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n  ______                __       _______\r\n /_  __/___  ____ ___  / /_     / ____(_)___  ____ _____  ________\r\n  / / / __ \\/ __ `__ \\/ __ \\   / /_  / / __ \\/ __ `/ __ \\/ ___/ _ \\\r\n / / / /_/ / / / / / / /_/ /  / __/ / / / / / /_/ / / / / /__/  __/\r\n/_/  \\____/_/ /_/ /_/_.___/  /_/   /_/_/ /_/\\__,_/_/ /_/\\___/\\___/\r\n\r\n    http://tomb.finance\r\n*/\r\ncontract Treasury is ContractGuard {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    /* ========= CONSTANT VARIABLES ======== */\r\n\r\n    uint256 public constant PERIOD = 6 hours;\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    // governance\r\n    address public operator;\r\n\r\n    // flags\r\n    bool public initialized = false;\r\n\r\n    // epoch\r\n    uint256 public startTime;\r\n    uint256 public epoch = 48;\r\n    uint256 public epochSupplyContractionLeft = 0;\r\n\r\n    // exclusions from total supply\r\n    address[] public excludedFromTotalSupply = [\r\n        address(0xA4DDEa2Ac7b53560a860152996cAC8b9f6F20d2c), // TombGenesisPool\r\n        address(0xF0d981891bA84d98655Ef9eb520a43E6b6E247D3) // new TombRewardPool\r\n    ];\r\n\r\n    // core components\r\n    address public tomb;\r\n    address public tbond;\r\n    address public tshare;\r\n\r\n    address public masonry;\r\n    address public tombOracle;\r\n\r\n    // price\r\n    uint256 public tombPriceOne;\r\n    uint256 public tombPriceCeiling;\r\n\r\n    uint256 public seigniorageSaved;\r\n\r\n    uint256[] public supplyTiers;\r\n    uint256[] public maxExpansionTiers;\r\n\r\n    uint256 public maxSupplyExpansionPercent;\r\n    uint256 public bondDepletionFloorPercent;\r\n    uint256 public seigniorageExpansionFloorPercent;\r\n    uint256 public maxSupplyContractionPercent;\r\n    uint256 public maxDebtRatioPercent;\r\n\r\n    // 28 first epochs (1 week) with 4.5% expansion regardless of TOMB price\r\n    uint256 public bootstrapEpochs;\r\n    uint256 public bootstrapSupplyExpansionPercent;\r\n\r\n    /* =================== Added variables =================== */\r\n    uint256 public previousEpochTombPrice;\r\n    uint256 public maxDiscountRate; // when purchasing bond\r\n    uint256 public maxPremiumRate; // when redeeming bond\r\n    uint256 public discountPercent;\r\n    uint256 public premiumThreshold;\r\n    uint256 public premiumPercent;\r\n    uint256 public mintingFactorForPayingDebt; // print extra TOMB during debt phase\r\n\r\n    address public daoFund;\r\n    uint256 public daoFundSharedPercent;\r\n\r\n    address public devFund;\r\n    uint256 public devFundSharedPercent;\r\n\r\n    /* =================== Bond Treasury =================== */\r\n    address public bondPurchaseToken = address(0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619); //wETH on Polygon\r\n    uint256 public bondPurchaseTokenRatio = 10000000; //1000x\r\n    uint256 public specialBondsSupply = 0;\r\n    uint256 public bondVestingPeriod = 3 days;\r\n\r\n    // Info for bond holder\r\n    struct Bond {\r\n        uint payout; // NBOND remaining to be paid\r\n        uint vesting; // Time left to vest\r\n        uint lastTimestamp; // Last interaction\r\n    }\r\n\r\n    mapping( address => Bond ) public bondInfo; // stores bond information for depositors\r\n\r\n    /* =================== Events =================== */\r\n\r\n    event Initialized(address indexed executor, uint256 at);\r\n    event BurnedBonds(address indexed from, uint256 bondAmount);\r\n    event RedeemedBonds(address indexed from, uint256 tombAmount, uint256 bondAmount);\r\n    event BoughtBonds(address indexed from, uint256 tombAmount, uint256 bondAmount);\r\n    event TreasuryFunded(uint256 timestamp, uint256 seigniorage);\r\n    event MasonryFunded(uint256 timestamp, uint256 seigniorage);\r\n    event DaoFundFunded(uint256 timestamp, uint256 seigniorage);\r\n    event DevFundFunded(uint256 timestamp, uint256 seigniorage);\r\n\r\n    /* =================== Modifier =================== */\r\n\r\n    modifier onlyOperator() {\r\n        require(operator == msg.sender, \"Treasury: caller is not the operator\");\r\n        _;\r\n    }\r\n\r\n    modifier checkCondition {\r\n        require(now >= startTime, \"Treasury: not started yet\");\r\n\r\n        _;\r\n    }\r\n\r\n    modifier checkEpoch {\r\n        require(now >= nextEpochPoint(), \"Treasury: not opened yet\");\r\n\r\n        _;\r\n\r\n        epoch = epoch.add(1);\r\n        epochSupplyContractionLeft = (getTombPrice() > tombPriceCeiling) ? 0 : getTombCirculatingSupply().mul(maxSupplyContractionPercent).div(10000);\r\n    }\r\n\r\n    modifier checkOperator {\r\n        require(\r\n            IBasisAsset(tomb).operator() == address(this) &&\r\n                IBasisAsset(tbond).operator() == address(this) &&\r\n                IBasisAsset(tshare).operator() == address(this) &&\r\n                Operator(masonry).operator() == address(this),\r\n            \"Treasury: need more permission\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    modifier notInitialized {\r\n        require(!initialized, \"Treasury: already initialized\");\r\n\r\n        _;\r\n    }\r\n\r\n    /* ========== VIEW FUNCTIONS ========== */\r\n\r\n    function isInitialized() public view returns (bool) {\r\n        return initialized;\r\n    }\r\n\r\n    // epoch\r\n    function nextEpochPoint() public view returns (uint256) {\r\n        return startTime.add(epoch.mul(PERIOD));\r\n    }\r\n\r\n    // oracle\r\n    function getTombPrice() public view returns (uint256 tombPrice) {\r\n        try IOracle(tombOracle).consult(tomb, 1e18) returns (uint144 price) {\r\n            return uint256(price);\r\n        } catch {\r\n            revert(\"Treasury: failed to consult TOMB price from the oracle\");\r\n        }\r\n    }\r\n\r\n    function getTombUpdatedPrice() public view returns (uint256 _tombPrice) {\r\n        try IOracle(tombOracle).twap(tomb, 1e18) returns (uint144 price) {\r\n            return uint256(price);\r\n        } catch {\r\n            revert(\"Treasury: failed to consult TOMB price from the oracle\");\r\n        }\r\n    }\r\n\r\n    // budget\r\n    function getReserve() public view returns (uint256) {\r\n        return seigniorageSaved;\r\n    }\r\n\r\n    function getBurnableTombLeft() public view returns (uint256 _burnableTombLeft) {\r\n        uint256 _tombPrice = getTombPrice();\r\n        if (_tombPrice <= tombPriceOne) {\r\n            uint256 _tombSupply = getTombCirculatingSupply();\r\n            uint256 _bondMaxSupply = _tombSupply.mul(maxDebtRatioPercent).div(10000);\r\n            uint256 _bondSupply = IERC20(tbond).totalSupply();\r\n            if (_bondMaxSupply > _bondSupply) {\r\n                uint256 _maxMintableBond = _bondMaxSupply.sub(_bondSupply);\r\n                uint256 _maxBurnableTomb = _maxMintableBond.mul(_tombPrice).div(1e15);\r\n                _burnableTombLeft = Math.min(epochSupplyContractionLeft, _maxBurnableTomb);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getRedeemableBonds() public view returns (uint256 _redeemableBonds) {\r\n        uint256 _tombPrice = getTombPrice();\r\n        if (_tombPrice > tombPriceCeiling) {\r\n            uint256 _totalTomb = IERC20(tomb).balanceOf(address(this));\r\n            uint256 _rate = getBondPremiumRate();\r\n            if (_rate > 0) {\r\n                _redeemableBonds = _totalTomb.mul(1e15).div(_rate);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getBondDiscountRate() public view returns (uint256 _rate) {\r\n        uint256 _tombPrice = getTombPrice();\r\n        if (_tombPrice <= tombPriceOne) {\r\n            if (discountPercent == 0) {\r\n                // no discount\r\n                _rate = tombPriceOne;\r\n            } else {\r\n                uint256 _bondAmount = tombPriceOne.mul(1e18).div(_tombPrice); // to burn 1 TOMB\r\n                uint256 _discountAmount = _bondAmount.sub(tombPriceOne).mul(discountPercent).div(10000);\r\n                _rate = tombPriceOne.add(_discountAmount);\r\n                if (maxDiscountRate > 0 && _rate > maxDiscountRate) {\r\n                    _rate = maxDiscountRate;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getBondPremiumRate() public view returns (uint256 _rate) {\r\n        uint256 _tombPrice = getTombPrice();\r\n        if (_tombPrice > tombPriceCeiling) {\r\n            uint256 _tombPricePremiumThreshold = tombPriceOne.mul(premiumThreshold).div(100);\r\n            if (_tombPrice >= _tombPricePremiumThreshold) {\r\n                //Price > 1.10\r\n                uint256 _premiumAmount = _tombPrice.sub(tombPriceOne).mul(premiumPercent).div(10000);\r\n                _rate = tombPriceOne.add(_premiumAmount);\r\n                if (maxPremiumRate > 0 && _rate > maxPremiumRate) {\r\n                    _rate = maxPremiumRate;\r\n                }\r\n            } else {\r\n                // no premium bonus\r\n                _rate = tombPriceOne;\r\n            }\r\n        }\r\n    }\r\n\r\n    /* ========== GOVERNANCE ========== */\r\n\r\n    function initialize(\r\n        address _tomb,\r\n        address _tbond,\r\n        address _tshare,\r\n        address _tombOracle,\r\n        address _masonry,\r\n        uint256 _startTime\r\n    ) public notInitialized {\r\n        tomb = _tomb;\r\n        tbond = _tbond;\r\n        tshare = _tshare;\r\n        tombOracle = _tombOracle;\r\n        masonry = _masonry;\r\n        startTime = _startTime;\r\n\r\n        tombPriceOne = 10**15;\r\n        tombPriceCeiling = tombPriceOne.mul(101).div(100);\r\n\r\n        // Dynamic max expansion percent\r\n        supplyTiers = [0 ether, 500000 ether, 1000000 ether, 1500000 ether, 2000000 ether, 5000000 ether, 10000000 ether, 20000000 ether, 50000000 ether];\r\n        maxExpansionTiers = [450, 400, 350, 300, 250, 200, 150, 125, 100];\r\n\r\n        maxSupplyExpansionPercent = 400; // Upto 4.0% supply for expansion\r\n\r\n        bondDepletionFloorPercent = 10000; // 100% of Bond supply for depletion floor\r\n        seigniorageExpansionFloorPercent = 3500; // At least 35% of expansion reserved for masonry\r\n        maxSupplyContractionPercent = 300; // Upto 3.0% supply for contraction (to burn TOMB and mint tBOND)\r\n        maxDebtRatioPercent = 3500; // Upto 35% supply of tBOND to purchase\r\n\r\n        premiumThreshold = 110;\r\n        premiumPercent = 7000;\r\n\r\n        // First 28 epochs with 4.5% expansion\r\n        bootstrapEpochs = 0;\r\n        bootstrapSupplyExpansionPercent = 450;\r\n\r\n        // set seigniorageSaved to it's balance\r\n        seigniorageSaved = IERC20(tomb).balanceOf(address(this));\r\n\r\n        initialized = true;\r\n        operator = msg.sender;\r\n        emit Initialized(msg.sender, block.number);\r\n    }\r\n\r\n    function setOperator(address _operator) external onlyOperator {\r\n        operator = _operator;\r\n    }\r\n\r\n    function setMasonry(address _masonry) external onlyOperator {\r\n        masonry = _masonry;\r\n    }\r\n\r\n    function setTombOracle(address _tombOracle) external onlyOperator {\r\n        tombOracle = _tombOracle;\r\n    }\r\n\r\n    function setTombPriceCeiling(uint256 _tombPriceCeiling) external onlyOperator {\r\n        require(_tombPriceCeiling >= tombPriceOne && _tombPriceCeiling <= tombPriceOne.mul(120).div(100), \"out of range\"); // [$1.0, $1.2]\r\n        tombPriceCeiling = _tombPriceCeiling;\r\n    }\r\n\r\n    function setMaxSupplyExpansionPercents(uint256 _maxSupplyExpansionPercent) external onlyOperator {\r\n        require(_maxSupplyExpansionPercent >= 10 && _maxSupplyExpansionPercent <= 1000, \"_maxSupplyExpansionPercent: out of range\"); // [0.1%, 10%]\r\n        maxSupplyExpansionPercent = _maxSupplyExpansionPercent;\r\n    }\r\n\r\n    function setSupplyTiersEntry(uint8 _index, uint256 _value) external onlyOperator returns (bool) {\r\n        require(_index >= 0, \"Index has to be higher than 0\");\r\n        require(_index < 9, \"Index has to be lower than count of tiers\");\r\n        if (_index > 0) {\r\n            require(_value > supplyTiers[_index - 1]);\r\n        }\r\n        if (_index < 8) {\r\n            require(_value < supplyTiers[_index + 1]);\r\n        }\r\n        supplyTiers[_index] = _value;\r\n        return true;\r\n    }\r\n\r\n    function setMaxExpansionTiersEntry(uint8 _index, uint256 _value) external onlyOperator returns (bool) {\r\n        require(_index >= 0, \"Index has to be higher than 0\");\r\n        require(_index < 9, \"Index has to be lower than count of tiers\");\r\n        require(_value >= 10 && _value <= 1000, \"_value: out of range\"); // [0.1%, 10%]\r\n        maxExpansionTiers[_index] = _value;\r\n        return true;\r\n    }\r\n\r\n    function setBondDepletionFloorPercent(uint256 _bondDepletionFloorPercent) external onlyOperator {\r\n        require(_bondDepletionFloorPercent >= 500 && _bondDepletionFloorPercent <= 10000, \"out of range\"); // [5%, 100%]\r\n        bondDepletionFloorPercent = _bondDepletionFloorPercent;\r\n    }\r\n\r\n    function setMaxSupplyContractionPercent(uint256 _maxSupplyContractionPercent) external onlyOperator {\r\n        require(_maxSupplyContractionPercent >= 100 && _maxSupplyContractionPercent <= 1500, \"out of range\"); // [0.1%, 15%]\r\n        maxSupplyContractionPercent = _maxSupplyContractionPercent;\r\n    }\r\n\r\n    function setMaxDebtRatioPercent(uint256 _maxDebtRatioPercent) external onlyOperator {\r\n        require(_maxDebtRatioPercent >= 1000 && _maxDebtRatioPercent <= 10000, \"out of range\"); // [10%, 100%]\r\n        maxDebtRatioPercent = _maxDebtRatioPercent;\r\n    }\r\n\r\n    function setBootstrap(uint256 _bootstrapEpochs, uint256 _bootstrapSupplyExpansionPercent) external onlyOperator {\r\n        require(_bootstrapEpochs <= 120, \"_bootstrapEpochs: out of range\"); // <= 1 month\r\n        require(_bootstrapSupplyExpansionPercent >= 100 && _bootstrapSupplyExpansionPercent <= 1000, \"_bootstrapSupplyExpansionPercent: out of range\"); // [1%, 10%]\r\n        bootstrapEpochs = _bootstrapEpochs;\r\n        bootstrapSupplyExpansionPercent = _bootstrapSupplyExpansionPercent;\r\n    }\r\n\r\n    function setExtraFunds(\r\n        address _daoFund,\r\n        uint256 _daoFundSharedPercent,\r\n        address _devFund,\r\n        uint256 _devFundSharedPercent\r\n    ) external onlyOperator {\r\n        require(_daoFund != address(0), \"zero\");\r\n        require(_daoFundSharedPercent <= 3000, \"out of range\"); // <= 30%\r\n        require(_devFund != address(0), \"zero\");\r\n        require(_devFundSharedPercent <= 1000, \"out of range\"); // <= 10%\r\n        daoFund = _daoFund;\r\n        daoFundSharedPercent = _daoFundSharedPercent;\r\n        devFund = _devFund;\r\n        devFundSharedPercent = _devFundSharedPercent;\r\n    }\r\n\r\n    function setMaxDiscountRate(uint256 _maxDiscountRate) external onlyOperator {\r\n        maxDiscountRate = _maxDiscountRate;\r\n    }\r\n\r\n    function setMaxPremiumRate(uint256 _maxPremiumRate) external onlyOperator {\r\n        maxPremiumRate = _maxPremiumRate;\r\n    }\r\n\r\n    function setDiscountPercent(uint256 _discountPercent) external onlyOperator {\r\n        require(_discountPercent <= 20000, \"_discountPercent is over 200%\");\r\n        discountPercent = _discountPercent;\r\n    }\r\n\r\n    function setPremiumThreshold(uint256 _premiumThreshold) external onlyOperator {\r\n        require(_premiumThreshold >= tombPriceCeiling, \"_premiumThreshold exceeds tombPriceCeiling\");\r\n        require(_premiumThreshold <= 150, \"_premiumThreshold is higher than 1.5\");\r\n        premiumThreshold = _premiumThreshold;\r\n    }\r\n\r\n    function setPremiumPercent(uint256 _premiumPercent) external onlyOperator {\r\n        require(_premiumPercent <= 20000, \"_premiumPercent is over 200%\");\r\n        premiumPercent = _premiumPercent;\r\n    }\r\n\r\n    function setMintingFactorForPayingDebt(uint256 _mintingFactorForPayingDebt) external onlyOperator {\r\n        require(_mintingFactorForPayingDebt >= 10000 && _mintingFactorForPayingDebt <= 20000, \"_mintingFactorForPayingDebt: out of range\"); // [100%, 200%]\r\n        mintingFactorForPayingDebt = _mintingFactorForPayingDebt;\r\n    }\r\n\r\n    /* ========== MUTABLE FUNCTIONS ========== */\r\n\r\n    function _updateTombPrice() internal {\r\n        try IOracle(tombOracle).update() {} catch {}\r\n    }\r\n\r\n    function updateReserves() external onlyOperator {\r\n        seigniorageSaved = IERC20(tomb).balanceOf(address(this));\r\n    }\r\n\r\n    function getTombCirculatingSupply() public view returns (uint256) {\r\n        IERC20 tombErc20 = IERC20(tomb);\r\n        uint256 totalSupply = tombErc20.totalSupply();\r\n        uint256 balanceExcluded = 0;\r\n        for (uint8 entryId = 0; entryId < excludedFromTotalSupply.length; ++entryId) {\r\n            balanceExcluded = balanceExcluded.add(tombErc20.balanceOf(excludedFromTotalSupply[entryId]));\r\n        }\r\n        return totalSupply.sub(balanceExcluded);\r\n    }\r\n\r\n    function setSpecialBondDetails(\r\n        address purchaseToken,\r\n        uint256 ratio,\r\n        uint256 supplyAmount,\r\n        uint256 vestingPeriod\r\n    ) external onlyOperator {\r\n        bondPurchaseToken = purchaseToken;\r\n        bondPurchaseTokenRatio = ratio;\r\n        specialBondsSupply = supplyAmount;\r\n        bondVestingPeriod = vestingPeriod;\r\n    }\r\n\r\n    function setSpecialBondPrice(uint256 ratio) external onlyOperator {\r\n        bondPurchaseTokenRatio = ratio;\r\n    }\r\n\r\n    function setSpecialBondVestingPeriod(uint256 vestingPeriod) external onlyOperator {\r\n        bondVestingPeriod = vestingPeriod;\r\n    }\r\n\r\n    function setSpecialBondSupplyAmount(uint256 amount) external onlyOperator {\r\n        specialBondsSupply = amount;\r\n    }\r\n\r\n    function reduceSpecialBondSupply(uint256 amount) external onlyOperator {\r\n        specialBondsSupply = specialBondsSupply.sub(Math.min(specialBondsSupply, amount));\r\n    }\r\n\r\n    function increaseSpecialBondSupply(uint256 amount) external onlyOperator {\r\n        specialBondsSupply = specialBondsSupply.add(amount);\r\n    }\r\n\r\n    function buySpecialBonds(uint256 tokenAmount, address desiredToken, uint256 expectedAmount) external onlyOneBlock checkCondition checkOperator {\r\n        require(tokenAmount > 0, \"Cannot purchase bonds with zero amount\");\r\n\r\n        uint256 bondAmount = tokenAmount.mul(bondPurchaseTokenRatio).div(10000);\r\n\r\n        // Those two checks prevents the user from submitting an unintended transaction that can happen while we're changing the token and/or its ratio\r\n        require(bondAmount == expectedAmount, \"Token ratio changed\");\r\n        require(bondPurchaseToken == desiredToken, \"Token changed\");\r\n\r\n        require(specialBondsSupply > bondAmount, \"Not enough special bonds supply to buy\");\r\n\r\n        IERC20(bondPurchaseToken).transferFrom(msg.sender, daoFund, tokenAmount);\r\n        \r\n        // depositor info is stored\r\n        bondInfo[msg.sender] = Bond({\r\n            payout: bondInfo[msg.sender].payout.add(bondAmount),\r\n            vesting: bondVestingPeriod,\r\n            lastTimestamp: block.timestamp\r\n        });\r\n\r\n        specialBondsSupply = specialBondsSupply.sub(bondAmount);\r\n    }\r\n\r\n    function percentVestedFor(address _depositor) public view returns (uint percentVested_) {\r\n        Bond memory bond = bondInfo[_depositor];\r\n        uint secondsSinceLast = block.timestamp.sub(bond.lastTimestamp);\r\n        uint vesting = bond.vesting;\r\n\r\n        if (vesting > 0) {\r\n            percentVested_ = secondsSinceLast.mul(10000).div(vesting);\r\n        } else {\r\n            percentVested_ = 0;\r\n        }\r\n    }\r\n\r\n    function redeemSpecialBonds() external onlyOneBlock checkCondition checkOperator returns (uint) {\r\n        Bond memory info = bondInfo[msg.sender];\r\n        uint percentVested = percentVestedFor(msg.sender); // (blocks since last interaction / vesting term remaining)\r\n\r\n        if (percentVested >= 10000) { // if fully vested\r\n            delete bondInfo[msg.sender]; // delete user info\r\n            IBasisAsset(tbond).mint(msg.sender, info.payout); // send payout\r\n\r\n            return info.payout;\r\n        } else { // if unfinished\r\n            // calculate payout vested\r\n            uint payout = info.payout.mul(percentVested).div(10000);\r\n\r\n            // store updated deposit info\r\n            bondInfo[msg.sender] = Bond({\r\n                payout: info.payout.sub(payout),\r\n                vesting: info.vesting.sub(block.timestamp.sub(info.lastTimestamp)),\r\n                lastTimestamp: block.timestamp\r\n            });\r\n\r\n            IBasisAsset(tbond).mint(msg.sender, payout); // send payout\r\n\r\n            return payout;\r\n        }\r\n    }\r\n\r\n    function getRedeemableSpecialBonds(address _depositor) public view returns (uint pendingPayout_) {\r\n        uint percentVested = percentVestedFor(_depositor);\r\n        uint payout = bondInfo[_depositor].payout;\r\n\r\n        if (percentVested >= 10000) {\r\n            pendingPayout_ = payout;\r\n        } else {\r\n            pendingPayout_ = payout.mul(percentVested).div(10000);\r\n        }\r\n    }\r\n\r\n    function buyBonds(uint256 _tombAmount, uint256 targetPrice) external onlyOneBlock checkCondition checkOperator {\r\n        require(_tombAmount > 0, \"Treasury: cannot purchase bonds with zero amount\");\r\n\r\n        uint256 tombPrice = getTombPrice();\r\n        require(tombPrice == targetPrice, \"Treasury: TOMB price moved\");\r\n        require(\r\n            tombPrice < tombPriceOne, // price < $1\r\n            \"Treasury: tombPrice not eligible for bond purchase\"\r\n        );\r\n\r\n        require(_tombAmount <= epochSupplyContractionLeft, \"Treasury: not enough bond left to purchase\");\r\n\r\n        uint256 _rate = getBondDiscountRate();\r\n        require(_rate > 0, \"Treasury: invalid bond rate\");\r\n\r\n        uint256 _bondAmount = _tombAmount.mul(_rate).div(1e15);\r\n        uint256 tombSupply = getTombCirculatingSupply();\r\n        uint256 newBondSupply = IERC20(tbond).totalSupply().add(_bondAmount);\r\n        require(newBondSupply <= tombSupply.mul(maxDebtRatioPercent).div(10000), \"over max debt ratio\");\r\n\r\n        IBasisAsset(tomb).burnFrom(msg.sender, _tombAmount);\r\n        IBasisAsset(tbond).mint(msg.sender, _bondAmount);\r\n\r\n        epochSupplyContractionLeft = epochSupplyContractionLeft.sub(_tombAmount);\r\n        _updateTombPrice();\r\n\r\n        emit BoughtBonds(msg.sender, _tombAmount, _bondAmount);\r\n    }\r\n\r\n    function redeemBonds(uint256 _bondAmount, uint256 targetPrice) external onlyOneBlock checkCondition checkOperator {\r\n        require(_bondAmount > 0, \"Treasury: cannot redeem bonds with zero amount\");\r\n\r\n        uint256 tombPrice = getTombPrice();\r\n        require(tombPrice == targetPrice, \"Treasury: TOMB price moved\");\r\n        require(\r\n            tombPrice > tombPriceCeiling, // price > $1.01\r\n            \"Treasury: tombPrice not eligible for bond purchase\"\r\n        );\r\n\r\n        uint256 _rate = getBondPremiumRate();\r\n        require(_rate > 0, \"Treasury: invalid bond rate\");\r\n\r\n        uint256 _tombAmount = _bondAmount.mul(_rate).div(1e15);\r\n        require(IERC20(tomb).balanceOf(address(this)) >= _tombAmount, \"Treasury: treasury has no more budget\");\r\n\r\n        seigniorageSaved = seigniorageSaved.sub(Math.min(seigniorageSaved, _tombAmount));\r\n\r\n        IBasisAsset(tbond).burnFrom(msg.sender, _bondAmount);\r\n        IERC20(tomb).safeTransfer(msg.sender, _tombAmount);\r\n\r\n        _updateTombPrice();\r\n\r\n        emit RedeemedBonds(msg.sender, _tombAmount, _bondAmount);\r\n    }\r\n\r\n    function _sendToMasonry(uint256 _amount) internal {\r\n        IBasisAsset(tomb).mint(address(this), _amount);\r\n\r\n        uint256 _daoFundSharedAmount = 0;\r\n        if (daoFundSharedPercent > 0) {\r\n            _daoFundSharedAmount = _amount.mul(daoFundSharedPercent).div(10000);\r\n            IERC20(tomb).transfer(daoFund, _daoFundSharedAmount);\r\n            emit DaoFundFunded(now, _daoFundSharedAmount);\r\n        }\r\n\r\n        uint256 _devFundSharedAmount = 0;\r\n        if (devFundSharedPercent > 0) {\r\n            _devFundSharedAmount = _amount.mul(devFundSharedPercent).div(10000);\r\n            IERC20(tomb).transfer(devFund, _devFundSharedAmount);\r\n            emit DevFundFunded(now, _devFundSharedAmount);\r\n        }\r\n\r\n        _amount = _amount.sub(_daoFundSharedAmount).sub(_devFundSharedAmount);\r\n\r\n        IERC20(tomb).safeApprove(masonry, 0);\r\n        IERC20(tomb).safeApprove(masonry, _amount);\r\n        IMasonry(masonry).allocateSeigniorage(_amount);\r\n        emit MasonryFunded(now, _amount);\r\n    }\r\n\r\n    function _calculateMaxSupplyExpansionPercent(uint256 _tombSupply) internal returns (uint256) {\r\n        for (uint8 tierId = 8; tierId >= 0; --tierId) {\r\n            if (_tombSupply >= supplyTiers[tierId]) {\r\n                maxSupplyExpansionPercent = maxExpansionTiers[tierId];\r\n                break;\r\n            }\r\n        }\r\n        return maxSupplyExpansionPercent;\r\n    }\r\n\r\n    function _simulateMaxSupplyExpansionPercent(uint256 _tombSupply) internal view returns (uint256) {\r\n        for (uint8 tierId = 8; tierId >= 0; --tierId) {\r\n            if (_tombSupply >= supplyTiers[tierId]) {\r\n                return maxExpansionTiers[tierId];\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function simulateSeigniorage() public view returns (uint256 _savedForBond, uint256 _savedForMasonry) {\r\n        uint256 _previousEpochTombPrice = getTombPrice();\r\n        uint256 tombSupply = getTombCirculatingSupply().sub(seigniorageSaved);\r\n        if (epoch < bootstrapEpochs) {\r\n            // 28 first epochs with 4.5% expansion\r\n            _savedForMasonry = tombSupply.mul(bootstrapSupplyExpansionPercent).div(10000);\r\n        } else {\r\n            if (_previousEpochTombPrice > tombPriceCeiling) {\r\n                // Expansion ($TOMB Price > 1 $FTM): there is some seigniorage to be allocated\r\n                uint256 bondSupply = IERC20(tbond).totalSupply();\r\n                uint256 _percentage = _previousEpochTombPrice.sub(tombPriceOne).mul(1000);\r\n                uint256 _mse = _simulateMaxSupplyExpansionPercent(tombSupply).mul(1e14);\r\n                if (_percentage > _mse) {\r\n                    _percentage = _mse;\r\n                }\r\n                if (seigniorageSaved >= bondSupply.mul(bondDepletionFloorPercent).div(10000)) {\r\n                    // saved enough to pay debt, mint as usual rate\r\n                    _savedForMasonry = tombSupply.mul(_percentage).div(1e18);\r\n                } else {\r\n                    // have not saved enough to pay debt, mint more\r\n                    uint256 _seigniorage = tombSupply.mul(_percentage).div(1e18);\r\n                    _savedForMasonry = _seigniorage.mul(seigniorageExpansionFloorPercent).div(10000);\r\n                    _savedForBond = _seigniorage.sub(_savedForMasonry);\r\n                    if (mintingFactorForPayingDebt > 0) {\r\n                        _savedForBond = _savedForBond.mul(mintingFactorForPayingDebt).div(10000);\r\n                    }\r\n                }\r\n                if (_savedForMasonry > 0) {\r\n                    //_sendToMasonry(_savedForMasonry);\r\n                }\r\n                if (_savedForBond > 0) {\r\n                    //seigniorageSaved = seigniorageSaved.add(_savedForBond);\r\n                    //IBasisAsset(tomb).mint(address(this), _savedForBond);\r\n                    //emit TreasuryFunded(now, _savedForBond);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function allocateSeigniorage() external onlyOneBlock checkCondition checkEpoch checkOperator {\r\n        _updateTombPrice();\r\n        previousEpochTombPrice = getTombPrice();\r\n        uint256 tombSupply = getTombCirculatingSupply().sub(seigniorageSaved);\r\n        if (epoch < bootstrapEpochs) {\r\n            // 28 first epochs with 4.5% expansion\r\n            _sendToMasonry(tombSupply.mul(bootstrapSupplyExpansionPercent).div(10000));\r\n        } else {\r\n            if (previousEpochTombPrice > tombPriceCeiling) {\r\n                // Expansion ($TOMB Price > 1 $FTM): there is some seigniorage to be allocated\r\n                uint256 bondSupply = IERC20(tbond).totalSupply();\r\n\r\n                // This fixes the bug where it would print the peg difference on protocols not pegged 1:1\r\n                uint256 _percentage = previousEpochTombPrice.sub(tombPriceOne).mul(1000);\r\n\r\n                uint256 _savedForBond;\r\n                uint256 _savedForMasonry;\r\n                uint256 _mse = _calculateMaxSupplyExpansionPercent(tombSupply).mul(1e14);\r\n                if (_percentage > _mse) {\r\n                    _percentage = _mse;\r\n                }\r\n                if (seigniorageSaved >= bondSupply.mul(bondDepletionFloorPercent).div(10000)) {\r\n                    // saved enough to pay debt, mint as usual rate\r\n                    _savedForMasonry = tombSupply.mul(_percentage).div(1e18);\r\n                } else {\r\n                    // have not saved enough to pay debt, mint more\r\n                    uint256 _seigniorage = tombSupply.mul(_percentage).div(1e18);\r\n                    _savedForMasonry = _seigniorage.mul(seigniorageExpansionFloorPercent).div(10000);\r\n                    _savedForBond = _seigniorage.sub(_savedForMasonry);\r\n                    if (mintingFactorForPayingDebt > 0) {\r\n                        _savedForBond = _savedForBond.mul(mintingFactorForPayingDebt).div(10000);\r\n                    }\r\n                }\r\n                if (_savedForMasonry > 0) {\r\n                    _sendToMasonry(_savedForMasonry);\r\n                }\r\n                if (_savedForBond > 0) {\r\n                    seigniorageSaved = seigniorageSaved.add(_savedForBond);\r\n                    IBasisAsset(tomb).mint(address(this), _savedForBond);\r\n                    emit TreasuryFunded(now, _savedForBond);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function governanceRecoverUnsupported(\r\n        IERC20 _token,\r\n        uint256 _amount,\r\n        address _to\r\n    ) external onlyOperator {\r\n        // do not allow to drain core tokens\r\n        require(address(_token) != address(tomb), \"tomb\");\r\n        require(address(_token) != address(tbond), \"bond\");\r\n        require(address(_token) != address(tshare), \"share\");\r\n        _token.safeTransfer(_to, _amount);\r\n    }\r\n\r\n    // Enables the retrieval of stuck NACHO in the case of a Treasury upgrade\r\n    function withdrawToCommunityFund(IERC20 _token, uint256 _amount) external onlyOperator {\r\n        _token.safeTransfer(daoFund, _amount);\r\n    }\r\n\r\n    // Enables upgrading Treasury without redeploying the Masonry\r\n    function masonrySetTreasury(address _treasury) external onlyOperator {\r\n        IMasonry(masonry).setTreasury(_treasury);\r\n    }\r\n\r\n    function masonrySetOperator(address _operator) external onlyOperator {\r\n        IMasonry(masonry).setOperator(_operator);\r\n    }\r\n\r\n    function masonrySetLockUp(uint256 _withdrawLockupEpochs, uint256 _rewardLockupEpochs) external onlyOperator {\r\n        IMasonry(masonry).setLockUp(_withdrawLockupEpochs, _rewardLockupEpochs);\r\n    }\r\n\r\n    function masonryAllocateSeigniorage(uint256 amount) external onlyOperator {\r\n        IMasonry(masonry).allocateSeigniorage(amount);\r\n    }\r\n\r\n    function masonryGovernanceRecoverUnsupported(\r\n        address _token,\r\n        uint256 _amount,\r\n        address _to\r\n    ) external onlyOperator {\r\n        IMasonry(masonry).governanceRecoverUnsupported(_token, _amount, _to);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tombAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"name\":\"BoughtBonds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"name\":\"BurnedBonds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seigniorage\",\"type\":\"uint256\"}],\"name\":\"DaoFundFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seigniorage\",\"type\":\"uint256\"}],\"name\":\"DevFundFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"at\",\"type\":\"uint256\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seigniorage\",\"type\":\"uint256\"}],\"name\":\"MasonryFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tombAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"name\":\"RedeemedBonds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seigniorage\",\"type\":\"uint256\"}],\"name\":\"TreasuryFunded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocateSeigniorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondDepletionFloorPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bondInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vesting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondPurchaseToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondPurchaseTokenRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondVestingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bootstrapEpochs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bootstrapSupplyExpansionPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tombAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetPrice\",\"type\":\"uint256\"}],\"name\":\"buyBonds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"desiredToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expectedAmount\",\"type\":\"uint256\"}],\"name\":\"buySpecialBonds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoFundSharedPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFundSharedPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discountPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochSupplyContractionLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"excludedFromTotalSupply\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBondDiscountRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBondPremiumRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnableTombLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnableTombLeft\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRedeemableBonds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_redeemableBonds\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"getRedeemableSpecialBonds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingPayout_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTombCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTombPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tombPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTombUpdatedPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tombPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"governanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseSpecialBondSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tomb\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tbond\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tshare\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tombOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_masonry\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masonry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"masonryAllocateSeigniorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"masonryGovernanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawLockupEpochs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardLockupEpochs\",\"type\":\"uint256\"}],\"name\":\"masonrySetLockUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"masonrySetOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"masonrySetTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDebtRatioPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDiscountRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maxExpansionTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPremiumRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyContractionPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyExpansionPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingFactorForPayingDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEpochPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"percentVestedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percentVested_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premiumPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premiumThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousEpochTombPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetPrice\",\"type\":\"uint256\"}],\"name\":\"redeemBonds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemSpecialBonds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"reduceSpecialBondSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seigniorageExpansionFloorPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seigniorageSaved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondDepletionFloorPercent\",\"type\":\"uint256\"}],\"name\":\"setBondDepletionFloorPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bootstrapEpochs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bootstrapSupplyExpansionPercent\",\"type\":\"uint256\"}],\"name\":\"setBootstrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_discountPercent\",\"type\":\"uint256\"}],\"name\":\"setDiscountPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_daoFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_daoFundSharedPercent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_devFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_devFundSharedPercent\",\"type\":\"uint256\"}],\"name\":\"setExtraFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masonry\",\"type\":\"address\"}],\"name\":\"setMasonry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDebtRatioPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxDebtRatioPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDiscountRate\",\"type\":\"uint256\"}],\"name\":\"setMaxDiscountRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMaxExpansionTiersEntry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPremiumRate\",\"type\":\"uint256\"}],\"name\":\"setMaxPremiumRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupplyContractionPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxSupplyContractionPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupplyExpansionPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxSupplyExpansionPercents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintingFactorForPayingDebt\",\"type\":\"uint256\"}],\"name\":\"setMintingFactorForPayingDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_premiumPercent\",\"type\":\"uint256\"}],\"name\":\"setPremiumPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_premiumThreshold\",\"type\":\"uint256\"}],\"name\":\"setPremiumThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"purchaseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingPeriod\",\"type\":\"uint256\"}],\"name\":\"setSpecialBondDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"setSpecialBondPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setSpecialBondSupplyAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vestingPeriod\",\"type\":\"uint256\"}],\"name\":\"setSpecialBondVestingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setSupplyTiersEntry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tombOracle\",\"type\":\"address\"}],\"name\":\"setTombOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tombPriceCeiling\",\"type\":\"uint256\"}],\"name\":\"setTombPriceCeiling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"simulateSeigniorage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_savedForBond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_savedForMasonry\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"specialBondsSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supplyTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tbond\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tomb\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tombOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tombPriceCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tombPriceOne\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tshare\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToCommunityFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Treasury", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1feb99cfc857fae2e94f1ad82984a0e1bf9ae3b9895dfe7363d96c44e98ed06d"}