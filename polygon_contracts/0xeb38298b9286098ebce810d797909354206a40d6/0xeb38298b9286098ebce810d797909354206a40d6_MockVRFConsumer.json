{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/VRF/GelatoVRFConsumer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title GelatoVRFConsumer\\n/// @dev Interface for consuming random number provided by Drand.\\n/// @notice This interface allows contracts to receive a random number provided by Gelato VRF.\\ninterface GelatoVRFConsumer {\\n    /// @notice Event emitted when a randomness request is made.\\n    /// @param data Additional data associated with the request.\\n    event RequestedRandomness(bytes data);\\n\\n    /// @notice Callback function used by Gelato to return the random number.\\n    /// @dev The random number is fetched from one among many drand endpoints\\n    /// and passed back to this function like in a Gelato Web3 Function.\\n    /// @param randomness The random number generated by drand.\\n    /// @param data Additional data provided by Gelato VRF or the user, typically unused.\\n    function fulfillRandomness(\\n        uint256 randomness,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/VRF/MockVRFConsumer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {GelatoVRFConsumer} from \\\"./GelatoVRFConsumer.sol\\\";\\n\\ncontract MockVRFConsumer is GelatoVRFConsumer {\\n    struct Request {\\n        uint256 requestTime;\\n        uint256 requestBlock;\\n        uint256 fulfilledTime;\\n        uint256 fulfilledBlock;\\n        uint256 randomness;\\n    }\\n\\n    event RandomnessFulfilled(uint256 indexed nonce, Request);\\n\\n    address public immutable dedicatedMsgSender;\\n    uint256 public nonce;\\n    mapping(uint256 => Request) public requests;\\n\\n    constructor(address _dedicatedMsgSender) {\\n        dedicatedMsgSender = _dedicatedMsgSender;\\n    }\\n\\n    function requestRandomness(uint256 _count) external {\\n        for (uint256 i; i < _count; i++) {\\n            _requestRandomness();\\n        }\\n    }\\n\\n    function _requestRandomness() private {\\n        emit RequestedRandomness(\\n            abi.encode(nonce, block.timestamp, block.number)\\n        );\\n        nonce += 1;\\n    }\\n\\n    function fulfillRandomness(\\n        uint256 _randomness,\\n        bytes calldata _data\\n    ) external {\\n        require(msg.sender == dedicatedMsgSender, \\\"Only Gelato\\\");\\n\\n        (uint256 nonce_, uint256 requestTime, uint256 requestBlock) = abi\\n            .decode(_data, (uint256, uint256, uint256));\\n\\n        Request memory request = Request(\\n            requestTime,\\n            requestBlock,\\n            block.timestamp,\\n            block.number,\\n            _randomness\\n        );\\n\\n        requests[nonce_] = request;\\n\\n        emit RandomnessFulfilled(nonce_, request);\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dedicatedMsgSender\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"requestTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fulfilledTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fulfilledBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct MockVRFConsumer.Request\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"RandomnessFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"RequestedRandomness\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"dedicatedMsgSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_randomness\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"fulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"requestRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fulfilledTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fulfilledBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MockVRFConsumer", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000fd7089d182cb7b0005ff7dfdf8a86c828179a483", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}