{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/MSG.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPLv3\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract MSG {\\r\\n    using SafeMath for uint256; \\r\\n    uint256 private constant timeStep = 1 days;\\r\\n    uint256 private constant dayPerCycle = 10 days; \\r\\n    uint256 private constant maxAddFreeze = 30 days;\\r\\n    uint256 private constant predictDuration = 30 minutes;\\r\\n    uint256 private constant initDayNewbies = 5;\\r\\n    uint256 private constant incInterval = 2;\\r\\n    uint256 private constant incNumber = 1;\\r\\n    uint256 private constant unlimitDay = 365;\\r\\n    uint256 private constant predictFee = 1e6;\\r\\n    uint256 private constant dayPredictLimit = 10;\\r\\n    uint256 private constant maxSearchDepth = 3000;\\r\\n    uint256 private constant baseDividend = 10000;\\r\\n    uint256 private constant incomeFeePercents = 700;\\r\\n    uint256 private constant bonusPercents = 500;\\r\\n    uint256 private constant splitPercents = 3000;\\r\\n    uint256 private constant transferFeePercents = 1000;\\r\\n    uint256 private constant dayRewardPercents = 150;\\r\\n    uint256 private constant predictPoolPercents = 300;\\r\\n    uint256 private constant unfreezeWithoutIncomePercents = 15000;\\r\\n    uint256 private constant unfreezeWithIncomePercents = 20000;\\r\\n    uint256[5] private levelTeam = [0, 0, 0, 50, 200];\\r\\n    uint256[5] private levelInvite = [0, 0, 0, 10000e6, 20000e6];\\r\\n    uint256[5] private levelDeposit = [50e6, 500e6, 1000e6, 2000e6, 3000e6];\\r\\n    uint256[5] private balReached = [50e10, 100e10, 200e10, 500e10, 1000e10];\\r\\n    uint256[5] private balFreeze = [35e10, 70e10, 100e10, 300e10, 500e10];\\r\\n    uint256[5] private balUnfreeze = [80e10, 150e10, 200e10, 500e10, 1000e10];\\r\\n    uint256[20] private invitePercents = [500, 100, 200, 300, 200, 100, 100, 100, 50, 50, 50, 50, 30, 30, 30, 30, 30, 30, 30, 30];\\r\\n    uint256[20] private predictWinnerPercents = [3000, 2000, 1000, 500, 500, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200];\\r\\n\\r\\n    IERC20 private usdt;\\r\\n    address private feeReceiver;\\r\\n    address private defaultRefer;\\r\\n    uint256 private startTime;\\r\\n    uint256 private lastDistribute;\\r\\n    uint256 private totalUsers;\\r\\n    uint256 private totalDeposit;\\r\\n    uint256 private freezedTimes;\\r\\n    uint256 private predictPool;\\r\\n    uint256 private totalPredictPool;\\r\\n    uint256 private totalWinners;\\r\\n    bool private isFreezing;\\r\\n    address[] private depositors;\\r\\n    mapping(uint256=>bool) private balStatus;\\r\\n    mapping(uint256=>address[]) private dayNewbies;\\r\\n    mapping(uint256=>uint256) private freezeTime;\\r\\n    mapping(uint256=>uint256) private unfreezeTime;\\r\\n    mapping(uint256=>uint256) private dayPredictPool;\\r\\n    mapping(uint256=>uint256) private dayDeposits;\\r\\n    mapping(address=>mapping(uint256=>bool)) private isUnfreezedReward;\\r\\n    mapping(uint256=>mapping(uint256=>address[])) private dayPredictors;\\r\\n    mapping(uint256=>mapping(address=>PredictInfo[])) private userPredicts;\\r\\n    \\r\\n    struct UserInfo {\\r\\n        address referrer;\\r\\n        uint256 level;\\r\\n        uint256 maxDeposit;\\r\\n        uint256 maxDepositable;\\r\\n        uint256 teamNum;\\r\\n        uint256 teamTotalDeposit;\\r\\n        uint256 totalFreezed;\\r\\n        uint256 totalRevenue;\\r\\n        uint256 unfreezeIndex;\\r\\n        uint256 startTime;\\r\\n        bool isMaxFreezing;\\r\\n    }\\r\\n    struct RewardInfo{\\r\\n        uint256 capitals;\\r\\n        uint256 statics;\\r\\n        uint256 invited;\\r\\n        uint256 bonusFreezed;\\r\\n        uint256 bonusReleased;\\r\\n        uint256 l5Freezed;\\r\\n        uint256 l5Released;\\r\\n        uint256 predictWin;\\r\\n        uint256 split;\\r\\n        uint256 lastWithdaw;\\r\\n    }\\r\\n    struct OrderInfo {\\r\\n        uint256 amount;\\r\\n        uint256 start;\\r\\n        uint256 unfreeze;\\r\\n        bool isUnfreezed;\\r\\n    }\\r\\n    struct PredictInfo {\\r\\n        uint256 time;\\r\\n        uint256 number;\\r\\n    }\\r\\n    mapping(address=>UserInfo) private userInfo;\\r\\n    mapping(address=>RewardInfo) private rewardInfo;\\r\\n    mapping(address=>OrderInfo[]) private orderInfos;\\r\\n    mapping(address=>mapping(uint256=>uint256)) private userCycleMax;\\r\\n    mapping(address=>mapping(uint256=>address[])) private teamUsers;\\r\\n\\r\\n    event Register(address user, address referral);\\r\\n    event Deposit(address user, uint256 types, uint256 amount, bool isFreezing);\\r\\n    event TransferBySplit(address user, uint256 subBal, address receiver, uint256 amount);\\r\\n    event Withdraw(address user, uint256 incomeFee, uint256 poolFee, uint256 split, uint256 withdraw);\\r\\n    event Predict(uint256 time, address user, uint256 amount);\\r\\n    event DistributePredictPool(uint256 day, uint256 reward, uint256 pool, uint256 time);\\r\\n\\r\\n    constructor(address _usdtAddr, address _defaultRefer, address _feeReceiver, uint256 _startTime) {\\r\\n        usdt = IERC20(_usdtAddr);\\r\\n        defaultRefer = _defaultRefer;\\r\\n        feeReceiver = _feeReceiver;\\r\\n        startTime = _startTime;\\r\\n        lastDistribute = _startTime;\\r\\n    }\\r\\n\\r\\n    function register(address _referral) external {\\r\\n        require(userInfo[_referral].maxDeposit > 0 || _referral == defaultRefer, \\\"invalid refer\\\");\\r\\n        require(userInfo[msg.sender].referrer == address(0), \\\"referrer bonded\\\");\\r\\n        userInfo[msg.sender].referrer = _referral;\\r\\n        emit Register(msg.sender, _referral);\\r\\n    }\\r\\n\\r\\n    function deposit(uint256 _amount) external {\\r\\n        _deposit(msg.sender, _amount, 0);\\r\\n    }\\r\\n\\r\\n    function depositBySplit(uint256 _amount) public {\\r\\n        _deposit(msg.sender, _amount, 1);\\r\\n\\r\\n    }\\r\\n\\r\\n    function redeposit() public {\\r\\n        _deposit(msg.sender, 0, 2);\\r\\n    }\\r\\n\\r\\n    function _deposit(address _userAddr, uint256 _amount, uint256 _types) private {\\r\\n        require(block.timestamp >= startTime, \\\"not start\\\");\\r\\n        UserInfo storage user = userInfo[_userAddr];\\r\\n        require(user.referrer != address(0), \\\"not register\\\");\\r\\n        RewardInfo storage userRewards = rewardInfo[_userAddr];\\r\\n        if(_types == 0){\\r\\n            usdt.transferFrom(_userAddr, address(this), _amount);\\r\\n            _balActived();\\r\\n        }else if(_types == 1){\\r\\n            require(user.level == 0, \\\"actived\\\");\\r\\n            require(userRewards.split >= _amount, \\\"insufficient\\\");\\r\\n            require(_amount.mod(levelDeposit[0].mul(2)) == 0, \\\"amount err\\\");\\r\\n            userRewards.split = userRewards.split.sub(_amount);\\r\\n        }else{\\r\\n            require(user.level > 0, \\\"newbie\\\");\\r\\n            _amount = orderInfos[_userAddr][user.unfreezeIndex].amount;\\r\\n        }\\r\\n\\r\\n        uint256 curCycle = getCurCycle();\\r\\n        (uint256 userCurMin, uint256 userCurMax) = getUserCycleDepositable(_userAddr, curCycle);\\r\\n        require(_amount >= userCurMin && _amount <= userCurMax && _amount.mod(levelDeposit[0]) == 0, \\\"amount err\\\");\\r\\n        if(isFreezing && !isUnfreezedReward[_userAddr][freezedTimes]) isUnfreezedReward[_userAddr][freezedTimes] = true;\\r\\n        \\r\\n        uint256 curDay = getCurDay();\\r\\n        dayDeposits[curDay] = dayDeposits[curDay].add(_amount);\\r\\n        totalDeposit = totalDeposit.add(_amount);\\r\\n        depositors.push(_userAddr);\\r\\n\\r\\n        if(user.level == 0){\\r\\n            if(curDay < unlimitDay) require(dayNewbies[curDay].length < getMaxDayNewbies(curDay), \\\"reach max\\\");\\r\\n            dayNewbies[curDay].push(_userAddr);\\r\\n            totalUsers = totalUsers + 1;\\r\\n            user.startTime = block.timestamp;\\r\\n            if(_types == 0) {\\r\\n                userRewards.bonusFreezed = _amount.mul(bonusPercents).div(baseDividend);\\r\\n                user.totalRevenue = user.totalRevenue.add(userRewards.bonusFreezed);\\r\\n            }\\r\\n        }\\r\\n        _updateUplineReward(_userAddr, _amount);\\r\\n        _unfreezeCapitalOrReward(_userAddr, _amount, _types);\\r\\n        bool isMaxFreezing = _addNewOrder(_userAddr, _amount, _types, user.startTime, user.isMaxFreezing);\\r\\n        user.isMaxFreezing = isMaxFreezing;\\r\\n        _updateUserMax(_userAddr, _amount, userCurMax, curCycle);\\r\\n        _updateLevel(_userAddr);\\r\\n        if(isFreezing) _setFreezeReward();\\r\\n        emit Deposit(_userAddr, _types, _amount, isFreezing);\\r\\n    }\\r\\n\\r\\n    function _updateUplineReward(address _userAddr, uint256 _amount) private {\\r\\n        address upline = userInfo[_userAddr].referrer;\\r\\n        for(uint256 i = 0; i < invitePercents.length; i++){\\r\\n            if(upline != address(0)){\\r\\n                if(!isFreezing || isUnfreezedReward[upline][freezedTimes]){\\r\\n                    OrderInfo[] storage upOrders = orderInfos[upline];\\r\\n                    if(upOrders.length > 0){\\r\\n                        uint256 latestUnFreezeTime = getOrderUnfreezeTime(upline, upOrders.length - 1);\\r\\n                        uint256 maxFreezing = latestUnFreezeTime > block.timestamp ? upOrders[upOrders.length - 1].amount : 0;\\r\\n                        uint256 newAmount = maxFreezing < _amount ? maxFreezing : _amount;\\r\\n                        if(newAmount > 0){\\r\\n                            RewardInfo storage upRewards = rewardInfo[upline];\\r\\n                            uint256 reward = newAmount.mul(invitePercents[i]).div(baseDividend);\\r\\n                            if(i == 0 || (i < 4 && userInfo[upline].level >= 4)){\\r\\n                                upRewards.invited = upRewards.invited.add(reward);\\r\\n                                userInfo[upline].totalRevenue = userInfo[upline].totalRevenue.add(reward);\\r\\n                            }else if(userInfo[upline].level >= 5){\\r\\n                                upRewards.l5Freezed = upRewards.l5Freezed.add(reward);\\r\\n                            }\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n                if(upline == defaultRefer) break;\\r\\n                upline = userInfo[upline].referrer;\\r\\n            }else{\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _unfreezeCapitalOrReward(address _userAddr, uint256 _amount, uint256 _types) private {\\r\\n        (uint256 unfreezed, uint256 rewards) = _unfreezeOrder(_userAddr, _amount);\\r\\n        if(_types == 0){\\r\\n            require(_amount > unfreezed, \\\"redeposit only\\\");\\r\\n        }else if(_types >= 2){\\r\\n            require(_amount == unfreezed, \\\"redeposit err\\\");\\r\\n        }\\r\\n\\r\\n        UserInfo storage user = userInfo[_userAddr];\\r\\n        RewardInfo storage userRewards = rewardInfo[_userAddr];\\r\\n        if(unfreezed > 0){\\r\\n            user.unfreezeIndex = user.unfreezeIndex + 1;\\r\\n            if(userRewards.bonusFreezed > 0){\\r\\n                userRewards.bonusReleased = userRewards.bonusFreezed;\\r\\n                userRewards.bonusFreezed = 0;\\r\\n            }\\r\\n\\r\\n            if(rewards > 0) userRewards.statics = userRewards.statics.add(rewards);\\r\\n            if(_types < 2) userRewards.capitals = userRewards.capitals.add(unfreezed);\\r\\n        }else{\\r\\n            uint256 l5Freezed = userRewards.l5Freezed;\\r\\n            if(l5Freezed > 0){\\r\\n                rewards = _amount <= l5Freezed ? _amount : l5Freezed;\\r\\n                userRewards.l5Freezed = l5Freezed.sub(rewards);\\r\\n                userRewards.l5Released = userRewards.l5Released.add(rewards);\\r\\n            }\\r\\n        }\\r\\n        user.totalRevenue = user.totalRevenue.add(rewards);\\r\\n        _updateFreezeAndTeamDeposit(_userAddr, _amount, unfreezed);\\r\\n    }\\r\\n\\r\\n    function _unfreezeOrder(address _userAddr, uint256 _amount) private returns(uint256 unfreezed, uint256 rewards){\\r\\n        if(orderInfos[_userAddr].length > 0){\\r\\n            UserInfo storage user = userInfo[_userAddr];\\r\\n            OrderInfo storage order = orderInfos[_userAddr][user.unfreezeIndex];\\r\\n            uint256 orderUnfreezeTime = getOrderUnfreezeTime(_userAddr, user.unfreezeIndex);\\r\\n            // below lv5, deposit once per cycle\\r\\n            if(user.level > 0 && user.level < 5) require(block.timestamp >= orderUnfreezeTime, \\\"freezing\\\");\\r\\n            if(order.isUnfreezed == false && block.timestamp >= orderUnfreezeTime && _amount >= order.amount){\\r\\n                order.isUnfreezed = true;\\r\\n                unfreezed = order.amount;\\r\\n                rewards = order.amount.mul(dayRewardPercents).mul(dayPerCycle).div(timeStep).div(baseDividend);\\r\\n                if(isFreezing){\\r\\n                    if(user.totalFreezed > user.totalRevenue){\\r\\n                        uint256 leftCapital = user.totalFreezed.sub(user.totalRevenue);\\r\\n                        if(rewards > leftCapital){\\r\\n                            rewards = leftCapital;\\r\\n                        }\\r\\n                    }else{\\r\\n                        rewards = 0;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _updateFreezeAndTeamDeposit(address _userAddr, uint256 _amount, uint256 _unfreezed) private {\\r\\n        UserInfo storage user = userInfo[_userAddr];\\r\\n        if(_amount > _unfreezed){\\r\\n            uint256 incAmount = _amount.sub(_unfreezed);\\r\\n            user.totalFreezed = user.totalFreezed.add(incAmount);\\r\\n            address upline = user.referrer;\\r\\n            for(uint256 i = 0; i < invitePercents.length; i++){\\r\\n                if(upline != address(0)){\\r\\n                    UserInfo storage upUser = userInfo[upline];\\r\\n                    if(user.level == 0 && _userAddr != upline){\\r\\n                        upUser.teamNum = upUser.teamNum + 1;\\r\\n                        teamUsers[upline][i].push(_userAddr);\\r\\n                    }\\r\\n                    upUser.teamTotalDeposit = upUser.teamTotalDeposit.add(incAmount);\\r\\n                    if(upline == defaultRefer) break;\\r\\n                    upline = upUser.referrer;\\r\\n                }else{\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _addNewOrder(address _userAddr, uint256 _amount, uint256 _types, uint256 _startTime, bool _isMaxFreezing) private returns(bool isMaxFreezing){\\r\\n        uint256 addFreeze;\\r\\n        OrderInfo[] storage orders = orderInfos[_userAddr];\\r\\n        if(_isMaxFreezing){\\r\\n            isMaxFreezing = true;\\r\\n        }else{\\r\\n            if((freezedTimes > 0 && _types == 1) || (!isFreezing && _startTime < freezeTime[freezedTimes])){\\r\\n                isMaxFreezing = true;\\r\\n            }else{\\r\\n                addFreeze = (orders.length).mul(timeStep);\\r\\n                if(addFreeze > maxAddFreeze) isMaxFreezing = true;\\r\\n            }\\r\\n        }\\r\\n        uint256 unfreeze = isMaxFreezing ? block.timestamp.add(dayPerCycle).add(maxAddFreeze) : block.timestamp.add(dayPerCycle).add(addFreeze);\\r\\n        orders.push(OrderInfo(_amount, block.timestamp, unfreeze, false));\\r\\n    }\\r\\n\\r\\n    function _updateUserMax(address _userAddr, uint256 _amount, uint256 _userCurMax, uint256 _curCycle) internal {\\r\\n        UserInfo storage user = userInfo[_userAddr];\\r\\n        if(_amount > user.maxDeposit) user.maxDeposit = _amount;\\r\\n        userCycleMax[_userAddr][_curCycle] = _userCurMax;\\r\\n        uint256 nextMaxDepositable;\\r\\n        if(_amount == _userCurMax){\\r\\n            uint256 curMaxDepositable = getCurMaxDepositable();\\r\\n            if(_userCurMax >= curMaxDepositable){\\r\\n                nextMaxDepositable = curMaxDepositable;\\r\\n            }else{\\r\\n                if(_userCurMax < levelDeposit[3]){\\r\\n                    nextMaxDepositable = _userCurMax.add(levelDeposit[1]);\\r\\n                }else{\\r\\n                    nextMaxDepositable = _userCurMax.add(levelDeposit[2]);\\r\\n                }\\r\\n            }\\r\\n        }else{\\r\\n            nextMaxDepositable = _userCurMax;\\r\\n        }\\r\\n        userCycleMax[_userAddr][_curCycle + 1] = nextMaxDepositable;\\r\\n        user.maxDepositable = nextMaxDepositable;\\r\\n    }\\r\\n\\r\\n    function _updateLevel(address _userAddr) private {\\r\\n        UserInfo storage user = userInfo[_userAddr];\\r\\n        for(uint256 i = user.level; i < levelDeposit.length; i++){\\r\\n            if(user.maxDeposit >= levelDeposit[i]){\\r\\n                if(i < 3){\\r\\n                    user.level = i + 1;\\r\\n                }else{\\r\\n                    (uint256 maxTeam, uint256 otherTeam, ) = getTeamDeposit(_userAddr);\\r\\n                    if(maxTeam >= levelInvite[i] && otherTeam >= levelInvite[i] && user.teamNum >= levelTeam[i]){\\r\\n                        user.level = i + 1;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdraw() external {\\r\\n        RewardInfo storage userRewards = rewardInfo[msg.sender];\\r\\n        uint256 rewardsStatic = userRewards.statics.add(userRewards.invited).add(userRewards.bonusReleased).add(userRewards.predictWin);\\r\\n        uint256 incomeFee = rewardsStatic.mul(incomeFeePercents).div(baseDividend);\\r\\n        usdt.transfer(feeReceiver, incomeFee);\\r\\n        uint256 predictPoolFee = rewardsStatic.mul(predictPoolPercents).div(baseDividend);\\r\\n        predictPool = predictPool.add(predictPoolFee);\\r\\n        totalPredictPool = totalPredictPool.add(predictPoolFee);\\r\\n        uint256 leftReward = rewardsStatic.add(userRewards.l5Released).sub(incomeFee).sub(predictPoolFee);\\r\\n        uint256 split = leftReward.mul(splitPercents).div(baseDividend);\\r\\n        uint256 withdrawable = leftReward.sub(split);\\r\\n        uint256 capitals = userRewards.capitals;\\r\\n        userRewards.capitals = 0;\\r\\n        userRewards.statics = 0;\\r\\n        userRewards.invited = 0;\\r\\n        userRewards.bonusReleased = 0;\\r\\n        userRewards.l5Released = 0;\\r\\n        userRewards.predictWin = 0;\\r\\n        userRewards.split = userRewards.split.add(split);\\r\\n        userRewards.lastWithdaw = block.timestamp;\\r\\n        withdrawable = withdrawable.add(capitals);\\r\\n        usdt.transfer(msg.sender, withdrawable);\\r\\n        if(!isFreezing) _setFreezeReward();\\r\\n        emit Withdraw(msg.sender, incomeFee, predictPoolFee, split, withdrawable);\\r\\n    }\\r\\n\\r\\n    function predict(uint256 _amount) external {\\r\\n        require(userInfo[msg.sender].referrer != address(0), \\\"not register\\\");\\r\\n        require(_amount.mod(levelDeposit[0]) == 0, \\\"amount err\\\");\\r\\n        uint256 curDay = getCurDay();\\r\\n        require(userPredicts[curDay][msg.sender].length < dayPredictLimit, \\\"reached day limit\\\");\\r\\n        uint256 predictEnd = startTime.add(curDay.mul(timeStep)).add(predictDuration);\\r\\n        require(block.timestamp < predictEnd, \\\"today is over\\\");\\r\\n        usdt.transferFrom(msg.sender, address(this), predictFee);\\r\\n        dayPredictors[curDay][_amount].push(msg.sender);\\r\\n        userPredicts[curDay][msg.sender].push(PredictInfo(block.timestamp, _amount));\\r\\n        if(isFreezing) _setFreezeReward();\\r\\n        emit Predict(block.timestamp, msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function transferBySplit(address _receiver, uint256 _amount) external {\\r\\n        uint256 minTransfer = levelDeposit[0].mul(2);\\r\\n        require(_amount >= minTransfer && _amount.mod(minTransfer) == 0, \\\"amount err\\\");\\r\\n        uint256 subBal = _amount.add(_amount.mul(transferFeePercents).div(baseDividend));\\r\\n        RewardInfo storage userRewards = rewardInfo[msg.sender];\\r\\n        require(userRewards.split >= subBal, \\\"insufficient split\\\");\\r\\n        userRewards.split = userRewards.split.sub(subBal);\\r\\n        rewardInfo[_receiver].split = rewardInfo[_receiver].split.add(_amount);\\r\\n        emit TransferBySplit(msg.sender, subBal, _receiver, _amount);\\r\\n    }\\r\\n\\r\\n    function distributePredictPool() external {\\r\\n        if(block.timestamp >= lastDistribute.add(timeStep)){\\r\\n            uint256 curDay = getCurDay();\\r\\n            uint256 lastDay = curDay - 1;\\r\\n            uint256 totalReward;\\r\\n            if(predictPool > 0){\\r\\n                address[] memory winners = getPredictWinners(lastDay);\\r\\n                for(uint256 i = 0; i < winners.length; i++){\\r\\n                    if(winners[i] != address(0)){\\r\\n                        uint256 reward = predictPool.mul(predictWinnerPercents[i]).div(baseDividend);\\r\\n                        totalReward = totalReward.add(reward);\\r\\n                        rewardInfo[winners[i]].predictWin = rewardInfo[winners[i]].predictWin.add(reward);\\r\\n                        userInfo[winners[i]].totalRevenue = userInfo[winners[i]].totalRevenue.add(reward);\\r\\n                        totalWinners++;\\r\\n                    }else{\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n                dayPredictPool[lastDay] = predictPool;\\r\\n                predictPool = predictPool > totalReward ? predictPool.sub(totalReward) : 0;\\r\\n            }\\r\\n            lastDistribute = startTime.add(curDay.mul(timeStep));\\r\\n            emit DistributePredictPool(lastDay, totalReward, predictPool, lastDistribute);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _balActived() private {\\r\\n        uint256 bal = usdt.balanceOf(address(this));\\r\\n        for(uint256 i = balReached.length; i > 0; i--){\\r\\n            if(bal >= balReached[i - 1]){\\r\\n                balStatus[balReached[i - 1]] = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setFreezeReward() private {\\r\\n        uint256 bal = usdt.balanceOf(address(this));\\r\\n        for(uint256 i = balReached.length; i > 0; i--){\\r\\n            if(balStatus[balReached[i - 1]]){\\r\\n                if(!isFreezing){\\r\\n                    if(bal < balFreeze[i - 1]){\\r\\n                        isFreezing = true;\\r\\n                        freezedTimes = freezedTimes + 1;\\r\\n                        freezeTime[freezedTimes] = block.timestamp;\\r\\n                    }\\r\\n                }else{\\r\\n                    if(bal >= balUnfreeze[i - 1]){\\r\\n                        isFreezing = false;\\r\\n                        unfreezeTime[freezedTimes] = block.timestamp;\\r\\n                    }\\r\\n                }\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getOrderUnfreezeTime(address _userAddr, uint256 _index) public view returns(uint256 orderUnfreezeTime) {\\r\\n        OrderInfo storage order = orderInfos[_userAddr][_index];\\r\\n        orderUnfreezeTime = order.unfreeze;\\r\\n        if(!isFreezing && !order.isUnfreezed && userInfo[_userAddr].startTime < freezeTime[freezedTimes]){\\r\\n            orderUnfreezeTime =  order.start.add(dayPerCycle).add(maxAddFreeze);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getUserCycleDepositable(address _userAddr, uint256 _cycle) public view returns(uint256 cycleMin, uint256 cycleMax) {\\r\\n        UserInfo storage user = userInfo[_userAddr];\\r\\n        if(user.maxDeposit > 0){\\r\\n            cycleMin = user.maxDeposit;\\r\\n            cycleMax = userCycleMax[_userAddr][_cycle];\\r\\n            if(cycleMax == 0) cycleMax = user.maxDepositable;\\r\\n            uint256 curMaxDepositable = getCurMaxDepositable();\\r\\n            if(isFreezing){\\r\\n                if(user.startTime < freezeTime[freezedTimes] && !isUnfreezedReward[_userAddr][freezedTimes]){\\r\\n                    cycleMin = user.totalFreezed > user.totalRevenue ? cycleMin.mul(unfreezeWithoutIncomePercents).div(baseDividend) : cycleMin.mul(unfreezeWithIncomePercents).div(baseDividend);\\r\\n                    cycleMax = curMaxDepositable;\\r\\n                }\\r\\n            }else{\\r\\n                if(user.startTime < freezeTime[freezedTimes]) cycleMax = curMaxDepositable;\\r\\n            }\\r\\n        }else{\\r\\n            cycleMin = levelDeposit[0];\\r\\n            cycleMax = levelDeposit[1];\\r\\n        }\\r\\n\\r\\n        if(cycleMin > cycleMax) cycleMin = cycleMax;\\r\\n    }\\r\\n\\r\\n    function getPredictWinners(uint256 _day) public view returns(address[] memory winners) {\\r\\n        uint256 steps = dayDeposits[_day].div(levelDeposit[0]);\\r\\n        uint256 maxWinners = predictWinnerPercents.length;\\r\\n        winners = new address[](maxWinners);\\r\\n        uint256 counter;\\r\\n        for(uint256 i = steps; i >= 0; i--){\\r\\n            uint256 winAmount = i.mul(levelDeposit[0]);\\r\\n            for(uint256 j = 0; j < dayPredictors[_day][winAmount].length; j++){\\r\\n                address predictUser = dayPredictors[_day][winAmount][j];\\r\\n                if(predictUser != address(0)){\\r\\n                    winners[counter] = predictUser;\\r\\n                    counter++;\\r\\n                    if(counter >= maxWinners) break;\\r\\n                }\\r\\n            }\\r\\n            if(counter >= maxWinners || i == 0 || steps.sub(i) >= maxSearchDepth) break;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getTeamDeposit(address _userAddr) public view returns(uint256 maxTeam, uint256 otherTeam, uint256 totalTeam){\\r\\n        address[] memory directTeamUsers = teamUsers[_userAddr][0];\\r\\n        for(uint256 i = 0; i < directTeamUsers.length; i++){\\r\\n            UserInfo storage user = userInfo[directTeamUsers[i]];\\r\\n            uint256 userTotalTeam = user.teamTotalDeposit.add(user.totalFreezed);\\r\\n            totalTeam = totalTeam.add(userTotalTeam);\\r\\n            if(userTotalTeam > maxTeam) maxTeam = userTotalTeam;\\r\\n            if(i >= maxSearchDepth) break;\\r\\n        }\\r\\n        otherTeam = totalTeam.sub(maxTeam);\\r\\n    }\\r\\n\\r\\n    function getCurDay() public view returns(uint256) {\\r\\n        return (block.timestamp.sub(startTime)).div(timeStep);\\r\\n    }\\r\\n\\r\\n    function getCurCycle() public view returns(uint256) {\\r\\n        return (block.timestamp.sub(startTime)).div(dayPerCycle);\\r\\n    }\\r\\n\\r\\n    function getCurMaxDepositable() public view returns(uint256) {\\r\\n        return levelDeposit[4].mul(2**freezedTimes);\\r\\n    }\\r\\n\\r\\n    function getMaxDayNewbies(uint256 _day) public pure returns(uint256) {\\r\\n        return initDayNewbies + _day.mul(incNumber).div(incInterval);\\r\\n    }\\r\\n\\r\\n    function getOrderLength(address _userAddr) public view returns(uint256) {\\r\\n        return orderInfos[_userAddr].length;\\r\\n    }\\r\\n\\r\\n    function getLatestDepositors(uint256 _length) public view returns(address[] memory latestDepositors) {\\r\\n        uint256 totalCount = depositors.length;\\r\\n        if(_length > totalCount) _length = totalCount;\\r\\n        latestDepositors = new address[](_length);\\r\\n        for(uint256 i = totalCount; i > totalCount - _length; i--){\\r\\n            latestDepositors[totalCount - i] = depositors[i - 1];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getTeamUsers(address _userAddr, uint256 _layer) public view returns(address[] memory) {\\r\\n        return teamUsers[_userAddr][_layer];\\r\\n    }\\r\\n\\r\\n    function getUserDayPredicts(address _userAddr, uint256 _day) public view returns(PredictInfo[] memory) {\\r\\n        return userPredicts[_day][_userAddr];\\r\\n    }\\r\\n\\r\\n    function getDayPredictors(uint256 _day, uint256 _number) external view returns(address[] memory) {\\r\\n        return dayPredictors[_day][_number];\\r\\n    }\\r\\n\\r\\n    function getDayInfos(uint256 _day) external view returns(address[] memory newbies, uint256 deposits, uint256 pool){\\r\\n        return (dayNewbies[_day], dayDeposits[_day], dayPredictPool[_day]);\\r\\n    }\\r\\n\\r\\n    function getBalStatus(uint256 _bal) external view returns(bool) {\\r\\n        return balStatus[_bal];\\r\\n    }\\r\\n\\r\\n    function getUserCycleMax(address _userAddr, uint256 _cycle) external view returns(uint256){\\r\\n        return userCycleMax[_userAddr][_cycle];\\r\\n    }\\r\\n\\r\\n    function getUserInfos(address _userAddr) external view returns(UserInfo memory user, RewardInfo memory reward, OrderInfo[] memory orders, bool unfreeze) {\\r\\n        user = userInfo[_userAddr];\\r\\n        reward = rewardInfo[_userAddr];\\r\\n        orders = orderInfos[_userAddr];\\r\\n        unfreeze = isUnfreezedReward[_userAddr][freezedTimes];\\r\\n    }\\r\\n\\r\\n    function getContractInfos() external view returns(address[3] memory infos0, uint256[10] memory infos1, bool freezing) {\\r\\n        infos0[0] = address(usdt);\\r\\n        infos0[1] = feeReceiver;\\r\\n        infos0[2] = defaultRefer;\\r\\n        infos1[0] = startTime;\\r\\n        infos1[1] = lastDistribute;\\r\\n        infos1[2] = totalUsers;\\r\\n        infos1[3] = totalDeposit;\\r\\n        infos1[4] = predictPool;\\r\\n        infos1[5] = totalPredictPool;\\r\\n        infos1[6] = totalWinners;\\r\\n        infos1[7] = freezedTimes;\\r\\n        infos1[8] = freezeTime[freezedTimes];\\r\\n        infos1[9] = unfreezeTime[freezedTimes];\\r\\n        freezing = isFreezing;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdtAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defaultRefer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"types\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFreezing\",\"type\":\"bool\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"DistributePredictPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Predict\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"Register\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subBal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferBySplit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"incomeFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"split\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdraw\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositBySplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributePredictPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bal\",\"type\":\"uint256\"}],\"name\":\"getBalStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractInfos\",\"outputs\":[{\"internalType\":\"address[3]\",\"name\":\"infos0\",\"type\":\"address[3]\"},{\"internalType\":\"uint256[10]\",\"name\":\"infos1\",\"type\":\"uint256[10]\"},{\"internalType\":\"bool\",\"name\":\"freezing\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurMaxDepositable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"getDayInfos\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"newbies\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"getDayPredictors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"}],\"name\":\"getLatestDepositors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"latestDepositors\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"getMaxDayNewbies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"getOrderLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getOrderUnfreezeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orderUnfreezeTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"getPredictWinners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"getTeamDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTeam\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"otherTeam\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTeam\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_layer\",\"type\":\"uint256\"}],\"name\":\"getTeamUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cycle\",\"type\":\"uint256\"}],\"name\":\"getUserCycleDepositable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cycleMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleMax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cycle\",\"type\":\"uint256\"}],\"name\":\"getUserCycleMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"getUserDayPredicts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"internalType\":\"struct MSG.PredictInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"getUserInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDepositable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamTotalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFreezed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRevenue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unfreezeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isMaxFreezing\",\"type\":\"bool\"}],\"internalType\":\"struct MSG.UserInfo\",\"name\":\"user\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"capitals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"statics\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusFreezed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusReleased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l5Freezed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l5Released\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"predictWin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"split\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdaw\",\"type\":\"uint256\"}],\"internalType\":\"struct MSG.RewardInfo\",\"name\":\"reward\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unfreeze\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isUnfreezed\",\"type\":\"bool\"}],\"internalType\":\"struct MSG.OrderInfo[]\",\"name\":\"orders\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"unfreeze\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"predict\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferBySplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MSG", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f0000000000000000000000004db82c97997217c9dc3bb79d540a59f73dc26cae000000000000000000000000c2700bea30430ccdf7b1ee0d5d6295175ba0c83e00000000000000000000000000000000000000000000000000000000644b60e0", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}