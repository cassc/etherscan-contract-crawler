{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.14;\r\n\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    function symbol() external view returns(string memory);\r\n    \r\n    function name() external view returns(string memory);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n    \r\n    /**\r\n     * @dev Returns the number of decimal places\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IToken {\r\n    function getOwner() external view returns (address);\r\n}\r\n\r\ninterface IFarm {\r\n    function stake(address user, uint256 amount) external;\r\n}\r\n\r\ninterface IStable {\r\n    function burn(uint256 amount) external;\r\n}\r\n\r\n/**\r\n    Zapping into farms and staking to bypass the Buy Tax (5%).\r\n    Requires MATIC to zap.\r\n    Still subject to the 2% stake fee or 4% farm deposit fee.\r\n */\r\n\r\ncontract Zapper {\r\n\r\n    // STS+ Fees\r\n    uint256 public constant STSP_buy_fee = 1;\r\n    uint256 public constant FEE_DENOM = 100;\r\n\r\n    // Router\r\n    IUniswapV2Router02 public immutable router;\r\n    \r\n    // Tokens\r\n    address public immutable STS;\r\n    address public immutable STSP;\r\n    \r\n    // Farms\r\n    address public immutable STS_STSP_FARM;\r\n    address public immutable STS_MATIC_FARM;\r\n    address public immutable STS_STAKE;\r\n\r\n    // LP Tokens\r\n    address public immutable STS_STSP_LP;\r\n    address public immutable STS_MATIC_LP;\r\n\r\n    // Swap Path\r\n    address[] private STS_Swap_Path;\r\n\r\n    modifier onlyOwner() {\r\n        require(\r\n            msg.sender == IToken(STS).getOwner(),\r\n            'Only Owner'\r\n        );\r\n        _;\r\n    }\r\n\r\n    // Events\r\n    event Zap(address indexed farmAddress, uint256 mintOut);\r\n    event BuySts(uint256 val, uint256 minOut);\r\n    event BuyStsp(uint256 val);\r\n\r\n    constructor(\r\n        address router_,\r\n        address STS_,\r\n        address STSP_,\r\n        address STS_STSP_FARM_,\r\n        address STS_MATIC_FARM_,\r\n        address STS_STAKE_,\r\n        address STS_STSP_LP_,\r\n        address STS_MATIC_LP_\r\n    ) {\r\n        router = IUniswapV2Router02(router_);\r\n        STS = STS_;\r\n        STSP = STSP_;\r\n        STS_STSP_FARM = STS_STSP_FARM_;\r\n        STS_MATIC_FARM = STS_MATIC_FARM_;\r\n        STS_STAKE = STS_STAKE_;\r\n        STS_STSP_LP = STS_STSP_LP_;\r\n        STS_MATIC_LP = STS_MATIC_LP_;\r\n\r\n        STS_Swap_Path = new address[](2);\r\n        STS_Swap_Path[0] = IUniswapV2Router02(router_).WETH();\r\n        STS_Swap_Path[1] = STS_;\r\n    }\r\n\r\n    function zap(address farmAddress, uint256 minOut) external payable {\r\n        require(\r\n            msg.value > 2,\r\n            'Value Too Low'\r\n        );\r\n\r\n        if (farmAddress == STS_STAKE) {\r\n            // Single Stake STS\r\n\r\n            // Buy STS Tokens, Receiving Balance After Swap\r\n            uint256 balance = buySTS(msg.value, minOut);            \r\n\r\n            // Approve of Balance For Staking\r\n            IERC20(STS).approve(STS_STAKE, balance);\r\n\r\n            // Deposit STS into staking for caller\r\n            IFarm(STS_STAKE).stake(msg.sender, balance);\r\n\r\n\r\n        } else if (farmAddress == STS_STSP_FARM) {\r\n            // STS/STS+ Farm\r\n\r\n            // split value in two halves\r\n            uint256 halfVal = msg.value / 2;\r\n            uint256 otherHalfVal = msg.value - halfVal;\r\n\r\n            // Use half of value to buy STS, other half for STS+\r\n            uint256 STS_BAL = buySTS(halfVal, 0);\r\n            uint256 STSP_BAL = buySTSP(otherHalfVal);\r\n\r\n            // approve both tokens for router\r\n            IERC20(STS).approve(address(router), STS_BAL);\r\n            IERC20(STSP).approve(address(router), STSP_BAL);\r\n\r\n            // pair STS and STS+ into liquidity\r\n            router.addLiquidity(\r\n                STS,\r\n                STSP,\r\n                STS_BAL,\r\n                STSP_BAL,\r\n                1,\r\n                1,\r\n                address(this),\r\n                block.timestamp + 100\r\n            );\r\n\r\n            // ensure minOut is preserved\r\n            uint256 lpBal = IERC20(STS_STSP_LP).balanceOf(address(this));\r\n            require(\r\n                lpBal >= minOut,\r\n                'Insufficient Out'\r\n            );\r\n            \r\n            // approve LP for Farm\r\n            IERC20(STS_STSP_LP).approve(STS_STSP_FARM, lpBal);\r\n\r\n            // Stake LPs into Farm for caller\r\n            IFarm(STS_STSP_FARM).stake(msg.sender, lpBal);\r\n\r\n            // refund dust\r\n            if (IERC20(STS).balanceOf(address(this)) > 0) {\r\n                IERC20(STS).transfer(msg.sender, IERC20(STS).balanceOf(address(this)));\r\n            }\r\n            if (IERC20(STSP).balanceOf(address(this)) > 0) {\r\n                IERC20(STSP).transfer(msg.sender, IERC20(STSP).balanceOf(address(this)));\r\n            }\r\n\r\n        } else if (farmAddress == STS_MATIC_FARM) {\r\n            // STS/MATIC Farm\r\n\r\n            // split value in half\r\n            uint256 halfVal = msg.value / 2;\r\n\r\n            // Use half of value to buy STS, other half for STS+\r\n            uint256 STS_BAL = buySTS(halfVal, 0);\r\n\r\n            // approve STS for router\r\n            IERC20(STS).approve(address(router), STS_BAL);\r\n\r\n            // pair STS and STS+ into liquidity\r\n            router.addLiquidityETH{value: msg.value - halfVal}(\r\n                STS,\r\n                STS_BAL,\r\n                1,\r\n                1,\r\n                address(this),\r\n                block.timestamp + 100\r\n            );\r\n            \r\n            // ensure minOut is preserved\r\n            uint256 lpBal = IERC20(STS_MATIC_LP).balanceOf(address(this));\r\n            require(\r\n                lpBal >= minOut,\r\n                'Insufficient Out'\r\n            );\r\n            \r\n            // approve LP for Farm\r\n            IERC20(STS_MATIC_LP).approve(STS_MATIC_FARM, lpBal);\r\n\r\n            // Stake LPs into Farm for caller\r\n            IFarm(STS_MATIC_FARM).stake(msg.sender, lpBal);\r\n\r\n            // refund dust\r\n            if (IERC20(STS).balanceOf(address(this)) > 0) {\r\n                IERC20(STS).transfer(msg.sender, IERC20(STS).balanceOf(address(this)));\r\n            }\r\n            if (address(this).balance > 0) {\r\n                (bool s,) = payable(msg.sender).call{value: address(this).balance}(\"\");\r\n                require(s);\r\n            }\r\n        }\r\n\r\n        emit Zap(farmAddress, minOut);\r\n    }\r\n\r\n    function buySTS(uint256 val, uint256 minOut) internal returns (uint256) {\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: val}(minOut, STS_Swap_Path, address(this), block.timestamp + 100);\r\n        emit BuySts(val, minOut);\r\n        return IERC20(STS).balanceOf(address(this));\r\n    }\r\n\r\n    function buySTSP(uint256 val) internal returns (uint256) {\r\n\r\n        // buy STSP\r\n        (bool s,) = payable(STSP).call{value: val}(\"\");\r\n        require(s, 'FAIL STSP BUY');\r\n\r\n        // Determine amount purchased\r\n        uint256 bal = IERC20(STSP).balanceOf(address(this));\r\n\r\n        // Determine fee to be burned\r\n        uint256 fee = ( bal * STSP_buy_fee ) / FEE_DENOM;\r\n\r\n        // Enforce buy fee\r\n        IStable(STSP).burn(fee);\r\n\r\n        emit BuyStsp(val);\r\n\r\n        // return balance bought less fee\r\n        return bal - fee;\r\n    }\r\n\r\n    function withdraw(address token, address to) external onlyOwner {\r\n        IERC20(token).transfer(to, IERC20(token).balanceOf(address(this)));\r\n    }\r\n\r\n    function withdrawETH(address to) external onlyOwner {\r\n        (bool s,) = payable(to).call{value: address(this).balance}(\"\");\r\n        require(s);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"STS_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"STSP_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"STS_STSP_FARM_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"STS_MATIC_FARM_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"STS_STAKE_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"STS_STSP_LP_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"STS_MATIC_LP_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"}],\"name\":\"BuySts\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"BuyStsp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"farmAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintOut\",\"type\":\"uint256\"}],\"name\":\"Zap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DENOM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STSP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STSP_buy_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STS_MATIC_FARM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STS_MATIC_LP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STS_STAKE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STS_STSP_FARM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STS_STSP_LP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"farmAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"}],\"name\":\"zap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Zapper", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000fc3559771aa5a0666420f2365cf66139fbf4b37f000000000000000000000000e56bdaae614997ea6a64bbe22645542162ec890c000000000000000000000000ae6324ae020436be7d652e0e41316aa7483007e4000000000000000000000000ee491003c3a3f0d6f69f9469c3ca7d157c27dfcc000000000000000000000000c6b2c8783cb12436fa89253a746c5b92bff43f6b000000000000000000000000aa49d5f29cf6ac7411cd1ba9b224b298a3753ef20000000000000000000000005ffc6183d25f9d7070ad0873056b2ac6730a8164", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8644654ddf51ef427211d1e92bc5935dbc46a0ea972cb00a80029bc8a930215c"}