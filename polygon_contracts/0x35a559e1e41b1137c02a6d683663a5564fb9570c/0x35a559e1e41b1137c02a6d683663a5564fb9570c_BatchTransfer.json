{"SourceCode": "/* tokeninsight.com\r\n                                                                                       \r\n     ,--.         ,--.                  ,--.               ,--.       ,--.       ,--.   \r\n   ,-'  '-. ,---. |  |,-. ,---. ,--,--, |  |,--,--,  ,---. `--' ,---. |  ,---. ,-'  '-. \r\n   '-.  .-'| .-. ||     /| .-. :|      \\|  ||      \\(  .-' ,--.| .-. ||  .-.  |'-.  .-' \r\n     |  |  ' '-' '|  \\  \\\\   --.|  ||  ||  ||  ||  |.-'  `)|  |' '-' '|  | |  |  |  |   \r\n     `--'   `---' `--'`--'`----'`--''--'`--'`--''--'`----' `--'.`-  / `--' `--'  `--'   \r\n                                                               `---'     \r\n*/\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// Simplified IERC20 interface containing only the required functions for this contract\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external;\r\n    function transferFrom(address sender, address recipient, uint256 amount) external;\r\n}\r\n\r\ncontract BatchTransfer {\r\n    // Batch transfer Ether\r\n    function batchTransferEther(address payable[] calldata recipients, uint256[] calldata amounts) external payable {\r\n        require(recipients.length == amounts.length, \"Recipients and amounts arrays must have the same length\");\r\n\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            recipients[i].transfer(amounts[i]);\r\n        }\r\n\r\n        uint256 remainingBalance = address(this).balance;\r\n        if (remainingBalance > 0) {\r\n            payable(msg.sender).transfer(remainingBalance);\r\n        }\r\n    }\r\n\r\n    // Batch transfer ERC20 tokens\r\n    function batchTransferToken(IERC20 token, address[] calldata recipients, uint256[] calldata amounts) external {\r\n        require(recipients.length == amounts.length, \"Recipients and amounts arrays must have the same length\");\r\n\r\n        uint256 totalTokens = 0;\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            totalTokens += amounts[i];\r\n        }\r\n\r\n        token.transferFrom(msg.sender, address(this), totalTokens);\r\n\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            token.transfer(recipients[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n    function batchTransferTokenSimple(IERC20 token, address[] calldata recipients, uint256[] calldata amounts)\r\n        external\r\n    {\r\n        require(recipients.length == amounts.length, \"Recipients and amounts arrays must have the same length\");\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            token.transferFrom(msg.sender, recipients[i], amounts[i]);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferTokenSimple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BatchTransfer", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://36dacf40e662d9f6d284014037fcbab9646d75080f7d3cb80f28e88b133c3ffe"}