{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/SwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.16;\\n/*\\n\\n \u2588\u2588\u2588\u2584 \u2584\u2588\u2588\u2588\u2593 \u2588    \u2588\u2588 \u2584\u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2593 \u2584\u2584\u2584     \u2584\u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2593 \u2588\u2588\u2593 \u2588\u2588\u2592   \u2588\u2593\u2593\u2588\u2588\u2588\u2588\u2588 \\n\u2593\u2588\u2588\u2592\u2580\u2588\u2580 \u2588\u2588\u2592 \u2588\u2588  \u2593\u2588\u2588\u2592\u2593  \u2588\u2588\u2592 \u2593\u2592\u2592\u2588\u2588\u2588\u2588\u2584   \u2593  \u2588\u2588\u2592 \u2593\u2592\u2593\u2588\u2588\u2592\u2593\u2588\u2588\u2591   \u2588\u2592\u2593\u2588   \u2580 \\n\u2593\u2588\u2588    \u2593\u2588\u2588\u2591\u2593\u2588\u2588  \u2592\u2588\u2588\u2591\u2592 \u2593\u2588\u2588\u2591 \u2592\u2591\u2592\u2588\u2588  \u2580\u2588\u2584 \u2592 \u2593\u2588\u2588\u2591 \u2592\u2591\u2592\u2588\u2588\u2592 \u2593\u2588\u2588  \u2588\u2592\u2591\u2592\u2588\u2588\u2588   \\n\u2592\u2588\u2588    \u2592\u2588\u2588 \u2593\u2593\u2588  \u2591\u2588\u2588\u2591\u2591 \u2593\u2588\u2588\u2593 \u2591 \u2591\u2588\u2588\u2584\u2584\u2584\u2584\u2588\u2588\u2591 \u2593\u2588\u2588\u2593 \u2591 \u2591\u2588\u2588\u2591  \u2592\u2588\u2588 \u2588\u2591\u2591\u2592\u2593\u2588  \u2584 \\n\u2592\u2588\u2588\u2592   \u2591\u2588\u2588\u2592\u2592\u2592\u2588\u2588\u2588\u2588\u2588\u2593   \u2592\u2588\u2588\u2592 \u2591  \u2593\u2588   \u2593\u2588\u2588\u2592 \u2592\u2588\u2588\u2592 \u2591 \u2591\u2588\u2588\u2591   \u2592\u2580\u2588\u2591  \u2591\u2592\u2588\u2588\u2588\u2588\u2592\\n\u2591 \u2592\u2591   \u2591  \u2591\u2591\u2592\u2593\u2592 \u2592 \u2592   \u2592 \u2591\u2591    \u2592\u2592   \u2593\u2592\u2588\u2591 \u2592 \u2591\u2591   \u2591\u2593     \u2591 \u2590\u2591  \u2591\u2591 \u2592\u2591 \u2591\\n\u2591  \u2591      \u2591\u2591\u2591\u2592\u2591 \u2591 \u2591     \u2591      \u2592   \u2592\u2592 \u2591   \u2591     \u2592 \u2591   \u2591 \u2591\u2591   \u2591 \u2591  \u2591\\n\u2591      \u2591    \u2591\u2591\u2591 \u2591 \u2591   \u2591        \u2591   \u2592    \u2591       \u2592 \u2591     \u2591\u2591     \u2591   \\n       \u2591      \u2591                    \u2591  \u2591         \u2591        \u2591     \u2591  \u2591\\n                                                        \u2591          \\n */\\n\\nimport \\\"src/base/Multicall.sol\\\";\\n\\n/// @title SwapRouter.\\n/// @notice Enable swapping tokens through Curve and Synthereum.\\ncontract SwapRouter is Multicall {}\\n\"\r\n    },\r\n    \"src/base/Multicall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.16;\\n\\nimport \\\"src/interfaces/IMulticall.sol\\\";\\nimport \\\"src/common/PermissionHelper.sol\\\";\\n\\n/// @title Multicall\\n/// @notice Enables calling multiple methods in a single call to the contract\\nabstract contract Multicall is IMulticall, PermissionHelper {\\n    /// @notice Checks if timestamp is not expired\\n    modifier checkDeadline(uint256 deadline) {\\n        if (block.timestamp > deadline) revert Constants.DEADLINE_EXCEEDED();\\n        _;\\n    }\\n\\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\\n    /// @param deadline The time by which this function must be called before failing\\n    /// @param data The encoded function data for each of the calls to make to this contract\\n    /// @return results The results from each of the calls passed in via data\\n    function multicall(uint256 deadline, bytes[] calldata data)\\n        public\\n        payable\\n        override\\n        checkDeadline(deadline)\\n        returns (bytes[] memory results)\\n    {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            address target = abi.decode(data[i][0:32], (address));\\n            if (!isAllowed[target]) revert Constants.NOT_ALLOWED();\\n            (bool success, bytes memory result) = target.delegatecall(data[i][96:]);\\n\\n            if (!success) {\\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\\n                if (result.length < 68) {\\n                    revert();\\n                }\\n                assembly {\\n                    result := add(result, 0x04)\\n                }\\n                revert(abi.decode(result, (string)));\\n            }\\n\\n            results[i] = result;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IMulticall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.16;\\n\\n/// @title Multicall interface\\n/// @notice Enables calling multiple methods in a single call to the contract\\ninterface IMulticall {\\n    function multicall(uint256 deadline, bytes[] calldata data) external payable returns (bytes[] memory results);\\n}\\n\"\r\n    },\r\n    \"src/common/PermissionHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.16;\\n\\nimport \\\"src/libraries/Constants.sol\\\";\\n\\n/// @title Permission Helper\\n/// @notice Authorizes delegated calls to addresses.\\nabstract contract PermissionHelper {\\n    /// @notice Owner address.\\n    address public owner;\\n\\n    /// @notice Next owner address. Default is zero address.\\n    address public nextOwner;\\n\\n    /// @notice Allowed addresses.\\n    mapping(address => bool) public isAllowed;\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != owner) revert Constants.NOT_ALLOWED();\\n        _;\\n    }\\n\\n    /// @notice Set allowed address.\\n    /// @param _allowed Address to set.\\n    /// @param _isAllowed Allowed status.\\n    function setAllowed(address _allowed, bool _isAllowed) external onlyOwner {\\n        isAllowed[_allowed] = _isAllowed;\\n    }\\n\\n    /// @notice Set next owner.\\n    /// @param _nextOwner Next owner address.\\n    function commitOwnership(address _nextOwner) external onlyOwner {\\n        nextOwner = _nextOwner;\\n    }\\n\\n    /// @notice Accept ownership.\\n    function acceptOwnership() external {\\n        if (msg.sender != nextOwner) revert Constants.NOT_ALLOWED();\\n        owner = nextOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.16;\\n\\n/// @title Constant state\\n/// @notice Constant state used by the swap router\\n/// @author Uniswap Labs\\nlibrary Constants {\\n    /// @dev Used for identifying cases when this contract's balance of a token is to be used\\n    uint256 internal constant CONTRACT_BALANCE = 0;\\n\\n    /// @dev Used as a flag for identifying msg.sender, saves gas by sending more 0 bytes\\n    address internal constant MSG_SENDER = address(1);\\n\\n    /// @dev Used as a flag for identifying address(this), saves gas by sending more 0 bytes\\n    address internal constant ADDRESS_THIS = address(2);\\n\\n    /// @dev Error message for when the amount of received tokens is less than the minimum amount\\n    error NOT_ENOUGH_RECEIVED();\\n\\n    /// @dev Error message when the caller is not allowed to call the function.\\n    error NOT_ALLOWED();\\n\\n    error DEADLINE_EXCEEDED();\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"solmate/=lib/solmate/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"DEADLINE_EXCEEDED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_ALLOWED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nextOwner\",\"type\":\"address\"}],\"name\":\"commitOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_allowed\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isAllowed\",\"type\":\"bool\"}],\"name\":\"setAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SwapRouter", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "1", "Implementation": "0xfc9d9df71d1cfac4d41088b6a6dab90321c7a6b5", "SwarmSource": ""}