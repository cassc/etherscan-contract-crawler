{"SourceCode": "// File: @chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/** ****************************************************************************\r\n * @notice Interface for contracts using VRF randomness\r\n * *****************************************************************************\r\n * @dev PURPOSE\r\n *\r\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\r\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\r\n * @dev making his output up to suit himself. Reggie provides Vera a public key\r\n * @dev to which he knows the secret key. Each time Vera provides a seed to\r\n * @dev Reggie, he gives back a value which is computed completely\r\n * @dev deterministically from the seed and the secret key.\r\n *\r\n * @dev Reggie provides a proof by which Vera can verify that the output was\r\n * @dev correctly computed once Reggie tells it to her, but without that proof,\r\n * @dev the output is indistinguishable to her from a uniform random sample\r\n * @dev from the output space.\r\n *\r\n * @dev The purpose of this contract is to make it easy for unrelated contracts\r\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\r\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\r\n * @dev 1. The fulfillment came from the VRFCoordinator\r\n * @dev 2. The consumer contract implements fulfillRandomWords.\r\n * *****************************************************************************\r\n * @dev USAGE\r\n *\r\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\r\n * @dev initialize VRFConsumerBase's attributes in their constructor as\r\n * @dev shown:\r\n *\r\n * @dev   contract VRFConsumer {\r\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\r\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\r\n * @dev         <initialization with other arguments goes here>\r\n * @dev       }\r\n * @dev   }\r\n *\r\n * @dev The oracle will have given you an ID for the VRF keypair they have\r\n * @dev committed to (let's call it keyHash). Create subscription, fund it\r\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\r\n * @dev subscription management functions).\r\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\r\n * @dev callbackGasLimit, numWords),\r\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\r\n *\r\n * @dev Once the VRFCoordinator has received and validated the oracle's response\r\n * @dev to your request, it will call your contract's fulfillRandomWords method.\r\n *\r\n * @dev The randomness argument to fulfillRandomWords is a set of random words\r\n * @dev generated from your requestId and the blockHash of the request.\r\n *\r\n * @dev If your contract could have concurrent requests open, you can use the\r\n * @dev requestId returned from requestRandomWords to track which response is associated\r\n * @dev with which randomness request.\r\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\r\n * @dev if your contract could have multiple requests in flight simultaneously.\r\n *\r\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\r\n * @dev differ.\r\n *\r\n * *****************************************************************************\r\n * @dev SECURITY CONSIDERATIONS\r\n *\r\n * @dev A method with the ability to call your fulfillRandomness method directly\r\n * @dev could spoof a VRF response with any random value, so it's critical that\r\n * @dev it cannot be directly called by anything other than this base contract\r\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\r\n *\r\n * @dev For your users to trust that your contract's random behavior is free\r\n * @dev from malicious interference, it's best if you can write it so that all\r\n * @dev behaviors implied by a VRF response are executed *during* your\r\n * @dev fulfillRandomness method. If your contract must store the response (or\r\n * @dev anything derived from it) and use it later, you must ensure that any\r\n * @dev user-significant behavior which depends on that stored value cannot be\r\n * @dev manipulated by a subsequent VRF request.\r\n *\r\n * @dev Similarly, both miners and the VRF oracle itself have some influence\r\n * @dev over the order in which VRF responses appear on the blockchain, so if\r\n * @dev your contract could have multiple VRF requests in flight simultaneously,\r\n * @dev you must ensure that the order in which the VRF responses arrive cannot\r\n * @dev be used to manipulate your contract's user-significant behavior.\r\n *\r\n * @dev Since the block hash of the block which contains the requestRandomness\r\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\r\n * @dev miner could, in principle, fork the blockchain to evict the block\r\n * @dev containing the request, forcing the request to be included in a\r\n * @dev different block with a different hash, and therefore a different input\r\n * @dev to the VRF. However, such an attack would incur a substantial economic\r\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\r\n * @dev until it calls responds to a request. It is for this reason that\r\n * @dev that you can signal to an oracle you'd like them to wait longer before\r\n * @dev responding to the request (however this is not enforced in the contract\r\n * @dev and so remains effective only in the case of unmodified oracle software).\r\n */\r\nabstract contract VRFConsumerBaseV2 {\r\n  error OnlyCoordinatorCanFulfill(address have, address want);\r\n  address private immutable vrfCoordinator;\r\n\r\n  /**\r\n   * @param _vrfCoordinator address of VRFCoordinator contract\r\n   */\r\n  constructor(address _vrfCoordinator) {\r\n    vrfCoordinator = _vrfCoordinator;\r\n  }\r\n\r\n  /**\r\n   * @notice fulfillRandomness handles the VRF response. Your contract must\r\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\r\n   * @notice principles to keep in mind when implementing your fulfillRandomness\r\n   * @notice method.\r\n   *\r\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\r\n   * @dev signature, and will call it once it has verified the proof\r\n   * @dev associated with the randomness. (It is triggered via a call to\r\n   * @dev rawFulfillRandomness, below.)\r\n   *\r\n   * @param requestId The Id initially returned by requestRandomness\r\n   * @param randomWords the VRF output expanded to the requested number of words\r\n   */\r\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\r\n\r\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\r\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\r\n  // the origin of the call\r\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\r\n    if (msg.sender != vrfCoordinator) {\r\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\r\n    }\r\n    fulfillRandomWords(requestId, randomWords);\r\n  }\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface VRFCoordinatorV2Interface {\r\n  /**\r\n   * @notice Get configuration relevant for making requests\r\n   * @return minimumRequestConfirmations global min for request confirmations\r\n   * @return maxGasLimit global max for request gas limit\r\n   * @return s_provingKeyHashes list of registered key hashes\r\n   */\r\n  function getRequestConfig()\r\n    external\r\n    view\r\n    returns (\r\n      uint16,\r\n      uint32,\r\n      bytes32[] memory\r\n    );\r\n\r\n  /**\r\n   * @notice Request a set of random words.\r\n   * @param keyHash - Corresponds to a particular oracle job which uses\r\n   * that key for generating the VRF proof. Different keyHash's have different gas price\r\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\r\n   * @param subId  - The ID of the VRF subscription. Must be funded\r\n   * with the minimum subscription balance required for the selected keyHash.\r\n   * @param minimumRequestConfirmations - How many blocks you'd like the\r\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\r\n   * for why you may want to request more. The acceptable range is\r\n   * [minimumRequestBlockConfirmations, 200].\r\n   * @param callbackGasLimit - How much gas you'd like to receive in your\r\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\r\n   * may be slightly less than this amount because of gas used calling the function\r\n   * (argument decoding etc.), so you may need to request slightly more than you expect\r\n   * to have inside fulfillRandomWords. The acceptable range is\r\n   * [0, maxGasLimit]\r\n   * @param numWords - The number of uint256 random values you'd like to receive\r\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\r\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\r\n   * @return requestId - A unique identifier of the request. Can be used to match\r\n   * a request to a response in fulfillRandomWords.\r\n   */\r\n  function requestRandomWords(\r\n    bytes32 keyHash,\r\n    uint64 subId,\r\n    uint16 minimumRequestConfirmations,\r\n    uint32 callbackGasLimit,\r\n    uint32 numWords\r\n  ) external returns (uint256 requestId);\r\n\r\n  /**\r\n   * @notice Create a VRF subscription.\r\n   * @return subId - A unique subscription id.\r\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\r\n   * @dev Note to fund the subscription, use transferAndCall. For example\r\n   * @dev  LINKTOKEN.transferAndCall(\r\n   * @dev    address(COORDINATOR),\r\n   * @dev    amount,\r\n   * @dev    abi.encode(subId));\r\n   */\r\n  function createSubscription() external returns (uint64 subId);\r\n\r\n  /**\r\n   * @notice Get a VRF subscription.\r\n   * @param subId - ID of the subscription\r\n   * @return balance - LINK balance of the subscription in juels.\r\n   * @return reqCount - number of requests for this subscription, determines fee tier.\r\n   * @return owner - owner of the subscription.\r\n   * @return consumers - list of consumer address which are able to use this subscription.\r\n   */\r\n  function getSubscription(uint64 subId)\r\n    external\r\n    view\r\n    returns (\r\n      uint96 balance,\r\n      uint64 reqCount,\r\n      address owner,\r\n      address[] memory consumers\r\n    );\r\n\r\n  /**\r\n   * @notice Request subscription owner transfer.\r\n   * @param subId - ID of the subscription\r\n   * @param newOwner - proposed new owner of the subscription\r\n   */\r\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\r\n\r\n  /**\r\n   * @notice Request subscription owner transfer.\r\n   * @param subId - ID of the subscription\r\n   * @dev will revert if original owner of subId has\r\n   * not requested that msg.sender become the new owner.\r\n   */\r\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\r\n\r\n  /**\r\n   * @notice Add a consumer to a VRF subscription.\r\n   * @param subId - ID of the subscription\r\n   * @param consumer - New consumer which can use the subscription\r\n   */\r\n  function addConsumer(uint64 subId, address consumer) external;\r\n\r\n  /**\r\n   * @notice Remove a consumer from a VRF subscription.\r\n   * @param subId - ID of the subscription\r\n   * @param consumer - Consumer to remove from the subscription\r\n   */\r\n  function removeConsumer(uint64 subId, address consumer) external;\r\n\r\n  /**\r\n   * @notice Cancel a subscription\r\n   * @param subId - ID of the subscription\r\n   * @param to - Where to send the remaining LINK to\r\n   */\r\n  function cancelSubscription(uint64 subId, address to) external;\r\n\r\n  /*\r\n   * @notice Check to see if there exists a request commitment consumers\r\n   * for all consumers and keyhashes for a given sub.\r\n   * @param subId - ID of the subscription\r\n   * @return true if there exists at least one unfulfilled request for the subscription, false\r\n   * otherwise.\r\n   */\r\n  function pendingRequestExists(uint64 subId) external view returns (bool);\r\n}\r\n\r\n// File: contracts/LUXON/utils/ILuxOnCharacter.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\ninterface ILuxOnCharacter {\r\n    struct Character {\r\n        uint256 tokenId;\r\n        string name;\r\n    }\r\n    function setCharacterName(Character[] memory _character) external;\r\n    function getCharacterInfo(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: contracts/Admin/data/GachaStruct.sol\r\n\r\n\r\npragma solidity ^0.8.18;\r\n\r\n    enum GachaType {\r\n        None,\r\n        Character,\r\n        FateCore\r\n    }\r\n\r\n    struct InputGachaInfo {\r\n        uint256 tokenId;\r\n        string name;\r\n        uint256[] tierRatio;\r\n        uint256[][] gachaGradeRatio;\r\n        uint256[] gachaFateCoreRatio;\r\n        uint256[] gachaFateCoreList;\r\n        GachaType gachaType;\r\n        bool isValid;\r\n    }\r\n\r\n    struct GachaInfo {\r\n        uint256 tokenId;\r\n        string name;\r\n        uint256[] tierRatio;\r\n        uint256[][] gachaGradeRatio;\r\n        bool isValid;\r\n    }\r\n\r\n    struct FateCoreGachaInfo {\r\n        uint256 tokenId;\r\n        string name;\r\n        uint256[] gachaFateCoreRatio;\r\n        uint256[] gachaFateCoreList;\r\n        bool isValid;\r\n    }\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/Admin/data/ActorData.sol\r\n\r\n\r\npragma solidity ^0.8.18;\r\n\r\n\r\ncontract DspActorData is Ownable {\r\n    event SetGachaTypeById(uint256 indexed id, uint256 indexed gachaType);\r\n    event SetGachaTypeByName(string indexed name, uint256 indexed gachaType);\r\n\r\n    struct InputGachaTypeById {\r\n        uint256 id;\r\n        uint256 gachaType;\r\n    }\r\n\r\n    struct InputGachaTypeByName {\r\n        string name;\r\n        uint256 gachaType;\r\n    }\r\n\r\n    // id => type\r\n    mapping(uint256 => uint256) private gachaTypeById;\r\n    // fate core id => name\r\n    mapping(string => uint256) private gachaTypeByName;\r\n\r\n\r\n    function getGachaTypeById(uint256 _id) public view returns(uint256) {\r\n        return gachaTypeById[_id];\r\n    }\r\n\r\n    function getGachaTypeByName(string memory _name) public view returns(uint256) {\r\n        return gachaTypeByName[_name];\r\n    }\r\n\r\n    function getGachaTypeByIds(uint256[] memory _ids) public view returns(uint256[] memory) {\r\n        uint256[] memory gachaTypes = new uint256[](_ids.length);\r\n        for (uint256 i = 0; i < _ids.length; i++) {\r\n            gachaTypes[i] = gachaTypeById[_ids[i]];\r\n        }\r\n        return gachaTypes;\r\n    }\r\n\r\n    function getGachaTypeByNames(string[] memory _names) public view returns(uint256[] memory) {\r\n        uint256[] memory gachaTypes = new uint256[](_names.length);\r\n        for (uint256 i = 0; i < _names.length; i++) {\r\n            gachaTypes[i] = gachaTypeByName[_names[i]];\r\n        }\r\n        return gachaTypes;\r\n    }\r\n\r\n    function setGachaTypeById(InputGachaTypeById memory _inputGachaTypeById) external onlyOwner {\r\n        gachaTypeById[_inputGachaTypeById.id] = _inputGachaTypeById.gachaType;\r\n        emit SetGachaTypeById(_inputGachaTypeById.id, _inputGachaTypeById.gachaType);\r\n    }\r\n\r\n    function setGachaTypeByIds(InputGachaTypeById[] memory _inputGachaTypeByIds) external onlyOwner {\r\n        for (uint256 i = 0; i < _inputGachaTypeByIds.length; i++) {\r\n            gachaTypeById[_inputGachaTypeByIds[i].id] = _inputGachaTypeByIds[i].gachaType;\r\n            emit SetGachaTypeById(_inputGachaTypeByIds[i].id, _inputGachaTypeByIds[i].gachaType);\r\n        }\r\n    }\r\n\r\n    function setGachaTypeByName(InputGachaTypeByName memory _inputGachaTypeByName) external onlyOwner {\r\n        gachaTypeByName[_inputGachaTypeByName.name] = _inputGachaTypeByName.gachaType;\r\n        emit SetGachaTypeByName(_inputGachaTypeByName.name, _inputGachaTypeByName.gachaType);\r\n    }\r\n\r\n    function setGachaTypeByNames(InputGachaTypeByName[] memory _inputGachaTypeByNames) external onlyOwner {\r\n        for (uint256 i = 0; i < _inputGachaTypeByNames.length; i++) {\r\n            gachaTypeByName[_inputGachaTypeByNames[i].name] = _inputGachaTypeByNames[i].gachaType;\r\n            emit SetGachaTypeByName(_inputGachaTypeByNames[i].name, _inputGachaTypeByNames[i].gachaType);\r\n        }\r\n    }\r\n}\r\n// File: contracts/Admin/data/FateCoreData.sol\r\n\r\n\r\npragma solidity ^0.8.18;\r\n\r\n\r\ncontract DspFateCoreData is Ownable {\r\n    event SetFateCoreData(string indexed name, uint256 indexed tier, uint256 indexed gachaGrade, uint256 classType, uint256 nation, uint256 element, bool isValid);\r\n    event DeleteFateCoreData(string indexed name, uint256 indexed tier, uint256 indexed gachaGrade, uint256 classType, uint256 nation, uint256 element, bool isValid);\r\n    event SetFateCoreName(uint256 indexed id, string indexed name);\r\n\r\n    struct FateCoreInfo {\r\n        string name;\r\n        uint256 tier;\r\n        uint256 gachaGrade;\r\n        uint256 classType;\r\n        uint256 nation;\r\n        uint256 element;\r\n        uint256 rootId;\r\n        bool isValid;\r\n    }\r\n\r\n    struct FateCoreName {\r\n        uint256 id;\r\n        string name;\r\n    }\r\n\r\n    // fate core id => name\r\n    mapping(uint256 => string) private fateCoreName;\r\n    // name => fate core info\r\n    mapping(string => FateCoreInfo) private fateCoreData;\r\n    // tier => gacha grade => name[]\r\n    mapping(uint256 => mapping(uint256 => string[])) private fateCoreInfoTable;\r\n\r\n    uint256 private fateCoreCount;\r\n\r\n    function getFateCoreInfo(string memory name) public view returns(uint256, uint256, uint256, uint256, uint256, uint256, bool) {\r\n        return (fateCoreData[name].tier, fateCoreData[name].gachaGrade, fateCoreData[name].classType, fateCoreData[name].nation, fateCoreData[name].element, fateCoreData[name].rootId, fateCoreData[name].isValid);\r\n    }\r\n\r\n    function getFateCoreInfoIsValid(string memory name) public view returns(bool) {\r\n        return fateCoreData[name].isValid;\r\n    }\r\n\r\n    function getFateCoreName(uint256 id) public view returns (string memory) {\r\n        return fateCoreName[id];\r\n    }\r\n\r\n    function setFateCoreName(FateCoreName[] memory _fateCoreName) external onlyOwner {\r\n        for (uint256 i = 0; i < _fateCoreName.length; i++) {\r\n            fateCoreName[_fateCoreName[i].id] = _fateCoreName[i].name;\r\n            emit SetFateCoreName(_fateCoreName[i].id, _fateCoreName[i].name);\r\n        }\r\n    }\r\n\r\n    function setFateCoreData(FateCoreInfo[] memory _fateCoreData) external onlyOwner {\r\n        for (uint256 i = 0; i < _fateCoreData.length; i++) {\r\n            require(_fateCoreData[i].isValid, \"isValid false use delete\");\r\n            if (!fateCoreData[_fateCoreData[i].name].isValid) {\r\n                fateCoreCount++;\r\n            } else if (fateCoreData[_fateCoreData[i].name].tier != _fateCoreData[i].tier) {\r\n                uint256 index;\r\n                uint256 _tier = fateCoreData[_fateCoreData[i].name].tier;\r\n                uint256 _gachaGrade = fateCoreData[_fateCoreData[i].name].gachaGrade;\r\n                for (uint256 j = 0; j < fateCoreInfoTable[_tier][_gachaGrade].length; j++) {\r\n                    if (keccak256(abi.encodePacked(fateCoreInfoTable[_tier][_gachaGrade][j])) == keccak256(abi.encodePacked(_fateCoreData[i].name))) {\r\n                        index = j;\r\n                        break;\r\n                    }\r\n                }\r\n                for (uint256 j = index; j < fateCoreInfoTable[_tier][_gachaGrade].length - 1; j++) {\r\n                    fateCoreInfoTable[_tier][_gachaGrade][j] = fateCoreInfoTable[_tier][_gachaGrade][j + 1];\r\n                }\r\n                fateCoreInfoTable[_tier][_gachaGrade].pop();\r\n            }\r\n            fateCoreInfoTable[_fateCoreData[i].tier][_fateCoreData[i].gachaGrade].push(_fateCoreData[i].name);\r\n            fateCoreData[_fateCoreData[i].name] = _fateCoreData[i];\r\n\r\n            emit SetFateCoreData(_fateCoreData[i].name, _fateCoreData[i].tier, _fateCoreData[i].gachaGrade, _fateCoreData[i].classType, _fateCoreData[i].nation, _fateCoreData[i].element, _fateCoreData[i].isValid);\r\n        }\r\n    }\r\n\r\n    function deleteFateCoreData(string[] memory names) external onlyOwner {\r\n        for (uint256 i = 0; i < names.length; i++) {\r\n            uint256 _tier = fateCoreData[names[i]].tier;\r\n            uint256 _gachaGrade = fateCoreData[names[i]].gachaGrade;\r\n\r\n            uint256 index;\r\n            for (uint256 j = 0; j < fateCoreInfoTable[_tier][_gachaGrade].length; j++) {\r\n                if (keccak256(abi.encodePacked(fateCoreInfoTable[_tier][_gachaGrade][j])) == keccak256(abi.encodePacked(fateCoreData[names[i]].name))) {\r\n                    index = j;\r\n                    break;\r\n                }\r\n            }\r\n            for (uint256 j = index; j < fateCoreInfoTable[_tier][_gachaGrade].length - 1; j++) {\r\n                fateCoreInfoTable[_tier][_gachaGrade][j] = fateCoreInfoTable[_tier][_gachaGrade][j + 1];\r\n            }\r\n            fateCoreInfoTable[_tier][_gachaGrade].pop();\r\n            fateCoreCount--;\r\n\r\n            emit DeleteFateCoreData(fateCoreData[names[i]].name, fateCoreData[names[i]].tier, fateCoreData[names[i]].gachaGrade, fateCoreData[names[i]].classType, fateCoreData[names[i]].nation, fateCoreData[names[i]].element, fateCoreData[names[i]].isValid);\r\n            delete fateCoreData[names[i]];\r\n        }\r\n    }\r\n\r\n    function getFateCoreCount() public view returns (uint256) {\r\n        return fateCoreCount;\r\n    }\r\n\r\n    function getFateCoreCountByTireAndGachaGrade(uint256 _tier, uint256 _gachaGrade) public view returns (uint256) {\r\n        return fateCoreInfoTable[_tier][_gachaGrade].length;\r\n    }\r\n\r\n    function getFateCoreInfoByTireAndIndex(uint256 _tier, uint256 _gachaGrade, uint index) public view returns (string memory) {\r\n        return fateCoreInfoTable[_tier][_gachaGrade][index];\r\n    }\r\n}\r\n// File: contracts/Admin/LuxOnAdmin.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\ncontract LuxOnAdmin is Ownable {\r\n\r\n    mapping(string => mapping(address => bool)) private _superOperators;\r\n\r\n    event SuperOperator(string operator, address superOperator, bool enabled);\r\n\r\n    function setSuperOperator(string memory operator, address[] memory _operatorAddress, bool enabled) external onlyOwner {\r\n        for (uint256 i = 0; i < _operatorAddress.length; i++) {\r\n            _superOperators[operator][_operatorAddress[i]] = enabled;\r\n            emit SuperOperator(operator, _operatorAddress[i], enabled);\r\n        }\r\n    }\r\n\r\n    function isSuperOperator(string memory operator, address who) public view returns (bool) {\r\n        return _superOperators[operator][who];\r\n    }\r\n}\r\n// File: contracts/LUXON/utils/LuxOnSuperOperators.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\n\r\ncontract LuxOnSuperOperators is Ownable {\r\n\r\n    event SetLuxOnAdmin(address indexed luxOnAdminAddress);\r\n    event SetOperator(string indexed operator);\r\n\r\n    address private luxOnAdminAddress;\r\n    string private operator;\r\n\r\n    constructor(\r\n        string memory _operator,\r\n        address _luxOnAdminAddress\r\n    ) {\r\n        operator = _operator;\r\n        luxOnAdminAddress = _luxOnAdminAddress;\r\n    }\r\n\r\n    modifier onlySuperOperator() {\r\n        require(LuxOnAdmin(luxOnAdminAddress).isSuperOperator(operator, msg.sender), \"LuxOnSuperOperators: not super operator\");\r\n        _;\r\n    }\r\n\r\n    function getLuxOnAdmin() public view returns (address) {\r\n        return luxOnAdminAddress;\r\n    }\r\n\r\n    function getOperator() public view returns (string memory) {\r\n        return operator;\r\n    }\r\n\r\n    function setLuxOnAdmin(address _luxOnAdminAddress) external onlyOwner {\r\n        luxOnAdminAddress = _luxOnAdminAddress;\r\n        emit SetLuxOnAdmin(_luxOnAdminAddress);\r\n    }\r\n\r\n    function setOperator(string memory _operator) external onlyOwner {\r\n        operator = _operator;\r\n        emit SetOperator(_operator);\r\n    }\r\n\r\n    function isSuperOperator(address spender) public view returns (bool) {\r\n        return LuxOnAdmin(luxOnAdminAddress).isSuperOperator(operator, spender);\r\n    }\r\n}\r\n// File: contracts/LUXON/utils/RandomSeedNumber.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\n\r\n\r\ncontract RandomSeedNumber is VRFConsumerBaseV2, LuxOnSuperOperators {\r\n    event RequestSent(address indexed userAddress, uint256 indexed gachaTicketTokenId, uint256 indexed tokenId, uint256 requestId);\r\n    event RequestFulfilled(address indexed userAddress, uint256 indexed requestId, uint256[] indexed randomWords);\r\n\r\n    struct RequestStatus {\r\n        bool fulfilled;\r\n        bool exists;\r\n        uint256[] randomWords;\r\n    }\r\n\r\n    mapping(uint256 => RequestStatus) public s_requests;\r\n    VRFCoordinatorV2Interface COORDINATOR;\r\n    uint64 s_subscriptionId;\r\n\r\n    // past requests Id.\r\n    uint256[] public requestIds;\r\n    uint256 public lastRequestId;\r\n    // keyHash = the maximum gas price you are willing to pay for a request in wei\r\n    //https://docs.chain.link/vrf/v2/subscription/supported-networks\r\n    // -> VRFCoordinator, keyHash \uc218\uc815\r\n    bytes32 keyHash = 0x4b09e658ed251bcafeebbc69400383d49f344ace09b9576fe248bb02c003fe9f;\r\n    uint32 callbackGasLimit = 100000;\r\n    uint16 requestConfirmations = 3;\r\n    uint32 numWords = 1;\r\n    address vrfCoordinator = 0x7a1BaC17Ccc5b313516C5E16fb24f7659aA5ebed; // mumbai\r\n\r\n    constructor(\r\n        uint64 subscriptionId,\r\n        string memory operator,\r\n        address luxOnAdmin\r\n    )\r\n    VRFConsumerBaseV2(vrfCoordinator) LuxOnSuperOperators(operator, luxOnAdmin)\r\n    {\r\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\r\n        s_subscriptionId = subscriptionId;\r\n    }\r\n\r\n    function requestRandomWords(address userAddress, uint256 gachaTicketTokenId, uint256 tokenId)\r\n    external\r\n    onlySuperOperator\r\n    {\r\n        uint256 requestId = COORDINATOR.requestRandomWords(\r\n            keyHash,\r\n            s_subscriptionId,\r\n            requestConfirmations,\r\n            callbackGasLimit,\r\n            numWords\r\n        );\r\n        s_requests[requestId] = RequestStatus({\r\n        randomWords : new uint256[](0),\r\n        exists : true,\r\n        fulfilled : false\r\n        });\r\n        requestIds.push(requestId);\r\n        lastRequestId = requestId;\r\n        emit RequestSent(userAddress, gachaTicketTokenId, tokenId, requestId);\r\n    }\r\n\r\n    function fulfillRandomWords(\r\n        uint256 _requestId,\r\n        uint256[] memory _randomWords\r\n    ) internal override {\r\n        require(s_requests[_requestId].exists, \"request not found\");\r\n        s_requests[_requestId].fulfilled = true;\r\n        s_requests[_requestId].randomWords = _randomWords;\r\n        emit RequestFulfilled(msg.sender, _requestId, _randomWords);\r\n    }\r\n\r\n    function getRequestStatus(\r\n        uint256 _requestId\r\n    ) external view returns (bool fulfilled) {\r\n        require(s_requests[_requestId].exists, \"request not found\");\r\n        RequestStatus memory request = s_requests[_requestId];\r\n        return request.fulfilled;\r\n    }\r\n\r\n    function getRequestStatusMany(uint256[] memory _requestIdArray) external view returns (bool[] memory fulfilled) {\r\n        bool[] memory fulfilledResults = new bool[](_requestIdArray.length);\r\n        for (uint i = 0; i < _requestIdArray.length; i++) {\r\n            require(s_requests[_requestIdArray[i]].exists, \"request not found\");\r\n            RequestStatus memory request = s_requests[_requestIdArray[i]];\r\n            fulfilledResults[i] = request.fulfilled;\r\n        }\r\n        return fulfilledResults;\r\n\r\n    }\r\n\r\n    function getRandomNumber(\r\n        uint256 _requestId\r\n    ) external view returns (uint256 randomWord) {\r\n        require(s_requests[_requestId].exists, \"request not found\");\r\n        RequestStatus memory request = s_requests[_requestId];\r\n        return request.randomWords[0];\r\n    }\r\n}\r\n\r\n// File: contracts/Admin/data/GachaDataV2.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\n\r\ncontract DspGachaData is Ownable {\r\n    event SetGachaInfo(uint256 indexed tokenId, string indexed name, uint256[] tierRatio, uint256[][]gachaGradeRatio, bool isValid);\r\n    event SetFateCoreGachaInfo(uint256 indexed tokenId, string indexed name, uint256[] ratio, uint256[]list, bool isValid);\r\n    event RemoveGachaInfo(uint256 indexed tokenId, string indexed name, uint256[] tierRatio, uint256[][]gachaGradeRatio, bool isValid);\r\n    event RemoveFateCoreGachaInfo(uint256 indexed tokenId, string indexed name, uint256[] ratio, uint256[] list, bool isValid);\r\n\r\n    uint256 private gachaCount;\r\n\r\n    // tokenId => GachaInfo\r\n    mapping(uint256 => GachaInfo) private gachaInfo;\r\n\r\n    // tokenId => FateCoreGachaInfo\r\n    mapping(uint256 => FateCoreGachaInfo) private fateCoreGachaInfo;\r\n\r\n    // token id => type\r\n    mapping(uint256 => uint256) private gachaTypeByTokenId;\r\n\r\n    function getGachaCount() public view returns (uint256) {\r\n        return gachaCount;\r\n    }\r\n\r\n    function getGachaInfo(uint256 _tokenId) public view returns (GachaInfo memory) {\r\n        return gachaInfo[_tokenId];\r\n    }\r\n\r\n    function getFateCoreGachaInfo(uint256 _tokenId) public view returns (FateCoreGachaInfo memory) {\r\n        return fateCoreGachaInfo[_tokenId];\r\n    }\r\n\r\n    function getGachaType(uint256 _tokenId) public view returns (uint256) {\r\n        return uint256(gachaTypeByTokenId[_tokenId]);\r\n    }\r\n\r\n    function getGachaTierRatio(uint256 _tokenId) public view returns (uint256[] memory, uint256) {\r\n        uint256 sum = 0;\r\n        for (uint256 i = 0; i < gachaInfo[_tokenId].tierRatio.length; i++) {\r\n            sum += gachaInfo[_tokenId].tierRatio[i];\r\n        }\r\n        return (gachaInfo[_tokenId].tierRatio, sum);\r\n    }\r\n\r\n    function getGachaGachaGradeRatio(uint256 _tokenId) public view returns (uint256[][] memory, uint256[] memory) {\r\n        uint256[] memory sum = new uint256[](gachaInfo[_tokenId].gachaGradeRatio.length);\r\n        for (uint256 i = 0; i < gachaInfo[_tokenId].gachaGradeRatio.length; i++) {\r\n            for (uint256 j = 0; j < gachaInfo[_tokenId].gachaGradeRatio[i].length; j++) {\r\n                sum[i] += gachaInfo[_tokenId].gachaGradeRatio[i][j];\r\n            }\r\n        }\r\n        return (gachaInfo[_tokenId].gachaGradeRatio, sum);\r\n    }\r\n\r\n    function getGachaFateCoreRatio(uint256 _tokenId) public view returns (uint256[] memory, uint256) {\r\n        uint256 sum = 0;\r\n        for (uint256 i = 0; i < fateCoreGachaInfo[_tokenId].gachaFateCoreRatio.length; i++) {\r\n            sum += fateCoreGachaInfo[_tokenId].gachaFateCoreRatio[i];\r\n        }\r\n        return (fateCoreGachaInfo[_tokenId].gachaFateCoreRatio, sum);\r\n    }\r\n\r\n    function getFateCoreByIndex(uint256 _tokenId, uint256 index) public view returns (uint256) {\r\n        return fateCoreGachaInfo[_tokenId].gachaFateCoreList[index];\r\n    }\r\n\r\n    function setGachaInfo(InputGachaInfo memory _inputGachaInfo) external onlyOwner {\r\n        require(_inputGachaInfo.tokenId != 0, \"gacha id not valid\");\r\n        if (GachaType.Character == _inputGachaInfo.gachaType) {\r\n            GachaInfo memory _gachaInfo = GachaInfo(_inputGachaInfo.tokenId, _inputGachaInfo.name, _inputGachaInfo.tierRatio, _inputGachaInfo.gachaGradeRatio, _inputGachaInfo.isValid);\r\n            uint256 sumTierRatio = 0;\r\n            for (uint256 i = 0; i < _gachaInfo.tierRatio.length; i++) {\r\n                sumTierRatio += _gachaInfo.tierRatio[i];\r\n            }\r\n            require(sumTierRatio != 0, \"gacha ratio sum 0\");\r\n            if (!gachaInfo[_gachaInfo.tokenId].isValid) {\r\n                gachaCount++;\r\n            }\r\n            for (uint256 i = 0; i < _gachaInfo.gachaGradeRatio.length; i++) {\r\n                if (_gachaInfo.tierRatio[i] != 0) {\r\n                    uint256 sumGachaGradeRatio = 0;\r\n                    for (uint256 j = 0; j < _gachaInfo.gachaGradeRatio[i].length; j++) {\r\n                        sumGachaGradeRatio += _gachaInfo.gachaGradeRatio[i][j];\r\n                    }\r\n                    require(sumGachaGradeRatio != 0, \"gacha gacha grade ratio sum 0\");\r\n                }\r\n            }\r\n            gachaTypeByTokenId[_gachaInfo.tokenId] = uint256(GachaType.Character);\r\n            gachaInfo[_gachaInfo.tokenId] = _gachaInfo;\r\n            emit SetGachaInfo(_gachaInfo.tokenId, _gachaInfo.name, _gachaInfo.tierRatio, _gachaInfo.gachaGradeRatio, _gachaInfo.isValid);\r\n        } else if (GachaType.FateCore == _inputGachaInfo.gachaType) {\r\n            FateCoreGachaInfo memory _fateCoreGachaInfo = FateCoreGachaInfo(_inputGachaInfo.tokenId, _inputGachaInfo.name, _inputGachaInfo.gachaFateCoreRatio, _inputGachaInfo.gachaFateCoreList, _inputGachaInfo.isValid);\r\n            uint256 sumRatio = 0;\r\n            for (uint256 i = 0; i < _fateCoreGachaInfo.gachaFateCoreRatio.length; i++) {\r\n                sumRatio += _fateCoreGachaInfo.gachaFateCoreRatio[i];\r\n            }\r\n            require(sumRatio != 0, \"gacha ratio sum 0\");\r\n            require(_fateCoreGachaInfo.gachaFateCoreRatio.length == _fateCoreGachaInfo.gachaFateCoreList.length, \"not same count\");\r\n            if (!fateCoreGachaInfo[_fateCoreGachaInfo.tokenId].isValid) {\r\n                gachaCount++;\r\n            }\r\n            gachaTypeByTokenId[_fateCoreGachaInfo.tokenId] = uint256(GachaType.FateCore);\r\n            fateCoreGachaInfo[_fateCoreGachaInfo.tokenId] = _fateCoreGachaInfo;\r\n            emit SetFateCoreGachaInfo(_fateCoreGachaInfo.tokenId, _fateCoreGachaInfo.name, _fateCoreGachaInfo.gachaFateCoreRatio, _fateCoreGachaInfo.gachaFateCoreList, _fateCoreGachaInfo.isValid);\r\n        }\r\n    }\r\n\r\n    function setGachaInfos(InputGachaInfo[] memory _inputGachaInfo) external onlyOwner {\r\n        for (uint256 k = 0; k < _inputGachaInfo.length; k++) {\r\n            require(_inputGachaInfo[k].tokenId != 0, \"gacha id not valid\");\r\n            if (GachaType.Character == _inputGachaInfo[k].gachaType) {\r\n                GachaInfo memory _gachaInfo = GachaInfo(_inputGachaInfo[k].tokenId, _inputGachaInfo[k].name, _inputGachaInfo[k].tierRatio, _inputGachaInfo[k].gachaGradeRatio, _inputGachaInfo[k].isValid);\r\n                uint256 sumTierRatio = 0;\r\n                for (uint256 i = 0; i < _gachaInfo.tierRatio.length; i++) {\r\n                    sumTierRatio += _gachaInfo.tierRatio[i];\r\n                }\r\n                require(sumTierRatio != 0, \"gacha ratio sum 0\");\r\n                if (!gachaInfo[_gachaInfo.tokenId].isValid) {\r\n                    gachaCount++;\r\n                }\r\n                for (uint256 i = 0; i < _gachaInfo.gachaGradeRatio.length; i++) {\r\n                    if (_gachaInfo.tierRatio[i] != 0) {\r\n                        uint256 sumGachaGradeRatio = 0;\r\n                        for (uint256 j = 0; j < _gachaInfo.gachaGradeRatio[i].length; j++) {\r\n                            sumGachaGradeRatio += _gachaInfo.gachaGradeRatio[i][j];\r\n                        }\r\n                        require(sumGachaGradeRatio != 0, \"gacha gacha grade ratio sum 0\");\r\n                    }\r\n                }\r\n                gachaTypeByTokenId[_gachaInfo.tokenId] = uint256(GachaType.Character);\r\n                gachaInfo[_gachaInfo.tokenId] = _gachaInfo;\r\n                emit SetGachaInfo(_gachaInfo.tokenId, _gachaInfo.name, _gachaInfo.tierRatio, _gachaInfo.gachaGradeRatio, _gachaInfo.isValid);\r\n            } else if (GachaType.FateCore == _inputGachaInfo[k].gachaType) {\r\n                FateCoreGachaInfo memory _fateCoreGachaInfo = FateCoreGachaInfo(_inputGachaInfo[k].tokenId, _inputGachaInfo[k].name, _inputGachaInfo[k].gachaFateCoreRatio, _inputGachaInfo[k].gachaFateCoreList, _inputGachaInfo[k].isValid);\r\n                uint256 sumRatio = 0;\r\n                for (uint256 i = 0; i < _fateCoreGachaInfo.gachaFateCoreRatio.length; i++) {\r\n                    sumRatio += _fateCoreGachaInfo.gachaFateCoreRatio[i];\r\n                }\r\n                require(sumRatio != 0, \"gacha ratio sum 0\");\r\n                require(_fateCoreGachaInfo.gachaFateCoreRatio.length == _fateCoreGachaInfo.gachaFateCoreList.length, \"not same count\");\r\n                if (!fateCoreGachaInfo[_fateCoreGachaInfo.tokenId].isValid) {\r\n                    gachaCount++;\r\n                }\r\n                gachaTypeByTokenId[_fateCoreGachaInfo.tokenId] = uint256(GachaType.FateCore);\r\n                fateCoreGachaInfo[_fateCoreGachaInfo.tokenId] = _fateCoreGachaInfo;\r\n                emit SetFateCoreGachaInfo(_fateCoreGachaInfo.tokenId, _fateCoreGachaInfo.name, _fateCoreGachaInfo.gachaFateCoreRatio, _fateCoreGachaInfo.gachaFateCoreList, _fateCoreGachaInfo.isValid);\r\n            }\r\n        }\r\n    }\r\n\r\n    function removeGachaInfo(uint256 _tokenId) external onlyOwner {\r\n        require(_tokenId != 0, \"gacha id not valid\");\r\n        if (gachaInfo[_tokenId].isValid) {\r\n            gachaCount--;\r\n        }\r\n        emit RemoveGachaInfo(_tokenId, gachaInfo[_tokenId].name, gachaInfo[_tokenId].tierRatio, gachaInfo[_tokenId].gachaGradeRatio, gachaInfo[_tokenId].isValid);\r\n        delete gachaInfo[_tokenId];\r\n    }\r\n\r\n    function removeFateCoreGachaInfo(uint256 _tokenId) external onlyOwner {\r\n        require(_tokenId != 0, \"gacha id not valid\");\r\n        if (fateCoreGachaInfo[_tokenId].isValid) {\r\n            gachaCount--;\r\n        }\r\n        emit RemoveFateCoreGachaInfo(_tokenId, fateCoreGachaInfo[_tokenId].name, fateCoreGachaInfo[_tokenId].gachaFateCoreRatio, fateCoreGachaInfo[_tokenId].gachaFateCoreList, fateCoreGachaInfo[_tokenId].isValid);\r\n        delete fateCoreGachaInfo[_tokenId];\r\n    }\r\n}\r\n// File: contracts/Admin/data/DataAddress.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\ncontract DspDataAddress is Ownable {\r\n\r\n    event SetDataAddress(string indexed name, address indexed dataAddress, bool indexed isValid);\r\n\r\n    struct DataAddressInfo {\r\n        string name;\r\n        address dataAddress;\r\n        bool isValid;\r\n    }\r\n\r\n    mapping(string => DataAddressInfo) private dataAddresses;\r\n\r\n    function getDataAddress(string memory _name) public view returns (address) {\r\n        require(dataAddresses[_name].isValid, \"this data address is not valid\");\r\n        return dataAddresses[_name].dataAddress;\r\n    }\r\n\r\n    function setDataAddress(DataAddressInfo memory _dataAddressInfo) external onlyOwner {\r\n        dataAddresses[_dataAddressInfo.name] = _dataAddressInfo;\r\n        emit SetDataAddress(_dataAddressInfo.name, _dataAddressInfo.dataAddress, _dataAddressInfo.isValid);\r\n    }\r\n\r\n    function setDataAddresses(DataAddressInfo[] memory _dataAddressInfos) external onlyOwner {\r\n        for (uint256 i = 0; i < _dataAddressInfos.length; i++) {\r\n            dataAddresses[_dataAddressInfos[i].name] = _dataAddressInfos[i];\r\n            emit SetDataAddress(_dataAddressInfos[i].name, _dataAddressInfos[i].dataAddress, _dataAddressInfos[i].isValid);\r\n        }\r\n    }\r\n}\r\n// File: contracts/LUXON/utils/LuxOnData.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\n\r\ncontract LuxOnData is Ownable {\r\n    address private luxonData;\r\n    event SetLuxonData(address indexed luxonData);\r\n\r\n    constructor(\r\n        address _luxonData\r\n    ) {\r\n        luxonData = _luxonData;\r\n    }\r\n\r\n    function getLuxOnData() public view returns (address) {\r\n        return luxonData;\r\n    }\r\n\r\n    function setLuxOnData(address _luxonData) external onlyOwner {\r\n        luxonData = _luxonData;\r\n        emit SetLuxonData(_luxonData);\r\n    }\r\n\r\n    function getDataAddress(string memory _name) public view returns (address) {\r\n        return DspDataAddress(luxonData).getDataAddress(_name);\r\n    }\r\n}\r\n// File: contracts/Admin/data/ValueChipData.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\ncontract DspValueChipData is Ownable {\r\n    event SetValueChipInfo(uint256 indexed tokenId, string indexed name, uint256 indexed valueChipsType, string characterName, uint256 gameEnumByValueChipsType);\r\n    event RemoveValueChipInfo(uint256 indexed tokenId);\r\n\r\n    enum ValueChipsType { None, Hero, Class, Nation, Element }\r\n    uint256 private valueChipCount;\r\n\r\n    struct InputValueChipInfo {\r\n        uint256 tokenId;\r\n        string name;\r\n        ValueChipsType valueChipsType;\r\n        string characterName;\r\n        uint256 gameEnumByValueChipsType;\r\n        bool isValid;\r\n    }\r\n\r\n    struct ValueChipInfo {\r\n        string name;\r\n        ValueChipsType valueChipsType;\r\n        string characterName;\r\n        uint256 gameEnumByValueChipsType;\r\n        bool isValid;\r\n    }\r\n\r\n    // tokenId => ValueChipInfo\r\n    mapping(uint256 => ValueChipInfo) private valueChipInfo;\r\n    uint256[] private valueChipTokenIdList;\r\n\r\n    function getValueChipCount() public view returns (uint256) {\r\n        return valueChipCount;\r\n    }\r\n\r\n    function getValueChipInfo(uint256 _tokenId) public view returns (string memory, uint32, string memory, uint256, bool) {\r\n        return (\r\n        valueChipInfo[_tokenId].name,\r\n        uint32(valueChipInfo[_tokenId].valueChipsType),\r\n        valueChipInfo[_tokenId].characterName,\r\n        valueChipInfo[_tokenId].gameEnumByValueChipsType,\r\n        valueChipInfo[_tokenId].isValid\r\n        );\r\n    }\r\n\r\n    function getValueChipsIsValid(uint256 _tokenId) public view returns (bool) {\r\n        return valueChipInfo[_tokenId].isValid;\r\n    }\r\n\r\n    function getValueChipValueChipsType(uint256 _tokenId) public view returns (uint32) {\r\n        return uint32(valueChipInfo[_tokenId].valueChipsType);\r\n    }\r\n\r\n    function getValueChipTokenIdList() public view returns (uint256[] memory) {\r\n        return valueChipTokenIdList;\r\n    }\r\n\r\n    function setValueChipInfo(InputValueChipInfo memory _valueChipInfo) external onlyOwner {\r\n        require(_valueChipInfo.tokenId != 0, \"value chip id not valid\");\r\n        require(_valueChipInfo.isValid, \"value chip not valid\");\r\n        if (!valueChipInfo[_valueChipInfo.tokenId].isValid) {\r\n            valueChipCount++;\r\n        }\r\n        valueChipInfo[_valueChipInfo.tokenId] =\r\n        ValueChipInfo(\r\n            _valueChipInfo.name,\r\n            _valueChipInfo.valueChipsType,\r\n            _valueChipInfo.characterName,\r\n            _valueChipInfo.gameEnumByValueChipsType,\r\n            _valueChipInfo.isValid\r\n        );\r\n        emit SetValueChipInfo(_valueChipInfo.tokenId, _valueChipInfo.name, uint256(_valueChipInfo.valueChipsType), _valueChipInfo.characterName, _valueChipInfo.gameEnumByValueChipsType);\r\n    }\r\n\r\n    function setValueChipInfos(InputValueChipInfo[] memory _valueChipInfos) external onlyOwner {\r\n        for (uint256 i = 0; i < _valueChipInfos.length; i++) {\r\n            require(_valueChipInfos[i].tokenId != 0, \"value chip id not valid\");\r\n            require(_valueChipInfos[i].isValid, \"value chip not valid\");\r\n            if (!valueChipInfo[_valueChipInfos[i].tokenId].isValid) {\r\n                valueChipCount++;\r\n                valueChipTokenIdList.push(_valueChipInfos[i].tokenId);\r\n            }\r\n            valueChipInfo[_valueChipInfos[i].tokenId] =\r\n            ValueChipInfo(\r\n                _valueChipInfos[i].name,\r\n                _valueChipInfos[i].valueChipsType,\r\n                _valueChipInfos[i].characterName,\r\n                _valueChipInfos[i].gameEnumByValueChipsType,\r\n                _valueChipInfos[i].isValid\r\n            );\r\n            emit SetValueChipInfo(_valueChipInfos[i].tokenId, _valueChipInfos[i].name, uint256(_valueChipInfos[i].valueChipsType), _valueChipInfos[i].characterName, _valueChipInfos[i].gameEnumByValueChipsType);\r\n        }\r\n    }\r\n\r\n    function removeValueChipInfo(uint256 _tokenId) external onlyOwner {\r\n        require(_tokenId != 0, \"gacha ticket id not valid\");\r\n        if (valueChipInfo[_tokenId].isValid) {\r\n            valueChipCount--;\r\n            uint256 index;\r\n            for (uint256 i = 0; i < valueChipTokenIdList.length; i++) {\r\n                if (valueChipTokenIdList[i] == _tokenId) {\r\n                    index = i;\r\n                }\r\n            }\r\n            for (uint256 i = index; i < valueChipTokenIdList.length - 1; i++) {\r\n                valueChipTokenIdList[i] = valueChipTokenIdList[i + 1];\r\n            }\r\n            valueChipTokenIdList.pop();\r\n        }\r\n        emit RemoveValueChipInfo(_tokenId);\r\n        delete valueChipInfo[_tokenId];\r\n    }\r\n}\r\n// File: contracts/Admin/data/CharacterData.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\n\r\n\r\ncontract DspCharacterData is Ownable, LuxOnData {\r\n    event SetCharacterData(string indexed name, uint256 indexed tier, uint256 indexed gachaGrade, uint256 classType, uint256 nation, uint256 element, bool isValid);\r\n    event DeleteCharacterData(string indexed name, uint256 indexed tier, uint256 indexed gachaGrade, uint256 classType, uint256 nation, uint256 element, bool isValid);\r\n    event SetCharacterName(uint256 indexed id, string indexed name);\r\n\r\n    struct CharacterInfo {\r\n        string name;\r\n        uint256 tier;\r\n        uint256 gachaGrade;\r\n        uint256 classType;\r\n        uint256 nation;\r\n        uint256 element;\r\n        uint256 rootId;\r\n        bool isValid;\r\n    }\r\n\r\n    struct CharacterName {\r\n        uint256 id;\r\n        string name;\r\n    }\r\n\r\n    struct MatchValueChip {\r\n        string name;\r\n        uint256 valueChipId;\r\n    }\r\n\r\n    constructor(address dataAddress) LuxOnData(dataAddress) {}\r\n\r\n    string public valueChipData = \"DspValueChipData\";\r\n\r\n    // character id => name\r\n    mapping(uint256 => string) private characterName;\r\n    // name => character info\r\n    mapping(string => CharacterInfo) private characterData;\r\n    // tier => gacha grade => name[]\r\n    mapping(uint256 => mapping(uint256 => string[])) private characterInfoTable;\r\n    // name => value chip\r\n    mapping(string => uint256) private matchValueChip;\r\n\r\n    uint256 private characterCount;\r\n\r\n    function getCharacterInfo(string memory name) public view returns(uint256, uint256, uint256, uint256, uint256, uint256, bool) {\r\n        return (characterData[name].tier, characterData[name].gachaGrade, characterData[name].classType, characterData[name].nation, characterData[name].element, characterData[name].rootId, characterData[name].isValid);\r\n    }\r\n\r\n    function getCharacterInfoIsValid(string memory name) public view returns(bool) {\r\n        return characterData[name].isValid;\r\n    }\r\n\r\n    function getCharacterName(uint256 id) public view returns (string memory) {\r\n        return characterName[id];\r\n    }\r\n\r\n    function setMatchValueChip(MatchValueChip[] memory _matchValueChips) external onlyOwner {\r\n        address valueChipAddress = getDataAddress(valueChipData);\r\n        for (uint256 i = 0; i < _matchValueChips.length; i++) {\r\n            ( , uint32 _valueChipsType, string memory _characterName, , bool _isValid) = DspValueChipData(valueChipAddress).getValueChipInfo(_matchValueChips[i].valueChipId);\r\n            if (\r\n                _isValid &&\r\n                _valueChipsType == uint32(DspValueChipData.ValueChipsType.Hero) &&\r\n                uint(keccak256(abi.encodePacked(_characterName))) == uint(keccak256(abi.encodePacked(_matchValueChips[i].name)))\r\n            ) {\r\n                matchValueChip[_matchValueChips[i].name] = _matchValueChips[i].valueChipId;\r\n            }\r\n        }\r\n    }\r\n\r\n    function setCharacterName(CharacterName[] memory _characterName) external onlyOwner {\r\n        for (uint256 i = 0; i < _characterName.length; i++) {\r\n            characterName[_characterName[i].id] = _characterName[i].name;\r\n            emit SetCharacterName(_characterName[i].id, _characterName[i].name);\r\n        }\r\n    }\r\n\r\n    function setCharacterData(CharacterInfo[] memory _characterData) external onlyOwner {\r\n        for (uint256 i = 0; i < _characterData.length; i++) {\r\n            require(_characterData[i].isValid, \"isValid false use delete\");\r\n            if (!characterData[_characterData[i].name].isValid) {\r\n                characterCount++;\r\n            } else if (characterData[_characterData[i].name].tier != _characterData[i].tier) {\r\n                uint256 index;\r\n                uint256 _tier = characterData[_characterData[i].name].tier;\r\n                uint256 _gachaGrade = characterData[_characterData[i].name].gachaGrade;\r\n                for (uint256 j = 0; j < characterInfoTable[_tier][_gachaGrade].length; j++) {\r\n                    if (keccak256(abi.encodePacked(characterInfoTable[_tier][_gachaGrade][j])) == keccak256(abi.encodePacked(_characterData[i].name))) {\r\n                        index = j;\r\n                        break;\r\n                    }\r\n                }\r\n                for (uint256 j = index; j < characterInfoTable[_tier][_gachaGrade].length - 1; j++) {\r\n                    characterInfoTable[_tier][_gachaGrade][j] = characterInfoTable[_tier][_gachaGrade][j + 1];\r\n                }\r\n                characterInfoTable[_tier][_gachaGrade].pop();\r\n            }\r\n            characterInfoTable[_characterData[i].tier][_characterData[i].gachaGrade].push(_characterData[i].name);\r\n            characterData[_characterData[i].name] = _characterData[i];\r\n\r\n            emit SetCharacterData(_characterData[i].name, _characterData[i].tier, _characterData[i].gachaGrade, _characterData[i].classType, _characterData[i].nation, _characterData[i].element, _characterData[i].isValid);\r\n        }\r\n    }\r\n\r\n    function deleteCharacterData(string[] memory names) external onlyOwner {\r\n        for (uint256 i = 0; i < names.length; i++) {\r\n            uint256 _tier = characterData[names[i]].tier;\r\n            uint256 _gachaGrade = characterData[names[i]].gachaGrade;\r\n\r\n            uint256 index;\r\n            for (uint256 j = 0; j < characterInfoTable[_tier][_gachaGrade].length; j++) {\r\n                if (keccak256(abi.encodePacked(characterInfoTable[_tier][_gachaGrade][j])) == keccak256(abi.encodePacked(characterData[names[i]].name))) {\r\n                    index = j;\r\n                    break;\r\n                }\r\n            }\r\n            for (uint256 j = index; j < characterInfoTable[_tier][_gachaGrade].length - 1; j++) {\r\n                characterInfoTable[_tier][_gachaGrade][j] = characterInfoTable[_tier][_gachaGrade][j + 1];\r\n            }\r\n            characterInfoTable[_tier][_gachaGrade].pop();\r\n            characterCount--;\r\n\r\n            emit DeleteCharacterData(characterData[names[i]].name, characterData[names[i]].tier, characterData[names[i]].gachaGrade, characterData[names[i]].classType, characterData[names[i]].nation, characterData[names[i]].element, characterData[names[i]].isValid);\r\n            delete characterData[names[i]];\r\n        }\r\n    }\r\n\r\n    function getMatchValueChip(string memory _name) public view returns (uint256) {\r\n        return matchValueChip[_name];\r\n    }\r\n\r\n    function getCharacterCount() public view returns (uint256) {\r\n        return characterCount;\r\n    }\r\n\r\n    function getCharacterCountByTireAndGachaGrade(uint256 _tier, uint256 _gachaGrade) public view returns (uint256) {\r\n        return characterInfoTable[_tier][_gachaGrade].length;\r\n    }\r\n\r\n    function getCharacterInfoByTireAndIndex(uint256 _tier, uint256 _gachaGrade, uint index) public view returns (string memory) {\r\n        return characterInfoTable[_tier][_gachaGrade][index];\r\n    }\r\n}\r\n// File: contracts/Admin/GachaMachineV5.sol\r\n\r\n\r\npragma solidity ^0.8.18;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract GachaMachine is LuxOnData {\r\n    event SetCharacterTokenAddress(address indexed characterTokenAddress);\r\n    event GachaActor(address indexed userAddrss, uint256 indexed gachaTokenId, uint256 indexed actorTokenId, string name);\r\n\r\n    address private characterTokenAddress;\r\n    address private randomSeedAddress;\r\n    string public gachaData = \"DspGachaData\";\r\n    string public characterData = \"DspCharacterData\";\r\n    string public fateCoreData = \"DspFateCoreData\";\r\n    string public actorData = \"DspActorData\";\r\n\r\n    constructor(\r\n        address dataAddress,\r\n        address _characterTokenAddress,\r\n        address _randomSeedAddress\r\n    ) LuxOnData(dataAddress) {\r\n        characterTokenAddress = _characterTokenAddress;\r\n        randomSeedAddress = _randomSeedAddress;\r\n    }\r\n\r\n    struct Gacha {\r\n        uint256 gachaTokenId;\r\n        RandomSeed[] randomSeed;\r\n    }\r\n\r\n    struct RandomSeed {\r\n        address userAddress;\r\n        uint256 actorTokenId;\r\n        uint256 requestId;\r\n    }\r\n\r\n    struct GachaSimulator {\r\n        uint256 gachaTokenId;\r\n        bytes32[] seed;\r\n    }\r\n\r\n    function getCharacterTokenAddress() public view returns (address) {\r\n        return characterTokenAddress;\r\n    }\r\n\r\n    function setCharacterTokenAddress(address _characterTokenAddress) external onlyOwner {\r\n        characterTokenAddress = _characterTokenAddress;\r\n        emit SetCharacterTokenAddress(_characterTokenAddress);\r\n    }\r\n\r\n    function gachaActor(Gacha[] memory _gachas) external onlyOwner {\r\n        address gachaDataAddress = getDataAddress(gachaData);\r\n        for (uint256 i = 0; i < _gachas.length; i++) {\r\n            Gacha memory _gacha = _gachas[i];\r\n            uint256 gachaType = DspGachaData(gachaDataAddress).getGachaType(_gacha.gachaTokenId);\r\n            ILuxOnCharacter.Character[] memory _character = new ILuxOnCharacter.Character[](_gacha.randomSeed.length);\r\n            uint256 count = 0;\r\n            address characterDataAddress = getDataAddress(characterData);\r\n            if (uint256(GachaType.Character) == gachaType) {\r\n                (uint256[] memory _tierRatio, uint256 _tierRatioSum) = DspGachaData(gachaDataAddress).getGachaTierRatio(_gacha.gachaTokenId);\r\n                (uint256[][] memory _gachaGradeRatio, uint256[] memory _gachaGradeRatioSum) = DspGachaData(gachaDataAddress).getGachaGachaGradeRatio(_gacha.gachaTokenId);\r\n                for (uint256 j = 0; j < _gacha.randomSeed.length; j++) {\r\n                    if (uint(keccak256(abi.encodePacked(ILuxOnCharacter(characterTokenAddress).getCharacterInfo(_gacha.randomSeed[j].actorTokenId)))) != uint(keccak256(abi.encodePacked(\"\")))) {\r\n                        continue;\r\n                    }\r\n                    uint256 seed_ = RandomSeedNumber(randomSeedAddress).getRandomNumber(_gacha.randomSeed[j].requestId);\r\n                    uint256 _tier = randomNumber(\r\n                        bytes32(seed_),\r\n                        _gacha.randomSeed[j].actorTokenId,\r\n                        _tierRatio,\r\n                        _tierRatioSum,\r\n                        \"tier\"\r\n                    );\r\n                    uint256 _gachaGrade = randomNumber(\r\n                        bytes32(seed_),\r\n                        _gacha.randomSeed[j].actorTokenId,\r\n                        _gachaGradeRatio[_tier],\r\n                        _gachaGradeRatioSum[_tier],\r\n                        \"gacha_grade\"\r\n                    );\r\n\r\n                    uint index = uint(keccak256(abi.encodePacked(seed_, _gacha.randomSeed[j].actorTokenId, \"index\"))) %\r\n                    DspCharacterData(characterDataAddress).getCharacterCountByTireAndGachaGrade(_tier + 1, _gachaGrade + 1);\r\n                    _character[count] = ILuxOnCharacter.Character(\r\n                        _gacha.randomSeed[j].actorTokenId,\r\n                        DspCharacterData(characterDataAddress).getCharacterInfoByTireAndIndex(_tier + 1, _gachaGrade + 1, index)\r\n                    );\r\n                    emit GachaActor(_gacha.randomSeed[j].userAddress, _gacha.gachaTokenId, _gacha.randomSeed[j].actorTokenId, _character[count].name);\r\n                    count++;\r\n                }\r\n            } else if (uint256(GachaType.FateCore) == gachaType) {\r\n                address fateCoreDataAddress = getDataAddress(fateCoreData);\r\n                address actorDataAddress = getDataAddress(actorData);\r\n                (uint256[] memory _ratio, uint256 _ratioSum) = DspGachaData(gachaDataAddress).getGachaFateCoreRatio(_gacha.gachaTokenId);\r\n                for (uint256 j = 0; j < _gacha.randomSeed.length; j++) {\r\n                    if (uint(keccak256(abi.encodePacked(ILuxOnCharacter(characterTokenAddress).getCharacterInfo(_gacha.randomSeed[j].actorTokenId)))) != uint(keccak256(abi.encodePacked(\"\")))) {\r\n                        continue;\r\n                    }\r\n                    uint256 seed_ = RandomSeedNumber(randomSeedAddress).getRandomNumber(_gacha.randomSeed[j].requestId);\r\n                    uint256 index = randomNumber(bytes32(seed_), _gacha.randomSeed[j].actorTokenId, _ratio,_ratioSum, \"fateCore\");\r\n                    uint256 actorId = DspGachaData(gachaDataAddress).getFateCoreByIndex(_gacha.gachaTokenId, index);\r\n                    string memory name = getName(actorDataAddress, characterDataAddress, fateCoreDataAddress, actorId);\r\n                    _character[count] = ILuxOnCharacter.Character(_gacha.randomSeed[j].actorTokenId, name);\r\n                    emit GachaActor(_gacha.randomSeed[j].userAddress, _gacha.gachaTokenId, _gacha.randomSeed[j].actorTokenId,  _character[count].name);\r\n                    count++;\r\n                }\r\n            }\r\n            ILuxOnCharacter.Character[] memory character_ = new ILuxOnCharacter.Character[](count);\r\n            for (uint256 j = 0; j < count; j++) {\r\n                character_[j] = _character[j];\r\n            }\r\n            ILuxOnCharacter(characterTokenAddress).setCharacterName(character_);\r\n        }\r\n    }\r\n\r\n    function getName(address actorDataAddress, address characterDataAddress, address fateCoreDataAddress, uint256 actorId) private view returns (string memory) {\r\n        uint256 actorType = DspActorData(actorDataAddress).getGachaTypeById(actorId);\r\n        if (uint256(GachaType.Character) == actorType) {\r\n            return DspCharacterData(characterDataAddress).getCharacterName(actorId);\r\n        } else if (uint256(GachaType.FateCore) == actorType) {\r\n            return DspFateCoreData(fateCoreDataAddress).getFateCoreName(actorId);\r\n        }\r\n        revert(\"not exist actor name\");\r\n    }\r\n\r\n    function gachaActorSimulator(GachaSimulator memory _gacha) public view returns (string[] memory) {\r\n        address gachaDataAddress = getDataAddress(gachaData);\r\n        address characterDataAddress = getDataAddress(characterData);\r\n        address fateCoreDataAddress = getDataAddress(fateCoreData);\r\n        address actorDataAddress = getDataAddress(actorData);\r\n        uint256 gachaType = DspGachaData(gachaDataAddress).getGachaType(_gacha.gachaTokenId);\r\n        string[] memory _characterName = new string[](_gacha.seed.length);\r\n        if (uint256(GachaType.Character) == gachaType) {\r\n            (uint256[] memory _tierRatio, uint256 _tierRatioSum) = DspGachaData(gachaDataAddress).getGachaTierRatio(_gacha.gachaTokenId);\r\n            (uint256[][] memory _gachaGradeRatio, uint256[] memory _gachaGradeRatioSum) = DspGachaData(gachaDataAddress).getGachaGachaGradeRatio(_gacha.gachaTokenId);\r\n            for (uint256 j = 0; j < _gacha.seed.length; j++) {\r\n                bytes32 seed = _gacha.seed[j];\r\n                uint256 _tier = randomNumber(seed, j, _tierRatio, _tierRatioSum, \"tier\");\r\n                uint256 _gachaGrade = randomNumber(seed, j, _gachaGradeRatio[_tier], _gachaGradeRatioSum[_tier], \"gacha_grade\");\r\n                uint256 characterCount = DspCharacterData(characterDataAddress).getCharacterCountByTireAndGachaGrade(_tier + 1, _gachaGrade + 1);\r\n                uint256 index = uint(keccak256(abi.encodePacked(seed, j, \"index\"))) % characterCount;\r\n                string memory name = DspCharacterData(characterDataAddress).getCharacterInfoByTireAndIndex(_tier + 1, _gachaGrade + 1, index);\r\n                _characterName[j] = name;\r\n            }\r\n        } else if (uint256(GachaType.FateCore) == gachaType) {\r\n            (uint256[] memory _ratio, uint256 _ratioSum) = DspGachaData(gachaDataAddress).getGachaFateCoreRatio(_gacha.gachaTokenId);\r\n            for (uint256 j = 0; j < _gacha.seed.length; j++) {\r\n                bytes32 seed = _gacha.seed[j];\r\n                uint256 index = randomNumber(seed, j, _ratio, _ratioSum, \"fateCore\");\r\n                uint256 actorId = DspGachaData(gachaDataAddress).getFateCoreByIndex(_gacha.gachaTokenId, index);\r\n                _characterName[j] = getName(actorDataAddress, characterDataAddress, fateCoreDataAddress, actorId);\r\n            }\r\n        }\r\n        return _characterName;\r\n    }\r\n\r\n    function randomNumber(bytes32 _seed, uint256 _tokenId, uint256[] memory _ratio, uint256 _ratioSum, string memory _type) private pure returns (uint256 index) {\r\n        uint ratio = (uint(keccak256(abi.encodePacked(_seed, _tokenId, _type))) % _ratioSum) + 1;\r\n        index = 0;\r\n        uint ratioSum = 0;\r\n        for (uint256 i = 0; i < _ratio.length; i++) {\r\n            ratioSum += _ratio[i];\r\n            if (ratio <= ratioSum) {\r\n                break;\r\n            }\r\n            index++;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dataAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_characterTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_randomSeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddrss\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gachaTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"actorTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"GachaActor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"characterTokenAddress\",\"type\":\"address\"}],\"name\":\"SetCharacterTokenAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"luxonData\",\"type\":\"address\"}],\"name\":\"SetLuxonData\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"actorData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"characterData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fateCoreData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gachaTokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actorTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"internalType\":\"struct GachaMachine.RandomSeed[]\",\"name\":\"randomSeed\",\"type\":\"tuple[]\"}],\"internalType\":\"struct GachaMachine.Gacha[]\",\"name\":\"_gachas\",\"type\":\"tuple[]\"}],\"name\":\"gachaActor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gachaTokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"seed\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct GachaMachine.GachaSimulator\",\"name\":\"_gacha\",\"type\":\"tuple\"}],\"name\":\"gachaActorSimulator\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gachaData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCharacterTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getDataAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLuxOnData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_characterTokenAddress\",\"type\":\"address\"}],\"name\":\"setCharacterTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_luxonData\",\"type\":\"address\"}],\"name\":\"setLuxOnData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GachaMachine", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000047e02786b3aefe45f4db89d296b5b9c5d7ed6c53000000000000000000000000241e78d45c0a7c263bf9d230a229f0bafb42cda3000000000000000000000000b75b14f5bb549ae951202cb4f93c6a968897fe08", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fad48a29b944ae04f00660bd4cdfc008121fca5d27bb09be46639f4e2f27d760"}