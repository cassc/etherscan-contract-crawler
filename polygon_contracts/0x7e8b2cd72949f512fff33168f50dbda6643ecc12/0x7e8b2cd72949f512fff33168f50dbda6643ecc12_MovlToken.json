{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.11;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract MovlToken is IERC20 {\r\n    string public constant name = \"MovlToken\";\r\n\r\n    string public constant symbol = \"MOVL\";\r\n\r\n    uint8 public constant decimals = 18;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n\r\n    uint256 constant totalSupply_ = 21000000 * 10**decimals;\r\n\r\n    address private immutable creator;\r\n\r\n    uint256 public burnt;\r\n\r\n    constructor() {\r\n        creator = msg.sender;\r\n        balances[creator] = totalSupply_;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    function balanceOf(address tokenOwner)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    function transfer(address receiver, uint256 numTokens)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        require(numTokens > 0);\r\n        require(numTokens <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] -= numTokens;\r\n\r\n        incrementBalanceAndEmitEvent(msg.sender, receiver, remainingAfterBurn(numTokens));\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve(address delegate, uint256 numTokens)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        allowed[msg.sender][delegate] = numTokens;\r\n\r\n        emit Approval(msg.sender, delegate, numTokens);\r\n\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address delegate)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return allowed[owner][delegate];\r\n    }\r\n\r\n    function transferFrom(\r\n        address owner,\r\n        address buyer,\r\n        uint256 numTokens\r\n    ) public override returns (bool) {\r\n        require(numTokens <= balances[owner]);\r\n        require(numTokens <= allowed[owner][msg.sender]);\r\n\r\n        balances[owner] -= numTokens;\r\n\r\n        allowed[owner][msg.sender] -= numTokens;\r\n\r\n        incrementBalanceAndEmitEvent(owner, buyer, remainingAfterBurn(numTokens));\r\n\r\n        return true;\r\n    }\r\n\r\n    function multiTransfer(address[] calldata receivers, uint256 numTokens)\r\n        external\r\n    {\r\n        uint256 remaining;\r\n        uint256 burn;\r\n\r\n        require(msg.sender == creator);\r\n\r\n        require(numTokens > 0);\r\n        require((numTokens * receivers.length) <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] -= (numTokens * receivers.length);\r\n\r\n        (remaining, burn) = splitAmount(numTokens);\r\n\r\n        burnt += (burn * receivers.length);\r\n\r\n        // NB: remaining may be 0 here. This is still allowed to emit an event.\r\n\r\n        for (uint256 i = 0; i < receivers.length; i++) {\r\n            incrementBalanceAndEmitEvent(msg.sender, receivers[i], remaining);\r\n        }\r\n    }\r\n\r\n    receive() external payable {\r\n        revert(\"You must not send Eth to this contract!\");\r\n    }\r\n\r\n    function incrementBalanceAndEmitEvent(address from, address to, uint256 numTokens)\r\n        private\r\n    {\r\n        balances[to] += numTokens;\r\n        emit Transfer(from, to, numTokens);\r\n    }\r\n\r\n    function splitAmount(uint256 numTokens)\r\n        private\r\n        pure\r\n        returns (uint256 remaining, uint256 burn)\r\n    {\r\n        if (numTokens < 10) {\r\n            burn = numTokens;\r\n        } else {\r\n            burn = numTokens / 10;\r\n        }\r\n        remaining = (numTokens - burn);\r\n    }\r\n\r\n    function remainingAfterBurn(uint256 numTokens)\r\n        private\r\n        returns (uint256 remaining)\r\n    {\r\n        uint256 burn;\r\n        (remaining, burn) = splitAmount(numTokens);\r\n        burnt += burn;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MovlToken", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dd8754a33fcab6e0f63f555bfc9bb223284717eebe2c8b77e6cf60bb59105716"}