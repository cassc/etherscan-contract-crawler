{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/helpers/Harvester.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-v3\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IBentoBoxMinimal.sol\\\";\\n\\npragma solidity 0.8.7;\\n\\ninterface ISafeStrategy {\\n\\tfunction safeHarvest(\\n\\t\\tuint256 maxBalance,\\n\\t\\tbool rebalance,\\n\\t\\tuint256 maxChangeAmount,\\n\\t\\tbool harvestRewards\\n\\t) external;\\n\\n    function swapExactTokens(address tokenIn, uint256 amountOutMin) external;\\n    function strategyToken() external view returns(address);\\n}\\n\\n// \ud83d\ude9c\ud83d\ude9c\ud83d\ude9c\\ncontract CombineHarvester is Ownable {\\n\\n    IBentoBoxMinimal immutable public bentoBox;\\n\\n    struct ExecuteDataManual {\\n        ISafeStrategy strategy;\\n        uint256 maxBalance;\\n        uint256 maxChangeAmount; // can be set to 0 to allow for full withdrawals / deposits from / to strategy\\n        address swapToken;\\n        uint256 minOutAmount;\\n        bool rebalance;\\n        bool harvestReward;\\n    }\\n\\n    struct ExecuteData {\\n        ISafeStrategy strategy;\\n        uint256 maxChangeAmount; // can be set to 0 to allow for full withdrawals / deposits from / to strategy\\n        address swapToken;\\n        uint256 minOutAmount;\\n        bool harvestReward;\\n    }\\n\\n    constructor(address _bentoBox) {\\n        bentoBox = IBentoBoxMinimal(_bentoBox);\\n    }\\n\\n    function executeSafeHarvestsManual(ExecuteDataManual[] calldata datas) external onlyOwner {\\n        \\n        uint256 n = datas.length;\\n        \\n        for (uint256 i = 0; i < n; i = increment(i)) {\\n\\n            ExecuteDataManual memory data = datas[i];\\n\\n            data.strategy.safeHarvest(data.maxBalance, data.rebalance, data.maxChangeAmount, data.harvestReward);\\n\\n            if (data.swapToken != address(0)) {\\n                data.strategy.swapExactTokens(data.swapToken, data.minOutAmount);\\n            }\\n        }\\n    }\\n\\n    function executeSafeHarvests(ExecuteData[] calldata datas) external onlyOwner {\\n\\n        uint256 n = datas.length;\\n\\n        for (uint256 i = 0; i < n; i = increment(i)) {\\n\\n            ExecuteData memory data = datas[i];\\n\\n            data.strategy.safeHarvest(0, _rebalanceNecessairy(data.strategy), data.maxChangeAmount, data.harvestReward);\\n\\n            if (data.swapToken != address(0)) {\\n                data.strategy.swapExactTokens(data.swapToken, data.minOutAmount);\\n            }\\n        }\\n    }\\n\\n    // returns true if strategy balance differs more than -+1% from the strategy target balance\\n    function _rebalanceNecessairy(ISafeStrategy strategy) public view returns (bool) {\\n\\n        address token = strategy.strategyToken();\\n\\n        IBentoBoxMinimal.StrategyData memory data = bentoBox.strategyData(token);\\n\\n        uint256 targetStrategyBalance = bentoBox.totals(token).elastic * data.targetPercentage / 100; // targetPercentage \u2208 [0, 100]\\n\\n        if (data.balance == 0) return targetStrategyBalance != 0;\\n\\n        uint256 ratio = targetStrategyBalance * 100 / data.balance;\\n\\n        return ratio >= 101 || ratio <= 99;\\n    }\\n\\n    function increment(uint256 i) internal pure returns(uint256) {\\n        unchecked {\\n            return i + 1;\\n        }\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBentoBoxMinimal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.7;\\n\\n/// @notice Minimal interface for BentoBox token vault interactions - `token` is aliased as `address` from `IERC20` for code simplicity.\\ninterface IBentoBoxMinimal {\\n\\n    struct Rebase {\\n        uint128 elastic;\\n        uint128 base;\\n    }\\n\\n    struct StrategyData {\\n        uint64 strategyStartDate;\\n        uint64 targetPercentage;\\n        uint128 balance; // the balance of the strategy that BentoBox thinks is in there\\n    }\\n\\n    function strategyData(address token) external view returns (StrategyData memory);\\n\\n    /// @notice Balance per ERC-20 token per account in shares.\\n    function balanceOf(address, address) external view returns (uint256);\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount repesented in shares.\\n    function deposit(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    function transfer(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) external;\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        address token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n\\n    /// @dev Helper function to represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        address token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n\\n    /// @notice Registers this contract so that users can approve it for the BentoBox.\\n    function registerProtocol() external;\\n\\n    function totals(address token) external view returns (Rebase memory);\\n\\n    function harvest(\\n        address token,\\n        bool balance,\\n        uint256 maxChangeAmount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 99999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bentoBox\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract ISafeStrategy\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"_rebalanceNecessairy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bentoBox\",\"outputs\":[{\"internalType\":\"contract IBentoBoxMinimal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract ISafeStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxChangeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minOutAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"harvestReward\",\"type\":\"bool\"}],\"internalType\":\"struct CombineHarvester.ExecuteData[]\",\"name\":\"datas\",\"type\":\"tuple[]\"}],\"name\":\"executeSafeHarvests\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract ISafeStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxChangeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minOutAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"rebalance\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"harvestReward\",\"type\":\"bool\"}],\"internalType\":\"struct CombineHarvester.ExecuteDataManual[]\",\"name\":\"datas\",\"type\":\"tuple[]\"}],\"name\":\"executeSafeHarvestsManual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CombineHarvester", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "99999", "ConstructorArguments": "0000000000000000000000000319000133d3ada02600f0875d2cf03d442c3367", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}