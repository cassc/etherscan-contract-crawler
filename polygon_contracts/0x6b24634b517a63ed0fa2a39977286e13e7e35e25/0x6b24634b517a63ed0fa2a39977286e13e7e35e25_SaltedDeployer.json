{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"brink-core/Deployers/SaltedDeployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity =0.8.10;\\npragma abicoder v1;\\n\\n/**\\n *    ,,                           ,,                                \\n *   *MM                           db                      `7MM      \\n *    MM                                                     MM      \\n *    MM,dMMb.      `7Mb,od8     `7MM      `7MMpMMMb.        MM  ,MP'\\n *    MM    `Mb       MM' \\\"'       MM        MM    MM        MM ;Y   \\n *    MM     M8       MM           MM        MM    MM        MM;Mm   \\n *    MM.   ,M9       MM           MM        MM    MM        MM `Mb. \\n *    P^YbmdP'      .JMML.       .JMML.    .JMML  JMML.    .JMML. YA.\\n *\\n *    SaltedDeployer.sol :: 0x6b24634B517a63Ed0fa2a39977286e13e7E35E25\\n *    etherscan.io verified 2023-11-03\\n */ \\n\\nimport \\\"../Interfaces/ISingletonFactory.sol\\\";\\n\\n/// @title Deploys contracts using the canonical SingletonFactory and a hardcoded bytes32 salt. Includes custom events\\n/// and errors.\\ncontract SaltedDeployer {\\n  /// @dev Emit when contract is deployed successfully\\n  event Deployed(address deployAddress);\\n\\n  /// @dev Revert when SingletonFactory deploy returns 0 address\\n  error DeployFailed();\\n\\n  /// @dev Revert when initCode is already deployed\\n  error DeploymentExists();\\n\\n  /// @dev Salt used for salted deployments\\n  bytes32 constant SALT = 0xd2a5b1e84cb7a6df481438c61ec4144631172d3d29b2a30fe7c5f0fbf4e51735;\\n\\n  /// @dev Canonical SingletonFactory address\\n  /// @notice https://eips.ethereum.org/EIPS/eip-2470\\n  ISingletonFactory constant SINGLETON_FACTORY = ISingletonFactory(0xce0042B868300000d44A59004Da54A005ffdcf9f);\\n\\n  /// @dev Computes the salted deploy address of contract with initCode\\n  /// @return deployAddress Address where the contract with initCode will be deployed\\n  function getDeployAddress (bytes memory initCode) public pure returns (address deployAddress) {\\n    bytes32 hash = keccak256(\\n      abi.encodePacked(bytes1(0xff), address(SINGLETON_FACTORY), SALT, keccak256(initCode))\\n    );\\n    deployAddress = address(uint160(uint(hash)));\\n  }\\n\\n  /// @dev Deploys the contract with initCode\\n  /// @param initCode The initCode to deploy\\n  function deploy(bytes memory initCode) external {\\n    if (_isContract(getDeployAddress(initCode))) {\\n      revert DeploymentExists();\\n    }\\n    address deployAddress = SINGLETON_FACTORY.deploy(initCode, SALT);\\n    if (deployAddress == address(0)) {\\n      revert DeployFailed();\\n    }\\n    emit Deployed(deployAddress);\\n  }\\n\\n  function _isContract(address account) internal view returns (bool) {\\n    return account.code.length > 0;\\n  }\\n}\\n\"\r\n    },\r\n    \"brink-core/Interfaces/ISingletonFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity =0.8.10;\\npragma abicoder v1;\\n\\ninterface ISingletonFactory {\\n  function deploy(bytes memory _initCode, bytes32 _salt) external returns (address payable createdContract);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"DeployFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeploymentExists\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"deployAddress\",\"type\":\"address\"}],\"name\":\"Deployed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"}],\"name\":\"deploy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"}],\"name\":\"getDeployAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"deployAddress\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "SaltedDeployer", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}