{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Deposit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IStaking.sol\\\";\\nimport \\\"./StakePlan.sol\\\";\\n\\ncontract Deposit is ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n\\n    address public beneficiary;\\n\\n    IERC20 public token;\\n\\n    IStaking public stakingContract;\\n\\n    address public stakingContractAddress;\\n\\n    uint256 public harvested;\\n    \\n    uint256 public amount;\\n\\n    uint256 public depositDate;\\n\\n    uint256 public harvestInterval;\\n\\n    address public owner;\\n\\n    bool public closed;\\n\\n    uint256 public lockedDuration;\\n    uint256 public unstakePenaltyDuration;\\n    uint256 public unstakePenaltyRateBP;\\n    StakePlanContext.StakePlan public stakePlan;\\n\\n    uint256 public interestPayIndex;\\n    uint256[] public interestPayDates;\\n    uint256[] public interestPayAmounts;\\n    uint256 public interestLastPaymentTime;\\n\\n    constructor(\\n        address _owner,\\n        address _tokenAddress,\\n        address _beneficiary,\\n        uint256 _amount,\\n        StakePlanContext.StakePlan _stakePlan,\\n        uint256 _interestRate,\\n        uint256 _lockedDuration,\\n        uint256 _unstakePenaltyDuration,\\n        uint256 _unstakePenaltyRateBP,\\n        uint256 _harvestInterval\\n    ) {\\n        stakingContract = IStaking(msg.sender);\\n        stakingContractAddress = msg.sender;\\n\\n        owner = _owner;\\n        token = IERC20(_tokenAddress);        \\n        beneficiary = _beneficiary;\\n        amount = _amount;\\n        stakePlan = _stakePlan;\\n        depositDate = block.timestamp;\\n        unstakePenaltyDuration = _unstakePenaltyDuration;\\n        unstakePenaltyRateBP = _unstakePenaltyRateBP;\\n        lockedDuration = _lockedDuration;\\n        harvestInterval = _harvestInterval;\\n\\n        if (stakePlan == StakePlanContext.StakePlan.FLEXI_PLAN) {\\n            addInterestAllocation((_amount.mul(_interestRate).div(1000000).mul(3)), depositDate.add(_harvestInterval.mul(3)));\\n            addInterestAllocation((_amount.mul(_interestRate).div(1000000)), depositDate.add(_harvestInterval.mul(4)));\\n            addInterestAllocation((_amount.mul(_interestRate).div(1000000)), depositDate.add(_harvestInterval.mul(5)));\\n            addInterestAllocation((_amount.mul(_interestRate).div(1000000)), depositDate.add(_harvestInterval.mul(6)));\\n        } else {\\n            addInterestAllocation((_amount.mul(_interestRate).div(1000000)), depositDate.add(_harvestInterval.mul(12)));\\n            addInterestAllocation((_amount.mul(_interestRate).div(1000000)), depositDate.add(_harvestInterval.mul(13)));\\n            addInterestAllocation((_amount.mul(_interestRate).div(1000000)), depositDate.add(_harvestInterval.mul(14)));\\n            addInterestAllocation((_amount.mul(_interestRate).div(1000000)), depositDate.add(_harvestInterval.mul(15)));            \\n        }\\n    }\\n\\n    function addInterestAllocation(uint256 _amount, uint256 _date) internal nonReentrant onlyStakingContract {\\n        interestPayAmounts.push(_amount);\\n        interestPayDates.push(_date);\\n    }\\n\\n    function lockedUntilDate() public view returns (uint256) {\\n        return depositDate.add(lockedDuration);\\n    }\\n\\n    function unstakePenaltyUntilDate() public view returns (uint256) {\\n        if (stakePlan == StakePlanContext.StakePlan.FLEXI_PLAN) {\\n            return depositDate.add(unstakePenaltyDuration);\\n        }\\n        return 0;\\n    }\\n\\n    function closeDeposit() external nonReentrant onlyStakingContract { \\n        require(!closed, \\\"Deposit is already closed\\\");\\n        require(\\n            lockedUntilDate() <= block.timestamp,\\n            \\\"Staking deposit is still locked\\\"\\n        );\\n        if (unstakePenaltyUntilDate() < block.timestamp) {\\n            token.transfer(beneficiary, amount);\\n        } else {\\n            uint256 penalty = amount.mul(unstakePenaltyRateBP).div(1000000);\\n            token.transfer(beneficiary, amount.sub(penalty));\\n            token.transfer(stakingContract.getPenaltyWallet(),penalty);            \\n        }     \\n        closed = true;\\n    }\\n\\n    function forceCloseDeposit() external nonReentrant onlyStakingContract { \\n        require(!closed, \\\"Deposit is already closed\\\");\\n        token.transfer(beneficiary, amount);\\n        closed = true;\\n    }\\n\\n    function calculateHarvest() public view returns(uint256 _interest) {\\n        for(uint i = 0; i<interestPayDates.length; i++) {\\n            if (interestPayDates[i] <= block.timestamp && interestPayDates[i] > interestLastPaymentTime) {\\n                _interest = _interest.add(interestPayAmounts[i]);\\n            }\\n        }\\n        return _interest;\\n    }\\n\\n    function getHarvested() public view returns(uint256 _harvested) {\\n        return harvested;\\n    }\\n\\n    function harvestDeposit() external nonReentrant onlyStakingContract returns (uint256 _amount) {\\n        uint256 interest = this.calculateHarvest();\\n        require(interest>0, \\\"Nothing to harvest\\\");        \\n        interestLastPaymentTime = block.timestamp;\\n        harvested = harvested.add(interest);\\n        return interest;\\n    }\\n\\n    function canCloseDeposit() public view returns(bool _canClose) {\\n        return (lockedUntilDate() <= block.timestamp && !closed);\\n    }\\n\\n    modifier onlyStakingContract() {\\n        require(\\n            stakingContractAddress == msg.sender,\\n            \\\"Only the staking contract can call this function.\\\"\\n        );\\n        _;\\n    }     \\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/IStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\ninterface IStaking {\\n\\n    function getPenaltyWallet() external returns(address _penaltyWallet);\\n\\n    function depositHarvest(address _beneficiary, uint256 _amount) external;   \\n}\\n\"\r\n    },\r\n    \"contracts/StakePlan.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\ncontract StakePlanContext {\\n    enum StakePlan {\\n        FLEXI_PLAN,\\n        LOCKED_PLAN\\n    }\\n}\"\r\n    },\r\n    \"contracts/Staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./Deposit.sol\\\";\\nimport \\\"./StakePlan.sol\\\";\\n\\ncontract Staking is\\n    ReentrancyGuard,\\n    Ownable,\\n    Pausable {\\n    using SafeMath for uint256;\\n    \\n    IERC20 public token;\\n\\n    mapping(uint256 => address) public deposits;\\n    mapping(address => bool) public isDeposit;\\n\\n    uint256 public depositIndex;\\n    address public penaltyWallet;\\n    address public harvestWallet;\\n\\n    uint256 public flexiPlanInterestRateBP;\\n    uint256 public lockedPlanInterestRateBP;\\n\\n    uint256 public flexiPlanLockedDuration;\\n    uint256 public lockedPlanLockedDuration;\\n\\n    uint256 public flexiPlanUnstakePenaltyDuration;\\n    uint256 public flexiPlanUnstakePenaltyRateBP;\\n\\n    uint256 public flexiPlanHarvestInterval;\\n    uint256 public lockedPlanHarvestInterval;\\n\\n    uint256 public flexiPlanEpochTokenAmount;\\n    uint256 public lockedPlanEpochTokenAmount;\\n\\n\\n    uint256 public epochFlexiTokenLimit;\\n    uint256 public epochLockedTokenLimit;\\n    uint256 public epochStartTime;\\n    uint256 public epochEndTime;\\n\\n    event DepositCreated(\\n        address indexed beneficiary,\\n        address indexed depositContractAddress, \\n        uint256 amount,\\n        StakePlanContext.StakePlan stakePlan\\n        );\\n\\n    event DepositClosed(\\n        address indexed beneficiary,\\n        address indexed depositContractAddress,\\n        uint256 amount,\\n        StakePlanContext.StakePlan stakePlan\\n    );\\n\\n    event DepositHarvest(\\n        address indexed beneficiary,\\n        address indexed depositContractAddress,\\n        uint256 amount,\\n        StakePlanContext.StakePlan stakePlan\\n    );    \\n\\n    modifier onlyDeposit() {\\n        require(\\n            isDeposit[msg.sender],\\n            \\\"SR: Only a deposit can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    function setEpoch(\\n        uint256 _epochFlexiTokenLimit,\\n        uint256 _epochLockedTokenLimit,\\n        uint256 _epochStartTime,\\n        uint256 _epochEndTime,\\n        uint256 _currentFlexiTokenAmount,\\n        uint256 _currentLockedTokenAmount\\n    )\\n        external\\n        onlyOwner\\n    {\\n        epochFlexiTokenLimit = _epochFlexiTokenLimit;\\n        epochLockedTokenLimit = _epochLockedTokenLimit;\\n        epochStartTime = _epochStartTime;\\n        epochEndTime = _epochEndTime;\\n        flexiPlanEpochTokenAmount = _currentFlexiTokenAmount;\\n        lockedPlanEpochTokenAmount = _currentLockedTokenAmount;\\n    }\\n\\n    function configureStaking(\\n        address _tokenAddress,\\n        address _penaltyWallet,\\n        address _harvestWallet,\\n\\n        uint256 _flexiPlanInterestRateBP,\\n        uint256 _lockedPlanInterestRateBP,\\n\\n        uint256 _flexiPlanLockedDuration,\\n        uint256 _lockedPlanLockedDuration,\\n\\n        uint256 _flexiPlanUnstakePenaltyDuration,\\n        uint256 _flexiPlanUnstakePenaltyRateBP,\\n\\n        uint256 _flexiPlanHarvestInterval,\\n        uint256 _lockedPlanHarvestInterval\\n    )\\n        external\\n        onlyOwner\\n    {\\n        token = IERC20(_tokenAddress);\\n        penaltyWallet = _penaltyWallet;\\n        harvestWallet = _harvestWallet;\\n\\n        flexiPlanInterestRateBP = _flexiPlanInterestRateBP;\\n        lockedPlanInterestRateBP = _lockedPlanInterestRateBP;\\n\\n        flexiPlanLockedDuration = _flexiPlanLockedDuration;\\n        lockedPlanLockedDuration = _lockedPlanLockedDuration;\\n\\n        flexiPlanUnstakePenaltyDuration = _flexiPlanUnstakePenaltyDuration;\\n        flexiPlanUnstakePenaltyRateBP = _flexiPlanUnstakePenaltyRateBP;\\n\\n        flexiPlanHarvestInterval = _flexiPlanHarvestInterval;\\n        lockedPlanHarvestInterval = _lockedPlanHarvestInterval;\\n\\n    }\\n\\n    function openDeposit(\\n        uint256 _amount,\\n        StakePlanContext.StakePlan _stakePlan\\n    ) external whenNotPaused nonReentrant {\\n        require(address(token) != address(0), \\\"Token address is not set\\\");\\n        require(_amount > 0, \\\"Cannot stake 0\\\");\\n        require(block.timestamp > epochStartTime && block.timestamp < epochEndTime, \\\"Staking epoch is not open\\\");\\n        require(\\n            token.allowance(msg.sender, address(this)) >= _amount,\\n            \\\"Allowance should be greater or equal to the amount staked\\\"\\n        );\\n        Deposit _deposit;\\n        if (_stakePlan == StakePlanContext.StakePlan.FLEXI_PLAN) {            \\n            _deposit = new Deposit(\\n                owner(),\\n                address(token),\\n                msg.sender,\\n                _amount,\\n                _stakePlan,\\n                flexiPlanInterestRateBP,\\n                flexiPlanLockedDuration,\\n                flexiPlanUnstakePenaltyDuration,\\n                flexiPlanUnstakePenaltyRateBP,\\n                flexiPlanHarvestInterval\\n            );\\n            flexiPlanEpochTokenAmount = flexiPlanEpochTokenAmount.add(_amount);\\n            require(flexiPlanEpochTokenAmount<epochFlexiTokenLimit, \\\"Token limit is exceeded\\\");\\n        } else {            \\n            _deposit = new Deposit(\\n                owner(),\\n                address(token),\\n                msg.sender,\\n                _amount,\\n                _stakePlan,\\n                lockedPlanInterestRateBP,\\n                lockedPlanLockedDuration,\\n                0,\\n                0,\\n                lockedPlanHarvestInterval\\n            );\\n            lockedPlanEpochTokenAmount = lockedPlanEpochTokenAmount.add(_amount);\\n            require(lockedPlanEpochTokenAmount<epochLockedTokenLimit, \\\"Token limit is exceeded\\\");\\n        }\\n        token.transferFrom(msg.sender, address(_deposit), _amount);\\n\\n        require(\\n            token.balanceOf(address(_deposit)) == _amount,\\n            \\\"Transfer not completed\\\"\\n        );\\n\\n        deposits[depositIndex] = address(_deposit);\\n        isDeposit[address(_deposit)] = true;\\n        depositIndex++;\\n\\n        emit DepositCreated(\\n            msg.sender,\\n            address(_deposit),\\n            _amount,\\n            _stakePlan\\n        );\\n    }\\n\\n    function canCloseDeposit(address _depositContractAddress) public view returns(bool _canClose) {\\n        require(isDeposit[_depositContractAddress], \\\"The address is not a deposit\\\");\\n        Deposit deposit = Deposit(_depositContractAddress);\\n        return deposit.canCloseDeposit();\\n    }\\n\\n    function closeDeposit(address _depositContractAddress) external whenNotPaused nonReentrant {\\n        require(isDeposit[_depositContractAddress], \\\"The address is not a deposit\\\");\\n        Deposit deposit = Deposit(_depositContractAddress);\\n        require(deposit.beneficiary() == msg.sender, \\\"Only the beneficiary can close the deposit\\\");\\n        deposit.closeDeposit();\\n        emit DepositClosed(\\n            deposit.beneficiary(),\\n            _depositContractAddress,\\n            deposit.amount(),\\n            deposit.stakePlan()\\n        );\\n    }\\n\\n    function harvestDeposit(address _depositContractAddress) external whenNotPaused nonReentrant {\\n        require(isDeposit[_depositContractAddress], \\\"The address is not a deposit\\\");\\n        Deposit deposit = Deposit(_depositContractAddress);\\n        require(deposit.beneficiary() == msg.sender, \\\"Only the beneficiary can harvest the deposit\\\");\\n        uint256 amount = deposit.harvestDeposit();\\n        token.transferFrom(harvestWallet, deposit.beneficiary(), amount);\\n        emit DepositHarvest(\\n            deposit.beneficiary(),\\n            _depositContractAddress,\\n            amount,\\n            deposit.stakePlan()\\n        );\\n    }\\n\\n    function checkHarvestDeposit(address _depositContractAddress) public view returns(uint256 _amount) {\\n        require(isDeposit[_depositContractAddress], \\\"The parameter is not a deposit\\\");\\n        Deposit deposit = Deposit(_depositContractAddress);\\n        require(deposit.beneficiary() == msg.sender, \\\"Only the beneficiary can harvest the deposit\\\");\\n        uint256 amount = deposit.calculateHarvest();\\n        return amount;\\n    }\\n\\n    function getHarvestedDeposit(address _depositContractAddress) public view returns(uint256 _harvested) {\\n        require(isDeposit[_depositContractAddress], \\\"The parameter is not a deposit\\\");\\n        Deposit deposit = Deposit(_depositContractAddress);\\n        require(deposit.beneficiary() == msg.sender, \\\"Only the beneficiary can harvest the deposit\\\");\\n        uint256 harvested = deposit.getHarvested();\\n        return harvested;\\n    }\\n\\n    function forceCloseStaking(address _depositContractAddress) external onlyOwner nonReentrant {\\n        require(isDeposit[_depositContractAddress], \\\"The address is not a deposit\\\");\\n        Deposit deposit = Deposit(_depositContractAddress);\\n        deposit.forceCloseDeposit();\\n        emit DepositClosed(\\n            deposit.beneficiary(),\\n            _depositContractAddress,\\n            deposit.amount(),\\n            deposit.stakePlan()\\n        );\\n    }    \\n\\n    function getPenaltyWallet() public view returns(address _penaltyWallet) {\\n        return penaltyWallet;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Vesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./VestingDeposit.sol\\\";\\n\\ncontract Vesting is\\n    ReentrancyGuard,\\n    Ownable,\\n    Pausable {\\n    using SafeMath for uint256;\\n\\n    uint256 constant MAX_SUPPLY = 2**256 - 1;\\n\\n    IERC20 public token;  \\n\\n    address public vestingCreatorAddress;  \\n    address public vestingTokenHolderAddress;  \\n\\n    address[] public vestingDeposits;\\n\\n    mapping(address => bool) public isVesting;\\n\\n    event VestingCreated(\\n        address indexed beneficiary,\\n        address indexed vestingContractAddress,\\n        uint256 amount\\n    );\\n\\n    event VestingRetrieve(\\n        address indexed beneficiary,\\n        address indexed vestingContractAddress,\\n        uint256 amount\\n    );    \\n\\n    \\n\\n    function configureVesting(\\n        address _tokenAddress, \\n        address _vestingCreatorAddress,\\n        address _vestingTokenHolderAddress)\\n        external\\n        onlyOwner\\n    {\\n        token = IERC20(_tokenAddress);\\n        vestingCreatorAddress = _vestingCreatorAddress;\\n        vestingTokenHolderAddress = _vestingTokenHolderAddress;\\n    }\\n\\n    function openVesting(\\n        uint256[] calldata _amounts,\\n        uint256[] calldata _dates,\\n        address _beneficiary\\n    ) external whenNotPaused nonReentrant onlyVestingCreator {\\n\\n        require(address(token) != address(0), \\\"Token address is not set\\\");\\n        require(_amounts.length == _dates.length, \\\"Dates and length should be the same\\\");\\n\\n        \\n        VestingDeposit _vestingDeposit = new VestingDeposit(\\n            address(token),\\n            _beneficiary\\n        );\\n\\n        uint256 totalAmount = 0;\\n        for(uint i = 0; i<_dates.length; i++){\\n            totalAmount = totalAmount.add(_amounts[i]);\\n            _vestingDeposit.addAllocation(_amounts[i], _dates[i]);\\n        }\\n        vestingDeposits.push(address(_vestingDeposit));\\n        isVesting[address(_vestingDeposit)] = true;\\n\\n        require(\\n            _vestingDeposit.allocationTotal() == totalAmount,\\n            \\\"Allocation does not match\\\"\\n        );\\n\\n        require(\\n            token.allowance(vestingTokenHolderAddress, address(this)) >= totalAmount,\\n            \\\"Allowance should be greater or equal to the amount vesting\\\"\\n        );\\n\\n        token.transferFrom(vestingTokenHolderAddress, address(_vestingDeposit), totalAmount);\\n\\n        require(\\n            token.balanceOf(address(_vestingDeposit)) == totalAmount,\\n            \\\"Transfer not completed\\\"\\n        );\\n\\n        emit VestingCreated(\\n            _beneficiary,\\n            address(_vestingDeposit),\\n            totalAmount\\n        );\\n    }\\n\\n    function retrieveVesting(address _vestingContractAddress) external whenNotPaused nonReentrant {\\n        require(isVesting[_vestingContractAddress], \\\"The parameter is not a vesting deposit\\\");\\n        VestingDeposit vestingDeposit = VestingDeposit(_vestingContractAddress);        \\n        uint256 amount = vestingDeposit.retrieve();\\n\\n        emit VestingRetrieve(\\n            vestingDeposit.beneficiary(),\\n            _vestingContractAddress,\\n            amount\\n        );\\n    }\\n    \\n    modifier onlyVestingCreator() {\\n        require(\\n            vestingCreatorAddress == msg.sender,\\n            \\\"Only the vesting creator can call this function.\\\"\\n        );\\n        _;\\n    }\\n}\"\r\n    },\r\n    \"contracts/VestingDeposit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./Vesting.sol\\\";\\n\\ncontract VestingDeposit is ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    address public beneficiary;\\n\\n    IERC20 public token;\\n\\n    Vesting public vestingContract;\\n    \\n    uint256[] public amounts;\\n\\n    uint256[] public dates;\\n\\n    uint256 public depositDate;\\n\\n    uint256 public lastPaymentTime;\\n\\n    uint256 public allocationTotal;\\n\\n    uint256 public retrievedAmount;\\n\\n    constructor(\\n        address _tokenAddress,\\n        address _beneficiary  \\n    ) {\\n        token = IERC20(_tokenAddress);\\n        vestingContract = Vesting(msg.sender);\\n        beneficiary = _beneficiary;\\n        depositDate = block.timestamp;\\n    }    \\n\\n    function addAllocation(uint256 _amount, uint256 _date) external nonReentrant onlyVestingContract {\\n        dates.push(_date);\\n        amounts.push(_amount);\\n        allocationTotal = allocationTotal.add(_amount);\\n    }\\n\\n    function calculateRetrievable() public view returns(uint256 _retrievable) {\\n        uint256 currentTime = block.timestamp;\\n        for(uint i = 0; i<dates.length; i++){\\n            if (dates[i] <= currentTime && dates[i] > lastPaymentTime) {\\n                _retrievable = _retrievable.add(amounts[i]);\\n            }\\n        }\\n        return _retrievable;\\n    }\\n\\n\\n    function retrieve() external nonReentrant onlyVestingContract returns (uint256 _amount) {\\n        uint256 retrievable = this.calculateRetrievable();\\n        token.transfer(beneficiary, retrievable);\\n        retrievedAmount = retrievedAmount.add(retrievable);\\n        lastPaymentTime = block.timestamp;\\n        return retrievedAmount;\\n    }    \\n\\n    modifier onlyVestingContract() {\\n        require(\\n            address(vestingContract) == msg.sender,\\n            \\\"Only the vesting contract can call this function.\\\"\\n        );\\n        _;\\n    }    \\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IUX.sol\": {\r\n      \"content\": \"// contracts/IUX\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\ninterface IAntisnipe {\\n    function assureCanTransfer(\\n        address sender,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n}\\n\\ncontract IUX is ERC20, ERC20Burnable, Pausable, Ownable {\\n    IAntisnipe public antisnipe = IAntisnipe(address(0));\\n    bool public antisnipeDisable;    \\n\\n    constructor(uint256 initialSupply) ERC20(\\\"GeniuX\\\", \\\"IUX\\\") {\\n        _mint(msg.sender, initialSupply);\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     * - antisnipe must be disabled or allow the transfer\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        if (from == address(0) || to == address(0)) return;\\n        if (!antisnipeDisable && address(antisnipe) != address(0))\\n            antisnipe.assureCanTransfer(msg.sender, from, to, amount);\\n\\n        require(!paused(), 'ERC20Pausable: token transfer while paused');\\n    }\\n\\n    /**\\n     * @dev Used by the owner to force transfer of funds, only usable by owner. \\n     * The force transfer burns token and issues them in a different wallet\\n     *\\n     */\\n    function forceTransfer(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes32 details\\n    ) external onlyOwner {\\n        _burn(from,amount);\\n        _mint(to,amount);\\n        emit ForceTransfer(from, to, amount, details);\\n    }\\n\\n    /**\\n     * @dev Emitted when tokens are moved by force of owner. Burn and Mint events are sent separately\\n     */\\n    event ForceTransfer(address indexed from, address indexed to, uint256 value, bytes32 details);\\n\\n    function setAntisnipeDisable() external onlyOwner {\\n        require(!antisnipeDisable);\\n        antisnipeDisable = true;\\n    }\\n\\n    function setAntisnipeAddress(address addr) external onlyOwner {\\n        antisnipe = IAntisnipe(addr);\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum StakePlanContext.StakePlan\",\"name\":\"stakePlan\",\"type\":\"uint8\"}],\"name\":\"DepositClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum StakePlanContext.StakePlan\",\"name\":\"stakePlan\",\"type\":\"uint8\"}],\"name\":\"DepositCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum StakePlanContext.StakePlan\",\"name\":\"stakePlan\",\"type\":\"uint8\"}],\"name\":\"DepositHarvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositContractAddress\",\"type\":\"address\"}],\"name\":\"canCloseDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_canClose\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositContractAddress\",\"type\":\"address\"}],\"name\":\"checkHarvestDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositContractAddress\",\"type\":\"address\"}],\"name\":\"closeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_penaltyWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_harvestWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_flexiPlanInterestRateBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockedPlanInterestRateBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_flexiPlanLockedDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockedPlanLockedDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_flexiPlanUnstakePenaltyDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_flexiPlanUnstakePenaltyRateBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_flexiPlanHarvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockedPlanHarvestInterval\",\"type\":\"uint256\"}],\"name\":\"configureStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochFlexiTokenLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochLockedTokenLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flexiPlanEpochTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flexiPlanHarvestInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flexiPlanInterestRateBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flexiPlanLockedDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flexiPlanUnstakePenaltyDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flexiPlanUnstakePenaltyRateBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositContractAddress\",\"type\":\"address\"}],\"name\":\"forceCloseStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositContractAddress\",\"type\":\"address\"}],\"name\":\"getHarvestedDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_harvested\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPenaltyWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_penaltyWallet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositContractAddress\",\"type\":\"address\"}],\"name\":\"harvestDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedPlanEpochTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedPlanHarvestInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedPlanInterestRateBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedPlanLockedDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"enum StakePlanContext.StakePlan\",\"name\":\"_stakePlan\",\"type\":\"uint8\"}],\"name\":\"openDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penaltyWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochFlexiTokenLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epochLockedTokenLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epochStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epochEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentFlexiTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentLockedTokenAmount\",\"type\":\"uint256\"}],\"name\":\"setEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Staking", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://598e0f7f4f13453cc8485139b1c91131f283f05af2f2a9e466ec5cc3843863e0"}