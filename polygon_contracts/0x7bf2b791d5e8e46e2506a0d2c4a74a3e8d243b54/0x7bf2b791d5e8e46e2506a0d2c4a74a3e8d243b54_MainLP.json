{"SourceCode": "{\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    function decimals() external pure returns(uint);\\n\\n    function totalSupply() external view returns(uint);\\n\\n    function balanceOf(address account) external view returns(uint);\\n\\n    function transfer(address to, uint amount) external;\\n\\n    function allowance(address holder, address spender) external view returns(uint);\\n\\n    function approve(address spender, uint amount) external;\\n\\n    function transferFrom(address sender, address recipient, uint amount) external;\\n\\n    event Transfer(address indexed from, address indexed to, uint amount);\\n    event Approval(address indexed holder, address indexed to, uint amount);\\n}\"},\"MainLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"./IERC20.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\ncontract MainLP is IERC20 {\\n    address public owner;\\n    bool private locked;\\n    uint public totalTokens;\\n    mapping(address =\\u003e uint) balances;\\n    mapping(address =\\u003e mapping(address =\\u003e uint)) allowances;\\n    address[] public partner;\\n    mapping(address =\\u003e uint) public partnersRate;\\n    string public name = \\\"GameLP Token\\\";\\n    string public symbol = \\\"GAMELP\\\";\\n    uint public contractBalance; \\n    uint public rateBankFee = 2;\\n    uint public sumPartnerToken;\\n    uint public bankroll;\\n    uint public degree = 1000000000000000000; // 10**18\\n    uint public rateGame = 500000000000000; // 0,0005 How many tokens (rate) mint for game\\n    uint public rateDepo = 100000000000000; // 0,0001 How many tokens (rate) mint for depo\\n\\n\\n        constructor() {\\n        owner = msg.sender;\\n    }\\n        modifier reentrancyGuard() {\\n            require(!locked, \\\"denied\\\");\\n            locked = true;\\n            _;\\n            locked = false;\\n    }\\n\\n        modifier enoughTokens(address _from, uint _amount) {\\n        require(balanceOf(_from) \\u003e= _amount, \\\"Not enough tokens!\\\");\\n        _;\\n    }\\n\\n        modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Only an owner\\\");\\n        _;\\n    }\\n\\n        modifier whiteList(address _partner) {\\n        require(checkWhiteList(_partner), \\\"Not a partner!\\\");\\n        _;\\n    }\\n    \\n    event DepoMintTokens(address _player, uint userTokens); \\n    event PlaygameMintTokens(address _player, uint userTokens);\\n    event GetBankFee(address receiver, uint payoutBankFee);\\n    event GetPartnerFee(address receiver, uint payoutPartnerFee);\\n    event RewardPlayer(address _player, uint _reward);\\n    event Rewarding(address receiver, uint rewardForPlayer);\\n    \\n    \\n    function setBankroll(uint _bankroll) public onlyOwner {\\n       bankroll = _bankroll;\\n    }\\n    function getBankroll() public view returns(uint) {\\n       return contractBalance / bankroll;\\n    }\\n\\n    function setPartner(address _partner) public onlyOwner {\\n       partner.push(_partner);\\n    }\\n\\n    function setRateGame(uint _rateGame) public onlyOwner {\\n      rateGame = _rateGame;\\n    }\\n\\n    function setRateDepo(uint _rateDepo) public onlyOwner {\\n      rateDepo = _rateDepo;\\n    }\\n\\n    function checkWhiteList(address _partner) private view returns(bool) {\\n        bool truePartner;\\n        uint lenght = partner.length;\\n        for (uint i = 0; i \\u003c lenght; i++) {\\n            if(partner[i] == _partner) {\\n              truePartner = true;\\n            }\\n        }\\n        return truePartner;\\n    }\\n\\n    function deletePartner(address _partner) public onlyOwner {\\n        uint lenght = partner.length;\\n        for (uint i = 0; i \\u003c lenght; i++) {\\n            if(partner[i] == _partner) {\\n              partner[i] = 0x0000000000000000000000000000000000000000;\\n            }\\n        }\\n    }\\n\\n// set Partner rate for liquidity providing\\n    function setPartnerRate(address _partner, uint _rate) public onlyOwner whiteList(_partner) {\\n       partnersRate[_partner] = _rate;\\n    }\\n    function getPartnerRate(address _partner) public view returns(uint) {\\n       return partnersRate[_partner];\\n    }\\n\\n// set main Bank fee\\n    function setRateBankFee(uint _rateBankFee) public onlyOwner {\\n      rateBankFee = _rateBankFee;\\n    }\\n\\n    function getBalance() public {\\n       contractBalance = address(this).balance;\\n   }\\n\\n    function decimals() public override pure returns(uint) {\\n        return 18; \\n    }\\n\\n    function totalSupply() public override view returns(uint) {\\n        return totalTokens;\\n    }\\n\\n    function balanceOf(address account) public override view returns(uint) {\\n        return balances[account];\\n    }\\n\\n    function transfer(address to, uint amount) external override enoughTokens(msg.sender, amount) {\\n        balances[msg.sender] -= amount;\\n        balances[to] += amount;\\n        emit Transfer(msg.sender, to, amount);\\n    }\\n\\n    function allowance(address holder, address spender) external override view returns(uint) {\\n        return allowances[holder][spender];\\n    }\\n\\n    function approve(address spender, uint amount) external override {\\n        allowances[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint amount) external override enoughTokens(sender, amount) {\\n        allowances[sender][recipient] -= amount;\\n        balances[sender] -= amount;\\n        balances[recipient] += amount;\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n      // mint tokens for users   \\n    function mint(address _player, uint amount) private {\\n\\n        balances[_player] += amount;\\n        totalTokens += amount;\\n        getBalance();\\n      \\n        emit Transfer(address(0), _player, amount);\\n    }\\n\\n          // mint tokens for Bank\\n    function mintBankToken(uint amount) private {\\n\\n        balances[owner] += amount;\\n        totalTokens += amount;\\n        getBalance();\\n      \\n        emit Transfer(address(0), owner, amount);\\n    }\\n    /// mint tokens for Partners\\n    function mintPartnerToken(uint amount) private {\\n\\n        balances[msg.sender] += amount;\\n        totalTokens += amount;\\n        sumPartnerToken += amount;\\n        getBalance();\\n      \\n        emit Transfer(address(0), msg.sender, amount);\\n    }\\n\\n    // manually withdrawal \\n    \\n    function rewardTokenHolders(address _tokenHolder, uint _withdrawTokens) public {\\n        require(checkWhiteList(msg.sender) || msg.sender == _tokenHolder, \\\"Only holders\\\");\\n        require((_withdrawTokens / 10000) * 10000 \\u003e= 1, \\\"too small\\\");\\n        uint balanceUserTokens = balances[_tokenHolder];\\n        require(balanceUserTokens != 0, \\\"You haven\\u0027t tokens!\\\");\\n        require(_withdrawTokens \\u003c= balanceUserTokens, \\\"You have less tokens!\\\");\\n\\n        uint payoutUser = _withdrawTokens * contractBalance / totalTokens;\\n        balances[_tokenHolder] -= _withdrawTokens;\\n        totalTokens -= _withdrawTokens;\\n\\n        address payable receiver = payable(_tokenHolder);\\n        receiver.transfer(payoutUser);\\n        getBalance(); \\n\\n        emit Rewarding(receiver, payoutUser);\\n        emit Transfer(_tokenHolder, address(0), _withdrawTokens);\\n    }\\n\\n    // get Token price\\n    function getTokenPrice() public view returns(uint256) {\\n        return contractBalance * degree / totalTokens; \\n    }\\n\\n    // the process of delivering liquidity to the game. In return for liquidity, it receives tokens\\n\\n    function depo(address _player) public payable whiteList(msg.sender) {\\n        uint tokensForDepo = msg.value / rateDepo * degree;\\n\\n        uint ratePartnerFee = partnersRate[msg.sender];\\n        uint userTokenBankFee = tokensForDepo / 100 * rateBankFee;\\n        uint userTokenPartnerFee = tokensForDepo / 100 * ratePartnerFee;\\n        uint userTokens = tokensForDepo - userTokenBankFee - userTokenPartnerFee;\\n     \\n          mint(_player, userTokens);\\n          mintBankToken(userTokenBankFee);\\n          mintPartnerToken(userTokenPartnerFee); \\n        \\n        emit DepoMintTokens(_player, userTokens);\\n    }\\n\\n    // the process of the game. The player receives the tokens\\n\\n    function gameplay(address _player, uint _userBet) external payable whiteList(msg.sender) {\\n        uint tokensToGame = _userBet * degree / rateGame;\\n\\n        uint ratePartnerFee = partnersRate[msg.sender];\\n        uint userTokenBankFee = tokensToGame / 100 * rateBankFee;\\n        uint userTokenPartnerFee = tokensToGame / 100 * ratePartnerFee;\\n        uint userTokens = tokensToGame - userTokenBankFee - userTokenPartnerFee;\\n     \\n          mint(_player, userTokens);\\n          mintBankToken(userTokenBankFee);\\n          mintPartnerToken(userTokenPartnerFee); \\n        \\n        emit PlaygameMintTokens(_player, userTokens);\\n    }\\n\\n    //////\\n    function getBankFee(uint _payoutTokenBankFee) public onlyOwner {\\n        require((_payoutTokenBankFee / 10000) * 10000 \\u003e= 1, \\\"too small\\\");\\n        uint currentAmountBankTokens = balances[owner];\\n        require(currentAmountBankTokens != 0, \\\"BankFee is empty!\\\");\\n        require(_payoutTokenBankFee \\u003c= currentAmountBankTokens, \\\"BankFee is lower!\\\");\\n\\n        uint payoutBankFee = _payoutTokenBankFee * contractBalance / totalTokens;\\n\\n        balances[owner] -= _payoutTokenBankFee;\\n        totalTokens -= _payoutTokenBankFee;\\n        \\n        address payable receiver = payable(msg.sender);\\n        receiver.transfer(payoutBankFee);\\n        getBalance();\\n\\n        emit GetBankFee(receiver, payoutBankFee);\\n        emit Transfer(msg.sender, address(0), _payoutTokenBankFee);\\n    }\\n\\n    ////// \\n    function getPartnerFee(uint _payoutPartnerTokenFee, address _ownerPartner) public whiteList(msg.sender) {\\n        require((_payoutPartnerTokenFee / 10000) * 10000 \\u003e= 1, \\\"too small\\\");\\n        uint currentAmountPartnerTokens = balances[msg.sender];\\n        require(currentAmountPartnerTokens != 0, \\\"PartnerTokenFee is empty!\\\");\\n        require(_payoutPartnerTokenFee \\u003c= currentAmountPartnerTokens, \\\"PartnerTokenFee is lower!\\\");\\n\\n        uint payoutPartnerFee = _payoutPartnerTokenFee * contractBalance / totalTokens;\\n\\n        balances[msg.sender] -= _payoutPartnerTokenFee;\\n        sumPartnerToken -= _payoutPartnerTokenFee;\\n        totalTokens -= _payoutPartnerTokenFee;\\n        \\n        address payable receiver = payable(_ownerPartner);\\n        receiver.transfer(payoutPartnerFee);\\n        getBalance();\\n\\n        emit GetPartnerFee(receiver, payoutPartnerFee);\\n        emit Transfer(_ownerPartner, address(0), _payoutPartnerTokenFee);\\n    }\\n    // for Draw in game \\u0026 win\\n    function payReward(address _player, uint _reward) internal whiteList(msg.sender) reentrancyGuard {\\n        payable(_player).transfer(_reward);\\n        getBalance();\\n        emit RewardPlayer(_player, _reward);\\n    }\\n\\n    fallback() external payable {\\n    }\\n\\n    receive() external payable {\\n    }\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userTokens\",\"type\":\"uint256\"}],\"name\":\"DepoMintTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payoutBankFee\",\"type\":\"uint256\"}],\"name\":\"GetBankFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payoutPartnerFee\",\"type\":\"uint256\"}],\"name\":\"GetPartnerFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userTokens\",\"type\":\"uint256\"}],\"name\":\"PlaygameMintTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"RewardPlayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardForPlayer\",\"type\":\"uint256\"}],\"name\":\"Rewarding\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bankroll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"degree\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"deletePartner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"depo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_userBet\",\"type\":\"uint256\"}],\"name\":\"gameplay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_payoutTokenBankFee\",\"type\":\"uint256\"}],\"name\":\"getBankFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBankroll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_payoutPartnerTokenFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ownerPartner\",\"type\":\"address\"}],\"name\":\"getPartnerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"getPartnerRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"partner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"partnersRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateBankFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateDepo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateGame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenHolder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawTokens\",\"type\":\"uint256\"}],\"name\":\"rewardTokenHolders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bankroll\",\"type\":\"uint256\"}],\"name\":\"setBankroll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"setPartner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setPartnerRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rateBankFee\",\"type\":\"uint256\"}],\"name\":\"setRateBankFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rateDepo\",\"type\":\"uint256\"}],\"name\":\"setRateDepo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rateGame\",\"type\":\"uint256\"}],\"name\":\"setRateGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sumPartnerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MainLP", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://864684812dab0cd15511617bb7937a3fb20426d7fdf453a6429c48848f5909ea"}