{"SourceCode": "// File: contracts/luxon/store/gacha/random-seed/IRandomSeedNumber.sol\r\n\r\n\r\npragma solidity ^0.8.18;\r\n\r\ninterface IRandomSeedNumber {\r\n    struct RequestStatus {\r\n        bool fulfilled;\r\n        bool exists;\r\n        uint256[] randomWords;\r\n    }\r\n\r\n    function requestRandomWords(address userAddress, uint256 gachaTicketTokenId, uint256) external returns (uint256);\r\n\r\n    function getRequestStatus(uint256 _requestId) external view returns (bool);\r\n\r\n    function getRequestStatusMany(uint256[] memory _requestIdArray) external view returns (bool[] memory);\r\n\r\n    function getRandomNumber(uint256 _requestId) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/luxon/utils/erc721/IERC721LUXON.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\ninterface IERC721LUXON {\r\n    function mintByCharacterName(address mintUser, uint256 quantity, string[] memory gachaIds) external;\r\n    function nextTokenId() external view returns (uint256);\r\n    function burn(uint256 tokenId) external;\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function totalSupply() external view returns (uint256);\r\n    function mint(address mintUser, uint256 quantity) external;\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n}\r\n// File: contracts/admin/data/good/IDspGoodsTypeData.sol\r\n\r\n\r\npragma solidity ^0.8.18;\r\n\r\n    struct GoodsInfo {\r\n        uint256 goodsType;\r\n        uint256 tokenType;\r\n        address tokenAddress;\r\n        string name;\r\n        bool isValid;\r\n    }\r\n\r\ninterface IDspGoodsTypeData {\r\n    function getGoodsInfo(uint256 _goodsType) external view returns (GoodsInfo memory);\r\n    function getGoodsInfos(uint256[] memory _goodsTypes) external view returns (GoodsInfo[] memory);\r\n}\r\n\r\n// File: contracts/admin/data/gacha/GachaStruct.sol\r\n\r\n\r\npragma solidity ^0.8.18;\r\n\r\n    enum GachaType {\r\n        None,\r\n        Character,\r\n        FateCore\r\n    }\r\n\r\n    struct InputGachaInfo {\r\n        uint256 tokenId;\r\n        string name;\r\n        uint256[] tierRatio;\r\n        uint256[][] gachaGradeRatio;\r\n        uint256[] gachaFateCoreRatio;\r\n        uint256[] gachaFateCoreList;\r\n        GachaType gachaType;\r\n        bool isValid;\r\n    }\r\n\r\n    struct GachaInfo {\r\n        uint256 tokenId;\r\n        string name;\r\n        uint256[] tierRatio;\r\n        uint256[][] gachaGradeRatio;\r\n        bool isValid;\r\n    }\r\n\r\n    struct FateCoreGachaInfo {\r\n        uint256 tokenId;\r\n        string name;\r\n        uint256[] gachaFateCoreRatio;\r\n        uint256[] gachaFateCoreList;\r\n        bool isValid;\r\n    }\r\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/admin/data/quest/period-quest/PeriodQuestStructV2.sol\r\n\r\n\r\npragma solidity ^0.8.18;\r\n\r\n    enum CalculateType {\r\n        NONE,\r\n        SET,\r\n        ADD,\r\n        SUB\r\n    }\r\n\r\n    enum ConditionType {\r\n        NONE,\r\n        CHARACTER,\r\n        CHARACTER_TIER,\r\n        PACK,\r\n        CHARACTER_ELEMENT,\r\n        CHARACTER_NATION\r\n    }\r\n\r\n    enum QuestCategory {\r\n        NONE,\r\n        MISSION,\r\n        REWARD\r\n    }\r\n\r\n    enum MissionType {\r\n        NONE,\r\n        BURN,\r\n        STAKE,\r\n        REGIST\r\n    }\r\n\r\n    enum TokenType {\r\n        NONE,\r\n        ERC20,\r\n        ERC721,\r\n        ERC1155\r\n    }\r\n\r\n    enum QuestType {\r\n        NONE,\r\n        MAIN,\r\n        HIDDEN,\r\n        DAILY,\r\n        WEEKLY,\r\n        PREMIUM,\r\n        GLOBAL\r\n    }\r\n\r\n    enum LimitType {\r\n        NONE,\r\n        LIMIT,\r\n        INFINITE\r\n    }\r\n\r\n    struct BurnWaitInfo {\r\n        uint256 tokenId;\r\n        uint256 amount;\r\n        uint256 conditionType;\r\n        uint256 slotNo;\r\n    }\r\n\r\n    struct StakeInfo {\r\n        uint256 tokenId;\r\n        uint256 amount;\r\n        uint256 conditionType;\r\n    }\r\n\r\n    struct Quest {\r\n        uint256 questNo;\r\n        string name;\r\n        uint256 requireQuest;\r\n        uint256 questCategory;\r\n        uint256 stakingTime;\r\n        Reward[] rewards;\r\n        QuestConditionSlot[] questConditionSlot;\r\n    }\r\n\r\n    struct Reward {\r\n        uint256 rewardType;\r\n        uint256 reward;\r\n        uint256 rewardAmount;\r\n    }\r\n\r\n    struct QuestConditionSlot {\r\n        uint256 questType;       // \ubbf8\uc158 \ud0c0\uc785\r\n        uint256 conditionType;   // \ubbf8\uc158 \uc870\uac74 \ud0c0\uc785\r\n        uint256 conditionValue;  // \ubbf8\uc158 \uc870\uac74 \uac12\r\n        uint256 conditionAmount; // \uac1c\uc218\r\n        uint256 subConditionType;\r\n        uint256 subConditionValue;\r\n    }\r\n\r\n    struct PeriodQuestInfo {\r\n        uint256 id;\r\n        uint256 requireId;\r\n        uint256 questType;\r\n        uint256 questId;\r\n        uint256 startAt;\r\n        uint256 endAt;\r\n        LimitType userLimitType;\r\n        uint256 userLimit;\r\n        LimitType limitType;\r\n        uint256 limit;\r\n        uint256 finishId;\r\n        bool isValid;\r\n    }\r\n\r\n    struct QuestInfo {\r\n        uint256 questNo;\r\n        uint256 startAt;\r\n        uint256 endAt;\r\n        QuestSlotInfo[] slotData;\r\n    }\r\n\r\n    struct QuestSlotInfo {\r\n        uint256 tokenId;\r\n        uint256 amount;\r\n        bool isValid;\r\n    }\r\n\r\n    struct Dashboard {\r\n        uint256 id;\r\n        uint256 clearCount;\r\n        uint256 userClearCount;\r\n        QuestInfo userQuestInfo;\r\n        BurnWaitInfo[] burnInfo;\r\n        StakeInfo[] stakeInfo;\r\n    }\r\n\r\n    struct RewardInfo {\r\n        uint256 goodsType;\r\n        uint256 tokenType;\r\n        address tokenAddress;\r\n        bool isValid;\r\n    }\r\n\r\n    struct GetQuestInfos {\r\n        uint256 userClearCount;\r\n        uint256 totalClearCount;\r\n        QuestInfo userQuestInfo;\r\n        Quest questData;\r\n    }\r\n\r\n    struct UserClearCount {\r\n        uint256 id;\r\n        uint256 clearCount;\r\n        bool isOpen;\r\n    }\r\n\r\n    struct CharacterOwner {\r\n        uint256 id;\r\n        bool isOwner;\r\n    }\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/admin/data/gacha/GachaDataV2.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\n\r\ncontract DspGachaData is Ownable {\r\n    event SetGachaInfo(uint256 indexed tokenId, string indexed name, uint256[] tierRatio, uint256[][]gachaGradeRatio, bool isValid);\r\n    event SetFateCoreGachaInfo(uint256 indexed tokenId, string indexed name, uint256[] ratio, uint256[]list, bool isValid);\r\n    event RemoveGachaInfo(uint256 indexed tokenId, string indexed name, uint256[] tierRatio, uint256[][]gachaGradeRatio, bool isValid);\r\n    event RemoveFateCoreGachaInfo(uint256 indexed tokenId, string indexed name, uint256[] ratio, uint256[] list, bool isValid);\r\n\r\n    uint256 private gachaCount;\r\n\r\n    // tokenId => GachaInfo\r\n    mapping(uint256 => GachaInfo) private gachaInfo;\r\n\r\n    // tokenId => FateCoreGachaInfo\r\n    mapping(uint256 => FateCoreGachaInfo) private fateCoreGachaInfo;\r\n\r\n    // token id => type\r\n    mapping(uint256 => uint256) private gachaTypeByTokenId;\r\n\r\n    function getGachaCount() public view returns (uint256) {\r\n        return gachaCount;\r\n    }\r\n\r\n    function getGachaInfo(uint256 _tokenId) public view returns (GachaInfo memory) {\r\n        return gachaInfo[_tokenId];\r\n    }\r\n\r\n    function getFateCoreGachaInfo(uint256 _tokenId) public view returns (FateCoreGachaInfo memory) {\r\n        return fateCoreGachaInfo[_tokenId];\r\n    }\r\n\r\n    function getGachaType(uint256 _tokenId) public view returns (uint256) {\r\n        return uint256(gachaTypeByTokenId[_tokenId]);\r\n    }\r\n\r\n    function getGachaTierRatio(uint256 _tokenId) public view returns (uint256[] memory, uint256) {\r\n        uint256 sum = 0;\r\n        for (uint256 i = 0; i < gachaInfo[_tokenId].tierRatio.length; i++) {\r\n            sum += gachaInfo[_tokenId].tierRatio[i];\r\n        }\r\n        return (gachaInfo[_tokenId].tierRatio, sum);\r\n    }\r\n\r\n    function getGachaGachaGradeRatio(uint256 _tokenId) public view returns (uint256[][] memory, uint256[] memory) {\r\n        uint256[] memory sum = new uint256[](gachaInfo[_tokenId].gachaGradeRatio.length);\r\n        for (uint256 i = 0; i < gachaInfo[_tokenId].gachaGradeRatio.length; i++) {\r\n            for (uint256 j = 0; j < gachaInfo[_tokenId].gachaGradeRatio[i].length; j++) {\r\n                sum[i] += gachaInfo[_tokenId].gachaGradeRatio[i][j];\r\n            }\r\n        }\r\n        return (gachaInfo[_tokenId].gachaGradeRatio, sum);\r\n    }\r\n\r\n    function getGachaFateCoreRatio(uint256 _tokenId) public view returns (uint256[] memory, uint256) {\r\n        uint256 sum = 0;\r\n        for (uint256 i = 0; i < fateCoreGachaInfo[_tokenId].gachaFateCoreRatio.length; i++) {\r\n            sum += fateCoreGachaInfo[_tokenId].gachaFateCoreRatio[i];\r\n        }\r\n        return (fateCoreGachaInfo[_tokenId].gachaFateCoreRatio, sum);\r\n    }\r\n\r\n    function getFateCoreByIndex(uint256 _tokenId, uint256 index) public view returns (uint256) {\r\n        return fateCoreGachaInfo[_tokenId].gachaFateCoreList[index];\r\n    }\r\n\r\n    function setGachaInfo(InputGachaInfo memory _inputGachaInfo) external onlyOwner {\r\n        require(_inputGachaInfo.tokenId != 0, \"gacha id not valid\");\r\n        if (GachaType.Character == _inputGachaInfo.gachaType) {\r\n            GachaInfo memory _gachaInfo = GachaInfo(_inputGachaInfo.tokenId, _inputGachaInfo.name, _inputGachaInfo.tierRatio, _inputGachaInfo.gachaGradeRatio, _inputGachaInfo.isValid);\r\n            uint256 sumTierRatio = 0;\r\n            for (uint256 i = 0; i < _gachaInfo.tierRatio.length; i++) {\r\n                sumTierRatio += _gachaInfo.tierRatio[i];\r\n            }\r\n            require(sumTierRatio != 0, \"gacha ratio sum 0\");\r\n            if (!gachaInfo[_gachaInfo.tokenId].isValid) {\r\n                gachaCount++;\r\n            }\r\n            for (uint256 i = 0; i < _gachaInfo.gachaGradeRatio.length; i++) {\r\n                if (_gachaInfo.tierRatio[i] != 0) {\r\n                    uint256 sumGachaGradeRatio = 0;\r\n                    for (uint256 j = 0; j < _gachaInfo.gachaGradeRatio[i].length; j++) {\r\n                        sumGachaGradeRatio += _gachaInfo.gachaGradeRatio[i][j];\r\n                    }\r\n                    require(sumGachaGradeRatio != 0, \"gacha gacha grade ratio sum 0\");\r\n                }\r\n            }\r\n            gachaTypeByTokenId[_gachaInfo.tokenId] = uint256(GachaType.Character);\r\n            gachaInfo[_gachaInfo.tokenId] = _gachaInfo;\r\n            emit SetGachaInfo(_gachaInfo.tokenId, _gachaInfo.name, _gachaInfo.tierRatio, _gachaInfo.gachaGradeRatio, _gachaInfo.isValid);\r\n        } else if (GachaType.FateCore == _inputGachaInfo.gachaType) {\r\n            FateCoreGachaInfo memory _fateCoreGachaInfo = FateCoreGachaInfo(_inputGachaInfo.tokenId, _inputGachaInfo.name, _inputGachaInfo.gachaFateCoreRatio, _inputGachaInfo.gachaFateCoreList, _inputGachaInfo.isValid);\r\n            uint256 sumRatio = 0;\r\n            for (uint256 i = 0; i < _fateCoreGachaInfo.gachaFateCoreRatio.length; i++) {\r\n                sumRatio += _fateCoreGachaInfo.gachaFateCoreRatio[i];\r\n            }\r\n            require(sumRatio != 0, \"gacha ratio sum 0\");\r\n            require(_fateCoreGachaInfo.gachaFateCoreRatio.length == _fateCoreGachaInfo.gachaFateCoreList.length, \"not same count\");\r\n            if (!fateCoreGachaInfo[_fateCoreGachaInfo.tokenId].isValid) {\r\n                gachaCount++;\r\n            }\r\n            gachaTypeByTokenId[_fateCoreGachaInfo.tokenId] = uint256(GachaType.FateCore);\r\n            fateCoreGachaInfo[_fateCoreGachaInfo.tokenId] = _fateCoreGachaInfo;\r\n            emit SetFateCoreGachaInfo(_fateCoreGachaInfo.tokenId, _fateCoreGachaInfo.name, _fateCoreGachaInfo.gachaFateCoreRatio, _fateCoreGachaInfo.gachaFateCoreList, _fateCoreGachaInfo.isValid);\r\n        }\r\n    }\r\n\r\n    function setGachaInfos(InputGachaInfo[] memory _inputGachaInfo) external onlyOwner {\r\n        for (uint256 k = 0; k < _inputGachaInfo.length; k++) {\r\n            require(_inputGachaInfo[k].tokenId != 0, \"gacha id not valid\");\r\n            if (GachaType.Character == _inputGachaInfo[k].gachaType) {\r\n                GachaInfo memory _gachaInfo = GachaInfo(_inputGachaInfo[k].tokenId, _inputGachaInfo[k].name, _inputGachaInfo[k].tierRatio, _inputGachaInfo[k].gachaGradeRatio, _inputGachaInfo[k].isValid);\r\n                uint256 sumTierRatio = 0;\r\n                for (uint256 i = 0; i < _gachaInfo.tierRatio.length; i++) {\r\n                    sumTierRatio += _gachaInfo.tierRatio[i];\r\n                }\r\n                require(sumTierRatio != 0, \"gacha ratio sum 0\");\r\n                if (!gachaInfo[_gachaInfo.tokenId].isValid) {\r\n                    gachaCount++;\r\n                }\r\n                for (uint256 i = 0; i < _gachaInfo.gachaGradeRatio.length; i++) {\r\n                    if (_gachaInfo.tierRatio[i] != 0) {\r\n                        uint256 sumGachaGradeRatio = 0;\r\n                        for (uint256 j = 0; j < _gachaInfo.gachaGradeRatio[i].length; j++) {\r\n                            sumGachaGradeRatio += _gachaInfo.gachaGradeRatio[i][j];\r\n                        }\r\n                        require(sumGachaGradeRatio != 0, \"gacha gacha grade ratio sum 0\");\r\n                    }\r\n                }\r\n                gachaTypeByTokenId[_gachaInfo.tokenId] = uint256(GachaType.Character);\r\n                gachaInfo[_gachaInfo.tokenId] = _gachaInfo;\r\n                emit SetGachaInfo(_gachaInfo.tokenId, _gachaInfo.name, _gachaInfo.tierRatio, _gachaInfo.gachaGradeRatio, _gachaInfo.isValid);\r\n            } else if (GachaType.FateCore == _inputGachaInfo[k].gachaType) {\r\n                FateCoreGachaInfo memory _fateCoreGachaInfo = FateCoreGachaInfo(_inputGachaInfo[k].tokenId, _inputGachaInfo[k].name, _inputGachaInfo[k].gachaFateCoreRatio, _inputGachaInfo[k].gachaFateCoreList, _inputGachaInfo[k].isValid);\r\n                uint256 sumRatio = 0;\r\n                for (uint256 i = 0; i < _fateCoreGachaInfo.gachaFateCoreRatio.length; i++) {\r\n                    sumRatio += _fateCoreGachaInfo.gachaFateCoreRatio[i];\r\n                }\r\n                require(sumRatio != 0, \"gacha ratio sum 0\");\r\n                require(_fateCoreGachaInfo.gachaFateCoreRatio.length == _fateCoreGachaInfo.gachaFateCoreList.length, \"not same count\");\r\n                if (!fateCoreGachaInfo[_fateCoreGachaInfo.tokenId].isValid) {\r\n                    gachaCount++;\r\n                }\r\n                gachaTypeByTokenId[_fateCoreGachaInfo.tokenId] = uint256(GachaType.FateCore);\r\n                fateCoreGachaInfo[_fateCoreGachaInfo.tokenId] = _fateCoreGachaInfo;\r\n                emit SetFateCoreGachaInfo(_fateCoreGachaInfo.tokenId, _fateCoreGachaInfo.name, _fateCoreGachaInfo.gachaFateCoreRatio, _fateCoreGachaInfo.gachaFateCoreList, _fateCoreGachaInfo.isValid);\r\n            }\r\n        }\r\n    }\r\n\r\n    function removeGachaInfo(uint256 _tokenId) external onlyOwner {\r\n        require(_tokenId != 0, \"gacha id not valid\");\r\n        if (gachaInfo[_tokenId].isValid) {\r\n            gachaCount--;\r\n        }\r\n        emit RemoveGachaInfo(_tokenId, gachaInfo[_tokenId].name, gachaInfo[_tokenId].tierRatio, gachaInfo[_tokenId].gachaGradeRatio, gachaInfo[_tokenId].isValid);\r\n        delete gachaInfo[_tokenId];\r\n    }\r\n\r\n    function removeFateCoreGachaInfo(uint256 _tokenId) external onlyOwner {\r\n        require(_tokenId != 0, \"gacha id not valid\");\r\n        if (fateCoreGachaInfo[_tokenId].isValid) {\r\n            gachaCount--;\r\n        }\r\n        emit RemoveFateCoreGachaInfo(_tokenId, fateCoreGachaInfo[_tokenId].name, fateCoreGachaInfo[_tokenId].gachaFateCoreRatio, fateCoreGachaInfo[_tokenId].gachaFateCoreList, fateCoreGachaInfo[_tokenId].isValid);\r\n        delete fateCoreGachaInfo[_tokenId];\r\n    }\r\n}\r\n// File: contracts/admin/data/character/ActorData.sol\r\n\r\n\r\npragma solidity ^0.8.18;\r\n\r\n\r\ncontract DspActorData is Ownable {\r\n    event SetGachaTypeById(uint256 indexed id, uint256 indexed gachaType);\r\n    event SetGachaTypeByName(string indexed name, uint256 indexed gachaType);\r\n\r\n    struct InputGachaTypeById {\r\n        uint256 id;\r\n        uint256 gachaType;\r\n    }\r\n\r\n    struct InputGachaTypeByName {\r\n        string name;\r\n        uint256 gachaType;\r\n    }\r\n\r\n    // id => type\r\n    mapping(uint256 => uint256) private gachaTypeById;\r\n    // fate core id => name\r\n    mapping(string => uint256) private gachaTypeByName;\r\n\r\n\r\n    function getGachaTypeById(uint256 _id) public view returns(uint256) {\r\n        return gachaTypeById[_id];\r\n    }\r\n\r\n    function getGachaTypeByName(string memory _name) public view returns(uint256) {\r\n        return gachaTypeByName[_name];\r\n    }\r\n\r\n    function getGachaTypeByIds(uint256[] memory _ids) public view returns(uint256[] memory) {\r\n        uint256[] memory gachaTypes = new uint256[](_ids.length);\r\n        for (uint256 i = 0; i < _ids.length; i++) {\r\n            gachaTypes[i] = gachaTypeById[_ids[i]];\r\n        }\r\n        return gachaTypes;\r\n    }\r\n\r\n    function getGachaTypeByNames(string[] memory _names) public view returns(uint256[] memory) {\r\n        uint256[] memory gachaTypes = new uint256[](_names.length);\r\n        for (uint256 i = 0; i < _names.length; i++) {\r\n            gachaTypes[i] = gachaTypeByName[_names[i]];\r\n        }\r\n        return gachaTypes;\r\n    }\r\n\r\n    function setGachaTypeById(InputGachaTypeById memory _inputGachaTypeById) external onlyOwner {\r\n        gachaTypeById[_inputGachaTypeById.id] = _inputGachaTypeById.gachaType;\r\n        emit SetGachaTypeById(_inputGachaTypeById.id, _inputGachaTypeById.gachaType);\r\n    }\r\n\r\n    function setGachaTypeByIds(InputGachaTypeById[] memory _inputGachaTypeByIds) external onlyOwner {\r\n        for (uint256 i = 0; i < _inputGachaTypeByIds.length; i++) {\r\n            gachaTypeById[_inputGachaTypeByIds[i].id] = _inputGachaTypeByIds[i].gachaType;\r\n            emit SetGachaTypeById(_inputGachaTypeByIds[i].id, _inputGachaTypeByIds[i].gachaType);\r\n        }\r\n    }\r\n\r\n    function setGachaTypeByName(InputGachaTypeByName memory _inputGachaTypeByName) external onlyOwner {\r\n        gachaTypeByName[_inputGachaTypeByName.name] = _inputGachaTypeByName.gachaType;\r\n        emit SetGachaTypeByName(_inputGachaTypeByName.name, _inputGachaTypeByName.gachaType);\r\n    }\r\n\r\n    function setGachaTypeByNames(InputGachaTypeByName[] memory _inputGachaTypeByNames) external onlyOwner {\r\n        for (uint256 i = 0; i < _inputGachaTypeByNames.length; i++) {\r\n            gachaTypeByName[_inputGachaTypeByNames[i].name] = _inputGachaTypeByNames[i].gachaType;\r\n            emit SetGachaTypeByName(_inputGachaTypeByNames[i].name, _inputGachaTypeByNames[i].gachaType);\r\n        }\r\n    }\r\n}\r\n// File: contracts/admin/admin/management/LuxOnService.sol\r\n\r\n\r\npragma solidity ^0.8.15;\r\n\r\n\r\ncontract LuxOnService is Ownable {\r\n    mapping(address => bool) isInspection;\r\n\r\n    event Inspection(address contractAddress, uint256 timestamp, bool live);\r\n\r\n    function isLive(address contractAddress) public view returns (bool) {\r\n        return !isInspection[contractAddress];\r\n    }\r\n\r\n    function setInspection(address[] memory contractAddresses, bool _isInspection) external onlyOwner {\r\n        for (uint256 i = 0; i < contractAddresses.length; i++) {\r\n            isInspection[contractAddresses[i]] = _isInspection;\r\n            emit Inspection(contractAddresses[i], block.timestamp, _isInspection);\r\n        }\r\n    }\r\n}\r\n// File: contracts/luxon/utils/management/LuxOnLive.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\n\r\ncontract LuxOnLive is Ownable {\r\n    address private luxOnService;\r\n\r\n    event SetLuxOnService(address indexed luxOnService);\r\n\r\n    constructor(\r\n        address _luxOnService\r\n    ) {\r\n        luxOnService = _luxOnService;\r\n    }\r\n\r\n    function getLuxOnService() public view returns (address) {\r\n        return luxOnService;\r\n    }\r\n\r\n    function setLuxOnService(address _luxOnService) external onlyOwner {\r\n        luxOnService = _luxOnService;\r\n        emit SetLuxOnService(_luxOnService);\r\n    }\r\n\r\n    modifier isLive() {\r\n        require(LuxOnService(luxOnService).isLive(address(this)), \"LuxOnLive: not live\");\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/admin/data/quest/calendar/QuestCalendarV2.sol\r\n\r\n\r\npragma solidity ^0.8.18;\r\n\r\n\r\n\r\ncontract QuestCalendar is Ownable {\r\n    uint256 public lastId = 0;\r\n    // id => type\r\n    mapping(uint256 => PeriodQuestInfo) public calendars;\r\n\r\n    function getLsatId() public view returns (uint256) {\r\n        return lastId;\r\n    }\r\n\r\n    function getQuestCalendar(uint256 id) public view returns (PeriodQuestInfo memory) {\r\n        return calendars[id];\r\n    }\r\n\r\n    function getQuestCalendars(uint256[] memory ids) public view returns (PeriodQuestInfo[] memory) {\r\n        PeriodQuestInfo[] memory _calendars = new PeriodQuestInfo[](ids.length);\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            _calendars[i] = calendars[ids[i]];\r\n        }\r\n        return _calendars;\r\n    }\r\n\r\n    function setQuestInfos(PeriodQuestInfo[] memory periodQuestInfos) external onlyOwner {\r\n        for (uint256 i = 0; i < periodQuestInfos.length; i++) {\r\n            calendars[periodQuestInfos[i].id] = periodQuestInfos[i];\r\n            if (lastId < periodQuestInfos[i].id) {\r\n                lastId = periodQuestInfos[i].id;\r\n            }\r\n        }\r\n    }\r\n\r\n    function setQuestInfo(PeriodQuestInfo memory periodQuestInfo) external onlyOwner {\r\n        calendars[periodQuestInfo.id] = periodQuestInfo;\r\n        if (lastId < periodQuestInfo.id) {\r\n            lastId = periodQuestInfo.id;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/admin/data/quest/period-quest/PeriodQuestDataV2.sol\r\n\r\n\r\npragma solidity ^0.8.18;\r\n\r\n\r\n\r\ncontract PeriodQuestData is Ownable {\r\n    // v1.5.0 id => v1.5.0\r\n    mapping(uint256 => Quest) questConditionMap;\r\n\r\n    function getQuest(uint256 questNo) public view returns (Quest memory) {\r\n        return questConditionMap[questNo];\r\n    }\r\n\r\n    function getQuests(uint256[] memory questNo) public view returns (Quest[] memory) {\r\n        Quest[] memory quests = new Quest[](questNo.length);\r\n        for (uint256 i = 0; i < questNo.length; i++) {\r\n            quests[i] = questConditionMap[questNo[i]];\r\n        }\r\n        return quests;\r\n    }\r\n\r\n    function setQuestDataMany(Quest[] memory _questData) external onlyOwner {\r\n        for (uint i = 0; i < _questData.length; i++) {\r\n            uint questNo = _questData[i].questNo;\r\n            delete questConditionMap[questNo];\r\n            Quest storage quest_ = questConditionMap[questNo];\r\n\r\n            quest_.questNo = questNo;\r\n            quest_.name = _questData[i].name;\r\n            quest_.requireQuest = _questData[i].requireQuest;\r\n            quest_.questCategory = _questData[i].questCategory;\r\n            quest_.stakingTime = _questData[i].stakingTime;\r\n            for (uint j = 0; j < _questData[i].rewards.length; j++) {\r\n                quest_.rewards.push(\r\n                    Reward(\r\n                        _questData[i].rewards[j].rewardType,\r\n                        _questData[i].rewards[j].reward,\r\n                        _questData[i].rewards[j].rewardAmount\r\n                    )\r\n                );\r\n            }\r\n\r\n            for (uint j = 0; j < _questData[i].questConditionSlot.length; j++) {\r\n                quest_.questConditionSlot.push(QuestConditionSlot(\r\n                        _questData[i].questConditionSlot[j].questType,\r\n                        _questData[i].questConditionSlot[j].conditionType,\r\n                        _questData[i].questConditionSlot[j].conditionValue,\r\n                        _questData[i].questConditionSlot[j].conditionAmount,\r\n                        _questData[i].questConditionSlot[j].subConditionType,\r\n                        _questData[i].questConditionSlot[j].subConditionValue\r\n                    ));\r\n            }\r\n        }\r\n    }\r\n\r\n    function setQuestData(Quest memory _questData) external onlyOwner {\r\n        delete questConditionMap[_questData.questNo];\r\n        Quest storage quest_ = questConditionMap[_questData.questNo];\r\n\r\n        quest_.questNo = _questData.questNo;\r\n        quest_.name = _questData.name;\r\n        quest_.requireQuest = _questData.requireQuest;\r\n        quest_.questCategory = _questData.questCategory;\r\n        quest_.stakingTime = _questData.stakingTime;\r\n\r\n        for (uint j = 0; j < _questData.rewards.length; j++) {\r\n            quest_.rewards.push(\r\n                Reward(\r\n                    _questData.rewards[j].rewardType,\r\n                    _questData.rewards[j].reward,\r\n                    _questData.rewards[j].rewardAmount\r\n                )\r\n            );\r\n        }\r\n\r\n        for (uint j = 0; j < _questData.questConditionSlot.length; j++) {\r\n            quest_.questConditionSlot.push(QuestConditionSlot(\r\n                    _questData.questConditionSlot[j].questType,\r\n                    _questData.questConditionSlot[j].conditionType,\r\n                    _questData.questConditionSlot[j].conditionValue,\r\n                    _questData.questConditionSlot[j].conditionAmount,\r\n                    _questData.questConditionSlot[j].subConditionType,\r\n                    _questData.questConditionSlot[j].subConditionValue\r\n                ));\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/admin/data/character/FateCoreData.sol\r\n\r\n\r\npragma solidity ^0.8.18;\r\n\r\n\r\ncontract DspFateCoreData is Ownable {\r\n    event SetFateCoreData(string indexed name, uint256 indexed tier, uint256 indexed gachaGrade, uint256 classType, uint256 nation, uint256 element, bool isValid);\r\n    event DeleteFateCoreData(string indexed name, uint256 indexed tier, uint256 indexed gachaGrade, uint256 classType, uint256 nation, uint256 element, bool isValid);\r\n    event SetFateCoreName(uint256 indexed id, string indexed name);\r\n\r\n    struct FateCoreInfo {\r\n        string name;\r\n        uint256 tier;\r\n        uint256 gachaGrade;\r\n        uint256 classType;\r\n        uint256 nation;\r\n        uint256 element;\r\n        uint256 rootId;\r\n        bool isValid;\r\n    }\r\n\r\n    struct FateCoreName {\r\n        uint256 id;\r\n        string name;\r\n    }\r\n\r\n    // fate core id => name\r\n    mapping(uint256 => string) private fateCoreName;\r\n    // name => fate core info\r\n    mapping(string => FateCoreInfo) private fateCoreData;\r\n    // tier => gacha grade => name[]\r\n    mapping(uint256 => mapping(uint256 => string[])) private fateCoreInfoTable;\r\n\r\n    uint256 private fateCoreCount;\r\n\r\n    function getFateCoreInfo(string memory name) public view returns(uint256, uint256, uint256, uint256, uint256, uint256, bool) {\r\n        return (fateCoreData[name].tier, fateCoreData[name].gachaGrade, fateCoreData[name].classType, fateCoreData[name].nation, fateCoreData[name].element, fateCoreData[name].rootId, fateCoreData[name].isValid);\r\n    }\r\n\r\n    function getFateCoreInfoIsValid(string memory name) public view returns(bool) {\r\n        return fateCoreData[name].isValid;\r\n    }\r\n\r\n    function getFateCoreName(uint256 id) public view returns (string memory) {\r\n        return fateCoreName[id];\r\n    }\r\n\r\n    function setFateCoreName(FateCoreName[] memory _fateCoreName) external onlyOwner {\r\n        for (uint256 i = 0; i < _fateCoreName.length; i++) {\r\n            fateCoreName[_fateCoreName[i].id] = _fateCoreName[i].name;\r\n            emit SetFateCoreName(_fateCoreName[i].id, _fateCoreName[i].name);\r\n        }\r\n    }\r\n\r\n    function setFateCoreData(FateCoreInfo[] memory _fateCoreData) external onlyOwner {\r\n        for (uint256 i = 0; i < _fateCoreData.length; i++) {\r\n            require(_fateCoreData[i].isValid, \"isValid false use delete\");\r\n            if (!fateCoreData[_fateCoreData[i].name].isValid) {\r\n                fateCoreCount++;\r\n            } else if (fateCoreData[_fateCoreData[i].name].tier != _fateCoreData[i].tier) {\r\n                uint256 index;\r\n                uint256 _tier = fateCoreData[_fateCoreData[i].name].tier;\r\n                uint256 _gachaGrade = fateCoreData[_fateCoreData[i].name].gachaGrade;\r\n                for (uint256 j = 0; j < fateCoreInfoTable[_tier][_gachaGrade].length; j++) {\r\n                    if (keccak256(abi.encodePacked(fateCoreInfoTable[_tier][_gachaGrade][j])) == keccak256(abi.encodePacked(_fateCoreData[i].name))) {\r\n                        index = j;\r\n                        break;\r\n                    }\r\n                }\r\n                for (uint256 j = index; j < fateCoreInfoTable[_tier][_gachaGrade].length - 1; j++) {\r\n                    fateCoreInfoTable[_tier][_gachaGrade][j] = fateCoreInfoTable[_tier][_gachaGrade][j + 1];\r\n                }\r\n                fateCoreInfoTable[_tier][_gachaGrade].pop();\r\n            }\r\n            fateCoreInfoTable[_fateCoreData[i].tier][_fateCoreData[i].gachaGrade].push(_fateCoreData[i].name);\r\n            fateCoreData[_fateCoreData[i].name] = _fateCoreData[i];\r\n\r\n            emit SetFateCoreData(_fateCoreData[i].name, _fateCoreData[i].tier, _fateCoreData[i].gachaGrade, _fateCoreData[i].classType, _fateCoreData[i].nation, _fateCoreData[i].element, _fateCoreData[i].isValid);\r\n        }\r\n    }\r\n\r\n    function deleteFateCoreData(string[] memory names) external onlyOwner {\r\n        for (uint256 i = 0; i < names.length; i++) {\r\n            uint256 _tier = fateCoreData[names[i]].tier;\r\n            uint256 _gachaGrade = fateCoreData[names[i]].gachaGrade;\r\n\r\n            uint256 index;\r\n            for (uint256 j = 0; j < fateCoreInfoTable[_tier][_gachaGrade].length; j++) {\r\n                if (keccak256(abi.encodePacked(fateCoreInfoTable[_tier][_gachaGrade][j])) == keccak256(abi.encodePacked(fateCoreData[names[i]].name))) {\r\n                    index = j;\r\n                    break;\r\n                }\r\n            }\r\n            for (uint256 j = index; j < fateCoreInfoTable[_tier][_gachaGrade].length - 1; j++) {\r\n                fateCoreInfoTable[_tier][_gachaGrade][j] = fateCoreInfoTable[_tier][_gachaGrade][j + 1];\r\n            }\r\n            fateCoreInfoTable[_tier][_gachaGrade].pop();\r\n            fateCoreCount--;\r\n\r\n            emit DeleteFateCoreData(fateCoreData[names[i]].name, fateCoreData[names[i]].tier, fateCoreData[names[i]].gachaGrade, fateCoreData[names[i]].classType, fateCoreData[names[i]].nation, fateCoreData[names[i]].element, fateCoreData[names[i]].isValid);\r\n            delete fateCoreData[names[i]];\r\n        }\r\n    }\r\n\r\n    function getFateCoreCount() public view returns (uint256) {\r\n        return fateCoreCount;\r\n    }\r\n\r\n    function getFateCoreCountByTireAndGachaGrade(uint256 _tier, uint256 _gachaGrade) public view returns (uint256) {\r\n        return fateCoreInfoTable[_tier][_gachaGrade].length;\r\n    }\r\n\r\n    function getFateCoreInfoByTireAndIndex(uint256 _tier, uint256 _gachaGrade, uint index) public view returns (string memory) {\r\n        return fateCoreInfoTable[_tier][_gachaGrade][index];\r\n    }\r\n}\r\n// File: contracts/admin/data/value-chip/ValueChipData.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\ncontract DspValueChipData is Ownable {\r\n    event SetValueChipInfo(uint256 indexed tokenId, string indexed name, uint256 indexed valueChipsType, string characterName, uint256 gameEnumByValueChipsType);\r\n    event RemoveValueChipInfo(uint256 indexed tokenId);\r\n\r\n    enum ValueChipsType { None, Hero, Class, Nation, Element }\r\n    uint256 private valueChipCount;\r\n\r\n    struct InputValueChipInfo {\r\n        uint256 tokenId;\r\n        string name;\r\n        ValueChipsType valueChipsType;\r\n        string characterName;\r\n        uint256 gameEnumByValueChipsType;\r\n        bool isValid;\r\n    }\r\n\r\n    struct ValueChipInfo {\r\n        string name;\r\n        ValueChipsType valueChipsType;\r\n        string characterName;\r\n        uint256 gameEnumByValueChipsType;\r\n        bool isValid;\r\n    }\r\n\r\n    // tokenId => ValueChipInfo\r\n    mapping(uint256 => ValueChipInfo) private valueChipInfo;\r\n    uint256[] private valueChipTokenIdList;\r\n\r\n    function getValueChipCount() public view returns (uint256) {\r\n        return valueChipCount;\r\n    }\r\n\r\n    function getValueChipInfo(uint256 _tokenId) public view returns (string memory, uint32, string memory, uint256, bool) {\r\n        return (\r\n        valueChipInfo[_tokenId].name,\r\n        uint32(valueChipInfo[_tokenId].valueChipsType),\r\n        valueChipInfo[_tokenId].characterName,\r\n        valueChipInfo[_tokenId].gameEnumByValueChipsType,\r\n        valueChipInfo[_tokenId].isValid\r\n        );\r\n    }\r\n\r\n    function getValueChipsIsValid(uint256 _tokenId) public view returns (bool) {\r\n        return valueChipInfo[_tokenId].isValid;\r\n    }\r\n\r\n    function getValueChipValueChipsType(uint256 _tokenId) public view returns (uint32) {\r\n        return uint32(valueChipInfo[_tokenId].valueChipsType);\r\n    }\r\n\r\n    function getValueChipTokenIdList() public view returns (uint256[] memory) {\r\n        return valueChipTokenIdList;\r\n    }\r\n\r\n    function setValueChipInfo(InputValueChipInfo memory _valueChipInfo) external onlyOwner {\r\n        require(_valueChipInfo.tokenId != 0, \"value chip id not valid\");\r\n        require(_valueChipInfo.isValid, \"value chip not valid\");\r\n        if (!valueChipInfo[_valueChipInfo.tokenId].isValid) {\r\n            valueChipCount++;\r\n        }\r\n        valueChipInfo[_valueChipInfo.tokenId] =\r\n        ValueChipInfo(\r\n            _valueChipInfo.name,\r\n            _valueChipInfo.valueChipsType,\r\n            _valueChipInfo.characterName,\r\n            _valueChipInfo.gameEnumByValueChipsType,\r\n            _valueChipInfo.isValid\r\n        );\r\n        emit SetValueChipInfo(_valueChipInfo.tokenId, _valueChipInfo.name, uint256(_valueChipInfo.valueChipsType), _valueChipInfo.characterName, _valueChipInfo.gameEnumByValueChipsType);\r\n    }\r\n\r\n    function setValueChipInfos(InputValueChipInfo[] memory _valueChipInfos) external onlyOwner {\r\n        for (uint256 i = 0; i < _valueChipInfos.length; i++) {\r\n            require(_valueChipInfos[i].tokenId != 0, \"value chip id not valid\");\r\n            require(_valueChipInfos[i].isValid, \"value chip not valid\");\r\n            if (!valueChipInfo[_valueChipInfos[i].tokenId].isValid) {\r\n                valueChipCount++;\r\n                valueChipTokenIdList.push(_valueChipInfos[i].tokenId);\r\n            }\r\n            valueChipInfo[_valueChipInfos[i].tokenId] =\r\n            ValueChipInfo(\r\n                _valueChipInfos[i].name,\r\n                _valueChipInfos[i].valueChipsType,\r\n                _valueChipInfos[i].characterName,\r\n                _valueChipInfos[i].gameEnumByValueChipsType,\r\n                _valueChipInfos[i].isValid\r\n            );\r\n            emit SetValueChipInfo(_valueChipInfos[i].tokenId, _valueChipInfos[i].name, uint256(_valueChipInfos[i].valueChipsType), _valueChipInfos[i].characterName, _valueChipInfos[i].gameEnumByValueChipsType);\r\n        }\r\n    }\r\n\r\n    function removeValueChipInfo(uint256 _tokenId) external onlyOwner {\r\n        require(_tokenId != 0, \"gacha ticket id not valid\");\r\n        if (valueChipInfo[_tokenId].isValid) {\r\n            valueChipCount--;\r\n            uint256 index;\r\n            for (uint256 i = 0; i < valueChipTokenIdList.length; i++) {\r\n                if (valueChipTokenIdList[i] == _tokenId) {\r\n                    index = i;\r\n                }\r\n            }\r\n            for (uint256 i = index; i < valueChipTokenIdList.length - 1; i++) {\r\n                valueChipTokenIdList[i] = valueChipTokenIdList[i + 1];\r\n            }\r\n            valueChipTokenIdList.pop();\r\n        }\r\n        emit RemoveValueChipInfo(_tokenId);\r\n        delete valueChipInfo[_tokenId];\r\n    }\r\n}\r\n// File: contracts/admin/admin/management/LuxOnAdmin.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\ncontract LuxOnAdmin is Ownable {\r\n\r\n    mapping(string => mapping(address => bool)) private _superOperators;\r\n\r\n    event SuperOperator(string operator, address superOperator, bool enabled);\r\n\r\n    function setSuperOperator(string memory operator, address[] memory _operatorAddress, bool enabled) external onlyOwner {\r\n        for (uint256 i = 0; i < _operatorAddress.length; i++) {\r\n            _superOperators[operator][_operatorAddress[i]] = enabled;\r\n            emit SuperOperator(operator, _operatorAddress[i], enabled);\r\n        }\r\n    }\r\n\r\n    function isSuperOperator(string memory operator, address who) public view returns (bool) {\r\n        return _superOperators[operator][who];\r\n    }\r\n}\r\n// File: contracts/luxon/utils/management/LuxOnSuperOperators.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\n\r\ncontract LuxOnSuperOperators is Ownable {\r\n\r\n    event SetLuxOnAdmin(address indexed luxOnAdminAddress);\r\n    event SetOperator(string indexed operator);\r\n\r\n    address private luxOnAdminAddress;\r\n    string private operator;\r\n\r\n    constructor(\r\n        string memory _operator,\r\n        address _luxOnAdminAddress\r\n    ) {\r\n        operator = _operator;\r\n        luxOnAdminAddress = _luxOnAdminAddress;\r\n    }\r\n\r\n    modifier onlySuperOperator() {\r\n        require(LuxOnAdmin(luxOnAdminAddress).isSuperOperator(operator, msg.sender), \"LuxOnSuperOperators: not super operator\");\r\n        _;\r\n    }\r\n\r\n    function getLuxOnAdmin() public view returns (address) {\r\n        return luxOnAdminAddress;\r\n    }\r\n\r\n    function getOperator() public view returns (string memory) {\r\n        return operator;\r\n    }\r\n\r\n    function setLuxOnAdmin(address _luxOnAdminAddress) external onlyOwner {\r\n        luxOnAdminAddress = _luxOnAdminAddress;\r\n        emit SetLuxOnAdmin(_luxOnAdminAddress);\r\n    }\r\n\r\n    function setOperator(string memory _operator) external onlyOwner {\r\n        operator = _operator;\r\n        emit SetOperator(_operator);\r\n    }\r\n\r\n    function isSuperOperator(address spender) public view returns (bool) {\r\n        return LuxOnAdmin(luxOnAdminAddress).isSuperOperator(operator, spender);\r\n    }\r\n}\r\n\r\n// File: contracts/admin/admin/management/LuxOnAuthority.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\ncontract LuxOnAuthority is Ownable {\r\n    mapping (address => bool) blacklist;\r\n\r\n    event Blacklist(address userAddress, uint256 timestamp, bool live);\r\n\r\n    function isBlacklist(address user) public view returns (bool){\r\n        return blacklist[user];\r\n    }\r\n\r\n    function setBlacklist(address[] memory userAddresses, bool _isBlacklist) external onlyOwner {\r\n        for (uint256 i = 0; i < userAddresses.length; i++) {\r\n            blacklist[userAddresses[i]] = _isBlacklist;\r\n            emit Blacklist(userAddresses[i], block.timestamp, _isBlacklist);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File: contracts/luxon/utils/management/LuxOnBlacklist.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\n\r\n\r\ncontract LuxOnBlacklist is Ownable {\r\n    address private luxOnAuthority;\r\n\r\n    event SetLuxOnAuthority (address indexed luxOnAuthority);\r\n\r\n    constructor(\r\n        address _luxOnAuthority\r\n    ){\r\n        luxOnAuthority = _luxOnAuthority;\r\n    }\r\n\r\n    function getLuxOnAuthority() external view returns(address) {\r\n        return luxOnAuthority;\r\n    }\r\n\r\n    function setLuxOnAuthority(address _luxOnAuthority) external onlyOwner{\r\n        luxOnAuthority = _luxOnAuthority;\r\n    }\r\n\r\n    function getIsInBlacklist(address _userAddress) external view returns(bool) {\r\n        return LuxOnAuthority(luxOnAuthority).isBlacklist(_userAddress);\r\n    }\r\n\r\n    modifier isBlacklist(address _userAddress) {\r\n        // blacklist\uc5d0 \ub4f1\ub85d\ub41c \uc720\uc800 => true / \ub4f1\ub85d\ub418\uc9c0 \uc54a\uc740 \uc720\uc800 => false ---> !\ub97c \ubd99\uc5ec\uc11c \ubc18\ub300 \uac12\uc73c\ub85c \uc5d0\ub7ec \ubc1c\uc0dd (true\uba74 \uc5d0\ub7ec \ubc1c\uc0dd)\r\n        require(LuxOnAuthority(luxOnAuthority).isBlacklist(_userAddress) == false, \"LuxOnBlacklist: This user is on the blacklist\");\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n\r\n// File: contracts/admin/admin/management/DataAddress.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\ncontract DspDataAddress is Ownable {\r\n\r\n    event SetDataAddress(string indexed name, address indexed dataAddress, bool indexed isValid);\r\n\r\n    struct DataAddressInfo {\r\n        string name;\r\n        address dataAddress;\r\n        bool isValid;\r\n    }\r\n\r\n    mapping(string => DataAddressInfo) private dataAddresses;\r\n\r\n    function getDataAddress(string memory _name) public view returns (address) {\r\n        require(dataAddresses[_name].isValid, \"this data address is not valid\");\r\n        return dataAddresses[_name].dataAddress;\r\n    }\r\n\r\n    function setDataAddress(DataAddressInfo memory _dataAddressInfo) external onlyOwner {\r\n        dataAddresses[_dataAddressInfo.name] = _dataAddressInfo;\r\n        emit SetDataAddress(_dataAddressInfo.name, _dataAddressInfo.dataAddress, _dataAddressInfo.isValid);\r\n    }\r\n\r\n    function setDataAddresses(DataAddressInfo[] memory _dataAddressInfos) external onlyOwner {\r\n        for (uint256 i = 0; i < _dataAddressInfos.length; i++) {\r\n            dataAddresses[_dataAddressInfos[i].name] = _dataAddressInfos[i];\r\n            emit SetDataAddress(_dataAddressInfos[i].name, _dataAddressInfos[i].dataAddress, _dataAddressInfos[i].isValid);\r\n        }\r\n    }\r\n}\r\n// File: contracts/luxon/utils/management/LuxOnData.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\n\r\ncontract LuxOnData is Ownable {\r\n    address private luxonData;\r\n    event SetLuxonData(address indexed luxonData);\r\n\r\n    constructor(\r\n        address _luxonData\r\n    ) {\r\n        luxonData = _luxonData;\r\n    }\r\n\r\n    function getLuxOnData() public view returns (address) {\r\n        return luxonData;\r\n    }\r\n\r\n    function setLuxOnData(address _luxonData) external onlyOwner {\r\n        luxonData = _luxonData;\r\n        emit SetLuxonData(_luxonData);\r\n    }\r\n\r\n    function getDataAddress(string memory _name) public view returns (address) {\r\n        return DspDataAddress(luxonData).getDataAddress(_name);\r\n    }\r\n}\r\n\r\n// File: contracts/luxon/quest/period-quest/PeriodQuestStorageV2.sol\r\n\r\n\r\npragma solidity ^0.8.18;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract PeriodQuestStorage is LuxOnSuperOperators, LuxOnData {\r\n    event SetStakeInfo(address indexed userAddress, uint256 indexed id, uint256 indexed tokenId, uint256 amt, uint256 conditionType);\r\n    event SetBurnWaitList(address indexed userAddress, uint256 indexed id, uint256 indexed tokenId, uint256 amt, uint256 questType, uint256 idx);\r\n    event SetSlotData(address indexed userAddress, uint256 indexed id, uint256 indexed tokenId, uint256 amt, uint256 idx);\r\n    event SetClear(address indexed userAddress, uint256 indexed id);\r\n    event CancelQuest(address indexed userAddress, uint256 indexed id);\r\n    event SoldOut(uint256 indexed questType, uint256 indexed id, uint256 indexed remainCount);\r\n\r\n    using SafeMath for uint256;\r\n\r\n    // address => v1.5.0 id\r\n    mapping(address => uint256[]) public userQuestClearInfo;\r\n    mapping(address => mapping(uint256 => bool)) public userQuestClearState;\r\n    // address => id => count\r\n    mapping(address => mapping(uint256 => uint256)) public userClearCount;\r\n    // address => type => clear\r\n    mapping(address => mapping(uint256 => uint256[])) public userPeriodClearInfo;\r\n    mapping(address => mapping(uint256 => uint256)) public userPeriodClearTime;\r\n\r\n    // id => count\r\n    mapping(uint256 => uint256) public questClearCount;\r\n    // address => id => v1.5.0 info\r\n    mapping(address => mapping(uint256 => QuestInfo)) public userQuestInfo;\r\n    mapping(address => mapping(uint256 => StakeInfo[])) public userStakeInfo;\r\n    mapping(address => mapping(uint256 => BurnWaitInfo[])) public userBurnWaitList;\r\n    uint256 constant HOUR = 3600;\r\n\r\n    uint256 public soldOutCount = 3;\r\n\r\n    constructor(\r\n        address dataAddress,\r\n        string memory operator,\r\n        address luxOnAdmin\r\n    ) LuxOnData(dataAddress) LuxOnSuperOperators(operator, luxOnAdmin) {}\r\n\r\n    function getQuestCount(uint256 id) public view returns (uint256) {\r\n        //PeriodQuestInfo memory periodQuestInfo = QuestCalendar(getDataAddress(\"QuestCalendar\")).getQuestCalendar(id);\r\n        return questClearCount[id];\r\n    }\r\n\r\n    function getQuestCounts(uint256[] memory ids) public view returns (uint256[] memory) {\r\n        uint256[] memory counts = new uint256[](ids.length);\r\n        //PeriodQuestInfo[] memory periodQuestInfos = QuestCalendar(getDataAddress(\"QuestCalendar\")).getQuestCalendars(ids);\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            counts[i] = questClearCount[ids[i]];\r\n        }\r\n        return counts;\r\n    }\r\n\r\n    function getClearState(address _address, uint256 id) public view returns (bool) {\r\n        return userQuestClearState[_address][id];\r\n    }\r\n\r\n    function getClearCount(address _address, uint256 id) public view returns (uint256) {\r\n        return userClearCount[_address][id];\r\n    }\r\n\r\n    function getQuestStorage(address _address, uint256 id) public view returns (QuestInfo memory) {\r\n        return userQuestInfo[_address][id];\r\n    }\r\n\r\n    function getBurnInfo(address _address, uint256 id) public view returns(BurnWaitInfo[] memory) {\r\n        return userBurnWaitList[_address][id];\r\n    }\r\n\r\n    function getStakingInfo(address _address, uint256 id) public view returns (StakeInfo[] memory) {\r\n        return userStakeInfo[_address][id];\r\n    }\r\n\r\n    function getClearQuestList(address _address) public view returns (uint256[] memory) {\r\n        return userQuestClearInfo[_address];\r\n    }\r\n\r\n    function getUserPeriodClearInfo(address _address, uint256 questType) public view returns (uint256[] memory) {\r\n        return userPeriodClearInfo[_address][questType];\r\n    }\r\n\r\n    function getUserPeriodClearTime(address _address, uint256 questType) public view returns (uint256) {\r\n        return userPeriodClearTime[_address][questType];\r\n    }\r\n\r\n    function getClearCondition(address user, uint256 currentId, uint256 requireId, uint256 finishId) public view returns (uint256, uint256, uint256, uint256) {\r\n        return (\r\n        getQuestCount(finishId),\r\n        getClearCount(user, currentId),\r\n        getClearCount(user, requireId),\r\n        getClearCount(user, finishId)\r\n        );\r\n    }\r\n\r\n    function resetUserPeriodClearInfo(address _address, uint256 questType) external onlySuperOperator {\r\n        if (0 != userPeriodClearInfo[_address][questType].length) {\r\n            delete userPeriodClearInfo[_address][questType];\r\n        }\r\n    }\r\n\r\n    function setSoldOutCount(uint256 _soldOutCount) external onlySuperOperator {\r\n        soldOutCount = _soldOutCount;\r\n    }\r\n\r\n    function setClearQuestList(address _address, uint256[] memory ids, uint256 questType, bool isClear) external onlySuperOperator {\r\n        // PeriodQuestInfo[] memory calendars = QuestCalendar(getDataAddress(\"QuestCalendar\")).getQuestCalendars(ids);\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            if (isClear) {\r\n                if (!userQuestClearState[_address][ids[i]]) {\r\n                    userQuestClearInfo[_address].push(ids[i]);\r\n                    userPeriodClearInfo[_address][questType].push(ids[i]);\r\n                    userQuestClearState[_address][ids[i]] = true;\r\n                }\r\n                userPeriodClearTime[_address][questType] = block.timestamp;\r\n                userClearCount[_address][ids[i]]++;\r\n                questClearCount[ids[i]]++;\r\n            } else if (!isClear && 0 != userClearCount[_address][ids[i]]) {\r\n                for (uint256 j = 0; j < userQuestClearInfo[_address].length; j++) {\r\n                    if (userQuestClearInfo[_address][j] == ids[i]) {\r\n                        userQuestClearInfo[_address][j] = userQuestClearInfo[_address][userQuestClearInfo[_address].length - 1];\r\n                        userQuestClearInfo[_address].pop();\r\n                        break;\r\n                    }\r\n                }\r\n                for (uint256 j = 0; j < userPeriodClearInfo[_address][questType].length; j++) {\r\n                    if (userPeriodClearInfo[_address][questType][j] == ids[i]) {\r\n                        userPeriodClearInfo[_address][questType][j] = userPeriodClearInfo[_address][questType][userPeriodClearInfo[_address][questType].length - 1];\r\n                        userPeriodClearInfo[_address][questType].pop();\r\n                        break;\r\n                    }\r\n                }\r\n                userPeriodClearTime[_address][questType] = block.timestamp;\r\n                userClearCount[_address][ids[i]]--;\r\n                if (0 == userClearCount[_address][ids[i]]) {\r\n                    userQuestClearState[_address][ids[i]] = false;\r\n                }\r\n                questClearCount[ids[i]]--;\r\n            }\r\n        }\r\n    }\r\n\r\n    function setClearCount(CalculateType setType, uint256 id, uint256 count) external onlySuperOperator {\r\n        if (CalculateType.SET == setType) {\r\n            questClearCount[id] = count;\r\n        } else if (CalculateType.ADD == setType) {\r\n            questClearCount[id] += count;\r\n        } else if (CalculateType.SUB == setType) {\r\n            questClearCount[id] -= count;\r\n        }\r\n    }\r\n\r\n    function setStakeInfo(address _address, uint256 id, uint256 _tokenId, uint256 _amt, uint256 _conditionType) external onlySuperOperator {\r\n        userStakeInfo[_address][id].push(StakeInfo(_tokenId, _amt, _conditionType));\r\n        emit SetStakeInfo(_address, id, _tokenId, _amt, _conditionType);\r\n    }\r\n\r\n    function setBurnWaitList(address _address, uint256 id, uint256 _tokenId, uint256 _amt, uint256 _questType, uint256 _idx) external onlySuperOperator {\r\n        userBurnWaitList[_address][id].push(BurnWaitInfo(_tokenId, _amt, _questType, _idx));\r\n        emit SetBurnWaitList(_address, id, _tokenId, _amt, _questType, _idx);\r\n    }\r\n\r\n    function setSlotData(address _address, uint256 id, uint256 _tokenId, uint256 _amt, uint256 _idx) external onlySuperOperator {\r\n        userQuestInfo[_address][id].slotData.push(QuestSlotInfo(_tokenId, _amt, true));\r\n        emit SetSlotData(_address, id, _tokenId, _amt, _idx);\r\n    }\r\n\r\n    function setClear(address _address, uint256 id, uint256 finishId, uint256 questType) external onlySuperOperator {\r\n        if (!userQuestClearState[_address][id]) {\r\n            userQuestClearInfo[_address].push(id);\r\n            userPeriodClearInfo[_address][questType].push(id);\r\n            userQuestClearState[_address][id] = true;\r\n        }\r\n        userClearCount[_address][id]++;\r\n        questClearCount[id]++;\r\n        if (finishId == id) {\r\n            PeriodQuestInfo memory calendar = QuestCalendar(getDataAddress(\"QuestCalendar\")).getQuestCalendar(id);\r\n            if (LimitType.LIMIT == calendar.limitType && calendar.limit - soldOutCount < questClearCount[id]) {\r\n                emit SoldOut(questType, id, calendar.limit - questClearCount[id]);\r\n            }\r\n        }\r\n        userPeriodClearTime[_address][questType] = block.timestamp;\r\n        deleteQuest(_address, id);\r\n        emit SetClear(_address, id);\r\n    }\r\n\r\n    function cancelQuest(address _address, uint256 id) external onlySuperOperator {\r\n        require(id == userQuestInfo[_address][id].questNo, \"INVALID questNo\");\r\n        deleteQuest(_address, id);\r\n        emit CancelQuest(_address, id);\r\n    }\r\n\r\n    function deleteQuest(address _address, uint256 id) private {\r\n        delete userQuestInfo[_address][id];\r\n        delete userBurnWaitList[_address][id];\r\n        delete userStakeInfo[_address][id];\r\n    }\r\n\r\n    function startQuest(address _address, uint256 id, uint256 stakingTime) external onlySuperOperator {\r\n        userQuestInfo[_address][id].questNo = id;\r\n        userQuestInfo[_address][id].startAt = block.timestamp;\r\n        userQuestInfo[_address][id].endAt = block.timestamp.add(HOUR.mul(stakingTime));\r\n    }\r\n}\r\n\r\n// File: contracts/admin/data/character/CharacterData.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\n\r\n\r\ncontract DspCharacterData is Ownable, LuxOnData {\r\n    event SetCharacterData(string indexed name, uint256 indexed tier, uint256 indexed gachaGrade, uint256 classType, uint256 nation, uint256 element, bool isValid);\r\n    event DeleteCharacterData(string indexed name, uint256 indexed tier, uint256 indexed gachaGrade, uint256 classType, uint256 nation, uint256 element, bool isValid);\r\n    event SetCharacterName(uint256 indexed id, string indexed name);\r\n\r\n    struct CharacterInfo {\r\n        string name;\r\n        uint256 tier;\r\n        uint256 gachaGrade;\r\n        uint256 classType;\r\n        uint256 nation;\r\n        uint256 element;\r\n        uint256 rootId;\r\n        bool isValid;\r\n    }\r\n\r\n    struct CharacterName {\r\n        uint256 id;\r\n        string name;\r\n    }\r\n\r\n    struct MatchValueChip {\r\n        string name;\r\n        uint256 valueChipId;\r\n    }\r\n\r\n    constructor(address dataAddress) LuxOnData(dataAddress) {}\r\n\r\n    string public valueChipData = \"DspValueChipData\";\r\n\r\n    // character id => name\r\n    mapping(uint256 => string) private characterName;\r\n    // name => character info\r\n    mapping(string => CharacterInfo) private characterData;\r\n    // tier => gacha grade => name[]\r\n    mapping(uint256 => mapping(uint256 => string[])) private characterInfoTable;\r\n    // name => value chip\r\n    mapping(string => uint256) private matchValueChip;\r\n\r\n    uint256 private characterCount;\r\n\r\n    function getCharacterInfo(string memory name) public view returns(uint256, uint256, uint256, uint256, uint256, uint256, bool) {\r\n        return (characterData[name].tier, characterData[name].gachaGrade, characterData[name].classType, characterData[name].nation, characterData[name].element, characterData[name].rootId, characterData[name].isValid);\r\n    }\r\n\r\n    function getCharacterInfoIsValid(string memory name) public view returns(bool) {\r\n        return characterData[name].isValid;\r\n    }\r\n\r\n    function getCharacterName(uint256 id) public view returns (string memory) {\r\n        return characterName[id];\r\n    }\r\n\r\n    function setMatchValueChip(MatchValueChip[] memory _matchValueChips) external onlyOwner {\r\n        address valueChipAddress = getDataAddress(valueChipData);\r\n        for (uint256 i = 0; i < _matchValueChips.length; i++) {\r\n            ( , uint32 _valueChipsType, string memory _characterName, , bool _isValid) = DspValueChipData(valueChipAddress).getValueChipInfo(_matchValueChips[i].valueChipId);\r\n            if (\r\n                _isValid &&\r\n                _valueChipsType == uint32(DspValueChipData.ValueChipsType.Hero) &&\r\n                uint(keccak256(abi.encodePacked(_characterName))) == uint(keccak256(abi.encodePacked(_matchValueChips[i].name)))\r\n            ) {\r\n                matchValueChip[_matchValueChips[i].name] = _matchValueChips[i].valueChipId;\r\n            }\r\n        }\r\n    }\r\n\r\n    function setCharacterName(CharacterName[] memory _characterName) external onlyOwner {\r\n        for (uint256 i = 0; i < _characterName.length; i++) {\r\n            characterName[_characterName[i].id] = _characterName[i].name;\r\n            emit SetCharacterName(_characterName[i].id, _characterName[i].name);\r\n        }\r\n    }\r\n\r\n    function setCharacterData(CharacterInfo[] memory _characterData) external onlyOwner {\r\n        for (uint256 i = 0; i < _characterData.length; i++) {\r\n            require(_characterData[i].isValid, \"isValid false use delete\");\r\n            if (!characterData[_characterData[i].name].isValid) {\r\n                characterCount++;\r\n            } else if (characterData[_characterData[i].name].tier != _characterData[i].tier) {\r\n                uint256 index;\r\n                uint256 _tier = characterData[_characterData[i].name].tier;\r\n                uint256 _gachaGrade = characterData[_characterData[i].name].gachaGrade;\r\n                for (uint256 j = 0; j < characterInfoTable[_tier][_gachaGrade].length; j++) {\r\n                    if (keccak256(abi.encodePacked(characterInfoTable[_tier][_gachaGrade][j])) == keccak256(abi.encodePacked(_characterData[i].name))) {\r\n                        index = j;\r\n                        break;\r\n                    }\r\n                }\r\n                for (uint256 j = index; j < characterInfoTable[_tier][_gachaGrade].length - 1; j++) {\r\n                    characterInfoTable[_tier][_gachaGrade][j] = characterInfoTable[_tier][_gachaGrade][j + 1];\r\n                }\r\n                characterInfoTable[_tier][_gachaGrade].pop();\r\n            }\r\n            characterInfoTable[_characterData[i].tier][_characterData[i].gachaGrade].push(_characterData[i].name);\r\n            characterData[_characterData[i].name] = _characterData[i];\r\n\r\n            emit SetCharacterData(_characterData[i].name, _characterData[i].tier, _characterData[i].gachaGrade, _characterData[i].classType, _characterData[i].nation, _characterData[i].element, _characterData[i].isValid);\r\n        }\r\n    }\r\n\r\n    function deleteCharacterData(string[] memory names) external onlyOwner {\r\n        for (uint256 i = 0; i < names.length; i++) {\r\n            uint256 _tier = characterData[names[i]].tier;\r\n            uint256 _gachaGrade = characterData[names[i]].gachaGrade;\r\n\r\n            uint256 index;\r\n            for (uint256 j = 0; j < characterInfoTable[_tier][_gachaGrade].length; j++) {\r\n                if (keccak256(abi.encodePacked(characterInfoTable[_tier][_gachaGrade][j])) == keccak256(abi.encodePacked(characterData[names[i]].name))) {\r\n                    index = j;\r\n                    break;\r\n                }\r\n            }\r\n            for (uint256 j = index; j < characterInfoTable[_tier][_gachaGrade].length - 1; j++) {\r\n                characterInfoTable[_tier][_gachaGrade][j] = characterInfoTable[_tier][_gachaGrade][j + 1];\r\n            }\r\n            characterInfoTable[_tier][_gachaGrade].pop();\r\n            characterCount--;\r\n\r\n            emit DeleteCharacterData(characterData[names[i]].name, characterData[names[i]].tier, characterData[names[i]].gachaGrade, characterData[names[i]].classType, characterData[names[i]].nation, characterData[names[i]].element, characterData[names[i]].isValid);\r\n            delete characterData[names[i]];\r\n        }\r\n    }\r\n\r\n    function getMatchValueChip(string memory _name) public view returns (uint256) {\r\n        return matchValueChip[_name];\r\n    }\r\n\r\n    function getCharacterCount() public view returns (uint256) {\r\n        return characterCount;\r\n    }\r\n\r\n    function getCharacterCountByTireAndGachaGrade(uint256 _tier, uint256 _gachaGrade) public view returns (uint256) {\r\n        return characterInfoTable[_tier][_gachaGrade].length;\r\n    }\r\n\r\n    function getCharacterInfoByTireAndIndex(uint256 _tier, uint256 _gachaGrade, uint index) public view returns (string memory) {\r\n        return characterInfoTable[_tier][_gachaGrade][index];\r\n    }\r\n}\r\n\r\n// File: contracts/luxon/utils/erc20/IERC20LUXON.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.16;\r\n\r\ninterface IERC20LUXON {\r\n    function paybackFrom() external view returns (address);\r\n\r\n    function addAllowanceIfNeeded(address owner, address spender, uint256 amountNeeded) external returns (bool success);\r\n    function approveFor(address owner, address spender, uint256 amount) external returns (bool success);\r\n\r\n    function paybackByMint(address to, uint256 amount) external;\r\n    function paybackByTransfer(address to, uint256 amount) external;\r\n    function burnFor(address owner, uint256 amount) external returns (bool);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/luxon/utils/erc1155/IERC1155LUXON.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\ninterface IERC1155LUXON {\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, uint256 amount, bytes memory data) external;\r\n    function getValueChipType() external view returns(uint32);\r\n    function mint(address account, uint256 id, uint256 amount, bytes memory data) external;\r\n}\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(\r\n        address[] calldata accounts,\r\n        uint256[] calldata ids\r\n    ) external view returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\r\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155MetadataURI is IERC1155 {\r\n    /**\r\n     * @dev Returns the URI for token type `id`.\r\n     *\r\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\r\n     * clients with the actual token type ID.\r\n     */\r\n    function uri(uint256 id) external view returns (string memory);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: contracts/luxon/utils/erc721/ERC721LUXON.sol\r\n\r\n\r\npragma solidity ^0.8.13;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    error ApprovalCallerNotOwnerNorApproved();\r\n    error ApprovalQueryForNonexistentToken();\r\n    error ApproveToCaller();\r\n    error ApprovalToCurrentOwner();\r\n    error BalanceQueryForZeroAddress();\r\n    error MintToZeroAddress();\r\n    error MintZeroQuantity();\r\n    error OwnerQueryForNonexistentToken();\r\n    error TransferCallerNotOwnerNorApproved();\r\n    error TransferFromIncorrectOwner();\r\n    error TransferToNonERC721ReceiverImplementer();\r\n    error TransferToZeroAddress();\r\n    error URIQueryForNonexistentToken();\r\n\r\ncontract ERC721LUXON is Context, ERC165, IERC721, IERC721Metadata, LuxOnSuperOperators {\r\n    string private baseURI = \"\";\r\n\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        string memory operator,\r\n        address luxOnAdmin\r\n    ) LuxOnSuperOperators(operator, luxOnAdmin) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _currentIndex = _startTokenId();\r\n    }\r\n\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    struct TokenOwnership {\r\n        address addr;\r\n        uint64 startTimestamp;\r\n        bool burned;\r\n    }\r\n\r\n    struct AddressData {\r\n        uint64 balance;\r\n        uint64 numberMinted;\r\n        uint64 numberBurned;\r\n        uint64 aux;\r\n    }\r\n\r\n    uint256 internal _currentIndex;\r\n    uint256 internal _burnCounter;\r\n    string private _name;\r\n    string private _symbol;\r\n    mapping(uint256 => TokenOwnership) internal _ownerships;\r\n    mapping(address => AddressData) private _addressData;\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    function _startTokenId() internal pure returns (uint256) {\r\n        return 1;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n    unchecked {\r\n        return _currentIndex - _burnCounter - _startTokenId();\r\n    }\r\n    }\r\n\r\n    function _totalMinted() internal view returns (uint256) {\r\n    unchecked {\r\n        return _currentIndex - _startTokenId();\r\n    }\r\n    }\r\n\r\n    function nextTokenId() public view returns (uint256) {\r\n        return _currentIndex;\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view override(ERC165, IERC165) returns (bool) {\r\n        return\r\n        interfaceId == type(IERC721).interfaceId ||\r\n        interfaceId == type(IERC721Metadata).interfaceId ||\r\n        super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function balanceOf(address owner) public view override returns (uint256) {\r\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\r\n        return uint256(_addressData[owner].balance);\r\n    }\r\n\r\n    function _numberMinted(address owner) internal view returns (uint256) {\r\n        return uint256(_addressData[owner].numberMinted);\r\n    }\r\n\r\n    function _numberBurned(address owner) internal view returns (uint256) {\r\n        return uint256(_addressData[owner].numberBurned);\r\n    }\r\n\r\n    function _getAux(address owner) internal view returns (uint64) {\r\n        return _addressData[owner].aux;\r\n    }\r\n\r\n    function _setAux(address owner, uint64 aux) internal {\r\n        _addressData[owner].aux = aux;\r\n    }\r\n\r\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\r\n        uint256 curr = tokenId;\r\n\r\n    unchecked {\r\n        if (_startTokenId() <= curr && curr < _currentIndex) {\r\n            TokenOwnership memory ownership = _ownerships[curr];\r\n            if (!ownership.burned) {\r\n                if (ownership.addr != address(0)) {\r\n                    return ownership;\r\n                }\r\n                while (true) {\r\n                    curr--;\r\n                    ownership = _ownerships[curr];\r\n                    if (ownership.addr != address(0)) {\r\n                        return ownership;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n        revert OwnerQueryForNonexistentToken();\r\n    }\r\n\r\n    function ownerOf(uint256 tokenId) public view override returns (address) {\r\n        return _ownershipOf(tokenId).addr;\r\n    }\r\n\r\n    function name() public view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\r\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\r\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\r\n    }\r\n\r\n    function approve(address to, uint256 tokenId) public override {\r\n        address owner = ERC721LUXON.ownerOf(tokenId);\r\n        if (to == owner) revert ApprovalToCurrentOwner();\r\n\r\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\r\n            revert ApprovalCallerNotOwnerNorApproved();\r\n        }\r\n\r\n        _approve(to, tokenId, owner);\r\n    }\r\n\r\n    function getApproved(uint256 tokenId) public view override returns (address) {\r\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool approved) public override {\r\n        if (operator == _msgSender()) revert ApproveToCaller();\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    function isApprovedForAll(address owner, address operator) public view override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public override {\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public override {\r\n        safeTransferFrom(from, to, tokenId, '');\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public override {\r\n        _transfer(from, to, tokenId);\r\n        if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {\r\n            revert TransferToNonERC721ReceiverImplementer();\r\n        }\r\n    }\r\n\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        return _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned;\r\n    }\r\n\r\n    function _safeMint(address to, uint256 quantity) internal {\r\n        _safeMint(to, quantity, '');\r\n    }\r\n\r\n    function _safeMint(\r\n        address to,\r\n        uint256 quantity,\r\n        bytes memory _data\r\n    ) internal {\r\n        _mint(to, quantity, _data, true);\r\n    }\r\n\r\n    function _mint(\r\n        address to,\r\n        uint256 quantity,\r\n        bytes memory _data,\r\n        bool safe\r\n    ) internal {\r\n        uint256 startTokenId = _currentIndex;\r\n        if (to == address(0)) revert MintToZeroAddress();\r\n        if (quantity == 0) revert MintZeroQuantity();\r\n\r\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n    unchecked {\r\n        _addressData[to].balance += uint64(quantity);\r\n        _addressData[to].numberMinted += uint64(quantity);\r\n\r\n        _ownerships[startTokenId].addr = to;\r\n        _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\r\n\r\n        uint256 updatedIndex = startTokenId;\r\n        uint256 end = updatedIndex + quantity;\r\n\r\n        if (safe && to.isContract()) {\r\n            do {\r\n                emit Transfer(address(0), to, updatedIndex);\r\n                if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\r\n                    revert TransferToNonERC721ReceiverImplementer();\r\n                }\r\n            } while (updatedIndex != end);\r\n            if (_currentIndex != startTokenId) revert();\r\n        } else {\r\n            do {\r\n                emit Transfer(address(0), to, updatedIndex++);\r\n            } while (updatedIndex != end);\r\n        }\r\n        _currentIndex = updatedIndex;\r\n    }\r\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) private {\r\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\r\n\r\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\r\n\r\n        bool isApprovedOrOwner = (_msgSender() == from ||\r\n        isApprovedForAll(from, _msgSender()) ||\r\n        getApproved(tokenId) == _msgSender() ||\r\n        isSuperOperator(_msgSender()));\r\n\r\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\r\n        if (to == address(0)) revert TransferToZeroAddress();\r\n\r\n        _beforeTokenTransfers(from, to, tokenId, 1);\r\n\r\n        _approve(address(0), tokenId, from);\r\n\r\n    unchecked {\r\n        _addressData[from].balance -= 1;\r\n        _addressData[to].balance += 1;\r\n\r\n        TokenOwnership storage currSlot = _ownerships[tokenId];\r\n        currSlot.addr = to;\r\n        currSlot.startTimestamp = uint64(block.timestamp);\r\n\r\n        uint256 _nextTokenId = tokenId + 1;\r\n        TokenOwnership storage nextSlot = _ownerships[_nextTokenId];\r\n        if (nextSlot.addr == address(0)) {\r\n            if (_nextTokenId != _currentIndex) {\r\n                nextSlot.addr = from;\r\n                nextSlot.startTimestamp = prevOwnership.startTimestamp;\r\n            }\r\n        }\r\n    }\r\n\r\n        emit Transfer(from, to, tokenId);\r\n        _afterTokenTransfers(from, to, tokenId, 1);\r\n    }\r\n\r\n    function _burn(uint256 tokenId) internal {\r\n        _burn(tokenId, false);\r\n    }\r\n\r\n    function _burn(uint256 tokenId, bool approvalCheck) internal {\r\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\r\n\r\n        address from = prevOwnership.addr;\r\n\r\n        if (approvalCheck) {\r\n            bool isApprovedOrOwner = (_msgSender() == from ||\r\n            isApprovedForAll(from, _msgSender()) ||\r\n            getApproved(tokenId) == _msgSender() ||\r\n            isSuperOperator(_msgSender()));\r\n\r\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\r\n        }\r\n\r\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\r\n\r\n        _approve(address(0), tokenId, from);\r\n\r\n    unchecked {\r\n        AddressData storage addressData = _addressData[from];\r\n        addressData.balance -= 1;\r\n        addressData.numberBurned += 1;\r\n\r\n        TokenOwnership storage currSlot = _ownerships[tokenId];\r\n        currSlot.addr = from;\r\n        currSlot.startTimestamp = uint64(block.timestamp);\r\n        currSlot.burned = true;\r\n\r\n        uint256 _nextTokenId = tokenId + 1;\r\n        TokenOwnership storage nextSlot = _ownerships[_nextTokenId];\r\n        if (nextSlot.addr == address(0)) {\r\n            if (_nextTokenId != _currentIndex) {\r\n                nextSlot.addr = from;\r\n                nextSlot.startTimestamp = prevOwnership.startTimestamp;\r\n            }\r\n        }\r\n    }\r\n\r\n        emit Transfer(from, address(0), tokenId);\r\n        _afterTokenTransfers(from, address(0), tokenId, 1);\r\n\r\n    unchecked {\r\n        _burnCounter++;\r\n    }\r\n    }\r\n\r\n    function _approve(\r\n        address to,\r\n        uint256 tokenId,\r\n        address owner\r\n    ) private {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n\r\n    function _checkContractOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n            return retval == IERC721Receiver(to).onERC721Received.selector;\r\n        } catch (bytes memory reason) {\r\n            if (reason.length == 0) {\r\n                revert TransferToNonERC721ReceiverImplementer();\r\n            } else {\r\n                assembly {\r\n                    revert(add(32, reason), mload(reason))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal {}\r\n\r\n    function _afterTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal {}\r\n\r\n    function setBaseURI(string memory baseURI_) external onlyOwner {\r\n        baseURI = baseURI_;\r\n    }\r\n\r\n    function _baseURI() internal view returns (string memory) {\r\n        return baseURI;\r\n    }\r\n}\r\n\r\n// File: contracts/luxon/myPage/character/LCT.sol\r\n\r\n\r\npragma solidity ^0.8.13;\r\n\r\n\r\ncontract LCT is ERC721LUXON {\r\n\r\n    event MintByCharacterName(address indexed mintUser, uint256 indexed tokenId, string indexed name);\r\n    event BurnCharacter(uint256 indexed tokenId, string indexed name);\r\n    event SetCharacterName(uint256 indexed tokenId, string indexed name);\r\n\r\n    struct Character {\r\n        uint256 tokenId;\r\n        string name;\r\n    }\r\n\r\n    constructor(\r\n        string memory operator,\r\n        address luxOnAdmin\r\n    ) ERC721LUXON(\"Lux-On Character NFT\", \"LCT\", operator, luxOnAdmin) {}\r\n\r\n    mapping(uint256 => string) characterInfo;\r\n\r\n    function mintByCharacterName(address mintUser, uint256 quantity, string[] memory characterName) external onlySuperOperator {\r\n        require(characterName.length == quantity, \"quantity != gacha count\");\r\n        uint256 tokenId = nextTokenId();\r\n        for (uint8 i = 0; i < quantity; i++) {\r\n            emit MintByCharacterName(mintUser, tokenId, characterName[i]);\r\n            characterInfo[tokenId++] = characterName[i];\r\n        }\r\n        _safeMint(mintUser, quantity);\r\n    }\r\n\r\n    function mint(address mintUser, uint256 quantity) external onlySuperOperator {\r\n        _safeMint(mintUser, quantity);\r\n    }\r\n\r\n    function getCharacterInfo(uint256 tokenId) public view returns (string memory) {\r\n        return characterInfo[tokenId];\r\n    }\r\n\r\n    function getCharacterInfos(uint256[] memory tokenIds) public view returns (string[] memory) {\r\n        string[] memory names = new string[](tokenIds.length);\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            names[i] = characterInfo[tokenIds[i]];\r\n        }\r\n        return names;\r\n    }\r\n\r\n    function burnCharacter(uint256 tokenId) external onlySuperOperator {\r\n        _burn(tokenId);\r\n        emit BurnCharacter(tokenId, characterInfo[tokenId]);\r\n        delete characterInfo[tokenId];\r\n    }\r\n\r\n    function setCharacterName(Character[] memory _character) external onlySuperOperator {\r\n        for (uint256 i = 0; i < _character.length; i++) {\r\n            characterInfo[_character[i].tokenId] = _character[i].name;\r\n            emit SetCharacterName(_character[i].tokenId, _character[i].name);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n    /**\r\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\r\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\r\n     *\r\n     * NOTE: To accept the transfer, this must return\r\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n     * (i.e. 0xf23a6e61, or its own function selector).\r\n     *\r\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\r\n     * @param from The address which previously owned the token\r\n     * @param id The ID of the token being transferred\r\n     * @param value The amount of tokens being transferred\r\n     * @param data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n     */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n\r\n    /**\r\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\r\n     * been updated.\r\n     *\r\n     * NOTE: To accept the transfer(s), this must return\r\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n     * (i.e. 0xbc197c81, or its own function selector).\r\n     *\r\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n     * @param from The address which previously owned the token\r\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n     * @param data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n     */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/ERC1155.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the basic standard multi-token.\r\n * See https://eips.ethereum.org/EIPS/eip-1155\r\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\r\n *\r\n * _Available since v3.1._\r\n */\r\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\r\n    using Address for address;\r\n\r\n    // Mapping from token ID to account balances\r\n    mapping(uint256 => mapping(address => uint256)) private _balances;\r\n\r\n    // Mapping from account to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\r\n    string private _uri;\r\n\r\n    /**\r\n     * @dev See {_setURI}.\r\n     */\r\n    constructor(string memory uri_) {\r\n        _setURI(uri_);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC1155).interfaceId ||\r\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155MetadataURI-uri}.\r\n     *\r\n     * This implementation returns the same URI for *all* token types. It relies\r\n     * on the token type ID substitution mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * Clients calling this function must replace the `\\{id\\}` substring with the\r\n     * actual token type ID.\r\n     */\r\n    function uri(uint256) public view virtual override returns (string memory) {\r\n        return _uri;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\r\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\r\n        return _balances[id][account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOfBatch}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(\r\n        address[] memory accounts,\r\n        uint256[] memory ids\r\n    ) public view virtual override returns (uint256[] memory) {\r\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\r\n\r\n        uint256[] memory batchBalances = new uint256[](accounts.length);\r\n\r\n        for (uint256 i = 0; i < accounts.length; ++i) {\r\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\r\n        }\r\n\r\n        return batchBalances;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[account][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: caller is not token owner or approved\"\r\n        );\r\n        _safeTransferFrom(from, to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeBatchTransferFrom}.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: caller is not token owner or approved\"\r\n        );\r\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n        uint256[] memory ids = _asSingletonArray(id);\r\n        uint256[] memory amounts = _asSingletonArray(amount);\r\n\r\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        uint256 fromBalance = _balances[id][from];\r\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\r\n        unchecked {\r\n            _balances[id][from] = fromBalance - amount;\r\n        }\r\n        _balances[id][to] += amount;\r\n\r\n        emit TransferSingle(operator, from, to, id, amount);\r\n\r\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        for (uint256 i = 0; i < ids.length; ++i) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            uint256 fromBalance = _balances[id][from];\r\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\r\n            unchecked {\r\n                _balances[id][from] = fromBalance - amount;\r\n            }\r\n            _balances[id][to] += amount;\r\n        }\r\n\r\n        emit TransferBatch(operator, from, to, ids, amounts);\r\n\r\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new URI for all token types, by relying on the token type ID\r\n     * substitution mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\r\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\r\n     * clients with the token type ID.\r\n     *\r\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\r\n     * interpreted by clients as\r\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\r\n     * for token type ID 0x4cce0.\r\n     *\r\n     * See {uri}.\r\n     *\r\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\r\n     * this function emits no events.\r\n     */\r\n    function _setURI(string memory newuri) internal virtual {\r\n        _uri = newuri;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\r\n        require(to != address(0), \"ERC1155: mint to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n        uint256[] memory ids = _asSingletonArray(id);\r\n        uint256[] memory amounts = _asSingletonArray(amount);\r\n\r\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n        _balances[id][to] += amount;\r\n        emit TransferSingle(operator, address(0), to, id, amount);\r\n\r\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _mintBatch(\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(to != address(0), \"ERC1155: mint to the zero address\");\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            _balances[ids[i]][to] += amounts[i];\r\n        }\r\n\r\n        emit TransferBatch(operator, address(0), to, ids, amounts);\r\n\r\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens of token type `id` from `from`\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `from` must have at least `amount` tokens of token type `id`.\r\n     */\r\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC1155: burn from the zero address\");\r\n\r\n        address operator = _msgSender();\r\n        uint256[] memory ids = _asSingletonArray(id);\r\n        uint256[] memory amounts = _asSingletonArray(amount);\r\n\r\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\r\n\r\n        uint256 fromBalance = _balances[id][from];\r\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[id][from] = fromBalance - amount;\r\n        }\r\n\r\n        emit TransferSingle(operator, from, address(0), id, amount);\r\n\r\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     */\r\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\r\n        require(from != address(0), \"ERC1155: burn from the zero address\");\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\r\n\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            uint256 fromBalance = _balances[id][from];\r\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\r\n            unchecked {\r\n                _balances[id][from] = fromBalance - amount;\r\n            }\r\n        }\r\n\r\n        emit TransferBatch(operator, from, address(0), ids, amounts);\r\n\r\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `operator` to operate on all of `owner` tokens\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\r\n        require(owner != operator, \"ERC1155: setting approval status for self\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning, as well as batched variants.\r\n     *\r\n     * The same hook is called on both single and batched variants. For single\r\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\r\n     *\r\n     * Calling conditions (for each `id` and `amount` pair):\r\n     *\r\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * of token type `id` will be  transferred to `to`.\r\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\r\n     * for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\r\n     * will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     * - `ids` and `amounts` have the same, non-zero length.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any token transfer. This includes minting\r\n     * and burning, as well as batched variants.\r\n     *\r\n     * The same hook is called on both single and batched variants. For single\r\n     * transfers, the length of the `id` and `amount` arrays will be 1.\r\n     *\r\n     * Calling conditions (for each `id` and `amount` pair):\r\n     *\r\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * of token type `id` will be  transferred to `to`.\r\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\r\n     * for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\r\n     * will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     * - `ids` and `amounts` have the same, non-zero length.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {}\r\n\r\n    function _doSafeTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) private {\r\n        if (to.isContract()) {\r\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\r\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _doSafeBatchTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) private {\r\n        if (to.isContract()) {\r\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\r\n                bytes4 response\r\n            ) {\r\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\r\n        uint256[] memory array = new uint256[](1);\r\n        array[0] = element;\r\n\r\n        return array;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\r\n *\r\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\r\n * clearly identified. Note: While a totalSupply of 1 might mean the\r\n * corresponding is an NFT, there is no guarantees that no other token with the\r\n * same id are not going to be minted.\r\n */\r\nabstract contract ERC1155Supply is ERC1155 {\r\n    mapping(uint256 => uint256) private _totalSupply;\r\n\r\n    /**\r\n     * @dev Total amount of tokens in with a given id.\r\n     */\r\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\r\n        return _totalSupply[id];\r\n    }\r\n\r\n    /**\r\n     * @dev Indicates whether any token exist with a given id, or not.\r\n     */\r\n    function exists(uint256 id) public view virtual returns (bool) {\r\n        return ERC1155Supply.totalSupply(id) > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC1155-_beforeTokenTransfer}.\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        if (from == address(0)) {\r\n            for (uint256 i = 0; i < ids.length; ++i) {\r\n                _totalSupply[ids[i]] += amounts[i];\r\n            }\r\n        }\r\n\r\n        if (to == address(0)) {\r\n            for (uint256 i = 0; i < ids.length; ++i) {\r\n                uint256 id = ids[i];\r\n                uint256 amount = amounts[i];\r\n                uint256 supply = _totalSupply[id];\r\n                require(supply >= amount, \"ERC1155: burn amount exceeds totalSupply\");\r\n                unchecked {\r\n                    _totalSupply[id] = supply - amount;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/luxon/utils/erc1155/ERC1155LUXON.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\n\r\n\r\n\r\ncontract ERC1155LUXON is ERC1155, ERC1155Supply, LuxOnSuperOperators {\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        string memory uri_,\r\n        string memory operator,\r\n        address luxOnAdmin\r\n    ) ERC1155(uri_) LuxOnSuperOperators(operator, luxOnAdmin) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function setName(string memory name_) external virtual onlyOwner {\r\n        _name = name_;\r\n    }\r\n\r\n    function setSymbol(string memory symbol_) external virtual onlyOwner {\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function setURI(string memory newuri) external virtual onlyOwner {\r\n        _setURI(newuri);\r\n    }\r\n\r\n    function mint(address account, uint256 id, uint256 amount, bytes memory data) external virtual onlySuperOperator {\r\n        _mint(account, id, amount, data);\r\n    }\r\n\r\n    function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) external virtual onlySuperOperator {\r\n        _mintBatch(to, ids, amounts, data);\r\n    }\r\n\r\n    function burn(address account, uint256 id, uint256 value) external virtual onlySuperOperator {\r\n        _burn(account, id, value);\r\n    }\r\n\r\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory values) external virtual onlySuperOperator {\r\n        _burnBatch(account, ids, values);\r\n    }\r\n\r\n    function _beforeTokenTransfer(address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual override (ERC1155, ERC1155Supply) {\r\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes memory data) public virtual override {\r\n        require(\r\n            from == _msgSender() || isSuperOperator(msg.sender) || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: caller is not owner nor approved\"\r\n        );\r\n        _safeTransferFrom(from, to, id, amount, data);\r\n    }\r\n\r\n    function uri(uint256 _tokenId) override public view returns (string memory) {\r\n        return string(\r\n            abi.encodePacked(\r\n                super.uri(0), \"/\", Strings.toString(_tokenId)\r\n            )\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/luxon/utils/erc1155/IGachaTicket.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\ninterface IGachaTicket {\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes memory data) external;\r\n    function mint(address account, uint256 id, uint256 amount, bytes memory data) external;\r\n    function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) external;\r\n    function balanceOf(address account, uint256 id) external returns (uint256);\r\n    function burn(address account, uint256 id, uint256 value) external;\r\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory values) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\r\n *\r\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\r\n * stuck.\r\n *\r\n * @dev _Available since v3.1._\r\n */\r\ncontract ERC1155Holder is ERC1155Receiver {\r\n    function onERC1155Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(\r\n        address,\r\n        address,\r\n        uint256[] memory,\r\n        uint256[] memory,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/luxon/store/gacha/machine/GachaMachineByGachaTicketV4.sol\r\n\r\n\r\npragma solidity ^0.8.18;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract GachaMachineByGachaTicket is ReentrancyGuard, LuxOnLive, ERC1155Holder, LuxOnData, LuxOnSuperOperators, LuxOnBlacklist {\r\n  event GachaByGachaTicket(address indexed owner, uint256 indexed gachaTicketTokenId, uint256 indexed tokenId, uint256 requestId, bool reveal);\r\n\r\n  event SetMintGoodsInfo(address indexed mintGoodsAddress, uint256[] tokenIds);\r\n  event SetMintAddress(address indexed mintAddress);\r\n  event SetRandomSeedAddress(address indexed randomSeedAddress);\r\n  event Withdraw(uint256 amount);\r\n\r\n  event OperatorMintTokenId(uint256 indexed tokenId);\r\n\r\n  struct UsedGoods {\r\n    uint256 tokenId;\r\n    uint256 amount;\r\n  }\r\n\r\n  struct MintGoodsInfo {\r\n    address mintGoodsAddress;\r\n    uint256[] tokenIds;\r\n  }\r\n\r\n  MintGoodsInfo private mintGoodsInfo;\r\n  mapping(address => mapping(uint256 => bool)) private mintGoodsList;\r\n\r\n  address private mintAddress;\r\n\r\n  string public gachaData = \"DspGachaData\";\r\n\r\n  address public randomSeedAddress;\r\n\r\n  constructor(\r\n    address _mintAddress,\r\n    MintGoodsInfo memory _mintGoodsInfo,\r\n    address dataAddress,\r\n    address luxOnService,\r\n    address _randomSeedAddress,\r\n    string memory operator,\r\n    address luxOnAdmin,\r\n    address luxonAuthority\r\n  ) LuxOnData(dataAddress) LuxOnLive(luxOnService) LuxOnSuperOperators(operator, luxOnAdmin) LuxOnBlacklist(luxonAuthority) {\r\n    mintGoodsInfo = _mintGoodsInfo;\r\n    for (uint256 i = 0; i < _mintGoodsInfo.tokenIds.length; i++) {\r\n      mintGoodsList[_mintGoodsInfo.mintGoodsAddress][_mintGoodsInfo.tokenIds[i]] = true;\r\n    }\r\n    mintAddress = _mintAddress;\r\n    randomSeedAddress = _randomSeedAddress;\r\n  }\r\n\r\n  //------------------ get ------------------//\r\n\r\n  function getMintGoodsInfo() public view returns (MintGoodsInfo memory) {\r\n    return mintGoodsInfo;\r\n  }\r\n\r\n  function getMintAddress() public view returns (address) {\r\n    return mintAddress;\r\n  }\r\n\r\n  function getRandomSeedAddress() public view returns (address) {\r\n    return randomSeedAddress;\r\n  }\r\n  //------------------ set ------------------//\r\n\r\n  function setMintGoodsInfo(MintGoodsInfo memory _mintGoodsInfo) external onlyOwner {\r\n    for (uint256 i = 0; i < mintGoodsInfo.tokenIds.length; i++) {\r\n      mintGoodsList[mintGoodsInfo.mintGoodsAddress][mintGoodsInfo.tokenIds[i]] = false;\r\n    }\r\n    mintGoodsInfo = _mintGoodsInfo;\r\n    for (uint256 i = 0; i < mintGoodsInfo.tokenIds.length; i++) {\r\n      mintGoodsList[mintGoodsInfo.mintGoodsAddress][mintGoodsInfo.tokenIds[i]] = true;\r\n    }\r\n\r\n    emit SetMintGoodsInfo(_mintGoodsInfo.mintGoodsAddress, _mintGoodsInfo.tokenIds);\r\n  }\r\n\r\n  function setMintAddress(address _mintAddress) external onlyOwner {\r\n    mintAddress = _mintAddress;\r\n    emit SetMintAddress(_mintAddress);\r\n  }\r\n\r\n  function setRandomSeedAddress(address _address) public {\r\n    randomSeedAddress = _address;\r\n    emit SetRandomSeedAddress(_address);\r\n  }\r\n  //------------------ gacha ------------------//\r\n\r\n  function gacha(UsedGoods memory _gachaInfo, bool reveal) external isLive isBlacklist(msg.sender) {\r\n    mintPay(_gachaInfo);\r\n    IERC721LUXON(mintAddress).mint(msg.sender, _gachaInfo.amount);\r\n    uint256 lastTokenId = IERC721LUXON(mintAddress).nextTokenId() - 1;\r\n    uint256[] memory tokenIds = new uint256[](_gachaInfo.amount);\r\n    for (uint256 i = 0; i < _gachaInfo.amount; i++) {\r\n      uint256 tokenId = lastTokenId - _gachaInfo.amount + i + 1;\r\n      tokenIds[i] = tokenId;\r\n      uint256 requestId = IRandomSeedNumber(randomSeedAddress).requestRandomWords(msg.sender, _gachaInfo.tokenId, tokenId);\r\n\r\n      emit GachaByGachaTicket(msg.sender, _gachaInfo.tokenId, tokenId, requestId, reveal);\r\n    }\r\n  }\r\n\r\n  function gachaOperator(address userAddress, UsedGoods memory _gachaInfo, bool reveal) external isLive onlySuperOperator {\r\n    require(mintGoodsList[mintGoodsInfo.mintGoodsAddress][_gachaInfo.tokenId], \"not valid token id\");\r\n    IERC721LUXON(mintAddress).mint(userAddress, _gachaInfo.amount);\r\n    uint256 lastTokenId = IERC721LUXON(mintAddress).nextTokenId() - 1;\r\n    uint256[] memory tokenIds = new uint256[](_gachaInfo.amount);\r\n    for (uint256 i = 0; i < _gachaInfo.amount; i++) {\r\n      uint256 tokenId = lastTokenId - _gachaInfo.amount + i + 1;\r\n      tokenIds[i] = tokenId;\r\n      uint256 requestId = IRandomSeedNumber(randomSeedAddress).requestRandomWords(userAddress, _gachaInfo.tokenId, tokenId);\r\n\r\n      emit GachaByGachaTicket(userAddress, _gachaInfo.tokenId, tokenId, requestId, reveal);\r\n      emit OperatorMintTokenId(tokenId);\r\n    }\r\n  }\r\n\r\n  function withdraw() external onlyOwner nonReentrant {\r\n    (bool success,) = msg.sender.call{value : address(this).balance}(\"\");\r\n    require(success, \"Transfer failed.\");\r\n    emit Withdraw(address(this).balance);\r\n  }\r\n\r\n  //------------------ private ------------------//\r\n\r\n  function mintPay(UsedGoods memory _gachaInfo) private {\r\n    require(mintGoodsList[mintGoodsInfo.mintGoodsAddress][_gachaInfo.tokenId], \"not valid token id\");\r\n\r\n    address gachaDataAddress = getDataAddress(gachaData);\r\n    uint256 gachaType = DspGachaData(gachaDataAddress).getGachaType(_gachaInfo.tokenId);\r\n    if (uint256(GachaType.Character) == gachaType) {\r\n      GachaInfo memory gachaInfo = DspGachaData(gachaDataAddress).getGachaInfo(_gachaInfo.tokenId);\r\n      require(gachaInfo.isValid, \"not valid token id\");\r\n    } else if (uint256(GachaType.FateCore) == gachaType) {\r\n      FateCoreGachaInfo memory fateCoreGachaInfo = DspGachaData(gachaDataAddress).getFateCoreGachaInfo(_gachaInfo.tokenId);\r\n      require(fateCoreGachaInfo.isValid, \"not valid token id\");\r\n    }\r\n    IGachaTicket(mintGoodsInfo.mintGoodsAddress).burn(msg.sender, _gachaInfo.tokenId, _gachaInfo.amount);\r\n  }\r\n}\r\n\r\n// File: contracts/luxon/quest/period-quest/PeriodQuestV4.sol\r\n\r\n\r\npragma solidity ^0.8.18;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract PeriodQuest is ReentrancyGuard, LuxOnData, ERC1155Holder, LuxOnLive, LuxOnBlacklist {\r\n    event EnterQuest(address indexed user, uint256 indexed id);\r\n    event ClearQuest(address indexed user, uint256 indexed id);\r\n    event CancelQuest(address indexed user, uint256 indexed id);\r\n\r\n    event SendReward(address indexed user, address indexed to, address indexed tokenAddress, uint256 tokenType, uint256 reward, uint256 rewardAmount);\r\n    event TransferFromByType(address indexed from, address indexed to, address indexed tokenAddress, uint256 tokenId, uint256 amount, uint256 conditionType);\r\n\r\n    address constant burnAddress = 0x000000000000000000000000000000000000dEaD;\r\n    uint256 constant errorNo = 9999;\r\n    uint256 constant GACHA_MACHINE = 23;\r\n\r\n    address public lctAddress;\r\n    address public gachaTicketAddress;\r\n    PeriodQuestStorage public questStorage;\r\n    string constant dspGoodsTypeData = \"DspGoodsTypeData\";\r\n\r\n    constructor(\r\n        address dataAddress,\r\n        address luxonService,\r\n        address _lctAddress,\r\n        address _gachaTicketAddress,\r\n        address _questStorage,\r\n        address luxonAuthority\r\n    ) LuxOnData(dataAddress) LuxOnLive(luxonService) LuxOnBlacklist(luxonAuthority) {\r\n        lctAddress = _lctAddress;\r\n        gachaTicketAddress = _gachaTicketAddress;\r\n        questStorage = PeriodQuestStorage(_questStorage);\r\n    }\r\n\r\n    function setQuestStorageAddress(address _questStorage) external onlyOwner {\r\n        questStorage = PeriodQuestStorage(_questStorage);\r\n    }\r\n\r\n    function setLctAddress(address _lctAddress) external onlyOwner {\r\n        lctAddress = _lctAddress;\r\n    }\r\n    function setGachaTicketAddress(address _gachaTicketAddress) external onlyOwner {\r\n        gachaTicketAddress = _gachaTicketAddress;\r\n    }\r\n\r\n    function withdraw() external onlyOwner nonReentrant {\r\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\"\");\r\n        require(success, \"Transfer failed.\");\r\n    }\r\n\r\n    function enterQuest(uint256 id, uint256[] memory _tokenIds) public nonReentrant isLive isBlacklist(msg.sender) {\r\n        PeriodQuestInfo memory pqi = QuestCalendar(getDataAddress(\"QuestCalendar\")).getQuestCalendar(id);\r\n        checkEnterQuestValid(pqi);\r\n        if (questStorage.getUserPeriodClearTime(msg.sender, pqi.questType) < pqi.startAt) {\r\n            questStorage.resetUserPeriodClearInfo(msg.sender, pqi.questType);\r\n        }\r\n        Quest memory qD = PeriodQuestData(getDataAddress(\"PeriodQuestData\")).getQuest(pqi.questId);\r\n        require(qD.questConditionSlot.length == _tokenIds.length, \"not valid token count\");\r\n        if (uint256(QuestCategory.REWARD) == qD.questCategory) {\r\n            questStorage.setClear(msg.sender, id, pqi.finishId, pqi.questType);\r\n            sendReward(msg.sender, qD.rewards);\r\n        } else {\r\n            address dspActerDataAddress = getDataAddress(\"DspActorData\");\r\n            address dspCharacterDataAddress = getDataAddress(\"DspCharacterData\");\r\n            address dspFateCoreDataAddress = getDataAddress(\"DspFateCoreData\");\r\n            questStorage.startQuest(msg.sender, id, qD.stakingTime);\r\n            QuestInfo memory qI = questStorage.getQuestStorage(msg.sender, id);\r\n            require(0 == qI.slotData.length, \"Error : completion condition.\");\r\n            for (uint i = 0; i < _tokenIds.length; i++) {\r\n                require(0 != _tokenIds[i], \"INVALID tokenId\");\r\n                string memory name = LCT(lctAddress).getCharacterInfo(_tokenIds[i]);\r\n                (uint256 _tier, , , uint256 nation, uint256 element, uint256 _rootId, ) = getConditionTokenInfo(dspActerDataAddress, dspCharacterDataAddress, dspFateCoreDataAddress, name);\r\n\r\n                if (uint256(ConditionType.CHARACTER_TIER) == qD.questConditionSlot[i].conditionType || uint256(ConditionType.CHARACTER) == qD.questConditionSlot[i].conditionType) {\r\n                    uint256 condition = uint256(ConditionType.CHARACTER_TIER) == qD.questConditionSlot[i].conditionType ? _tier : _rootId;\r\n                    require(uint256(condition) == uint256(qD.questConditionSlot[i].conditionValue), \"Invalid Condition : This character does not match the condition conditions.\");\r\n                    if (0 != qD.questConditionSlot[i].subConditionType) {\r\n                        checkSubCondition(qD.questConditionSlot[i].subConditionType, qD.questConditionSlot[i].subConditionValue, nation, element);\r\n                    }\r\n                } else if (uint256(ConditionType.PACK) == qD.questConditionSlot[i].conditionType) {\r\n                    require(uint256(_tokenIds[i]) == uint256(qD.questConditionSlot[i].conditionValue), \"Invalid Condition : This character does not match the pack conditions.\");\r\n                } else {\r\n                    revert(\"INVALID condition type\");\r\n                }\r\n\r\n                checkConditionAndTransfer(id, _tokenIds[i], qD.questConditionSlot[i], i);\r\n            }\r\n        }\r\n\r\n        emit EnterQuest(msg.sender, id);\r\n    }\r\n\r\n    function checkEnterQuestValid(PeriodQuestInfo memory pqi) private view {\r\n        require(pqi.isValid, \"quest not valid\");\r\n        require(pqi.startAt <= block.timestamp && block.timestamp < pqi.endAt, \"quest not open\");\r\n        (uint256 questCount, uint256 currentClearCount, uint256 requiredClearCount, uint256 finishClearCount) = questStorage.getClearCondition(msg.sender, pqi.id, pqi.requireId, pqi.finishId);\r\n        require(currentClearCount == finishClearCount, \"already clear this quest\");\r\n        if (0 != pqi.requireId) {\r\n            require(currentClearCount < requiredClearCount, \"haven't completed the previous quest yet\");\r\n        }\r\n        if (LimitType.LIMIT == pqi.userLimitType) {\r\n            require(currentClearCount < pqi.userLimit, \"User: Got stuck in the limit of this quest.\");\r\n        }\r\n        if (LimitType.LIMIT == pqi.limitType) {\r\n            require(questCount < pqi.limit, \"limit quest\");\r\n        }\r\n    }\r\n\r\n    function getConditionTokenInfo(address dspActerDataAddress, address dspCharacterDataAddress, address dspFateCoreDataAddress, string memory name) public view returns (uint256, uint256, uint256, uint256, uint256, uint256, bool) {\r\n        uint256 gachaType = DspActorData(dspActerDataAddress).getGachaTypeByName(name);\r\n        if (uint256(GachaType.Character) == gachaType) {\r\n            return DspCharacterData(dspCharacterDataAddress).getCharacterInfo(name);\r\n        } else if (uint256(GachaType.FateCore) == gachaType) {\r\n            return DspFateCoreData(dspFateCoreDataAddress).getFateCoreInfo(name);\r\n        }\r\n        revert(\"INVALID token info type\");\r\n    }\r\n\r\n    function checkSubCondition(uint256 conditionType, uint256 conditionValue, uint256 nation, uint256 element) private pure {\r\n        if (uint256(ConditionType.CHARACTER_ELEMENT) == conditionType) {\r\n            require(uint256(element) == uint256(conditionValue), \"Invalid Condition : This character does not match the element conditions.\");\r\n        } else if (uint256(ConditionType.CHARACTER_NATION) == conditionType) {\r\n            require(uint256(nation) == uint256(conditionValue), \"Invalid Condition : This character does not match the nation conditions.\");\r\n        } else {\r\n            revert(\"INVALID sub condition type\");\r\n        }\r\n    }\r\n\r\n    function cancelQuest(uint256 id) public nonReentrant {\r\n        PeriodQuestInfo memory pqi = QuestCalendar(getDataAddress(\"QuestCalendar\")).getQuestCalendar(id);\r\n        checkCancelQuestValid(pqi);\r\n        QuestInfo memory qI = questStorage.getQuestStorage(msg.sender, id);\r\n        require(qI.questNo == id, \"not valid clear id\");\r\n        StakeInfo[] memory stakeInfos = questStorage.getStakingInfo(msg.sender, id);\r\n        for (uint256 i = 0; i < stakeInfos.length; i++) {\r\n            _transferFromByType(address(questStorage), msg.sender, stakeInfos[i].tokenId, stakeInfos[i].amount, stakeInfos[i].conditionType);\r\n        }\r\n\r\n        BurnWaitInfo[] memory burnInfos = questStorage.getBurnInfo(msg.sender, id);\r\n        for (uint i = 0; i < burnInfos.length; i++) {\r\n            _transferFromByType(address(questStorage), msg.sender, burnInfos[i].tokenId, burnInfos[i].amount, burnInfos[i].conditionType);\r\n        }\r\n\r\n        questStorage.cancelQuest(msg.sender, id);\r\n\r\n        emit CancelQuest(msg.sender, id);\r\n    }\r\n\r\n    function checkCancelQuestValid(PeriodQuestInfo memory pqi) private view {\r\n        ( , uint256 currentClearCount, uint256 requiredClearCount, uint256 finishClearCount) = questStorage.getClearCondition(msg.sender, pqi.id, pqi.requireId, pqi.finishId);\r\n        require(currentClearCount == finishClearCount, \"already clear this quest\");\r\n        if (0 != pqi.requireId) {\r\n            require(currentClearCount < requiredClearCount, \"haven't completed the previous quest yet\");\r\n        }\r\n    }\r\n\r\n    function clearQuest(uint256 id) public nonReentrant isLive isBlacklist(msg.sender){\r\n        PeriodQuestInfo memory pqi = QuestCalendar(getDataAddress(\"QuestCalendar\")).getQuestCalendar(id);\r\n        checkClearQuestValid(pqi);\r\n        Quest memory qD = PeriodQuestData(getDataAddress(\"PeriodQuestData\")).getQuest(pqi.questId);\r\n        QuestInfo memory qI = questStorage.getQuestStorage(msg.sender, id);\r\n        if (uint256(QuestCategory.REWARD) != qD.questCategory) {\r\n            require(qI.questNo == id, \"not valid clear id\");\r\n            for (uint256 i = 0; i < qI.slotData.length; i++) {\r\n                require(true == qI.slotData[i].isValid, \"Error : You are not satisfied with the completion condition.\");\r\n            }\r\n            require(block.timestamp > qI.endAt, \"Error : You are not satisfied with the staking time.\");\r\n\r\n            BurnWaitInfo[] memory burnInfos = questStorage.getBurnInfo(msg.sender, id);\r\n            for (uint i = 0; i < burnInfos.length; i++) {\r\n                _transferFromByType(address(questStorage), address(burnAddress), burnInfos[i].tokenId, burnInfos[i].amount, burnInfos[i].conditionType);\r\n            }\r\n\r\n            StakeInfo[] memory stakeInfos = questStorage.getStakingInfo(msg.sender, id);\r\n            for (uint256 i = 0; i < stakeInfos.length; i++) {\r\n                _transferFromByType(address(questStorage), msg.sender, stakeInfos[i].tokenId, stakeInfos[i].amount, stakeInfos[i].conditionType);\r\n            }\r\n        }\r\n        questStorage.setClear(msg.sender, id, pqi.finishId, pqi.questType);\r\n        sendReward(msg.sender, qD.rewards);\r\n\r\n        emit ClearQuest(msg.sender, id);\r\n    }\r\n\r\n    function checkClearQuestValid(PeriodQuestInfo memory pqi) private view {\r\n        require(pqi.isValid, \"quest not valid\");\r\n        require(pqi.startAt <= block.timestamp && block.timestamp < pqi.endAt, \"quest not open\");\r\n        (uint256 questCount, uint256 currentClearCount, uint256 requiredClearCount, uint256 finishClearCount) = questStorage.getClearCondition(msg.sender, pqi.id, pqi.requireId, pqi.finishId);\r\n        require(currentClearCount == finishClearCount, \"already clear this quest\");\r\n        if (0 != pqi.requireId) {\r\n            require(currentClearCount < requiredClearCount, \"haven't completed the previous quest yet\");\r\n        }\r\n        if (LimitType.LIMIT == pqi.userLimitType) {\r\n            require(currentClearCount < pqi.userLimit, \"User: Got stuck in the limit of this quest.\");\r\n        }\r\n        if (LimitType.LIMIT == pqi.limitType) {\r\n            require(questCount < pqi.limit, \"limit quest\");\r\n        }\r\n    }\r\n\r\n    function getRevealInfo(uint256 tokenId) public view returns (bool) {\r\n        return keccak256(abi.encodePacked(LCT(lctAddress).getCharacterInfo(tokenId))) != keccak256(abi.encodePacked(\"\"));\r\n    }\r\n\r\n    function getRevealInfos(uint256[] memory tokenIds) public view returns (bool[] memory) {\r\n        bool[] memory revealInfo = new bool[](tokenIds.length);\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            revealInfo[i] = getRevealInfo(tokenIds[i]);\r\n        }\r\n        return revealInfo;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    function checkConditionAndTransfer(uint256 id, uint256 _tokenId, QuestConditionSlot memory _questConditionSlot, uint256 _index) private {\r\n        uint256 conditionType = _questConditionSlot.conditionType;\r\n        uint256 questType = _questConditionSlot.questType;\r\n        uint256 amount = _questConditionSlot.conditionAmount;\r\n        if (uint256(MissionType.BURN) == questType) {\r\n            questStorage.setBurnWaitList(msg.sender, id, _tokenId, amount, questType, _index);\r\n            _transferFromByType(msg.sender, address(questStorage), _tokenId, amount, conditionType);\r\n        } else if (uint256(MissionType.STAKE) == questType || uint256(MissionType.REGIST) == questType) {\r\n            questStorage.setStakeInfo(msg.sender, id, _tokenId, amount, conditionType);\r\n            _transferFromByType(msg.sender, address(questStorage), _tokenId, amount, conditionType);\r\n        } else {\r\n            revert(\"INVALID Mission type\");\r\n        }\r\n        questStorage.setSlotData(msg.sender, id, _tokenId, amount, _index);\r\n    }\r\n\r\n    function sendReward(address _to, Reward[] memory _rewards) private {\r\n        address goodsTypeDataAddress = getDataAddress(dspGoodsTypeData);\r\n        for (uint256 i = 0; i < _rewards.length; i++) {\r\n            GoodsInfo memory rewardInfo = IDspGoodsTypeData(goodsTypeDataAddress).getGoodsInfo(_rewards[i].rewardType);\r\n            require(rewardInfo.isValid, \"reward not valid\");\r\n            if (uint256(TokenType.ERC1155) == rewardInfo.tokenType) {\r\n                IERC1155LUXON(rewardInfo.tokenAddress).mint(_to, _rewards[i].reward, _rewards[i].rewardAmount, \"\");\r\n            } else if (uint256(TokenType.ERC20) == rewardInfo.tokenType) {\r\n                IERC20LUXON(rewardInfo.tokenAddress).transfer(_to, _rewards[i].rewardAmount);\r\n            } else if (uint256(TokenType.ERC721) == rewardInfo.tokenType) {\r\n                if (rewardInfo.goodsType == GACHA_MACHINE) {\r\n                    GachaMachineByGachaTicket(rewardInfo.tokenAddress).gachaOperator(_to, GachaMachineByGachaTicket.UsedGoods(_rewards[i].reward, _rewards[i].rewardAmount), true);\r\n                } else {\r\n                    IERC721(rewardInfo.tokenAddress).transferFrom(address(this), _to, _rewards[i].reward);\r\n                }\r\n            } else {\r\n                revert(\"INVALID Reward type\");\r\n            }\r\n            emit SendReward(msg.sender, _to, rewardInfo.tokenAddress, uint256(rewardInfo.tokenType), _rewards[i].reward, _rewards[i].rewardAmount);\r\n        }\r\n    }\r\n\r\n    function _transferFromByType(address _from, address _to, uint256 _tokenId, uint256 _amount, uint256 _conditionType) private {\r\n        if (uint256(ConditionType.CHARACTER) == _conditionType || uint256(ConditionType.CHARACTER_TIER) == _conditionType) {\r\n            IERC721(lctAddress).transferFrom(_from, _to, _tokenId);\r\n            emit TransferFromByType(_from, _to, lctAddress, _tokenId, _amount, _conditionType);\r\n        } else if (uint256(ConditionType.PACK) == _conditionType) {\r\n            IERC1155LUXON(gachaTicketAddress).safeTransferFrom(_from, _to, _tokenId, _amount, \"\");\r\n            emit TransferFromByType(_from, _to, gachaTicketAddress, _tokenId, _amount, _conditionType);\r\n        } else {\r\n            revert(\"INVALID condition type\");\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dataAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"luxonService\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lctAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gachaTicketAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_questStorage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"luxonAuthority\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CancelQuest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ClearQuest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"EnterQuest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"SendReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"luxOnAuthority\",\"type\":\"address\"}],\"name\":\"SetLuxOnAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"luxOnService\",\"type\":\"address\"}],\"name\":\"SetLuxOnService\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"luxonData\",\"type\":\"address\"}],\"name\":\"SetLuxonData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"conditionType\",\"type\":\"uint256\"}],\"name\":\"TransferFromByType\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"cancelQuest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"clearQuest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"enterQuest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gachaTicketAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dspActerDataAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dspCharacterDataAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dspFateCoreDataAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getConditionTokenInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getDataAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getIsInBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLuxOnAuthority\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLuxOnData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLuxOnService\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRevealInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getRevealInfos\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lctAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questStorage\",\"outputs\":[{\"internalType\":\"contract PeriodQuestStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gachaTicketAddress\",\"type\":\"address\"}],\"name\":\"setGachaTicketAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lctAddress\",\"type\":\"address\"}],\"name\":\"setLctAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_luxOnAuthority\",\"type\":\"address\"}],\"name\":\"setLuxOnAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_luxonData\",\"type\":\"address\"}],\"name\":\"setLuxOnData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_luxOnService\",\"type\":\"address\"}],\"name\":\"setLuxOnService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_questStorage\",\"type\":\"address\"}],\"name\":\"setQuestStorageAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PeriodQuest", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000047e02786b3aefe45f4db89d296b5b9c5d7ed6c530000000000000000000000008186780f64aa472c16874464d21485f60826c60d000000000000000000000000241e78d45c0a7c263bf9d230a229f0bafb42cda300000000000000000000000046f9fff0252375dfe38f8e79c4983f85cc6e29ea000000000000000000000000d91423d48103eeba5ae45f179d549d6ed4fd70e900000000000000000000000017cb56b0825a80402a52a67672cb0cfd50b0d483", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://47fc2aacd8d624d9dba1fe6eab1ad4a97bbf70614d7389881bf82871b58bc72e"}