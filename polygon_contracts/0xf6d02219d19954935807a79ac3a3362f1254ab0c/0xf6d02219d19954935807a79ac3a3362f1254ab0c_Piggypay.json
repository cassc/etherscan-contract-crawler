{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Piggypay.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ncontract Piggypay{\\n\\n//Define the Owner of the smart contract \\n\\naddress public owner;\\n\\n\\nconstructor(){\\n        owner = msg.sender;\\n}\\n\\n\\n//Create Struct and Mappping for request, transaction & name\\n\\n\\nstruct request {\\n        address requestor;\\n        uint256 amount;\\n        string message;\\n        string name;\\n}\\n\\nstruct sendReceive {\\n        string action;\\n        uint256 amount;\\n        string message;\\n        address otherPartyAddress;\\n        string otherPartyName;\\n}\\n\\nstruct userName {\\n        string name;\\n        bool hasName;\\n}\\n\\nmapping(address => userName) names;\\nmapping(address  => request[]) requests;\\nmapping(address  => sendReceive[]) history;\\n\\n\\n//Add a name to wallet address\\n\\nfunction addName(string memory _name) public {\\n    \\n    userName storage newUserName = names[msg.sender];\\n    newUserName.name = _name;\\n    newUserName.hasName = true;\\n\\n}\\n\\n\\n//Create a Request\\n\\nfunction createRequest(address user, uint256 _amount, string memory _message) public {\\n        \\n    request memory newRequest;\\n    newRequest.requestor = msg.sender;\\n    newRequest.amount = _amount;\\n    newRequest.message = _message;\\n    if(names[msg.sender].hasName){\\n        newRequest.name = names[msg.sender].name;\\n    }\\n    requests[user].push(newRequest);\\n\\n}\\n\\n\\n//Pay a Request\\n\\nfunction payRequest(uint256 _request) public payable {\\n    \\n    require(_request < requests[msg.sender].length, \\\"No Such Request\\\");\\n    request[] storage myRequests = requests[msg.sender];\\n    request storage payableRequest = myRequests[_request];\\n        \\n    uint256 toPay = payableRequest.amount * 1000000000000000000;\\n    require(msg.value == (toPay), \\\"Pay Correct Amount\\\");\\n\\n    payable(payableRequest.requestor).transfer(msg.value);\\n\\n    addHistory(msg.sender, payableRequest.requestor, payableRequest.amount, payableRequest.message);\\n\\n    myRequests[_request] = myRequests[myRequests.length-1];\\n    myRequests.pop();\\n\\n}\\n\\nfunction addHistory(address sender, address receiver, uint256 _amount, string memory _message) private {\\n        \\n    sendReceive memory newSend;\\n    newSend.action = \\\"Send\\\";\\n    newSend.amount = _amount;\\n    newSend.message = _message;\\n    newSend.otherPartyAddress = receiver;\\n    if(names[receiver].hasName){\\n        newSend.otherPartyName = names[receiver].name;\\n    }\\n    history[sender].push(newSend);\\n\\n    sendReceive memory newReceive;\\n    newReceive.action = \\\"Receive\\\";\\n    newReceive.amount = _amount;\\n    newReceive.message = _message;\\n    newReceive.otherPartyAddress = sender;\\n    if(names[sender].hasName){\\n        newReceive.otherPartyName = names[sender].name;\\n    }\\n    history[receiver].push(newReceive);\\n}\\n\\n\\n//Get all requests sent to a User\\n\\nfunction getMyRequests(address _user) public view returns(\\n         address[] memory, \\n         uint256[] memory, \\n         string[] memory, \\n         string[] memory\\n){\\n\\n        address[] memory addrs = new address[](requests[_user].length);\\n        uint256[] memory amnt = new uint256[](requests[_user].length);\\n        string[] memory msge = new string[](requests[_user].length);\\n        string[] memory nme = new string[](requests[_user].length);\\n        \\n        for (uint i = 0; i < requests[_user].length; i++) {\\n            request storage myRequests = requests[_user][i];\\n            addrs[i] = myRequests.requestor;\\n            amnt[i] = myRequests.amount;\\n            msge[i] = myRequests.message;\\n            nme[i] = myRequests.name;\\n        }\\n        \\n        return (addrs, amnt, msge, nme);        \\n         \\n\\n}\\n\\n\\n//Get all historic transactions user has been apart of\\n\\n\\nfunction getMyHistory(address _user) public view returns(sendReceive[] memory){\\n        return history[_user];\\n}\\n\\nfunction getMyName(address _user) public view returns(userName memory){\\n        return names[_user];\\n}\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"addName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"createRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getMyHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"otherPartyAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"otherPartyName\",\"type\":\"string\"}],\"internalType\":\"struct Piggypay.sendReceive[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getMyName\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"hasName\",\"type\":\"bool\"}],\"internalType\":\"struct Piggypay.userName\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getMyRequests\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_request\",\"type\":\"uint256\"}],\"name\":\"payRequest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "Piggypay", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}