{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.15;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.15;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.15;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.15;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.15;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: contracts/ISLAMIvestingFinal.sol\r\n\r\n\r\n\r\n/*\r\n@dev: This code is developed by Jaafar Krayem and is free to be used by anyone\r\nuse under your own responsibility\r\ncontract is audited by solid proof \r\n*/\r\n\r\n/*\r\n@dev: This is a vesting contract for ISLAMI token, with monthly percentage claims after total locking\r\nalso used for voting and recovery wallet service\r\n*/\r\n\r\n\r\n\r\npragma solidity = 0.8.15;\r\n\r\ncontract ISLAMIvesting_V4 {\r\n    using SafeMath for uint256;\r\n    address private owner;\r\n    ERC20 public ISLAMI;\r\n\r\n    address public BaytAlMal = 0xC315A5Ce1e6330db2836BD3Ed1Fa7228C068cE20;\r\n    address public constant zeroAddress = address(0x0);\r\n    address public constant deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n    \r\n    \r\n/*\r\n@dev: Private values\r\n*/  \r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status;\r\n    uint256 private answerCount;\r\n    /* Each 100K ISLAMI equal One Vote!   */\r\n    uint256 private OneVote = 100000 * Sonbola;\r\n\r\n/*\r\n@dev: public values\r\n*/\r\n    // Number of Decimals in ISLAMI\r\n    uint256 public constant Sonbola = 10**7;\r\n    uint256 public constant monthly = 30 days;\r\n    uint256 public investorCount;\r\n    uint256 public investorVault;\r\n    uint256 public slinvestorCount;\r\n    uint256 public slInvestorVault;\r\n    uint256 public allVaults;\r\n    uint256 public votingEventID;\r\n    //100%\r\n    uint256 public constant hPercent = 100;\r\n    /* Monthy percentage */\r\n    uint256 public mP = 5;\r\n    uint256 public minLock = 100000 * Sonbola;\r\n    //1% of locked amount\r\n    uint256 public ewFee = 1;\r\n    \r\n/*\r\n@dev: Bool Values\r\n*/\r\n    bool public votingEventLive = false;\r\n\r\n/*\r\n@dev: Events\r\n*/\r\n    event InvestorAdded(address Investor, uint256 Amount);\r\n    event ISLAMIClaimed(address Investor, uint256 Amount);\r\n    event SelfLockInvestor(address Investor, uint256 Amount);\r\n    event EditSelfLock(address Investor, uint256 Amount);\r\n    event ExtendSelfLock(address Investor, uint256 Time);\r\n    event SelfISLAMIClaim(address Investor, uint256 Amount);\r\n    event EmergencyWithdraw(address Investor, address NewWallet, uint256 Amount);\r\n    event EmergencyFeeChanged(uint256 oldFee, uint256 newFee);\r\n    event ChangeOwner(address NewOwner);\r\n    event Voted(uint256 VotingEvent, address Voter, uint256 voteFee);\r\n    event VoteResults(uint256 VotingEvent, string projectName,uint256 Result);\r\n    event WithdrawalMatic(uint256 _amount, uint256 decimal, address to); \r\n    event WithdrawalISLAMI(uint256 _amount,uint256 sonbola, address to);\r\n    event WithdrawalERC20(address _tokenAddr, uint256 _amount,uint256 decimals, address to);\r\n/*\r\n@dev: Investor Vault\r\n*/   \r\n    struct VaultInvestor{\r\n        //represents the actual amount locked in order to keep track of monthly percentage to unlock\r\n        uint256 falseAmount;\r\n        uint256 amount;\r\n        address recoveryWallet;\r\n        uint256 monthLock;\r\n        uint256 lockTime;\r\n        uint256 timeStart;\r\n        bool voted;\r\n        uint256 votedForEvent;\r\n    }\r\n/*\r\n@dev: Self Investor Vault\r\n*/    \r\n    struct SelfLock{\r\n        uint256 slAmount;\r\n        uint256 slLockTime;\r\n        uint256 slTimeStart;\r\n        address recoveryWallet;\r\n        bool voted;\r\n        uint256 votedForEvent;\r\n    }\r\n/*\r\n@dev: Voting System\r\n*/\r\n    struct VoteOptions{\r\n        string voteOption;\r\n        uint256 voteCount;\r\n    }\r\n    struct VoteEvent{\r\n        uint256 eventID;\r\n        string question;\r\n        mapping(uint256 => VoteOptions) answers;\r\n        uint256 status;\r\n        string winner;\r\n    }\r\n\r\n/*\r\n @dev: Mappings\r\n*/\r\n    mapping(address => bool) public Investor;\r\n    \r\n    mapping(address => VaultInvestor) public investor;\r\n\r\n    mapping(address => bool) public slInvestor;\r\n   \r\n    mapping(address => SelfLock) public slinvestor;\r\n\r\n    mapping(address => bool) public blackList;\r\n\r\n    mapping(uint256 => VoteEvent) public Event; \r\n/**/   \r\n\r\n/* @dev: Check if contract owner */\r\n    modifier onlyOwner (){\r\n        require(msg.sender == owner, \"Only ISLAMICOIN owner can add Investors\");\r\n        _;\r\n    }\r\n/*\r\n    @dev: check if user is investor\r\n*/\r\n    modifier isInvestor(address _investor){\r\n        require(Investor[_investor] == true, \"Not an Investor!\");\r\n        _;\r\n    }\r\n/*\r\n    @dev: check if user is self investor\r\n*/\r\n    modifier ISslInvestor(address _investor){\r\n        require(slInvestor[_investor] == true, \"Not an Investor!\");\r\n        _;\r\n    }\r\n/*\r\n    @dev: Check if user is Blacklisted\r\n*/\r\n    modifier isNotBlackListed(address _investor){\r\n        require(blackList[_investor] != true, \"Your wallet is Blacklisted!\");\r\n        _;\r\n    }\r\n/*\r\n    @dev: prevent reentrancy when function is executed\r\n*/\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n    constructor(ERC20 _ISLAMI) {\r\n        owner = msg.sender;\r\n        investorCount = 0;\r\n        votingEventID = 0;\r\n        ISLAMI = _ISLAMI;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n/*\r\n    @dev: Change the contract owner\r\n*/\r\n    function transferOwnership(address _newOwner)external onlyOwner{\r\n        require(_newOwner != zeroAddress,\"Zero Address\");\r\n        emit ChangeOwner(_newOwner);\r\n        owner = _newOwner;\r\n    }\r\n/*\r\n    @dev: If Bay Al-Mal contract is updated, then it should\r\n    be changed here in order to have the same address\r\n*/\r\n    function changeBaytAlMal(address _newBaytAlMal) external onlyOwner{\r\n        require(_newBaytAlMal != zeroAddress,\"Zero Address\");\r\n        BaytAlMal = _newBaytAlMal;\r\n    }\r\n/*\r\n    @dev: Check if caller has locked tokens\r\n*/    \r\n    function hasLockedTokens(address _investor) public view returns(bool){\r\n        if(Investor[_investor] == true || slInvestor[_investor] == true){\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n/*\r\n    @dev: Set monthly percentage allowed for long term investors\r\n    to collect after the whole period of locking has ended\r\n    minimum 1% maximum 50%\r\n*/\r\n    function setMonthlyPercentage(uint256 _mP) external onlyOwner{\r\n        require(_mP > 0 && _mP <= 50,\"!\");\r\n        mP = _mP;\r\n    }\r\n/*\r\n    @dev: Set minimum ammount to be locked for user to be \r\n    allowed to vote\r\n*/\r\n    function setMinLock(uint256 _minLock) external onlyOwner{\r\n        minLock = _minLock;\r\n    }\r\n/*\r\n    @dev: set the emergency fee\r\n    paid by user if used emergencyWithdrawal\r\n*/\r\n    function setEmergencyFee(uint256 _eW) external onlyOwner{\r\n        emit EmergencyFeeChanged(ewFee, _eW);\r\n        ewFee = _eW;\r\n    }\r\n/*\r\n    @dev: Set One vote count equal to how much ISLAMI\r\n*/\r\n    function setOneVote(uint256 _oneVote) external onlyOwner{\r\n        require(_oneVote !=0,\"Zero!\");\r\n        OneVote = _oneVote;\r\n    }\r\n/*\r\n    @dev: Add voting project and start the voting event\r\n*/\r\n    function setVotingEvent(string memory _question, string memory o1, string memory o2, string memory o3) external onlyOwner{\r\n        votingEventID++;\r\n        votingEventLive = true;\r\n        Event[votingEventID].eventID = votingEventID;\r\n        Event[votingEventID].question = _question;\r\n        Event[votingEventID].status = 1; //Voting event is Active\r\n        addToVote(votingEventID, o1);\r\n        addToVote(votingEventID, o2);\r\n        addToVote(votingEventID, o3);\r\n    }\r\n    /*\r\n    function isVotingEventLive() public view returns(bool){\r\n        return(votingEventLive);\r\n    }*/\r\n/*\r\n    @dev: used by set c=voting events\r\n*/\r\n    function addToVote(uint256 _eventID, string memory _option) internal{\r\n        answerCount++;\r\n        require(votingEventLive == true,\"No Live Event!\");\r\n        Event[_eventID].answers[answerCount].voteOption = _option;\r\n    }    \r\n/*\r\n    @dev: add vote value submitted by user\r\n*/\r\n    function newVote(uint256 _eventID,uint256 _answer, uint256 _vP) internal{\r\n        Event[_eventID].answers[_answer].voteCount += _vP;\r\n    }\r\n/*\r\n     @dev: Check voting results.\r\n*/\r\n    function checkVoteResult(uint256 _eventID) internal{\r\n        if(Event[_eventID].answers[1].voteCount > \r\n           Event[_eventID].answers[2].voteCount &&\r\n           Event[_eventID].answers[1].voteCount >\r\n           Event[_eventID].answers[3].voteCount){\r\n               Event[_eventID].winner = Event[_eventID].answers[1].voteOption;\r\n               return();\r\n        }\r\n        else if(Event[_eventID].answers[2].voteCount > \r\n                Event[_eventID].answers[1].voteCount &&\r\n                Event[_eventID].answers[2].voteCount >\r\n                Event[_eventID].answers[3].voteCount){\r\n                    Event[_eventID].winner = Event[_eventID].answers[2].voteOption;\r\n                    return();\r\n        }\r\n        else if(Event[_eventID].answers[3].voteCount > \r\n                Event[_eventID].answers[1].voteCount &&\r\n                Event[_eventID].answers[3].voteCount >\r\n                Event[_eventID].answers[2].voteCount){\r\n                    Event[_eventID].winner = Event[_eventID].answers[3].voteOption;\r\n                    return();\r\n        }\r\n        else{\r\n            Event[_eventID].winner = \"N/A\";\r\n        }\r\n    }\r\n    function eventResults() public view returns(uint256, string memory, string memory,uint,string memory,uint,string memory,uint){\r\n        uint256 _eventID = votingEventID;\r\n        string memory _question = Event[_eventID].question;\r\n        return(_eventID, _question,\r\n        Event[_eventID].answers[1].voteOption,\r\n        Event[_eventID].answers[1].voteCount,\r\n        Event[_eventID].answers[2].voteOption,\r\n        Event[_eventID].answers[2].voteCount,\r\n        Event[_eventID].answers[3].voteOption,\r\n        Event[_eventID].answers[3].voteCount);\r\n    }    \r\n    function endVotingEvent() external onlyOwner{\r\n        require(Event[votingEventID].status != 0,\"Already ended\");\r\n        answerCount = 0;\r\n        //Zero means voting event has ended\r\n        Event[votingEventID].status = 0;\r\n        checkVoteResult(votingEventID);\r\n        votingEventLive = false;\r\n    }\r\n/*\r\n    @dev: Calculate total locked tokens and set value to\r\n    the reserve (allVaults)\r\n*/\r\n    function totalLocked() internal{\r\n        allVaults = investorVault.add(slInvestorVault);\r\n    }\r\n/*\r\n    @dev: Long term investors & first investors who had their tokens \r\n    locked before in other contract and in old vesting contract are \r\n    reconfigured here.\r\n*/\r\n    function addInvestor(address _investor, uint256 _amount, uint256 _lockTime, address _recoveryWallet) external onlyOwner{\r\n        uint256 amount = _amount.mul(Sonbola);\r\n        totalLocked();\r\n        uint256 availableAmount = ISLAMI.balanceOf(address(this)).sub(allVaults);\r\n        require(availableAmount >= amount,\"No ISLAMI\");\r\n        uint256 lockTime = _lockTime.mul(1 days);\r\n        require(amount > 0, \"Amount greater than 0!\");\r\n        if(investor[_investor].amount > 0){\r\n            investor[_investor].amount += amount;\r\n            investor[_investor].falseAmount = investor[_investor].amount;\r\n            investorVault += amount;\r\n            return;\r\n        }\r\n        require(lockTime > monthly.mul(3), \"less than 90 days!\");\r\n        emit InvestorAdded(msg.sender, amount);\r\n        investor[_investor].falseAmount = amount;\r\n        investor[_investor].amount = amount;\r\n        investor[_investor].recoveryWallet = _recoveryWallet;\r\n        investor[_investor].lockTime = lockTime.add(block.timestamp);\r\n        investor[_investor].timeStart = block.timestamp;\r\n        investor[_investor].monthLock = lockTime.add(block.timestamp);\r\n        Investor[_investor] = true;\r\n        investorVault += amount;\r\n        totalLocked();\r\n        investorCount++;\r\n    }\r\n/*\r\n    @dev: require approval on spen allowance from token contract\r\n    this function for investors who want to lock their tokens\r\n    usage: \r\n           1- if usrr want to use recovery wallet service\r\n           2- if user want to vote on projects!\r\n*/\r\n    function selfLock(uint256 _amount, uint256 _lockTime, address _recoveryWallet) external isNotBlackListed(msg.sender) nonReentrant{\r\n       \r\n        require(_recoveryWallet != deadAddress, \"Burn!\");\r\n        if(_recoveryWallet == zeroAddress){\r\n            _recoveryWallet = address(this);\r\n        }\r\n        require(slInvestor[msg.sender] != true,\"Double locking!\");\r\n        uint256 amount = _amount;\r\n        require(amount >= minLock, \"amount is less than minimum!\");\r\n        uint256 lockTime = _lockTime.mul(1 days);\r\n        require(ISLAMI.balanceOf(msg.sender) >= amount,\"Need ISLAMI!\");\r\n        ISLAMI.transferFrom(msg.sender, address(this), amount);\r\n        emit SelfLockInvestor(msg.sender, amount);\r\n        slinvestor[msg.sender].slAmount = amount; \r\n        slinvestor[msg.sender].slTimeStart = block.timestamp;\r\n        slinvestor[msg.sender].slLockTime = lockTime.add(block.timestamp);\r\n        slinvestor[msg.sender].recoveryWallet = _recoveryWallet;\r\n        slInvestor[msg.sender] = true;\r\n        slInvestorVault += amount;\r\n        totalLocked();\r\n        slinvestorCount++;\r\n    }\r\n/*\r\n    @dev: require approval on spen allowance from token contract\r\n    this function is to edit the amount locked by user\r\n    usage: if user want to raise his voting power\r\n*/\r\n    function editSelfLock(uint256 _amount) external ISslInvestor(msg.sender) nonReentrant{\r\n        uint256 amount = _amount;// * Sonbola;\r\n        require(ISLAMI.balanceOf(msg.sender) >= amount,\"Need ISLAMI!\");\r\n        ISLAMI.transferFrom(msg.sender, address(this), amount);\r\n        slinvestor[msg.sender].slAmount += amount;\r\n        slInvestorVault += amount;\r\n        emit EditSelfLock(msg.sender, amount);\r\n        totalLocked();\r\n    }\r\n/*\r\n    @dev: Extend the period of locking, used if user wants\r\n    to vote and the period is less than 30 days\r\n*/\r\n    function extendSelfLock(uint256 _lockTime) external ISslInvestor(msg.sender) nonReentrant{\r\n        uint256 lockTime = _lockTime.mul(1 days);\r\n        slinvestor[msg.sender].slLockTime += lockTime;\r\n        emit ExtendSelfLock(msg.sender, lockTime);\r\n    }\r\n/*\r\n    @dev: Investor lost his phone or wallet, or passed away!\r\n    only the wallet registered as recovery can claim tokens after lock is done\r\n*/\r\n    function recoverWallet(address _investor) external ISslInvestor(_investor) nonReentrant{\r\n        require(msg.sender == slinvestor[_investor].recoveryWallet &&\r\n        slinvestor[_investor].slLockTime < block.timestamp,\r\n        \"Not allowed\");\r\n        useRecovery(_investor);\r\n    }\r\n/*\r\n    @dev: Unlock locked tokens for user\r\n    only the original sender can call this function\r\n*/\r\n    function selfUnlock(uint256 _amount) external ISslInvestor(msg.sender) nonReentrant{\r\n        require(slinvestor[msg.sender].slLockTime <= block.timestamp, \"Not yet\");\r\n        uint256 amount = _amount;\r\n        require(slinvestor[msg.sender].slAmount >= amount, \"Amount exceed balance!\");\r\n        slinvestor[msg.sender].slAmount -= amount;\r\n        slInvestorVault -= amount;\r\n        if(slinvestor[msg.sender].slAmount == 0){\r\n            slInvestor[msg.sender] = false;\r\n            delete slinvestor[msg.sender];\r\n            slinvestorCount--;\r\n        }\r\n        totalLocked();\r\n        emit SelfISLAMIClaim(msg.sender, amount);\r\n        ISLAMI.transfer(msg.sender, amount);\r\n    }\r\n/*\r\n    @dev: If self lock investor wallet was hacked!\r\n    Warning: this will blacklist the message sender!\r\n*/\r\n    function emergencyWithdrawal() external ISslInvestor(msg.sender) nonReentrant{\r\n        useRecovery(msg.sender);\r\n    }\r\n/*\r\n    @dev: Recover Wallet Service, also used by emergencyWithdrawal!\r\n    * Check if statment\r\n    if user didn't add a recovery wallet when locking his tokens\r\n    the recovery wallet is set this contract and tokens are safe \r\n    and released to the contract itself.\r\n    This contract does not have a function to release the tokens\r\n    in case of emerergency it is only done by the user.\r\n    if(newWallet == address(this))\r\n    Release tokens to smart contract, investor should contact project owner on Telegram @jeffrykr\r\n*/\r\n    function useRecovery(address _investor) internal {\r\n        blackList[_investor] = true;\r\n        uint256 feeToPay = slinvestor[_investor].slAmount.mul(ewFee).div(100);\r\n        address newWallet = slinvestor[_investor].recoveryWallet;\r\n        uint256 fullBalance = slinvestor[_investor].slAmount.sub(feeToPay);\r\n        slInvestorVault -= slinvestor[_investor].slAmount;\r\n        slInvestor[_investor] = false;\r\n        delete slinvestor[_investor];\r\n        totalLocked();\r\n        slinvestorCount--;\r\n        emit EmergencyWithdraw(_investor, newWallet, fullBalance);\r\n        if(newWallet == address(this)){  \r\n            return();\r\n        }\r\n        ISLAMI.transfer(newWallet, fullBalance);\r\n    }\r\n/*\r\n    @dev: Claim Monthly allowed amount for long term investors\r\n*/\r\n    function claimMonthlyAmount() external isInvestor(msg.sender) nonReentrant{\r\n        uint256 totalTimeLock = investor[msg.sender].monthLock;\r\n        uint256 mainAmount = investor[msg.sender].falseAmount;\r\n        uint256 remainAmount = investor[msg.sender].amount;\r\n        require(totalTimeLock <= block.timestamp, \"Not yet\");\r\n        require(remainAmount > 0, \"No ISLAMI\");  \r\n        uint256 amountAllowed = mainAmount.mul(mP).div(hPercent);\r\n        investor[msg.sender].amount = remainAmount.sub(amountAllowed);\r\n        investor[msg.sender].monthLock += monthly;\r\n        investorVault -= amountAllowed;\r\n        if(investor[msg.sender].amount == 0){\r\n            Investor[msg.sender] = false;\r\n            delete investor[msg.sender];\r\n            investorCount--;\r\n        }\r\n        totalLocked();\r\n        emit ISLAMIClaimed(msg.sender, amountAllowed);\r\n        ISLAMI.transfer(msg.sender, amountAllowed);\r\n    }\r\n/*\r\n    @dev: If their are any leftovers after claiming all allowed amounts\r\n*/\r\n    function claimRemainings() external isInvestor(msg.sender) nonReentrant{\r\n        uint256 fullTime = hPercent.div(mP).mul(monthly);\r\n        uint256 totalTimeLock = investor[msg.sender].lockTime.add(fullTime);\r\n        require(totalTimeLock <= block.timestamp, \"Not yet\");\r\n        uint256 remainAmount = investor[msg.sender].amount;\r\n        investor[msg.sender].amount = 0;\r\n        investorVault -= remainAmount;\r\n        Investor[msg.sender] = false;\r\n        delete investor[msg.sender];\r\n        emit ISLAMIClaimed(msg.sender, remainAmount);\r\n        ISLAMI.transfer(msg.sender, remainAmount);\r\n        totalLocked();\r\n        investorCount--;\r\n    }\r\n/*\r\n    @dev: Voting for projects\r\n    user can vote only once in an event\r\n    user power is calculated with respect to locked tokens balance\r\n    Voting fee is not obligatory\r\n*/\r\n    function voteFor(uint256 _answer, uint256 _votingFee) isNotBlackListed(msg.sender) public nonReentrant{\r\n        uint256 _eventID = votingEventID;\r\n        require(votingEventLive == true,\"No voting event\");\r\n        require(Investor[msg.sender] == true || slInvestor[msg.sender] == true,\"not allowed\");\r\n        address voter = msg.sender;\r\n        uint256 votePower;\r\n        uint256 votingFee = _votingFee;\r\n        uint256 lockedBasePower;\r\n        uint256 mainPower;\r\n\r\n        if(Investor[voter] == true && slInvestor[voter] != true){\r\n            if(_eventID > investor[msg.sender].votedForEvent){\r\n                investor[msg.sender].voted = false;\r\n        }\r\n            require(investor[msg.sender].voted != true,\"Already Voted!\");\r\n            lockedBasePower = investor[voter].amount;\r\n            require(lockedBasePower > votingFee,\"Need more ISLAMI\");\r\n            investor[voter].amount -= votingFee;\r\n            investor[msg.sender].voted = true;\r\n            investor[msg.sender].votedForEvent = _eventID;\r\n            investorVault -= votingFee;\r\n        }\r\n        if(slInvestor[voter] == true && Investor[voter] != true){\r\n            if(_eventID > slinvestor[msg.sender].votedForEvent){\r\n                slinvestor[msg.sender].voted = false;\r\n        }\r\n            require(slinvestor[msg.sender].voted != true,\"Already Voted!\");\r\n            require(slinvestor[msg.sender].slLockTime >= monthly,\"Should lock 30 days\");\r\n            lockedBasePower = slinvestor[voter].slAmount;\r\n            require(lockedBasePower > votingFee,\"Need more ISLAMI\");\r\n            slinvestor[voter].slAmount -= votingFee;\r\n            slinvestor[msg.sender].voted = true;\r\n            slinvestor[msg.sender].votedForEvent = _eventID;\r\n            slInvestorVault -= votingFee;\r\n        }\r\n        if(Investor[voter] == true && slInvestor[voter] == true){\r\n            if(_eventID > investor[msg.sender].votedForEvent){\r\n                investor[msg.sender].voted = false;\r\n        }\r\n            require(investor[msg.sender].voted != true,\"Already Voted!\");\r\n            uint256 lockedBasePower1 = investor[voter].amount;\r\n            uint256 lockedBasePower2 = slinvestor[voter].slAmount;\r\n            lockedBasePower = lockedBasePower1.add(lockedBasePower2);\r\n            require(lockedBasePower2 > votingFee,\"Need more ISLAMI\");\r\n            slinvestor[voter].slAmount -= votingFee;\r\n            investor[msg.sender].voted = true;\r\n            investor[msg.sender].votedForEvent = _eventID;\r\n            slInvestorVault -= votingFee;\r\n        }\r\n        mainPower = lockedBasePower*10**2;\r\n        if(votingFee > 0){\r\n            ISLAMI.transfer(BaytAlMal, votingFee);\r\n        }\r\n        votePower = mainPower.div(OneVote);\r\n        newVote(_eventID, _answer, votePower);\r\n        emit Voted(_eventID, msg.sender, votingFee);\r\n    }\r\n/*\r\n    @dev: If long term investor wallet was lost!\r\n*/\r\n    function releaseWallet(address _investor) isInvestor(_investor) external nonReentrant{\r\n        uint256 fullTime = hPercent.div(mP).mul(monthly);\r\n        uint256 totalTimeLock = investor[_investor].lockTime.add(fullTime);\r\n        require(msg.sender == investor[_investor].recoveryWallet &&\r\n        totalTimeLock < block.timestamp,\"Not yet!\");\r\n        blackList[_investor] = true;\r\n        uint256 remainAmount = investor[_investor].amount;\r\n        investor[_investor].amount = 0;\r\n        investorVault -= remainAmount;\r\n        totalLocked();\r\n        Investor[_investor] = false;\r\n        delete investor[_investor];\r\n        investorCount--;\r\n        emit EmergencyWithdraw(_investor, msg.sender, remainAmount);\r\n        ISLAMI.transfer(msg.sender, remainAmount);\r\n    }\r\n/*\r\n    @dev: Withdrwa ISLAMI that are not locked for Investors\r\n    usage: sending ISLAMI by user directly to contract,\r\n    in this function we can return only what is sent by mistake\r\n*/\r\n    function withdrawalISLAMI(uint256 _amount, uint256 sonbola, address to) external onlyOwner() {\r\n        totalLocked();\r\n        uint256 dcml = 10 ** sonbola;\r\n        uint256 amount = ISLAMI.balanceOf(address(this)).sub(allVaults);\r\n        require(amount > 0 && _amount*dcml <= amount, \"No ISLAMI!\");\r\n        emit WithdrawalISLAMI( _amount, sonbola, to);\r\n        ISLAMI.transfer(to, _amount*dcml);\r\n    }\r\n/*\r\n    @dev: Withdrwa ERC20 tokens if sent by mistake to contract\r\n    and return back to sender\r\n*/\r\n    function withdrawalERC20(address _tokenAddr, uint256 _amount, uint256 decimal, address to) external onlyOwner() {\r\n        uint256 dcml = 10 ** decimal;\r\n        ERC20 token = ERC20(_tokenAddr);\r\n        require(token != ISLAMI, \"No!\"); //Can't withdraw ISLAMI using this function!\r\n        emit WithdrawalERC20(_tokenAddr, _amount, decimal, to);\r\n        token.transfer(to, _amount*dcml); \r\n    }  \r\n/*\r\n    @dev: Withdrwa Matic token!\r\n    return back to sender if sent by mistake\r\n*/\r\n    function withdrawalMatic(uint256 _amount, uint256 decimal, address to) external onlyOwner() {\r\n        require(address(this).balance >= _amount,\"Balanace\"); //No matic balance available\r\n        require(to != address(0), \"Zero Address\");\r\n        uint256 dcml = 10 ** decimal;\r\n        emit WithdrawalMatic(_amount, decimal, to);\r\n        payable(to).transfer(_amount*dcml);      \r\n    }\r\n/*\r\n    @dev: contract is payable (can receive Matic)\r\n*/\r\n    receive() external payable {}\r\n}\r\n\r\n\r\n               /*********************************************************\r\n                  Proudly Developed by MetaIdentity ltd. Copyright 2022\r\n               **********************************************************/", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_ISLAMI\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NewOwner\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"EditSelfLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"EmergencyFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NewWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"ExtendSelfLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"ISLAMIClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"InvestorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"SelfISLAMIClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"SelfLockInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"VotingEvent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"projectName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Result\",\"type\":\"uint256\"}],\"name\":\"VoteResults\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"VotingEvent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteFee\",\"type\":\"uint256\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"WithdrawalERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sonbola\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"WithdrawalISLAMI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"WithdrawalMatic\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BaytAlMal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Event\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"eventID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"question\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"winner\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ISLAMI\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Investor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Sonbola\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recoveryWallet\",\"type\":\"address\"}],\"name\":\"addInvestor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allVaults\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newBaytAlMal\",\"type\":\"address\"}],\"name\":\"changeBaytAlMal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimMonthlyAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRemainings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"editSelfLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endVotingEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eventResults\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ewFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockTime\",\"type\":\"uint256\"}],\"name\":\"extendSelfLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"hasLockedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"falseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recoveryWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"monthLock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeStart\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"voted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"votedForEvent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investorVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"monthly\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"recoverWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"releaseWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recoveryWallet\",\"type\":\"address\"}],\"name\":\"selfLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"selfUnlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eW\",\"type\":\"uint256\"}],\"name\":\"setEmergencyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minLock\",\"type\":\"uint256\"}],\"name\":\"setMinLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mP\",\"type\":\"uint256\"}],\"name\":\"setMonthlyPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_oneVote\",\"type\":\"uint256\"}],\"name\":\"setOneVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_question\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"o1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"o2\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"o3\",\"type\":\"string\"}],\"name\":\"setVotingEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"slInvestor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slInvestorVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"slinvestor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"slAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slLockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slTimeStart\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recoveryWallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"voted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"votedForEvent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slinvestorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_answer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votingFee\",\"type\":\"uint256\"}],\"name\":\"voteFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingEventID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingEventLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawalERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sonbola\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawalISLAMI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawalMatic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zeroAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ISLAMIvesting_V4", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009c891326fd8b1a713974f73bb604677e1e63396d", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://582b04e4582ace8d66a79786ac6cebbb299a0db16594f6b0172ff9d3b409961d"}