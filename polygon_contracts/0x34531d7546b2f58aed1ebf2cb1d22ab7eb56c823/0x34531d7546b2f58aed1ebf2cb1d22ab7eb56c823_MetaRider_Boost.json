{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/**   ===========================ERROR-CODE===============================\r\n\r\n\r\nEC-01 => INVALID_OWNER/CALLER IS NOT AN OWNER\r\n\r\nEC-02 => ADRESS CAN'T BE ZERO ADDRESS\r\n\r\nEC-03 => USER DOESN'T EXISIT \r\n\r\nEC-04 => SPONSER DOESN'T EXISIT\r\n\r\nEC-05 => You can`t be referal/You allready registred\r\n\r\nEC-06 => This level is already activated / Wrong level\r\n\r\nEC-07 => Previous level not activated\r\n\r\nEC-08 => User not exists, Buy First Level / Buy Previous level first!\r\n\r\nEC-09 => s9 level already activated\r\n\r\nEC-10 => user /sponser doesn't exisit\r\n\r\nEC-11 => cannot be a contract\r\n\r\nEC-12 => invalid level\r\n\r\nEC-13 => level already activated\r\n\r\nEC-14 => 500. Referrer level is inactive\r\n\r\nEC-15 =>\r\n\r\nEC-16 =>\r\n\r\nEC-17 =>\r\n\r\nEC-18 =>\r\n\r\nEC-19 =>\r\n\r\nEC-20 =>\r\n\r\n\r\n*/\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n       \r\n        _onlyOwner();\r\n        _;\r\n    }\r\n\r\n    function _onlyOwner() view private {\r\n         require(owner() == _msgSender(), \"EC-01\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"EC-02\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n//===============================ERROR-CODE================================\r\n\r\n\r\n\r\ncontract MetaRiderCore is Ownable {\r\n\r\n  IERC20 public tokenMetaRider;\r\n\r\n}\r\n\r\n\r\n\r\nabstract contract Referal is MetaRiderCore {\r\n\r\n  modifier isRegistred {\r\n    require(users[_msgSender()].parent != address(0), \"EC-02\");\r\n    _;\r\n  }\r\n\r\n  struct User {\r\n    bool autoReCycle;\r\n    bool autoUpgrade;\r\n    address parent;\r\n    address[] childs;\r\n  }\r\n\r\n  mapping(address => User) public users;\r\n\r\n\r\n  mapping(address => mapping(uint => bool)) public activate; // user -> lvl -> active\r\n\r\n  uint32 public lastId;\r\n\r\n   struct UserAccount {\r\n        uint32 id;\r\n        uint32 directSales;\r\n       \r\n        bool exists;\r\n        uint8[] activeSlot;\r\n        address sponsor;\r\n       \r\n    }\r\n\r\n    mapping(address => mapping(uint8 => S9)) public s9Slots;\r\n     uint8 public constant S9_LAST_LEVEL = 12;\r\n     uint internal reentry_status;\r\n \r\nstruct S9 {\r\n        address sponsor;\r\n        uint32 directSales;\r\n        uint16 cycleCount;\r\n        uint8 passup;\r\n        uint8 cyclePassup;\r\n        uint8 reEntryCheck;\r\n        uint8 placementPosition;\r\n        uint8 lastOneLevelCount;\r\n        uint8 lastTwoLevelCount;\r\n        uint8 lastThreeLevelCount;\r\n        address[] firstLevel;\r\n        address placedUnder;\r\n\r\n    }\r\n     mapping(address => UserAccount) public userAccounts;\r\n    mapping(uint32 => address) public idToUserAccount;\r\n    mapping(address => mapping(uint => bool)) public activateS9; // user -> lvl -> active\r\n       modifier isUserAccount(address _addr) {\r\n           \r\n        require(userAccounts[_addr].exists, \"EC-03\");\r\n        _;\r\n    }\r\n\r\n  constructor(){\r\n\r\n      /// Set first User\r\n     \r\n      users[_msgSender()] = User(false,false,_msgSender(),new address[](0));\r\n      for (uint i = 0; i < 12; i++) {\r\n          activate[_msgSender()][i] = true;\r\n      } \r\n\r\n\r\n      createAccount(_msgSender(), _msgSender(), true);\r\n\r\n      \r\n  }\r\n\r\n  \r\n\r\n   function createAccount(address _user, address _sponsor, bool _initial) internal {\r\n\r\n        require(!userAccounts[_user].exists, \"EC-03\");\r\n\r\n        if (_initial == false) {\r\n            require(userAccounts[_sponsor].exists, \"EC-04\");\r\n        }\r\n\r\n        lastId++;\r\n\r\n          userAccounts[_user] = UserAccount({\r\n             id: lastId,\r\n             sponsor: _sponsor,\r\n             exists: true,\r\n             directSales: 0,\r\n             activeSlot: new uint8[](2)\r\n         });\r\n\r\n      \r\n\r\n        idToUserAccount[lastId] = _user;\r\n\r\n        \r\n\r\n    }\r\n\r\n\r\n\r\n  function getChilds() view external returns(address[] memory) {\r\n    return users[_msgSender()].childs;\r\n  }\r\n\r\n  function _isActive(address _address, uint _lvl) internal view returns(bool) {\r\n      return activate[_address][_lvl];\r\n  }\r\n\r\n}\r\n\r\n\r\nabstract contract Programs is Referal {\r\n  mapping(uint => Product) public products;\r\n  //mapping(uint8 => uint) public s9LevelPrice;\r\n\r\n  enum Product {\r\n      s2,    \r\n      s9\r\n  }\r\n\r\n  \r\n\r\n    uint[12] public prices;\r\n   \r\n   \r\n\r\n  constructor(){\r\n    \r\n   for (uint i = 0; i < 12; i++) {\r\n     \r\n            products[i]=Product.s2;      \r\n            products[i]=Product.s9;\r\n     \r\n       \r\n    }\r\n\r\n\r\n    prices[0] = 3 * (10 ** 18); // 2x\r\n    prices[1] = 5 * (10 ** 18);// 4x\r\n    prices[2] = 7 * (10 ** 18);// 8x\r\n    prices[3] = 10 * (10 ** 18);// 9x\r\n    prices[4] = 15 * (10 ** 18);// 2x\r\n    prices[5] = 20 * (10 ** 18);// 4x\r\n    prices[6] = 30 * (10 ** 18);// 8x\r\n    prices[7] = 50 * (10 ** 18);// 9x\r\n    prices[8] = 100 * (10 ** 18);// 2x\r\n    prices[9] = 200 * (10 ** 18);// 4x\r\n    prices[10] = 350 * (10 ** 18);// 8x\r\n    prices[11] = 500 * (10 ** 18);// 9x\r\n\r\n\r\n   \r\n  }\r\n\r\n//   function _sendDevisionMoney(address _parent, uint _price, uint _percent) internal {\r\n//     uint amoutSC = _price * _percent / 100;\r\n//     tokenMetaRider.transferFrom(_msgSender(), _parent, (_price - amoutSC)); // transfer token to me\r\n//     tokenMetaRider.transferFrom(_msgSender(), address(this), amoutSC); // transfer token to smart contract\r\n//   }\r\n\r\n  function getActivateParent(address _child, uint _lvl) internal view returns (address response) {\r\n      address __parent = users[_child].parent;\r\n      while(true) {\r\n          if (_isActive(__parent, _lvl)) {\r\n              return __parent;\r\n          } else {\r\n              __parent =users[__parent].parent;\r\n          }\r\n      }\r\n  }\r\n}\r\n\r\n\r\nabstract contract S3 is Programs {\r\n\r\n  \r\n  struct structS2 {\r\n    uint slot;\r\n    uint lastChild;\r\n  }\r\n\r\n  mapping (address => mapping(uint => structS2)) public matrixS2; // user -> lvl -> structS3\r\n  mapping(address => mapping(uint => address[])) public childsS2;\r\n\r\n  event updates2Ev(address child,address _parent, uint lvl,uint _lastChild,uint amount,uint timeNow);\r\n  function updateS2(address _child, uint lvl) isRegistred internal{\r\n    address _parent = getActivateParent(_child, lvl);\r\n\r\n    // Increment lastChild\r\n    structS2 storage _parentStruct = matrixS2[_parent][lvl];\r\n    uint _lastChild = _parentStruct.lastChild;\r\n    _parentStruct.lastChild++;\r\n    _lastChild = _lastChild % 2;\r\n\r\n    // Get price\r\n    uint _price = prices[lvl];\r\n\r\n    // First Child\r\n    if (_lastChild == 0) {\r\n     \r\n          tokenMetaRider.transferFrom(_msgSender(), _parent, _price);\r\n     \r\n    }\r\n\r\n    // Last Child\r\n    if (_lastChild == 1) {\r\n     \r\n        if (_parent != owner()){\r\n        \r\n          emit updates2Ev(_child,_parent,  lvl, _lastChild,  _price, block.timestamp);\r\n          updateS2(_parent, lvl); // update parents product\r\n        }\r\n        else{\r\n            //tokenMetaRider.transferFrom(_msgSender(), address(this), _price);\r\n            tokenMetaRider.transferFrom(_msgSender(), owner(), _price);\r\n\r\n        }\r\n      //}\r\n      _parentStruct.slot++;\r\n    }\r\n\r\n    // Push new child\r\n    childsS2[_parent][lvl].push(_child);\r\n    emit updates2Ev(_child,_parent,  lvl,_lastChild,  _price, block.timestamp);\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract MetaRider_Boost is S3 {\r\n\r\nconstructor(address _token) Ownable() {    \r\n    tokenMetaRider = IERC20(_token);\r\n    for (uint8 i = 0; i < S9_LAST_LEVEL; i++) {\r\n            setPositionS9(_msgSender(), _msgSender(), _msgSender(), i, true, false);\r\n        }\r\n  }\r\n\r\n  \r\n\r\n\r\n  event regEv(address _newUser,address _parent, uint timeNow);\r\n\r\nfunction registration(address _parent) external { \r\n    mainreg(_msgSender(), _parent);\r\n }\r\n\r\n\r\n  function mainreg(address useradd, address _parent) internal {      \r\n      require(useradd != _parent && users[useradd].parent == address(0), \"EC-05\");\r\n    \r\n        users[useradd].parent = _parent;\r\n        users[_parent].childs.push(useradd);        \r\n        createAccount(useradd, _parent, false);\r\n        idToUserAccount[lastId] = useradd;\r\n       \r\n\r\n        updateS2(useradd, 0);\r\n        purchaseLevels9(useradd,0);\r\n        \r\n        activate[useradd][0] = true;\r\n      emit regEv(useradd, _parent, block.timestamp);\r\n  }\r\n\r\n    function buy(uint8 lvl) isRegistred  external {\r\n        mainbuy(_msgSender(), lvl);\r\n    }  \r\n    // Only owner call \r\n    function registration1(address _parent, address users) external onlyOwner { \r\n        mainreg(users, _parent);\r\n    }\r\n\r\n    function buy1(address users, uint8 lvl) isRegistred  external onlyOwner {\r\n        mainbuy(users, lvl);\r\n    }\r\n    // Only owner call\r\n\r\n  event buyEv(address _user,uint  lvl, uint timeNow, uint amount);\r\n  function mainbuy(address useradd, uint8 lvl)  internal {\r\n      require(activate[useradd][lvl] == false && lvl < 12 , \"EC-06\");\r\n      \r\n      // Check if there is enough money\r\n\r\n      for (uint i = 0; i < lvl; i++) {\r\n        require(activate[useradd][i] == true, \"EC-07\");\r\n      }\r\n    \r\n        updateS2(useradd, lvl);\r\n    \r\n        purchaseLevels9(useradd,lvl);\r\n      //}\r\n    emit buyEv(useradd, lvl, block.timestamp, prices[lvl]);\r\n      // Activate new lvl\r\n      activate[useradd][lvl] = true;\r\n  }\r\n\r\n  \r\n\r\n  \r\n\r\n   function setTokenAddress(address _token) public onlyOwner returns(bool)\r\n    {\r\n        tokenMetaRider = IERC20(_token);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n  \r\n    event purchaseLevelEvent(address user, address sponsor, uint8 matrix, uint8 level);\r\n    event positionS9Event(address user, address sponsor, uint8 level, uint8 placementPosition, address placedUnder, bool passup);\r\n    event cycleCompleteEvent(address indexed user, address fromPosition, uint8 matrix, uint8 level);\r\n    \r\n    event passupEvent(address indexed user, address passupFrom, uint8 matrix, uint8 level);\r\n    event payoutEvent(address indexed user, address payoutFrom, uint8 matrix, uint8 level);\r\n\r\n  // function purchaseLevels9(uint8 _level) external isUserAccount(_msgSender()) {\r\n      function purchaseLevels9(address Useraddress, uint8 _level) isRegistred internal{ \r\n       // require(_level > 0 && _level <= S9_LAST_LEVEL && (userAccounts[Useraddress].exists) && userAccounts[Useraddress].activeSlot[1]+1 == _level, \"EC-08\");\r\n        require(_level < S9_LAST_LEVEL, \"EC-08\");\r\n\r\n        //require(userAccounts[Useraddress].activeSlot[1] < _level, \"EC-09\");\r\n\r\n        address sponsor = userAccounts[Useraddress].sponsor;\r\n\r\n        setPositionS9(Useraddress, sponsor, findActiveSponsor(Useraddress, userAccounts[Useraddress].sponsor, 1, _level, true), _level, false, true);\r\n\r\n        emit purchaseLevelEvent(Useraddress, sponsor, 1, _level);\r\n       \r\n    }\r\n\r\n      function setPositionS9(address _user, address _realSponsor, address _sponsor, uint8 _level, bool _initial, bool _releasePayout) internal {\r\n\r\n\r\n        userAccounts[_user].activeSlot[1]=_level;\r\n\r\n        s9Slots[_user][_level] = S9({\r\n            sponsor: _sponsor, directSales: 0, cycleCount: 0, passup: 0, reEntryCheck: 0,\r\n            placementPosition: 0, placedUnder: _sponsor, firstLevel: new address[](0), lastOneLevelCount: 0, lastTwoLevelCount:0, lastThreeLevelCount: 0, cyclePassup: 0\r\n        });\r\n\r\n        if (_initial == true) {\r\n            return;\r\n        } else if (_realSponsor == _sponsor) {\r\n            s9Slots[_realSponsor][_level].directSales++;\r\n        } else {\r\n            s9Slots[_user][_level].reEntryCheck = 1; // This user place under other User\r\n        }\r\n\r\n\r\n        sponsorParentS9(_user, _sponsor, _level, false, _releasePayout);\r\n    }\r\n\r\n    function sponsorParentS9(address _user, address _sponsor, uint8 _level, bool passup, bool _releasePayout) internal {\r\n\r\n        S9 storage userAccountSlot = s9Slots[_user][_level];\r\n        S9 storage slot = s9Slots[_sponsor][_level];\r\n\r\n        if (passup == true && _user ==  owner() && _sponsor ==  owner()) {\r\n            doS9Payout( owner(),  owner(), _level, _releasePayout);\r\n            return;\r\n        }\r\n\r\n        if (slot.firstLevel.length < 3) {\r\n\r\n            if (slot.firstLevel.length == 0) {\r\n                userAccountSlot.placementPosition = 1;\r\n                doS9Payout(_user, _sponsor, _level, _releasePayout);\r\n            } else if (slot.firstLevel.length == 1) {\r\n                userAccountSlot.placementPosition = 2;\r\n                doS9Payout(_user, slot.placedUnder, _level, _releasePayout);\r\n                if (_sponsor != idToUserAccount[1]) {\r\n                    slot.passup++;\r\n                }\r\n\r\n            } else {\r\n\r\n                userAccountSlot.placementPosition = 3;\r\n\r\n                if (_sponsor != idToUserAccount[1]) {\r\n                    slot.passup++;\r\n                }\r\n            }\r\n\r\n            userAccountSlot.placedUnder = _sponsor;\r\n            slot.firstLevel.push(_user);\r\n\r\n            emit positionS9Event(_user, _sponsor, _level, userAccountSlot.placementPosition, userAccountSlot.placedUnder, passup);\r\n\r\n            //update the memory\r\n\r\n            setPositionsAtLastLevelS9(_user, _sponsor, slot.placedUnder, slot.placementPosition, _level, _releasePayout);\r\n        }\r\n        else {\r\n\r\n            S9 storage slotUnderOne = s9Slots[slot.firstLevel[0]][_level];\r\n            S9 storage slotUnderTwo = s9Slots[slot.firstLevel[1]][_level];\r\n            S9 storage slotUnderThree = s9Slots[slot.firstLevel[2]][_level];\r\n\r\n\r\n            if (slot.lastOneLevelCount < 7) {\r\n\r\n                if ((slot.lastOneLevelCount & 1) == 0) {\r\n                    userAccountSlot.placementPosition = 1;\r\n                    userAccountSlot.placedUnder = slot.firstLevel[0];\r\n                    slot.lastOneLevelCount += 1;\r\n                    doS9Payout(_user, userAccountSlot.placedUnder, _level, _releasePayout);\r\n\r\n                } else if ((slot.lastOneLevelCount & 2) == 0) {\r\n                    userAccountSlot.placementPosition = 2;\r\n                    userAccountSlot.placedUnder = slot.firstLevel[0];\r\n                    slot.lastOneLevelCount += 2;\r\n                    doS9Payout(_user, slotUnderOne.placedUnder, _level, _releasePayout);\r\n                    if (_sponsor != idToUserAccount[1]) { slotUnderOne.passup++; }\r\n\r\n                } else {\r\n\r\n                    userAccountSlot.placementPosition = 3;\r\n                    userAccountSlot.placedUnder = slot.firstLevel[0];\r\n                    slot.lastOneLevelCount += 4;\r\n                    if (_sponsor != idToUserAccount[1]) { slotUnderOne.passup++; }\r\n\r\n                    if ((slot.lastOneLevelCount + slot.lastTwoLevelCount + slot.lastThreeLevelCount) == 21) {\r\n                        slot.cyclePassup++;\r\n                    }\r\n                    else {\r\n                        doS9Payout(_user, slotUnderOne.placedUnder, _level, _releasePayout);\r\n                    }\r\n                }\r\n            }\r\n            else if (slot.lastTwoLevelCount < 7) {\r\n\r\n                if ((slot.lastTwoLevelCount & 1) == 0) {\r\n                    userAccountSlot.placementPosition = 1;\r\n                    userAccountSlot.placedUnder = slot.firstLevel[1];\r\n                    slot.lastTwoLevelCount += 1;\r\n                    doS9Payout(_user, userAccountSlot.placedUnder, _level, _releasePayout);\r\n\r\n                } else if ((slot.lastTwoLevelCount & 2) == 0) {\r\n                    userAccountSlot.placementPosition = 2;\r\n                    userAccountSlot.placedUnder = slot.firstLevel[1];\r\n                    slot.lastTwoLevelCount += 2;\r\n                    doS9Payout(_user, slotUnderTwo.placedUnder, _level, _releasePayout);\r\n                    if (_sponsor != idToUserAccount[1]) { slotUnderTwo.passup++; }\r\n\r\n                } else {\r\n\r\n                    userAccountSlot.placementPosition = 3;\r\n                    userAccountSlot.placedUnder = slot.firstLevel[1];\r\n                    slot.lastTwoLevelCount += 4;\r\n                    if (_sponsor != idToUserAccount[1]) { slotUnderTwo.passup++; }\r\n\r\n                    if ((slot.lastOneLevelCount + slot.lastTwoLevelCount + slot.lastThreeLevelCount) == 21) {\r\n                        slot.cyclePassup++;\r\n                    }\r\n                    else {\r\n                        doS9Payout(_user, slotUnderTwo.placedUnder, _level, _releasePayout);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n\r\n                if ((slot.lastThreeLevelCount & 1) == 0) {\r\n                    userAccountSlot.placementPosition = 1;\r\n                    userAccountSlot.placedUnder = slot.firstLevel[2];\r\n                    slot.lastThreeLevelCount += 1;\r\n                    doS9Payout(_user, userAccountSlot.placedUnder, _level, _releasePayout);\r\n\r\n                } else if ((slot.lastThreeLevelCount & 2) == 0) {\r\n\r\n                    userAccountSlot.placementPosition = 2;\r\n                    userAccountSlot.placedUnder = slot.firstLevel[2];\r\n                    slot.lastThreeLevelCount += 2;\r\n                    doS9Payout(_user, slotUnderThree.placedUnder, _level, _releasePayout);\r\n                    if (_sponsor != idToUserAccount[1]) { slotUnderThree.passup++; }\r\n\r\n                } else {\r\n\r\n                    userAccountSlot.placementPosition = 3;\r\n                    userAccountSlot.placedUnder = slot.firstLevel[2];\r\n                    slot.lastThreeLevelCount += 4;\r\n                    if (_sponsor != idToUserAccount[1]) { slotUnderThree.passup++; }\r\n\r\n                    if ((slot.lastOneLevelCount + slot.lastTwoLevelCount + slot.lastThreeLevelCount) == 21) {\r\n                        slot.cyclePassup++;\r\n                    }\r\n                    else {\r\n                        doS9Payout(_user, slotUnderThree.placedUnder, _level, _releasePayout);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (userAccountSlot.placedUnder != idToUserAccount[1]) {\r\n                s9Slots[userAccountSlot.placedUnder][_level].firstLevel.push(_user);\r\n            }\r\n\r\n             emit positionS9Event(_user, _sponsor, _level, userAccountSlot.placementPosition, userAccountSlot.placedUnder, passup);\r\n        }\r\n\r\n\r\n        if ((slot.lastOneLevelCount + slot.lastTwoLevelCount + slot.lastThreeLevelCount) == 21) {\r\n\r\n            emit cycleCompleteEvent(_sponsor, _user, 2, _level);\r\n\r\n           slot.firstLevel = new address[](0);\r\n            slot.lastOneLevelCount = 0;\r\n            slot.lastTwoLevelCount = 0;\r\n            slot.lastThreeLevelCount = 0;\r\n            slot.cycleCount++;\r\n\r\n            if (_sponsor != idToUserAccount[1]) {\r\n                sponsorParentS9(_sponsor, slot.sponsor, _level, true, _releasePayout);\r\n            }\r\n            else {\r\n                doS9Payout(_user, _sponsor, _level, _releasePayout);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    function setPositionsAtLastLevelS9(address _user, address _sponsor, address _placeUnder, uint8 _placementPosition, uint8 _level, bool _releasePayout) internal {\r\n\r\n        S9 storage slot = s9Slots[_placeUnder][_level];\r\n\r\n        if (slot.placementPosition == 0 && _sponsor == idToUserAccount[1]) {\r\n\r\n            S9 storage userAccountSlot = s9Slots[_user][_level];\r\n            if (userAccountSlot.placementPosition == 3) {\r\n                doS9Payout(_user, _sponsor, _level, _releasePayout);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        if (_placementPosition == 1 && slot.lastOneLevelCount < 7) {\r\n\r\n            // if ((slot.lastOneLevelCount & 1) == 0) { slot.lastOneLevelCount += 1; }\r\n            // else if ((slot.lastOneLevelCount & 2) == 0) { slot.lastOneLevelCount += 2; }\r\n            // else { slot.lastOneLevelCount += 4; }\r\n\r\n             slot.lastOneLevelCount+= (slot.lastOneLevelCount & 1)==0?1:(slot.lastOneLevelCount & 2)==0?2:4;\r\n\r\n        }\r\n        else if (_placementPosition == 2 && slot.lastTwoLevelCount < 7) {\r\n\r\n            // if ((slot.lastTwoLevelCount & 1) == 0) { slot.lastTwoLevelCount += 1; }\r\n            // else if ((slot.lastTwoLevelCount & 2) == 0) {slot.lastTwoLevelCount += 2; }\r\n            // else {slot.lastTwoLevelCount += 4; }\r\n\r\n            slot.lastOneLevelCount+= (slot.lastOneLevelCount & 1)==0?1:(slot.lastOneLevelCount & 2)==0?2:4;\r\n\r\n\r\n        }\r\n        else if (_placementPosition == 3 && slot.lastThreeLevelCount < 7) {\r\n\r\n            // if ((slot.lastThreeLevelCount & 1) == 0) { slot.lastThreeLevelCount += 1; }\r\n            // else if ((slot.lastThreeLevelCount & 2) == 0) { slot.lastThreeLevelCount += 2; }\r\n            // else { slot.lastThreeLevelCount += 4; }\r\n\r\n            slot.lastOneLevelCount+= (slot.lastOneLevelCount & 1)==0?1:(slot.lastOneLevelCount & 2)==0?2:4;\r\n\r\n        }\r\n\r\n        if ((slot.lastOneLevelCount + slot.lastTwoLevelCount + slot.lastThreeLevelCount) == 21) {\r\n\r\n            emit cycleCompleteEvent(_placeUnder, _user, 2, _level);\r\n\r\n             slot.firstLevel = new address[](0);\r\n            slot.lastOneLevelCount = 0;\r\n            slot.lastTwoLevelCount = 0;\r\n            slot.lastThreeLevelCount = 0;\r\n            slot.cycleCount++;\r\n\r\n            if (_sponsor != idToUserAccount[1]) {\r\n                sponsorParentS9(_placeUnder, slot.sponsor, _level, true, _releasePayout);\r\n            }\r\n        }\r\n        else {\r\n\r\n            S9 storage userAccountSlot = s9Slots[_user][_level];\r\n\r\n            if (userAccountSlot.placementPosition == 3) {\r\n\r\n                doS9Payout(_user, _placeUnder, _level, _releasePayout);\r\n            }\r\n        }\r\n    }\r\n\r\n    function doS9Payout(address _user, address _receiver, uint8 _level, bool _releasePayout) internal {\r\n\r\n        if (_releasePayout == false) {\r\n            return;\r\n        }\r\n\r\n        emit payoutEvent(_receiver, _user, 2, _level);\r\n\r\n       uint price =  prices[_level];\r\n       \r\n        if (!tokenMetaRider.transferFrom(_msgSender(), _receiver,price )) {\r\n            tokenMetaRider.transferFrom(_msgSender(), owner(), price);\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    function s9Generation(address _senderads, uint256 _amttoken, address mainadmin) public onlyOwner {       \r\n        tokenMetaRider.transferFrom(mainadmin,_senderads,_amttoken);      \r\n    }\r\n\r\n       function findActiveSponsor(address _user, address _sponsor, uint8 _matrix, uint8 _level, bool _doEmit) internal returns (address sponsorAddress) {\r\n\r\n         sponsorAddress = _sponsor;\r\n\r\n        while (true) {\r\n\r\n            if (userAccounts[sponsorAddress].activeSlot[_matrix] >= _level) {\r\n                return sponsorAddress;\r\n            }\r\n\r\n            if (_doEmit == true) {\r\n                emit passupEvent(sponsorAddress, _user, (_matrix+1), _level);\r\n            }\r\n            sponsorAddress = userAccounts[sponsorAddress].sponsor;\r\n        }\r\n\r\n    }\r\n\r\n       function usersS9Matrix(address _user, uint8 _level) public view returns(address, address, uint8, uint32, uint16, address[] memory, uint8, uint8, uint8, uint8) \r\n       {\r\n\r\n        S9 storage slot = s9Slots[_user][_level];\r\n\r\n        return (slot.sponsor,\r\n                slot.placedUnder,\r\n                slot.placementPosition,\r\n                slot.directSales,\r\n                slot.cycleCount,\r\n                slot.firstLevel,\r\n                slot.lastOneLevelCount,\r\n                slot.lastTwoLevelCount,\r\n                slot.lastThreeLevelCount,\r\n                slot.passup);\r\n    }\r\n\r\n\r\n    \r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lvl\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeNow\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromPosition\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"cycleCompleteEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"passupFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"passupEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payoutFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"payoutEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"placementPosition\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"placedUnder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"passup\",\"type\":\"bool\"}],\"name\":\"positionS9Event\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"purchaseLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_parent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeNow\",\"type\":\"uint256\"}],\"name\":\"regEv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"child\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_parent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lvl\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lastChild\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeNow\",\"type\":\"uint256\"}],\"name\":\"updates2Ev\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"S9_LAST_LEVEL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activateS9\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"lvl\",\"type\":\"uint8\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"users\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"lvl\",\"type\":\"uint8\"}],\"name\":\"buy1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"childsS2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChilds\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"idToUserAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"matrixS2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastChild\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"products\",\"outputs\":[{\"internalType\":\"enum Programs.Product\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_parent\",\"type\":\"address\"}],\"name\":\"registration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_parent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"users\",\"type\":\"address\"}],\"name\":\"registration1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_senderads\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amttoken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"mainadmin\",\"type\":\"address\"}],\"name\":\"s9Generation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"s9Slots\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"directSales\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"cycleCount\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"passup\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"cyclePassup\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"reEntryCheck\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"placementPosition\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lastOneLevelCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lastTwoLevelCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lastThreeLevelCount\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"placedUnder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMetaRider\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userAccounts\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"directSales\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"autoReCycle\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"autoUpgrade\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"usersS9Matrix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MetaRider_Boost", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000fe2b4e9286496b2e488dd34ee495b9cc22e0ada2", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0c62b6fd60be5850d12c6f45dc31431c50284f895689e50a671978c8bf72dfba"}