{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface INFTContract {\r\n  function mint(address to) external returns (uint256);\r\n  function burn(uint256 tokenId) external;\r\n  function ownerOf(uint256 tokenId) external view returns (address owner);\r\n  function numberOfCardsContained(uint256 tokenId) external view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 tokenId) external;\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n  function _msgSender() internal view virtual returns (address) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view virtual returns (bytes calldata) {\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor() {\r\n    _transferOwnership(_msgSender());\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view virtual returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public virtual onlyOwner {\r\n    _transferOwnership(address(0));\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Internal function without access restriction.\r\n   */\r\n  function _transferOwnership(address newOwner) internal virtual {\r\n    address oldOwner = _owner;\r\n    _owner = newOwner;\r\n    emit OwnershipTransferred(oldOwner, newOwner);\r\n  }\r\n}\r\n\r\ncontract NafstarsReveal is Context, Ownable {\r\n  INFTContract public Packs;\r\n  INFTContract public Cards;\r\n\r\n  bool public paused = false;\r\n  bool public autoBurn = false;\r\n  address public burnWallet;\r\n\r\n  event PackReveal(uint256 indexed packId, uint256[] cardsMinted);\r\n\r\n  constructor(address packsAddress, address cardsAddress, address burnWalletAddress) {\r\n    Packs = INFTContract(packsAddress);\r\n    Cards = INFTContract(cardsAddress);\r\n    burnWallet = burnWalletAddress;\r\n  }\r\n\r\n  function setPaused(bool isPaused) public virtual onlyOwner {\r\n    paused = isPaused;\r\n  }\r\n\r\n  function setAutoBurn(bool isAutoBurn) public virtual onlyOwner {\r\n    autoBurn = isAutoBurn;\r\n  }\r\n\r\n  function setBurnWallet(address burnWalletAddress) public virtual onlyOwner {\r\n    burnWallet = burnWalletAddress;\r\n  }\r\n\r\n  function reveal(uint256 packId) public virtual returns (uint256[] memory) {\r\n    require(paused == false, \"Error: pack reveal is paused\");\r\n    require(Packs.ownerOf(packId) == _msgSender(), \"Error: you need to be the pack owner\");\r\n\r\n    uint256 cardsToMint = Packs.numberOfCardsContained(packId);\r\n    uint256[] memory cardsMinted = new uint256[](cardsToMint);\r\n\r\n    if (autoBurn) {\r\n      Packs.burn(packId);\r\n    } else {\r\n      Packs.transferFrom(_msgSender(), burnWallet, packId);\r\n    }\r\n\r\n    for (uint256 i = 0; i < cardsToMint; i++) {\r\n      cardsMinted[i] = Cards.mint(_msgSender());\r\n    }\r\n\r\n    emit PackReveal(packId, cardsMinted);\r\n\r\n    return cardsMinted;\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"packsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cardsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"burnWalletAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"packId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"cardsMinted\",\"type\":\"uint256[]\"}],\"name\":\"PackReveal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Cards\",\"outputs\":[{\"internalType\":\"contract INFTContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Packs\",\"outputs\":[{\"internalType\":\"contract INFTContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"packId\",\"type\":\"uint256\"}],\"name\":\"reveal\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isAutoBurn\",\"type\":\"bool\"}],\"name\":\"setAutoBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"burnWalletAddress\",\"type\":\"address\"}],\"name\":\"setBurnWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NafstarsReveal", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000075fd5e507e807d98e248dc32e470c91db98a623c0000000000000000000000005388b00677a0c0624dd0dc8bcbbf5b388599c9c600000000000000000000000034a7a01c379c50c4cde638b09f80082fcba737e6", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://68288752d276619a5a40d99e00bb3ffff3204e65f3e5d818ae5c1738bd37f95a"}