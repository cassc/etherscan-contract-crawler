{"SourceCode": "// Sources flattened with hardhat v2.6.4 https://hardhat.org\r\n\r\n// File contracts/token/ERC1155/IERC1155InventoryBurnable.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.7.6 <0.8.0;\r\n\r\n/**\r\n * @title ERC1155 Inventory. optional extension: Burnable.\r\n * @dev See https://eips.ethereum.org/EIPS/eip-1155\r\n * @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1.\r\n */\r\ninterface IERC1155InventoryBurnable {\r\n    /**\r\n     * Burns some token.\r\n     * @dev Reverts if the sender is not approved.\r\n     * @dev Reverts if `id` does not represent a token.\r\n     * @dev Reverts if `id` represents a Fungible Token and `value` is 0.\r\n     * @dev Reverts if `id` represents a Fungible Token and `value` is higher than `from`'s balance.\r\n     * @dev Reverts if `id` represents a Non-Fungible Token and `value` is not 1.\r\n     * @dev Reverts if `id` represents a Non-Fungible Token which is not owned by `from`.\r\n     * @dev Emits an {IERC1155-TransferSingle} event.\r\n     * @param from Address of the current token owner.\r\n     * @param id Identifier of the token to burn.\r\n     * @param value Amount of token to burn.\r\n     */\r\n    function burnFrom(\r\n        address from,\r\n        uint256 id,\r\n        uint256 value\r\n    ) external;\r\n\r\n    /**\r\n     * Burns multiple tokens.\r\n     * @dev Reverts if `ids` and `values` have different lengths.\r\n     * @dev Reverts if the sender is not approved.\r\n     * @dev Reverts if one of `ids` does not represent a token.\r\n     * @dev Reverts if one of `ids` represents a Fungible Token and `value` is 0.\r\n     * @dev Reverts if one of `ids` represents a Fungible Token and `value` is higher than `from`'s balance.\r\n     * @dev Reverts if one of `ids` represents a Non-Fungible Token and `value` is not 1.\r\n     * @dev Reverts if one of `ids` represents a Non-Fungible Token which is not owned by `from`.\r\n     * @dev Emits an {IERC1155-TransferBatch} event.\r\n     * @param from Address of the current tokens owner.\r\n     * @param ids Identifiers of the tokens to burn.\r\n     * @param values Amounts of tokens to burn.\r\n     */\r\n    function batchBurnFrom(\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/utils/types/AddressIsContract.sol\r\n\r\n\r\n\r\n// Partially derived from OpenZeppelin:\r\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/406c83649bd6169fc1b578e08506d78f0873b276/contracts/utils/Address.sol\r\n\r\npragma solidity >=0.7.6 <0.8.0;\r\n\r\n/**\r\n * @dev Upgrades the address type to check if it is a contract.\r\n */\r\nlibrary AddressIsContract {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/token/ERC1155/ERC1155InventoryIdentifiersLib.sol\r\n\r\n\r\n\r\npragma solidity >=0.7.6 <0.8.0;\r\n\r\n/**\r\n * @title ERC1155InventoryIdentifiersLib, a library to introspect inventory identifiers.\r\n * @dev With N=32, representing the Non-Fungible Collection mask length, identifiers are represented as follow:\r\n * (a) a Fungible Token:\r\n *     - most significant bit == 0\r\n * (b) a Non-Fungible Collection:\r\n *     - most significant bit == 1\r\n *     - (256-N) least significant bits == 0\r\n * (c) a Non-Fungible Token:\r\n *     - most significant bit == 1\r\n *     - (256-N) least significant bits != 0\r\n */\r\nlibrary ERC1155InventoryIdentifiersLib {\r\n    // Non-Fungible bit. If an id has this bit set, it is a Non-Fungible (either Collection or Token)\r\n    uint256 internal constant _NF_BIT = 1 << 255;\r\n\r\n    // Mask for Non-Fungible Collection (including the nf bit)\r\n    uint256 internal constant _NF_COLLECTION_MASK = uint256(type(uint32).max) << 224;\r\n    uint256 internal constant _NF_TOKEN_MASK = ~_NF_COLLECTION_MASK;\r\n\r\n    function isFungibleToken(uint256 id) internal pure returns (bool) {\r\n        return id & _NF_BIT == 0;\r\n    }\r\n\r\n    function isNonFungibleToken(uint256 id) internal pure returns (bool) {\r\n        return id & _NF_BIT != 0 && id & _NF_TOKEN_MASK != 0;\r\n    }\r\n\r\n    function getNonFungibleCollection(uint256 nftId) internal pure returns (uint256) {\r\n        return nftId & _NF_COLLECTION_MASK;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/metatx/ManagedIdentity.sol\r\n\r\n\r\n\r\npragma solidity >=0.7.6 <0.8.0;\r\n\r\n/*\r\n * Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner.\r\n */\r\nabstract contract ManagedIdentity {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n\r\npragma solidity >=0.7.6 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File contracts/token/ERC1155/IERC1155.sol\r\n\r\n\r\n\r\npragma solidity >=0.7.6 <0.8.0;\r\n\r\n/**\r\n * @title ERC1155 Multi Token Standard, basic interface.\r\n * @dev See https://eips.ethereum.org/EIPS/eip-1155\r\n * @dev Note: The ERC-165 identifier for this interface is 0xd9b67a26.\r\n */\r\ninterface IERC1155 {\r\n    event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _value);\r\n\r\n    event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _values);\r\n\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    event URI(string _value, uint256 indexed _id);\r\n\r\n    /**\r\n     * Safely transfers some token.\r\n     * @dev Reverts if `to` is the zero address.\r\n     * @dev Reverts if the sender is not approved.\r\n     * @dev Reverts if `from` has an insufficient balance.\r\n     * @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155received} fails or is refused.\r\n     * @dev Emits a `TransferSingle` event.\r\n     * @param from Current token owner.\r\n     * @param to Address of the new token owner.\r\n     * @param id Identifier of the token to transfer.\r\n     * @param value Amount of token to transfer.\r\n     * @param data Optional data to send along to a receiver contract.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * Safely transfers a batch of tokens.\r\n     * @dev Reverts if `to` is the zero address.\r\n     * @dev Reverts if `ids` and `values` have different lengths.\r\n     * @dev Reverts if the sender is not approved.\r\n     * @dev Reverts if `from` has an insufficient balance for any of `ids`.\r\n     * @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails or is refused.\r\n     * @dev Emits a `TransferBatch` event.\r\n     * @param from Current token owner.\r\n     * @param to Address of the new token owner.\r\n     * @param ids Identifiers of the tokens to transfer.\r\n     * @param values Amounts of tokens to transfer.\r\n     * @param data Optional data to send along to a receiver contract.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * Retrieves the balance of `id` owned by account `owner`.\r\n     * @param owner The account to retrieve the balance of.\r\n     * @param id The identifier to retrieve the balance of.\r\n     * @return The balance of `id` owned by account `owner`.\r\n     */\r\n    function balanceOf(address owner, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * Retrieves the balances of `ids` owned by accounts `owners`. For each pair:\r\n     * @dev Reverts if `owners` and `ids` have different lengths.\r\n     * @param owners The addresses of the token holders\r\n     * @param ids The identifiers to retrieve the balance of.\r\n     * @return The balances of `ids` owned by accounts `owners`.\r\n     */\r\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory);\r\n\r\n    /**\r\n     * Enables or disables an operator's approval.\r\n     * @dev Emits an `ApprovalForAll` event.\r\n     * @param operator Address of the operator.\r\n     * @param approved True to approve the operator, false to revoke an approval.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * Retrieves the approval status of an operator for a given owner.\r\n     * @param owner Address of the authorisation giver.\r\n     * @param operator Address of the operator.\r\n     * @return True if the operator is approved, false if not.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n\r\n// File contracts/token/ERC1155/IERC1155InventoryFunctions.sol\r\n\r\n\r\n\r\npragma solidity >=0.7.6 <0.8.0;\r\n\r\n/**\r\n * @title ERC1155 Multi Token Standard, optional extension: Inventory.\r\n * Interface for Fungible/Non-Fungible Tokens management on an ERC1155 contract.\r\n * @dev See https://eips.ethereum.org/EIPS/eip-xxxx\r\n * @dev Note: The ERC-165 identifier for this interface is 0x09ce5c46.\r\n */\r\ninterface IERC1155InventoryFunctions {\r\n    function ownerOf(uint256 nftId) external view returns (address);\r\n\r\n    function isFungible(uint256 id) external view returns (bool);\r\n\r\n    function collectionOf(uint256 nftId) external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/token/ERC1155/IERC1155Inventory.sol\r\n\r\n\r\n\r\npragma solidity >=0.7.6 <0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC1155 Multi Token Standard, optional extension: Inventory.\r\n * Interface for Fungible/Non-Fungible Tokens management on an ERC1155 contract.\r\n *\r\n * This interface rationalizes the co-existence of Fungible and Non-Fungible Tokens\r\n * within the same contract. As several kinds of Fungible Tokens can be managed under\r\n * the Multi-Token standard, we consider that Non-Fungible Tokens can be classified\r\n * under their own specific type. We introduce the concept of Non-Fungible Collection\r\n * and consider the usage of 3 types of identifiers:\r\n * (a) Fungible Token identifiers, each representing a set of Fungible Tokens,\r\n * (b) Non-Fungible Collection identifiers, each representing a set of Non-Fungible Tokens (this is not a token),\r\n * (c) Non-Fungible Token identifiers.\r\n *\r\n * Identifiers nature\r\n * |       Type                | isFungible  | isCollection | isToken |\r\n * |  Fungible Token           |   true      |     true     |  true   |\r\n * |  Non-Fungible Collection  |   false     |     true     |  false  |\r\n * |  Non-Fungible Token       |   false     |     false    |  true   |\r\n *\r\n * Identifiers compatibilities\r\n * |       Type                |  transfer  |   balance    |   supply    |  owner  |\r\n * |  Fungible Token           |    OK      |     OK       |     OK      |   NOK   |\r\n * |  Non-Fungible Collection  |    NOK     |     OK       |     OK      |   NOK   |\r\n * |  Non-Fungible Token       |    OK      |   0 or 1     |   0 or 1    |   OK    |\r\n *\r\n * @dev See https://eips.ethereum.org/EIPS/eip-xxxx\r\n * @dev Note: The ERC-165 identifier for this interface is 0x09ce5c46.\r\n */\r\ninterface IERC1155Inventory is IERC1155, IERC1155InventoryFunctions {\r\n    //================================================== ERC1155Inventory ===================================================//\r\n    /**\r\n     * Optional event emitted when a collection (Fungible Token or Non-Fungible Collection) is created.\r\n     *  This event can be used by a client application to determine which identifiers are meaningful\r\n     *  to track through the functions `balanceOf`, `balanceOfBatch` and `totalSupply`.\r\n     * @dev This event MUST NOT be emitted twice for the same `collectionId`.\r\n     */\r\n    event CollectionCreated(uint256 indexed collectionId, bool indexed fungible);\r\n\r\n    /**\r\n     * Retrieves the owner of a Non-Fungible Token (ERC721-compatible).\r\n     * @dev Reverts if `nftId` is owned by the zero address.\r\n     * @param nftId Identifier of the token to query.\r\n     * @return Address of the current owner of the token.\r\n     */\r\n    function ownerOf(uint256 nftId) external view override returns (address);\r\n\r\n    /**\r\n     * Introspects whether or not `id` represents a Fungible Token.\r\n     *  This function MUST return true even for a Fungible Token which is not-yet created.\r\n     * @param id The identifier to query.\r\n     * @return bool True if `id` represents aFungible Token, false otherwise.\r\n     */\r\n    function isFungible(uint256 id) external view override returns (bool);\r\n\r\n    /**\r\n     * Introspects the Non-Fungible Collection to which `nftId` belongs.\r\n     * @dev This function MUST return a value representing a Non-Fungible Collection.\r\n     * @dev This function MUST return a value for a non-existing token, and SHOULD NOT be used to check the existence of a Non-Fungible Token.\r\n     * @dev Reverts if `nftId` does not represent a Non-Fungible Token.\r\n     * @param nftId The token identifier to query the collection of.\r\n     * @return The Non-Fungible Collection identifier to which `nftId` belongs.\r\n     */\r\n    function collectionOf(uint256 nftId) external view override returns (uint256);\r\n\r\n    //======================================================= ERC1155 =======================================================//\r\n\r\n    /**\r\n     * Retrieves the balance of `id` owned by account `owner`.\r\n     * @param owner The account to retrieve the balance of.\r\n     * @param id The identifier to retrieve the balance of.\r\n     * @return\r\n     *  If `id` represents a collection (Fungible Token or Non-Fungible Collection), the balance for this collection.\r\n     *  If `id` represents a Non-Fungible Token, 1 if the token is owned by `owner`, else 0.\r\n     */\r\n    function balanceOf(address owner, uint256 id) external view override returns (uint256);\r\n\r\n    /**\r\n     * Retrieves the balances of `ids` owned by accounts `owners`.\r\n     * @dev Reverts if `owners` and `ids` have different lengths.\r\n     * @param owners The accounts to retrieve the balances of.\r\n     * @param ids The identifiers to retrieve the balances of.\r\n     * @return An array of elements such as for each pair `id`/`owner`:\r\n     *  If `id` represents a collection (Fungible Token or Non-Fungible Collection), the balance for this collection.\r\n     *  If `id` represents a Non-Fungible Token, 1 if the token is owned by `owner`, else 0.\r\n     */\r\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view override returns (uint256[] memory);\r\n\r\n    /**\r\n     * Safely transfers some token.\r\n     * @dev Reverts if `to` is the zero address.\r\n     * @dev Reverts if the sender is not approved.\r\n     * @dev Reverts if `id` does not represent a token.\r\n     * @dev Reverts if `id` represents a Non-Fungible Token and `value` is not 1.\r\n     * @dev Reverts if `id` represents a Non-Fungible Token and is not owned by `from`.\r\n     * @dev Reverts if `id` represents a Fungible Token and `value` is 0.\r\n     * @dev Reverts if `id` represents a Fungible Token and `from` has an insufficient balance.\r\n     * @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155received} fails or is refused.\r\n     * @dev Emits an {IERC1155-TransferSingle} event.\r\n     * @param from Current token owner.\r\n     * @param to Address of the new token owner.\r\n     * @param id Identifier of the token to transfer.\r\n     * @param value Amount of token to transfer.\r\n     * @param data Optional data to pass to the receiver contract.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external override;\r\n\r\n    /**\r\n     * @notice this documentation overrides its {IERC1155-safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)}.\r\n     * Safely transfers a batch of tokens.\r\n     * @dev Reverts if `to` is the zero address.\r\n     * @dev Reverts if the sender is not approved.\r\n     * @dev Reverts if one of `ids` does not represent a token.\r\n     * @dev Reverts if one of `ids` represents a Non-Fungible Token and `value` is not 1.\r\n     * @dev Reverts if one of `ids` represents a Non-Fungible Token and is not owned by `from`.\r\n     * @dev Reverts if one of `ids` represents a Fungible Token and `value` is 0.\r\n     * @dev Reverts if one of `ids` represents a Fungible Token and `from` has an insufficient balance.\r\n     * @dev Reverts if one of `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails or is refused.\r\n     * @dev Emits an {IERC1155-TransferBatch} event.\r\n     * @param from Current tokens owner.\r\n     * @param to Address of the new tokens owner.\r\n     * @param ids Identifiers of the tokens to transfer.\r\n     * @param values Amounts of tokens to transfer.\r\n     * @param data Optional data to pass to the receiver contract.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external override;\r\n}\r\n\r\n\r\n// File contracts/token/ERC1155/IERC1155MetadataURI.sol\r\n\r\n\r\n\r\npragma solidity >=0.7.6 <0.8.0;\r\n\r\n/**\r\n * @title ERC1155 Multi Token Standard, optional extension: Metadata URI.\r\n * @dev See https://eips.ethereum.org/EIPS/eip-1155\r\n * @dev Note: The ERC-165 identifier for this interface is 0x0e89341c.\r\n */\r\ninterface IERC1155MetadataURI {\r\n    /**\r\n     * @notice A distinct Uniform Resource Identifier (URI) for a given token.\r\n     * @dev URIs are defined in RFC 3986.\r\n     * @dev The URI MUST point to a JSON file that conforms to the \"ERC1155 Metadata URI JSON Schema\".\r\n     * @dev The uri function SHOULD be used to retrieve values if no event was emitted.\r\n     * @dev The uri function MUST return the same value as the latest event for an _id if it was emitted.\r\n     * @dev The uri function MUST NOT be used to check for the existence of a token as it is possible for\r\n     *  an implementation to return a valid string even if the token does not exist.\r\n     * @return URI string\r\n     */\r\n    function uri(uint256 id) external view returns (string memory);\r\n}\r\n\r\n\r\n// File contracts/token/ERC1155/IERC1155InventoryTotalSupply.sol\r\n\r\n\r\n\r\npragma solidity >=0.7.6 <0.8.0;\r\n\r\n/**\r\n * @title ERC1155 Inventory, optional extension: Total Supply.\r\n * @dev See https://eips.ethereum.org/EIPS/eip-xxxx\r\n * @dev Note: The ERC-165 identifier for this interface is 0xbd85b039.\r\n */\r\ninterface IERC1155InventoryTotalSupply {\r\n    /**\r\n     * Retrieves the total supply of `id`.\r\n     * @param id The identifier for which to retrieve the supply of.\r\n     * @return\r\n     *  If `id` represents a collection (Fungible Token or Non-Fungible Collection), the total supply for this collection.\r\n     *  If `id` represents a Non-Fungible Token, 1 if the token exists, else 0.\r\n     */\r\n    function totalSupply(uint256 id) external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/token/ERC1155/IERC1155TokenReceiver.sol\r\n\r\n\r\n\r\npragma solidity >=0.7.6 <0.8.0;\r\n\r\n/**\r\n * @title ERC1155 Multi Token Standard, Tokens Receiver.\r\n * Interface for any contract that wants to support transfers from ERC1155 asset contracts.\r\n * @dev See https://eips.ethereum.org/EIPS/eip-1155\r\n * @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\r\n */\r\ninterface IERC1155TokenReceiver {\r\n    /**\r\n     * @notice Handle the receipt of a single ERC1155 token type.\r\n     * An ERC1155 contract MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\r\n     * This function MUST return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n     *  (i.e. 0xf23a6e61) to accept the transfer.\r\n     * Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\r\n     * @param operator  The address which initiated the transfer (i.e. msg.sender)\r\n     * @param from      The address which previously owned the token\r\n     * @param id        The ID of the token being transferred\r\n     * @param value     The amount of tokens being transferred\r\n     * @param data      Additional data with no specified format\r\n     * @return bytes4   `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n     */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n\r\n    /**\r\n     * @notice Handle the receipt of multiple ERC1155 token types.\r\n     * An ERC1155 contract MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\r\n     * This function MUST return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n     *  (i.e. 0xbc197c81) if to accept the transfer(s).\r\n     * Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\r\n     * @param operator  The address which initiated the batch transfer (i.e. msg.sender)\r\n     * @param from      The address which previously owned the token\r\n     * @param ids       An array containing ids of each token being transferred (order and length must match _values array)\r\n     * @param values    An array containing amounts of each token being transferred (order and length must match _ids array)\r\n     * @param data      Additional data with no specified format\r\n     * @return          `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n     */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n\r\n// File contracts/token/ERC1155/ERC1155InventoryBase.sol\r\n\r\n\r\n\r\npragma solidity >=0.7.6 <0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC1155 Inventory Base.\r\n * @dev The functions `safeTransferFrom(address,address,uint256,uint256,bytes)`\r\n *  and `safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)` need to be implemented by a child contract.\r\n * @dev The function `uri(uint256)` needs to be implemented by a child contract, for example with the help of `BaseMetadataURI`.\r\n */\r\nabstract contract ERC1155InventoryBase is ManagedIdentity, IERC165, IERC1155Inventory, IERC1155MetadataURI, IERC1155InventoryTotalSupply {\r\n    using ERC1155InventoryIdentifiersLib for uint256;\r\n\r\n    // bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))\r\n    bytes4 internal constant _ERC1155_RECEIVED = 0xf23a6e61;\r\n\r\n    // bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))\r\n    bytes4 internal constant _ERC1155_BATCH_RECEIVED = 0xbc197c81;\r\n\r\n    // Burnt Non-Fungible Token owner's magic value\r\n    uint256 internal constant _BURNT_NFT_OWNER = 0xdead000000000000000000000000000000000000000000000000000000000000;\r\n\r\n    /* owner => operator => approved */\r\n    mapping(address => mapping(address => bool)) internal _operators;\r\n\r\n    /* collection ID => owner => balance */\r\n    mapping(uint256 => mapping(address => uint256)) internal _balances;\r\n\r\n    /* collection ID => supply */\r\n    mapping(uint256 => uint256) internal _supplies;\r\n\r\n    /* NFT ID => owner */\r\n    mapping(uint256 => uint256) internal _owners;\r\n\r\n    /* collection ID => creator */\r\n    mapping(uint256 => address) internal _creators;\r\n\r\n    //======================================================= ERC165 ========================================================//\r\n\r\n    /// @inheritdoc IERC165\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return\r\n            interfaceId == type(IERC165).interfaceId ||\r\n            interfaceId == type(IERC1155).interfaceId ||\r\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\r\n            interfaceId == type(IERC1155InventoryFunctions).interfaceId ||\r\n            interfaceId == type(IERC1155InventoryTotalSupply).interfaceId;\r\n    }\r\n\r\n    //======================================================= ERC1155 =======================================================//\r\n\r\n    /// @inheritdoc IERC1155Inventory\r\n    function balanceOf(address owner, uint256 id) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"Inventory: zero address\");\r\n\r\n        if (id.isNonFungibleToken()) {\r\n            return address(uint160(_owners[id])) == owner ? 1 : 0;\r\n        }\r\n\r\n        return _balances[id][owner];\r\n    }\r\n\r\n    /// @inheritdoc IERC1155Inventory\r\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view virtual override returns (uint256[] memory) {\r\n        require(owners.length == ids.length, \"Inventory: inconsistent arrays\");\r\n\r\n        uint256[] memory balances = new uint256[](owners.length);\r\n\r\n        for (uint256 i = 0; i != owners.length; ++i) {\r\n            balances[i] = balanceOf(owners[i], ids[i]);\r\n        }\r\n\r\n        return balances;\r\n    }\r\n\r\n    /// @inheritdoc IERC1155\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        address sender = _msgSender();\r\n        require(operator != sender, \"Inventory: self-approval\");\r\n        _operators[sender][operator] = approved;\r\n        emit ApprovalForAll(sender, operator, approved);\r\n    }\r\n\r\n    /// @inheritdoc IERC1155\r\n    function isApprovedForAll(address tokenOwner, address operator) public view virtual override returns (bool) {\r\n        return _operators[tokenOwner][operator];\r\n    }\r\n\r\n    //================================================== ERC1155Inventory ===================================================//\r\n\r\n    /// @inheritdoc IERC1155Inventory\r\n    function isFungible(uint256 id) external pure virtual override returns (bool) {\r\n        return id.isFungibleToken();\r\n    }\r\n\r\n    /// @inheritdoc IERC1155Inventory\r\n    function collectionOf(uint256 nftId) external pure virtual override returns (uint256) {\r\n        require(nftId.isNonFungibleToken(), \"Inventory: not an NFT\");\r\n        return nftId.getNonFungibleCollection();\r\n    }\r\n\r\n    /// @inheritdoc IERC1155Inventory\r\n    function ownerOf(uint256 nftId) public view virtual override returns (address) {\r\n        address owner = address(uint160(_owners[nftId]));\r\n        require(owner != address(0), \"Inventory: non-existing NFT\");\r\n        return owner;\r\n    }\r\n\r\n    //============================================= ERC1155InventoryTotalSupply =============================================//\r\n\r\n    /// @inheritdoc IERC1155InventoryTotalSupply\r\n    function totalSupply(uint256 id) external view virtual override returns (uint256) {\r\n        if (id.isNonFungibleToken()) {\r\n            return address(uint160(_owners[id])) == address(0) ? 0 : 1;\r\n        } else {\r\n            return _supplies[id];\r\n        }\r\n    }\r\n\r\n    //============================================ High-level Internal Functions ============================================//\r\n\r\n    /**\r\n     * Creates a collection (optional).\r\n     * @dev Reverts if `collectionId` does not represent a collection.\r\n     * @dev Reverts if `collectionId` has already been created.\r\n     * @dev Emits a {IERC1155Inventory-CollectionCreated} event.\r\n     * @param collectionId Identifier of the collection.\r\n     */\r\n    function _createCollection(uint256 collectionId) internal virtual {\r\n        require(!collectionId.isNonFungibleToken(), \"Inventory: not a collection\");\r\n        require(_creators[collectionId] == address(0), \"Inventory: existing collection\");\r\n        _creators[collectionId] = _msgSender();\r\n        emit CollectionCreated(collectionId, collectionId.isFungibleToken());\r\n    }\r\n\r\n    function _creator(uint256 collectionId) internal view virtual returns (address) {\r\n        require(!collectionId.isNonFungibleToken(), \"Inventory: not a collection\");\r\n        return _creators[collectionId];\r\n    }\r\n\r\n    //============================================== Helper Internal Functions ==============================================//\r\n\r\n    /**\r\n     * Returns whether `sender` is authorised to make a transfer on behalf of `from`.\r\n     * @param from The address to check operatibility upon.\r\n     * @param sender The sender address.\r\n     * @return True if sender is `from` or an operator for `from`, false otherwise.\r\n     */\r\n    function _isOperatable(address from, address sender) internal view virtual returns (bool) {\r\n        return (from == sender) || _operators[from][sender];\r\n    }\r\n\r\n    /**\r\n     * Calls {IERC1155TokenReceiver-onERC1155Received} on a target contract.\r\n     * @dev Reverts if `to` is not a contract.\r\n     * @dev Reverts if the call to the target fails or is refused.\r\n     * @param from Previous token owner.\r\n     * @param to New token owner.\r\n     * @param id Identifier of the token transferred.\r\n     * @param value Amount of token transferred.\r\n     * @param data Optional data to send along with the receiver contract call.\r\n     */\r\n    function _callOnERC1155Received(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes memory data\r\n    ) internal {\r\n        require(IERC1155TokenReceiver(to).onERC1155Received(_msgSender(), from, id, value, data) == _ERC1155_RECEIVED, \"Inventory: transfer refused\");\r\n    }\r\n\r\n    /**\r\n     * Calls {IERC1155TokenReceiver-onERC1155batchReceived} on a target contract.\r\n     * @dev Reverts if `to` is not a contract.\r\n     * @dev Reverts if the call to the target fails or is refused.\r\n     * @param from Previous tokens owner.\r\n     * @param to New tokens owner.\r\n     * @param ids Identifiers of the tokens to transfer.\r\n     * @param values Amounts of tokens to transfer.\r\n     * @param data Optional data to send along with the receiver contract call.\r\n     */\r\n    function _callOnERC1155BatchReceived(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory values,\r\n        bytes memory data\r\n    ) internal {\r\n        require(\r\n            IERC1155TokenReceiver(to).onERC1155BatchReceived(_msgSender(), from, ids, values, data) == _ERC1155_BATCH_RECEIVED,\r\n            \"Inventory: transfer refused\"\r\n        );\r\n    }\r\n}\r\n\r\n\r\n// File contracts/token/ERC1155/ERC1155Inventory.sol\r\n\r\n\r\n\r\npragma solidity >=0.7.6 <0.8.0;\r\n\r\n// solhint-disable-next-line max-line-length\r\n\r\n/**\r\n * @title ERC1155Inventory, a contract which manages up to multiple Collections of Fungible and Non-Fungible Tokens.\r\n * @dev The function `uri(uint256)` needs to be implemented by a child contract, for example with the help of `BaseMetadataURI`.\r\n */\r\nabstract contract ERC1155Inventory is ERC1155InventoryBase {\r\n    using AddressIsContract for address;\r\n    using ERC1155InventoryIdentifiersLib for uint256;\r\n\r\n    //======================================================= ERC1155 =======================================================//\r\n\r\n    /// @inheritdoc IERC1155Inventory\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        address sender = _msgSender();\r\n        require(to != address(0), \"Inventory: transfer to zero\");\r\n        require(_isOperatable(from, sender), \"Inventory: non-approved sender\");\r\n\r\n        if (id.isFungibleToken()) {\r\n            _transferFungible(from, to, id, value);\r\n        } else if (id.isNonFungibleToken()) {\r\n            _transferNFT(from, to, id, value, false);\r\n        } else {\r\n            revert(\"Inventory: not a token id\");\r\n        }\r\n\r\n        emit TransferSingle(sender, from, to, id, value);\r\n        if (to.isContract()) {\r\n            _callOnERC1155Received(from, to, id, value, data);\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IERC1155Inventory\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory values,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        // internal function to avoid stack too deep error\r\n        _safeBatchTransferFrom(from, to, ids, values, data);\r\n    }\r\n\r\n    //============================================ High-level Internal Functions ============================================//\r\n\r\n    function _safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory values,\r\n        bytes memory data\r\n    ) internal {\r\n        require(to != address(0), \"Inventory: transfer to zero\");\r\n        uint256 length = ids.length;\r\n        require(length == values.length, \"Inventory: inconsistent arrays\");\r\n        address sender = _msgSender();\r\n        require(_isOperatable(from, sender), \"Inventory: non-approved sender\");\r\n\r\n        uint256 nfCollectionId;\r\n        uint256 nfCollectionCount;\r\n        for (uint256 i; i != length; ++i) {\r\n            uint256 id = ids[i];\r\n            uint256 value = values[i];\r\n            if (id.isFungibleToken()) {\r\n                _transferFungible(from, to, id, value);\r\n            } else if (id.isNonFungibleToken()) {\r\n                _transferNFT(from, to, id, value, true);\r\n                uint256 nextCollectionId = id.getNonFungibleCollection();\r\n                if (nfCollectionId == 0) {\r\n                    nfCollectionId = nextCollectionId;\r\n                    nfCollectionCount = 1;\r\n                } else {\r\n                    if (nextCollectionId != nfCollectionId) {\r\n                        _transferNFTUpdateCollection(from, to, nfCollectionId, nfCollectionCount);\r\n                        nfCollectionId = nextCollectionId;\r\n                        nfCollectionCount = 1;\r\n                    } else {\r\n                        ++nfCollectionCount;\r\n                    }\r\n                }\r\n            } else {\r\n                revert(\"Inventory: not a token id\");\r\n            }\r\n        }\r\n\r\n        if (nfCollectionId != 0) {\r\n            _transferNFTUpdateCollection(from, to, nfCollectionId, nfCollectionCount);\r\n        }\r\n\r\n        emit TransferBatch(sender, from, to, ids, values);\r\n        if (to.isContract()) {\r\n            _callOnERC1155BatchReceived(from, to, ids, values, data);\r\n        }\r\n    }\r\n\r\n    function _safeMint(\r\n        address to,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes memory data\r\n    ) internal {\r\n        require(to != address(0), \"Inventory: mint to zero\");\r\n\r\n        if (id.isFungibleToken()) {\r\n            _mintFungible(to, id, value);\r\n        } else if (id.isNonFungibleToken()) {\r\n            _mintNFT(to, id, value, false);\r\n        } else {\r\n            revert(\"Inventory: not a token id\");\r\n        }\r\n\r\n        emit TransferSingle(_msgSender(), address(0), to, id, value);\r\n        if (to.isContract()) {\r\n            _callOnERC1155Received(address(0), to, id, value, data);\r\n        }\r\n    }\r\n\r\n    function _safeBatchMint(\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory values,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(to != address(0), \"Inventory: mint to zero\");\r\n        uint256 length = ids.length;\r\n        require(length == values.length, \"Inventory: inconsistent arrays\");\r\n\r\n        uint256 nfCollectionId;\r\n        uint256 nfCollectionCount;\r\n        for (uint256 i; i != length; ++i) {\r\n            uint256 id = ids[i];\r\n            uint256 value = values[i];\r\n            if (id.isFungibleToken()) {\r\n                _mintFungible(to, id, value);\r\n            } else if (id.isNonFungibleToken()) {\r\n                _mintNFT(to, id, value, true);\r\n                uint256 nextCollectionId = id.getNonFungibleCollection();\r\n                if (nfCollectionId == 0) {\r\n                    nfCollectionId = nextCollectionId;\r\n                    nfCollectionCount = 1;\r\n                } else {\r\n                    if (nextCollectionId != nfCollectionId) {\r\n                        _balances[nfCollectionId][to] += nfCollectionCount;\r\n                        _supplies[nfCollectionId] += nfCollectionCount;\r\n                        nfCollectionId = nextCollectionId;\r\n                        nfCollectionCount = 1;\r\n                    } else {\r\n                        ++nfCollectionCount;\r\n                    }\r\n                }\r\n            } else {\r\n                revert(\"Inventory: not a token id\");\r\n            }\r\n        }\r\n\r\n        if (nfCollectionId != 0) {\r\n            _balances[nfCollectionId][to] += nfCollectionCount;\r\n            _supplies[nfCollectionId] += nfCollectionCount;\r\n        }\r\n\r\n        emit TransferBatch(_msgSender(), address(0), to, ids, values);\r\n        if (to.isContract()) {\r\n            _callOnERC1155BatchReceived(address(0), to, ids, values, data);\r\n        }\r\n    }\r\n\r\n    //============================================== Helper Internal Functions ==============================================//\r\n\r\n    function _mintFungible(\r\n        address to,\r\n        uint256 id,\r\n        uint256 value\r\n    ) internal {\r\n        require(value != 0, \"Inventory: zero value\");\r\n        uint256 supply = _supplies[id];\r\n        uint256 newSupply = supply + value;\r\n        require(newSupply > supply, \"Inventory: supply overflow\");\r\n        _supplies[id] = newSupply;\r\n        // cannot overflow as any balance is bounded up by the supply which cannot overflow\r\n        _balances[id][to] += value;\r\n    }\r\n\r\n    function _mintNFT(\r\n        address to,\r\n        uint256 id,\r\n        uint256 value,\r\n        bool isBatch\r\n    ) internal {\r\n        require(value == 1, \"Inventory: wrong NFT value\");\r\n        require(_owners[id] == 0, \"Inventory: existing/burnt NFT\");\r\n\r\n        _owners[id] = uint256(uint160(to));\r\n\r\n        if (!isBatch) {\r\n            uint256 collectionId = id.getNonFungibleCollection();\r\n            // it is virtually impossible that a Non-Fungible Collection supply\r\n            // overflows due to the cost of minting individual tokens\r\n            ++_supplies[collectionId];\r\n            // cannot overflow as supply cannot overflow\r\n            ++_balances[collectionId][to];\r\n        }\r\n    }\r\n\r\n    function _transferFungible(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 value\r\n    ) internal {\r\n        require(value != 0, \"Inventory: zero value\");\r\n        uint256 balance = _balances[id][from];\r\n        require(balance >= value, \"Inventory: not enough balance\");\r\n        if (from != to) {\r\n            _balances[id][from] = balance - value;\r\n            // cannot overflow as supply cannot overflow\r\n            _balances[id][to] += value;\r\n        }\r\n    }\r\n\r\n    function _transferNFT(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 value,\r\n        bool isBatch\r\n    ) internal {\r\n        require(value == 1, \"Inventory: wrong NFT value\");\r\n        require(from == address(uint160(_owners[id])), \"Inventory: non-owned NFT\");\r\n        _owners[id] = uint256(uint160(to));\r\n        if (!isBatch) {\r\n            uint256 collectionId = id.getNonFungibleCollection();\r\n            // cannot underflow as balance is verified through ownership\r\n            _balances[collectionId][from] -= 1;\r\n            // cannot overflow as supply cannot overflow\r\n            _balances[collectionId][to] += 1;\r\n        }\r\n    }\r\n\r\n    function _transferNFTUpdateCollection(\r\n        address from,\r\n        address to,\r\n        uint256 collectionId,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        if (from != to) {\r\n            // cannot underflow as balance is verified through ownership\r\n            _balances[collectionId][from] -= amount;\r\n            // cannot overflow as supply cannot overflow\r\n            _balances[collectionId][to] += amount;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/token/ERC1155/ERC1155InventoryBurnable.sol\r\n\r\n\r\n\r\npragma solidity >=0.7.6 <0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC1155Inventory, burnable version.\r\n * @dev The function `uri(uint256)` needs to be implemented by a child contract, for example with the help of `BaseMetadataURI`.\r\n */\r\nabstract contract ERC1155InventoryBurnable is IERC1155InventoryBurnable, ERC1155Inventory {\r\n    using ERC1155InventoryIdentifiersLib for uint256;\r\n\r\n    //======================================================= ERC165 ========================================================//\r\n\r\n    /// @inheritdoc IERC165\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC1155InventoryBurnable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    //============================================== ERC1155InventoryBurnable ===============================================//\r\n\r\n    /// @inheritdoc IERC1155InventoryBurnable\r\n    function burnFrom(\r\n        address from,\r\n        uint256 id,\r\n        uint256 value\r\n    ) public virtual override {\r\n        address sender = _msgSender();\r\n        require(_isOperatable(from, sender), \"Inventory: non-approved sender\");\r\n\r\n        if (id.isFungibleToken()) {\r\n            _burnFungible(from, id, value);\r\n        } else if (id.isNonFungibleToken()) {\r\n            _burnNFT(from, id, value, false);\r\n        } else {\r\n            revert(\"Inventory: not a token id\");\r\n        }\r\n\r\n        emit TransferSingle(sender, from, address(0), id, value);\r\n    }\r\n\r\n    /// @inheritdoc IERC1155InventoryBurnable\r\n    function batchBurnFrom(\r\n        address from,\r\n        uint256[] memory ids,\r\n        uint256[] memory values\r\n    ) public virtual override {\r\n        uint256 length = ids.length;\r\n        require(length == values.length, \"Inventory: inconsistent arrays\");\r\n\r\n        address sender = _msgSender();\r\n        require(_isOperatable(from, sender), \"Inventory: non-approved sender\");\r\n\r\n        uint256 nfCollectionId;\r\n        uint256 nfCollectionCount;\r\n        for (uint256 i; i != length; ++i) {\r\n            uint256 id = ids[i];\r\n            uint256 value = values[i];\r\n            if (id.isFungibleToken()) {\r\n                _burnFungible(from, id, value);\r\n            } else if (id.isNonFungibleToken()) {\r\n                _burnNFT(from, id, value, true);\r\n                uint256 nextCollectionId = id.getNonFungibleCollection();\r\n                if (nfCollectionId == 0) {\r\n                    nfCollectionId = nextCollectionId;\r\n                    nfCollectionCount = 1;\r\n                } else {\r\n                    if (nextCollectionId != nfCollectionId) {\r\n                        _balances[nfCollectionId][from] -= nfCollectionCount;\r\n                        _supplies[nfCollectionId] -= nfCollectionCount;\r\n                        nfCollectionId = nextCollectionId;\r\n                        nfCollectionCount = 1;\r\n                    } else {\r\n                        ++nfCollectionCount;\r\n                    }\r\n                }\r\n            } else {\r\n                revert(\"Inventory: not a token id\");\r\n            }\r\n        }\r\n\r\n        if (nfCollectionId != 0) {\r\n            _balances[nfCollectionId][from] -= nfCollectionCount;\r\n            _supplies[nfCollectionId] -= nfCollectionCount;\r\n        }\r\n\r\n        emit TransferBatch(sender, from, address(0), ids, values);\r\n    }\r\n\r\n    //============================================== Helper Internal Functions ==============================================//\r\n\r\n    function _burnFungible(\r\n        address from,\r\n        uint256 id,\r\n        uint256 value\r\n    ) internal {\r\n        require(value != 0, \"Inventory: zero value\");\r\n        uint256 balance = _balances[id][from];\r\n        require(balance >= value, \"Inventory: not enough balance\");\r\n        _balances[id][from] = balance - value;\r\n        // Cannot underflow\r\n        _supplies[id] -= value;\r\n    }\r\n\r\n    function _burnNFT(\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bool isBatch\r\n    ) internal {\r\n        require(value == 1, \"Inventory: wrong NFT value\");\r\n        require(from == address(uint160(_owners[id])), \"Inventory: non-owned NFT\");\r\n        _owners[id] = _BURNT_NFT_OWNER;\r\n\r\n        if (!isBatch) {\r\n            uint256 collectionId = id.getNonFungibleCollection();\r\n            // cannot underflow as balance is confirmed through ownership\r\n            --_balances[collectionId][from];\r\n            // Cannot underflow\r\n            --_supplies[collectionId];\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/token/ERC1155/IERC1155InventoryMintable.sol\r\n\r\n\r\n\r\npragma solidity >=0.7.6 <0.8.0;\r\n\r\n/**\r\n * @title ERC1155 Inventory, optional extension: Mintable.\r\n * @dev See https://eips.ethereum.org/EIPS/eip-1155\r\n */\r\ninterface IERC1155InventoryMintable {\r\n    /**\r\n     * Safely mints some token.\r\n     * @dev Reverts if `to` is the zero address.\r\n     * @dev Reverts if `id` is not a token.\r\n     * @dev Reverts if `id` represents a Non-Fungible Token and `value` is not 1.\r\n     * @dev Reverts if `id` represents a Non-Fungible Token which has already been minted.\r\n     * @dev Reverts if `id` represents a Fungible Token and `value` is 0.\r\n     * @dev Reverts if `id` represents a Fungible Token and there is an overflow of supply.\r\n     * @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails or is refused.\r\n     * @dev Emits an {IERC1155-TransferSingle} event.\r\n     * @param to Address of the new token owner.\r\n     * @param id Identifier of the token to mint.\r\n     * @param value Amount of token to mint.\r\n     * @param data Optional data to send along to a receiver contract.\r\n     */\r\n    function safeMint(\r\n        address to,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * Safely mints a batch of tokens.\r\n     * @dev Reverts if `ids` and `values` have different lengths.\r\n     * @dev Reverts if `to` is the zero address.\r\n     * @dev Reverts if one of `ids` is not a token.\r\n     * @dev Reverts if one of `ids` represents a Non-Fungible Token and its paired value is not 1.\r\n     * @dev Reverts if one of `ids` represents a Non-Fungible Token which has already been minted.\r\n     * @dev Reverts if one of `ids` represents a Fungible Token and its paired value is 0.\r\n     * @dev Reverts if one of `ids` represents a Fungible Token and there is an overflow of supply.\r\n     * @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails or is refused.\r\n     * @dev Emits an {IERC1155-TransferBatch} event.\r\n     * @param to Address of the new tokens owner.\r\n     * @param ids Identifiers of the tokens to mint.\r\n     * @param values Amounts of tokens to mint.\r\n     * @param data Optional data to send along to a receiver contract.\r\n     */\r\n    function safeBatchMint(\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/token/ERC1155/IERC1155InventoryCreator.sol\r\n\r\n\r\n\r\npragma solidity >=0.7.6 <0.8.0;\r\n\r\n/**\r\n * @title ERC1155 Inventory, optional extension: Creator.\r\n * @dev See https://eips.ethereum.org/EIPS/eip-1155\r\n * @dev Note: The ERC-165 identifier for this interface is 0x510b5158.\r\n */\r\ninterface IERC1155InventoryCreator {\r\n    /**\r\n     * Returns the creator of a collection, or the zero address if the collection has not been created.\r\n     * @dev Reverts if `collectionId` does not represent a collection.\r\n     * @param collectionId Identifier of the collection.\r\n     * @return The creator of a collection, or the zero address if the collection has not been created.\r\n     */\r\n    function creator(uint256 collectionId) external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/utils/access/IERC173.sol\r\n\r\n\r\n\r\npragma solidity >=0.7.6 <0.8.0;\r\n\r\n/**\r\n * @title ERC-173 Contract Ownership Standard\r\n * Note: the ERC-165 identifier for this interface is 0x7f5828d0\r\n */\r\ninterface IERC173 {\r\n    /**\r\n     * Event emited when ownership of a contract changes.\r\n     * @param previousOwner the previous owner.\r\n     * @param newOwner the new owner.\r\n     */\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * Get the address of the owner\r\n     * @return The address of the owner.\r\n     */\r\n    function owner() external view returns (address);\r\n\r\n    /**\r\n     * Set the address of the new owner of the contract\r\n     * Set newOwner to address(0) to renounce any ownership.\r\n     * @dev Emits an {OwnershipTransferred} event.\r\n     * @param newOwner The address of the new owner of the contract. Using the zero address means renouncing ownership.\r\n     */\r\n    function transferOwnership(address newOwner) external;\r\n}\r\n\r\n\r\n// File contracts/utils/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity >=0.7.6 <0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is ManagedIdentity, IERC173 {\r\n    address internal _owner;\r\n\r\n    /**\r\n     * Initializes the contract, setting the deployer as the initial owner.\r\n     * @dev Emits an {IERC173-OwnershipTransferred(address,address)} event.\r\n     */\r\n    constructor(address owner_) {\r\n        _owner = owner_;\r\n        emit OwnershipTransferred(address(0), owner_);\r\n    }\r\n\r\n    /**\r\n     * Gets the address of the current contract owner.\r\n     */\r\n    function owner() public view virtual override returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * See {IERC173-transferOwnership(address)}\r\n     * @dev Reverts if the sender is not the current contract owner.\r\n     * @param newOwner the address of the new owner. Use the zero address to renounce the ownership.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual override {\r\n        _requireOwnership(_msgSender());\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if `account` is not the contract owner.\r\n     * @param account the account to test.\r\n     */\r\n    function _requireOwnership(address account) internal virtual {\r\n        require(account == this.owner(), \"Ownable: not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/utils/types/UInt256ToDecimalString.sol\r\n\r\n\r\n\r\n// Partially derived from OpenZeppelin:\r\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/8b10cb38d8fedf34f2d89b0ed604f2dceb76d6a9/contracts/utils/Strings.sol\r\n\r\npragma solidity >=0.7.6 <0.8.0;\r\n\r\nlibrary UInt256ToDecimalString {\r\n    function toDecimalString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        uint256 index = digits - 1;\r\n        temp = value;\r\n        while (temp != 0) {\r\n            buffer[index--] = bytes1(uint8(48 + (temp % 10)));\r\n            temp /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/metadata/BaseMetadataURI.sol\r\n\r\n\r\n\r\npragma solidity >=0.7.6 <0.8.0;\r\n\r\n\r\nabstract contract BaseMetadataURI is ManagedIdentity, Ownable {\r\n    using UInt256ToDecimalString for uint256;\r\n\r\n    event BaseMetadataURISet(string baseMetadataURI);\r\n\r\n    string public baseMetadataURI;\r\n\r\n    function setBaseMetadataURI(string calldata baseMetadataURI_) external {\r\n        _requireOwnership(_msgSender());\r\n        baseMetadataURI = baseMetadataURI_;\r\n        emit BaseMetadataURISet(baseMetadataURI_);\r\n    }\r\n\r\n    function _uri(uint256 id) internal view virtual returns (string memory) {\r\n        return string(abi.encodePacked(baseMetadataURI, id.toDecimalString()));\r\n    }\r\n}\r\n\r\n\r\n// File contracts/utils/access/MinterRole.sol\r\n\r\n\r\n\r\npragma solidity >=0.7.6 <0.8.0;\r\n\r\n/**\r\n * Contract which allows derived contracts access control over token minting operations.\r\n */\r\ncontract MinterRole is Ownable {\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    mapping(address => bool) public isMinter;\r\n\r\n    /**\r\n     * Constructor.\r\n     */\r\n    constructor(address owner_) Ownable(owner_) {\r\n        _addMinter(owner_);\r\n    }\r\n\r\n    /**\r\n     * Grants the minter role to a non-minter.\r\n     * @dev reverts if the sender is not the contract owner.\r\n     * @param account The account to grant the minter role to.\r\n     */\r\n    function addMinter(address account) public {\r\n        _requireOwnership(_msgSender());\r\n        _addMinter(account);\r\n    }\r\n\r\n    /**\r\n     * Renounces the granted minter role.\r\n     * @dev reverts if the sender is not a minter.\r\n     */\r\n    function renounceMinter() public {\r\n        address account = _msgSender();\r\n        _requireMinter(account);\r\n        isMinter[account] = false;\r\n        emit MinterRemoved(account);\r\n    }\r\n\r\n    function _requireMinter(address account) internal view {\r\n        require(isMinter[account], \"MinterRole: not a Minter\");\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        isMinter[account] = true;\r\n        emit MinterAdded(account);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/utils/ERC20Wrapper.sol\r\n\r\n\r\n\r\npragma solidity >=0.7.6 <0.8.0;\r\n\r\n/**\r\n * @title ERC20Wrapper\r\n * Wraps ERC20 functions to support non-standard implementations which do not return a bool value.\r\n * Calls to the wrapped functions revert only if they throw or if they return false.\r\n */\r\nlibrary ERC20Wrapper {\r\n    using AddressIsContract for address;\r\n\r\n    function wrappedTransfer(\r\n        IWrappedERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callWithOptionalReturnData(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function wrappedTransferFrom(\r\n        IWrappedERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callWithOptionalReturnData(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function wrappedApprove(\r\n        IWrappedERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        _callWithOptionalReturnData(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function _callWithOptionalReturnData(IWrappedERC20 token, bytes memory callData) internal {\r\n        address target = address(token);\r\n        require(target.isContract(), \"ERC20Wrapper: non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory data) = target.call(callData);\r\n        if (success) {\r\n            if (data.length != 0) {\r\n                require(abi.decode(data, (bool)), \"ERC20Wrapper: operation failed\");\r\n            }\r\n        } else {\r\n            // revert using a standard revert message\r\n            if (data.length == 0) {\r\n                revert(\"ERC20Wrapper: operation failed\");\r\n            }\r\n\r\n            // revert using the revert message coming from the call\r\n            assembly {\r\n                let size := mload(data)\r\n                revert(add(32, data), size)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface IWrappedERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n}\r\n\r\n\r\n// File contracts/utils/Recoverable.sol\r\n\r\n\r\n\r\npragma solidity >=0.7.6 <0.8.0;\r\n\r\n\r\n\r\nabstract contract Recoverable is ManagedIdentity, Ownable {\r\n    using ERC20Wrapper for IWrappedERC20;\r\n\r\n    /**\r\n     * Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\r\n     * Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\r\n     * so that the extraction is limited to only amounts sent accidentally.\r\n     * @dev Reverts if the sender is not the contract owner.\r\n     * @dev Reverts if `accounts`, `tokens` and `amounts` do not have the same length.\r\n     * @dev Reverts if one of `tokens` is does not implement the ERC20 transfer function.\r\n     * @dev Reverts if one of the ERC20 transfers fail for any reason.\r\n     * @param accounts the list of accounts to transfer the tokens to.\r\n     * @param tokens the list of ERC20 token addresses.\r\n     * @param amounts the list of token amounts to transfer.\r\n     */\r\n    function recoverERC20s(\r\n        address[] calldata accounts,\r\n        address[] calldata tokens,\r\n        uint256[] calldata amounts\r\n    ) external virtual {\r\n        _requireOwnership(_msgSender());\r\n        uint256 length = accounts.length;\r\n        require(length == tokens.length && length == amounts.length, \"Recov: inconsistent arrays\");\r\n        for (uint256 i = 0; i != length; ++i) {\r\n            IWrappedERC20(tokens[i]).wrappedTransfer(accounts[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\r\n     * Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\r\n     * so that the extraction is limited to only tokens sent accidentally.\r\n     * @dev Reverts if the sender is not the contract owner.\r\n     * @dev Reverts if `accounts`, `contracts` and `amounts` do not have the same length.\r\n     * @dev Reverts if one of `contracts` is does not implement the ERC721 transferFrom function.\r\n     * @dev Reverts if one of the ERC721 transfers fail for any reason.\r\n     * @param accounts the list of accounts to transfer the tokens to.\r\n     * @param contracts the list of ERC721 contract addresses.\r\n     * @param tokenIds the list of token ids to transfer.\r\n     */\r\n    function recoverERC721s(\r\n        address[] calldata accounts,\r\n        address[] calldata contracts,\r\n        uint256[] calldata tokenIds\r\n    ) external virtual {\r\n        _requireOwnership(_msgSender());\r\n        uint256 length = accounts.length;\r\n        require(length == contracts.length && length == tokenIds.length, \"Recov: inconsistent arrays\");\r\n        for (uint256 i = 0; i != length; ++i) {\r\n            IRecoverableERC721(contracts[i]).transferFrom(address(this), accounts[i], tokenIds[i]);\r\n        }\r\n    }\r\n}\r\n\r\ninterface IRecoverableERC721 {\r\n    /// See {IERC721-transferFrom(address,address,uint256)}\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/utils/lifecycle/Pausable.sol\r\n\r\n\r\n\r\npragma solidity >=0.7.6 <0.8.0;\r\n\r\n/**\r\n * @dev Contract which allows children to implement pausability.\r\n */\r\nabstract contract Pausable is ManagedIdentity {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool public paused;\r\n\r\n    constructor(bool paused_) {\r\n        paused = paused_;\r\n    }\r\n\r\n    function _requireNotPaused() internal view {\r\n        require(!paused, \"Pausable: paused\");\r\n    }\r\n\r\n    function _requirePaused() internal view {\r\n        require(paused, \"Pausable: not paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual {\r\n        _requireNotPaused();\r\n        paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual {\r\n        _requirePaused();\r\n        paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\n// File ethereum-universal-forwarder/src/solc_0.7/ERC2771/UsingAppendedCallData.sol@v0.1.4\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\nabstract contract UsingAppendedCallData {\r\n    function _lastAppendedDataAsSender() internal pure virtual returns (address payable sender) {\r\n        // Copied from openzeppelin : https://github.com/OpenZeppelin/openzeppelin-contracts/blob/9d5f77db9da0604ce0b25148898a94ae2c20d70f/contracts/metatx/ERC2771Context.sol1\r\n        // The assembly code is more direct than the Solidity version using `abi.decode`.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\r\n        }\r\n    }\r\n\r\n    function _msgDataAssuming20BytesAppendedData() internal pure virtual returns (bytes calldata) {\r\n        return msg.data[:msg.data.length - 20];\r\n    }\r\n}\r\n\r\n\r\n// File ethereum-universal-forwarder/src/solc_0.7/ERC2771/IERC2771.sol@v0.1.4\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\ninterface IERC2771 {\r\n    function isTrustedForwarder(address forwarder) external view returns (bool);\r\n}\r\n\r\n\r\n// File ethereum-universal-forwarder/src/solc_0.7/ERC2771/IForwarderRegistry.sol@v0.1.4\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\ninterface IForwarderRegistry {\r\n    function isForwarderFor(address, address) external view returns (bool);\r\n}\r\n\r\n\r\n// File ethereum-universal-forwarder/src/solc_0.7/ERC2771/UsingUniversalForwarding.sol@v0.1.4\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\n\r\nabstract contract UsingUniversalForwarding is UsingAppendedCallData, IERC2771 {\r\n    IForwarderRegistry internal immutable _forwarderRegistry;\r\n    address internal immutable _universalForwarder;\r\n\r\n    constructor(IForwarderRegistry forwarderRegistry, address universalForwarder) {\r\n        _universalForwarder = universalForwarder;\r\n        _forwarderRegistry = forwarderRegistry;\r\n    }\r\n\r\n    function isTrustedForwarder(address forwarder) external view virtual override returns (bool) {\r\n        return forwarder == _universalForwarder || forwarder == address(_forwarderRegistry);\r\n    }\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        address payable msgSender = msg.sender;\r\n        address payable sender = _lastAppendedDataAsSender();\r\n        if (msgSender == address(_forwarderRegistry) || msgSender == _universalForwarder) {\r\n            // if forwarder use appended data\r\n            return sender;\r\n        }\r\n\r\n        // if msg.sender is neither the registry nor the universal forwarder,\r\n        // we have to check the last 20bytes of the call data intepreted as an address\r\n        // and check if the msg.sender was registered as forewarder for that address\r\n        // we check tx.origin to save gas in case where msg.sender == tx.origin\r\n        // solhint-disable-next-line avoid-tx-origin\r\n        if (msgSender != tx.origin && _forwarderRegistry.isForwarderFor(sender, msgSender)) {\r\n            return sender;\r\n        }\r\n\r\n        return msgSender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        address payable msgSender = msg.sender;\r\n        if (msgSender == address(_forwarderRegistry) || msgSender == _universalForwarder) {\r\n            // if forwarder use appended data\r\n            return _msgDataAssuming20BytesAppendedData();\r\n        }\r\n\r\n        // we check tx.origin to save gas in case where msg.sender == tx.origin\r\n        // solhint-disable-next-line avoid-tx-origin\r\n        if (msgSender != tx.origin && _forwarderRegistry.isForwarderFor(_lastAppendedDataAsSender(), msgSender)) {\r\n            return _msgDataAssuming20BytesAppendedData();\r\n        }\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/token/ERC1155/GBotPacks/GBotPacks.sol\r\n\r\n\r\n\r\npragma solidity >=0.7.6 <0.8.0;\r\n\r\n// solhint-disable max-line-length\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// solhint-enable max-line-length\r\n\r\ncontract GBotPacks is\r\n    ERC1155InventoryBurnable,\r\n    IERC1155InventoryMintable,\r\n    IERC1155InventoryCreator,\r\n    BaseMetadataURI,\r\n    MinterRole,\r\n    Pausable,\r\n    Recoverable,\r\n    UsingUniversalForwarding\r\n{\r\n    constructor(IForwarderRegistry forwarderRegistry, address universalForwarder)\r\n        ERC1155Inventory()\r\n        MinterRole(msg.sender)\r\n        Pausable(false)\r\n        UsingUniversalForwarding(forwarderRegistry, universalForwarder)\r\n    {}\r\n\r\n    // ===================================================================================================\r\n    //                                 User Public Functions\r\n    // ===================================================================================================\r\n\r\n    /// @dev See {IERC165-supportsInterface}.\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC1155InventoryCreator).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    //================================== ERC1155MetadataURI =======================================/\r\n\r\n    /// @dev See {IERC1155MetadataURI-uri(uint256)}.\r\n    function uri(uint256 id) public view virtual override returns (string memory) {\r\n        return _uri(id);\r\n    }\r\n\r\n    //================================== ERC1155InventoryCreator =======================================/\r\n\r\n    /// @dev See {IERC1155InventoryCreator-creator(uint256)}.\r\n    function creator(uint256 collectionId) external view override returns (address) {\r\n        return _creator(collectionId);\r\n    }\r\n\r\n    // ===================================================================================================\r\n    //                               Admin Public Functions\r\n    // ===================================================================================================\r\n\r\n    // Destroys the contract\r\n    function deprecate() external {\r\n        _requirePaused();\r\n        address payable sender = _msgSender();\r\n        _requireOwnership(sender);\r\n        selfdestruct(sender);\r\n    }\r\n\r\n    /**\r\n     * Creates a collection.\r\n     * @dev Reverts if the sender is not the contract owner.\r\n     * @dev Reverts if `collectionId` does not represent a collection.\r\n     * @dev Reverts if `collectionId` has already been created.\r\n     * @dev Emits a {IERC1155Inventory-CollectionCreated} event.\r\n     * @param collectionId Identifier of the collection.\r\n     */\r\n    function createCollection(uint256 collectionId) external {\r\n        _requireOwnership(_msgSender());\r\n        _createCollection(collectionId);\r\n    }\r\n\r\n    //================================== Pausable =======================================/\r\n\r\n    function pause() external virtual {\r\n        _requireOwnership(_msgSender());\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external virtual {\r\n        _requireOwnership(_msgSender());\r\n        _unpause();\r\n    }\r\n\r\n    //================================== ERC1155 =======================================/\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        _requireNotPaused();\r\n        super.safeTransferFrom(from, to, id, value, data);\r\n    }\r\n\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory values,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        _requireNotPaused();\r\n        super.safeBatchTransferFrom(from, to, ids, values, data);\r\n    }\r\n\r\n    function burnFrom(\r\n        address from,\r\n        uint256 id,\r\n        uint256 value\r\n    ) public virtual override {\r\n        _requireNotPaused();\r\n        super.burnFrom(from, id, value);\r\n    }\r\n\r\n    function batchBurnFrom(\r\n        address from,\r\n        uint256[] memory ids,\r\n        uint256[] memory values\r\n    ) public virtual override {\r\n        _requireNotPaused();\r\n        super.batchBurnFrom(from, ids, values);\r\n    }\r\n\r\n    //================================== ERC1155InventoryMintable =======================================/\r\n\r\n\r\n    /**\r\n     * Safely mints some token (ERC1155-compatible).\r\n     * @dev See {IERC1155721InventoryMintable-safeMint(address,uint256,uint256,bytes)}.\r\n     */\r\n    function safeMint(\r\n        address to,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        _requireMinter(_msgSender());\r\n        _safeMint(to, id, value, data);\r\n    }\r\n\r\n    /**\r\n     * Safely mints a batch of tokens (ERC1155-compatible).\r\n     * @dev See {IERC1155721InventoryMintable-safeBatchMint(address,uint256[],uint256[],bytes)}.\r\n     */\r\n    function safeBatchMint(\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory values,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        _requireMinter(_msgSender());\r\n        _safeBatchMint(to, ids, values, data);\r\n    }\r\n\r\n\r\n    function _msgSender() internal view virtual override(ManagedIdentity, UsingUniversalForwarding) returns (address payable) {\r\n        return UsingUniversalForwarding._msgSender();\r\n    }\r\n\r\n    function _msgData() internal view virtual override(ManagedIdentity, UsingUniversalForwarding) returns (bytes memory ret) {\r\n        return UsingUniversalForwarding._msgData();\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"universalForwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseMetadataURI\",\"type\":\"string\"}],\"name\":\"BaseMetadataURISet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"fungible\",\"type\":\"bool\"}],\"name\":\"CollectionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseMetadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchBurnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"collectionOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"}],\"name\":\"createCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"}],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deprecate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isFungible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseMetadataURI_\",\"type\":\"string\"}],\"name\":\"setBaseMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GBotPacks", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "000000000000000000000000c5f6ac13b98f0e2b541c55c67a2c4946ae16d3f8000000000000000000000000e8f7fa0697b9b5edcbf3b6bf30040c75130e3297", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4774d6470f741336c752b93125a19bf2309e91781a6d44e330d8e28760cea01f"}