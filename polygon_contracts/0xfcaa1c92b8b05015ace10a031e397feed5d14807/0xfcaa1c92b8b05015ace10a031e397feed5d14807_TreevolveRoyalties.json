{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/treevolve/TreevolveRoyalties.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.19;\\n\\nimport \\\"../../openzeppelin-contracts/contracts/access/AccessControl.sol\\\";\\nimport \\\"../../openzeppelin-contracts/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../interfaces/quickswap/IPartialUniswapV2Router01.sol\\\";\\n\\n/**\\n * @dev Smart contract receiving the royalties for Treevolve NFT sales. It allows converting the\\n * royalties to $WOMBAT using QuickSwap and sending them out to another address.\\n */\\ncontract TreevolveRoyalties is AccessControl, Initializable {\\n\\n    /**\\n     * @dev Role that is allowed to swap royalties\\n     */\\n    bytes32 public constant ROYALTY_CONVERSION_ROLE = keccak256(\\\"ROYALTY_CONVERSION\\\");\\n\\n    /**\\n     * @dev Event emitted when $WOMBAT tokens were bought\\n     * @param amount The amount of $WOMBAT bought\\n     */\\n    event WombatBought(uint256 amount);\\n\\n    /**\\n     * @dev Address receiving the converted $WOMBAT tokens. This should be the address doing the\\n     * payouts for the Treevolve NFTs\\n     */\\n    address public wombatReceiver;\\n\\n    /**\\n     * @dev Address receiving the rest of the royalties split\\n     */\\n    address payable public royaltiesReceiver;\\n\\n    /**\\n     * @dev Address of the $WOMBAT token\\n     */\\n    address private wombatToken = 0x0C9c7712C83B3C70e7c5E11100D33D9401BdF9dd;\\n\\n    /**\\n     * @dev All other tokens that royalties are received in.\\n     */\\n    address[] private royaltyTokens;\\n\\n    /**\\n     * @dev The percentage of $WOMBAT to buy from royalties (0-100)\\n     */\\n    uint256 public buyWombatPercentage;\\n\\n    /**\\n     * @dev QuickSwap router instance\\n     */\\n    // See https://docs.quickswap.exchange/reference/smart-contracts/v2/router02/#address\\n    IPartialUniswapV2Router01 private swapRouter;\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev Initialize the state of the contract\\n     * @param _wombatReceiver The address receiving swapped $WOMBAT\\n     * @param _royaltiesReceiver The address receiving the rest of royalties\\n     * @param _owner The owner of the smart contract (gets the admin role)\\n     * @param _royaltiesConverter Address allowed to call the conversion of royalties\\n     * @param quickswapRouter The address of the quickswap router to use, must adhere to\\n     * IPartialUniswapV2Router01. For a production deployment most likely\\n     * 0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff\\n     * @param _wombatToken The address of the Wombat token. For a production deployment, most likely\\n     * 0x0C9c7712C83B3C70e7c5E11100D33D9401BdF9dd\\n     * @param _royaltyTokens All ERC20 token addresses royalties are received in. For a production\\n     * deployment, most likely 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174 (USDC) and\\n     * 0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619 (WETH)\\n     */\\n    function initialize(\\n        address _wombatReceiver, address payable _royaltiesReceiver, address _owner,\\n        address _royaltiesConverter, address quickswapRouter,\\n        address _wombatToken, address[] memory _royaltyTokens\\n    ) external initializer {\\n        wombatReceiver = _wombatReceiver;\\n        buyWombatPercentage = 50;\\n        royaltiesReceiver = _royaltiesReceiver;\\n        _grantRole(DEFAULT_ADMIN_ROLE, _owner);\\n        _grantRole(ROYALTY_CONVERSION_ROLE, _royaltiesConverter);\\n        swapRouter = IPartialUniswapV2Router01(quickswapRouter);\\n        wombatToken = _wombatToken;\\n        royaltyTokens = _royaltyTokens;\\n    }\\n\\n    receive() external payable {\\n        // Placeholder to be able receive MATIC/ETH\\n    }\\n\\n    /**\\n     * @dev Set a new receiver of converted $WOMBAT tokens\\n     * @param newReceiver The new address to receive $WOMBAT tokens\\n     */\\n    function setWombatReceiver(address newReceiver) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        wombatReceiver = newReceiver;\\n    }\\n\\n    /**\\n     * @dev Set a new receiver for remaining royalties\\n     * @param newReceiver The new address to receive royalties\\n     */\\n    function setRoyaltiesReceiver(\\n        address payable newReceiver\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        royaltiesReceiver = newReceiver;\\n    }\\n\\n    /**\\n     * @dev Sets the percentage of $WOMBAT to buy from royalties. The rest of royalties is send to\\n     * royaltiesReceiver.\\n     * @param newPercentage The new percentage to set, a value between [0, 100]\\n     */\\n    function setBuyWombatPercentage(uint256 newPercentage) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(newPercentage <= 100, \\\"Value must be between 0 and 100\\\");\\n        buyWombatPercentage = newPercentage;\\n    }\\n\\n    /**\\n     * @dev Split all received royalties according to buyWombatPercentage, buy $WOMBAT from one part\\n     * and send the other part to the royalties receiver.\\n     * @return The amount of $WOMBAT bought\\n     */\\n    function convertRoyalties() external onlyRole(ROYALTY_CONVERSION_ROLE) returns (uint256) {\\n        uint256 totalWombatBought = 0;\\n        totalWombatBought += swapMatic();\\n        for (uint256 i = 0; i < royaltyTokens.length; i++) {\\n            totalWombatBought += swapErc20(royaltyTokens[i]);\\n        }\\n        emit WombatBought(totalWombatBought);\\n        return totalWombatBought;\\n    }\\n\\n    /**\\n     * @dev Swaps owned MATIC to $WOMBAT. Part of the amount is swapped, the other part is sent to\\n     * another address.\\n     * @return The amount of $WOMBAT bought\\n     */\\n    function swapMatic() private returns (uint256) {\\n        uint256 maticBalance = address(this).balance;\\n        // Calculate how much to swap\\n        uint256 maticToSwap = (maticBalance * buyWombatPercentage) / 100;\\n        if (maticToSwap > 0) {\\n            // Execute MATIC -> WOMBAT swap\\n            // See https://docs.uniswap.org/contracts/v2/reference/smart-contracts/router-01#swapexactethfortokens\\n\\n            // Define the path from MATIC->WOMBAT\\n            address[] memory path = new address[](2);\\n            // First element must be WETH for native token swaps. This is not the same as the\\n            // wEthToken address - on Polygon WETH() is actually WMATIC\\n            path[0] = swapRouter.WETH();\\n            path[1] = wombatToken;\\n\\n            // Execute the swap\\n            uint256[] memory amountsOut = swapRouter.swapExactETHForTokens{value: maticToSwap}(\\n                // Minimum amount of $WOMBAT to receive\\n                0,\\n                // Path of the swap (direct in this case)\\n                path,\\n                // Address receiving the $WOMBAT tokens\\n                wombatReceiver,\\n                // Deadline in seconds - revert after 15 seconds of not being able to swap\\n                block.timestamp + 15\\n            );\\n\\n            // Send rest of MATIC to the royalties receiver\\n            royaltiesReceiver.transfer(maticBalance - maticToSwap);\\n            // First element is the input amount, rest is the outputs (according to path)\\n            return amountsOut[1];\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * @dev Swaps an ERC20 token to $WOMBAT using Uniswap v2. A direct path must exist. The amount\\n     * swapped is a percentage of the balance of this contract according to buyWombatPercentage, the\\n     * other part is sent to the royalties receiver\\n     * @param erc20Address The address of the ERC20 token to swap from\\n     * @return The amount of $WOMBAT bought\\n     */\\n    function swapErc20(address erc20Address) private returns (uint256) {\\n        // See https://docs.uniswap.org/contracts/v2/reference/smart-contracts/router-01#swaptokensforexacttokens\\n        IERC20 erc20 = IERC20(erc20Address);\\n        uint256 erc20Balance = erc20.balanceOf(address(this));\\n        uint256 amountToSwap = (erc20Balance * buyWombatPercentage) / 100;\\n        if (amountToSwap > 0) {\\n            address[] memory path = new address[](2);\\n            path[0] = erc20Address;\\n            path[1] = wombatToken;\\n\\n            erc20.approve(address(swapRouter), amountToSwap);\\n\\n            uint256[] memory amountsOut = swapRouter.swapExactTokensForTokens(\\n                // Amount of tokens to swap\\n                amountToSwap,\\n                // Minimum amount of $WOMBAT to receive\\n                0,\\n                // Path of swap (direct)\\n                path,\\n                // Address receiving the $WOMBAT tokens\\n                wombatReceiver,\\n                // Deadline in seconds - revert after 15 seconds of not being able to swap\\n                block.timestamp + 15\\n            );\\n\\n            // Transfer the remaining ERC20 balance to the royalties receiver\\n            erc20.transfer(royaltiesReceiver, erc20Balance - amountToSwap);\\n            return amountsOut[1];\\n        } else {\\n            return 0;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"interfaces/quickswap/IPartialUniswapV2Router01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// From https://github.com/Uniswap/v2-periphery/blob/master/LICENSE\\n\\n//                      GNU GENERAL PUBLIC LICENSE\\n//                        Version 3, 29 June 2007\\n//\\n//  Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\\n//  Everyone is permitted to copy and distribute verbatim copies\\n//  of this license document, but changing it is not allowed.\\n//\\n//                             Preamble\\n//\\n//   The GNU General Public License is a free, copyleft license for\\n// software and other kinds of works.\\n//\\n//   The licenses for most software and other practical works are designed\\n// to take away your freedom to share and change the works.  By contrast,\\n// the GNU General Public License is intended to guarantee your freedom to\\n// share and change all versions of a program--to make sure it remains free\\n// software for all its users.  We, the Free Software Foundation, use the\\n// GNU General Public License for most of our software; it applies also to\\n// any other work released this way by its authors.  You can apply it to\\n// your programs, too.\\n//\\n//   When we speak of free software, we are referring to freedom, not\\n// price.  Our General Public Licenses are designed to make sure that you\\n// have the freedom to distribute copies of free software (and charge for\\n// them if you wish), that you receive source code or can get it if you\\n// want it, that you can change the software or use pieces of it in new\\n// free programs, and that you know you can do these things.\\n//\\n//   To protect your rights, we need to prevent others from denying you\\n// these rights or asking you to surrender the rights.  Therefore, you have\\n// certain responsibilities if you distribute copies of the software, or if\\n// you modify it: responsibilities to respect the freedom of others.\\n//\\n//   For example, if you distribute copies of such a program, whether\\n// gratis or for a fee, you must pass on to the recipients the same\\n// freedoms that you received.  You must make sure that they, too, receive\\n// or can get the source code.  And you must show them these terms so they\\n// know their rights.\\n//\\n//   Developers that use the GNU GPL protect your rights with two steps:\\n// (1) assert copyright on the software, and (2) offer you this License\\n// giving you legal permission to copy, distribute and/or modify it.\\n//\\n//   For the developers' and authors' protection, the GPL clearly explains\\n// that there is no warranty for this free software.  For both users' and\\n// authors' sake, the GPL requires that modified versions be marked as\\n// changed, so that their problems will not be attributed erroneously to\\n// authors of previous versions.\\n//\\n//   Some devices are designed to deny users access to install or run\\n// modified versions of the software inside them, although the manufacturer\\n// can do so.  This is fundamentally incompatible with the aim of\\n// protecting users' freedom to change the software.  The systematic\\n// pattern of such abuse occurs in the area of products for individuals to\\n// use, which is precisely where it is most unacceptable.  Therefore, we\\n// have designed this version of the GPL to prohibit the practice for those\\n// products.  If such problems arise substantially in other domains, we\\n// stand ready to extend this provision to those domains in future versions\\n// of the GPL, as needed to protect the freedom of users.\\n//\\n//   Finally, every program is threatened constantly by software patents.\\n// States should not allow patents to restrict development and use of\\n// software on general-purpose computers, but in those that do, we wish to\\n// avoid the special danger that patents applied to a free program could\\n// make it effectively proprietary.  To prevent this, the GPL assures that\\n// patents cannot be used to render the program non-free.\\n//\\n//   The precise terms and conditions for copying, distribution and\\n// modification follow.\\n//\\n//                        TERMS AND CONDITIONS\\n//\\n//   0. Definitions.\\n//\\n//   \\\"This License\\\" refers to version 3 of the GNU General Public License.\\n//\\n//   \\\"Copyright\\\" also means copyright-like laws that apply to other kinds of\\n// works, such as semiconductor masks.\\n//\\n//   \\\"The Program\\\" refers to any copyrightable work licensed under this\\n// License.  Each licensee is addressed as \\\"you\\\".  \\\"Licensees\\\" and\\n// \\\"recipients\\\" may be individuals or organizations.\\n//\\n//   To \\\"modify\\\" a work means to copy from or adapt all or part of the work\\n// in a fashion requiring copyright permission, other than the making of an\\n// exact copy.  The resulting work is called a \\\"modified version\\\" of the\\n// earlier work or a work \\\"based on\\\" the earlier work.\\n//\\n//   A \\\"covered work\\\" means either the unmodified Program or a work based\\n// on the Program.\\n//\\n//   To \\\"propagate\\\" a work means to do anything with it that, without\\n// permission, would make you directly or secondarily liable for\\n// infringement under applicable copyright law, except executing it on a\\n// computer or modifying a private copy.  Propagation includes copying,\\n// distribution (with or without modification), making available to the\\n// public, and in some countries other activities as well.\\n//\\n//   To \\\"convey\\\" a work means any kind of propagation that enables other\\n// parties to make or receive copies.  Mere interaction with a user through\\n// a computer network, with no transfer of a copy, is not conveying.\\n//\\n//   An interactive user interface displays \\\"Appropriate Legal Notices\\\"\\n// to the extent that it includes a convenient and prominently visible\\n// feature that (1) displays an appropriate copyright notice, and (2)\\n// tells the user that there is no warranty for the work (except to the\\n// extent that warranties are provided), that licensees may convey the\\n// work under this License, and how to view a copy of this License.  If\\n// the interface presents a list of user commands or options, such as a\\n// menu, a prominent item in the list meets this criterion.\\n//\\n//   1. Source Code.\\n//\\n//   The \\\"source code\\\" for a work means the preferred form of the work\\n// for making modifications to it.  \\\"Object code\\\" means any non-source\\n// form of a work.\\n//\\n//   A \\\"Standard Interface\\\" means an interface that either is an official\\n// standard defined by a recognized standards body, or, in the case of\\n// interfaces specified for a particular programming language, one that\\n// is widely used among developers working in that language.\\n//\\n//   The \\\"System Libraries\\\" of an executable work include anything, other\\n// than the work as a whole, that (a) is included in the normal form of\\n// packaging a Major Component, but which is not part of that Major\\n// Component, and (b) serves only to enable use of the work with that\\n// Major Component, or to implement a Standard Interface for which an\\n// implementation is available to the public in source code form.  A\\n// \\\"Major Component\\\", in this context, means a major essential component\\n// (kernel, window system, and so on) of the specific operating system\\n// (if any) on which the executable work runs, or a compiler used to\\n// produce the work, or an object code interpreter used to run it.\\n//\\n//   The \\\"Corresponding Source\\\" for a work in object code form means all\\n// the source code needed to generate, install, and (for an executable\\n// work) run the object code and to modify the work, including scripts to\\n// control those activities.  However, it does not include the work's\\n// System Libraries, or general-purpose tools or generally available free\\n// programs which are used unmodified in performing those activities but\\n// which are not part of the work.  For example, Corresponding Source\\n// includes interface definition files associated with source files for\\n// the work, and the source code for shared libraries and dynamically\\n// linked subprograms that the work is specifically designed to require,\\n// such as by intimate data communication or control flow between those\\n// subprograms and other parts of the work.\\n//\\n//   The Corresponding Source need not include anything that users\\n// can regenerate automatically from other parts of the Corresponding\\n// Source.\\n//\\n//   The Corresponding Source for a work in source code form is that\\n// same work.\\n//\\n//   2. Basic Permissions.\\n//\\n//   All rights granted under this License are granted for the term of\\n// copyright on the Program, and are irrevocable provided the stated\\n// conditions are met.  This License explicitly affirms your unlimited\\n// permission to run the unmodified Program.  The output from running a\\n// covered work is covered by this License only if the output, given its\\n// content, constitutes a covered work.  This License acknowledges your\\n// rights of fair use or other equivalent, as provided by copyright law.\\n//\\n//   You may make, run and propagate covered works that you do not\\n// convey, without conditions so long as your license otherwise remains\\n// in force.  You may convey covered works to others for the sole purpose\\n// of having them make modifications exclusively for you, or provide you\\n// with facilities for running those works, provided that you comply with\\n// the terms of this License in conveying all material for which you do\\n// not control copyright.  Those thus making or running the covered works\\n// for you must do so exclusively on your behalf, under your direction\\n// and control, on terms that prohibit them from making any copies of\\n// your copyrighted material outside their relationship with you.\\n//\\n//   Conveying under any other circumstances is permitted solely under\\n// the conditions stated below.  Sublicensing is not allowed; section 10\\n// makes it unnecessary.\\n//\\n//   3. Protecting Users' Legal Rights From Anti-Circumvention Law.\\n//\\n//   No covered work shall be deemed part of an effective technological\\n// measure under any applicable law fulfilling obligations under article\\n// 11 of the WIPO copyright treaty adopted on 20 December 1996, or\\n// similar laws prohibiting or restricting circumvention of such\\n// measures.\\n//\\n//   When you convey a covered work, you waive any legal power to forbid\\n// circumvention of technological measures to the extent such circumvention\\n// is effected by exercising rights under this License with respect to\\n// the covered work, and you disclaim any intention to limit operation or\\n// modification of the work as a means of enforcing, against the work's\\n// users, your or third parties' legal rights to forbid circumvention of\\n// technological measures.\\n//\\n//   4. Conveying Verbatim Copies.\\n//\\n//   You may convey verbatim copies of the Program's source code as you\\n// receive it, in any medium, provided that you conspicuously and\\n// appropriately publish on each copy an appropriate copyright notice;\\n// keep intact all notices stating that this License and any\\n// non-permissive terms added in accord with section 7 apply to the code;\\n// keep intact all notices of the absence of any warranty; and give all\\n// recipients a copy of this License along with the Program.\\n//\\n//   You may charge any price or no price for each copy that you convey,\\n// and you may offer support or warranty protection for a fee.\\n//\\n//   5. Conveying Modified Source Versions.\\n//\\n//   You may convey a work based on the Program, or the modifications to\\n// produce it from the Program, in the form of source code under the\\n// terms of section 4, provided that you also meet all of these conditions:\\n//\\n//     a) The work must carry prominent notices stating that you modified\\n//     it, and giving a relevant date.\\n//\\n//     b) The work must carry prominent notices stating that it is\\n//     released under this License and any conditions added under section\\n//     7.  This requirement modifies the requirement in section 4 to\\n//     \\\"keep intact all notices\\\".\\n//\\n//     c) You must license the entire work, as a whole, under this\\n//     License to anyone who comes into possession of a copy.  This\\n//     License will therefore apply, along with any applicable section 7\\n//     additional terms, to the whole of the work, and all its parts,\\n//     regardless of how they are packaged.  This License gives no\\n//     permission to license the work in any other way, but it does not\\n//     invalidate such permission if you have separately received it.\\n//\\n//     d) If the work has interactive user interfaces, each must display\\n//     Appropriate Legal Notices; however, if the Program has interactive\\n//     interfaces that do not display Appropriate Legal Notices, your\\n//     work need not make them do so.\\n//\\n//   A compilation of a covered work with other separate and independent\\n// works, which are not by their nature extensions of the covered work,\\n// and which are not combined with it such as to form a larger program,\\n// in or on a volume of a storage or distribution medium, is called an\\n// \\\"aggregate\\\" if the compilation and its resulting copyright are not\\n// used to limit the access or legal rights of the compilation's users\\n// beyond what the individual works permit.  Inclusion of a covered work\\n// in an aggregate does not cause this License to apply to the other\\n// parts of the aggregate.\\n//\\n//   6. Conveying Non-Source Forms.\\n//\\n//   You may convey a covered work in object code form under the terms\\n// of sections 4 and 5, provided that you also convey the\\n// machine-readable Corresponding Source under the terms of this License,\\n// in one of these ways:\\n//\\n//     a) Convey the object code in, or embodied in, a physical product\\n//     (including a physical distribution medium), accompanied by the\\n//     Corresponding Source fixed on a durable physical medium\\n//     customarily used for software interchange.\\n//\\n//     b) Convey the object code in, or embodied in, a physical product\\n//     (including a physical distribution medium), accompanied by a\\n//     written offer, valid for at least three years and valid for as\\n//     long as you offer spare parts or customer support for that product\\n//     model, to give anyone who possesses the object code either (1) a\\n//     copy of the Corresponding Source for all the software in the\\n//     product that is covered by this License, on a durable physical\\n//     medium customarily used for software interchange, for a price no\\n//     more than your reasonable cost of physically performing this\\n//     conveying of source, or (2) access to copy the\\n//     Corresponding Source from a network server at no charge.\\n//\\n//     c) Convey individual copies of the object code with a copy of the\\n//     written offer to provide the Corresponding Source.  This\\n//     alternative is allowed only occasionally and noncommercially, and\\n//     only if you received the object code with such an offer, in accord\\n//     with subsection 6b.\\n//\\n//     d) Convey the object code by offering access from a designated\\n//     place (gratis or for a charge), and offer equivalent access to the\\n//     Corresponding Source in the same way through the same place at no\\n//     further charge.  You need not require recipients to copy the\\n//     Corresponding Source along with the object code.  If the place to\\n//     copy the object code is a network server, the Corresponding Source\\n//     may be on a different server (operated by you or a third party)\\n//     that supports equivalent copying facilities, provided you maintain\\n//     clear directions next to the object code saying where to find the\\n//     Corresponding Source.  Regardless of what server hosts the\\n//     Corresponding Source, you remain obligated to ensure that it is\\n//     available for as long as needed to satisfy these requirements.\\n//\\n//     e) Convey the object code using peer-to-peer transmission, provided\\n//     you inform other peers where the object code and Corresponding\\n//     Source of the work are being offered to the general public at no\\n//     charge under subsection 6d.\\n//\\n//   A separable portion of the object code, whose source code is excluded\\n// from the Corresponding Source as a System Library, need not be\\n// included in conveying the object code work.\\n//\\n//   A \\\"User Product\\\" is either (1) a \\\"consumer product\\\", which means any\\n// tangible personal property which is normally used for personal, family,\\n// or household purposes, or (2) anything designed or sold for incorporation\\n// into a dwelling.  In determining whether a product is a consumer product,\\n// doubtful cases shall be resolved in favor of coverage.  For a particular\\n// product received by a particular user, \\\"normally used\\\" refers to a\\n// typical or common use of that class of product, regardless of the status\\n// of the particular user or of the way in which the particular user\\n// actually uses, or expects or is expected to use, the product.  A product\\n// is a consumer product regardless of whether the product has substantial\\n// commercial, industrial or non-consumer uses, unless such uses represent\\n// the only significant mode of use of the product.\\n//\\n//   \\\"Installation Information\\\" for a User Product means any methods,\\n// procedures, authorization keys, or other information required to install\\n// and execute modified versions of a covered work in that User Product from\\n// a modified version of its Corresponding Source.  The information must\\n// suffice to ensure that the continued functioning of the modified object\\n// code is in no case prevented or interfered with solely because\\n// modification has been made.\\n//\\n//   If you convey an object code work under this section in, or with, or\\n// specifically for use in, a User Product, and the conveying occurs as\\n// part of a transaction in which the right of possession and use of the\\n// User Product is transferred to the recipient in perpetuity or for a\\n// fixed term (regardless of how the transaction is characterized), the\\n// Corresponding Source conveyed under this section must be accompanied\\n// by the Installation Information.  But this requirement does not apply\\n// if neither you nor any third party retains the ability to install\\n// modified object code on the User Product (for example, the work has\\n// been installed in ROM).\\n//\\n//   The requirement to provide Installation Information does not include a\\n// requirement to continue to provide support service, warranty, or updates\\n// for a work that has been modified or installed by the recipient, or for\\n// the User Product in which it has been modified or installed.  Access to a\\n// network may be denied when the modification itself materially and\\n// adversely affects the operation of the network or violates the rules and\\n// protocols for communication across the network.\\n//\\n//   Corresponding Source conveyed, and Installation Information provided,\\n// in accord with this section must be in a format that is publicly\\n// documented (and with an implementation available to the public in\\n// source code form), and must require no special password or key for\\n// unpacking, reading or copying.\\n//\\n//   7. Additional Terms.\\n//\\n//   \\\"Additional permissions\\\" are terms that supplement the terms of this\\n// License by making exceptions from one or more of its conditions.\\n// Additional permissions that are applicable to the entire Program shall\\n// be treated as though they were included in this License, to the extent\\n// that they are valid under applicable law.  If additional permissions\\n// apply only to part of the Program, that part may be used separately\\n// under those permissions, but the entire Program remains governed by\\n// this License without regard to the additional permissions.\\n//\\n//   When you convey a copy of a covered work, you may at your option\\n// remove any additional permissions from that copy, or from any part of\\n// it.  (Additional permissions may be written to require their own\\n// removal in certain cases when you modify the work.)  You may place\\n// additional permissions on material, added by you to a covered work,\\n// for which you have or can give appropriate copyright permission.\\n//\\n//   Notwithstanding any other provision of this License, for material you\\n// add to a covered work, you may (if authorized by the copyright holders of\\n// that material) supplement the terms of this License with terms:\\n//\\n//     a) Disclaiming warranty or limiting liability differently from the\\n//     terms of sections 15 and 16 of this License; or\\n//\\n//     b) Requiring preservation of specified reasonable legal notices or\\n//     author attributions in that material or in the Appropriate Legal\\n//     Notices displayed by works containing it; or\\n//\\n//     c) Prohibiting misrepresentation of the origin of that material, or\\n//     requiring that modified versions of such material be marked in\\n//     reasonable ways as different from the original version; or\\n//\\n//     d) Limiting the use for publicity purposes of names of licensors or\\n//     authors of the material; or\\n//\\n//     e) Declining to grant rights under trademark law for use of some\\n//     trade names, trademarks, or service marks; or\\n//\\n//     f) Requiring indemnification of licensors and authors of that\\n//     material by anyone who conveys the material (or modified versions of\\n//     it) with contractual assumptions of liability to the recipient, for\\n//     any liability that these contractual assumptions directly impose on\\n//     those licensors and authors.\\n//\\n//   All other non-permissive additional terms are considered \\\"further\\n// restrictions\\\" within the meaning of section 10.  If the Program as you\\n// received it, or any part of it, contains a notice stating that it is\\n// governed by this License along with a term that is a further\\n// restriction, you may remove that term.  If a license document contains\\n// a further restriction but permits relicensing or conveying under this\\n// License, you may add to a covered work material governed by the terms\\n// of that license document, provided that the further restriction does\\n// not survive such relicensing or conveying.\\n//\\n//   If you add terms to a covered work in accord with this section, you\\n// must place, in the relevant source files, a statement of the\\n// additional terms that apply to those files, or a notice indicating\\n// where to find the applicable terms.\\n//\\n//   Additional terms, permissive or non-permissive, may be stated in the\\n// form of a separately written license, or stated as exceptions;\\n// the above requirements apply either way.\\n//\\n//   8. Termination.\\n//\\n//   You may not propagate or modify a covered work except as expressly\\n// provided under this License.  Any attempt otherwise to propagate or\\n// modify it is void, and will automatically terminate your rights under\\n// this License (including any patent licenses granted under the third\\n// paragraph of section 11).\\n//\\n//   However, if you cease all violation of this License, then your\\n// license from a particular copyright holder is reinstated (a)\\n// provisionally, unless and until the copyright holder explicitly and\\n// finally terminates your license, and (b) permanently, if the copyright\\n// holder fails to notify you of the violation by some reasonable means\\n// prior to 60 days after the cessation.\\n//\\n//   Moreover, your license from a particular copyright holder is\\n// reinstated permanently if the copyright holder notifies you of the\\n// violation by some reasonable means, this is the first time you have\\n// received notice of violation of this License (for any work) from that\\n// copyright holder, and you cure the violation prior to 30 days after\\n// your receipt of the notice.\\n//\\n//   Termination of your rights under this section does not terminate the\\n// licenses of parties who have received copies or rights from you under\\n// this License.  If your rights have been terminated and not permanently\\n// reinstated, you do not qualify to receive new licenses for the same\\n// material under section 10.\\n//\\n//   9. Acceptance Not Required for Having Copies.\\n//\\n//   You are not required to accept this License in order to receive or\\n// run a copy of the Program.  Ancillary propagation of a covered work\\n// occurring solely as a consequence of using peer-to-peer transmission\\n// to receive a copy likewise does not require acceptance.  However,\\n// nothing other than this License grants you permission to propagate or\\n// modify any covered work.  These actions infringe copyright if you do\\n// not accept this License.  Therefore, by modifying or propagating a\\n// covered work, you indicate your acceptance of this License to do so.\\n//\\n//   10. Automatic Licensing of Downstream Recipients.\\n//\\n//   Each time you convey a covered work, the recipient automatically\\n// receives a license from the original licensors, to run, modify and\\n// propagate that work, subject to this License.  You are not responsible\\n// for enforcing compliance by third parties with this License.\\n//\\n//   An \\\"entity transaction\\\" is a transaction transferring control of an\\n// organization, or substantially all assets of one, or subdividing an\\n// organization, or merging organizations.  If propagation of a covered\\n// work results from an entity transaction, each party to that\\n// transaction who receives a copy of the work also receives whatever\\n// licenses to the work the party's predecessor in interest had or could\\n// give under the previous paragraph, plus a right to possession of the\\n// Corresponding Source of the work from the predecessor in interest, if\\n// the predecessor has it or can get it with reasonable efforts.\\n//\\n//   You may not impose any further restrictions on the exercise of the\\n// rights granted or affirmed under this License.  For example, you may\\n// not impose a license fee, royalty, or other charge for exercise of\\n// rights granted under this License, and you may not initiate litigation\\n// (including a cross-claim or counterclaim in a lawsuit) alleging that\\n// any patent claim is infringed by making, using, selling, offering for\\n// sale, or importing the Program or any portion of it.\\n//\\n//   11. Patents.\\n//\\n//   A \\\"contributor\\\" is a copyright holder who authorizes use under this\\n// License of the Program or a work on which the Program is based.  The\\n// work thus licensed is called the contributor's \\\"contributor version\\\".\\n//\\n//   A contributor's \\\"essential patent claims\\\" are all patent claims\\n// owned or controlled by the contributor, whether already acquired or\\n// hereafter acquired, that would be infringed by some manner, permitted\\n// by this License, of making, using, or selling its contributor version,\\n// but do not include claims that would be infringed only as a\\n// consequence of further modification of the contributor version.  For\\n// purposes of this definition, \\\"control\\\" includes the right to grant\\n// patent sublicenses in a manner consistent with the requirements of\\n// this License.\\n//\\n//   Each contributor grants you a non-exclusive, worldwide, royalty-free\\n// patent license under the contributor's essential patent claims, to\\n// make, use, sell, offer for sale, import and otherwise run, modify and\\n// propagate the contents of its contributor version.\\n//\\n//   In the following three paragraphs, a \\\"patent license\\\" is any express\\n// agreement or commitment, however denominated, not to enforce a patent\\n// (such as an express permission to practice a patent or covenant not to\\n// sue for patent infringement).  To \\\"grant\\\" such a patent license to a\\n// party means to make such an agreement or commitment not to enforce a\\n// patent against the party.\\n//\\n//   If you convey a covered work, knowingly relying on a patent license,\\n// and the Corresponding Source of the work is not available for anyone\\n// to copy, free of charge and under the terms of this License, through a\\n// publicly available network server or other readily accessible means,\\n// then you must either (1) cause the Corresponding Source to be so\\n// available, or (2) arrange to deprive yourself of the benefit of the\\n// patent license for this particular work, or (3) arrange, in a manner\\n// consistent with the requirements of this License, to extend the patent\\n// license to downstream recipients.  \\\"Knowingly relying\\\" means you have\\n// actual knowledge that, but for the patent license, your conveying the\\n// covered work in a country, or your recipient's use of the covered work\\n// in a country, would infringe one or more identifiable patents in that\\n// country that you have reason to believe are valid.\\n//\\n//   If, pursuant to or in connection with a single transaction or\\n// arrangement, you convey, or propagate by procuring conveyance of, a\\n// covered work, and grant a patent license to some of the parties\\n// receiving the covered work authorizing them to use, propagate, modify\\n// or convey a specific copy of the covered work, then the patent license\\n// you grant is automatically extended to all recipients of the covered\\n// work and works based on it.\\n//\\n//   A patent license is \\\"discriminatory\\\" if it does not include within\\n// the scope of its coverage, prohibits the exercise of, or is\\n// conditioned on the non-exercise of one or more of the rights that are\\n// specifically granted under this License.  You may not convey a covered\\n// work if you are a party to an arrangement with a third party that is\\n// in the business of distributing software, under which you make payment\\n// to the third party based on the extent of your activity of conveying\\n// the work, and under which the third party grants, to any of the\\n// parties who would receive the covered work from you, a discriminatory\\n// patent license (a) in connection with copies of the covered work\\n// conveyed by you (or copies made from those copies), or (b) primarily\\n// for and in connection with specific products or compilations that\\n// contain the covered work, unless you entered into that arrangement,\\n// or that patent license was granted, prior to 28 March 2007.\\n//\\n//   Nothing in this License shall be construed as excluding or limiting\\n// any implied license or other defenses to infringement that may\\n// otherwise be available to you under applicable patent law.\\n//\\n//   12. No Surrender of Others' Freedom.\\n//\\n//   If conditions are imposed on you (whether by court order, agreement or\\n// otherwise) that contradict the conditions of this License, they do not\\n// excuse you from the conditions of this License.  If you cannot convey a\\n// covered work so as to satisfy simultaneously your obligations under this\\n// License and any other pertinent obligations, then as a consequence you may\\n// not convey it at all.  For example, if you agree to terms that obligate you\\n// to collect a royalty for further conveying from those to whom you convey\\n// the Program, the only way you could satisfy both those terms and this\\n// License would be to refrain entirely from conveying the Program.\\n//\\n//   13. Use with the GNU Affero General Public License.\\n//\\n//   Notwithstanding any other provision of this License, you have\\n// permission to link or combine any covered work with a work licensed\\n// under version 3 of the GNU Affero General Public License into a single\\n// combined work, and to convey the resulting work.  The terms of this\\n// License will continue to apply to the part which is the covered work,\\n// but the special requirements of the GNU Affero General Public License,\\n// section 13, concerning interaction through a network will apply to the\\n// combination as such.\\n//\\n//   14. Revised Versions of this License.\\n//\\n//   The Free Software Foundation may publish revised and/or new versions of\\n// the GNU General Public License from time to time.  Such new versions will\\n// be similar in spirit to the present version, but may differ in detail to\\n// address new problems or concerns.\\n//\\n//   Each version is given a distinguishing version number.  If the\\n// Program specifies that a certain numbered version of the GNU General\\n// Public License \\\"or any later version\\\" applies to it, you have the\\n// option of following the terms and conditions either of that numbered\\n// version or of any later version published by the Free Software\\n// Foundation.  If the Program does not specify a version number of the\\n// GNU General Public License, you may choose any version ever published\\n// by the Free Software Foundation.\\n//\\n//   If the Program specifies that a proxy can decide which future\\n// versions of the GNU General Public License can be used, that proxy's\\n// public statement of acceptance of a version permanently authorizes you\\n// to choose that version for the Program.\\n//\\n//   Later license versions may give you additional or different\\n// permissions.  However, no additional obligations are imposed on any\\n// author or copyright holder as a result of your choosing to follow a\\n// later version.\\n//\\n//   15. Disclaimer of Warranty.\\n//\\n//   THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\\n// APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\\n// HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \\\"AS IS\\\" WITHOUT WARRANTY\\n// OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\\n// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\\n// PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\\n// IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\\n// ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\\n//\\n//   16. Limitation of Liability.\\n//\\n//   IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\\n// WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\\n// THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\\n// GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\\n// USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\\n// DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\\n// PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\\n// EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\\n// SUCH DAMAGES.\\n//\\n//   17. Interpretation of Sections 15 and 16.\\n//\\n//   If the disclaimer of warranty and limitation of liability provided\\n// above cannot be given local legal effect according to their terms,\\n// reviewing courts shall apply local law that most closely approximates\\n// an absolute waiver of all civil liability in connection with the\\n// Program, unless a warranty or assumption of liability accompanies a\\n// copy of the Program in return for a fee.\\n//\\n//                      END OF TERMS AND CONDITIONS\\n//\\n//             How to Apply These Terms to Your New Programs\\n//\\n//   If you develop a new program, and you want it to be of the greatest\\n// possible use to the public, the best way to achieve this is to make it\\n// free software which everyone can redistribute and change under these terms.\\n//\\n//   To do so, attach the following notices to the program.  It is safest\\n// to attach them to the start of each source file to most effectively\\n// state the exclusion of warranty; and each file should have at least\\n// the \\\"copyright\\\" line and a pointer to where the full notice is found.\\n//\\n//     <one line to give the program's name and a brief idea of what it does.>\\n//     Copyright (C) <year>  <name of author>\\n//\\n//     This program is free software: you can redistribute it and/or modify\\n//     it under the terms of the GNU General Public License as published by\\n//     the Free Software Foundation, either version 3 of the License, or\\n//     (at your option) any later version.\\n//\\n//     This program is distributed in the hope that it will be useful,\\n//     but WITHOUT ANY WARRANTY; without even the implied warranty of\\n//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n//     GNU General Public License for more details.\\n//\\n//     You should have received a copy of the GNU General Public License\\n//     along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n//\\n// Also add information on how to contact you by electronic and paper mail.\\n//\\n//   If the program does terminal interaction, make it output a short\\n// notice like this when it starts in an interactive mode:\\n//\\n//     <program>  Copyright (C) <year>  <name of author>\\n//     This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\\n//     This is free software, and you are welcome to redistribute it\\n//     under certain conditions; type `show c' for details.\\n//\\n// The hypothetical commands `show w' and `show c' should show the appropriate\\n// parts of the General Public License.  Of course, your program's commands\\n// might be different; for a GUI interface, you would use an \\\"about box\\\".\\n//\\n//   You should also get your employer (if you work as a programmer) or school,\\n// if any, to sign a \\\"copyright disclaimer\\\" for the program, if necessary.\\n// For more information on this, and how to apply and follow the GNU GPL, see\\n// <https://www.gnu.org/licenses/>.\\n//\\n//   The GNU General Public License does not permit incorporating your program\\n// into proprietary programs.  If your program is a subroutine library, you\\n// may consider it more useful to permit linking proprietary applications with\\n// the library.  If this is what you want to do, use the GNU Lesser General\\n// Public License instead of this License.  But first, please read\\n// <https://www.gnu.org/licenses/why-not-lgpl.html>.\\n\\npragma solidity ^0.8.19;\\n\\n/**\\n * @dev Extract of needed Uniswap functions for the Growing Tree Royalties\\n */\\ninterface IPartialUniswapV2Router01 {\\n    // From https://github.com/Uniswap/v2-periphery/blob/0335e8f7e1bd1e8d8329fd300aea2ef2f36dd19f/contracts/interfaces/IUniswapV2Router01.sol#L5C1-L5C53\\n    function WETH() external pure returns (address);\\n\\n    // From https://github.com/Uniswap/v2-periphery/blob/0335e8f7e1bd1e8d8329fd300aea2ef2f36dd19f/contracts/interfaces/IUniswapV2Router01.sol#L61\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    // From https://github.com/Uniswap/v2-periphery/blob/0335e8f7e1bd1e8d8329fd300aea2ef2f36dd19f/contracts/interfaces/IUniswapV2Router01.sol#L75\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WombatBought\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROYALTY_CONVERSION_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyWombatPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convertRoyalties\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wombatReceiver\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_royaltiesReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royaltiesConverter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quickswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wombatToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_royaltyTokens\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltiesReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"setBuyWombatPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newReceiver\",\"type\":\"address\"}],\"name\":\"setRoyaltiesReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"}],\"name\":\"setWombatReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wombatReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TreevolveRoyalties", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}