{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/base/periphery/DystRouter01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"../../lib/Math.sol\\\";\\r\\nimport \\\"../../lib/SafeERC20.sol\\\";\\r\\nimport \\\"../../interface/IERC20.sol\\\";\\r\\nimport \\\"../../interface/IWMATIC.sol\\\";\\r\\nimport \\\"../../interface/IPair.sol\\\";\\r\\nimport \\\"../../interface/IFactory.sol\\\";\\r\\n\\r\\ncontract DystRouter01 {\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  struct Route {\\r\\n    address from;\\r\\n    address to;\\r\\n    bool stable;\\r\\n  }\\r\\n\\r\\n  address public immutable factory;\\r\\n  IWMATIC public immutable wmatic;\\r\\n  uint internal constant MINIMUM_LIQUIDITY = 10 ** 3;\\r\\n  bytes32 immutable pairCodeHash;\\r\\n\\r\\n  modifier ensure(uint deadline) {\\r\\n    require(deadline >= block.timestamp, 'DystRouter: EXPIRED');\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  constructor(address _factory, address _wmatic) {\\r\\n    factory = _factory;\\r\\n    pairCodeHash = IFactory(_factory).pairCodeHash();\\r\\n    wmatic = IWMATIC(_wmatic);\\r\\n  }\\r\\n\\r\\n  receive() external payable {\\r\\n    // only accept ETH via fallback from the WETH contract\\r\\n    require(msg.sender == address(wmatic), \\\"DystRouter: NOT_WMATIC\\\");\\r\\n  }\\r\\n\\r\\n  function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1) {\\r\\n    return _sortTokens(tokenA, tokenB);\\r\\n  }\\r\\n\\r\\n  function _sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\r\\n    require(tokenA != tokenB, 'DystRouter: IDENTICAL_ADDRESSES');\\r\\n    (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n    require(token0 != address(0), 'DystRouter: ZERO_ADDRESS');\\r\\n  }\\r\\n\\r\\n  function pairFor(address tokenA, address tokenB, bool stable) external view returns (address pair) {\\r\\n    return _pairFor(tokenA, tokenB, stable);\\r\\n  }\\r\\n\\r\\n  /// @dev Calculates the CREATE2 address for a pair without making any external calls.\\r\\n  function _pairFor(address tokenA, address tokenB, bool stable) internal view returns (address pair) {\\r\\n    (address token0, address token1) = _sortTokens(tokenA, tokenB);\\r\\n    pair = address(uint160(uint(keccak256(abi.encodePacked(\\r\\n        hex'ff',\\r\\n        factory,\\r\\n        keccak256(abi.encodePacked(token0, token1, stable)),\\r\\n        pairCodeHash // init code hash\\r\\n      )))));\\r\\n  }\\r\\n\\r\\n  function quoteLiquidity(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB) {\\r\\n    return _quoteLiquidity(amountA, reserveA, reserveB);\\r\\n  }\\r\\n\\r\\n  /// @dev Given some amount of an asset and pair reserves, returns an equivalent amount of the other asset.\\r\\n  function _quoteLiquidity(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\\r\\n    require(amountA > 0, 'DystRouter: INSUFFICIENT_AMOUNT');\\r\\n    require(reserveA > 0 && reserveB > 0, 'DystRouter: INSUFFICIENT_LIQUIDITY');\\r\\n    amountB = amountA * reserveB / reserveA;\\r\\n  }\\r\\n\\r\\n  function getReserves(address tokenA, address tokenB, bool stable) external view returns (uint reserveA, uint reserveB) {\\r\\n    return _getReserves(tokenA, tokenB, stable);\\r\\n  }\\r\\n\\r\\n  /// @dev Fetches and sorts the reserves for a pair.\\r\\n  function _getReserves(address tokenA, address tokenB, bool stable) internal view returns (uint reserveA, uint reserveB) {\\r\\n    (address token0,) = _sortTokens(tokenA, tokenB);\\r\\n    (uint reserve0, uint reserve1,) = IPair(_pairFor(tokenA, tokenB, stable)).getReserves();\\r\\n    (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\r\\n  }\\r\\n\\r\\n  /// @dev Performs chained getAmountOut calculations on any number of pairs.\\r\\n  function getAmountOut(uint amountIn, address tokenIn, address tokenOut) external view returns (uint amount, bool stable) {\\r\\n    address pair = _pairFor(tokenIn, tokenOut, true);\\r\\n    uint amountStable;\\r\\n    uint amountVolatile;\\r\\n    if (IFactory(factory).isPair(pair)) {\\r\\n      amountStable = IPair(pair).getAmountOut(amountIn, tokenIn);\\r\\n    }\\r\\n    pair = _pairFor(tokenIn, tokenOut, false);\\r\\n    if (IFactory(factory).isPair(pair)) {\\r\\n      amountVolatile = IPair(pair).getAmountOut(amountIn, tokenIn);\\r\\n    }\\r\\n    return amountStable > amountVolatile ? (amountStable, true) : (amountVolatile, false);\\r\\n  }\\r\\n\\r\\n  function getExactAmountOut(uint amountIn, address tokenIn, address tokenOut, bool stable) external view returns (uint) {\\r\\n    address pair = _pairFor(tokenIn, tokenOut, stable);\\r\\n    if (IFactory(factory).isPair(pair)) {\\r\\n      return IPair(pair).getAmountOut(amountIn, tokenIn);\\r\\n    }\\r\\n    return 0;\\r\\n  }\\r\\n\\r\\n  /// @dev Performs chained getAmountOut calculations on any number of pairs.\\r\\n  function getAmountsOut(uint amountIn, Route[] memory routes) external view returns (uint[] memory amounts) {\\r\\n    return _getAmountsOut(amountIn, routes);\\r\\n  }\\r\\n\\r\\n  function _getAmountsOut(uint amountIn, Route[] memory routes) internal view returns (uint[] memory amounts) {\\r\\n    require(routes.length >= 1, 'DystRouter: INVALID_PATH');\\r\\n    amounts = new uint[](routes.length + 1);\\r\\n    amounts[0] = amountIn;\\r\\n    for (uint i = 0; i < routes.length; i++) {\\r\\n      address pair = _pairFor(routes[i].from, routes[i].to, routes[i].stable);\\r\\n      if (IFactory(factory).isPair(pair)) {\\r\\n        amounts[i + 1] = IPair(pair).getAmountOut(amounts[i], routes[i].from);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function isPair(address pair) external view returns (bool) {\\r\\n    return IFactory(factory).isPair(pair);\\r\\n  }\\r\\n\\r\\n  function quoteAddLiquidity(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    bool stable,\\r\\n    uint amountADesired,\\r\\n    uint amountBDesired\\r\\n  ) external view returns (uint amountA, uint amountB, uint liquidity) {\\r\\n    // create the pair if it doesn't exist yet\\r\\n    address _pair = IFactory(factory).getPair(tokenA, tokenB, stable);\\r\\n    (uint reserveA, uint reserveB) = (0, 0);\\r\\n    uint _totalSupply = 0;\\r\\n    if (_pair != address(0)) {\\r\\n      _totalSupply = IERC20(_pair).totalSupply();\\r\\n      (reserveA, reserveB) = _getReserves(tokenA, tokenB, stable);\\r\\n    }\\r\\n    if (reserveA == 0 && reserveB == 0) {\\r\\n      (amountA, amountB) = (amountADesired, amountBDesired);\\r\\n      liquidity = Math.sqrt(amountA * amountB) - MINIMUM_LIQUIDITY;\\r\\n    } else {\\r\\n\\r\\n      uint amountBOptimal = _quoteLiquidity(amountADesired, reserveA, reserveB);\\r\\n      if (amountBOptimal <= amountBDesired) {\\r\\n        (amountA, amountB) = (amountADesired, amountBOptimal);\\r\\n        liquidity = Math.min(amountA * _totalSupply / reserveA, amountB * _totalSupply / reserveB);\\r\\n      } else {\\r\\n        uint amountAOptimal = _quoteLiquidity(amountBDesired, reserveB, reserveA);\\r\\n        (amountA, amountB) = (amountAOptimal, amountBDesired);\\r\\n        liquidity = Math.min(amountA * _totalSupply / reserveA, amountB * _totalSupply / reserveB);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function quoteRemoveLiquidity(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    bool stable,\\r\\n    uint liquidity\\r\\n  ) external view returns (uint amountA, uint amountB) {\\r\\n    // create the pair if it doesn't exist yet\\r\\n    address _pair = IFactory(factory).getPair(tokenA, tokenB, stable);\\r\\n\\r\\n    if (_pair == address(0)) {\\r\\n      return (0, 0);\\r\\n    }\\r\\n\\r\\n    (uint reserveA, uint reserveB) = _getReserves(tokenA, tokenB, stable);\\r\\n    uint _totalSupply = IERC20(_pair).totalSupply();\\r\\n    // using balances ensures pro-rata distribution\\r\\n    amountA = liquidity * reserveA / _totalSupply;\\r\\n    // using balances ensures pro-rata distribution\\r\\n    amountB = liquidity * reserveB / _totalSupply;\\r\\n\\r\\n  }\\r\\n\\r\\n  function _addLiquidity(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    bool stable,\\r\\n    uint amountADesired,\\r\\n    uint amountBDesired,\\r\\n    uint amountAMin,\\r\\n    uint amountBMin\\r\\n  ) internal returns (uint amountA, uint amountB) {\\r\\n    require(amountADesired >= amountAMin, \\\"DystRouter: DESIRED_A_AMOUNT\\\");\\r\\n    require(amountBDesired >= amountBMin, \\\"DystRouter: DESIRED_B_AMOUNT\\\");\\r\\n    // create the pair if it doesn't exist yet\\r\\n    address _pair = IFactory(factory).getPair(tokenA, tokenB, stable);\\r\\n    if (_pair == address(0)) {\\r\\n      _pair = IFactory(factory).createPair(tokenA, tokenB, stable);\\r\\n    }\\r\\n    (uint reserveA, uint reserveB) = _getReserves(tokenA, tokenB, stable);\\r\\n    if (reserveA == 0 && reserveB == 0) {\\r\\n      (amountA, amountB) = (amountADesired, amountBDesired);\\r\\n    } else {\\r\\n      uint amountBOptimal = _quoteLiquidity(amountADesired, reserveA, reserveB);\\r\\n      if (amountBOptimal <= amountBDesired) {\\r\\n        require(amountBOptimal >= amountBMin, 'DystRouter: INSUFFICIENT_B_AMOUNT');\\r\\n        (amountA, amountB) = (amountADesired, amountBOptimal);\\r\\n      } else {\\r\\n        uint amountAOptimal = _quoteLiquidity(amountBDesired, reserveB, reserveA);\\r\\n        assert(amountAOptimal <= amountADesired);\\r\\n        require(amountAOptimal >= amountAMin, 'DystRouter: INSUFFICIENT_A_AMOUNT');\\r\\n        (amountA, amountB) = (amountAOptimal, amountBDesired);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function addLiquidity(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    bool stable,\\r\\n    uint amountADesired,\\r\\n    uint amountBDesired,\\r\\n    uint amountAMin,\\r\\n    uint amountBMin,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external ensure(deadline) returns (uint amountA, uint amountB, uint liquidity) {\\r\\n    (amountA, amountB) = _addLiquidity(\\r\\n      tokenA,\\r\\n      tokenB,\\r\\n      stable,\\r\\n      amountADesired,\\r\\n      amountBDesired,\\r\\n      amountAMin,\\r\\n      amountBMin\\r\\n    );\\r\\n    address pair = _pairFor(tokenA, tokenB, stable);\\r\\n    SafeERC20.safeTransferFrom(IERC20(tokenA), msg.sender, pair, amountA);\\r\\n    SafeERC20.safeTransferFrom(IERC20(tokenB), msg.sender, pair, amountB);\\r\\n    liquidity = IPair(pair).mint(to);\\r\\n  }\\r\\n\\r\\n  function addLiquidityMATIC(\\r\\n    address token,\\r\\n    bool stable,\\r\\n    uint amountTokenDesired,\\r\\n    uint amountTokenMin,\\r\\n    uint amountMATICMin,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external payable ensure(deadline) returns (uint amountToken, uint amountMATIC, uint liquidity) {\\r\\n    (amountToken, amountMATIC) = _addLiquidity(\\r\\n      token,\\r\\n      address(wmatic),\\r\\n      stable,\\r\\n      amountTokenDesired,\\r\\n      msg.value,\\r\\n      amountTokenMin,\\r\\n      amountMATICMin\\r\\n    );\\r\\n    address pair = _pairFor(token, address(wmatic), stable);\\r\\n    IERC20(token).safeTransferFrom(msg.sender, pair, amountToken);\\r\\n    wmatic.deposit{value : amountMATIC}();\\r\\n    assert(wmatic.transfer(pair, amountMATIC));\\r\\n    liquidity = IPair(pair).mint(to);\\r\\n    // refund dust eth, if any\\r\\n    if (msg.value > amountMATIC) _safeTransferMATIC(msg.sender, msg.value - amountMATIC);\\r\\n  }\\r\\n\\r\\n  // **** REMOVE LIQUIDITY ****\\r\\n\\r\\n  function removeLiquidity(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    bool stable,\\r\\n    uint liquidity,\\r\\n    uint amountAMin,\\r\\n    uint amountBMin,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external returns (uint amountA, uint amountB) {\\r\\n    return _removeLiquidity(\\r\\n      tokenA,\\r\\n      tokenB,\\r\\n      stable,\\r\\n      liquidity,\\r\\n      amountAMin,\\r\\n      amountBMin,\\r\\n      to,\\r\\n      deadline\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function _removeLiquidity(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    bool stable,\\r\\n    uint liquidity,\\r\\n    uint amountAMin,\\r\\n    uint amountBMin,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) internal ensure(deadline) returns (uint amountA, uint amountB) {\\r\\n    address pair = _pairFor(tokenA, tokenB, stable);\\r\\n    IERC20(pair).safeTransferFrom(msg.sender, pair, liquidity);\\r\\n    // send liquidity to pair\\r\\n    (uint amount0, uint amount1) = IPair(pair).burn(to);\\r\\n    (address token0,) = _sortTokens(tokenA, tokenB);\\r\\n    (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\\r\\n    require(amountA >= amountAMin, 'DystRouter: INSUFFICIENT_A_AMOUNT');\\r\\n    require(amountB >= amountBMin, 'DystRouter: INSUFFICIENT_B_AMOUNT');\\r\\n  }\\r\\n\\r\\n  function removeLiquidityMATIC(\\r\\n    address token,\\r\\n    bool stable,\\r\\n    uint liquidity,\\r\\n    uint amountTokenMin,\\r\\n    uint amountMATICMin,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external returns (uint amountToken, uint amountMATIC) {\\r\\n    return _removeLiquidityMATIC(\\r\\n      token,\\r\\n      stable,\\r\\n      liquidity,\\r\\n      amountTokenMin,\\r\\n      amountMATICMin,\\r\\n      to,\\r\\n      deadline\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function _removeLiquidityMATIC(\\r\\n    address token,\\r\\n    bool stable,\\r\\n    uint liquidity,\\r\\n    uint amountTokenMin,\\r\\n    uint amountMATICMin,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) internal ensure(deadline) returns (uint amountToken, uint amountMATIC) {\\r\\n    (amountToken, amountMATIC) = _removeLiquidity(\\r\\n      token,\\r\\n      address(wmatic),\\r\\n      stable,\\r\\n      liquidity,\\r\\n      amountTokenMin,\\r\\n      amountMATICMin,\\r\\n      address(this),\\r\\n      deadline\\r\\n    );\\r\\n    IERC20(token).safeTransfer(to, amountToken);\\r\\n    wmatic.withdraw(amountMATIC);\\r\\n    _safeTransferMATIC(to, amountMATIC);\\r\\n  }\\r\\n\\r\\n  function removeLiquidityWithPermit(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    bool stable,\\r\\n    uint liquidity,\\r\\n    uint amountAMin,\\r\\n    uint amountBMin,\\r\\n    address to,\\r\\n    uint deadline,\\r\\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n  ) external returns (uint amountA, uint amountB) {\\r\\n    address pair = _pairFor(tokenA, tokenB, stable);\\r\\n    {\\r\\n      uint value = approveMax ? type(uint).max : liquidity;\\r\\n      IPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\\r\\n    }\\r\\n\\r\\n    (amountA, amountB) = _removeLiquidity(tokenA, tokenB, stable, liquidity, amountAMin, amountBMin, to, deadline);\\r\\n  }\\r\\n\\r\\n  function removeLiquidityMATICWithPermit(\\r\\n    address token,\\r\\n    bool stable,\\r\\n    uint liquidity,\\r\\n    uint amountTokenMin,\\r\\n    uint amountMATICMin,\\r\\n    address to,\\r\\n    uint deadline,\\r\\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n  ) external returns (uint amountToken, uint amountMATIC) {\\r\\n    address pair = _pairFor(token, address(wmatic), stable);\\r\\n    uint value = approveMax ? type(uint).max : liquidity;\\r\\n    IPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\\r\\n    (amountToken, amountMATIC) = _removeLiquidityMATIC(token, stable, liquidity, amountTokenMin, amountMATICMin, to, deadline);\\r\\n  }\\r\\n\\r\\n  function removeLiquidityMATICSupportingFeeOnTransferTokens(\\r\\n    address token,\\r\\n    bool stable,\\r\\n    uint liquidity,\\r\\n    uint amountTokenMin,\\r\\n    uint amountFTMMin,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external returns (uint amountToken, uint amountFTM) {\\r\\n    return _removeLiquidityMATICSupportingFeeOnTransferTokens(\\r\\n      token,\\r\\n      stable,\\r\\n      liquidity,\\r\\n      amountTokenMin,\\r\\n      amountFTMMin,\\r\\n      to,\\r\\n      deadline\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function _removeLiquidityMATICSupportingFeeOnTransferTokens(\\r\\n    address token,\\r\\n    bool stable,\\r\\n    uint liquidity,\\r\\n    uint amountTokenMin,\\r\\n    uint amountFTMMin,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) internal ensure(deadline) returns (uint amountToken, uint amountFTM) {\\r\\n    (amountToken, amountFTM) = _removeLiquidity(\\r\\n      token,\\r\\n      address(wmatic),\\r\\n      stable,\\r\\n      liquidity,\\r\\n      amountTokenMin,\\r\\n      amountFTMMin,\\r\\n      address(this),\\r\\n      deadline\\r\\n    );\\r\\n    IERC20(token).safeTransfer(to, IERC20(token).balanceOf(address(this)));\\r\\n    wmatic.withdraw(amountFTM);\\r\\n    _safeTransferMATIC(to, amountFTM);\\r\\n  }\\r\\n\\r\\n  function removeLiquidityMATICWithPermitSupportingFeeOnTransferTokens(\\r\\n    address token,\\r\\n    bool stable,\\r\\n    uint liquidity,\\r\\n    uint amountTokenMin,\\r\\n    uint amountFTMMin,\\r\\n    address to,\\r\\n    uint deadline,\\r\\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n  ) external returns (uint amountToken, uint amountFTM) {\\r\\n    address pair = _pairFor(token, address(wmatic), stable);\\r\\n    uint value = approveMax ? type(uint).max : liquidity;\\r\\n    IPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\\r\\n    (amountToken, amountFTM) = _removeLiquidityMATICSupportingFeeOnTransferTokens(\\r\\n      token, stable, liquidity, amountTokenMin, amountFTMMin, to, deadline\\r\\n    );\\r\\n  }\\r\\n\\r\\n  // **** SWAP ****\\r\\n  // requires the initial amount to have already been sent to the first pair\\r\\n  function _swap(uint[] memory amounts, Route[] memory routes, address _to) internal virtual {\\r\\n    for (uint i = 0; i < routes.length; i++) {\\r\\n      (address token0,) = _sortTokens(routes[i].from, routes[i].to);\\r\\n      uint amountOut = amounts[i + 1];\\r\\n      (uint amount0Out, uint amount1Out) = routes[i].from == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\\r\\n      address to = i < routes.length - 1 ? _pairFor(routes[i + 1].from, routes[i + 1].to, routes[i + 1].stable) : _to;\\r\\n      IPair(_pairFor(routes[i].from, routes[i].to, routes[i].stable)).swap(\\r\\n        amount0Out, amount1Out, to, new bytes(0)\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _swapSupportingFeeOnTransferTokens(Route[] memory routes, address _to) internal virtual {\\r\\n    for (uint i; i < routes.length; i++) {\\r\\n      (address input, address output) = (routes[i].from, routes[i].to);\\r\\n      (address token0,) = _sortTokens(input, output);\\r\\n      IPair pair = IPair(_pairFor(routes[i].from, routes[i].to, routes[i].stable));\\r\\n      uint amountInput;\\r\\n      uint amountOutput;\\r\\n      {// scope to avoid stack too deep errors\\r\\n        (uint reserve0, uint reserve1,) = pair.getReserves();\\r\\n        uint reserveInput = input == token0 ? reserve0 : reserve1;\\r\\n        amountInput = IERC20(input).balanceOf(address(pair)) - reserveInput;\\r\\n        //(amountOutput,) = getAmountOut(amountInput, input, output, stable);\\r\\n        amountOutput = pair.getAmountOut(amountInput, input);\\r\\n      }\\r\\n      (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOutput) : (amountOutput, uint(0));\\r\\n      address to = i < routes.length - 1 ? _pairFor(routes[i + 1].from, routes[i + 1].to, routes[i + 1].stable) : _to;\\r\\n      pair.swap(amount0Out, amount1Out, to, new bytes(0));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function swapExactTokensForTokensSimple(\\r\\n    uint amountIn,\\r\\n    uint amountOutMin,\\r\\n    address tokenFrom,\\r\\n    address tokenTo,\\r\\n    bool stable,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external ensure(deadline) returns (uint[] memory amounts) {\\r\\n    Route[] memory routes = new Route[](1);\\r\\n    routes[0].from = tokenFrom;\\r\\n    routes[0].to = tokenTo;\\r\\n    routes[0].stable = stable;\\r\\n    amounts = _getAmountsOut(amountIn, routes);\\r\\n    require(amounts[amounts.length - 1] >= amountOutMin, 'DystRouter: INSUFFICIENT_OUTPUT_AMOUNT');\\r\\n    IERC20(routes[0].from).safeTransferFrom(\\r\\n      msg.sender, _pairFor(routes[0].from, routes[0].to, routes[0].stable), amounts[0]\\r\\n    );\\r\\n    _swap(amounts, routes, to);\\r\\n  }\\r\\n\\r\\n  function swapExactTokensForTokens(\\r\\n    uint amountIn,\\r\\n    uint amountOutMin,\\r\\n    Route[] calldata routes,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external ensure(deadline) returns (uint[] memory amounts) {\\r\\n    amounts = _getAmountsOut(amountIn, routes);\\r\\n    require(amounts[amounts.length - 1] >= amountOutMin, 'DystRouter: INSUFFICIENT_OUTPUT_AMOUNT');\\r\\n    IERC20(routes[0].from).safeTransferFrom(\\r\\n      msg.sender, _pairFor(routes[0].from, routes[0].to, routes[0].stable), amounts[0]\\r\\n    );\\r\\n    _swap(amounts, routes, to);\\r\\n  }\\r\\n\\r\\n  function swapExactMATICForTokens(uint amountOutMin, Route[] calldata routes, address to, uint deadline)\\r\\n  external\\r\\n  payable\\r\\n  ensure(deadline)\\r\\n  returns (uint[] memory amounts)\\r\\n  {\\r\\n    require(routes[0].from == address(wmatic), 'DystRouter: INVALID_PATH');\\r\\n    amounts = _getAmountsOut(msg.value, routes);\\r\\n    require(amounts[amounts.length - 1] >= amountOutMin, 'DystRouter: INSUFFICIENT_OUTPUT_AMOUNT');\\r\\n    wmatic.deposit{value : amounts[0]}();\\r\\n    assert(wmatic.transfer(_pairFor(routes[0].from, routes[0].to, routes[0].stable), amounts[0]));\\r\\n    _swap(amounts, routes, to);\\r\\n  }\\r\\n\\r\\n  function swapExactTokensForMATIC(uint amountIn, uint amountOutMin, Route[] calldata routes, address to, uint deadline)\\r\\n  external\\r\\n  ensure(deadline)\\r\\n  returns (uint[] memory amounts)\\r\\n  {\\r\\n    require(routes[routes.length - 1].to == address(wmatic), 'DystRouter: INVALID_PATH');\\r\\n    amounts = _getAmountsOut(amountIn, routes);\\r\\n    require(amounts[amounts.length - 1] >= amountOutMin, 'DystRouter: INSUFFICIENT_OUTPUT_AMOUNT');\\r\\n    IERC20(routes[0].from).safeTransferFrom(\\r\\n      msg.sender, _pairFor(routes[0].from, routes[0].to, routes[0].stable), amounts[0]\\r\\n    );\\r\\n    _swap(amounts, routes, address(this));\\r\\n    wmatic.withdraw(amounts[amounts.length - 1]);\\r\\n    _safeTransferMATIC(to, amounts[amounts.length - 1]);\\r\\n  }\\r\\n\\r\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n    uint amountIn,\\r\\n    uint amountOutMin,\\r\\n    Route[] calldata routes,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external ensure(deadline) {\\r\\n    IERC20(routes[0].from).safeTransferFrom(\\r\\n      msg.sender,\\r\\n      _pairFor(routes[0].from, routes[0].to, routes[0].stable),\\r\\n      amountIn\\r\\n    );\\r\\n    uint balanceBefore = IERC20(routes[routes.length - 1].to).balanceOf(to);\\r\\n    _swapSupportingFeeOnTransferTokens(routes, to);\\r\\n    require(\\r\\n      IERC20(routes[routes.length - 1].to).balanceOf(to) - balanceBefore >= amountOutMin,\\r\\n      'DystRouter: INSUFFICIENT_OUTPUT_AMOUNT'\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function swapExactMATICForTokensSupportingFeeOnTransferTokens(\\r\\n    uint amountOutMin,\\r\\n    Route[] calldata routes,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  )\\r\\n  external\\r\\n  payable\\r\\n  ensure(deadline)\\r\\n  {\\r\\n    require(routes[0].from == address(wmatic), 'DystRouter: INVALID_PATH');\\r\\n    uint amountIn = msg.value;\\r\\n    wmatic.deposit{value : amountIn}();\\r\\n    assert(wmatic.transfer(_pairFor(routes[0].from, routes[0].to, routes[0].stable), amountIn));\\r\\n    uint balanceBefore = IERC20(routes[routes.length - 1].to).balanceOf(to);\\r\\n    _swapSupportingFeeOnTransferTokens(routes, to);\\r\\n    require(\\r\\n      IERC20(routes[routes.length - 1].to).balanceOf(to) - balanceBefore >= amountOutMin,\\r\\n      'DystRouter: INSUFFICIENT_OUTPUT_AMOUNT'\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function swapExactTokensForMATICSupportingFeeOnTransferTokens(\\r\\n    uint amountIn,\\r\\n    uint amountOutMin,\\r\\n    Route[] calldata routes,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  )\\r\\n  external\\r\\n  ensure(deadline)\\r\\n  {\\r\\n    require(routes[routes.length - 1].to == address(wmatic), 'DystRouter: INVALID_PATH');\\r\\n    IERC20(routes[0].from).safeTransferFrom(\\r\\n      msg.sender, _pairFor(routes[0].from, routes[0].to, routes[0].stable), amountIn\\r\\n    );\\r\\n    _swapSupportingFeeOnTransferTokens(routes, address(this));\\r\\n    uint amountOut = IERC20(address(wmatic)).balanceOf(address(this));\\r\\n    require(amountOut >= amountOutMin, 'DystRouter: INSUFFICIENT_OUTPUT_AMOUNT');\\r\\n    wmatic.withdraw(amountOut);\\r\\n    _safeTransferMATIC(to, amountOut);\\r\\n  }\\r\\n\\r\\n  function UNSAFE_swapExactTokensForTokens(\\r\\n    uint[] memory amounts,\\r\\n    Route[] calldata routes,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external ensure(deadline) returns (uint[] memory) {\\r\\n    IERC20(routes[0].from).safeTransferFrom(msg.sender, _pairFor(routes[0].from, routes[0].to, routes[0].stable), amounts[0]);\\r\\n    _swap(amounts, routes, to);\\r\\n    return amounts;\\r\\n  }\\r\\n\\r\\n  function _safeTransferMATIC(address to, uint value) internal {\\r\\n    (bool success,) = to.call{value : value}(new bytes(0));\\r\\n    require(success, 'DystRouter: ETH_TRANSFER_FAILED');\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/lib/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nlibrary Math {\\r\\n\\r\\n  function max(uint a, uint b) internal pure returns (uint) {\\r\\n    return a >= b ? a : b;\\r\\n  }\\r\\n\\r\\n  function min(uint a, uint b) internal pure returns (uint) {\\r\\n    return a < b ? a : b;\\r\\n  }\\r\\n\\r\\n  function positiveInt128(int128 value) internal pure returns (int128) {\\r\\n    return value < 0 ? int128(0) : value;\\r\\n  }\\r\\n\\r\\n  function closeTo(uint a, uint b, uint target) internal pure returns (bool) {\\r\\n    if (a > b) {\\r\\n      if (a - b <= target) {\\r\\n        return true;\\r\\n      }\\r\\n    } else {\\r\\n      if (b - a <= target) {\\r\\n        return true;\\r\\n      }\\r\\n    }\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n  function sqrt(uint y) internal pure returns (uint z) {\\r\\n    if (y > 3) {\\r\\n      z = y;\\r\\n      uint x = y / 2 + 1;\\r\\n      while (x < z) {\\r\\n        z = x;\\r\\n        x = (y / x + x) / 2;\\r\\n      }\\r\\n    } else if (y != 0) {\\r\\n      z = 1;\\r\\n    }\\r\\n  }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/lib/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"../interface/IERC20.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n  using Address for address;\\r\\n\\r\\n  function safeTransfer(\\r\\n    IERC20 token,\\r\\n    address to,\\r\\n    uint value\\r\\n  ) internal {\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n  }\\r\\n\\r\\n  function safeTransferFrom(\\r\\n    IERC20 token,\\r\\n    address from,\\r\\n    address to,\\r\\n    uint value\\r\\n  ) internal {\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n  }\\r\\n\\r\\n  function safeIncreaseAllowance(\\r\\n    IERC20 token,\\r\\n    address spender,\\r\\n    uint value\\r\\n  ) internal {\\r\\n    uint newAllowance = token.allowance(address(this), spender) + value;\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n    // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n    if (returndata.length > 0) {\\r\\n      // Return data is optional\\r\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n    }\\r\\n  }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens in existence.\\r\\n   */\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens owned by `account`.\\r\\n   */\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remaining number of tokens that `spender` will be\\r\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n   * zero by default.\\r\\n   *\\r\\n   * This value changes when {approve} or {transferFrom} are called.\\r\\n   */\\r\\n  function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n   * that someone may use both the old and the new allowance by unfortunate\\r\\n   * transaction ordering. One possible solution to mitigate this race\\r\\n   * condition is to first reduce the spender's allowance to 0 and set the\\r\\n   * desired value afterwards:\\r\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   */\\r\\n  function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n   * allowance mechanism. `amount` is then deducted from the caller's\\r\\n   * allowance.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transferFrom(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n   * another (`to`).\\r\\n   *\\r\\n   * Note that `value` may be zero.\\r\\n   */\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n   * a call to {approve}. `value` is the new allowance.\\r\\n   */\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IWMATIC.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IWMATIC {\\r\\n  function name() external view returns (string memory);\\r\\n\\r\\n  function approve(address guy, uint256 wad) external returns (bool);\\r\\n\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  function transferFrom(\\r\\n    address src,\\r\\n    address dst,\\r\\n    uint256 wad\\r\\n  ) external returns (bool);\\r\\n\\r\\n  function withdraw(uint256 wad) external;\\r\\n\\r\\n  function decimals() external view returns (uint8);\\r\\n\\r\\n  function balanceOf(address) external view returns (uint256);\\r\\n\\r\\n  function symbol() external view returns (string memory);\\r\\n\\r\\n  function transfer(address dst, uint256 wad) external returns (bool);\\r\\n\\r\\n  function deposit() external payable;\\r\\n\\r\\n  function allowance(address, address) external view returns (uint256);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IPair {\\r\\n\\r\\n  // Structure to capture time period obervations every 30 minutes, used for local oracles\\r\\n  struct Observation {\\r\\n    uint timestamp;\\r\\n    uint reserve0Cumulative;\\r\\n    uint reserve1Cumulative;\\r\\n  }\\r\\n\\r\\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n\\r\\n  function burn(address to) external returns (uint amount0, uint amount1);\\r\\n\\r\\n  function mint(address to) external returns (uint liquidity);\\r\\n\\r\\n  function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\r\\n\\r\\n  function getAmountOut(uint, address) external view returns (uint);\\r\\n\\r\\n  function claimFees() external returns (uint, uint);\\r\\n\\r\\n  function tokens() external returns (address, address);\\r\\n\\r\\n  function token0() external returns (address);\\r\\n\\r\\n  function token1() external returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IFactory {\\r\\n  function treasury() external view returns (address);\\r\\n\\r\\n  function isPair(address pair) external view returns (bool);\\r\\n\\r\\n  function getInitializable() external view returns (address, address, bool);\\r\\n\\r\\n  function isPaused() external view returns (bool);\\r\\n\\r\\n  function pairCodeHash() external pure returns (bytes32);\\r\\n\\r\\n  function getPair(address tokenA, address token, bool stable) external view returns (address);\\r\\n\\r\\n  function createPair(address tokenA, address tokenB, bool stable) external returns (address pair);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/lib/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n  /**\\r\\n   * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n  function isContract(address account) internal view returns (bool) {\\r\\n    // This method relies on extcodesize/address.code.length, which returns 0\\r\\n    // for contracts in construction, since the code is only stored at the end\\r\\n    // of the constructor execution.\\r\\n\\r\\n    return account.code.length > 0;\\r\\n  }\\r\\n\\r\\n  function functionCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n    (bool success, bytes memory returndata) = target.call(data);\\r\\n    return verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n  function verifyCallResult(\\r\\n    bool success,\\r\\n    bytes memory returndata,\\r\\n    string memory errorMessage\\r\\n  ) internal pure returns (bytes memory) {\\r\\n    if (success) {\\r\\n      return returndata;\\r\\n    } else {\\r\\n      // Look for revert reason and bubble it up if present\\r\\n      if (returndata.length > 0) {\\r\\n        // The easiest way to bubble the revert reason is using memory via assembly\\r\\n        assembly {\\r\\n          let returndata_size := mload(returndata)\\r\\n          revert(add(32, returndata), returndata_size)\\r\\n        }\\r\\n      } else {\\r\\n        revert(errorMessage);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wmatic\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"internalType\":\"struct DystRouter01.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"UNSAFE_swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMATICMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityMATIC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMATIC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"internalType\":\"struct DystRouter01.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"name\":\"getExactAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"name\":\"pairFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"}],\"name\":\"quoteAddLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"name\":\"quoteLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"quoteRemoveLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMATICMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityMATIC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMATIC\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountFTMMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityMATICSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountFTM\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMATICMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityMATICWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMATIC\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountFTMMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityMATICWithPermitSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountFTM\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"sortTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"internalType\":\"struct DystRouter01.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactMATICForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"internalType\":\"struct DystRouter01.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactMATICForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"internalType\":\"struct DystRouter01.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForMATIC\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"internalType\":\"struct DystRouter01.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForMATICSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"internalType\":\"struct DystRouter01.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensSimple\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"internalType\":\"struct DystRouter01.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wmatic\",\"outputs\":[{\"internalType\":\"contract IWMATIC\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DystRouter01", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001d21db6cde1b18c7e47b0f7f42f4b3f68b9beec90000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}