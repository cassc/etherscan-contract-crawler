{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.14;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    function symbol() external view returns(string memory);\r\n    \r\n    function name() external view returns(string memory);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n    \r\n    /**\r\n     * @dev Returns the number of decimal places\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IYield {\r\n    function stake(address user, uint256 amount) external;\r\n    function taxlessWithdraw(address user, uint256 amount) external;\r\n    function token() external view returns (address);\r\n}\r\n\r\ninterface IStable {\r\n    function sell(uint256 tokenAmount) external returns (uint256);\r\n}\r\n\r\ncontract TaxlessWithdrawContract {\r\n\r\n    uint256 public switchTax = 20; // 2%\r\n    uint256 public constant TAX_DENOM = 1000;\r\n\r\n    // farm addresses\r\n    address public farm0;\r\n    address public farm1;\r\n\r\n    // setter address\r\n    address public setter;\r\n\r\n    // STS\r\n    address public immutable STS;\r\n    address public immutable STSP;\r\n    address public immutable Underlying;\r\n\r\n    // Switch Tax receiver\r\n    address public feeReceiver;\r\n\r\n    // router address\r\n    IUniswapV2Router02 public router;\r\n\r\n    constructor(\r\n        address farm0_, \r\n        address farm1_, \r\n        address router_, \r\n        address STS_, \r\n        address STSP_, \r\n        address Underlying_, \r\n        address feeReceiver_\r\n    ) {\r\n        farm0 = farm0_;\r\n        farm1 = farm1_;\r\n        router = IUniswapV2Router02(router_);\r\n        STS = STS_;\r\n        STSP = STSP_;\r\n        Underlying = Underlying_;\r\n        feeReceiver = feeReceiver_;\r\n        setter = msg.sender;\r\n    }\r\n\r\n    function setSetter(address setter_) external {\r\n        require(msg.sender == setter, 'Only Setter');\r\n        setter = setter_;\r\n    }\r\n\r\n    function setFarms(address farm0_, address farm1_) external {\r\n        require(msg.sender == setter, 'Only Setter');\r\n        farm0 = farm0_;\r\n        farm1 = farm1_;\r\n    }\r\n\r\n    function setSwitchTax(uint256 newTax) external {\r\n        require(msg.sender == setter, 'Only Setter');\r\n        switchTax = newTax;\r\n    }\r\n\r\n    function setRouter(address newRouter) external {\r\n        require(msg.sender == setter, 'Only Setter');\r\n        router = IUniswapV2Router02(newRouter);\r\n    }\r\n\r\n    function setFeeReceiver(address newReceiver) external {\r\n        require(msg.sender == setter, 'Only Setter');\r\n        feeReceiver = newReceiver;\r\n    }\r\n\r\n    function withdraw(address token) external {\r\n        require(msg.sender == setter, 'Only Setter');\r\n        IERC20(token).transfer(msg.sender, IERC20(token).balanceOf(address(this)));\r\n    }\r\n    \r\n    function withdrawETH() external {\r\n        require(msg.sender == setter, 'Only Setter');\r\n        (bool s,) = payable(msg.sender).call{value: address(this).balance}(\"\");\r\n        require(s);\r\n    }\r\n\r\n    function switchFarm(address src, address dst, uint256 amount, uint256 minOut, bool srcFromETH) external {\r\n        require(\r\n            ( src == farm0 || src == farm1 ) && ( dst == farm0 || dst == farm1 ),\r\n            'Invalid Src or Dest'\r\n        );\r\n\r\n        // fetch LP tokens from both yield sources\r\n        address srcToken = IYield(src).token();\r\n        address dstToken = IYield(dst).token();\r\n        \r\n        { // scope user check variables to avoid stack-too-deep error\r\n\r\n        // check LP balance of msg.sender before\r\n        uint256 userBalanceBefore = IERC20(srcToken).balanceOf(msg.sender);\r\n\r\n        // remove LPs tax free from old farm\r\n        IYield(src).taxlessWithdraw(msg.sender, amount);\r\n\r\n        // check LP balance of msg.sender before\r\n        uint256 userBalanceAfter = IERC20(srcToken).balanceOf(msg.sender);\r\n        require(\r\n            userBalanceAfter > userBalanceBefore,\r\n            'Zero Received'\r\n        );\r\n        require(\r\n            IERC20(srcToken).allowance(\r\n                msg.sender, address(this)\r\n            ) >= ( userBalanceAfter - userBalanceBefore ),\r\n            'Insufficient srcToken Allowance'\r\n        );\r\n\r\n        // transfer in the difference\r\n        IERC20(srcToken).transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            userBalanceAfter - userBalanceBefore\r\n        );\r\n\r\n        } // end scoping of local variables\r\n\r\n        // calculate amount of LP tokens\r\n        uint256 amountReceived = IERC20(srcToken).balanceOf(address(this));\r\n\r\n        // calculate switch fee\r\n        uint256 fee = ( amountReceived * switchTax ) / TAX_DENOM;\r\n\r\n        // determine amount to break, sub fee\r\n        uint256 received = amountReceived - fee;\r\n\r\n        // take switch fee\r\n        if (fee > 0) {\r\n            IERC20(srcToken).transfer(feeReceiver, fee);\r\n        }\r\n\r\n        // break LP received\r\n        IERC20(srcToken).approve(address(router), received);\r\n        if (srcFromETH) {\r\n\r\n            // remove liquidity with ETH\r\n            router.removeLiquidityETHSupportingFeeOnTransferTokens(\r\n                STS, received, 1, 1, address(this), block.timestamp + 100\r\n            );\r\n\r\n            // ETH -> STSP\r\n            (bool s,) = payable(STSP).call{value: address(this).balance}(\"\");\r\n            require(s);\r\n\r\n            // Pair STS and STSP into LP\r\n            uint stsBal = IERC20(STS).balanceOf(address(this));\r\n            uint stspBal = IERC20(STSP).balanceOf(address(this));\r\n            IERC20(STS).approve(address(router), stsBal);\r\n            IERC20(STSP).approve(address(router), stspBal);\r\n\r\n            // add to liquidity\r\n            router.addLiquidity(STS, STSP, stsBal, stspBal, 1, 1, address(this), block.timestamp + 100);\r\n\r\n            // stake new liquidity into farm\r\n            uint newBal = IERC20(dstToken).balanceOf(address(this));\r\n            require(\r\n                newBal >= minOut,\r\n                'Min Out Not Preserved'\r\n            );\r\n            IERC20(dstToken).approve(dst, newBal);\r\n            IYield(dst).stake(msg.sender, newBal);\r\n\r\n            // refund dust\r\n            stsBal = IERC20(STS).balanceOf(address(this));\r\n            stspBal = IERC20(STSP).balanceOf(address(this));\r\n            if (stsBal > 0) {\r\n                IERC20(STS).transfer(msg.sender, stsBal);\r\n            }\r\n            if (stspBal > 0) {\r\n                IERC20(STSP).transfer(msg.sender, stspBal);\r\n            }\r\n\r\n        } else {\r\n\r\n            // remove liquidity between two tokens\r\n            router.removeLiquidity(\r\n                STS, STSP, received, 1, 1, address(this), block.timestamp + 100\r\n            );\r\n\r\n            // STSP -> USDC\r\n            IStable(STSP).sell(IERC20(STSP).balanceOf(address(this)));\r\n\r\n            // USDC -> ETH\r\n            IERC20(Underlying).approve(address(router), 10**50);\r\n            address[] memory path = new address[](2);\r\n            path[0] = Underlying;\r\n            path[1] = router.WETH();\r\n            router.swapExactTokensForETH(\r\n                IERC20(Underlying).balanceOf(address(this)), \r\n                1, path, address(this), block.timestamp + 100\r\n            );\r\n\r\n            // remove path for memory\r\n            delete path;\r\n\r\n            // pair STS and ETH into liquidity\r\n            uint stsBal = IERC20(STS).balanceOf(address(this));\r\n            IERC20(STS).approve(address(router), stsBal);\r\n            router.addLiquidityETH{value: address(this).balance}(\r\n                STS, stsBal, 1, 1, address(this), block.timestamp + 100\r\n            );\r\n\r\n            // stake new LP tokens\r\n            uint newBal = IERC20(dstToken).balanceOf(address(this));\r\n            require(\r\n                newBal >= minOut,\r\n                'Min Out Not Preserved'\r\n            );\r\n            IERC20(dstToken).approve(dst, newBal);\r\n            IYield(dst).stake(msg.sender, newBal);\r\n\r\n            // refund dust\r\n            stsBal = IERC20(STS).balanceOf(address(this));\r\n            if (stsBal > 0) {\r\n                IERC20(STS).transfer(msg.sender, stsBal);\r\n            }\r\n            if (address(this).balance > 0) {\r\n                (bool s,) = payable(msg.sender).call{value: address(this).balance}(\"\");\r\n                require(s);\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"farm0_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"farm1_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"STS_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"STSP_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"Underlying_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeReceiver_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"STS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STSP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TAX_DENOM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farm0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farm1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"farm0_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"farm1_\",\"type\":\"address\"}],\"name\":\"setFarms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"setter_\",\"type\":\"address\"}],\"name\":\"setSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTax\",\"type\":\"uint256\"}],\"name\":\"setSwitchTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"srcFromETH\",\"type\":\"bool\"}],\"name\":\"switchFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switchTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TaxlessWithdrawContract", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ae6324ae020436be7d652e0e41316aa7483007e4000000000000000000000000ee491003c3a3f0d6f69f9469c3ca7d157c27dfcc000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000fc3559771aa5a0666420f2365cf66139fbf4b37f000000000000000000000000e56bdaae614997ea6a64bbe22645542162ec890c0000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000aff4d9eac3f288e10d76c6f7d535331fecb38202", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://658547b9c944cec7c3af1a6c79275999bc3e7d15aa1d47660d2900b9af2920e9"}