{"SourceCode": "// File: contracts/admin/storage/character-control/DspCharacterControlStruct.sol\r\n\r\n\r\npragma solidity ^0.8.18;\r\n\r\n    enum Job { MINT, BURN }\r\n    enum CharacterType { NONE, CHARACTER, FATE_CORE }\r\n\r\n    struct CharacterInfo {\r\n        string characterName;\r\n        uint256 tokenId;\r\n        bool isValid;\r\n    }\r\n\r\n    struct JobInfo {\r\n        address userAddress;\r\n        uint256 characterId;\r\n        string characterName;\r\n        uint256 tokenId;\r\n        string reason;\r\n        CharacterType characterType;\r\n        Job job;\r\n    }\r\n\r\n    struct BurnInfo {\r\n        address userAddress;\r\n        uint256 characterId;\r\n        uint256 tokenId;\r\n        uint256 reason;\r\n        CharacterType characterType;\r\n    }\r\n\r\n    struct CharacterDecentralizationRoot {\r\n        uint256 round;\r\n        bytes32 root;\r\n    }\r\n\r\n    struct CharacterDecentralizationInfo {\r\n        address userAddress;\r\n        uint256 characterId;\r\n        string characterName;\r\n        uint256 reason;\r\n        CharacterType characterType;\r\n        uint256 round;\r\n        bytes32[] userProof;\r\n    }\r\n// File: contracts/luxon/utils/erc721/IERC721LUXON.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\ninterface IERC721LUXON {\r\n    function mintByCharacterName(address mintUser, uint256 quantity, string[] memory gachaIds) external;\r\n    function nextTokenId() external view returns (uint256);\r\n    function burn(uint256 tokenId) external;\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function totalSupply() external view returns (uint256);\r\n    function mint(address mintUser, uint256 quantity) external;\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n}\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/admin/admin/management/LuxOnService.sol\r\n\r\n\r\npragma solidity ^0.8.15;\r\n\r\n\r\ncontract LuxOnService is Ownable {\r\n    mapping(address => bool) isInspection;\r\n\r\n    event Inspection(address contractAddress, uint256 timestamp, bool live);\r\n\r\n    function isLive(address contractAddress) public view returns (bool) {\r\n        return !isInspection[contractAddress];\r\n    }\r\n\r\n    function setInspection(address[] memory contractAddresses, bool _isInspection) external onlyOwner {\r\n        for (uint256 i = 0; i < contractAddresses.length; i++) {\r\n            isInspection[contractAddresses[i]] = _isInspection;\r\n            emit Inspection(contractAddresses[i], block.timestamp, _isInspection);\r\n        }\r\n    }\r\n}\r\n// File: contracts/luxon/utils/management/LuxOnLive.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\n\r\ncontract LuxOnLive is Ownable {\r\n    address private luxOnService;\r\n\r\n    event SetLuxOnService(address indexed luxOnService);\r\n\r\n    constructor(\r\n        address _luxOnService\r\n    ) {\r\n        luxOnService = _luxOnService;\r\n    }\r\n\r\n    function getLuxOnService() public view returns (address) {\r\n        return luxOnService;\r\n    }\r\n\r\n    function setLuxOnService(address _luxOnService) external onlyOwner {\r\n        luxOnService = _luxOnService;\r\n        emit SetLuxOnService(_luxOnService);\r\n    }\r\n\r\n    modifier isLive() {\r\n        require(LuxOnService(luxOnService).isLive(address(this)), \"LuxOnLive: not live\");\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/admin/admin/management/LuxOnAuthority.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\ncontract LuxOnAuthority is Ownable {\r\n    mapping (address => bool) blacklist;\r\n\r\n    event Blacklist(address userAddress, uint256 timestamp, bool live);\r\n\r\n    function isBlacklist(address user) public view returns (bool){\r\n        return blacklist[user];\r\n    }\r\n\r\n    function setBlacklist(address[] memory userAddresses, bool _isBlacklist) external onlyOwner {\r\n        for (uint256 i = 0; i < userAddresses.length; i++) {\r\n            blacklist[userAddresses[i]] = _isBlacklist;\r\n            emit Blacklist(userAddresses[i], block.timestamp, _isBlacklist);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File: contracts/luxon/utils/management/LuxOnBlacklist.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\n\r\n\r\ncontract LuxOnBlacklist is Ownable {\r\n    address private luxOnAuthority;\r\n\r\n    event SetLuxOnAuthority (address indexed luxOnAuthority);\r\n\r\n    constructor(\r\n        address _luxOnAuthority\r\n    ){\r\n        luxOnAuthority = _luxOnAuthority;\r\n    }\r\n\r\n    function getLuxOnAuthority() external view returns(address) {\r\n        return luxOnAuthority;\r\n    }\r\n\r\n    function setLuxOnAuthority(address _luxOnAuthority) external onlyOwner{\r\n        luxOnAuthority = _luxOnAuthority;\r\n    }\r\n\r\n    function getIsInBlacklist(address _userAddress) external view returns(bool) {\r\n        return LuxOnAuthority(luxOnAuthority).isBlacklist(_userAddress);\r\n    }\r\n\r\n    modifier isBlacklist(address _userAddress) {\r\n        // blacklist\uc5d0 \ub4f1\ub85d\ub41c \uc720\uc800 => true / \ub4f1\ub85d\ub418\uc9c0 \uc54a\uc740 \uc720\uc800 => false ---> !\ub97c \ubd99\uc5ec\uc11c \ubc18\ub300 \uac12\uc73c\ub85c \uc5d0\ub7ec \ubc1c\uc0dd (true\uba74 \uc5d0\ub7ec \ubc1c\uc0dd)\r\n        require(LuxOnAuthority(luxOnAuthority).isBlacklist(_userAddress) == false, \"LuxOnBlacklist: This user is on the blacklist\");\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n\r\n// File: contracts/admin/admin/management/DataAddress.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\ncontract DspDataAddress is Ownable {\r\n\r\n    event SetDataAddress(string indexed name, address indexed dataAddress, bool indexed isValid);\r\n\r\n    struct DataAddressInfo {\r\n        string name;\r\n        address dataAddress;\r\n        bool isValid;\r\n    }\r\n\r\n    mapping(string => DataAddressInfo) private dataAddresses;\r\n\r\n    function getDataAddress(string memory _name) public view returns (address) {\r\n        require(dataAddresses[_name].isValid, \"this data address is not valid\");\r\n        return dataAddresses[_name].dataAddress;\r\n    }\r\n\r\n    function setDataAddress(DataAddressInfo memory _dataAddressInfo) external onlyOwner {\r\n        dataAddresses[_dataAddressInfo.name] = _dataAddressInfo;\r\n        emit SetDataAddress(_dataAddressInfo.name, _dataAddressInfo.dataAddress, _dataAddressInfo.isValid);\r\n    }\r\n\r\n    function setDataAddresses(DataAddressInfo[] memory _dataAddressInfos) external onlyOwner {\r\n        for (uint256 i = 0; i < _dataAddressInfos.length; i++) {\r\n            dataAddresses[_dataAddressInfos[i].name] = _dataAddressInfos[i];\r\n            emit SetDataAddress(_dataAddressInfos[i].name, _dataAddressInfos[i].dataAddress, _dataAddressInfos[i].isValid);\r\n        }\r\n    }\r\n}\r\n// File: contracts/luxon/utils/management/LuxOnData.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\n\r\ncontract LuxOnData is Ownable {\r\n    address private luxonData;\r\n    event SetLuxonData(address indexed luxonData);\r\n\r\n    constructor(\r\n        address _luxonData\r\n    ) {\r\n        luxonData = _luxonData;\r\n    }\r\n\r\n    function getLuxOnData() public view returns (address) {\r\n        return luxonData;\r\n    }\r\n\r\n    function setLuxOnData(address _luxonData) external onlyOwner {\r\n        luxonData = _luxonData;\r\n        emit SetLuxonData(_luxonData);\r\n    }\r\n\r\n    function getDataAddress(string memory _name) public view returns (address) {\r\n        return DspDataAddress(luxonData).getDataAddress(_name);\r\n    }\r\n}\r\n\r\n// File: contracts/admin/admin/management/LuxOnAdmin.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\ncontract LuxOnAdmin is Ownable {\r\n\r\n    mapping(string => mapping(address => bool)) private _superOperators;\r\n\r\n    event SuperOperator(string operator, address superOperator, bool enabled);\r\n\r\n    function setSuperOperator(string memory operator, address[] memory _operatorAddress, bool enabled) external onlyOwner {\r\n        for (uint256 i = 0; i < _operatorAddress.length; i++) {\r\n            _superOperators[operator][_operatorAddress[i]] = enabled;\r\n            emit SuperOperator(operator, _operatorAddress[i], enabled);\r\n        }\r\n    }\r\n\r\n    function isSuperOperator(string memory operator, address who) public view returns (bool) {\r\n        return _superOperators[operator][who];\r\n    }\r\n}\r\n// File: contracts/luxon/utils/management/LuxOnSuperOperators.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\n\r\ncontract LuxOnSuperOperators is Ownable {\r\n\r\n    event SetLuxOnAdmin(address indexed luxOnAdminAddress);\r\n    event SetOperator(string indexed operator);\r\n\r\n    address private luxOnAdminAddress;\r\n    string private operator;\r\n\r\n    constructor(\r\n        string memory _operator,\r\n        address _luxOnAdminAddress\r\n    ) {\r\n        operator = _operator;\r\n        luxOnAdminAddress = _luxOnAdminAddress;\r\n    }\r\n\r\n    modifier onlySuperOperator() {\r\n        require(LuxOnAdmin(luxOnAdminAddress).isSuperOperator(operator, msg.sender), \"LuxOnSuperOperators: not super operator\");\r\n        _;\r\n    }\r\n\r\n    function getLuxOnAdmin() public view returns (address) {\r\n        return luxOnAdminAddress;\r\n    }\r\n\r\n    function getOperator() public view returns (string memory) {\r\n        return operator;\r\n    }\r\n\r\n    function setLuxOnAdmin(address _luxOnAdminAddress) external onlyOwner {\r\n        luxOnAdminAddress = _luxOnAdminAddress;\r\n        emit SetLuxOnAdmin(_luxOnAdminAddress);\r\n    }\r\n\r\n    function setOperator(string memory _operator) external onlyOwner {\r\n        operator = _operator;\r\n        emit SetOperator(_operator);\r\n    }\r\n\r\n    function isSuperOperator(address spender) public view returns (bool) {\r\n        return LuxOnAdmin(luxOnAdminAddress).isSuperOperator(operator, spender);\r\n    }\r\n}\r\n\r\n// File: contracts/admin/storage/character-control/DspCharacterControlStorage.sol\r\n\r\n\r\npragma solidity ^0.8.18;\r\n\r\n\r\n\r\ncontract DspCharacterControlStorage is LuxOnSuperOperators {\r\n    event SetMintListBefore(address indexed userAddress, uint256 indexed characterId, string indexed characterName);\r\n    event SetMintListAfter(address indexed userAddress, uint256 indexed characterId, uint256 indexed tokenId, string characterName);\r\n    event SetRoot(uint256 indexed round, bytes32 indexed root);\r\n    event MintCharacter(address indexed userAddress, uint256 indexed characterId, uint256 indexed tokenId, string characterName, uint256 round);\r\n    event SetBurn(address indexed userAddress, uint256 indexed characterId, uint256 indexed tokenId);\r\n\r\n    constructor(\r\n        string memory operator,\r\n        address luxOnAdmin\r\n    ) LuxOnSuperOperators(operator, luxOnAdmin) {}\r\n\r\n    // user address => character id => true / false\r\n    mapping(address => mapping(uint256 => CharacterInfo)) public mintList;\r\n\r\n    mapping(uint256 => bytes32) public rootList;\r\n\r\n    function getRoot(uint256 _round) public view returns (bytes32) {\r\n        return rootList[_round];\r\n    }\r\n\r\n    function setRoot(CharacterDecentralizationRoot memory _characterDecentralizationRoot) external onlySuperOperator {\r\n        rootList[_characterDecentralizationRoot.round] = _characterDecentralizationRoot.root;\r\n        emit SetRoot(_characterDecentralizationRoot.round, _characterDecentralizationRoot.root);\r\n    }\r\n\r\n    function setRootList(CharacterDecentralizationRoot[] memory _characterDecentralizationRoots) external onlySuperOperator {\r\n        for (uint256 i = 0; i < _characterDecentralizationRoots.length; i++) {\r\n            rootList[_characterDecentralizationRoots[i].round] = _characterDecentralizationRoots[i].root;\r\n            emit SetRoot(_characterDecentralizationRoots[i].round, _characterDecentralizationRoots[i].root);\r\n        }\r\n    }\r\n\r\n    function getMintList(address userAddress, uint256 characterId) public view returns (string memory, uint256, bool) {\r\n        return (mintList[userAddress][characterId].characterName, mintList[userAddress][characterId].tokenId, mintList[userAddress][characterId].isValid);\r\n    }\r\n\r\n    function setBurn(address userAddress, uint256 characterId, uint256 tokenId) external onlySuperOperator {\r\n        mintList[userAddress][characterId].tokenId = tokenId;\r\n        mintList[userAddress][characterId].isValid = true;\r\n        emit SetBurn(userAddress, characterId, tokenId);\r\n    }\r\n\r\n    function setMintListBefore(address userAddress, uint256 characterId, string memory characterName) external onlySuperOperator {\r\n        mintList[userAddress][characterId] = CharacterInfo(characterName, 0, true);\r\n        emit SetMintListBefore(userAddress, characterId, characterName);\r\n    }\r\n\r\n    function deleteMintList(address userAddress, uint256 characterId) external onlySuperOperator {\r\n        delete mintList[userAddress][characterId];\r\n    }\r\n\r\n    function setMintListAfter(address userAddress, uint256 characterId, uint256 tokenId) external onlySuperOperator {\r\n        mintList[userAddress][characterId].tokenId = tokenId;\r\n        mintList[userAddress][characterId].isValid = false;\r\n        emit SetMintListAfter(userAddress, characterId, tokenId, mintList[userAddress][characterId].characterName);\r\n    }\r\n\r\n    function mintCharacter(uint256 _tokenId, CharacterDecentralizationInfo memory _characterDecentralizationInfo) external onlySuperOperator {\r\n        require(verifyClaim(_characterDecentralizationInfo), \"invalid proof\");\r\n        require(!mintList[_characterDecentralizationInfo.userAddress][_characterDecentralizationInfo.characterId].isValid, \"round : already claimed\");\r\n\r\n        mintList[_characterDecentralizationInfo.userAddress][_characterDecentralizationInfo.characterId].characterName = _characterDecentralizationInfo.characterName;\r\n        mintList[_characterDecentralizationInfo.userAddress][_characterDecentralizationInfo.characterId].tokenId = _tokenId;\r\n        mintList[_characterDecentralizationInfo.userAddress][_characterDecentralizationInfo.characterId].isValid = true;\r\n\r\n        emit MintCharacter(_characterDecentralizationInfo.userAddress, _characterDecentralizationInfo.characterId, _tokenId, _characterDecentralizationInfo.characterName, _characterDecentralizationInfo.round);\r\n    }\r\n\r\n    function verifyClaim(\r\n        CharacterDecentralizationInfo memory _characterDecentralizationInfo\r\n    ) private view returns (bool) {\r\n        bytes32 leaf = keccak256(abi.encodePacked(_characterDecentralizationInfo.userAddress, _characterDecentralizationInfo.characterId, _characterDecentralizationInfo.characterName, _characterDecentralizationInfo.reason, _characterDecentralizationInfo.characterType));\r\n        return verifyProof(_characterDecentralizationInfo.userProof, rootList[_characterDecentralizationInfo.round], leaf);\r\n    }\r\n\r\n\r\n    function verifyProof(\r\n        bytes32[] memory proof,\r\n        bytes32 root,\r\n        bytes32 leaf\r\n    ) internal pure returns (bool) {\r\n        return processProof(proof, leaf) == root;\r\n    }\r\n\r\n    function processProof(bytes32[] memory proof, bytes32 leaf)\r\n    internal\r\n    pure\r\n    returns (bytes32)\r\n    {\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            bytes32 proofElement = proof[i];\r\n            if (computedHash <= proofElement) {\r\n                computedHash = keccak256(\r\n                    abi.encodePacked(computedHash, proofElement)\r\n                );\r\n            } else {\r\n                computedHash = keccak256(\r\n                    abi.encodePacked(proofElement, computedHash)\r\n                );\r\n            }\r\n        }\r\n        return computedHash;\r\n    }\r\n}\r\n\r\n// File: contracts/admin/storage/character-control/Erc721RealOwnerData.sol\r\n\r\n\r\npragma solidity ^0.8.18;\r\n\r\n\r\ncontract Erc721RealOwnerData is LuxOnSuperOperators {\r\n    event SetRealOwner(address indexed tokenAddress, uint256 indexed tokenId, address indexed realOwner);\r\n\r\n    constructor(\r\n        string memory operator,\r\n        address luxOnAdmin\r\n    ) LuxOnSuperOperators(operator, luxOnAdmin) {}\r\n\r\n    // token address => token id => onwer\r\n    mapping(address => mapping(uint256 => address)) private realOwner;\r\n\r\n    function getRealOwner(address _tokenAddress, uint256 _tokenId) public view returns (address) {\r\n        return realOwner[_tokenAddress][_tokenId];\r\n    }\r\n\r\n    function setRealOwner(address _tokenAddress, uint256 _tokenId, address _realOwner) external onlySuperOperator {\r\n        realOwner[_tokenAddress][_tokenId] = _realOwner;\r\n        emit SetRealOwner(_tokenAddress, _tokenId, _realOwner);\r\n    }\r\n\r\n    function setRealOwners(address _tokenAddress, uint256[] memory _tokenIds, address _realOwner) external onlySuperOperator {\r\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\r\n            realOwner[_tokenAddress][_tokenIds[i]] = _realOwner;\r\n            emit SetRealOwner(_tokenAddress, _tokenIds[i], _realOwner);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/luxon/myPage/centralization/DspCharacterCentralizationCenterV2.sol\r\n\r\n\r\npragma solidity ^0.8.18;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract DspCharacterCentralizationCenter is LuxOnSuperOperators, LuxOnLive, LuxOnData, LuxOnBlacklist {\r\n\r\n    event Centralization(address indexed owner, address indexed tokenAddress, uint256 indexed tokenId, address previousOwner, address msgSender);\r\n    event Decentralization(address indexed owner, address indexed tokenAddress, uint256 indexed tokenId, address previousOwner, address msgSender);\r\n    event MintDspCharacter(address indexed userAddress, address indexed tokenAddress, uint256 indexed tokenId, uint256 characterId);\r\n\r\n    string public luxOnCenter = \"LuxOnCenter\";\r\n    string public erc721RealOwnerData = \"Erc721RealOwnerData\";\r\n    string public dspCharacter = \"LCT\";\r\n    string public dspCharacterControlStorage = \"DspCharacterControlStorage\";\r\n\r\n    constructor(\r\n        address dataAddress,\r\n        string memory operator,\r\n        address luxOnAdmin,\r\n        address luxOnService,\r\n        address luxonAuthority\r\n    ) LuxOnData(dataAddress) LuxOnSuperOperators(operator, luxOnAdmin) LuxOnLive(luxOnService) LuxOnBlacklist(luxonAuthority){}\r\n\r\n    function deposit(address from, uint256 _tokenId) external isLive isBlacklist(msg.sender){\r\n        address dspCharacterAddress = getDataAddress(dspCharacter);\r\n        require(\r\n            (from == msg.sender && msg.sender == IERC721LUXON(dspCharacterAddress).ownerOf(_tokenId)) ||\r\n            isSuperOperator(msg.sender),\r\n            \"Not owner this token id\"\r\n        );\r\n        IERC721LUXON(dspCharacterAddress).transferFrom(from, getDataAddress(luxOnCenter), _tokenId);\r\n        address previousOwner = Erc721RealOwnerData(getDataAddress(erc721RealOwnerData)).getRealOwner(dspCharacterAddress, _tokenId);\r\n        Erc721RealOwnerData(getDataAddress(erc721RealOwnerData)).setRealOwner(dspCharacterAddress, _tokenId, from);\r\n        emit Centralization(from, dspCharacterAddress, _tokenId, previousOwner, msg.sender);\r\n    }\r\n\r\n    function depositMany(address from, uint256[] memory _tokenIds) external isLive isBlacklist(msg.sender){\r\n        address dspCharacterAddress = getDataAddress(dspCharacter);\r\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\r\n            require(\r\n                (from == msg.sender && msg.sender == IERC721LUXON(dspCharacterAddress).ownerOf(_tokenIds[i])) ||\r\n                isSuperOperator(msg.sender),\r\n                \"Not owner this token id\"\r\n            );\r\n            IERC721LUXON(dspCharacterAddress).transferFrom(from, getDataAddress(luxOnCenter), _tokenIds[i]);\r\n            address previousOwner = Erc721RealOwnerData(getDataAddress(erc721RealOwnerData)).getRealOwner(dspCharacterAddress, _tokenIds[i]);\r\n            Erc721RealOwnerData(getDataAddress(erc721RealOwnerData)).setRealOwner(dspCharacterAddress, _tokenIds[i], from);\r\n            emit Centralization(from, dspCharacterAddress, _tokenIds[i], previousOwner, msg.sender);\r\n        }\r\n    }\r\n\r\n    function withdraw(address to, uint256 _tokenId) external isLive isBlacklist(msg.sender){\r\n        address dspCharacterAddress = getDataAddress(dspCharacter);\r\n        address previousOwner = Erc721RealOwnerData(getDataAddress(erc721RealOwnerData)).getRealOwner(dspCharacterAddress, _tokenId);\r\n        require(\r\n            (to == msg.sender && msg.sender == previousOwner) ||\r\n            isSuperOperator(msg.sender),\r\n            \"Not real owner this token id\"\r\n        );\r\n\r\n        IERC721LUXON(dspCharacterAddress).transferFrom(getDataAddress(luxOnCenter), to, _tokenId);\r\n        Erc721RealOwnerData(getDataAddress(erc721RealOwnerData)).setRealOwner(dspCharacterAddress, _tokenId, address(0));\r\n        emit Decentralization(to, dspCharacterAddress, _tokenId, previousOwner, msg.sender);\r\n    }\r\n\r\n    function withdrawMany(address to, uint256[] memory _tokenIds) public isLive isBlacklist(msg.sender){\r\n        address dspCharacterAddress = getDataAddress(dspCharacter);\r\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\r\n            address previousOwner = Erc721RealOwnerData(getDataAddress(erc721RealOwnerData)).getRealOwner(dspCharacterAddress, _tokenIds[i]);\r\n            require(\r\n                (to == msg.sender && msg.sender == previousOwner) ||\r\n                isSuperOperator(msg.sender),\r\n                \"Not real owner this token id\"\r\n            );\r\n\r\n            IERC721LUXON(dspCharacterAddress).transferFrom(getDataAddress(luxOnCenter), to, _tokenIds[i]);\r\n            Erc721RealOwnerData(getDataAddress(erc721RealOwnerData)).setRealOwner(dspCharacterAddress, _tokenIds[i], address(0));\r\n            emit Decentralization(to, dspCharacterAddress, _tokenIds[i], previousOwner, msg.sender);\r\n        }\r\n    }\r\n\r\n    function withdrawAndMintDspCharacters(address to, uint256[] memory _tokenIds, CharacterDecentralizationInfo[] memory _characterDecentralizationInfo) external isLive isBlacklist(msg.sender){\r\n        if (0 != _tokenIds.length) {\r\n            withdrawMany(to, _tokenIds);\r\n        }\r\n        if (0 != _characterDecentralizationInfo.length) {\r\n            mintDspCharacters(to, _characterDecentralizationInfo);\r\n        }\r\n    }\r\n\r\n    function mintDspCharacter(address to, CharacterDecentralizationInfo memory _characterDecentralizationInfo) external isLive isBlacklist(msg.sender){\r\n        require(to == msg.sender || isSuperOperator(msg.sender), \"Not real owner this token id\");\r\n        address dspCharacterAddress = getDataAddress(dspCharacter);\r\n        string[] memory characterNames = new string[](1);\r\n        characterNames[0] = _characterDecentralizationInfo.characterName;\r\n        IERC721LUXON(dspCharacterAddress).mintByCharacterName(msg.sender, 1, characterNames);\r\n        uint256 lastTokenId = IERC721LUXON(dspCharacterAddress).nextTokenId() - 1;\r\n\r\n        DspCharacterControlStorage(getDataAddress(dspCharacterControlStorage)).mintCharacter(lastTokenId, _characterDecentralizationInfo);\r\n\r\n        emit MintDspCharacter(msg.sender, dspCharacterAddress, lastTokenId, _characterDecentralizationInfo.characterId);\r\n    }\r\n\r\n    function mintDspCharacters(address to, CharacterDecentralizationInfo[] memory _characterDecentralizationInfo) public isLive isBlacklist(msg.sender){\r\n        require(to == msg.sender || isSuperOperator(msg.sender), \"Not real owner this token id\");\r\n        address dspCharacterAddress = getDataAddress(dspCharacter);\r\n\r\n        string[] memory characterNames = new string[](_characterDecentralizationInfo.length);\r\n        uint256 count = _characterDecentralizationInfo.length;\r\n\r\n        for (uint256 i = 0; i < count; i++) {\r\n            characterNames[i] = _characterDecentralizationInfo[i].characterName;\r\n        }\r\n        IERC721LUXON(dspCharacterAddress).mintByCharacterName(msg.sender, count, characterNames);\r\n        uint256 lastTokenId = IERC721LUXON(dspCharacterAddress).nextTokenId() - 1;\r\n\r\n        for (uint256 i = 0; i < count; i++) {\r\n            uint256 tokenId = lastTokenId - count + i + 1;\r\n            DspCharacterControlStorage(getDataAddress(dspCharacterControlStorage)).mintCharacter(tokenId, _characterDecentralizationInfo[i]);\r\n            emit MintDspCharacter(msg.sender, dspCharacterAddress, tokenId, _characterDecentralizationInfo[i].characterId);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dataAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"operator\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"luxOnAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"luxOnService\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"luxonAuthority\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"Centralization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"Decentralization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"}],\"name\":\"MintDspCharacter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"luxOnAdminAddress\",\"type\":\"address\"}],\"name\":\"SetLuxOnAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"luxOnAuthority\",\"type\":\"address\"}],\"name\":\"SetLuxOnAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"luxOnService\",\"type\":\"address\"}],\"name\":\"SetLuxOnService\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"luxonData\",\"type\":\"address\"}],\"name\":\"SetLuxonData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"operator\",\"type\":\"string\"}],\"name\":\"SetOperator\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"depositMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dspCharacter\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dspCharacterControlStorage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721RealOwnerData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getDataAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getIsInBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLuxOnAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLuxOnAuthority\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLuxOnData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLuxOnService\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperator\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"isSuperOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"luxOnCenter\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"characterName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reason\",\"type\":\"uint256\"},{\"internalType\":\"enum CharacterType\",\"name\":\"characterType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"userProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct CharacterDecentralizationInfo\",\"name\":\"_characterDecentralizationInfo\",\"type\":\"tuple\"}],\"name\":\"mintDspCharacter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"characterName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reason\",\"type\":\"uint256\"},{\"internalType\":\"enum CharacterType\",\"name\":\"characterType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"userProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct CharacterDecentralizationInfo[]\",\"name\":\"_characterDecentralizationInfo\",\"type\":\"tuple[]\"}],\"name\":\"mintDspCharacters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_luxOnAdminAddress\",\"type\":\"address\"}],\"name\":\"setLuxOnAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_luxOnAuthority\",\"type\":\"address\"}],\"name\":\"setLuxOnAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_luxonData\",\"type\":\"address\"}],\"name\":\"setLuxOnData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_luxOnService\",\"type\":\"address\"}],\"name\":\"setLuxOnService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_operator\",\"type\":\"string\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"characterId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"characterName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reason\",\"type\":\"uint256\"},{\"internalType\":\"enum CharacterType\",\"name\":\"characterType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"userProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct CharacterDecentralizationInfo[]\",\"name\":\"_characterDecentralizationInfo\",\"type\":\"tuple[]\"}],\"name\":\"withdrawAndMintDspCharacters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"withdrawMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DspCharacterCentralizationCenter", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000047e02786b3aefe45f4db89d296b5b9c5d7ed6c5300000000000000000000000000000000000000000000000000000000000000a00000000000000000000000007f9c018cb5dc14d4f1880792727c7726e179d79d0000000000000000000000008186780f64aa472c16874464d21485f60826c60d00000000000000000000000017cb56b0825a80402a52a67672cb0cfd50b0d483000000000000000000000000000000000000000000000000000000000000003144455350455241444f5f4348415241435445525f43454e5452414c495a4154494f4e5f53555045525f4f50455241544f52000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c6f60d9eb64a3a781b5bc97cb9b9697d17718906fc5f0bf65dd1449dbed2636b"}