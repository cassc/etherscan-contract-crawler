{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/PhiDaily.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n//                 ____    ____\\n//                /\\\\___\\\\  /\\\\___\\\\\\n//       ________/ /   /_ \\\\/___/\\n//      /\\\\_______\\\\/   /__\\\\___\\\\\\n//     / /       /       /   /\\n//    / /   /   /   /   /   /\\n//   / /   /___/___/___/___/\\n//  / /   /\\n//  \\\\/___/\\n\\npragma solidity 0.8.19;\\n\\nimport { ReentrancyGuard } from \\\"@openzeppelin/security/ReentrancyGuard.sol\\\";\\nimport { Pausable } from \\\"@openzeppelin/security/Pausable.sol\\\";\\nimport { Context } from \\\"@openzeppelin/utils/Context.sol\\\";\\nimport { ERC2771Context } from \\\"@gelatonetwork/relay-context/contracts/vendor/ERC2771Context.sol\\\";\\n\\nimport { IMaterialObject } from \\\"./interfaces/IMaterialObject.sol\\\";\\nimport { IEmissionLogic } from \\\"./interfaces/IEmissionLogic.sol\\\";\\nimport { MultiOwner } from \\\"./utils/MultiOwner.sol\\\";\\nimport { CouponArray } from \\\"./utils/Array.sol\\\";\\nimport { Coupon } from \\\"./types/Coupon.sol\\\";\\n\\n/// @title Users claim MaterialObjects\\n/// @dev This contract handles the claims of MaterialObjects by users.\\n/// The contract utilizes ECDSA for secure, non-repudiable claims.\\n/// It also includes an emission logic contract to determine the ID of the token to be emitted.\\n/// The emission logic can be set by the contract owner.\\n/// This contract has been upgraded to include OpenZeppelin's access control for role-based permissions.\\ncontract PhiDaily is ERC2771Context, MultiOwner, ReentrancyGuard, Pausable {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   CONFIG                                   */\\n    /* -------------------------------------------------------------------------- */\\n    using CouponArray for Coupon[];\\n\\n    // The address that signs the claims (admin).\\n    address public adminSigner;\\n    // The MaterialObject contract address.\\n    address public materialObject;\\n    // The EmissionLogic contract address.\\n    address public emissionLogic;\\n    // The address used for Gelato Relay.\\n    address public gelatoRelay;\\n\\n    /// @notice Status:the coupon is used by msg sender\\n    uint256 private constant _CLAIMED = 1;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   STORAGE                                  */\\n    /* -------------------------------------------------------------------------- */\\n    // Mapping to track how many claims a sender has made.\\n    mapping(address => uint256) public claimedCount;\\n    // Mapping to track how many of each token a sender has claimed.\\n    mapping(address => mapping(uint256 => uint256)) public claimedEachCount;\\n    // Mapping to track the claim status of a sender for a specific event and logic ID.\\n    mapping(address => mapping(uint256 => mapping(uint256 => uint256))) public dailyClaimedStatus;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   EVENTS                                   */\\n    /* -------------------------------------------------------------------------- */\\n    // Event emitted when the admin signer is set.\\n    event SetAdminSigner(address oldAdminSigner, address indexed newAdminSigner);\\n    // Event emitted when the MaterialObject contract is set.\\n    event SetMaterialObject(address oldMaterialContract, address indexed newMaterialContract);\\n    // Event emitted when the EmissionLogic contract is set.\\n    event SetEmissionLogic(address oldEmissionLogic, address indexed newEmissionLogic);\\n    // Event emitted when the GelatoRelay address is set.\\n    event SetGelatoRelay(address oldGelatoRelay, address indexed newGelatoRelay);\\n    // Event emitted when a user claims a material object.\\n    event LogClaimMaterialObject(address indexed sender, uint256 eventId, uint256 logicId, uint256 tokenId);\\n    // Event emitted when a claim is made by a relayer\\n    event ClaimedByRelayer(uint32 eventId, uint16 logicId, address relayer);\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   ERRORS                                   */\\n    /* -------------------------------------------------------------------------- */\\n    // Error thrown if the user has already claimed an object with a given event ID and logic ID.\\n    error AlreadyClaimed(address sender, uint256 eventId, uint256 logicId);\\n    // Error thrown if the function call is not made by an admin.\\n    error NotAdminCall(address sender);\\n    // Error thrown if the ECDSA signature is invalid.\\n    error InvalidECDSASignature(address sender, address signer, bytes32 digest, Coupon coupon);\\n    // Error thrown if the coupon is invalid.\\n    error InvalidCoupon();\\n    // Error thrown if the lengths of the input arrays do not match.\\n    error ArrayLengthMismatch();\\n    // Error thrown if an address is invalid.\\n    error InvalidAddress(string reason);\\n    // Error thrown if the function call is not made by an GelatoRelay.\\n    error OnlyGelatoRelay();\\n    // Error thrown if the signature is expired.\\n    error SignatureExpired();\\n    // Error thrown if not smart contract\\n    error MustBeAContract();\\n    // Error thrown if the given coupons for batch claim are duplicated\\n    error DuplicatedCoupons();\\n    /* -------------------------------------------------------------------------- */\\n    /*                               INITIALIZATION                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    constructor(\\n        address _adminSigner,\\n        address _materialObject,\\n        address _emissionLogic,\\n        address trustedForwarder,\\n        address _gelatoRelay\\n    )\\n        ERC2771Context(trustedForwarder)\\n    {\\n        if (_adminSigner == address(0)) revert InvalidAddress(\\\"adminSigner can't be 0\\\");\\n        if (_materialObject == address(0)) revert InvalidAddress(\\\"materialObject address can't be 0\\\");\\n        if (_emissionLogic == address(0)) revert InvalidAddress(\\\"emissionLogic address can't be 0\\\");\\n        if (_gelatoRelay == address(0)) revert InvalidAddress(\\\"gelatoRelay address can't be 0\\\");\\n\\n        adminSigner = _adminSigner;\\n        materialObject = _materialObject;\\n        emissionLogic = _emissionLogic;\\n        gelatoRelay = _gelatoRelay;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                  MODIFIERS                                 */\\n    /* -------------------------------------------------------------------------- */\\n    // Modifier to ensure the user has not already claimed.\\n    modifier onlyIfNotClaimed(uint256 eventId, uint256 logicId) {\\n        if (dailyClaimedStatus[_msgSender()][eventId][logicId] == _CLAIMED) {\\n            revert AlreadyClaimed({ sender: _msgSender(), eventId: eventId, logicId: logicId });\\n        }\\n        _;\\n    }\\n\\n    // Modifier to ensure none of the IDs in the arrays have already been claimed.\\n    modifier onlyIfNotClaimedMultiple(uint32[] memory eventIds, uint16[] memory logicIds) {\\n        uint256 length = eventIds.length;\\n        if (length != logicIds.length) {\\n            revert ArrayLengthMismatch();\\n        }\\n        for (uint256 i; i < length;) {\\n            if (dailyClaimedStatus[_msgSender()][eventIds[i]][logicIds[i]] == _CLAIMED) {\\n                revert AlreadyClaimed({ sender: _msgSender(), eventId: eventIds[i], logicId: logicIds[i] });\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        _;\\n    }\\n\\n    modifier nonDuplicatedCoupons(Coupon[] memory coupons) {\\n        for (uint256 i; i < coupons.length; i++) {\\n            if (coupons.hasDuplicate()) {\\n                revert DuplicatedCoupons();\\n            }\\n        }\\n        _;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   Coupon                                   */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @dev Set a new admin signer\\n    function setAdminSigner(address _adminSigner) external onlyOwner {\\n        if (_adminSigner == address(0)) {\\n            revert InvalidAddress({ reason: \\\"cant set address(0)\\\" });\\n        }\\n\\n        address oldAdminSigner = adminSigner;\\n        adminSigner = _adminSigner;\\n        emit SetAdminSigner(oldAdminSigner, adminSigner);\\n    }\\n\\n    /// @dev Check that the coupon sent was signed by the admin signer\\n    function _isVerifiedCoupon(bytes32 digest, Coupon memory coupon) internal view returns (bool) {\\n        address signer = coupon.recover(digest);\\n        if (signer == address(0)) {\\n            revert InvalidECDSASignature({ sender: _msgSender(), signer: signer, digest: digest, coupon: coupon });\\n        }\\n        return signer == adminSigner;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   MUTATORS                                 */\\n    /* -------------------------------------------------------------------------- */\\n    function _checkSize(address addr) private view returns (uint256 extSize) {\\n        assembly {\\n            extSize := extcodesize(addr) // returns 0 if EOA, >0 if smart contract\\n        }\\n    }\\n\\n    /// @dev Set a new EmissionLogic contract\\n    function setEmissionLogic(address _emissionLogic) external onlyOwner {\\n        if (_emissionLogic == address(0)) {\\n            revert InvalidAddress({ reason: \\\"cant set address(0)\\\" });\\n        }\\n        if (_checkSize(_emissionLogic) == 0) revert MustBeAContract();\\n\\n        address oldEmissionLogic = emissionLogic;\\n        emissionLogic = _emissionLogic;\\n        emit SetEmissionLogic(oldEmissionLogic, emissionLogic);\\n    }\\n\\n    /// @dev Set a new MaterialObject contract\\n    function setMaterialObject(address _materialObject) external onlyOwner {\\n        if (_materialObject == address(0)) {\\n            revert InvalidAddress({ reason: \\\"cant set address(0)\\\" });\\n        }\\n        if (_checkSize(_materialObject) == 0) revert MustBeAContract();\\n\\n        address oldMaterialObject = materialObject;\\n        materialObject = _materialObject;\\n        emit SetMaterialObject(oldMaterialObject, materialObject);\\n    }\\n\\n    /// @dev Set a new GelatoRelay contract\\n    function setGelatoRelay(address _gelatoRelay) external onlyOwner {\\n        if (_gelatoRelay == address(0)) {\\n            revert InvalidAddress({ reason: \\\"cant set address(0)\\\" });\\n        }\\n        if (_checkSize(_gelatoRelay) == 0) revert MustBeAContract();\\n        address oldGelatoRelay = gelatoRelay;\\n        gelatoRelay = _gelatoRelay;\\n        emit SetGelatoRelay(oldGelatoRelay, gelatoRelay);\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function pause() external onlyOwner whenNotPaused {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function unpause() external onlyOwner whenPaused {\\n        _unpause();\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 History                                    */\\n    /* -------------------------------------------------------------------------- */\\n\\n    // Internal function to update claim status\\n    function _updateClaimStatus(address user, uint256 eventId, uint256 tokenId, uint256 logicId) internal {\\n        ++claimedCount[user];\\n        ++claimedEachCount[user][tokenId];\\n        dailyClaimedStatus[user][eventId][logicId] = _CLAIMED;\\n    }\\n\\n    // Function to check the total number of claims made by a user.\\n    function checkClaimCount(address sender) external view returns (uint256) {\\n        return claimedCount[sender];\\n    }\\n\\n    // Function to check the total number of claims made by a user for a specific token.\\n    function checkClaimEachCount(address sender, uint256 tokenId) external view returns (uint256) {\\n        return claimedEachCount[sender][tokenId];\\n    }\\n\\n    // Function to check the claim status for a user for a specific event and logic ID.\\n    function checkClaimStatus(address sender, uint256 eventId, uint256 logicId) external view returns (uint256) {\\n        return dailyClaimedStatus[sender][eventId][logicId];\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   Claim                                    */\\n    /* -------------------------------------------------------------------------- */\\n    // Function to process claim for material object\\n    function _processClaim(uint32 eventId, uint16 logicId, Coupon memory coupon, uint256 expiresIn) private {\\n        // Check that the coupon sent was signed by the admin signer\\n        bytes32 digest = keccak256(abi.encode(eventId, logicId, _msgSender(), expiresIn));\\n        if (!_isVerifiedCoupon(digest, coupon)) {\\n            revert InvalidCoupon();\\n        }\\n\\n        uint256 tokenId = IEmissionLogic(emissionLogic).determineTokenByLogic(logicId);\\n\\n        _updateClaimStatus(_msgSender(), eventId, tokenId, logicId);\\n        emit LogClaimMaterialObject(_msgSender(), eventId, logicId, tokenId);\\n        IMaterialObject(materialObject).getObject(_msgSender(), tokenId, 1);\\n    }\\n\\n    // Function to claim a material object.\\n    function claimMaterialObject(\\n        uint32 eventId,\\n        uint16 logicId,\\n        Coupon memory coupon,\\n        uint256 expiresIn\\n    )\\n        external\\n        nonReentrant\\n        whenNotPaused\\n        onlyIfNotClaimed(eventId, logicId)\\n    {\\n        if (expiresIn <= block.timestamp) {\\n            revert SignatureExpired();\\n        }\\n        _processClaim(eventId, logicId, coupon, expiresIn);\\n    }\\n\\n    // Function to claim multiple material objects.\\n    function batchClaimMaterialObject(\\n        uint32[] memory eventIds,\\n        uint16[] memory logicIds,\\n        Coupon[] memory coupons,\\n        uint256 expiresIn\\n    )\\n        external\\n        nonReentrant\\n        whenNotPaused\\n        nonDuplicatedCoupons(coupons)\\n        onlyIfNotClaimedMultiple(eventIds, logicIds)\\n    {\\n        if (expiresIn <= block.timestamp) {\\n            revert SignatureExpired();\\n        }\\n\\n        uint256 length = eventIds.length;\\n        // Ensure input arrays have the same length\\n        if (length != logicIds.length || logicIds.length != coupons.length) {\\n            revert ArrayLengthMismatch();\\n        }\\n        for (uint256 i; i < length;) {\\n            _processClaim(eventIds[i], logicIds[i], coupons[i], expiresIn);\\n            {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                               RelayClaim                                   */\\n    /* -------------------------------------------------------------------------- */\\n    modifier onlyGelatoRelay() {\\n        if (!_isGelatoRelay(msg.sender)) revert OnlyGelatoRelay();\\n        _;\\n    }\\n\\n    function _isGelatoRelay(address _forwarder) internal view returns (bool) {\\n        return _forwarder == gelatoRelay;\\n    }\\n\\n    // Function to claim a material object by relayer.\\n    function claimMaterialObjectByRelayer(\\n        uint32 eventId,\\n        uint16 logicId,\\n        Coupon memory coupon,\\n        uint256 expiresIn\\n    )\\n        external\\n        nonReentrant\\n        whenNotPaused\\n        onlyGelatoRelay\\n        onlyIfNotClaimed(eventId, logicId)\\n    {\\n        if (expiresIn <= block.timestamp) {\\n            revert SignatureExpired();\\n        }\\n\\n        _processClaim(eventId, logicId, coupon, expiresIn);\\n        // Emit an event indicating that this function was called by a relayer\\n        emit ClaimedByRelayer(eventId, logicId, msg.sender);\\n    }\\n\\n    // Function to claim multiple material objects by relayer.\\n    function batchClaimMaterialObjectByRelayer(\\n        uint32[] memory eventIds,\\n        uint16[] memory logicIds,\\n        Coupon[] memory coupons,\\n        uint256 expiresIn\\n    )\\n        external\\n        nonReentrant\\n        whenNotPaused\\n        onlyGelatoRelay\\n        nonDuplicatedCoupons(coupons)\\n        onlyIfNotClaimedMultiple(eventIds, logicIds)\\n    {\\n        if (expiresIn <= block.timestamp) {\\n            revert SignatureExpired();\\n        }\\n\\n        uint256 length = eventIds.length;\\n        // Ensure input arrays have the same length\\n        if (length != logicIds.length || logicIds.length != coupons.length) {\\n            revert ArrayLengthMismatch();\\n        }\\n        for (uint256 i; i < length;) {\\n            _processClaim(eventIds[i], logicIds[i], coupons[i], expiresIn);\\n            emit ClaimedByRelayer(eventIds[i], logicIds[i], msg.sender);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                  Context                                   */\\n    /* -------------------------------------------------------------------------- */\\n    // Both Pausable that inherits from Context and ERC2771Context have the same function _msgSender() and _msgData().\\n    // We need to override both functions to avoid the name conflict.\\n    function _msgSender() internal view override(ERC2771Context, Context) returns (address) {\\n        if (_isGelatoRelay(msg.sender)) {\\n            return ERC2771Context._msgSender();\\n        } else {\\n            return Context._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view override(ERC2771Context, Context) returns (bytes calldata) {\\n        if (_isGelatoRelay(msg.sender)) {\\n            return ERC2771Context._msgData();\\n        } else {\\n            return Context._msgData();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@gelatonetwork/relay-context/contracts/vendor/ERC2771Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\n// based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\nabstract contract ERC2771Context {\\n    address private immutable _trustedForwarder;\\n\\n    constructor(address trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder)\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IMaterialObject.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n//                 ____    ____\\n//                /\\\\___\\\\  /\\\\___\\\\\\n//       ________/ /   /_ \\\\/___/\\n//      /\\\\_______\\\\/   /__\\\\___\\\\\\n//     / /       /       /   /\\n//    / /   /   /   /   /   /\\n//   / /   /___/___/___/___/\\n//  / /   /\\n//  \\\\/___/\\n\\npragma solidity 0.8.19;\\n\\ninterface IMaterialObject {\\n    function getObject(address to, uint256 tokenId, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IEmissionLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n//                 ____    ____\\n//                /\\\\___\\\\  /\\\\___\\\\\\n//       ________/ /   /_ \\\\/___/\\n//      /\\\\_______\\\\/   /__\\\\___\\\\\\n//     / /       /       /   /\\n//    / /   /   /   /   /   /\\n//   / /   /___/___/___/___/\\n//  / /   /\\n//  \\\\/___/\\n\\npragma solidity 0.8.19;\\n\\ninterface IEmissionLogic {\\n    function determineTokenByLogic(uint16 logic) external view returns (uint256 tokenId);\\n}\\n\"\r\n    },\r\n    \"src/utils/MultiOwner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n//                 ____    ____\\n//                /\\\\___\\\\  /\\\\___\\\\\\n//       ________/ /   /_ \\\\/___/\\n//      /\\\\_______\\\\/   /__\\\\___\\\\\\n//     / /       /       /   /\\n//    / /   /   /   /   /   /\\n//   / /   /___/___/___/___/\\n//  / /   /\\n//  \\\\/___/\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Contracts to manage multiple owners.\\n */\\nabstract contract MultiOwner {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   STORAGE                                  */\\n    /* -------------------------------------------------------------------------- */\\n    mapping(address => bool) private _owners;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   EVENTS                                   */\\n    /* -------------------------------------------------------------------------- */\\n    event OwnershipGranted(address indexed operator, address indexed target);\\n    event OwnershipRemoved(address indexed operator, address indexed target);\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   ERRORS                                   */\\n    /* -------------------------------------------------------------------------- */\\n    error InvalidOwner();\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                               INITIALIZATION                               */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @dev Initializes the contract setting and set the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _owners[msg.sender] = true;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                  MODIFIERS                                 */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @dev Throws an error if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        if (!_owners[msg.sender]) revert InvalidOwner();\\n        _;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   PUBLIC                                   */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function ownerCheck(address targetAddress) external view virtual returns (bool) {\\n        return _owners[targetAddress];\\n    }\\n\\n    /**\\n     * @dev Sets the address of the owner.\\n     */\\n    function setOwner(address newOwner) external virtual onlyOwner {\\n        _owners[newOwner] = true;\\n        emit OwnershipGranted(msg.sender, newOwner);\\n    }\\n\\n    /**\\n     * @dev Removes the address from the owner list.\\n     */\\n    function removeOwner(address oldOwner) external virtual onlyOwner {\\n        _owners[oldOwner] = false;\\n        emit OwnershipRemoved(msg.sender, oldOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/utils/Array.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport { Coupon } from \\\"../types/Coupon.sol\\\";\\n\\nlibrary CouponArray {\\n    /**\\n     * @dev Returns true if the array contains duplicated coupons.\\n     */\\n    function hasDuplicate(Coupon[] memory coupons) internal pure returns (bool) {\\n        if (coupons.length <= 1) return false;\\n\\n        uint256 length = coupons.length;\\n        for (uint256 i; i < length;) {\\n            for (uint256 j = i + 1; j < length;) {\\n                if (_equals(coupons[i], coupons[j])) {\\n                    return true;\\n                }\\n                unchecked {\\n                    ++j;\\n                }\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function _equals(Coupon memory a, Coupon memory b) private pure returns (bool) {\\n        return a.v == b.v && a.r == b.r && a.s == b.s;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/types/Coupon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport { ECDSA } from \\\"@openzeppelin/utils/cryptography/ECDSA.sol\\\";\\n\\n/// @notice the coupon sent was signed by the admin signer\\nstruct Coupon {\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n}\\n\\nusing CouponLib for Coupon global;\\n\\nlibrary CouponLib {\\n    function recover(Coupon memory coupon, bytes32 digest) internal pure returns (address) {\\n        return ECDSA.recover(digest, abi.encodePacked(coupon.r, coupon.s, coupon.v));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@gelatonetwork/=node_modules/@gelatonetwork/\",\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@prb/test/=lib/prb-test/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"prb-test/=lib/prb-test/src/\",\r\n      \"src/=src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"appendCBOR\": false\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminSigner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_materialObject\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_emissionLogic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gelatoRelay\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"logicId\",\"type\":\"uint256\"}],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DuplicatedCoupons\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCoupon\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"digest\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct Coupon\",\"name\":\"coupon\",\"type\":\"tuple\"}],\"name\":\"InvalidECDSASignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustBeAContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"NotAdminCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyGelatoRelay\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureExpired\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eventId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"logicId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"ClaimedByRelayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"logicId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"LogClaimMaterialObject\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"OwnershipGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"OwnershipRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdminSigner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdminSigner\",\"type\":\"address\"}],\"name\":\"SetAdminSigner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldEmissionLogic\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newEmissionLogic\",\"type\":\"address\"}],\"name\":\"SetEmissionLogic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldGelatoRelay\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGelatoRelay\",\"type\":\"address\"}],\"name\":\"SetGelatoRelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldMaterialContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMaterialContract\",\"type\":\"address\"}],\"name\":\"SetMaterialObject\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"adminSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"eventIds\",\"type\":\"uint32[]\"},{\"internalType\":\"uint16[]\",\"name\":\"logicIds\",\"type\":\"uint16[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct Coupon[]\",\"name\":\"coupons\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"expiresIn\",\"type\":\"uint256\"}],\"name\":\"batchClaimMaterialObject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"eventIds\",\"type\":\"uint32[]\"},{\"internalType\":\"uint16[]\",\"name\":\"logicIds\",\"type\":\"uint16[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct Coupon[]\",\"name\":\"coupons\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"expiresIn\",\"type\":\"uint256\"}],\"name\":\"batchClaimMaterialObjectByRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"checkClaimCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"checkClaimEachCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"logicId\",\"type\":\"uint256\"}],\"name\":\"checkClaimStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eventId\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"logicId\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct Coupon\",\"name\":\"coupon\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"expiresIn\",\"type\":\"uint256\"}],\"name\":\"claimMaterialObject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eventId\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"logicId\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct Coupon\",\"name\":\"coupon\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"expiresIn\",\"type\":\"uint256\"}],\"name\":\"claimMaterialObjectByRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimedEachCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dailyClaimedStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emissionLogic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gelatoRelay\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"materialObject\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"}],\"name\":\"ownerCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminSigner\",\"type\":\"address\"}],\"name\":\"setAdminSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_emissionLogic\",\"type\":\"address\"}],\"name\":\"setEmissionLogic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gelatoRelay\",\"type\":\"address\"}],\"name\":\"setGelatoRelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_materialObject\",\"type\":\"address\"}],\"name\":\"setMaterialObject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PhiDaily", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "000000000000000000000000aa9bd7c35be4915dc1f18afad6e631f0afcf246100000000000000000000000027996b7f37a5455e41ae6292fd00d21df1fb82f100000000000000000000000097895ed981392b9d93e679e72bad1ea263d5de6f000000000000000000000000d8253782c45a12053594b9deb72d8e8ab2fca54c000000000000000000000000d8253782c45a12053594b9deb72d8e8ab2fca54c", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}