{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BProtocol/GaugeHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\n\\ninterface IHToken is IERC20 {\\n    function mint() external payable returns (uint); //CEther\\n    function mint(uint mintAmount) external returns (uint);\\n    function redeem(uint redeemTokens) external returns (uint);\\n    function underlying() external returns (address);\\n}\\n\\ninterface IBAMMv2 is IERC20 {\\n    function deposit(uint amount) external;\\n    function withdraw(uint numShares) external;\\n    function getCollateralValue() external view returns(uint);\\n    function collateralCount() external view returns(uint);\\n    function collaterals(uint index) external view returns(address);\\n    function fetchPrice(address collat) external view returns(uint);\\n}\\n\\ninterface IGauge is IERC20 {\\n    function deposit(uint _value, address to) external;\\n    function withdraw(uint _value) external;\\n}\\n\\ninterface IMinter {\\n    function mint(address gauge_addr) external;\\n    function mint_many(address[] memory gauge_addr) external;\\n    function mint_for(address gauge_addr, address _for) external;\\n    function toggle_approve_mint(address minting_user) external;\\n}\\n\\ncontract GaugeHelper is Ownable {\\n    using SafeERC20 for IERC20;    \\n\\n    /// @notice Deposit the underlying token to the Hundred market, \\n    ///         then deposit the hToken to the BAMM pool, \\n    ///         then deposit the BAMM token to the gauge,\\n    ///         finally sending the gauge token to the destination address.\\n    /// @param underlying Underlying token to deposit, e.g. USDC.\\n    /// @param hToken Hundred market address, e.g. hUSDC\\n    /// @param bamm Bamm pool address, e.g. bhUSDC\\n    /// @param gauge Gauge address, e.g. bhUSDC-gauge\\n    /// @param underlyingAmount Underlying token shares to deposit.\\n    /// @param to The recipient of the gauge tokens.\\n    function depositUnderlyingToBammGauge(\\n        address underlying,\\n        address hToken,\\n        address bamm,\\n        address gauge, \\n        uint underlyingAmount, \\n        address to\\n    ) external {\\n        IERC20 Underlying = IERC20(underlying);\\n        Underlying.safeTransferFrom(msg.sender, address(this), underlyingAmount);\\n        Underlying.approve(hToken, underlyingAmount);\\n        IHToken HToken = IHToken(hToken);\\n        require(HToken.mint(underlyingAmount) == 0, \\\"\\\"); //0 is success\\n        uint hTokenBalance = HToken.balanceOf(address(this));\\n        HToken.approve(bamm, hTokenBalance);\\n        IBAMMv2 Bamm = IBAMMv2(bamm);\\n        Bamm.deposit(hTokenBalance);\\n        uint shares = Bamm.balanceOf(address(this));\\n        Bamm.approve(gauge, shares);\\n        IGauge Gauge = IGauge(gauge);\\n        Gauge.deposit(shares, to);\\n    }\\n\\n    /// @notice Deposit the underlying token to the Hundred market, \\n    ///         then deposit the hToken to the corresponding gauge, \\n    ///         finally sending the gauge token to the destination address.\\n    /// @param underlying Underlying token to deposit, e.g. USDC.\\n    /// @param hToken Hundred market address, e.g. hUSDC\\n    /// @param gauge Gauge address, e.g. bhUSDC-gauge\\n    /// @param underlyingAmount Underlying token shares to deposit.\\n    /// @param to The recipient of the gauge tokens.\\n    function depositUnderlyingToGauge(\\n        address underlying,\\n        address hToken,\\n        address gauge, \\n        uint underlyingAmount, \\n        address to\\n    ) external {\\n        IERC20 Underlying = IERC20(underlying);\\n        Underlying.safeTransferFrom(msg.sender, address(this), underlyingAmount);\\n        Underlying.approve(hToken, underlyingAmount);\\n        IHToken HToken = IHToken(hToken);\\n        require(HToken.mint(underlyingAmount) == 0, \\\"\\\"); //0 is success\\n        uint hTokenBalance = HToken.balanceOf(address(this));\\n        HToken.approve(gauge, hTokenBalance);\\n        IGauge Gauge = IGauge(gauge);\\n        Gauge.deposit(hTokenBalance, to);\\n    }\\n\\n    /// @notice Deposit the underlying token to the Hundred market, \\n    ///         then deposit the hToken to the corresponding gauge, \\n    ///         finally sending the gauge token to the destination address.\\n    /// @param hToken Hundred market address, e.g. hUSDC\\n    /// @param gauge Gauge address, e.g. bhUSDC-gauge\\n    /// @param to The recipient of the gauge tokens.\\n    function depositEtherToGauge(\\n        address hToken,\\n        address gauge, \\n        address to\\n    ) external payable {\\n        IHToken HToken = IHToken(hToken);\\n        require(HToken.mint{value: msg.value}() == 0, \\\"\\\"); //0 is success\\n        uint hTokenBalance = HToken.balanceOf(address(this));\\n        HToken.approve(gauge, hTokenBalance);\\n        IGauge Gauge = IGauge(gauge);\\n        Gauge.deposit(hTokenBalance, to);\\n    }\\n\\n    /// @notice Attempts to redeem an hToken to underlying and transfer the\\n    ///         underlying to the user. If the redeem fails, transfer the\\n    ///         hToken instead.\\n    function _tryRedeemAndTransfer(\\n        address hToken,\\n        address payable to,\\n        bool isCEther\\n    ) internal {\\n        IHToken HToken = IHToken(hToken);\\n        uint hTokenBalance = HToken.balanceOf(address(this));\\n        if (hTokenBalance == 0) return;\\n        uint result = HToken.redeem(hTokenBalance);\\n        if (result == 0) {\\n            if (isCEther) {\\n                to.transfer(address(this).balance);\\n            }\\n            else {\\n                IERC20 Underlying = IERC20(HToken.underlying());\\n                Underlying.safeTransfer(to, Underlying.balanceOf(address(this)));\\n            }\\n        }\\n        else { //Failed to redeem, send hTokens to user\\n            IERC20(HToken).safeTransfer(to, hTokenBalance);\\n        }\\n    }\\n\\n    /// @notice Claims HND rewards for the msg.sender, transfers gauge tokens\\n    ///         from the sender to this contract and then withdraws the BAMM\\n    ///         lp tokens from the gauge, withdraws the hTokens from the BAMM\\n    ///         (both the BAMM's underlying token and any other liquidated hTokens),\\n    ///         then redeems the hTokens into underlying and transfers all to the\\n    ///         destination address. If there is not enough liquidity to redeem\\n    ///         any of the hTokens, transfers the hToken itself instead.\\n    /// @param minter Gauge's minter address, where HND rewards can be claimed\\n    /// @param gauge Gauge address, e.g. bhUSDC-gauge\\n    /// @param bamm Bamm pool address, e.g. bhUSDC\\n    /// @param hToken Hundred market address, e.g. hUSDC\\n    /// @param gaugeAmount Gauge tokens to withdraw.\\n    /// @param to The recipient of the underlying and/or hTokens.\\n    function withdrawFromBammGaugeToUnderlying(\\n        address minter,\\n        address gauge,\\n        address bamm,\\n        address hToken,\\n        uint gaugeAmount,\\n        address payable to,\\n        address hETH\\n    ) external {\\n        IMinter(minter).mint_for(gauge, msg.sender); //Requires toggle_approve_mint\\n        IGauge Gauge = IGauge(gauge);\\n        IERC20(Gauge).safeTransferFrom(msg.sender, address(this), gaugeAmount);\\n        Gauge.withdraw(gaugeAmount);\\n        IBAMMv2 Bamm = IBAMMv2(bamm);\\n        Bamm.withdraw(Bamm.balanceOf(address(this)));\\n        _tryRedeemAndTransfer(hToken, to, hToken == hETH);\\n        uint collateralCount = Bamm.collateralCount();\\n        for (uint i = 0; i < collateralCount; i++) {\\n            address collateral = Bamm.collaterals(i);\\n            _tryRedeemAndTransfer(collateral, to, collateral == hETH);\\n        }\\n    }\\n\\n    /// @notice Claims HND rewards for the msg.sender, transfers gauge tokens\\n    ///         from the sender to this contract and then withdraws the \\n    ///         hToken from the gauge, redeems the hTokens to underlying and\\n    ///         transfers to the destination address. If there is not enough \\n    ///         liquidity to redeem the hToken, transfers the hToken itself instead.\\n    /// @param minter Gauge's minter address, where HND rewards can be claimed\\n    /// @param gauge Gauge address, e.g. bhUSDC-gauge\\n    /// @param hToken Hundred market address, e.g. hUSDC\\n    /// @param gaugeAmount Gauge tokens to withdraw.\\n    /// @param to The recipient of the underlying and/or hTokens.\\n    function withdrawFromGaugeToUnderlying(\\n        address minter,\\n        address gauge,\\n        address hToken,\\n        uint gaugeAmount,\\n        address payable to,\\n        bool isCEther\\n    ) external {\\n        IMinter(minter).mint_for(gauge, msg.sender); //Requires toggle_approve_mint\\n        IGauge Gauge = IGauge(gauge);\\n        IERC20(Gauge).safeTransferFrom(msg.sender, address(this), gaugeAmount);\\n        Gauge.withdraw(gaugeAmount);\\n        _tryRedeemAndTransfer(hToken, to, isCEther);\\n    }\\n\\n    /// @notice Claims HND rewards for the msg.sender, transfers gauge tokens\\n    ///         from the sender to this contract and then withdraws the \\n    ///         hToken from the source gauge, and deposits it to the \\n    ///         destination gauge, on behalf of the `to` address.\\n    /// @param minter Gauge's minter address, where HND rewards can be claimed\\n    /// @param gaugeFrom Source gauge address, e.g. bhUSDC-gauge (old)\\n    /// @param gaugeTo Target gauge address, e.g. bhUSDC-gauge (new)\\n    /// @param hToken Hundred market address, e.g. hUSDC\\n    /// @param gaugeAmount Gauge tokens to migrate.\\n    /// @param to The recipient of the destination gaugeToken.\\n    function migrateGauge(\\n        address minter,\\n        address gaugeFrom,\\n        address hToken,\\n        address gaugeTo,\\n        uint gaugeAmount,\\n        address to\\n    ) external {\\n        IMinter(minter).mint_for(gaugeFrom, msg.sender); //Requires toggle_approve_mint\\n        IGauge GaugeFrom = IGauge(gaugeFrom);\\n        IERC20(GaugeFrom).safeTransferFrom(msg.sender, address(this), gaugeAmount);\\n        GaugeFrom.withdraw(gaugeAmount);\\n        IERC20 HToken = IERC20(hToken);\\n        uint hTokenBalance = HToken.balanceOf(address(this));\\n        HToken.approve(gaugeTo, hTokenBalance);\\n        IGauge GaugeTo = IGauge(gaugeTo);\\n        GaugeTo.deposit(hTokenBalance, to);\\n    }\\n\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n\\n    function rescueErc20(address token) external {\\n        IERC20(token).safeTransfer(owner(), IERC20(token).balanceOf(address(this)));\\n    }\\n\\n    function rescueETH() external {\\n        payable(owner()).transfer(address(this).balance);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BProtocol/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.3.2 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\"\r\n    },\r\n    \"contracts/BProtocol/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint);\\n    function decimals() external view returns (uint8);\\n    function balanceOf(address account) external view returns (uint);\\n    function transfer(address recipient, uint shares) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function approve(address spender, uint shares) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint shares) external returns (bool);\\n    function permit(address target, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function transferWithPermit(address target, address to, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\nlibrary Address {\\n    function isContract(address account) internal view returns (bool) {\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != 0x0 && codehash != accountHash);\\n    }\\n}\\n\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint value) internal {\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"depositEtherToGauge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bamm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"depositUnderlyingToBammGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"depositUnderlyingToGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gaugeFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gaugeTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gaugeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"migrateGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"rescueErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bamm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gaugeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hETH\",\"type\":\"address\"}],\"name\":\"withdrawFromBammGaugeToUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gaugeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isCEther\",\"type\":\"bool\"}],\"name\":\"withdrawFromGaugeToUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GaugeHelper", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}