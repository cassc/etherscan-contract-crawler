{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MaterialVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract MaterialVault is Ownable, AccessControl {\\n\\n    bytes32 public constant VAULT_ADMIN = keccak256(\\\"VAULT_ADMIN\\\");\\n\\n    bool public _pausedMaterialVault;\\n    uint256 public numberOfMaterials = 3;\\n\\n    mapping (address => mapping(uint256 => uint256)) public materialAmountbyUser;\\n\\n    event SetVaultBalanceAddress(address indexed vaultAddress);\\n\\n    event IncreaseMaterialUser(address _addressUser, uint256[] materialIds, uint256[] materialAmounts);\\n    event IncreaseMaterialUserSingle(address _addressUser, uint256 materialId, uint256 materialAmount);\\n    event DecreaseMaterialUser(address _addressUser, uint256[] materialIds, uint256[] materialAmounts);\\n    event DecreaseMaterialUserSingle(address _addressUser, uint256 materialId, uint256 materialAmount);\\n    event MoveMaterialOut(address _addressUser, uint256[] materialIds, uint256[] materialAmounts);\\n    event MoveMaterialOutSingle(address _addressUser, uint256 materialId, uint256 materialAmount);\\n    event TransferMaterialUser(address _addressUserSender, address _addressUserReceiver, uint256[] materialIds, uint256[] materialAmounts);\\n    event TransferMaterialUserSingle(address _addressUserSender, address _addressUserReceiver, uint256 materialId, uint256 materialAmount);\\n    event MoveMaterialToUser(address _addressUserSender, address _addressUserReceiver, uint256[] materialIds, uint256[] materialAmounts);\\n    event MoveMaterialToUserSingle(address _addressUserSender, address _addressUserReceiver, uint256 materialId, uint256 materialAmount);\\n\\n    event MaterialVaultPaused();\\n    event MaterialVaultUnpaused();\\n\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    modifier whenMaterialVaultNotPaused() {\\n        require(!_pausedMaterialVault, \\\"[MaterialVault.whenMaterialVaultNotPaused] Not Paused\\\");\\n        _;\\n    }\\n\\n    modifier whenMaterialVaultPaused() {\\n        require(_pausedMaterialVault, \\\"[MaterialVault.whenMaterialVaultPaused] Paused\\\");\\n        _;\\n    }\\n\\n    //User\\n    function increaseMaterialUserSingle(address _addressUser, uint256 _materialId, uint256 _materialAmount) external whenMaterialVaultNotPaused onlyRole(VAULT_ADMIN){\\n        require(materialAmountbyUser[_addressUser][_materialId] + _materialAmount >= materialAmountbyUser[_addressUser][_materialId], \\\"[MaterialVault.increaseMaterialUserSingle] User has materials overflow\\\");\\n        materialAmountbyUser[_addressUser][_materialId] += _materialAmount;\\n\\n        emit IncreaseMaterialUserSingle(_addressUser, _materialId, _materialAmount);\\n    }\\n\\n    function increaseMaterialUser(address _addressUser, uint256[] memory _materialIds, uint256[] memory  _materialAmounts) external whenMaterialVaultNotPaused onlyRole(VAULT_ADMIN){\\n        uint256 arrayLength = _materialIds.length;\\n        \\n        for (uint256 i = 0; i < arrayLength; i++) {\\n            require(materialAmountbyUser[_addressUser][_materialIds[i]] + _materialAmounts[i] >= materialAmountbyUser[_addressUser][_materialIds[i]], \\\"[MaterialVault.increaseMaterialUser] User has materials overflow\\\");\\n            materialAmountbyUser[_addressUser][_materialIds[i]] += _materialAmounts[i];\\n        }\\n\\n        emit IncreaseMaterialUser(_addressUser, _materialIds, _materialAmounts);\\n    }\\n\\n    function decreaseMaterialUserSingle(address _addressUser, uint256 _materialId, uint256 _materialAmount) external whenMaterialVaultNotPaused onlyRole(VAULT_ADMIN) {\\n        require(_materialAmount <= materialAmountbyUser[_addressUser][_materialId], \\\"[MaterialVault.decreaseMaterialUserSingle] withdraw material should be less than User's material\\\");\\n        require(materialAmountbyUser[_addressUser][_materialId] - _materialAmount <= materialAmountbyUser[_addressUser][_materialId], \\\"[MaterialVault.decreaseMaterialUserSingle] User has materials underflow\\\");\\n        materialAmountbyUser[_addressUser][_materialId] -= _materialAmount;\\n\\n        emit DecreaseMaterialUserSingle(_addressUser, _materialId, _materialAmount);\\n    }\\n\\n    function decreaseMaterialUser(address _addressUser, uint256[] memory _materialIds, uint256[] memory _materialAmounts) external whenMaterialVaultNotPaused onlyRole(VAULT_ADMIN) {\\n        uint256 arrayLength = _materialIds.length;\\n        \\n        for (uint i = 0; i < arrayLength; i++) {\\n            require(_materialAmounts[i] <= materialAmountbyUser[_addressUser][_materialIds[i]], \\\"[MaterialVault.decreaseMaterialUser] withdraw material should be less than User's material\\\");\\n            require(materialAmountbyUser[_addressUser][_materialIds[i]] - _materialAmounts[i] <= materialAmountbyUser[_addressUser][_materialIds[i]], \\\"[MaterialVault.decreaseMaterialUser] User has materials underflow\\\");\\n            materialAmountbyUser[_addressUser][_materialIds[i]] -= _materialAmounts[i];\\n        }\\n\\n        emit DecreaseMaterialUser(_addressUser, _materialIds, _materialAmounts);\\n    }\\n\\n    function moveMaterialOutSingle(uint256 _materialId, uint256 _materialAmount) external whenMaterialVaultNotPaused {\\n        require(_materialAmount <= materialAmountbyUser[msg.sender][_materialId], \\\"[MaterialVault.moveMaterialOutSingle] withdraw material should be less than User's material\\\");\\n        require(materialAmountbyUser[msg.sender][_materialId] - _materialAmount <= materialAmountbyUser[msg.sender][_materialId], \\\"[MaterialVault.moveMaterialOutSingle] User has materials underflow\\\");\\n        materialAmountbyUser[msg.sender][_materialId] -= _materialAmount;\\n\\n        emit MoveMaterialOutSingle(msg.sender, _materialId, _materialAmount);\\n    }\\n\\n    function moveMaterialOut(uint256[] memory _materialIds, uint256[] memory _materialAmounts) external whenMaterialVaultNotPaused {\\n        uint256 arrayLength = _materialIds.length;\\n        \\n        for (uint i = 0; i < arrayLength; i++) {\\n            require(_materialAmounts[i] <= materialAmountbyUser[msg.sender][_materialIds[i]], \\\"[MaterialVault.moveMaterialOut] withdraw material should be less than User's material\\\");\\n            require(materialAmountbyUser[msg.sender][_materialIds[i]] - _materialAmounts[i] <= materialAmountbyUser[msg.sender][_materialIds[i]], \\\"[MaterialVault.moveMaterialOut] User has materials underflow\\\");\\n            materialAmountbyUser[msg.sender][_materialIds[i]] -= _materialAmounts[i];\\n        }\\n\\n        emit MoveMaterialOut(msg.sender, _materialIds, _materialAmounts);\\n    }\\n\\n    function transferMaterialUserSingle(address _addressUserSender, address _addressUserReceiver, uint256 _materialId, uint256 _materialAmount) external whenMaterialVaultNotPaused onlyRole(VAULT_ADMIN){\\n            require(_materialAmount <= materialAmountbyUser[_addressUserSender][_materialId], \\\"[MaterialVault.transferMaterialUserSingle] transfer material should be less than User's material\\\");\\n            require(materialAmountbyUser[_addressUserSender][_materialId] - _materialAmount <= materialAmountbyUser[_addressUserSender][_materialId], \\\"[MaterialVault.transferMaterialUserSingle] User Sender has materials underflow\\\");\\n            require(materialAmountbyUser[_addressUserReceiver][_materialId] + _materialAmount >= materialAmountbyUser[_addressUserReceiver][_materialId], \\\"[MaterialVault.transferMaterialUserSingle] User Receiver has materials overflow\\\");\\n            materialAmountbyUser[_addressUserSender][_materialId] -= _materialAmount;\\n            materialAmountbyUser[_addressUserReceiver][_materialId] += _materialAmount;\\n\\n        emit TransferMaterialUserSingle(_addressUserSender, _addressUserReceiver, _materialId, _materialAmount);\\n    }\\n    \\n    function transferMaterialUser(address _addressUserSender, address _addressUserReceiver, uint256[] memory _materialIds, uint256[] memory _materialAmounts) external whenMaterialVaultNotPaused onlyRole(VAULT_ADMIN){\\n        uint256 arrayLength = _materialIds.length;\\n        \\n        for (uint i = 0; i < arrayLength; i++) {\\n            require(_materialAmounts[i] <= materialAmountbyUser[_addressUserSender][_materialIds[i]], \\\"[MaterialVault.transferMaterialUser] transfer material should be less than User's material\\\");\\n            require(materialAmountbyUser[_addressUserSender][_materialIds[i]] - _materialAmounts[i] <= materialAmountbyUser[_addressUserSender][_materialIds[i]], \\\"[MaterialVault.transferMaterialUser] User Sender has materials underflow\\\");\\n            require(materialAmountbyUser[_addressUserReceiver][_materialIds[i]] + _materialAmounts[i] >= materialAmountbyUser[_addressUserReceiver][_materialIds[i]], \\\"[MaterialVault.transferMaterialUser] User Receiver has materials overflow\\\");\\n            materialAmountbyUser[_addressUserSender][_materialIds[i]] -= _materialAmounts[i];\\n            materialAmountbyUser[_addressUserReceiver][_materialIds[i]] += _materialAmounts[i];\\n        }\\n\\n        emit TransferMaterialUser(_addressUserSender, _addressUserReceiver, _materialIds, _materialAmounts);\\n    }\\n\\n    function moveMaterialToUserSingle(address _addressUserReceiver, uint256 _materialId, uint256 _materialAmount) external whenMaterialVaultNotPaused {\\n            require(_materialAmount <= materialAmountbyUser[msg.sender][_materialId], \\\"[MaterialVault.moveMaterialToUserSingle] transfer material should be less than User's material\\\");\\n            require(materialAmountbyUser[msg.sender][_materialId] - _materialAmount <= materialAmountbyUser[msg.sender][_materialId], \\\"[MaterialVault.moveMaterialToUserSingle] User Sender has materials underflow\\\");\\n            require(materialAmountbyUser[_addressUserReceiver][_materialId] + _materialAmount >= materialAmountbyUser[_addressUserReceiver][_materialId], \\\"[MaterialVault.moveMaterialToUserSingle] User Receiver has materials overflow\\\");\\n            materialAmountbyUser[msg.sender][_materialId] -= _materialAmount;\\n            materialAmountbyUser[_addressUserReceiver][_materialId] += _materialAmount;\\n\\n        emit MoveMaterialToUserSingle(msg.sender, _addressUserReceiver, _materialId, _materialAmount);\\n    }\\n\\n    function moveMaterialToUser(address _addressUserReceiver, uint256[] memory _materialIds, uint256[] memory _materialAmounts) external whenMaterialVaultNotPaused {\\n        uint256 arrayLength = _materialIds.length;\\n        \\n        for (uint i = 0; i < arrayLength; i++) {\\n            require(_materialAmounts[i] <= materialAmountbyUser[msg.sender][_materialIds[i]], \\\"[MaterialVault.moveMaterialToUser] transfer material should be less than User's material\\\");\\n            require(materialAmountbyUser[msg.sender][_materialIds[i]] - _materialAmounts[i] <= materialAmountbyUser[msg.sender][_materialIds[i]], \\\"[MaterialVault.moveMaterialToUser] User Sender has materials underflow\\\");\\n            require(materialAmountbyUser[_addressUserReceiver][_materialIds[i]] + _materialAmounts[i] >= materialAmountbyUser[_addressUserReceiver][_materialIds[i]], \\\"[MaterialVault.moveMaterialToUser] User Receiver has materials overflow\\\");\\n            materialAmountbyUser[msg.sender][_materialIds[i]] -= _materialAmounts[i];\\n            materialAmountbyUser[_addressUserReceiver][_materialIds[i]] += _materialAmounts[i];\\n        }\\n\\n        emit MoveMaterialToUser(msg.sender, _addressUserReceiver, _materialIds, _materialAmounts);\\n    }\\n\\n    function getMaterialAmountbyUser(address _addressUser, uint256 _materialId) external view returns (uint256){\\n        return materialAmountbyUser[_addressUser][_materialId];\\n    }\\n\\n    function getAllMaterialAmountbyUser(address _addressUser) external view returns (uint256[] memory){\\n        uint256[] memory materialNumbers = new uint256[](numberOfMaterials + 1);\\n        for(uint i = 1; i <= numberOfMaterials; i++) {\\n            materialNumbers[i] = materialAmountbyUser[_addressUser][i];\\n        }\\n        \\n        return materialNumbers;\\n    }\\n\\n    function multiGrantRole(bytes32 _role,address [] memory _workerAddress) external onlyOwner{\\n        uint256 _length = _workerAddress.length;\\n           for (uint256 i = 0; i < _length; i++){\\n                grantRole(_role, _workerAddress[i]);\\n           }\\n    }\\n\\n    function setNumberOfMaterials(uint256 _newNumber) external onlyOwner{\\n        numberOfMaterials = _newNumber;\\n    }\\n\\n    function pauseMaterialVault() external onlyOwner whenMaterialVaultNotPaused {\\n        _pausedMaterialVault = true;\\n        emit MaterialVaultPaused();\\n    }\\n\\n    function unpauseMaterialVault() external onlyOwner whenMaterialVaultPaused {\\n        _pausedMaterialVault = false;\\n        emit MaterialVaultUnpaused();\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addressUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"materialIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"materialAmounts\",\"type\":\"uint256[]\"}],\"name\":\"DecreaseMaterialUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addressUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"materialId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"materialAmount\",\"type\":\"uint256\"}],\"name\":\"DecreaseMaterialUserSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addressUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"materialIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"materialAmounts\",\"type\":\"uint256[]\"}],\"name\":\"IncreaseMaterialUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addressUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"materialId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"materialAmount\",\"type\":\"uint256\"}],\"name\":\"IncreaseMaterialUserSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MaterialVaultPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MaterialVaultUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addressUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"materialIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"materialAmounts\",\"type\":\"uint256[]\"}],\"name\":\"MoveMaterialOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addressUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"materialId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"materialAmount\",\"type\":\"uint256\"}],\"name\":\"MoveMaterialOutSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addressUserSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addressUserReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"materialIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"materialAmounts\",\"type\":\"uint256[]\"}],\"name\":\"MoveMaterialToUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addressUserSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addressUserReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"materialId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"materialAmount\",\"type\":\"uint256\"}],\"name\":\"MoveMaterialToUserSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"}],\"name\":\"SetVaultBalanceAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addressUserSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addressUserReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"materialIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"materialAmounts\",\"type\":\"uint256[]\"}],\"name\":\"TransferMaterialUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addressUserSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addressUserReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"materialId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"materialAmount\",\"type\":\"uint256\"}],\"name\":\"TransferMaterialUserSingle\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT_ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pausedMaterialVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressUser\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_materialIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_materialAmounts\",\"type\":\"uint256[]\"}],\"name\":\"decreaseMaterialUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_materialId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_materialAmount\",\"type\":\"uint256\"}],\"name\":\"decreaseMaterialUserSingle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressUser\",\"type\":\"address\"}],\"name\":\"getAllMaterialAmountbyUser\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_materialId\",\"type\":\"uint256\"}],\"name\":\"getMaterialAmountbyUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressUser\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_materialIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_materialAmounts\",\"type\":\"uint256[]\"}],\"name\":\"increaseMaterialUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_materialId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_materialAmount\",\"type\":\"uint256\"}],\"name\":\"increaseMaterialUserSingle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"materialAmountbyUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_materialIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_materialAmounts\",\"type\":\"uint256[]\"}],\"name\":\"moveMaterialOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_materialId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_materialAmount\",\"type\":\"uint256\"}],\"name\":\"moveMaterialOutSingle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressUserReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_materialIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_materialAmounts\",\"type\":\"uint256[]\"}],\"name\":\"moveMaterialToUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressUserReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_materialId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_materialAmount\",\"type\":\"uint256\"}],\"name\":\"moveMaterialToUserSingle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_workerAddress\",\"type\":\"address[]\"}],\"name\":\"multiGrantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfMaterials\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseMaterialVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumberOfMaterials\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressUserSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressUserReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_materialIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_materialAmounts\",\"type\":\"uint256[]\"}],\"name\":\"transferMaterialUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressUserSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressUserReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_materialId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_materialAmount\",\"type\":\"uint256\"}],\"name\":\"transferMaterialUserSingle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseMaterialVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MaterialVault", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}