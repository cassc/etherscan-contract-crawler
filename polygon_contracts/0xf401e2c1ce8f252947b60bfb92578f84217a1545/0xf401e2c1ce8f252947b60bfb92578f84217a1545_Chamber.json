{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Chamber.sol\": {\r\n      \"content\": \"/**\\n *     SPDX-License-Identifier: Apache License 2.0\\n *\\n *     Copyright 2018 Set Labs Inc.\\n *     Copyright 2022 Smash Works Inc.\\n *\\n *     Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *     you may not use this file except in compliance with the License.\\n *     You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *     Unless required by applicable law or agreed to in writing, software\\n *     distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *     See the License for the specific language governing permissions and\\n *     limitations under the License.\\n *\\n *     NOTICE\\n *\\n *     This is a modified code from Set Labs Inc. found at\\n *\\n *     https://github.com/SetProtocol/set-protocol-contracts\\n *\\n *     All changes made by Smash Works Inc. are described and documented at\\n *\\n *     https://docs.arch.finance/chambers\\n *\\n *\\n *             %@@@@@\\n *          @@@@@@@@@@@\\n *        #@@@@@     @@@           @@                   @@\\n *       @@@@@@       @@@         @@@@                  @@\\n *      @@@@@@         @@        @@  @@    @@@@@ @@@@@  @@@*@@\\n *     .@@@@@          @@@      @@@@@@@@   @@    @@     @@  @@\\n *     @@@@@(       (((((      @@@    @@@  @@    @@@@@  @@  @@\\n *    @@@@@@   (((((((\\n *    @@@@@#(((((((\\n *    @@@@@(((((\\n *      @@@((\\n */\\npragma solidity ^0.8.17.0;\\n\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ERC20} from \\\"solmate/tokens/ERC20.sol\\\";\\nimport {Owned} from \\\"solmate/auth/Owned.sol\\\";\\nimport {ReentrancyGuard} from \\\"solmate/utils/ReentrancyGuard.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {ArrayUtils} from \\\"./lib/ArrayUtils.sol\\\";\\nimport {IChamberGod} from \\\"./interfaces/IChamberGod.sol\\\";\\nimport {IChamber} from \\\"./interfaces/IChamber.sol\\\";\\nimport {PreciseUnitMath} from \\\"./lib/PreciseUnitMath.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\ncontract Chamber is IChamber, Owned, ReentrancyGuard, ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 CONSTANTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    IChamberGod private god;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 LIBRARIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    using ArrayUtils for address[];\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using PreciseUnitMath for uint256;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            CHAMBER STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address[] public constituents;\\n\\n    mapping(address => uint256) public constituentQuantities;\\n\\n    EnumerableSet.AddressSet private wizards;\\n    EnumerableSet.AddressSet private managers;\\n    EnumerableSet.AddressSet private allowedContracts;\\n\\n    ChamberState private chamberLockState = ChamberState.UNLOCKED;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                MODIFIERS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    modifier onlyManager() virtual {\\n        require(isManager(msg.sender), \\\"Must be Manager\\\");\\n\\n        _;\\n    }\\n\\n    modifier onlyWizard() virtual {\\n        require(isWizard(msg.sender), \\\"Must be a wizard\\\");\\n\\n        _;\\n    }\\n\\n    modifier chambersNonReentrant() virtual {\\n        require(chamberLockState == ChamberState.UNLOCKED, \\\"Non reentrancy allowed\\\");\\n        chamberLockState = ChamberState.LOCKED;\\n        _;\\n        chamberLockState = ChamberState.UNLOCKED;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @param _owner        Owner of the chamber\\n     * @param _name         Name of the chamber token\\n     * @param _symbol       Symbol of the chamber token\\n     * @param _constituents Initial constituents addresses of the chamber\\n     * @param _quantities   Initial quantities of the chamber constituents\\n     * @param _wizards      Allowed addresses that can access onlyWizard functions\\n     * @param _managers     Allowed addresses that can access onlyManager functions\\n     */\\n    constructor(\\n        address _owner,\\n        string memory _name,\\n        string memory _symbol,\\n        address[] memory _constituents,\\n        uint256[] memory _quantities,\\n        address[] memory _wizards,\\n        address[] memory _managers\\n    ) Owned(_owner) ERC20(_name, _symbol, 18) {\\n        constituents = _constituents;\\n        god = IChamberGod(msg.sender);\\n\\n        for (uint256 i = 0; i < _wizards.length; i++) {\\n            require(wizards.add(_wizards[i]), \\\"Cannot add wizard\\\");\\n        }\\n\\n        for (uint256 i = 0; i < _managers.length; i++) {\\n            require(managers.add(_managers[i]), \\\"Cannot add manager\\\");\\n        }\\n\\n        for (uint256 j = 0; j < _constituents.length; j++) {\\n            constituentQuantities[_constituents[j]] = _quantities[j];\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CHAMBER MANAGEMENT\\n    //////////////////////////////////////////////////////////////*/\\n    /**\\n     * Allows the wizard to add a new constituent to the Chamber\\n     *\\n     * @param _constituent The address of the constituent to add\\n     */\\n    function addConstituent(address _constituent) external onlyWizard nonReentrant {\\n        require(!isConstituent(_constituent), \\\"Must not be constituent\\\");\\n\\n        constituents.push(_constituent);\\n\\n        emit ConstituentAdded(_constituent);\\n    }\\n\\n    /**\\n     * Allows the wizard to remove a constituent from the Chamber\\n     *\\n     * @param _constituent The address of the constituent to remove\\n     */\\n    function removeConstituent(address _constituent) external onlyWizard nonReentrant {\\n        require(isConstituent(_constituent), \\\"Must be constituent\\\");\\n\\n        constituents.removeStorage(_constituent);\\n\\n        emit ConstituentRemoved(_constituent);\\n    }\\n\\n    /**\\n     * Checks if the address is a manager of the Chamber\\n     *\\n     * @param _manager The address of a manager\\n     *\\n     * @return bool True/False if the address is a manager or not\\n     */\\n    function isManager(address _manager) public view returns (bool) {\\n        return managers.contains(_manager);\\n    }\\n\\n    /**\\n     * Checks if the address is a wizard of the Chamber\\n     *\\n     * @param _wizard The address of a wizard\\n     *\\n     * @return bool True/False if the address is a wizard or not\\n     */\\n    function isWizard(address _wizard) public view returns (bool) {\\n        return wizards.contains(_wizard);\\n    }\\n\\n    /**\\n     * Checks if the address is a constituent of the Chamber\\n     *\\n     * @param _constituent The address of a constituent\\n     *\\n     * @return bool True/False if the address is a constituent or not\\n     */\\n    function isConstituent(address _constituent) public view returns (bool) {\\n        return constituents.contains(_constituent);\\n    }\\n\\n    /**\\n     * Allows the Owner to add a new manager to the Chamber\\n     *\\n     * @param _manager The address of the manager to add\\n     */\\n    function addManager(address _manager) external onlyOwner nonReentrant {\\n        require(!isManager(_manager), \\\"Already manager\\\");\\n        require(_manager != address(0), \\\"Cannot add null address\\\");\\n\\n        require(managers.add(_manager), \\\"Cannot add manager\\\");\\n\\n        emit ManagerAdded(_manager);\\n    }\\n\\n    /**\\n     * Allows the Owner to remove a manager from the Chamber\\n     *\\n     * @param _manager The address of the manager to remove\\n     */\\n    function removeManager(address _manager) external onlyOwner nonReentrant {\\n        require(isManager(_manager), \\\"Not a manager\\\");\\n\\n        require(managers.remove(_manager), \\\"Cannot remove manager\\\");\\n\\n        emit ManagerRemoved(_manager);\\n    }\\n\\n    /**\\n     * Allows a Manager to add a new wizard to the Chamber\\n     *\\n     * @param _wizard The address of the wizard to add\\n     */\\n    function addWizard(address _wizard) external onlyManager nonReentrant {\\n        require(god.isWizard(_wizard), \\\"Wizard not validated in ChamberGod\\\");\\n        require(!isWizard(_wizard), \\\"Wizard already in Chamber\\\");\\n\\n        require(wizards.add(_wizard), \\\"Cannot add wizard\\\");\\n\\n        emit WizardAdded(_wizard);\\n    }\\n\\n    /**\\n     * Allows a Manager to remove a wizard from the Chamber\\n     *\\n     * @param _wizard The address of the wizard to remove\\n     */\\n    function removeWizard(address _wizard) external onlyManager nonReentrant {\\n        require(isWizard(_wizard), \\\"Wizard not in chamber\\\");\\n\\n        require(wizards.remove(_wizard), \\\"Cannot remove wizard\\\");\\n\\n        emit WizardRemoved(_wizard);\\n    }\\n\\n    /**\\n     * Returns an array with the addresses of all the constituents of the\\n     * Chamber\\n     *\\n     * @return an array of addresses for the constituents\\n     */\\n    function getConstituentsAddresses() external view returns (address[] memory) {\\n        return constituents;\\n    }\\n\\n    /**\\n     * Returns an array with the quantities of all the constituents of the\\n     * Chamber\\n     *\\n     * @return an array of uint256 for the quantities of the constituents\\n     */\\n    function getQuantities() external view returns (uint256[] memory) {\\n        uint256[] memory quantities = new uint256[](constituents.length);\\n        for (uint256 i = 0; i < constituents.length; i++) {\\n            quantities[i] = constituentQuantities[constituents[i]];\\n        }\\n\\n        return quantities;\\n    }\\n\\n    /**\\n     * Returns the quantity of a constituent of the Chamber\\n     *\\n     * @param _constituent The address of the constituent\\n     *\\n     * @return uint256 The quantity of the constituent\\n     */\\n    function getConstituentQuantity(address _constituent) external view returns (uint256) {\\n        return constituentQuantities[_constituent];\\n    }\\n\\n    /**\\n     * Returns the addresses of all the wizards of the Chamber\\n     *\\n     * @return address[] Array containing the addresses of the wizards of the Chamber\\n     */\\n    function getWizards() external view returns (address[] memory) {\\n        return wizards.values();\\n    }\\n\\n    /**\\n     * Returns the addresses of all the managers of the Chamber\\n     *\\n     * @return address[] Array containing the addresses of the managers of the Chamber\\n     */\\n    function getManagers() external view returns (address[] memory) {\\n        return managers.values();\\n    }\\n\\n    /**\\n     * Returns the addresses of all the allowedContracts of the Chamber\\n     *\\n     * @return address[] Array containing the addresses of the allowedContracts of the Chamber\\n     */\\n    function getAllowedContracts() external view returns (address[] memory) {\\n        return allowedContracts.values();\\n    }\\n\\n    /**\\n     * Allows a Manager to add a new allowedContract to the Chamber\\n     *\\n     * @param _target The address of the allowedContract to add\\n     */\\n    function addAllowedContract(address _target) external onlyManager nonReentrant {\\n        require(god.isAllowedContract(_target), \\\"Contract not allowed in ChamberGod\\\");\\n        require(!isAllowedContract(_target), \\\"Contract already allowed\\\");\\n\\n        require(allowedContracts.add(_target), \\\"Cannot add contract\\\");\\n\\n        emit AllowedContractAdded(_target);\\n    }\\n\\n    /**\\n     * Allows a Manager to remove an allowedContract from the Chamber\\n     *\\n     * @param _target The address of the allowedContract to remove\\n     */\\n    function removeAllowedContract(address _target) external onlyManager nonReentrant {\\n        require(isAllowedContract(_target), \\\"Contract not allowed\\\");\\n\\n        require(allowedContracts.remove(_target), \\\"Cannot remove contract\\\");\\n\\n        emit AllowedContractRemoved(_target);\\n    }\\n\\n    /**\\n     * Checks if the address is an allowedContract of the Chamber\\n     *\\n     * @param _target The address of an allowedContract\\n     *\\n     * @return bool True/False if the address is an allowedContract or not\\n     */\\n    function isAllowedContract(address _target) public view returns (bool) {\\n        return allowedContracts.contains(_target);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CHAMBER LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * Allows a wizard to mint an specific amount of chamber tokens\\n     * to a recipient\\n     *\\n     * @param _recipient   The address of the recipient\\n     * @param _quantity    The quantity of the chamber to mint\\n     */\\n    function mint(address _recipient, uint256 _quantity) external onlyWizard nonReentrant {\\n        _mint(_recipient, _quantity);\\n    }\\n\\n    /**\\n     * Allows a wizard to burn an specific amount of chamber tokens\\n     * from a source\\n     *\\n     * @param _from          The address of the source to burn from\\n     * @param _quantity      The quantity of the chamber tokens to burn\\n     */\\n    function burn(address _from, uint256 _quantity) external onlyWizard nonReentrant {\\n        _burn(_from, _quantity);\\n    }\\n\\n    /**\\n     * Locks the chamber from potentially malicious outside calls of contracts\\n     * that were not created by arch-protocol\\n     */\\n    function lockChamber() external onlyWizard nonReentrant {\\n        require(chamberLockState == ChamberState.UNLOCKED, \\\"Chamber locked\\\");\\n        chamberLockState = ChamberState.LOCKED;\\n    }\\n\\n    /**\\n     * Unlocks the chamber from potentially malicious outside calls of contracts\\n     * that were not created by arch-protocol\\n     */\\n    function unlockChamber() external onlyWizard nonReentrant {\\n        require(chamberLockState == ChamberState.LOCKED, \\\"Chamber already unlocked\\\");\\n        chamberLockState = ChamberState.UNLOCKED;\\n    }\\n\\n    /**\\n     * Allows a wizard to transfer an specific amount of constituent tokens\\n     * to a recipient\\n     *\\n     * @param _constituent   The address of the constituent\\n     * @param _recipient     The address of the recipient to transfer tokens to\\n     * @param _quantity      The quantity of the constituent to transfer\\n     */\\n    function withdrawTo(address _constituent, address _recipient, uint256 _quantity)\\n        external\\n        onlyWizard\\n        nonReentrant\\n    {\\n        if (_quantity > 0) {\\n            // Retrieve current balance of token for the vault\\n            uint256 existingVaultBalance = IERC20(_constituent).balanceOf(address(this));\\n\\n            // Call specified ERC20 token contract to transfer tokens from Vault to user\\n            IERC20(_constituent).safeTransfer(_recipient, _quantity);\\n\\n            // Verify transfer quantity is reflected in balance\\n            uint256 newVaultBalance = IERC20(_constituent).balanceOf(address(this));\\n\\n            // Check to make sure current balances are as expected\\n            require(\\n                newVaultBalance >= existingVaultBalance - _quantity,\\n                \\\"Chamber.withdrawTo: Invalid post-withdraw balance\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * Update the quantities of the constituents in the chamber based on the\\n     * total suppply of tokens. Only considers constituents in the constituents\\n     * list. Used by wizards. E.g. after an uncollateralized mint in the streaming fee wizard .\\n     *\\n     */\\n    function updateQuantities() external onlyWizard nonReentrant chambersNonReentrant {\\n        for (uint256 i = 0; i < constituents.length; i++) {\\n            address _constituent = constituents[i];\\n            uint256 currentBalance = IERC20(_constituent).balanceOf(address(this));\\n            uint256 _newQuantity = currentBalance.preciseDiv(totalSupply, decimals);\\n\\n            require(_newQuantity > 0, \\\"Zero quantity not allowed\\\");\\n\\n            constituentQuantities[_constituent] = _newQuantity;\\n        }\\n    }\\n\\n    /**\\n     * Allows wizards to make low level calls to contracts that have been\\n     * added to the allowedContracts mapping.\\n     *\\n     * @param _sellToken          The address of the token to sell\\n     * @param _sellQuantity       The amount of sellToken to sell\\n     * @param _buyToken           The address of the token to buy\\n     * @param _minBuyQuantity     The minimum amount of buyToken that should be bought\\n     * @param _data               The data to be passed to the contract\\n     * @param _target            The address of the contract to call\\n     * @param _allowanceTarget    The address of the contract to give allowance of tokens\\n     *\\n     * @return tokenAmountBought  The amount of buyToken bought\\n     */\\n    function executeTrade(\\n        address _sellToken,\\n        uint256 _sellQuantity,\\n        address _buyToken,\\n        uint256 _minBuyQuantity,\\n        bytes memory _data,\\n        address payable _target,\\n        address _allowanceTarget\\n    ) external onlyWizard nonReentrant returns (uint256 tokenAmountBought) {\\n        require(_target != address(this), \\\"Cannot invoke the Chamber\\\");\\n        require(isAllowedContract(_target), \\\"Target not allowed\\\");\\n        uint256 tokenAmountBefore = IERC20(_buyToken).balanceOf(address(this));\\n        uint256 currentAllowance = IERC20(_sellToken).allowance(address(this), _allowanceTarget);\\n\\n        if (currentAllowance < _sellQuantity) {\\n            IERC20(_sellToken).safeIncreaseAllowance(\\n                _allowanceTarget, (_sellQuantity - currentAllowance)\\n            );\\n        }\\n        _invokeContract(_data, _target);\\n\\n        currentAllowance = IERC20(_sellToken).allowance(address(this), _allowanceTarget);\\n        IERC20(_sellToken).safeDecreaseAllowance(_allowanceTarget, currentAllowance);\\n\\n        uint256 tokenAmountAfter = IERC20(_buyToken).balanceOf(address(this));\\n        tokenAmountBought = tokenAmountAfter - tokenAmountBefore;\\n        require(tokenAmountBought >= _minBuyQuantity, \\\"Underbought buy quantity\\\");\\n\\n        return tokenAmountBought;\\n    }\\n\\n    /**\\n     * Low level call to a contract. Only allowed contracts can be called.\\n     *\\n     * @param _data           The encoded calldata to be passed to the contract\\n     * @param _target         The address of the contract to call\\n     *\\n     * @return response       The response bytes from the contract call\\n     */\\n    function _invokeContract(bytes memory _data, address payable _target)\\n        internal\\n        returns (bytes memory response)\\n    {\\n        response = address(_target).functionCall(_data);\\n        require(response.length > 0, \\\"Low level functionCall failed\\\");\\n        return (response);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/tokens/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/auth/Owned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\\nabstract contract Owned {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            OWNERSHIP STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public owner;\\n\\n    modifier onlyOwner() virtual {\\n        require(msg.sender == owner, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             OWNERSHIP LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        owner = newOwner;\\n\\n        emit OwnershipTransferred(msg.sender, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Gas optimized reentrancy protection for smart contracts.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/ReentrancyGuard.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\\nabstract contract ReentrancyGuard {\\n    uint256 private locked = 1;\\n\\n    modifier nonReentrant() virtual {\\n        require(locked == 1, \\\"REENTRANCY\\\");\\n\\n        locked = 2;\\n\\n        _;\\n\\n        locked = 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/lib/ArrayUtils.sol\": {\r\n      \"content\": \"/**\\n *     SPDX-License-Identifier: Apache License 2.0\\n *\\n *     Copyright 2018 Set Labs Inc.\\n *     Copyright 2022 Smash Works Inc.\\n *\\n *     Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *     you may not use this file except in compliance with the License.\\n *     You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *     Unless required by applicable law or agreed to in writing, software\\n *     distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *     See the License for the specific language governing permissions and\\n *     limitations under the License.\\n *\\n *     NOTICE\\n *\\n *     This is a modified code from Set Labs Inc. found at\\n *\\n *     https://github.com/SetProtocol/set-protocol-contracts\\n *\\n *     All changes made by Smash Works Inc. are described and documented at\\n *\\n *     https://docs.arch.finance/chambers\\n *\\n *\\n *             %@@@@@\\n *          @@@@@@@@@@@\\n *        #@@@@@     @@@           @@                   @@\\n *       @@@@@@       @@@         @@@@                  @@\\n *      @@@@@@         @@        @@  @@    @@@@@ @@@@@  @@@*@@\\n *     .@@@@@          @@@      @@@@@@@@   @@    @@     @@  @@\\n *     @@@@@(       (((((      @@@    @@@  @@    @@@@@  @@  @@\\n *    @@@@@@   (((((((\\n *    @@@@@#(((((((\\n *    @@@@@(((((\\n *      @@@((\\n */\\npragma solidity ^0.8.17.0;\\n\\nlibrary ArrayUtils {\\n    /**\\n     * Returns the index of the element 'a' in the _array provided. It also returns true if\\n     * the element was found, and false if not, as -1 is not a possible output.\\n     *\\n     * @param _array    Array to check\\n     * @param a         Element to check in array\\n     *\\n     * @return A tuple with the index of the element, and a bool\\n     */\\n    function indexOf(address[] memory _array, address a) internal pure returns (uint256, bool) {\\n        uint256 length = _array.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (_array[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (0, false);\\n    }\\n\\n    /**\\n     * Returns true if the element 'a' is in the _array provided, and false otherwise.\\n     *\\n     * @param _array    Array to check\\n     * @param a         Element to check in array\\n     *\\n     * @return True if the element is present in the array\\n     */\\n    function contains(address[] memory _array, address a) internal pure returns (bool) {\\n        (, bool isIn) = indexOf(_array, a);\\n        return isIn;\\n    }\\n\\n    /**\\n     * Returns true if the _array contains duplicates, and false otherwise.\\n     *\\n     * @param _array    Array to check\\n     *\\n     * @return True if there are duplicates in the array\\n     */\\n    function hasDuplicate(address[] memory _array) internal pure returns (bool) {\\n        require(_array.length > 0, \\\"_array is empty\\\");\\n\\n        for (uint256 i = 0; i < _array.length - 1; i++) {\\n            address current = _array[i];\\n            for (uint256 j = i + 1; j < _array.length; j++) {\\n                if (current == _array[j]) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * Removes the element 'a' from the memory _array if present. Will revert if the\\n     * element is not present. Returns a new array.\\n     *\\n     * @param _array    Array to check\\n     * @param a         Element to remove\\n     *\\n     * @return A new array without the element\\n     */\\n    function remove(address[] memory _array, address a) internal pure returns (address[] memory) {\\n        (uint256 index, bool isIn) = indexOf(_array, a);\\n        if (!isIn) {\\n            revert(\\\"Address not in array\\\");\\n        } else {\\n            (address[] memory _newArray,) = pop(_array, index);\\n            return _newArray;\\n        }\\n    }\\n\\n    /**\\n     * Removes the element 'a' from the storage _array if present. Will revert if the\\n     * element is not present. Moves the last element in the _array to the index in\\n     * which the element 'a' is present. Changes the array in-place.\\n     *\\n     * @param _array    Array to modify\\n     * @param a         Element to remove\\n     */\\n    function removeStorage(address[] storage _array, address a) internal {\\n        (uint256 index, bool isIn) = indexOf(_array, a);\\n        if (!isIn) {\\n            revert(\\\"Address not in array\\\");\\n        } else {\\n            uint256 lastIndex = _array.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) _array[index] = _array[lastIndex];\\n            _array.pop();\\n        }\\n    }\\n\\n    /**\\n     * Removes from the array the element in the index specified. Returns a new array and\\n     * the element removed, as a tuple.\\n     *\\n     * @param _array    Array to modify\\n     * @param index     Index of element to remove\\n     *\\n     * @return New array amd the removed element, as a tuple\\n     */\\n    function pop(address[] memory _array, uint256 index)\\n        internal\\n        pure\\n        returns (address[] memory, address)\\n    {\\n        uint256 length = _array.length;\\n        require(index < _array.length, \\\"Index must be < _array length\\\");\\n        address[] memory newAddresses = new address[](length - 1);\\n        for (uint256 i = 0; i < index; i++) {\\n            newAddresses[i] = _array[i];\\n        }\\n        for (uint256 j = index + 1; j < length; j++) {\\n            newAddresses[j - 1] = _array[j];\\n        }\\n        return (newAddresses, _array[index]);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IChamberGod.sol\": {\r\n      \"content\": \"/**\\n *     SPDX-License-Identifier: Apache License 2.0\\n *\\n *     Copyright 2018 Set Labs Inc.\\n *     Copyright 2022 Smash Works Inc.\\n *\\n *     Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *     you may not use this file except in compliance with the License.\\n *     You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *     Unless required by applicable law or agreed to in writing, software\\n *     distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *     See the License for the specific language governing permissions and\\n *     limitations under the License.\\n *\\n *     NOTICE\\n *\\n *     This is a modified code from Set Labs Inc. found at\\n *\\n *     https://github.com/SetProtocol/set-protocol-contracts\\n *\\n *     All changes made by Smash Works Inc. are described and documented at\\n *\\n *     https://docs.arch.finance/chambers\\n *\\n *\\n *             %@@@@@\\n *          @@@@@@@@@@@\\n *        #@@@@@     @@@           @@                   @@\\n *       @@@@@@       @@@         @@@@                  @@\\n *      @@@@@@         @@        @@  @@    @@@@@ @@@@@  @@@*@@\\n *     .@@@@@          @@@      @@@@@@@@   @@    @@     @@  @@\\n *     @@@@@(       (((((      @@@    @@@  @@    @@@@@  @@  @@\\n *    @@@@@@   (((((((\\n *    @@@@@#(((((((\\n *    @@@@@(((((\\n *      @@@((\\n */\\npragma solidity ^0.8.17.0;\\n\\ninterface IChamberGod {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event ChamberCreated(address indexed _chamber, address _owner, string _name, string _symbol);\\n\\n    event WizardAdded(address indexed _wizard);\\n\\n    event WizardRemoved(address indexed _wizard);\\n\\n    event AllowedContractAdded(address indexed _allowedContract);\\n\\n    event AllowedContractRemoved(address indexed _allowedContract);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            CHAMBER GOD LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function createChamber(\\n        string memory _name,\\n        string memory _symbol,\\n        address[] memory _constituents,\\n        uint256[] memory _quantities,\\n        address[] memory _wizards,\\n        address[] memory _managers\\n    ) external returns (address);\\n\\n    function getWizards() external view returns (address[] memory);\\n\\n    function getChambers() external view returns (address[] memory);\\n\\n    function isWizard(address _wizard) external view returns (bool);\\n\\n    function isChamber(address _chamber) external view returns (bool);\\n\\n    function addWizard(address _wizard) external;\\n\\n    function removeWizard(address _wizard) external;\\n\\n    function getAllowedContracts() external view returns (address[] memory);\\n\\n    function addAllowedContract(address _target) external;\\n\\n    function removeAllowedContract(address _target) external;\\n\\n    function isAllowedContract(address _target) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IChamber.sol\": {\r\n      \"content\": \"/**\\n *     SPDX-License-Identifier: Apache License 2.0\\n *\\n *     Copyright 2018 Set Labs Inc.\\n *     Copyright 2022 Smash Works Inc.\\n *\\n *     Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *     you may not use this file except in compliance with the License.\\n *     You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *     Unless required by applicable law or agreed to in writing, software\\n *     distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *     See the License for the specific language governing permissions and\\n *     limitations under the License.\\n *\\n *     NOTICE\\n *\\n *     This is a modified code from Set Labs Inc. found at\\n *\\n *     https://github.com/SetProtocol/set-protocol-contracts\\n *\\n *     All changes made by Smash Works Inc. are described and documented at\\n *\\n *     https://docs.arch.finance/chambers\\n *\\n *\\n *             %@@@@@\\n *          @@@@@@@@@@@\\n *        #@@@@@     @@@           @@                   @@\\n *       @@@@@@       @@@         @@@@                  @@\\n *      @@@@@@         @@        @@  @@    @@@@@ @@@@@  @@@*@@\\n *     .@@@@@          @@@      @@@@@@@@   @@    @@     @@  @@\\n *     @@@@@(       (((((      @@@    @@@  @@    @@@@@  @@  @@\\n *    @@@@@@   (((((((\\n *    @@@@@#(((((((\\n *    @@@@@(((((\\n *      @@@((\\n */\\npragma solidity ^0.8.17.0;\\n\\ninterface IChamber {\\n    /*//////////////////////////////////////////////////////////////\\n                                 ENUMS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    enum ChamberState {\\n        LOCKED,\\n        UNLOCKED\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event ManagerAdded(address indexed _manager);\\n\\n    event ManagerRemoved(address indexed _manager);\\n\\n    event ConstituentAdded(address indexed _constituent);\\n\\n    event ConstituentRemoved(address indexed _constituent);\\n\\n    event WizardAdded(address indexed _wizard);\\n\\n    event WizardRemoved(address indexed _wizard);\\n\\n    event AllowedContractAdded(address indexed _allowedContract);\\n\\n    event AllowedContractRemoved(address indexed _allowedContract);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CHAMBER MANAGEMENT\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function addConstituent(address _constituent) external;\\n\\n    function removeConstituent(address _constituent) external;\\n\\n    function isManager(address _manager) external view returns (bool);\\n\\n    function isWizard(address _wizard) external view returns (bool);\\n\\n    function isConstituent(address _constituent) external view returns (bool);\\n\\n    function addManager(address _manager) external;\\n\\n    function removeManager(address _manager) external;\\n\\n    function addWizard(address _wizard) external;\\n\\n    function removeWizard(address _wizard) external;\\n\\n    function getConstituentsAddresses() external view returns (address[] memory);\\n\\n    function getQuantities() external view returns (uint256[] memory);\\n\\n    function getConstituentQuantity(address _constituent) external view returns (uint256);\\n\\n    function getWizards() external view returns (address[] memory);\\n\\n    function getManagers() external view returns (address[] memory);\\n\\n    function getAllowedContracts() external view returns (address[] memory);\\n\\n    function mint(address _recipient, uint256 _quantity) external;\\n\\n    function burn(address _from, uint256 _quantity) external;\\n\\n    function withdrawTo(address _constituent, address _recipient, uint256 _quantity) external;\\n\\n    function updateQuantities() external;\\n\\n    function lockChamber() external;\\n\\n    function unlockChamber() external;\\n\\n    function addAllowedContract(address target) external;\\n\\n    function removeAllowedContract(address target) external;\\n\\n    function isAllowedContract(address _target) external returns (bool);\\n\\n    function executeTrade(\\n        address _sellToken,\\n        uint256 _sellQuantity,\\n        address _buyToken,\\n        uint256 _minBuyQuantity,\\n        bytes memory _data,\\n        address payable _target,\\n        address _allowanceTarget\\n    ) external returns (uint256 tokenAmountBought);\\n}\\n\"\r\n    },\r\n    \"src/lib/PreciseUnitMath.sol\": {\r\n      \"content\": \"/**\\n *     SPDX-License-Identifier: Apache License 2.0\\n *\\n *     Copyright 2018 Set Labs Inc.\\n *     Copyright 2022 Smash Works Inc.\\n *\\n *     Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *     you may not use this file except in compliance with the License.\\n *     You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *     Unless required by applicable law or agreed to in writing, software\\n *     distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *     See the License for the specific language governing permissions and\\n *     limitations under the License.\\n *\\n *     NOTICE\\n *\\n *     This is a modified code from Set Labs Inc. found at\\n *\\n *     https://github.com/SetProtocol/set-protocol-contracts\\n *\\n *     All changes made by Smash Works Inc. are described and documented at\\n *\\n *     https://docs.arch.finance/chambers\\n *\\n *\\n *             %@@@@@\\n *          @@@@@@@@@@@\\n *        #@@@@@     @@@           @@                   @@\\n *       @@@@@@       @@@         @@@@                  @@\\n *      @@@@@@         @@        @@  @@    @@@@@ @@@@@  @@@*@@\\n *     .@@@@@          @@@      @@@@@@@@   @@    @@     @@  @@\\n *     @@@@@(       (((((      @@@    @@@  @@    @@@@@  @@  @@\\n *    @@@@@@   (((((((\\n *    @@@@@#(((((((\\n *    @@@@@(((((\\n *      @@@((\\n */\\npragma solidity ^0.8.17.0;\\n\\nlibrary PreciseUnitMath {\\n    /**\\n     * Multiplies value _a by value _b (result is rounded down). It's assumed that the value _b is the significand\\n     * of a number with _deicmals precision, so the result of the multiplication will be divided by [10e_decimals].\\n     * The result can be interpreted as [wei].\\n     *\\n     * @param _a          Unsigned integer [wei]\\n     * @param _b          Unsigned integer [10e_decimals]\\n     * @param _decimals   Decimals of _b\\n     */\\n    function preciseMul(uint256 _a, uint256 _b, uint256 _decimals)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 preciseUnit = 10 ** _decimals;\\n        return (_a * _b) / preciseUnit;\\n    }\\n\\n    /**\\n     * Multiplies value _a by value _b (result is rounded up). It's assumed that the value _b is the significand\\n     * of a number with _decimals precision, so the result of the multiplication will be divided by [10e_decimals].\\n     * The result will never reach zero. The result can be interpreted as [wei].\\n     *\\n     * @param _a          Unsigned integer [wei]\\n     * @param _b          Unsigned integer [10e_decimals]\\n     * @param _decimals   Decimals of _b\\n     */\\n    function preciseMulCeil(uint256 _a, uint256 _b, uint256 _decimals)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (_a == 0 || _b == 0) {\\n            return 0;\\n        }\\n        uint256 preciseUnit = 10 ** _decimals;\\n        return (((_a * _b) - 1) / preciseUnit) + 1;\\n    }\\n\\n    /**\\n     * Divides value _a by value _b (result is rounded down). Value _a is scaled up to match value _b decimals.\\n     * The result can be interpreted as [wei].\\n     *\\n     * @param _a          Unsigned integer [wei]\\n     * @param _b          Unsigned integer [10e_decimals]\\n     * @param _decimals   Decimals of _b\\n     */\\n    function preciseDiv(uint256 _a, uint256 _b, uint256 _decimals)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        require(_b != 0, \\\"Cannot divide by 0\\\");\\n\\n        uint256 preciseUnit = 10 ** _decimals;\\n        return (_a * preciseUnit) / _b;\\n    }\\n\\n    /**\\n     * Divides value _a by value _b (result is rounded up or away from 0). Value _a is scaled up to match\\n     * value _b decimals. The result will never be zero, except when _a is zero. The result can be interpreted\\n     * as [wei].\\n     *\\n     * @param _a          Unsigned integer [wei]\\n     * @param _b          Unsigned integer [10e_decimals]\\n     * @param _decimals   Decimals of _b\\n     */\\n    function preciseDivCeil(uint256 _a, uint256 _b, uint256 _decimals)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        require(_b != 0, \\\"Cannot divide by 0\\\");\\n\\n        uint256 preciseUnit = 10 ** _decimals;\\n        return _a > 0 ? ((((_a * preciseUnit) - 1) / _b) + 1) : 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"solmate/=lib/solmate/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_constituents\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_quantities\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_wizards\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_managers\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_allowedContract\",\"type\":\"address\"}],\"name\":\"AllowedContractAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_allowedContract\",\"type\":\"address\"}],\"name\":\"AllowedContractRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_constituent\",\"type\":\"address\"}],\"name\":\"ConstituentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_constituent\",\"type\":\"address\"}],\"name\":\"ConstituentRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"ManagerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"ManagerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_wizard\",\"type\":\"address\"}],\"name\":\"WizardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_wizard\",\"type\":\"address\"}],\"name\":\"WizardRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"addAllowedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_constituent\",\"type\":\"address\"}],\"name\":\"addConstituent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wizard\",\"type\":\"address\"}],\"name\":\"addWizard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"constituentQuantities\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"constituents\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sellToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sellQuantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minBuyQuantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address payable\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_allowanceTarget\",\"type\":\"address\"}],\"name\":\"executeTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmountBought\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowedContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_constituent\",\"type\":\"address\"}],\"name\":\"getConstituentQuantity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConstituentsAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getManagers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getQuantities\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWizards\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"isAllowedContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_constituent\",\"type\":\"address\"}],\"name\":\"isConstituent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wizard\",\"type\":\"address\"}],\"name\":\"isWizard\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockChamber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"removeAllowedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_constituent\",\"type\":\"address\"}],\"name\":\"removeConstituent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"removeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wizard\",\"type\":\"address\"}],\"name\":\"removeWizard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockChamber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateQuantities\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_constituent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Chamber", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009e9a020a11aea5923500408c14c14a6117d3b32a00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000001741726368204d6f64657261746520506f7274666f6c696f0000000000000000000000000000000000000000000000000000000000000000000000000000000004414d4f44000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000ab1b1680f6037006e337764547fb82d17606c187000000000000000000000000027af1e12a5869ed329be4c05617ad528e997d5a0000000000000000000000009a41e03fef7f16f552c6fba37ffa7590fb1ec0c4000000000000000000000000bcd2c5c78000504efbc1ce6489dfcac71835406a00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000371211f58d2ca0000000000000000000000000000000000000000000000000005c181da3bbea60000000000000000000000000000000000000000000000000004c4dd227810e5000000000000000000000000000000000000000000000000000d179dde9d041800000000000000000000000000000000000000000000000000000000000000000300000000000000000000000060f56236cd3c1ac146bd94f2006a1335baa4c449000000000000000000000000dd5211d669f5b1f19991819bbd8b220dbbf8062e00000000000000000000000013541ea37cfb0ce3bff8f28d468d93b348bcddea00000000000000000000000000000000000000000000000000000000000000010000000000000000000000009e9a020a11aea5923500408c14c14a6117d3b32a", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}