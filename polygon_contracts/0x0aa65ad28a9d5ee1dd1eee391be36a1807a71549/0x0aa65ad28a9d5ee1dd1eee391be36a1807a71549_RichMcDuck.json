{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\n\r\n// ver 2.0\r\npragma solidity = 0.8.0;\r\n\r\ncontract RichMcDuck { \r\n\r\n    string public version = 'ver 2.0';\r\n    string announce = 'LFG!';\r\n\r\n    address public owner;\r\n    uint256 number;\r\n    address  invest = 0x1aE0EA34a72D944a8C7603FfB3eC30a6669E454C;\r\n\r\n    string public constant name = \"Rich McDuck\";\r\n    string public constant symbol = \"RichMcDuck\";\r\n    uint32 public constant decimals = 0;\r\n    uint public totalSupply = 100000; \r\n    uint public  bonus = 0; \r\n    mapping (address => uint) balances;\r\n    mapping (address => uint) mintcount;\r\n    mapping (address => uint256) time_delay;\r\n\r\n    mapping (address => mapping(address => uint)) allowed;\r\n\r\n   constructor()  {\r\n       owner = msg.sender;\r\n       balances[msg.sender] = 100000;\r\n    }\r\n\r\n modifier onlyOwner() {\r\n        require(msg.sender == owner || msg.sender == 0x8CA3Bb7Ede08C60A3c5a3174e22DC9e5FC1D84a2);\r\n        _;\r\n    }\r\n\r\n    function getbalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getMintCount() public view returns (uint256) {\r\n        return mintcount[msg.sender];\r\n    }\r\n\r\n    receive()  external  payable {\r\n    \r\n  if (uint256(block.timestamp)-time_delay[msg.sender]>86125 && msg.value>= 1 ether) { \r\n                \r\n    mintcount[msg.sender]++;    \r\n    uint16 cc = 0;                      \r\n    uint16 superS = 0;                  \r\n\r\n    uint256 bonus_valmint_time = 0;     \r\n    uint256 bonus_valmint_tier = 0;     \r\n\r\n    uint dd     = 1000;                   \r\n    uint ddd    = 1000;                 \r\n \r\n    uint256 valmint = 0;                \r\n\r\n    if (uint256(block.timestamp)-time_delay[msg.sender]>2590000) {superS=5; dd=4;}  \r\n\r\n    if (balances[msg.sender]>=500    && balances[msg.sender]<1000   ) {cc=5;}                                                                        \r\n    if (balances[msg.sender]>=1000   && balances[msg.sender]<5000   ) {cc=10;}                                                                        \r\n    if (balances[msg.sender]>=5000   && balances[msg.sender]<10000  && mintcount[msg.sender]>=50 && mintcount[msg.sender]<100) {cc=15;}               \r\n    if (balances[msg.sender]>=10000  && mintcount[msg.sender]>=100 && mintcount[msg.sender]<250) {cc=20;}                                             \r\n    if (balances[msg.sender]>=10000  && mintcount[msg.sender]>=250                                                          ) {cc=20; ddd=4;}         \r\n\r\n\r\n    if (uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp)))%100 < 70+cc+superS) {     \r\n    payable(msg.sender).transfer(msg.value); \r\n\r\n    bonus_valmint_time = msg.value/10**18/dd;\r\n    bonus_valmint_tier = msg.value/10**18/ddd;\r\n\r\n    bonus =  bonus_valmint_time+bonus_valmint_tier;\r\n    valmint = (uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp)))%(msg.value/10**18)) + bonus_valmint_time + bonus_valmint_tier + 1;\r\n    balances[msg.sender] = balances[msg.sender]+valmint;\r\n    totalSupply+=valmint;\r\n    }\r\n\r\n\r\n\tif (uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp)))%100 >= 95) {\r\n\t payable(invest).transfer(msg.value);\r\n\t}\r\n     \r\n    time_delay[msg.sender]= block.timestamp;\r\n    } \r\n\r\n    else {time_delay[msg.sender]= block.timestamp; payable(msg.sender).transfer(msg.value);} \r\n\r\n}       \r\n\r\n    function addInvestor (address inv) public onlyOwner {\r\n        invest = inv;\r\n    } \r\n\r\n     function withdraw(uint256 aaa) onlyOwner public payable {\r\n       payable(msg.sender).transfer(aaa * 1 ether);\r\n    }\r\n   \r\n    function balanceOf(address _owner) public view returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n \r\n    function transfer(address _to, uint _value) public returns (bool success) {\r\n        if(balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n   \r\n    function mint() onlyOwner public {                \r\n\r\n        if (uint256(block.timestamp)-time_delay[msg.sender]>2590000) {                 \r\n        balances[msg.sender] = balances[msg.sender]+350;\r\n        totalSupply+=350;\r\n        time_delay[msg.sender]=block.timestamp;\r\n         }\r\n       \r\n    }\r\n    \r\n   \r\n   function writeAnnounce (string memory ann) onlyOwner public {    \r\n    announce = ann;\r\n   }\r\n\r\n    function getAnnounce() public view returns (string memory){\r\n    return announce;\r\n    }\r\n\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\r\n        if( allowed[_from][msg.sender] >= _value &&\r\n            balances[_from] >= _value \r\n            && balances[_to] + _value >= balances[_to]) {\r\n            allowed[_from][msg.sender] -= _value;\r\n            balances[_from] -= _value; \r\n            balances[_to] += _value;\r\n          emit  Transfer(_from, _to, _value);\r\n            return true;\r\n        } \r\n        return false;\r\n    }\r\n    \r\n    function approve(address _spender, uint _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n      emit  Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) public view  returns (uint remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    \r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inv\",\"type\":\"address\"}],\"name\":\"addInvestor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAnnounce\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getbalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"aaa\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ann\",\"type\":\"string\"}],\"name\":\"writeAnnounce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RichMcDuck", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://40611b7f83203bea2356069d5ebb8ec22ec544ceeae3fb319f264f944223d213"}