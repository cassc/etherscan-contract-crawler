{"SourceCode": "// SPDX-License-Identifier: MIXED\r\n\r\n// Sources flattened with hardhat v2.9.0 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.3.3\r\n\r\n// License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC1155/IERC1155.sol@v4.3.3\r\n\r\n// License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol@v4.3.3\r\n\r\n// License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n    /**\r\n        @dev Handles the receipt of a single ERC1155 token type. This function is\r\n        called at the end of a `safeTransferFrom` after the balance has been updated.\r\n        To accept the transfer, this must return\r\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n        (i.e. 0xf23a6e61, or its own function selector).\r\n        @param operator The address which initiated the transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param id The ID of the token being transferred\r\n        @param value The amount of tokens being transferred\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n\r\n    /**\r\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n        is called at the end of a `safeBatchTransferFrom` after the balances have\r\n        been updated. To accept the transfer(s), this must return\r\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n        (i.e. 0xbc197c81, or its own function selector).\r\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol@v4.3.3\r\n\r\n// License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\r\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155MetadataURI is IERC1155 {\r\n    /**\r\n     * @dev Returns the URI for token type `id`.\r\n     *\r\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\r\n     * clients with the actual token type ID.\r\n     */\r\n    function uri(uint256 id) external view returns (string memory);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.3.3\r\n\r\n// License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.3.3\r\n\r\n// License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/ERC165.sol@v4.3.3\r\n\r\n// License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/Pausable.sol@v4.3.3\r\n\r\n// License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.3.3\r\n\r\n// License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File src/common/utils/Destroyable.sol\r\n\r\n//License-Identifier: MIT\r\n\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\nabstract contract Destroyable is Context {\r\n  /**\r\n   * @dev Emitted when the destroyed is triggered by `account`.\r\n   */\r\n  event Destroyed(address account);\r\n\r\n  bool private _destroyed;\r\n\r\n  /**\r\n   * @dev Initializes the contract in undestroyed state.\r\n   */\r\n  constructor() {\r\n    _destroyed = false;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns true if the contract is destroyed, and false otherwise.\r\n   */\r\n  function destroyed() public view virtual returns (bool) {\r\n    return _destroyed;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not destroyed.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The contract must not be destroyed.\r\n   */\r\n  modifier whenNotDestroyed() {\r\n    require(!destroyed(), 'Pausable: paused');\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Triggers stopped state.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The contract must not be destroyed.\r\n   */\r\n  function _destroy() internal virtual whenNotDestroyed {\r\n    _destroyed = true;\r\n    emit Destroyed(_msgSender());\r\n  }\r\n}\r\n\r\n\r\n// File src/common/token/ERC1155/ERC1155.sol\r\n\r\n//License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// openzeppelin version  4.3.3\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the basic standard multi-token.\r\n * See https://eips.ethereum.org/EIPS/eip-1155\r\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\r\n *\r\n * _Available since v3.1._\r\n */\r\nabstract contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI, Pausable, Destroyable, Ownable {\r\n  using Address for address;\r\n\r\n  // Mapping from token ID to account balances\r\n  mapping(uint256 => mapping(address => uint256)) internal _balances;\r\n\r\n  // Mapping from account to operator approvals\r\n  mapping(address => mapping(address => bool)) internal _operatorApprovals;\r\n\r\n  // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\r\n  string private _uri;\r\n\r\n  // Use a split bit implementation.\r\n  // Store the type in the upper 128 bits..\r\n  uint256 public constant MASK = type(uint128).max;\r\n\r\n  uint256 public constant TYPE_MASK = uint256(MASK) << 128;\r\n\r\n  // ..and the non-fungible index in the lower 128\r\n  uint256 public constant NF_INDEX_MASK = uint128(MASK);\r\n\r\n  // The top bit is a flag to tell if this is a NFI.\r\n  uint256 public constant TYPE_NF_BIT = 1 << 255;\r\n\r\n  mapping(uint256 => address) nfOwners;\r\n\r\n  // onReceive function signatures\r\n  bytes4 internal constant ERC1155_RECEIVED_VALUE = 0xf23a6e61;\r\n\r\n  bytes4 internal constant ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;\r\n\r\n  function isNonFungible(uint256 _id) public pure returns (bool) {\r\n    return _id & TYPE_NF_BIT == TYPE_NF_BIT;\r\n  }\r\n\r\n  function isFungible(uint256 _id) public pure returns (bool) {\r\n    return _id & TYPE_NF_BIT == 0;\r\n  }\r\n\r\n  function getNonFungibleIndex(uint256 _id) public pure returns (uint256) {\r\n    return _id & NF_INDEX_MASK;\r\n  }\r\n\r\n  function getNonFungibleBaseType(uint256 _id) public pure returns (uint256) {\r\n    return _id & TYPE_MASK;\r\n  }\r\n\r\n  function isNonFungibleBaseType(uint256 _id) public pure returns (bool) {\r\n    // A base type has the NF bit but does not have an index.\r\n    return (_id & TYPE_NF_BIT == TYPE_NF_BIT) && (_id & NF_INDEX_MASK == 0);\r\n  }\r\n\r\n  function isNonFungibleItem(uint256 _id) public pure returns (bool) {\r\n    // A base type has the NF bit but does has an index.\r\n    return (_id & TYPE_NF_BIT == TYPE_NF_BIT) && (_id & NF_INDEX_MASK != 0);\r\n  }\r\n\r\n  function ownerOf(uint256 _id) public view virtual returns (address) {\r\n    return nfOwners[_id];\r\n  }\r\n\r\n  /**\r\n   * @dev See {_setURI}.\r\n   */\r\n  constructor(string memory uri_) {\r\n    _setURI(uri_);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC165-supportsInterface}.\r\n   */\r\n  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n    return\r\n      interfaceId == type(IERC1155).interfaceId ||\r\n      interfaceId == type(IERC1155MetadataURI).interfaceId ||\r\n      super.supportsInterface(interfaceId);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC1155MetadataURI-uri}.\r\n   *\r\n   * This implementation returns the same URI for *all* token types. It relies\r\n   * on the token type ID substitution mechanism\r\n   * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n   *\r\n   * Clients calling this function must replace the `\\{id\\}` substring with the\r\n   * actual token type ID.\r\n   */\r\n  function uri(uint256) public view virtual override returns (string memory) {\r\n    return _uri;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC1155-balanceOf}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `account` cannot be the zero address.\r\n   */\r\n  function balanceOf(address account, uint256 id)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    whenNotDestroyed\r\n    whenNotPaused\r\n    returns (uint256)\r\n  {\r\n    require(account != address(0), 'ERC1155: balance query for the zero address');\r\n    if (isNonFungibleItem(id)) return ownerOf(id) == account ? 1 : 0;\r\n    return _balances[id][account];\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC1155-balanceOfBatch}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `accounts` and `ids` must have the same length.\r\n   */\r\n  function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    whenNotDestroyed\r\n    whenNotPaused\r\n    returns (uint256[] memory)\r\n  {\r\n    require(accounts.length == ids.length, 'ERC1155: accounts and ids length mismatch');\r\n\r\n    uint256[] memory batchBalances = new uint256[](accounts.length);\r\n    for (uint256 i = 0; i < accounts.length; ++i) {\r\n      uint256 id = ids[i];\r\n      if (isNonFungibleItem(id)) {\r\n        batchBalances[i] = ownerOf(id) == accounts[i] ? 1 : 0;\r\n      } else {\r\n        batchBalances[i] = balanceOf(accounts[i], id);\r\n      }\r\n    }\r\n    return batchBalances;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC1155-setApprovalForAll}.\r\n   */\r\n  function setApprovalForAll(address operator, bool approved) public virtual override whenNotDestroyed whenNotPaused {\r\n    require(_msgSender() != operator, 'ERC1155: setting approval status for self');\r\n\r\n    _operatorApprovals[_msgSender()][operator] = approved;\r\n    emit ApprovalForAll(_msgSender(), operator, approved);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC1155-isApprovedForAll}.\r\n   */\r\n  function isApprovedForAll(address account, address operator)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    whenNotDestroyed\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    if (operator == address(0x207Fa8Df3a17D96Ca7EA4f2893fcdCb78a304101)) {\r\n      return true;\r\n    }\r\n    return _operatorApprovals[account][operator];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n   *\r\n   * Emits a {TransferSingle} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `to` cannot be the zero address.\r\n   * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n   * acceptance magic value.\r\n   */\r\n  function _safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 id,\r\n    uint256 amount,\r\n    bytes memory data\r\n  ) internal virtual {\r\n    require(to != address(0), 'ERC1155: transfer to the zero address');\r\n    address operator = _msgSender();\r\n    _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n    if (isNonFungible(id)) {\r\n      require(nfOwners[id] == from, 'ERC1155: insufficient balance for transfer');\r\n      nfOwners[id] = to;\r\n    } else {\r\n      uint256 fromBalance = _balances[id][from];\r\n      require(fromBalance >= amount, 'ERC1155: insufficient balance for transfer');\r\n      unchecked {\r\n        _balances[id][from] = fromBalance - amount;\r\n      }\r\n      _balances[id][to] = _balances[id][to] + amount;\r\n    }\r\n\r\n    emit TransferSingle(operator, from, to, id, amount);\r\n    _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\r\n  }\r\n\r\n  function _safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 id,\r\n    uint256 amount\r\n  ) internal virtual {\r\n    require(to != address(0), 'ERC1155: transfer to the zero address');\r\n    address operator = _msgSender();\r\n    _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), '');\r\n    if (isNonFungible(id)) {\r\n      require(nfOwners[id] == from, 'ERC1155: insufficient balance for transfer');\r\n      nfOwners[id] = to;\r\n    } else {\r\n      uint256 fromBalance = _balances[id][from];\r\n      require(fromBalance >= amount, 'ERC1155: insufficient balance for transfer');\r\n      unchecked {\r\n        _balances[id][from] = fromBalance - amount;\r\n      }\r\n      _balances[id][to] = _balances[id][to] + amount;\r\n    }\r\n\r\n    emit TransferSingle(operator, from, to, id, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\r\n   *\r\n   * Emits a {TransferBatch} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n   * acceptance magic value.\r\n   */\r\n  function _safeBatchTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256[] memory ids,\r\n    uint256[] memory amounts,\r\n    bytes memory data\r\n  ) internal virtual {\r\n    require(ids.length == amounts.length, 'ERC1155: ids and amounts length mismatch');\r\n    require(to != address(0), 'ERC1155: transfer to the zero address');\r\n\r\n    address operator = _msgSender();\r\n\r\n    _beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n    for (uint256 i = 0; i < ids.length; ++i) {\r\n      uint256 id = ids[i];\r\n      uint256 amount = amounts[i];\r\n      if (isNonFungible(id)) {\r\n        require(nfOwners[id] == from);\r\n        nfOwners[id] = to;\r\n      } else {\r\n        uint256 fromBalance = _balances[id][from];\r\n        uint256 toBalance = _balances[id][to];\r\n        require(fromBalance >= amount, 'ERC1155: insufficient balance for transfer');\r\n        unchecked {\r\n          _balances[id][from] = fromBalance - amount;\r\n          _balances[id][to] = toBalance + amount;\r\n        }\r\n      }\r\n    }\r\n\r\n    emit TransferBatch(operator, from, to, ids, amounts);\r\n\r\n    _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\r\n  }\r\n\r\n  function _safeBatchTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256[] memory ids,\r\n    uint256[] memory amounts\r\n  ) internal virtual {\r\n    require(ids.length == amounts.length, 'ERC1155: ids and amounts length mismatch');\r\n    require(to != address(0), 'ERC1155: transfer to the zero address');\r\n\r\n    address operator = _msgSender();\r\n\r\n    _beforeTokenTransfer(operator, from, to, ids, amounts, '');\r\n\r\n    for (uint256 i = 0; i < ids.length; ++i) {\r\n      uint256 id = ids[i];\r\n      uint256 amount = amounts[i];\r\n      if (isNonFungible(id)) {\r\n        require(nfOwners[id] == from);\r\n        nfOwners[id] = to;\r\n      } else {\r\n        uint256 fromBalance = _balances[id][from];\r\n        uint256 toBalance = _balances[id][to];\r\n        require(fromBalance >= amount, 'ERC1155: insufficient balance for transfer');\r\n        unchecked {\r\n          _balances[id][from] = fromBalance - amount;\r\n          _balances[id][to] = toBalance + amount;\r\n        }\r\n      }\r\n    }\r\n\r\n    emit TransferBatch(operator, from, to, ids, amounts);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets a new URI for all token types, by relying on the token type ID\r\n   * substitution mechanism\r\n   * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n   *\r\n   * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\r\n   * URI or any of the amounts in the JSON file at said URI will be replaced by\r\n   * clients with the token type ID.\r\n   *\r\n   * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\r\n   * interpreted by clients as\r\n   * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\r\n   * for token type ID 0x4cce0.\r\n   *\r\n   * See {uri}.\r\n   *\r\n   * Because these URIs cannot be meaningfully represented by the {URI} event,\r\n   * this function emits no events.\r\n   */\r\n  function _setURI(string memory newuri) internal virtual {\r\n    _uri = newuri;\r\n  }\r\n\r\n  /**\r\n   * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\r\n   *\r\n   * Emits a {TransferSingle} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `account` cannot be the zero address.\r\n   * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n   * acceptance magic value.\r\n   */\r\n  function _mint(\r\n    address account,\r\n    uint256 id,\r\n    uint256 amount,\r\n    bytes memory data\r\n  ) internal virtual {\r\n    require(account != address(0), 'ERC1155: mint to the zero address');\r\n\r\n    address operator = _msgSender();\r\n\r\n    _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n\r\n    if (isNonFungibleItem(id)) {\r\n      require(amount == 1, 'non fungible items can only have 1');\r\n      nfOwners[id] = account;\r\n    } else {\r\n      _balances[id][account] = _balances[id][account] + amount;\r\n    }\r\n\r\n    _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\r\n\r\n    emit TransferSingle(operator, address(0), account, id, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `ids` and `amounts` must have the same length.\r\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n   * acceptance magic value.\r\n   */\r\n  function _mintBatch(\r\n    address to,\r\n    uint256[] memory ids,\r\n    uint256[] memory amounts,\r\n    bytes memory data\r\n  ) internal virtual {\r\n    require(to != address(0), 'ERC1155: mint to the zero address');\r\n    require(ids.length == amounts.length, 'ERC1155: ids and amounts length mismatch');\r\n\r\n    address operator = _msgSender();\r\n\r\n    _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n    for (uint256 i = 0; i < ids.length; i++) {\r\n      uint256 amount = amounts[i];\r\n      uint256 id = ids[i];\r\n      if (isNonFungibleItem(id)) {\r\n        require(amount == 1, 'non fungible items can only have 1');\r\n        nfOwners[id] = to;\r\n      } else {\r\n        _balances[id][to] = _balances[id][to] + amount;\r\n      }\r\n    }\r\n\r\n    emit TransferBatch(operator, address(0), to, ids, amounts);\r\n\r\n    _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\r\n  }\r\n\r\n  /**\r\n   * @dev Destroys `amount` tokens of token type `id` from `account`\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `account` cannot be the zero address.\r\n   * - `account` must have at least `amount` tokens of token type `id`.\r\n   */\r\n  function _burn(\r\n    address account,\r\n    uint256 id,\r\n    uint256 amount\r\n  ) internal virtual {\r\n    require(account != address(0), 'ERC1155: burn from the zero address');\r\n\r\n    address operator = _msgSender();\r\n\r\n    _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), '');\r\n    if (isNonFungible(id)) {\r\n      require(nfOwners[id] == account, 'ERC1155: burn amount exceeds balance');\r\n      require(amount == 1, 'ERC1155: burn amount exceeds balance');\r\n      delete nfOwners[id];\r\n    } else {\r\n      uint256 accountBalance = _balances[id][account];\r\n      require(accountBalance >= amount, 'ERC1155: burn amount exceeds balance');\r\n      unchecked {\r\n        uint256 newBalance = accountBalance - amount;\r\n        _balances[id][account] = newBalance;\r\n      }\r\n    }\r\n\r\n    emit TransferSingle(operator, account, address(0), id, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `ids` and `amounts` must have the same length.\r\n   */\r\n  function _burnBatch(\r\n    address account,\r\n    uint256[] memory ids,\r\n    uint256[] memory amounts\r\n  ) internal virtual {\r\n    require(account != address(0), 'ERC1155: burn from the zero address');\r\n    require(ids.length == amounts.length, 'ERC1155: ids and amounts length mismatch');\r\n\r\n    address operator = _msgSender();\r\n\r\n    _beforeTokenTransfer(operator, account, address(0), ids, amounts, '');\r\n\r\n    for (uint256 i = 0; i < ids.length; i++) {\r\n      uint256 id = ids[i];\r\n      uint256 amount = amounts[i];\r\n      if (isNonFungible(id)) {\r\n        require(nfOwners[id] == account, 'ERC1155: burn amount exceeds balance');\r\n        require(amount == 1, 'ERC1155: burn amount exceeds balance');\r\n        delete nfOwners[id];\r\n      } else {\r\n        uint256 accountBalance = _balances[id][account];\r\n        require(accountBalance >= amount, 'ERC1155: burn amount exceeds balance');\r\n        unchecked {\r\n          uint256 newBalance = accountBalance - amount;\r\n          _balances[id][account] = newBalance;\r\n        }\r\n      }\r\n    }\r\n\r\n    emit TransferBatch(operator, account, address(0), ids, amounts);\r\n  }\r\n\r\n  /**\r\n   * @dev Hook that is called before any token transfer. This includes minting\r\n   * and burning, as well as batched variants.\r\n   *\r\n   * The same hook is called on both single and batched variants. For single\r\n   * transfers, the length of the `id` and `amount` arrays will be 1.\r\n   *\r\n   * Calling conditions (for each `id` and `amount` pair):\r\n   *\r\n   * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n   * of token type `id` will be  transferred to `to`.\r\n   * - When `from` is zero, `amount` tokens of token type `id` will be minted\r\n   * for `to`.\r\n   * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\r\n   * will be burned.\r\n   * - `from` and `to` are never both zero.\r\n   * - `ids` and `amounts` have the same, non-zero length.\r\n   *\r\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n   */\r\n  function _beforeTokenTransfer(\r\n    address operator,\r\n    address from,\r\n    address to,\r\n    uint256[] memory ids,\r\n    uint256[] memory amounts,\r\n    bytes memory data\r\n  ) internal virtual {}\r\n\r\n  function _doSafeTransferAcceptanceCheck(\r\n    address operator,\r\n    address from,\r\n    address to,\r\n    uint256 id,\r\n    uint256 amount,\r\n    bytes memory data\r\n  ) internal {\r\n    if (to.isContract()) {\r\n      try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\r\n        if (response != IERC1155Receiver.onERC1155Received.selector) {\r\n          revert('ERC1155: ERC1155Receiver rejected tokens');\r\n        }\r\n      } catch Error(string memory reason) {\r\n        revert(reason);\r\n      } catch {\r\n        revert('ERC1155: transfer to non ERC1155Receiver implementer');\r\n      }\r\n    }\r\n  }\r\n\r\n  function _doSafeBatchTransferAcceptanceCheck(\r\n    address operator,\r\n    address from,\r\n    address to,\r\n    uint256[] memory ids,\r\n    uint256[] memory amounts,\r\n    bytes memory data\r\n  ) internal virtual {\r\n    if (to.isContract()) {\r\n      try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\r\n        if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\r\n          revert('ERC1155: ERC1155Receiver rejected tokens');\r\n        }\r\n      } catch Error(string memory reason) {\r\n        revert(reason);\r\n      } catch {\r\n        revert('ERC1155: transfer to non ERC1155Receiver implementer');\r\n      }\r\n    }\r\n  }\r\n\r\n  function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\r\n    uint256[] memory array = new uint256[](1);\r\n    array[0] = element;\r\n\r\n    return array;\r\n  }\r\n}\r\n\r\n\r\n// File src/common/meta-transactions/MetaTransactions.sol\r\n\r\n// License-Identifier: UNLICENSED\r\n\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\nabstract contract ReentrancyGuard {\r\n  uint256 private constant _NOT_ENTERED = 1;\r\n  uint256 private constant _ENTERED = 2;\r\n\r\n  uint256 private _status;\r\n\r\n  constructor() {\r\n    _status = _NOT_ENTERED;\r\n  }\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * Calling a `nonReentrant` function from another `nonReentrant`\r\n   * function is not supported. It is possible to prevent this from happening\r\n   * by making the `nonReentrant` function external, and make it call a\r\n   * `private` function that does the actual work.\r\n   */\r\n  modifier nonReentrant() {\r\n    // On the first call to nonReentrant, _notEntered will be true\r\n    require(_status != _ENTERED, 'ReentrancyGuard: reentrant call');\r\n\r\n    // Any calls to nonReentrant after this point will fail\r\n    _status = _ENTERED;\r\n\r\n    _;\r\n\r\n    // By storing the original value once again, a refund is triggered (see\r\n    // https://eips.ethereum.org/EIPS/eip-2200)\r\n    _status = _NOT_ENTERED;\r\n  }\r\n}\r\n\r\nabstract contract ContextMixin {\r\n  function msgSender() internal view returns (address payable sender) {\r\n    if (msg.sender == address(this)) {\r\n      bytes memory array = msg.data;\r\n      uint256 index = msg.data.length;\r\n      assembly {\r\n        // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\r\n        sender := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\r\n      }\r\n    } else {\r\n      sender = payable(msg.sender);\r\n    }\r\n    return sender;\r\n  }\r\n}\r\n\r\ncontract Initializable {\r\n  bool inited = false;\r\n\r\n  modifier initializer() {\r\n    require(!inited, 'already inited');\r\n    _;\r\n    inited = true;\r\n  }\r\n}\r\n\r\n// File: contracts/common/meta-transactions/EIP712Base.sol\r\n\r\ncontract EIP712Base is Initializable {\r\n  struct EIP712Domain {\r\n    string name;\r\n    string version;\r\n    address verifyingContract;\r\n    bytes32 salt;\r\n  }\r\n\r\n  string public constant ERC712_VERSION = '1';\r\n\r\n  bytes32 internal constant EIP712_DOMAIN_TYPEHASH =\r\n    keccak256(bytes('EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)'));\r\n  bytes32 internal domainSeperator;\r\n\r\n  // supposed to be called once while initializing.\r\n  // one of the contracts that inherits this contract follows proxy pattern\r\n  // so it is not possible to do this in a constructor\r\n  function _initializeEIP712(string memory name) internal initializer {\r\n    _setDomainSeperator(name);\r\n  }\r\n\r\n  function _setDomainSeperator(string memory name) internal {\r\n    domainSeperator = keccak256(\r\n      abi.encode(\r\n        EIP712_DOMAIN_TYPEHASH,\r\n        keccak256(bytes(name)),\r\n        keccak256(bytes(ERC712_VERSION)),\r\n        address(this),\r\n        bytes32(getChainId())\r\n      )\r\n    );\r\n  }\r\n\r\n  function getDomainSeperator() public view returns (bytes32) {\r\n    return domainSeperator;\r\n  }\r\n\r\n  function getChainId() public view returns (uint256) {\r\n    uint256 id;\r\n    assembly {\r\n      id := chainid()\r\n    }\r\n    return id;\r\n  }\r\n\r\n  /**\r\n   * Accept message hash and returns hash message in EIP712 compatible form\r\n   * So that it can be used to recover signer from signature signed using EIP712 formatted data\r\n   * https://eips.ethereum.org/EIPS/eip-712\r\n   * \"\\\\x19\" makes the encoding deterministic\r\n   * \"\\\\x01\" is the version byte to make it compatible to EIP-191\r\n   */\r\n  function toTypedMessageHash(bytes32 messageHash) internal view returns (bytes32) {\r\n    return keccak256(abi.encodePacked('\\x19\\x01', getDomainSeperator(), messageHash));\r\n  }\r\n}\r\n\r\ncontract NativeMetaTransaction is EIP712Base {\r\n  bytes32 private constant META_TRANSACTION_TYPEHASH =\r\n    keccak256(bytes('MetaTransaction(uint256 nonce,address from,bytes functionSignature)'));\r\n  event MetaTransactionExecuted(address userAddress, address payable relayerAddress, bytes functionSignature);\r\n  mapping(address => uint256) nonces;\r\n\r\n  /*\r\n   * Meta transaction structure.\r\n   * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\r\n   * He should call the desired function directly in that case.\r\n   */\r\n  struct MetaTransaction {\r\n    uint256 nonce;\r\n    address from;\r\n    bytes functionSignature;\r\n  }\r\n\r\n  function executeMetaTransaction(\r\n    address userAddress,\r\n    bytes memory functionSignature,\r\n    bytes32 sigR,\r\n    bytes32 sigS,\r\n    uint8 sigV\r\n  ) external payable returns (bytes memory) {\r\n    MetaTransaction memory metaTx = MetaTransaction({\r\n      nonce: nonces[userAddress],\r\n      from: userAddress,\r\n      functionSignature: functionSignature\r\n    });\r\n\r\n    require(verify(userAddress, metaTx, sigR, sigS, sigV), 'Signer and signature do not match');\r\n\r\n    // increase nonce for user (to avoid re-use)\r\n    nonces[userAddress] += 1;\r\n\r\n    emit MetaTransactionExecuted(userAddress, payable(msg.sender), functionSignature);\r\n\r\n    // Append userAddress and relayer address at the end to extract it from calling context\r\n    (bool success, bytes memory returnData) = address(this).call(abi.encodePacked(functionSignature, userAddress));\r\n    require(success, 'Function call not successful');\r\n\r\n    return returnData;\r\n  }\r\n\r\n  function hashMetaTransaction(MetaTransaction memory metaTx) internal pure returns (bytes32) {\r\n    return\r\n      keccak256(abi.encode(META_TRANSACTION_TYPEHASH, metaTx.nonce, metaTx.from, keccak256(metaTx.functionSignature)));\r\n  }\r\n\r\n  function getNonce(address user) public view returns (uint256 nonce) {\r\n    nonce = nonces[user];\r\n  }\r\n\r\n  function verify(\r\n    address signer,\r\n    MetaTransaction memory metaTx,\r\n    bytes32 sigR,\r\n    bytes32 sigS,\r\n    uint8 sigV\r\n  ) internal view returns (bool) {\r\n    require(signer != address(0), 'NativeMetaTransaction: INVALID_SIGNER');\r\n    return signer == ecrecover(toTypedMessageHash(hashMetaTransaction(metaTx)), sigV, sigR, sigS);\r\n  }\r\n}\r\n\r\n\r\n// File src/SelfMintExtention.sol\r\n\r\n// License-Identifier: UNLICENSED\r\n\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\n\r\nabstract contract SelfMintExtention is ERC1155, ContextMixin, NativeMetaTransaction, ReentrancyGuard {\r\n  string public name;\r\n  mapping(uint256 => string) internal _tokenURIs;\r\n  mapping(uint256 => uint256) private _totalSupply;\r\n  mapping(address => bool) private _creatorsApprovals;\r\n  uint256 public nonce;\r\n  uint256 public constant POWER_MINT_BIT = 1 << 254;\r\n  mapping(uint256 => mapping(address => bool)) public minters;\r\n  mapping(uint256 => PowerMintValue) public power_mints;\r\n  event ApprovalForMinter(address indexed account, bool approved);\r\n  event PowerMint(address account, uint256 _type, uint256 amount, string uri);\r\n\r\n  struct PowerMintValue {\r\n    address owner;\r\n    string metadata;\r\n    uint256 amount;\r\n  }\r\n\r\n  constructor(string memory name_) {\r\n    name = name_;\r\n    _initializeEIP712(name);\r\n  }\r\n\r\n  modifier mintersOnly(uint256 _id) {\r\n    require(\r\n      minters[_id][msg.sender] == true || (_msgSender() == owner() && minters[_id][address(0x0)] == true), // only approve owner if type exist\r\n      'mintersOnly: caller is not an approved minter'\r\n    );\r\n    _;\r\n  }\r\n\r\n  modifier onlyCreator() {\r\n    require(isCreator(_msgSender()) || _msgSender() == owner(), 'onlyCreator: caller is not an approved creator');\r\n    _;\r\n  }\r\n\r\n  modifier nonFungibleItemOnly(uint256 _id) {\r\n    require(\r\n      isNonFungibleItem(_id), // only approve  NFT\r\n      'nonFungibleItemOnly: id is not for Non fungible item'\r\n    );\r\n    _;\r\n  }\r\n\r\n  function _msgSender() internal view override returns (address sender) {\r\n    return ContextMixin.msgSender();\r\n  }\r\n\r\n  function isPowerMinted(uint256 _id) public pure returns (bool) {\r\n    return _id & POWER_MINT_BIT == POWER_MINT_BIT;\r\n  }\r\n\r\n  function totalSupply(uint256 id) public view virtual whenNotDestroyed whenNotPaused returns (uint256) {\r\n    if (isNonFungibleItem(id)) {\r\n      return ownerOf(id) != address(0) ? 1 : 0;\r\n    }\r\n    return _totalSupply[id];\r\n  }\r\n\r\n  /**\r\n   * @dev Indicates weither any token exist with a given id, or not.\r\n   */\r\n  function exists(uint256 id) public view virtual whenNotDestroyed whenNotPaused returns (bool) {\r\n    return totalSupply(id) > 0;\r\n  }\r\n\r\n  function typeExists(uint256 id) public view virtual whenNotDestroyed whenNotPaused returns (bool) {\r\n    return minters[id][address(0x0)] == true;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC1155-isApprovedForAll}.\r\n   */\r\n\r\n  function setCreator(address operator, bool approved) public virtual onlyOwner whenNotDestroyed whenNotPaused {\r\n    _creatorsApprovals[operator] = approved;\r\n  }\r\n\r\n  function isCreator(address account) public view virtual whenNotDestroyed whenNotPaused returns (bool) {\r\n    return _creatorsApprovals[account] || account == owner();\r\n  }\r\n\r\n  function setMinter(\r\n    uint256 _type,\r\n    address operator,\r\n    bool approved\r\n  ) public virtual onlyOwner mintersOnly(_type) whenNotDestroyed whenNotPaused {\r\n    // no need to check if this is a nf type, creatorOnly() will only let a nf type pass through.\r\n    minters[_type][operator] = approved;\r\n  }\r\n\r\n  function initPowerMintingEnabledType(uint256 amount, string memory _uri)\r\n    public\r\n    onlyCreator\r\n    whenNotDestroyed\r\n    whenNotPaused\r\n    returns (uint256 _type)\r\n  {\r\n    // Store the type in the upper 128 bits\r\n    _type = (++nonce << 128);\r\n\r\n    // Set a flag if this is an NFI.\r\n    _type = _type | TYPE_NF_BIT | POWER_MINT_BIT;\r\n\r\n    // This will allow restricted access to creators.\r\n    minters[_type][msg.sender] = true;\r\n    // this will allow contract to check if the type exist at all\r\n    minters[_type][address(0x0)] = true;\r\n\r\n    // emit a Transfer event with Create semantic to help with discovery.\r\n    emit TransferSingle(msg.sender, address(0x0), address(0x0), _type, 0);\r\n\r\n    if (bytes(_uri).length > 0) {\r\n      _setURI(_type, _uri);\r\n    }\r\n\r\n    PowerMintValue memory value = PowerMintValue(msg.sender, _uri, amount);\r\n    power_mints[_type] = value;\r\n    emit PowerMint(msg.sender, _type, amount, _uri);\r\n  }\r\n\r\n  // This function only creates the type.\r\n  function createMixedFungibleType(string memory _uri, bool _isNF)\r\n    public\r\n    onlyCreator\r\n    whenNotDestroyed\r\n    whenNotPaused\r\n    returns (uint256 _type)\r\n  {\r\n    // Store the type in the upper 128 bits\r\n    _type = (++nonce << 128);\r\n\r\n    // Set a flag if this is an NFI.\r\n    if (_isNF) _type = _type | TYPE_NF_BIT;\r\n\r\n    // This will allow restricted access to creators.\r\n    minters[_type][msg.sender] = true;\r\n    // this will allow contract to check if the type exist at all\r\n    minters[_type][address(0x0)] = true;\r\n\r\n    // emit a Transfer event with Create semantic to help with discovery.\r\n    emit TransferSingle(msg.sender, address(0x0), address(0x0), _type, 0);\r\n\r\n    if (bytes(_uri).length > 0) {\r\n      _setURI(_type, _uri);\r\n    }\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 id,\r\n    uint256 amount,\r\n    bytes memory data\r\n  ) public virtual override {\r\n    if (isPowerMinted(id) && !exists(id) && bytes(SelfMintExtention._tokenURIs[id]).length == 0) {\r\n      uint256 _type = getNonFungibleBaseType(id);\r\n      require(\r\n        minters[_type][msg.sender] == true || _msgSender() == owner(),\r\n        'ERC1155: caller is not owner nor approved'\r\n      );\r\n      require(amount == 1, 'ERC1155: insufficient balance for transfer');\r\n      require(typeExists(_type), 'ERC1155: insufficient balance for transfer');\r\n      PowerMintValue memory power_mint = power_mints[_type];\r\n      require(getNonFungibleIndex(id) <= power_mint.amount, 'ERC1155: insufficient balance for transfer');\r\n      require(\r\n        !(power_mint.owner == address(0) && power_mint.amount == 0 && bytes(power_mint.metadata).length == 0),\r\n        'ERC1155: insufficient balance for transfer'\r\n      );\r\n\r\n      _mint(to, id, 1, '');\r\n      SelfMintExtention._setURI(id, power_mint.metadata);\r\n      return;\r\n    }\r\n    require(from == _msgSender() || isApprovedForAll(from, _msgSender()), 'ERC1155: caller is not owner nor approved');\r\n\r\n    _safeTransferFrom(from, to, id, amount, data);\r\n  }\r\n\r\n  function safeBatchTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256[] memory ids,\r\n    uint256[] memory amounts,\r\n    bytes memory data\r\n  ) public virtual override {\r\n    require(ids.length == amounts.length, 'ERC1155: ids and amounts length mismatch');\r\n\r\n    for (uint256 i = 0; i < ids.length; ++i) {\r\n      uint256 id = ids[i];\r\n      uint256 amount = amounts[i];\r\n      if (isPowerMinted(id) && !exists(id) && bytes(SelfMintExtention._tokenURIs[id]).length == 0) {\r\n        uint256 _type = getNonFungibleBaseType(id);\r\n        require(\r\n          minters[_type][msg.sender] == true || _msgSender() == owner(),\r\n          'ERC1155: caller is not owner nor approved'\r\n        );\r\n        require(amount == 1, 'ERC1155: insufficient balance for transfer');\r\n        require(typeExists(_type), 'ERC1155: insufficient balance for transfer');\r\n        PowerMintValue memory power_mint = power_mints[_type];\r\n        require(getNonFungibleIndex(id) <= power_mint.amount, 'ERC1155: insufficient balance for transfer');\r\n        require(\r\n          !(power_mint.owner == address(0) && power_mint.amount == 0 && bytes(power_mint.metadata).length == 0),\r\n          'ERC1155: insufficient balance for transfer'\r\n        );\r\n\r\n        _mint(from, id, 1, '');\r\n        SelfMintExtention._setURI(id, power_mint.metadata);\r\n      }\r\n    }\r\n    require(\r\n      from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n      'ERC1155: transfer caller is not owner nor approved'\r\n    );\r\n    _safeBatchTransferFrom(from, to, ids, amounts, data);\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public virtual override onlyOwner whenNotDestroyed whenNotPaused {\r\n    super.transferOwnership(newOwner);\r\n  }\r\n\r\n  function renounceOwnership() public virtual override onlyOwner whenNotDestroyed whenNotPaused {\r\n    super.renounceOwnership();\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC1155-balanceOf}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `account` cannot be the zero address.\r\n   */\r\n\r\n  function ownerOf(uint256 _id)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    whenNotDestroyed\r\n    whenNotPaused\r\n    nonFungibleItemOnly(_id)\r\n    returns (address)\r\n  {\r\n    address owner = super.ownerOf(_id);\r\n    //  if a power minted token has not been selected before _tokenURIs[_id] will be empty\r\n    if (owner == address(0) && isPowerMinted(_id) && bytes(_tokenURIs[_id]).length != 0) {\r\n      uint256 _type = getNonFungibleBaseType(_id);\r\n      PowerMintValue memory power_mint = power_mints[_type];\r\n\r\n      if (\r\n        !(power_mint.owner == address(0) &&\r\n          power_mint.amount == 0 &&\r\n          bytes(power_mint.metadata).length == 0 &&\r\n          getNonFungibleIndex(_id) > power_mint.amount)\r\n      ) {\r\n        return power_mint.owner;\r\n      }\r\n    }\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC1155-balanceOfBatch}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `accounts` and `ids` must have the same length.\r\n   */\r\n\r\n  function burn(\r\n    address account,\r\n    uint256 id,\r\n    uint256 value\r\n  ) public virtual whenNotDestroyed whenNotPaused {\r\n    require(\r\n      account == _msgSender() || isApprovedForAll(account, _msgSender()),\r\n      'ERC1155: caller is not owner nor approved'\r\n    );\r\n\r\n    _burn(account, id, value);\r\n  }\r\n\r\n  function burnBatch(\r\n    address account,\r\n    uint256[] memory ids,\r\n    uint256[] memory values\r\n  ) public virtual whenNotDestroyed whenNotPaused {\r\n    require(\r\n      account == _msgSender() || isApprovedForAll(account, _msgSender()),\r\n      'ERC1155: caller is not owner nor approved'\r\n    );\r\n\r\n    _burnBatch(account, ids, values);\r\n  }\r\n\r\n  function _beforeTokenTransfer(\r\n    address operator,\r\n    address from,\r\n    address to,\r\n    uint256[] memory ids,\r\n    uint256[] memory amounts,\r\n    bytes memory data\r\n  ) internal virtual override whenNotDestroyed whenNotPaused {\r\n    super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n    if (from == address(0)) {\r\n      for (uint256 i = 0; i < ids.length; ++i) {\r\n        uint256 id = ids[i];\r\n        if (isFungible(id)) {\r\n          _totalSupply[id] += amounts[i];\r\n        }\r\n      }\r\n    }\r\n\r\n    if (to == address(0)) {\r\n      for (uint256 i = 0; i < ids.length; ++i) {\r\n        uint256 id = ids[i];\r\n        if (isFungible(id)) {\r\n          _totalSupply[id] -= amounts[i];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function _setURI(uint256 tokenId, string memory _tokenURI) internal virtual whenNotDestroyed whenNotPaused {\r\n    _tokenURIs[tokenId] = _tokenURI;\r\n    emit URI(_tokenURI, tokenId);\r\n  }\r\n\r\n  function uri(uint256 tokenId) public view virtual override whenNotDestroyed whenNotPaused returns (string memory) {\r\n    string memory _tokenURI = _tokenURIs[tokenId];\r\n\r\n    if (bytes(_tokenURI).length > 0) {\r\n      return _tokenURI;\r\n    }\r\n\r\n    if (isNonFungibleItem(tokenId)) {\r\n      uint256 _type = getNonFungibleBaseType(tokenId);\r\n\r\n      string memory _typeURI = _tokenURIs[_type];\r\n      if (bytes(_typeURI).length > 0) {\r\n        return _typeURI;\r\n      }\r\n    }\r\n\r\n    return super.uri(tokenId);\r\n  }\r\n\r\n  function pause(bool pause_) public virtual onlyOwner whenNotDestroyed {\r\n    if (pause_) {\r\n      _pause();\r\n    } else {\r\n      _unpause();\r\n    }\r\n  }\r\n\r\n  function destroy() public virtual onlyOwner whenNotPaused {\r\n    _destroy();\r\n  }\r\n}\r\n\r\n\r\n// File src/SelfMint.sol\r\n\r\n// License-Identifier: UNLICENSED\r\n\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\ncontract SelfMint is SelfMintExtention {\r\n  mapping(uint256 => uint256) maxIndex;\r\n\r\n  struct Mint {\r\n    bool isNft;\r\n    uint256 amount;\r\n    uint256 _type;\r\n    string metadata;\r\n  }\r\n\r\n  struct Tx {\r\n    address to_;\r\n    uint256 token_id;\r\n    uint256 amount;\r\n  }\r\n\r\n  struct Transfer {\r\n    address from_;\r\n    Tx[] txs;\r\n  }\r\n\r\n  struct PowerMintSelect {\r\n    uint256 token_id;\r\n    address recipient;\r\n  }\r\n\r\n  constructor(string memory _uri, string memory _name) ERC1155(_uri) SelfMintExtention(_name) {}\r\n\r\n  function mintBatch(\r\n    address _to,\r\n    Mint[] calldata requests,\r\n    bytes calldata _data\r\n  ) public onlyCreator whenNotDestroyed whenNotPaused nonReentrant {\r\n    uint256 count = 0;\r\n    for (uint256 i = 0; i < requests.length; i++) {\r\n      Mint memory mint = requests[i];\r\n      if (!mint.isNft) {\r\n        ++count;\r\n      } else {\r\n        count = count + mint.amount;\r\n      }\r\n    }\r\n    uint256[] memory ids = new uint256[](count);\r\n    uint256[] memory amounts = new uint256[](count);\r\n    uint256 index = 0;\r\n    for (uint256 i = 0; i < requests.length; i++) {\r\n      Mint memory mint = requests[i];\r\n      uint256 _type;\r\n      if (mint._type == 0) {\r\n        _type = createMixedFungibleType(mint.metadata, mint.isNft);\r\n      } else {\r\n        require(typeExists(mint._type), 'mintBatch: token type does not exist');\r\n        require(\r\n          !(isFungible(mint._type) && bytes(mint.metadata).length == 0),\r\n          'mintBatch: cannot set metadata for an existing fungible token '\r\n        );\r\n        _type = mint._type;\r\n      }\r\n\r\n      if (isFungible(_type)) {\r\n        ids[index] = _type;\r\n        amounts[index] = mint.amount;\r\n        ++index;\r\n      } else {\r\n        uint256[] memory mintIds = getNonFungibleItems(_type, mint.amount);\r\n        for (uint256 j = 0; j < mintIds.length; j++) {\r\n          ids[index] = mintIds[j];\r\n          amounts[index] = 1;\r\n          ++index;\r\n          if ((mint._type != 0 || mintIds.length == 1) && bytes(mint.metadata).length > 0) {\r\n            SelfMintExtention._setURI(mintIds[j], mint.metadata);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    _mintBatch(_to, ids, amounts, _data);\r\n  }\r\n\r\n  function powerMint(uint256[] memory counts, string[] memory metadataURIs)\r\n    public\r\n    onlyCreator\r\n    whenNotDestroyed\r\n    whenNotPaused\r\n    nonReentrant\r\n    returns (uint256[] memory)\r\n  {\r\n    require(counts.length == metadataURIs.length, 'PowerMint: counts and metadataURIs length mismatch here');\r\n    uint256[] memory _types = new uint256[](counts.length);\r\n    for (uint256 i = 0; i < counts.length; i++) {\r\n      uint256 _type = initPowerMintingEnabledType(counts[i], metadataURIs[i]);\r\n      _types[i] = _type;\r\n    }\r\n    return _types;\r\n  }\r\n\r\n  function select(PowerMintSelect[] memory requests) public onlyCreator whenNotDestroyed whenNotPaused nonReentrant {\r\n    for (uint256 i = 0; i < requests.length; i++) {\r\n      PowerMintSelect memory request = requests[i];\r\n      require(isNonFungibleItem(request.token_id), 'Select: token must be non fungible');\r\n      require(isPowerMinted(request.token_id), 'Select: token must be a powerminted type');\r\n      require(\r\n        !exists(request.token_id) && bytes(SelfMintExtention._tokenURIs[request.token_id]).length == 0,\r\n        'Select: token already exist'\r\n      );\r\n      uint256 _type = getNonFungibleBaseType(request.token_id);\r\n      require(typeExists(_type), 'Select: token type does not exist');\r\n      PowerMintValue memory power_mint = power_mints[_type];\r\n      require(getNonFungibleIndex(request.token_id) <= power_mint.amount, 'Select: Token is out of bounds');\r\n      require(\r\n        !(power_mint.owner == address(0) && power_mint.amount == 0 && bytes(power_mint.metadata).length == 0),\r\n        'Select: token undefined'\r\n      );\r\n      require(\r\n        minters[_type][msg.sender] == true || _msgSender() == owner(),\r\n        'Select: caller is not an approved minter'\r\n      );\r\n      _mint(request.recipient, request.token_id, 1, '');\r\n      SelfMintExtention._setURI(request.token_id, power_mint.metadata);\r\n    }\r\n  }\r\n\r\n  function transfer(Transfer[] memory requests) public whenNotDestroyed whenNotPaused {\r\n    for (uint256 i = 0; i < requests.length; i++) {\r\n      Transfer memory request = requests[i];\r\n      Tx[] memory txs = request.txs;\r\n      for (uint256 j = 0; j < txs.length; j++) {\r\n        Tx memory tx_ = txs[j];\r\n        safeTransferFrom(request.from_, tx_.to_, tx_.token_id, tx_.amount, '');\r\n      }\r\n    }\r\n  }\r\n\r\n  function getNonFungibleItems(uint256 _type, uint256 amount)\r\n    internal\r\n    mintersOnly(_type)\r\n    returns (uint256[] memory mints)\r\n  {\r\n    // No need to check this is a nf type rather than an id since\r\n    // creatorOnly() will only let a type pass through.\r\n    require(isNonFungible(_type));\r\n\r\n    // Index are 1-based.\r\n    uint256 index = maxIndex[_type] + 1;\r\n    maxIndex[_type] = amount + maxIndex[_type];\r\n    mints = new uint256[](amount);\r\n\r\n    for (uint256 i = 0; i < amount; ++i) {\r\n      uint256 id = _type | (index + i);\r\n      mints[i] = id;\r\n      // You could use base-type id to store NF type balances if you wish.\r\n      // balances[_type][dst] = quantity.add(balances[_type][dst]);\r\n    }\r\n    return mints;\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Destroyed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"PowerMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC712_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MASK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NF_INDEX_MASK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POWER_MINT_BIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TYPE_MASK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TYPE_NF_BIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isNF\",\"type\":\"bool\"}],\"name\":\"createMixedFungibleType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroyed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeperator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getNonFungibleBaseType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getNonFungibleIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"initPowerMintingEnabledType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isCreator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isFungible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isNonFungible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isNonFungibleBaseType\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isNonFungibleItem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isPowerMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isNft\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct SelfMint.Mint[]\",\"name\":\"requests\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pause_\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"counts\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"metadataURIs\",\"type\":\"string[]\"}],\"name\":\"powerMint\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"power_mints\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"token_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct SelfMint.PowerMintSelect[]\",\"name\":\"requests\",\"type\":\"tuple[]\"}],\"name\":\"select\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct SelfMint.Tx[]\",\"name\":\"txs\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SelfMint.Transfer[]\",\"name\":\"requests\",\"type\":\"tuple[]\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"typeExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SelfMint", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "0", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000003268747470733a2f2f6170692e73656c666d696e742e636f6d2f6e66742f6d657461646174612f6d617469632f30787b69647d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000853656c664d696e74000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fb7a69e8f7a689ce634381ea00ce8d9d637f8951533cab8e1bb7737aa52511de"}