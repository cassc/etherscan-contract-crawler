{"SourceCode": "// File: contracts/libraries/ECDSA.sol\r\n\r\n\r\n\r\npragma solidity ^0.7.6;\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        // Check the signature length\r\n        if (signature.length != 65) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        return recover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     */\r\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (281): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"ECDSA: invalid signature 's' value\");\r\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        require(signer != address(0), \"ECDSA: invalid signature\");\r\n\r\n        return signer;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * replicates the behavior of the\r\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\r\n     * JSON-RPC method.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n}\r\n\r\n\r\n// File: contracts/libraries/Address.sol\r\n\r\n\r\npragma solidity >=0.7.6 <0.9.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File: contracts/libraries/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity >=0.7.6 <0.9.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IERC20.sol\r\n\r\n\r\n\r\npragma solidity >=0.7.6 <0.9.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File: contracts/libraries/SafeERC20.sol\r\n\r\n\r\npragma solidity >=0.7.6 <0.9.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IDAgora.sol\r\n\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IDAgora {\r\n    event SetBaseURI(string baseURI);\r\n    function mint(address _to, uint256 _tokenId) external;\r\n}\r\n\r\n// File: contracts/interfaces/IERC165.sol\r\n\r\n\r\n\r\npragma solidity >=0.7.6 <0.9.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File: contracts/interfaces/IERC721.sol\r\n\r\n\r\n\r\npragma solidity >=0.7.6 <0.9.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - `from` cannot be the zero address.\r\n      * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n\r\n// File: contracts/interfaces/IDAgoraMarketplace.sol\r\n\r\n\r\npragma solidity ^0.7.6;\r\n\r\n\r\ninterface IDAgoraMarketplace {\r\n    event Pay(address _address, uint256 _time);\r\n    event DAgoraPayment(address _address);\r\n    event Buy(address _buyer, address _seller, address[] _metaAddress,uint256[] _metaUint, address _buyTokenAddress, uint256 _buyTokenAmount);\r\n    event Sell(address _buyer, address _seller, address[] _metaAddress,uint256[] _metaUint, address _buyTokenAddress, uint256 _buyTokenAmount);\r\n    event ListingNFT(address _seller, address[] _nfts, uint256[] _ids, address _saleByToken, uint256 _startPrice, uint256 _endPrice, uint256 _expiresAt);\r\n    event Cancel(address _seller, address[] _metaAddress, uint256[] _metaUint);\r\n    event CancelListingNFT(address _seller, address[] _tokenAddresses, uint256[] _tokenId);\r\n    event EndBid(address _buyer, address[] _tokenAddresses, uint256[] _tokenIds, uint256 _amount);\r\n    event UpdateRoyaltyFee(address _collection, uint32 _fee, uint256 _expiresAt);\r\n\r\n    event SetDAgoraRoyatyFeeNFT(address _DAgoraRoyaltyFee);\r\n    event ChangePaymentToken(address _paymentAddress);\r\n    event RegisterPackage(address _token, uint256 _marketFee, uint256 _claimFee, uint256 _totalRoyaltyFee);\r\n    event UnRegisterPackage(address _token);\r\n    event ConfigureFixedVariable(uint256 _profileFee, bytes32 _message);\r\n    event UpdateAuctionInfo(bytes32 _nftHash, uint256 _startPrice, uint256 _endPrice, uint256 _expiresAt);\r\n\r\n    function setRoyaltyFeeOwner(address _collection, bytes32 _byteCodeHash, uint256 _nonce, bool _isCreate2, uint32 _fee, uint256 _expiresAt) external;\r\n    function DAgoraRoyaltyFee() external returns(address);\r\n}\r\n\r\n// File: contracts/utils/Context.sol\r\n\r\n\r\npragma solidity >=0.7.6 <0.9.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File: contracts/utils/Ownable.sol\r\n\r\n\r\n\r\npragma solidity >=0.7.6 <0.9.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function _initialOwner(address _newOwner) internal {\r\n        require(owner() == address(0), \"DAgora Onwable: already init\");\r\n        _owner = _newOwner;\r\n        emit OwnershipTransferred(_owner, _newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/utils/Admin.sol\r\n\r\n\r\npragma solidity >=0.7.6 <0.9.0;\r\n\r\n\r\nabstract contract Admin is Ownable {\r\n    mapping (address => bool) _admins;\r\n\r\n    event AddAdmin(address _admin);\r\n    event RemoveAdmin(address _admin);\r\n\r\n    constructor() {\r\n        _admins[msg.sender] = true;\r\n    }\r\n    \r\n    modifier onlyAdmin() {\r\n        require(isAdmin(msg.sender), \"Admin: caller is not the admin\");\r\n        _;\r\n    }\r\n\r\n    function addAdmin(address _admin) external virtual onlyOwner {\r\n        _admins[_admin] = true;\r\n\r\n        emit AddAdmin(_admin);\r\n    }\r\n\r\n    function removeAdmin(address _admin) external virtual onlyOwner {\r\n        _admins[_admin] = false;\r\n\r\n        emit RemoveAdmin(_admin);\r\n    }\r\n\r\n    function isAdmin(address _admin) public view returns(bool) {\r\n        return _admins[_admin];\r\n    }\r\n}\r\n\r\n// File: contracts/DAgoraMarketplace.sol\r\n\r\n\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\ncontract DAgoraMarketplace is IDAgoraMarketplace, Admin {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    // Package info\r\n    struct PackageInfo {\r\n        bool isInitial; // Flag for package\r\n        uint256 claimFee; // Claim fee\r\n        uint256 martketFee; // Market fee\r\n        uint256 totalRoyaltyFee; // Total royalty fee\r\n    }\r\n\r\n    struct AuctionInfo {\r\n        address seller;\r\n        address saleByToken;\r\n        uint256 startPrice;\r\n        uint256 endPrice;\r\n        uint256 expiresAt;\r\n    }\r\n\r\n    struct BulkBuyParam {\r\n        address[] metaAddress;\r\n        uint256[] metaUint;\r\n        address[] saleByTokenAddresses;\r\n        uint256[] saleByAmounts;\r\n        uint16 buyByTokenIndex;\r\n        bytes signature;\r\n    }\r\n\r\n    struct RoyaltyFeeConfig {\r\n        uint32 fee;\r\n        uint256 expiresAt;\r\n    }\r\n\r\n    uint constant PERCENT = 10000;\r\n    uint constant ROYALTY_FEE_CAP = 2000;\r\n\r\n    uint256 constant MARKET_FEE_CAP = 2000;\r\n    uint256 constant TOTAL_ROYALTY_FEE_CAP = 2000; \r\n\r\n    uint256 public profileFee = 10 ether;\r\n    bytes32 public message = 0x4461676f72610000000000000000000000000000000000000000000000000000;\r\n    address public paymentAddress;\r\n    address override public DAgoraRoyaltyFee;\r\n    \r\n    // keccak256(abi.encodePacked(_nfts, _ids)) => auctionInfo (to avoid asset collision)\r\n    mapping(bytes32 => AuctionInfo) private _auctionInfos;\r\n    mapping(bytes => bool) private _signatureUseds;\r\n    mapping(address => PackageInfo) private _packageInfos;\r\n    mapping(uint256 => RoyaltyFeeConfig) private _royaltyFeeConfigs;\r\n    mapping(address => mapping(uint256 => bool)) _listingNfts;\r\n\r\n    constructor(address _paymentAddress, address _DAgoraRoyaltyFee) {\r\n        // @dev register default package for main token\r\n        registerPackage(address(0),250,0,2000);\r\n        paymentAddress = _paymentAddress;\r\n        DAgoraRoyaltyFee = _DAgoraRoyaltyFee;\r\n    }\r\n\r\n    /**\r\n     * ======================================================================================\r\n     * \r\n     * MODIFIER\r\n     *\r\n     * ======================================================================================\r\n     */\r\n\r\n    modifier isUnuseSignature(bytes memory _signature) {\r\n        require(!_signatureUseds[_signature], \"DAgora Marketplace: Invalid signature format\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * ======================================================================================\r\n     * \r\n     * PRIVATE FUNCTION\r\n     *\r\n     * ======================================================================================\r\n     */\r\n\r\n    /**\r\n     * @dev Check valid time\r\n     * @param _time time\r\n     * @param _duration duration\r\n     * @return boolean\r\n     */\r\n    function _isValidTime(uint256 _time, uint256 _duration) private view returns(bool) {\r\n        return block.timestamp >= _time && block.timestamp <= _time + _duration;\r\n    }\r\n\r\n    /**\r\n     * @dev Check package is initial\r\n     * @param _package package address\r\n     * @return boolean\r\n     */\r\n    function _isInitPackage(address _package) private view returns(bool) {\r\n        return _packageInfos[_package].isInitial;\r\n    }\r\n\r\n    /**\r\n     * @dev Return Address contract of CREATE opcode\r\n     * @param _creator creator of contract\r\n     * @param _nonce nonce of create transaction\r\n     * @return address of contract created\r\n     */\r\n    function _getAddressCreate(address _creator, uint _nonce) private pure returns(address) {\r\n        bytes memory data;\r\n        if (_nonce == 0x00) {\r\n            data = abi.encodePacked(byte(0xd6), byte(0x94), _creator, byte(0x80));\r\n        } else if (_nonce <= 0x7f) {\r\n            data = abi.encodePacked(byte(0xd6), byte(0x94), _creator, uint8(_nonce));\r\n        } else if (_nonce <= 0xff) {\r\n            data = abi.encodePacked(byte(0xd7), byte(0x94), _creator, byte(0x81), uint8(_nonce));\r\n        } else if (_nonce <= 0xffff) {\r\n            data = abi.encodePacked(byte(0xd8), byte(0x94), _creator, byte(0x82), uint16(_nonce));\r\n        } else if (_nonce <= 0xffffff) {\r\n            data = abi.encodePacked(byte(0xd9), byte(0x94), _creator, byte(0x83), uint24(_nonce));\r\n        } else {\r\n            data = abi.encodePacked(byte(0xda), byte(0x94), _creator, byte(0x84), uint32(_nonce));\r\n        }\r\n        return address(uint256(keccak256(data)));\r\n    }\r\n\r\n    /**\r\n     * @dev Return Address contract of CREATE2 opcode\r\n     * @param _creator creator of contract\r\n     * @param _codeHash keccak256(init code of contract)\r\n     * @param _salt salt when create\r\n     * @return address of contract created\r\n     */\r\n    function _getAddressCreate2(address _creator, bytes32 _codeHash, uint256 _salt) private pure returns(address) {\r\n        return address(uint160(uint256(keccak256(abi.encodePacked(bytes1(0xff), _creator, _salt, _codeHash)))));\r\n    }\r\n\r\n    /**\r\n     * @dev disable signature \r\n     * @param _signature signature\r\n     */\r\n    function _disableSignature(bytes memory _signature) private {\r\n        _signatureUseds[_signature] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Sub market fee and stora fee in contract \r\n     * @param _amount amount of action\r\n     * @param _claimFee Claim fee of package\r\n     * @param _marketFee Market fee of package\r\n     * @return amount after sub fee\r\n     */\r\n    function _subMarketFee(uint256 _amount, uint256 _claimFee, uint256 _marketFee) private pure returns(uint256) {\r\n        uint256 amount = _amount;\r\n        uint256 totalSystemFee = 0;\r\n\r\n        if (_claimFee > 0) {\r\n            totalSystemFee = totalSystemFee.add(_claimFee);\r\n        }\r\n        if (_marketFee > 0) {\r\n            totalSystemFee = totalSystemFee.add(amount.mul(_marketFee).div(PERCENT));\r\n        }\r\n\r\n        return amount.sub(totalSystemFee);\r\n    } \r\n\r\n    /**\r\n     * @dev Get signer of signature \r\n     * @param _metaAddress meta address\r\n     * @param _metaUint meta uint\r\n     * @param _signature signature\r\n     * @return signature is valid\r\n     */\r\n    function _getSigner(address[] memory _metaAddress, uint256[] memory _metaUint, address[] memory _saleByTokenAddresses, uint256[] memory _saleByAmounts, bytes memory _signature) private view returns(address) {\r\n        bytes32 messageHash = keccak256(abi.encodePacked(_metaAddress, _metaUint, _saleByTokenAddresses, _saleByAmounts, message));\r\n        bytes32 ethSignedMessageHash = ECDSA.toEthSignedMessageHash(messageHash);\r\n        return ECDSA.recover(ethSignedMessageHash, _signature);\r\n    }\r\n\r\n    /**\r\n     * @dev verify signer of signature is expect signer \r\n     * @param _metaAddress meta address\r\n     * @param _metaUint meta uint\r\n     * @param _signature signature\r\n     * @param _signerExpected expect signer\r\n     * @return signature is valid\r\n     */\r\n    function _verifySignature(address[] calldata _metaAddress, uint256[] calldata _metaUint, bytes memory _signature, address _signerExpected) private view returns(bool) {\r\n        bytes32 messageHash = keccak256(abi.encodePacked(_metaAddress, _metaUint, message));\r\n        return _verifySignature(messageHash, _signature, _signerExpected);\r\n    }\r\n\r\n    /**\r\n     * @dev verify signer of signature is expect signer \r\n     * @param _messageHash hash of message\r\n     * @param _signature signature\r\n     * @param _signerExpected expect signer\r\n     * @return signature is valid\r\n     */\r\n    function _verifySignature(bytes32 _messageHash, bytes memory _signature, address _signerExpected) private pure returns(bool) {\r\n        bytes32 ethSignedMessageHash = ECDSA.toEthSignedMessageHash(_messageHash);\r\n\r\n        return ECDSA.recover(ethSignedMessageHash, _signature) == _signerExpected;\r\n    }\r\n\r\n    /**\r\n     * @dev private safe transfer nft \r\n     * @param _tokenAddresses list nft addresses to transfer\r\n     * @param _tokenIds list nft id to transfer\r\n     * @param _from from address\r\n     * @param _to to address\r\n     */\r\n    function _safeTransferNFT(address[] memory _tokenAddresses, uint256[] memory _tokenIds, address _from, address _to) private {\r\n        for (uint256 i = 0; i < _tokenAddresses.length; i++) {\r\n            IERC721 meta = IERC721(_tokenAddresses[i]);\r\n            meta.transferFrom(_from, _to, _tokenIds[i]);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev delete listing info \r\n     * @param _nftHash nft hash to delete\r\n     */\r\n    function _deleteAuctionInfo(bytes32 _nftHash) private {\r\n        delete _auctionInfos[_nftHash];\r\n    }\r\n\r\n    /**\r\n     * @dev check valid royalty fee\r\n     */\r\n    function _isValidateRoyaltyFee(uint256 _royaltyFeeId) private view returns(bool) {\r\n        address owner = _getOwnerOfToken(DAgoraRoyaltyFee, _royaltyFeeId);\r\n        if (owner == address(0)) {\r\n            return false;\r\n        }\r\n\r\n        uint256 expiresAt = _royaltyFeeConfigs[_royaltyFeeId].expiresAt;\r\n        uint256 fee = _royaltyFeeConfigs[_royaltyFeeId].fee;\r\n\r\n        if (fee > 0 && (expiresAt > block.timestamp || expiresAt == 0)) {\r\n            return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev check all collections are the same\r\n     */\r\n    function _isSameCollection(address[] memory _collections) private pure returns(bool) {\r\n        address _col = _collections[0];\r\n        for (uint i = 0; i < _collections.length; i++) {\r\n            if (_col != _collections[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _getOwnerOfToken(address _token, uint256 _tokenId) private view returns(address) {\r\n        try IERC721(_token).ownerOf(_tokenId) returns (address _owner) {\r\n            return _owner;\r\n        } catch Error(string memory) {\r\n            return address(0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev transfer royalty fee if it have \r\n     * @param _collection collection to transfer royalty fee\r\n     * @param _tokenAddress token fee\r\n     * @param _amount amount of action\r\n     */\r\n    function _transferRoyaltyFee(address _collection, address _tokenAddress, uint256 _amount, uint256 _totalPercent) private {\r\n        uint256 royaltyFeeId = uint256(uint160(_collection));\r\n\r\n        if (_isValidateRoyaltyFee(royaltyFeeId)) {\r\n            uint256 fee = _royaltyFeeConfigs[royaltyFeeId].fee;\r\n            uint256 payment = _amount.mul(fee).div(_totalPercent); \r\n            address ownerAddress = _getOwnerOfToken(DAgoraRoyaltyFee, royaltyFeeId);\r\n            if (_tokenAddress != address(0)) {\r\n                IERC20 token = IERC20(_tokenAddress);\r\n                token.safeTransfer(ownerAddress, payment);\r\n            } else {\r\n                payable(ownerAddress).transfer(payment);\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Sub royalty fee and transfer fee to receiver, each collection will transfer royalty fee one time per transaction \r\n     * @param _collections list collection\r\n     * @param _tokenAddress token fee\r\n     * @param _amount amount of action\r\n     * @return amount after sub fee\r\n     */\r\n    function _subRoyaltyFee(address[] memory _collections, address _tokenAddress, uint _amount) private returns(uint256) {\r\n        uint256 subAmount = _amount;\r\n        uint256 totalRoyaltyFee = 0;\r\n\r\n        if (_isSameCollection(_collections)) {\r\n            uint256 royaltyFeeId = uint256(uint160(_collections[0]));\r\n            if (_isValidateRoyaltyFee(royaltyFeeId)) {\r\n                totalRoyaltyFee = subAmount.mul(_royaltyFeeConfigs[royaltyFeeId].fee).div(PERCENT);\r\n                _transferRoyaltyFee(_collections[0], _tokenAddress, totalRoyaltyFee, _royaltyFeeConfigs[royaltyFeeId].fee);\r\n            }\r\n        } else {\r\n            totalRoyaltyFee = subAmount.mul(_packageInfos[_tokenAddress].totalRoyaltyFee).div(PERCENT);\r\n            uint256 totalPercent = 0;\r\n\r\n            for (uint i = 0; i < _collections.length; i++) {\r\n                uint256 royaltyFeeId = uint256(uint160(_collections[i]));\r\n                if (_isValidateRoyaltyFee(royaltyFeeId)) {\r\n                    totalPercent = totalPercent.add(_royaltyFeeConfigs[royaltyFeeId].fee);\r\n                }\r\n            }\r\n\r\n            if (totalPercent == 0) {\r\n                return _amount;\r\n            }\r\n\r\n            for (uint i = 0; i < _collections.length; i++) {\r\n                _transferRoyaltyFee(_collections[i], _tokenAddress, totalRoyaltyFee, totalPercent);\r\n            }\r\n        }\r\n\r\n\r\n        return _amount.sub(totalRoyaltyFee);\r\n    }\r\n\r\n    /**\r\n     * @dev Get contract address was deploy with param\r\n     * @param _byteCodeHash byte code hash of collection deployed on network\r\n     * @param _nonce nonce of creator when deployed collection of salt if create with CREATE2 opcode\r\n     * @param _isCreate2 is CREATE2 \r\n     * @return address of contract was deploy\r\n     */\r\n    function _getContractAddress(bytes32 _byteCodeHash, uint256 _nonce, bool _isCreate2) private view returns(address) {\r\n        if (_isCreate2) {\r\n            return _getAddressCreate2(msg.sender, _byteCodeHash, _nonce);\r\n        } else {\r\n            return _getAddressCreate(msg.sender, uint(_nonce));\r\n        }\r\n    }\r\n\r\n    function _buyToken(address[] memory _nftAddresses, uint256[] memory _nftIds, address _token, uint256 _amount, address _seller, address _buyer) internal {\r\n        // get amount to contract\r\n        if (_token == address(0)) {\r\n            require(msg.value >= _amount, \"DAgora Marketplace: Not enough payment\");\r\n        } else {\r\n            IERC20(_token).safeTransferFrom(_buyer, address(this), _amount);\r\n        }\r\n\r\n        // transfer Royalty fee: buyer -> creator\r\n        uint256 amountAfterSubMarketFee = _subMarketFee(_amount, _packageInfos[_token].claimFee, _packageInfos[_token].martketFee);\r\n        uint256 amountAfterSubRoyaltyFee = _subRoyaltyFee(_nftAddresses, _token, amountAfterSubMarketFee);\r\n\r\n        // transfer NFT: seller -> buyer\r\n        _safeTransferNFT(_nftAddresses, _nftIds, _seller, _buyer);\r\n\r\n        // transfer token: contract -> seller\r\n        if (_token == address(0)) {\r\n            payable(_seller).transfer(amountAfterSubRoyaltyFee);\r\n        } else {\r\n            IERC20(_token).safeTransfer(_seller, amountAfterSubRoyaltyFee);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ======================================================================================\r\n     * \r\n     * PUBLIC FUNCTION\r\n     *\r\n     * ======================================================================================\r\n     */\r\n\r\n    /**\r\n     * @dev set royalty fee only creator of nft contract can call this action \r\n     * @param _collection collection to set royalty fee\r\n     * @param _byteCodeHash byte code hash of collection deployed on network\r\n     * @param _nonce nonce of creator when deployed collection of salt if create with CREATE2 opcode\r\n     * @param _isCreate2 is CREATE2 \r\n     * @param _fee fee \r\n     * @param _expiresAt date of royalty fee \r\n     */\r\n    function setRoyaltyFeeOwner(address _collection, bytes32 _byteCodeHash, uint256 _nonce, bool _isCreate2,  uint32 _fee, uint256 _expiresAt) external override {\r\n        require(_fee < ROYALTY_FEE_CAP, \"DAgora Marketplace: Invalid input\");\r\n        uint256 royaltyFeeId = uint256(uint160(_collection));\r\n        address owner = _getOwnerOfToken(DAgoraRoyaltyFee, royaltyFeeId);\r\n        if (owner == address(0)) {\r\n            require(_collection == _getContractAddress(_byteCodeHash, _nonce, _isCreate2), \"DAgora Marketplace: Not creator of collection\");\r\n            IDAgora(DAgoraRoyaltyFee).mint(msg.sender, royaltyFeeId);\r\n        } else {\r\n            require(_getOwnerOfToken(DAgoraRoyaltyFee, royaltyFeeId) == msg.sender, \"DAgora Marketplace: Not owner of royalty fee\");\r\n        }\r\n\r\n        _royaltyFeeConfigs[royaltyFeeId].fee = _fee;\r\n        _royaltyFeeConfigs[royaltyFeeId].expiresAt = _expiresAt;\r\n        emit UpdateRoyaltyFee(_collection, _fee, _expiresAt);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev set royalty fee, admin can call this action\r\n     * @param _collection collection to set royalty fee\r\n     * @param _owner owner of royalty fee\r\n     * @param _fee fee \r\n     * @param _expiresAt date of royalty fee \r\n     */\r\n    function setRoyaltyFeeAdmin(address _collection, address _owner, uint32 _fee, uint256 _expiresAt) external onlyAdmin {\r\n        require(_fee < ROYALTY_FEE_CAP, \"DAgora Marketplace: Invalid input\");\r\n        uint256 royaltyFeeId = uint256(uint160(_collection));\r\n        address owner = _getOwnerOfToken(DAgoraRoyaltyFee, royaltyFeeId);\r\n\r\n        if (owner == address(0)) {\r\n            IDAgora(DAgoraRoyaltyFee).mint(_owner, royaltyFeeId);\r\n        }\r\n\r\n        _royaltyFeeConfigs[royaltyFeeId].fee = _fee;\r\n        _royaltyFeeConfigs[royaltyFeeId].expiresAt = _expiresAt;\r\n        emit UpdateRoyaltyFee(_collection, _fee, _expiresAt);\r\n    }\r\n    \r\n    // @dev Change Payment Default token\r\n    function changePaymentToken(address _paymentAddress) external onlyOwner() {\r\n        paymentAddress = _paymentAddress;\r\n\r\n        emit ChangePaymentToken(_paymentAddress);\r\n    }\r\n\r\n    // @dev Register Package for token can sell in DAgora \r\n    function registerPackage(address _token, uint256 _marketFee, uint256 _claimFee, uint256 _totalRoyaltyFee) public onlyOwner() {\r\n        require(_marketFee <= MARKET_FEE_CAP, \"DAgora Marketplace: Invalid market fee\");\r\n        require(_totalRoyaltyFee <= TOTAL_ROYALTY_FEE_CAP, \"DAgora Marketplace: Invalid total royalty fee\");\r\n        PackageInfo storage packageInfo = _packageInfos[_token];\r\n\r\n        packageInfo.isInitial = true;\r\n        packageInfo.martketFee = _marketFee;\r\n        packageInfo.claimFee = _claimFee;\r\n        packageInfo.totalRoyaltyFee = _totalRoyaltyFee;\r\n\r\n        emit RegisterPackage(_token, _marketFee, _claimFee, _totalRoyaltyFee);\r\n    }\r\n\r\n    // @dev Unregister Package for token can sell in DAgora \r\n    function unRegisterPackage(address _token) external onlyOwner() {\r\n        delete _packageInfos[_token];\r\n\r\n        emit UnRegisterPackage(_token);\r\n    }\r\n\r\n    /**\r\n     * @dev Configure fixed variable\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `profile_fee` the fee charged when change profile on DAgora System.\r\n     */\r\n    function configureFixedVariable(uint256 _profileFee, bytes32 _message) external onlyOwner() {\r\n       profileFee = _profileFee;\r\n       message = _message;\r\n\r\n       emit ConfigureFixedVariable(_profileFee, _message);\r\n    }\r\n\r\n    /**\r\n     * @dev Pay `profile_fee` for change profile on DAgora System\r\n     * Emits a {_pay} event.\r\n     */\r\n    function pay() external {\r\n        IERC20 paymentToken = IERC20(paymentAddress);\r\n        paymentToken.safeTransferFrom(msg.sender, address(this), profileFee);\r\n        \r\n        emit DAgoraPayment(msg.sender);\r\n    }\r\n\r\n    // @dev Buy NFT on DAgora with seller signed signature.\r\n    // @param _metaAddress define with a list of address below [buyer, ...erc721 meta token]\r\n    // @param _metaUint define with a list of Uint below [time, duration, nonce, ...token id]\r\n    // @param _saleByTokenAddresses list of token seller want to sale by\r\n    // @param _saleByAmounts list of token amount seller want to sale by\r\n    // @param _buyByTokenIndex Index of token buyer want to buy\r\n    // @param _signature signature of seller to sell this list nft\r\n    function buy(address[] memory _metaAddress, uint256[] memory _metaUint, address[] memory _saleByTokenAddresses, uint256[] memory _saleByAmounts, uint16 _buyByTokenIndex, bytes memory _signature) public payable isUnuseSignature(_signature) {\r\n        require(_isValidTime(_metaUint[0], _metaUint[1]), \"DAgora Marketplace: Invalid time\");\r\n        require(_metaAddress.length >= 2, \"DAgora Marketplace: Invalid Input\");\r\n        require(_metaAddress.length + 2 == _metaUint.length, \"DAgora Marketplace: Invalid Input\");\r\n\r\n        require(_isInitPackage(_saleByTokenAddresses[_buyByTokenIndex]), \"DAgora Marketplace: Invalid package\");\r\n\r\n        address[] memory tokenSaleList = new address[](_metaAddress.length - 1);\r\n        uint256[] memory tokenIdList = new uint256[](_metaUint.length - 3);\r\n\r\n        for (uint256 i = 0; i < _metaAddress.length - 1; i++) {\r\n            tokenSaleList[i] = _metaAddress[i + 1];\r\n            tokenIdList[i] = _metaUint[i + 3];\r\n        }\r\n\r\n        if (_metaAddress[0] != address(0)) {\r\n            require(_metaAddress[0] == msg.sender, \"DAgora Marketplace: Only reserve address can make this payment\");\r\n        }\r\n        \r\n        // Avoid stack too deep\r\n        address seller = _getSigner(_metaAddress, _metaUint, _saleByTokenAddresses, _saleByAmounts, _signature);\r\n        _disableSignature(_signature);\r\n        _buyToken(tokenSaleList, tokenIdList, _saleByTokenAddresses[_buyByTokenIndex], _saleByAmounts[_buyByTokenIndex], seller, msg.sender);\r\n\r\n        emit Buy(msg.sender, seller, _metaAddress, _metaUint, _saleByTokenAddresses[_buyByTokenIndex], _saleByAmounts[_buyByTokenIndex]);\r\n    }\r\n\r\n    // @dev sell NFT on DAgora with buyer signed signature.\r\n    // @param _metaAddress define with a list of address below [...erc721 meta token]\r\n    // @param _metaUint define with a list of Uint below [time, duration, nonce, ...token id]\r\n    // @param _buyByTokenAddresses list of token seller want to sale by\r\n    // @param _buyByAmounts list of token amount seller want to sale by\r\n    // @param _saleByTokenIndex Index of token buyer want to buy\r\n    // @param _signature signature of seller to sell this list nft\r\n    function sell(address[] memory _metaAddress, uint256[] memory _metaUint, address[] memory _buyByTokenAddresses, uint256[] memory _buyByAmounts, uint16 _saleByTokenIndex, bytes memory _signature) external isUnuseSignature(_signature) {\r\n        require(_isValidTime(_metaUint[0], _metaUint[1]), \"DAgora Marketplace: Invalid time\");\r\n        require(_metaAddress.length >= 1, \"DAgora Marketplace: Invalid Input\");\r\n        require(_metaAddress.length + 3 == _metaUint.length, \"DAgora Marketplace: Invalid Input\");\r\n\r\n        require(_isInitPackage(_buyByTokenAddresses[_saleByTokenIndex]), \"DAgora Marketplace: Invalid package\");\r\n\r\n        address[] memory tokenSaleList = new address[](_metaAddress.length);\r\n        uint256[] memory tokenIdList = new uint256[](_metaUint.length - 3);\r\n\r\n        for (uint256 i = 0; i < _metaAddress.length; i++) {\r\n            tokenSaleList[i] = _metaAddress[i];\r\n            tokenIdList[i] = _metaUint[i + 3];\r\n        }\r\n        address buyer = _getSigner(_metaAddress, _metaUint, _buyByTokenAddresses, _buyByAmounts, _signature);\r\n        \r\n        _disableSignature(_signature);\r\n        _buyToken(tokenSaleList, tokenIdList, _buyByTokenAddresses[_saleByTokenIndex], _buyByAmounts[_saleByTokenIndex], msg.sender, buyer);\r\n\r\n        emit Sell(buyer, msg.sender, _metaAddress, _metaUint, _buyByTokenAddresses[_saleByTokenIndex], _buyByAmounts[_saleByTokenIndex]);\r\n    }\r\n\r\n    // @dev Bulk buy feature.\r\n    // @param _params param for buy function\r\n    function bulkbuy(BulkBuyParam[] memory _params) external payable {\r\n        uint256 totalNativeToken;\r\n        for (uint8 i; i < _params.length; i++) {\r\n            if (_params[i].saleByTokenAddresses[_params[i].buyByTokenIndex] == address(0)) {\r\n                totalNativeToken += _params[i].saleByAmounts[_params[i].buyByTokenIndex];\r\n            }\r\n\r\n            buy(_params[i].metaAddress, _params[i].metaUint, _params[i].saleByTokenAddresses, _params[i].saleByAmounts, _params[i].buyByTokenIndex, _params[i].signature);\r\n        }\r\n        require(msg.value >= totalNativeToken, \"DAgora Marketplace: Insufficient fund\");\r\n    }\r\n\r\n    // @dev Cancel signature dagora.\r\n    // @param _metaAddress define with a list of address\r\n    // @param _metaUint define with a list of Uint\r\n    // @param _buySaleByTokenAddresses list of token\r\n    // @param _buySaleByAmounts list of token amount\r\n    // @param _signature signature of seller to sell this list nft\r\n    function cancel(address[] calldata _metaAddress, uint256[] calldata _metaUint, address[] calldata _buySaleByTokenAddresses, uint256[] calldata _buySaleByAmounts, bytes memory _signature) external {\r\n        require(msg.sender == _getSigner(_metaAddress, _metaUint, _buySaleByTokenAddresses, _buySaleByAmounts, _signature), \"DAgora Marketplace: Signature not match\");\r\n        _disableSignature(_signature);\r\n\r\n        emit Cancel(msg.sender, _metaAddress, _metaUint);\r\n    }\r\n\r\n    // @dev Update listing info\r\n    // @param _nftHashs hash of nfts to update\r\n    // @param _startPrice minimun price seller wants to sale\r\n    // @param _endPrice maximun price seller wants to sale\r\n    // @param _expiresAt time of bid\r\n    function updateAuctionInfo(bytes32 _nftHash, uint256 _startPrice, uint256 _endPrice,  uint256 _expiresAt) external {\r\n        AuctionInfo storage auctionInfo = _auctionInfos[_nftHash];\r\n\r\n        require(auctionInfo.seller == msg.sender, \"DAgora Marketplace: Only onwer can update listing info\");\r\n        require(_startPrice <= auctionInfo.startPrice, \"DAgora Marketplace: The new sale price must be lower than the current price\");\r\n\r\n        auctionInfo.startPrice = _startPrice;\r\n        auctionInfo.endPrice = _endPrice;\r\n        auctionInfo.expiresAt = _expiresAt;\r\n\r\n        emit UpdateAuctionInfo(_nftHash, _startPrice, _endPrice, _expiresAt);\r\n    }\r\n\r\n    // @dev Listing list nft to market to bid (the bid will be process off chain)\r\n    // @param _saleByToken token sale\r\n    // @param _tokenAddresses list nft addres to listing\r\n    // @param _tokenIds list nft id to listing\r\n    // @param _startPrice minimun price seller wants to sale\r\n    // @param _endPrice maximun price seller wants to sale\r\n    // @param _expiresAt time of bid\r\n    function listingForAuction(address _saleByToken, address[] calldata _tokenAddresses, uint256[] calldata _tokenIds, uint256 _startPrice, uint256 _endPrice,  uint256 _expiresAt) external {\r\n        require (_tokenAddresses.length == _tokenIds.length, \"DAgora Marketplace: Invalid Input\");\r\n        require(_saleByToken != address(0), \"DAgora Marketplace: Native token not support\");\r\n        require(_isInitPackage(_saleByToken), \"DAgora Marketplace: Invalid package\");\r\n\r\n        bytes32 nftHash = keccak256(abi.encodePacked(_tokenAddresses, _tokenIds));\r\n\r\n        require(_auctionInfos[nftHash].seller == address(0), \"DAgora Marketplace: List item already listed on DAgora\");\r\n\r\n        _auctionInfos[nftHash] = AuctionInfo({\r\n            seller: msg.sender,\r\n            saleByToken: _saleByToken,\r\n            startPrice: _startPrice,\r\n            endPrice: _endPrice,\r\n            expiresAt: _expiresAt\r\n        });\r\n\r\n        for (uint i = 0; i < _tokenAddresses.length; i++) {\r\n          _listingNfts[_tokenAddresses[i]][_tokenIds[i]] = true;\r\n        }\r\n\r\n        // transfer nft to marketplace\r\n        _safeTransferNFT(_tokenAddresses, _tokenIds, msg.sender, address(this));\r\n\r\n        emit ListingNFT(msg.sender, _tokenAddresses, _tokenIds, _saleByToken, _startPrice, _endPrice, _expiresAt);\r\n    }\r\n\r\n    // @dev Cancel listing list nft \r\n    // @param _tokenAddresses list nft addres to cancel listing\r\n    // @param _tokenIds list nft id to cancel listing\r\n    function cancelListing(address[] calldata _tokenAddresses, uint256[] calldata _tokenIds) external {\r\n        require (_tokenAddresses.length == _tokenIds.length, \"DAgora Marketplace: Invalid Input\");\r\n        bytes32 nftHash = keccak256(abi.encodePacked(_tokenAddresses, _tokenIds));\r\n\r\n        require(_auctionInfos[nftHash].seller == msg.sender, \"DAgora Marketplace: Sender does not owner\");\r\n\r\n        for (uint i = 0; i < _tokenAddresses.length; i++) {\r\n          _listingNfts[_tokenAddresses[i]][_tokenIds[i]] = false;\r\n        }\r\n\r\n        _deleteAuctionInfo(nftHash);\r\n        _safeTransferNFT(_tokenAddresses, _tokenIds, address(this), msg.sender);\r\n\r\n        emit CancelListingNFT(msg.sender, _tokenAddresses, _tokenIds);\r\n    }\r\n\r\n    // @dev after bid process, admin will end bid \r\n    // @param _tokenAddresses list nft addres to cancel listing\r\n    // @param _tokenIds list nft id to cancel listing\r\n    // @param _amount amount of bid\r\n    // @param _buyer buyer address\r\n    // @param _signature signature of buyer accept buy this list nft\r\n    // @param _nonce one time use number\r\n    function endBid(address[] calldata _tokenAddresses, uint256[] calldata _tokenIds, uint256 _amount, address _buyer, bytes memory _signature, uint _nonce) external onlyAdmin isUnuseSignature(_signature) {\r\n        require(_tokenAddresses.length == _tokenIds.length, \"DAgora Marketplace: Invalid Input\");\r\n        bytes32 nftHash = keccak256(abi.encodePacked(_tokenAddresses, _tokenIds));\r\n        AuctionInfo storage auctionInfo = _auctionInfos[nftHash];\r\n        require(auctionInfo.seller != address(0), \"DAgora Marketplace: Listing does not exist\");\r\n        if (auctionInfo.endPrice == 0 || _amount < auctionInfo.endPrice) {\r\n            // check bid end\r\n            require(auctionInfo.expiresAt < block.timestamp, \"DAgora Marketplace: Bid does not end\");\r\n        }\r\n        require(auctionInfo.startPrice <= _amount, \"DAgora Marketplace: Amount should larger than startPrice\");\r\n\r\n        {\r\n            bytes32 messageHash = keccak256(abi.encodePacked(nftHash, _amount, message, _nonce));\r\n            require(_verifySignature(messageHash, _signature, _buyer), \"DAgora Marketplace: Invalid Signature\");\r\n            for (uint i = 0; i < _tokenAddresses.length; i++) {\r\n                _listingNfts[_tokenAddresses[i]][_tokenIds[i]] = false;\r\n            }\r\n\r\n            IERC20 saleByToken = IERC20(auctionInfo.saleByToken);\r\n            saleByToken.safeTransferFrom(_buyer, address(this), _amount);\r\n\r\n            uint256 amountAfterSubMarketFee = _subMarketFee(_amount, _packageInfos[auctionInfo.saleByToken].claimFee, _packageInfos[auctionInfo.saleByToken].martketFee);\r\n            uint256 amountAfterSubRoyaltyFee = _subRoyaltyFee(_tokenAddresses, auctionInfo.saleByToken, amountAfterSubMarketFee);\r\n\r\n            // transfer NFT: contract -> buyer\r\n            _safeTransferNFT(_tokenAddresses, _tokenIds, address(this), _buyer);\r\n\r\n            saleByToken.safeTransfer(auctionInfo.seller, amountAfterSubRoyaltyFee);\r\n        }\r\n\r\n        _deleteAuctionInfo(nftHash);\r\n        _disableSignature(_signature);\r\n\r\n        emit EndBid(_buyer, _tokenAddresses, _tokenIds, _amount);\r\n    }\r\n\r\n    // @dev get listing info\r\n    // @param _nftHash hash of nft list\r\n    // @return auctionInfo of nft list\r\n    function getAuctionInfo(bytes32 _nftHash) external view returns(address, address, uint256, uint256, uint256) {\r\n        AuctionInfo memory data = _auctionInfos[_nftHash];\r\n        return (data.seller, data.saleByToken, data.startPrice, data.endPrice, data.expiresAt);\r\n    }\r\n\r\n    // @dev get package info\r\n    // @param _token token to sell on DAgora\r\n    // @return info of package\r\n    function getPackageInfo(address _token) external view returns(bool, uint256, uint256, uint256) {\r\n        PackageInfo memory data = _packageInfos[_token];\r\n        return (data.isInitial, data.claimFee, data.martketFee, data.totalRoyaltyFee);\r\n    }\r\n\r\n    // @dev get royalty fee info\r\n    // @param _collection collection\r\n    // @return info of royalty fee\r\n    function getRoyaltyFeeConfig(address _collection) external view returns(uint256, uint256) {\r\n        RoyaltyFeeConfig memory data = _royaltyFeeConfigs[uint256(uint160(_collection))];\r\n        return (data.fee, data.expiresAt);\r\n    }\r\n\r\n    // @dev withdraw NFT item in DAgora contract by ID and Address\r\n    // @param _tokenID NFT ID\r\n    // @param _tokenAddress NFT Address\r\n    function withdrawNFT(uint256 _tokenID, address _tokenAddress) external onlyOwner {\r\n        require(!_listingNfts[_tokenAddress][_tokenID], \"DAgora Marketplace: Cant withdraw listing NFT\");\r\n        IERC721 meta = IERC721(_tokenAddress);\r\n        meta.transferFrom(address(this), msg.sender,_tokenID);\r\n    }\r\n\r\n    // @dev withdraw token and main token in DAgora contract by amount and token address\r\n    // @param _amount withdraw Amount\r\n    // @param _tokenAddress withdraw token ERC20 - address(0) for main token\r\n    function withdraw(uint256 _amount, address _tokenAddress) external onlyOwner {\r\n        require(_amount > 0);\r\n        if(_tokenAddress == address(0)) {\r\n            payable(msg.sender).transfer(_amount);\r\n        }else{\r\n            IERC20 _token = IERC20(_tokenAddress);\r\n            _token.safeTransfer(msg.sender, _amount);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DAgoraRoyaltyFee\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"AddAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_metaAddress\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_metaUint\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_buyTokenAmount\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_metaAddress\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_metaUint\",\"type\":\"uint256[]\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_tokenAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"}],\"name\":\"CancelListingNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_paymentAddress\",\"type\":\"address\"}],\"name\":\"ChangePaymentToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_profileFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_message\",\"type\":\"bytes32\"}],\"name\":\"ConfigureFixedVariable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"DAgoraPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_tokenAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"EndBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_nfts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_saleByToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_expiresAt\",\"type\":\"uint256\"}],\"name\":\"ListingNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Pay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_marketFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_claimFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalRoyaltyFee\",\"type\":\"uint256\"}],\"name\":\"RegisterPackage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"RemoveAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_metaAddress\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_metaUint\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_buyTokenAmount\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_DAgoraRoyaltyFee\",\"type\":\"address\"}],\"name\":\"SetDAgoraRoyatyFeeNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"UnRegisterPackage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_nftHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_expiresAt\",\"type\":\"uint256\"}],\"name\":\"UpdateAuctionInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_fee\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_expiresAt\",\"type\":\"uint256\"}],\"name\":\"UpdateRoyaltyFee\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAgoraRoyaltyFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"metaAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"metaUint\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"saleByTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"saleByAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16\",\"name\":\"buyByTokenIndex\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct DAgoraMarketplace.BulkBuyParam[]\",\"name\":\"_params\",\"type\":\"tuple[]\"}],\"name\":\"bulkbuy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_metaAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_metaUint\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_saleByTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_saleByAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16\",\"name\":\"_buyByTokenIndex\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_metaAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_metaUint\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_buySaleByTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_buySaleByAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"cancelListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentAddress\",\"type\":\"address\"}],\"name\":\"changePaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_profileFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_message\",\"type\":\"bytes32\"}],\"name\":\"configureFixedVariable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"endBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_nftHash\",\"type\":\"bytes32\"}],\"name\":\"getAuctionInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getPackageInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"}],\"name\":\"getRoyaltyFeeConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_saleByToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiresAt\",\"type\":\"uint256\"}],\"name\":\"listingForAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profileFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRoyaltyFee\",\"type\":\"uint256\"}],\"name\":\"registerPackage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_metaAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_metaUint\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_buyByTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_buyByAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16\",\"name\":\"_saleByTokenIndex\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_fee\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_expiresAt\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyFeeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_byteCodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isCreate2\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"_fee\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_expiresAt\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyFeeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"unRegisterPackage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_nftHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiresAt\",\"type\":\"uint256\"}],\"name\":\"updateAuctionInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DAgoraMarketplace", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000077f56cf9365955486b12c4816992388ee8606f0e0000000000000000000000003153b65ffd72a1c4afa5730916e0fc6f9149dcbb", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f1e2717a1317e631920906581485684261e1eb4178810b1656feb9cfc19953a2"}