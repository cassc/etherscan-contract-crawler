{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@thirdweb-dev/contracts/base/Staking20Base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"../extension/ContractMetadata.sol\\\";\\nimport \\\"../extension/Multicall.sol\\\";\\nimport \\\"../extension/Ownable.sol\\\";\\nimport \\\"../extension/Staking20.sol\\\";\\n\\nimport \\\"../eip/interface/IERC20.sol\\\";\\nimport \\\"../eip/interface/IERC20Metadata.sol\\\";\\n\\nimport { CurrencyTransferLib } from \\\"../lib/CurrencyTransferLib.sol\\\";\\n\\n/**\\n *\\n *  EXTENSION: Staking20\\n *\\n *  The `Staking20Base` smart contract implements Token staking mechanism.\\n *  Allows users to stake their ERC-20 Tokens and earn rewards in form of another ERC-20 tokens.\\n *\\n *  Following features and implementation setup must be noted:\\n *\\n *      - ERC-20 Tokens from only one contract can be staked.\\n *\\n *      - Contract admin can choose to give out rewards by either transferring or minting the rewardToken,\\n *        which is ideally a different ERC20 token. See {_mintRewards}.\\n *\\n *      - To implement custom logic for staking, reward calculation, etc. corresponding functions can be\\n *        overridden from the extension `Staking20`.\\n *\\n *      - Ownership of the contract, with the ability to restrict certain functions to\\n *        only be called by the contract's owner.\\n *\\n *      - Multicall capability to perform multiple actions atomically.\\n *\\n */\\n\\n/// note: This contract is provided as a base contract.\\n//        This is to support a variety of use-cases that can be build on top of this base.\\n//\\n//        Additional functionality such as deposit functions, reward-minting, etc.\\n//        must be implemented by the deployer of this contract, as needed for their use-case.\\n\\ncontract Staking20Base is ContractMetadata, Multicall, Ownable, Staking20 {\\n    /// @dev ERC20 Reward Token address. See {_mintRewards} below.\\n    address public rewardToken;\\n\\n    /// @dev Total amount of reward tokens in the contract.\\n    uint256 private rewardTokenBalance;\\n\\n    constructor(\\n        uint256 _timeUnit,\\n        uint256 _rewardRatioNumerator,\\n        uint256 _rewardRatioDenominator,\\n        address _stakingToken,\\n        address _rewardToken,\\n        address _nativeTokenWrapper\\n    )\\n        Staking20(\\n            _nativeTokenWrapper,\\n            _stakingToken,\\n            IERC20Metadata(_stakingToken).decimals(),\\n            IERC20Metadata(_rewardToken).decimals()\\n        )\\n    {\\n        _setupOwner(msg.sender);\\n        _setStakingCondition(_timeUnit, _rewardRatioNumerator, _rewardRatioDenominator);\\n\\n        require(_rewardToken != _stakingToken, \\\"Reward Token and Staking Token can't be same.\\\");\\n        rewardToken = _rewardToken;\\n    }\\n\\n    /// @dev Lets the contract receive ether to unwrap native tokens.\\n    receive() external payable virtual {\\n        require(msg.sender == nativeTokenWrapper, \\\"caller not native token wrapper.\\\");\\n    }\\n\\n    /// @dev Admin deposits reward tokens.\\n    function depositRewardTokens(uint256 _amount) external payable virtual nonReentrant {\\n        _depositRewardTokens(_amount); // override this for custom logic.\\n    }\\n\\n    /// @dev Admin can withdraw excess reward tokens.\\n    function withdrawRewardTokens(uint256 _amount) external virtual nonReentrant {\\n        _withdrawRewardTokens(_amount); // override this for custom logic.\\n    }\\n\\n    /// @notice View total rewards available in the staking contract.\\n    function getRewardTokenBalance() external view virtual override returns (uint256) {\\n        return rewardTokenBalance;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        Minting logic\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     *  @dev    Mint ERC20 rewards to the staker. Override for custom logic.\\n     *\\n     *  @param _staker    Address for which to calculated rewards.\\n     *  @param _rewards   Amount of tokens to be given out as reward.\\n     *\\n     */\\n    function _mintRewards(address _staker, uint256 _rewards) internal virtual override {\\n        require(_rewards <= rewardTokenBalance, \\\"Not enough reward tokens\\\");\\n        rewardTokenBalance -= _rewards;\\n        CurrencyTransferLib.transferCurrencyWithWrapper(\\n            rewardToken,\\n            address(this),\\n            _staker,\\n            _rewards,\\n            nativeTokenWrapper\\n        );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        Other Internal functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Admin deposits reward tokens -- override for custom logic.\\n    function _depositRewardTokens(uint256 _amount) internal virtual {\\n        require(msg.sender == owner(), \\\"Not authorized\\\");\\n\\n        address _rewardToken = rewardToken == CurrencyTransferLib.NATIVE_TOKEN ? nativeTokenWrapper : rewardToken;\\n\\n        uint256 balanceBefore = IERC20(_rewardToken).balanceOf(address(this));\\n        CurrencyTransferLib.transferCurrencyWithWrapper(\\n            rewardToken,\\n            msg.sender,\\n            address(this),\\n            _amount,\\n            nativeTokenWrapper\\n        );\\n        uint256 actualAmount = IERC20(_rewardToken).balanceOf(address(this)) - balanceBefore;\\n\\n        rewardTokenBalance += actualAmount;\\n    }\\n\\n    /// @dev Admin can withdraw excess reward tokens -- override for custom logic.\\n    function _withdrawRewardTokens(uint256 _amount) internal virtual {\\n        require(msg.sender == owner(), \\\"Not authorized\\\");\\n\\n        // to prevent locking of direct-transferred tokens\\n        rewardTokenBalance = _amount > rewardTokenBalance ? 0 : rewardTokenBalance - _amount;\\n\\n        CurrencyTransferLib.transferCurrencyWithWrapper(\\n            rewardToken,\\n            address(this),\\n            msg.sender,\\n            _amount,\\n            nativeTokenWrapper\\n        );\\n\\n        // The withdrawal shouldn't reduce staking token balance. `>=` accounts for any accidental transfers.\\n        address _stakingToken = stakingToken == CurrencyTransferLib.NATIVE_TOKEN ? nativeTokenWrapper : stakingToken;\\n        require(\\n            IERC20(_stakingToken).balanceOf(address(this)) >= stakingTokenBalance,\\n            \\\"Staking token balance reduced.\\\"\\n        );\\n    }\\n\\n    /// @dev Returns whether staking restrictions can be set in given execution context.\\n    function _canSetStakeConditions() internal view virtual override returns (bool) {\\n        return msg.sender == owner();\\n    }\\n\\n    /// @dev Returns whether contract metadata can be set in the given execution context.\\n    function _canSetContractURI() internal view virtual override returns (bool) {\\n        return msg.sender == owner();\\n    }\\n\\n    /// @dev Returns whether owner can be set in the given execution context.\\n    function _canSetOwner() internal view virtual override returns (bool) {\\n        return msg.sender == owner();\\n    }\\n}\\n\"\r\n    },\r\n    \"@thirdweb-dev/contracts/eip/interface/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@thirdweb-dev/contracts/eip/interface/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC20Metadata interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ninterface IERC20Metadata {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@thirdweb-dev/contracts/extension/ContractMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"./interface/IContractMetadata.sol\\\";\\n\\n/**\\n *  @title   Contract Metadata\\n *  @notice  Thirdweb's `ContractMetadata` is a contract extension for any base contracts. It lets you set a metadata URI\\n *           for you contract.\\n *           Additionally, `ContractMetadata` is necessary for NFT contracts that want royalties to get distributed on OpenSea.\\n */\\n\\nabstract contract ContractMetadata is IContractMetadata {\\n    /// @notice Returns the contract metadata URI.\\n    string public override contractURI;\\n\\n    /**\\n     *  @notice         Lets a contract admin set the URI for contract-level metadata.\\n     *  @dev            Caller should be authorized to setup contractURI, e.g. contract admin.\\n     *                  See {_canSetContractURI}.\\n     *                  Emits {ContractURIUpdated Event}.\\n     *\\n     *  @param _uri     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     */\\n    function setContractURI(string memory _uri) external override {\\n        if (!_canSetContractURI()) {\\n            revert(\\\"Not authorized\\\");\\n        }\\n\\n        _setupContractURI(_uri);\\n    }\\n\\n    /// @dev Lets a contract admin set the URI for contract-level metadata.\\n    function _setupContractURI(string memory _uri) internal {\\n        string memory prevURI = contractURI;\\n        contractURI = _uri;\\n\\n        emit ContractURIUpdated(prevURI, _uri);\\n    }\\n\\n    /// @dev Returns whether contract metadata can be set in the given execution context.\\n    function _canSetContractURI() internal view virtual returns (bool);\\n}\\n\"\r\n    },\r\n    \"@thirdweb-dev/contracts/extension/interface/IContractMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n *  Thirdweb's `ContractMetadata` is a contract extension for any base contracts. It lets you set a metadata URI\\n *  for you contract.\\n *\\n *  Additionally, `ContractMetadata` is necessary for NFT contracts that want royalties to get distributed on OpenSea.\\n */\\n\\ninterface IContractMetadata {\\n    /// @dev Returns the metadata URI of the contract.\\n    function contractURI() external view returns (string memory);\\n\\n    /**\\n     *  @dev Sets contract URI for the storefront-level metadata of the contract.\\n     *       Only module admin can call this function.\\n     */\\n    function setContractURI(string calldata _uri) external;\\n\\n    /// @dev Emitted when the contract URI is updated.\\n    event ContractURIUpdated(string prevURI, string newURI);\\n}\\n\"\r\n    },\r\n    \"@thirdweb-dev/contracts/extension/interface/IMulticall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\ninterface IMulticall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     */\\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results);\\n}\\n\"\r\n    },\r\n    \"@thirdweb-dev/contracts/extension/interface/IOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n *  Thirdweb's `Ownable` is a contract extension to be used with any base contract. It exposes functions for setting and reading\\n *  who the 'owner' of the inheriting smart contract is, and lets the inheriting contract perform conditional logic that uses\\n *  information about who the contract's owner is.\\n */\\n\\ninterface IOwnable {\\n    /// @dev Returns the owner of the contract.\\n    function owner() external view returns (address);\\n\\n    /// @dev Lets a module admin set a new owner for the contract. The new owner must be a module admin.\\n    function setOwner(address _newOwner) external;\\n\\n    /// @dev Emitted when a new Owner is set.\\n    event OwnerUpdated(address indexed prevOwner, address indexed newOwner);\\n}\\n\"\r\n    },\r\n    \"@thirdweb-dev/contracts/extension/interface/IStaking20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.11;\\n\\n/// @author thirdweb\\n\\ninterface IStaking20 {\\n    /// @dev Emitted when tokens are staked.\\n    event TokensStaked(address indexed staker, uint256 amount);\\n\\n    /// @dev Emitted when a tokens are withdrawn.\\n    event TokensWithdrawn(address indexed staker, uint256 amount);\\n\\n    /// @dev Emitted when a staker claims staking rewards.\\n    event RewardsClaimed(address indexed staker, uint256 rewardAmount);\\n\\n    /// @dev Emitted when contract admin updates timeUnit.\\n    event UpdatedTimeUnit(uint256 oldTimeUnit, uint256 newTimeUnit);\\n\\n    /// @dev Emitted when contract admin updates rewardsPerUnitTime.\\n    event UpdatedRewardRatio(\\n        uint256 oldNumerator,\\n        uint256 newNumerator,\\n        uint256 oldDenominator,\\n        uint256 newDenominator\\n    );\\n\\n    /// @dev Emitted when contract admin updates minimum staking amount.\\n    event UpdatedMinStakeAmount(uint256 oldAmount, uint256 newAmount);\\n\\n    /**\\n     *  @notice Staker Info.\\n     *\\n     *  @param amountStaked             Total number of tokens staked by the staker.\\n     *\\n     *  @param timeOfLastUpdate         Last reward-update timestamp.\\n     *\\n     *  @param unclaimedRewards         Rewards accumulated but not claimed by user yet.\\n     *\\n     *  @param conditionIdOflastUpdate  Condition-Id when rewards were last updated for user.\\n     */\\n    struct Staker {\\n        uint256 amountStaked;\\n        uint256 timeOfLastUpdate;\\n        uint256 unclaimedRewards;\\n        uint256 conditionIdOflastUpdate;\\n    }\\n\\n    /**\\n     *  @notice Staking Condition.\\n     *\\n     *  @param timeUnit                 Unit of time specified in number of seconds. Can be set as 1 seconds, 1 days, 1 hours, etc.\\n     *\\n     *  @param rewardRatioNumerator     Rewards ratio is the number of reward tokens for a number of staked tokens,\\n     *                                  per unit of time.\\n     *\\n     *  @param rewardRatioDenominator   Rewards ratio is the number of reward tokens for a number of staked tokens,\\n     *                                  per unit of time.\\n     *\\n     *  @param startTimestamp           Condition start timestamp.\\n     *\\n     *  @param endTimestamp             Condition end timestamp.\\n     */\\n    struct StakingCondition {\\n        uint256 timeUnit;\\n        uint256 rewardRatioNumerator;\\n        uint256 rewardRatioDenominator;\\n        uint256 startTimestamp;\\n        uint256 endTimestamp;\\n    }\\n\\n    /**\\n     *  @notice Stake ERC721 Tokens.\\n     *\\n     *  @param amount    Amount to stake.\\n     */\\n    function stake(uint256 amount) external payable;\\n\\n    /**\\n     *  @notice Withdraw staked tokens.\\n     *\\n     *  @param amount    Amount to withdraw.\\n     */\\n    function withdraw(uint256 amount) external;\\n\\n    /**\\n     *  @notice Claim accumulated rewards.\\n     *\\n     */\\n    function claimRewards() external;\\n\\n    /**\\n     *  @notice View amount staked and total rewards for a user.\\n     *\\n     *  @param staker    Address for which to calculated rewards.\\n     */\\n    function getStakeInfo(address staker) external view returns (uint256 _tokensStaked, uint256 _rewards);\\n}\\n\"\r\n    },\r\n    \"@thirdweb-dev/contracts/extension/Multicall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"../lib/TWAddress.sol\\\";\\nimport \\\"./interface/IMulticall.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\ncontract Multicall is IMulticall {\\n    /**\\n     *  @notice Receives and executes a batch of function calls on this contract.\\n     *  @dev Receives and executes a batch of function calls on this contract.\\n     *\\n     *  @param data The bytes data that makes up the batch of function calls to execute.\\n     *  @return results The bytes data that makes up the result of the batch of function calls executed.\\n     */\\n    function multicall(bytes[] calldata data) external virtual override returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = TWAddress.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\"\r\n    },\r\n    \"@thirdweb-dev/contracts/extension/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"./interface/IOwnable.sol\\\";\\n\\n/**\\n *  @title   Ownable\\n *  @notice  Thirdweb's `Ownable` is a contract extension to be used with any base contract. It exposes functions for setting and reading\\n *           who the 'owner' of the inheriting smart contract is, and lets the inheriting contract perform conditional logic that uses\\n *           information about who the contract's owner is.\\n */\\n\\nabstract contract Ownable is IOwnable {\\n    /// @dev Owner of the contract (purpose: OpenSea compatibility)\\n    address private _owner;\\n\\n    /// @dev Reverts if caller is not the owner.\\n    modifier onlyOwner() {\\n        if (msg.sender != _owner) {\\n            revert(\\\"Not authorized\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     *  @notice Returns the owner of the contract.\\n     */\\n    function owner() public view override returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     *  @notice Lets an authorized wallet set a new owner for the contract.\\n     *  @param _newOwner The address to set as the new owner of the contract.\\n     */\\n    function setOwner(address _newOwner) external override {\\n        if (!_canSetOwner()) {\\n            revert(\\\"Not authorized\\\");\\n        }\\n        _setupOwner(_newOwner);\\n    }\\n\\n    /// @dev Lets a contract admin set a new owner for the contract. The new owner must be a contract admin.\\n    function _setupOwner(address _newOwner) internal {\\n        address _prevOwner = _owner;\\n        _owner = _newOwner;\\n\\n        emit OwnerUpdated(_prevOwner, _newOwner);\\n    }\\n\\n    /// @dev Returns whether owner can be set in the given execution context.\\n    function _canSetOwner() internal view virtual returns (bool);\\n}\\n\"\r\n    },\r\n    \"@thirdweb-dev/contracts/extension/Staking20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.11;\\n\\n/// @author thirdweb\\n\\nimport \\\"../openzeppelin-presets/security/ReentrancyGuard.sol\\\";\\nimport \\\"../openzeppelin-presets/utils/math/SafeMath.sol\\\";\\nimport \\\"../eip/interface/IERC20.sol\\\";\\nimport \\\"../lib/CurrencyTransferLib.sol\\\";\\n\\nimport \\\"./interface/IStaking20.sol\\\";\\n\\nabstract contract Staking20 is ReentrancyGuard, IStaking20 {\\n    /*///////////////////////////////////////////////////////////////\\n                            State variables / Mappings\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev The address of the native token wrapper contract.\\n    address internal immutable nativeTokenWrapper;\\n\\n    ///@dev Address of ERC20 contract -- staked tokens belong to this contract.\\n    address public stakingToken;\\n\\n    /// @dev Decimals of staking token.\\n    uint256 public stakingTokenDecimals;\\n\\n    /// @dev Decimals of reward token.\\n    uint256 public rewardTokenDecimals;\\n\\n    /// @dev List of accounts that have staked that token-id.\\n    address[] public stakersArray;\\n\\n    /// @dev Total amount of tokens staked in the contract.\\n    uint256 public stakingTokenBalance;\\n\\n    ///@dev Next staking condition Id. Tracks number of conditon updates so far.\\n    uint256 private nextConditionId;\\n\\n    ///@dev Mapping staker address to Staker struct. See {struct IStaking20.Staker}.\\n    mapping(address => Staker) public stakers;\\n\\n    ///@dev Mapping from condition Id to staking condition. See {struct IStaking721.StakingCondition}\\n    mapping(uint256 => StakingCondition) private stakingConditions;\\n\\n    constructor(\\n        address _nativeTokenWrapper,\\n        address _stakingToken,\\n        uint256 _stakingTokenDecimals,\\n        uint256 _rewardTokenDecimals\\n    ) ReentrancyGuard() {\\n        require(_stakingToken != address(0) && _nativeTokenWrapper != address(0), \\\"address 0\\\");\\n        require(_stakingTokenDecimals != 0 && _rewardTokenDecimals != 0, \\\"decimals 0\\\");\\n\\n        nativeTokenWrapper = _nativeTokenWrapper;\\n        stakingToken = _stakingToken;\\n        stakingTokenDecimals = _stakingTokenDecimals;\\n        rewardTokenDecimals = _rewardTokenDecimals;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        External/Public Functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     *  @notice    Stake ERC20 Tokens.\\n     *\\n     *  @dev       See {_stake}. Override that to implement custom logic.\\n     *\\n     *  @param _amount    Amount to stake.\\n     */\\n    function stake(uint256 _amount) external payable nonReentrant {\\n        _stake(_amount);\\n    }\\n\\n    /**\\n     *  @notice    Withdraw staked ERC20 tokens.\\n     *\\n     *  @dev       See {_withdraw}. Override that to implement custom logic.\\n     *\\n     *  @param _amount    Amount to withdraw.\\n     */\\n    function withdraw(uint256 _amount) external nonReentrant {\\n        _withdraw(_amount);\\n    }\\n\\n    /**\\n     *  @notice    Claim accumulated rewards.\\n     *\\n     *  @dev       See {_claimRewards}. Override that to implement custom logic.\\n     *             See {_calculateRewards} for reward-calculation logic.\\n     */\\n    function claimRewards() external nonReentrant {\\n        _claimRewards();\\n    }\\n\\n    /**\\n     *  @notice  Set time unit. Set as a number of seconds.\\n     *           Could be specified as -- x * 1 hours, x * 1 days, etc.\\n     *\\n     *  @dev     Only admin/authorized-account can call it.\\n     *\\n     *  @param _timeUnit    New time unit.\\n     */\\n    function setTimeUnit(uint256 _timeUnit) external virtual {\\n        if (!_canSetStakeConditions()) {\\n            revert(\\\"Not authorized\\\");\\n        }\\n\\n        StakingCondition memory condition = stakingConditions[nextConditionId - 1];\\n        require(_timeUnit != condition.timeUnit, \\\"Time-unit unchanged.\\\");\\n\\n        _setStakingCondition(_timeUnit, condition.rewardRatioNumerator, condition.rewardRatioDenominator);\\n\\n        emit UpdatedTimeUnit(condition.timeUnit, _timeUnit);\\n    }\\n\\n    /**\\n     *  @notice  Set rewards per unit of time.\\n     *           Interpreted as (numerator/denominator) rewards per second/per day/etc based on time-unit.\\n     *\\n     *           For e.g., ratio of 1/20 would mean 1 reward token for every 20 tokens staked.\\n     *\\n     *  @dev     Only admin/authorized-account can call it.\\n     *\\n     *  @param _numerator    Reward ratio numerator.\\n     *  @param _denominator  Reward ratio denominator.\\n     */\\n    function setRewardRatio(uint256 _numerator, uint256 _denominator) external virtual {\\n        if (!_canSetStakeConditions()) {\\n            revert(\\\"Not authorized\\\");\\n        }\\n\\n        StakingCondition memory condition = stakingConditions[nextConditionId - 1];\\n        require(\\n            _numerator != condition.rewardRatioNumerator || _denominator != condition.rewardRatioDenominator,\\n            \\\"Reward ratio unchanged.\\\"\\n        );\\n        _setStakingCondition(condition.timeUnit, _numerator, _denominator);\\n\\n        emit UpdatedRewardRatio(\\n            condition.rewardRatioNumerator,\\n            _numerator,\\n            condition.rewardRatioDenominator,\\n            _denominator\\n        );\\n    }\\n\\n    /**\\n     *  @notice View amount staked and rewards for a user.\\n     *\\n     *  @param _staker          Address for which to calculated rewards.\\n     *  @return _tokensStaked   Amount of tokens staked.\\n     *  @return _rewards        Available reward amount.\\n     */\\n    function getStakeInfo(address _staker) external view virtual returns (uint256 _tokensStaked, uint256 _rewards) {\\n        _tokensStaked = stakers[_staker].amountStaked;\\n        _rewards = _availableRewards(_staker);\\n    }\\n\\n    function getTimeUnit() public view returns (uint256 _timeUnit) {\\n        _timeUnit = stakingConditions[nextConditionId - 1].timeUnit;\\n    }\\n\\n    function getRewardRatio() public view returns (uint256 _numerator, uint256 _denominator) {\\n        _numerator = stakingConditions[nextConditionId - 1].rewardRatioNumerator;\\n        _denominator = stakingConditions[nextConditionId - 1].rewardRatioDenominator;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            Internal Functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Staking logic. Override to add custom logic.\\n    function _stake(uint256 _amount) internal virtual {\\n        require(_amount != 0, \\\"Staking 0 tokens\\\");\\n\\n        address _stakingToken;\\n        if (stakingToken == CurrencyTransferLib.NATIVE_TOKEN) {\\n            _stakingToken = nativeTokenWrapper;\\n        } else {\\n            require(msg.value == 0, \\\"Value not 0\\\");\\n            _stakingToken = stakingToken;\\n        }\\n\\n        if (stakers[_stakeMsgSender()].amountStaked > 0) {\\n            _updateUnclaimedRewardsForStaker(_stakeMsgSender());\\n        } else {\\n            stakersArray.push(_stakeMsgSender());\\n            stakers[_stakeMsgSender()].timeOfLastUpdate = block.timestamp;\\n            stakers[_stakeMsgSender()].conditionIdOflastUpdate = nextConditionId - 1;\\n        }\\n\\n        uint256 balanceBefore = IERC20(_stakingToken).balanceOf(address(this));\\n        CurrencyTransferLib.transferCurrencyWithWrapper(\\n            stakingToken,\\n            _stakeMsgSender(),\\n            address(this),\\n            _amount,\\n            nativeTokenWrapper\\n        );\\n        uint256 actualAmount = IERC20(_stakingToken).balanceOf(address(this)) - balanceBefore;\\n\\n        stakers[_stakeMsgSender()].amountStaked += actualAmount;\\n        stakingTokenBalance += actualAmount;\\n\\n        emit TokensStaked(_stakeMsgSender(), actualAmount);\\n    }\\n\\n    /// @dev Withdraw logic. Override to add custom logic.\\n    function _withdraw(uint256 _amount) internal virtual {\\n        uint256 _amountStaked = stakers[_stakeMsgSender()].amountStaked;\\n        require(_amount != 0, \\\"Withdrawing 0 tokens\\\");\\n        require(_amountStaked >= _amount, \\\"Withdrawing more than staked\\\");\\n\\n        _updateUnclaimedRewardsForStaker(_stakeMsgSender());\\n\\n        if (_amountStaked == _amount) {\\n            address[] memory _stakersArray = stakersArray;\\n            for (uint256 i = 0; i < _stakersArray.length; ++i) {\\n                if (_stakersArray[i] == _stakeMsgSender()) {\\n                    stakersArray[i] = _stakersArray[_stakersArray.length - 1];\\n                    stakersArray.pop();\\n                    break;\\n                }\\n            }\\n        }\\n        stakers[_stakeMsgSender()].amountStaked -= _amount;\\n        stakingTokenBalance -= _amount;\\n\\n        CurrencyTransferLib.transferCurrencyWithWrapper(\\n            stakingToken,\\n            address(this),\\n            _stakeMsgSender(),\\n            _amount,\\n            nativeTokenWrapper\\n        );\\n\\n        emit TokensWithdrawn(_stakeMsgSender(), _amount);\\n    }\\n\\n    /// @dev Logic for claiming rewards. Override to add custom logic.\\n    function _claimRewards() internal virtual {\\n        uint256 rewards = stakers[_stakeMsgSender()].unclaimedRewards + _calculateRewards(_stakeMsgSender());\\n\\n        require(rewards != 0, \\\"No rewards\\\");\\n\\n        stakers[_stakeMsgSender()].timeOfLastUpdate = block.timestamp;\\n        stakers[_stakeMsgSender()].unclaimedRewards = 0;\\n        stakers[_stakeMsgSender()].conditionIdOflastUpdate = nextConditionId - 1;\\n\\n        _mintRewards(_stakeMsgSender(), rewards);\\n\\n        emit RewardsClaimed(_stakeMsgSender(), rewards);\\n    }\\n\\n    /// @dev View available rewards for a user.\\n    function _availableRewards(address _staker) internal view virtual returns (uint256 _rewards) {\\n        if (stakers[_staker].amountStaked == 0) {\\n            _rewards = stakers[_staker].unclaimedRewards;\\n        } else {\\n            _rewards = stakers[_staker].unclaimedRewards + _calculateRewards(_staker);\\n        }\\n    }\\n\\n    /// @dev Update unclaimed rewards for a users. Called for every state change for a user.\\n    function _updateUnclaimedRewardsForStaker(address _staker) internal virtual {\\n        uint256 rewards = _calculateRewards(_staker);\\n        stakers[_staker].unclaimedRewards += rewards;\\n        stakers[_staker].timeOfLastUpdate = block.timestamp;\\n        stakers[_staker].conditionIdOflastUpdate = nextConditionId - 1;\\n    }\\n\\n    /// @dev Set staking conditions.\\n    function _setStakingCondition(\\n        uint256 _timeUnit,\\n        uint256 _numerator,\\n        uint256 _denominator\\n    ) internal virtual {\\n        require(_denominator != 0, \\\"divide by 0\\\");\\n        require(_timeUnit != 0, \\\"time-unit can't be 0\\\");\\n        uint256 conditionId = nextConditionId;\\n        nextConditionId += 1;\\n\\n        stakingConditions[conditionId] = StakingCondition({\\n            timeUnit: _timeUnit,\\n            rewardRatioNumerator: _numerator,\\n            rewardRatioDenominator: _denominator,\\n            startTimestamp: block.timestamp,\\n            endTimestamp: 0\\n        });\\n\\n        if (conditionId > 0) {\\n            stakingConditions[conditionId - 1].endTimestamp = block.timestamp;\\n        }\\n    }\\n\\n    /// @dev Calculate rewards for a staker.\\n    function _calculateRewards(address _staker) internal view virtual returns (uint256 _rewards) {\\n        Staker memory staker = stakers[_staker];\\n\\n        uint256 _stakerConditionId = staker.conditionIdOflastUpdate;\\n        uint256 _nextConditionId = nextConditionId;\\n\\n        for (uint256 i = _stakerConditionId; i < _nextConditionId; i += 1) {\\n            StakingCondition memory condition = stakingConditions[i];\\n\\n            uint256 startTime = i != _stakerConditionId ? condition.startTimestamp : staker.timeOfLastUpdate;\\n            uint256 endTime = condition.endTimestamp != 0 ? condition.endTimestamp : block.timestamp;\\n\\n            (bool noOverflowProduct, uint256 rewardsProduct) = SafeMath.tryMul(\\n                (endTime - startTime) * staker.amountStaked,\\n                condition.rewardRatioNumerator\\n            );\\n            (bool noOverflowSum, uint256 rewardsSum) = SafeMath.tryAdd(\\n                _rewards,\\n                (rewardsProduct / condition.timeUnit) / condition.rewardRatioDenominator\\n            );\\n\\n            _rewards = noOverflowProduct && noOverflowSum ? rewardsSum : _rewards;\\n        }\\n\\n        (, _rewards) = SafeMath.tryMul(_rewards, 10**rewardTokenDecimals);\\n\\n        _rewards /= (10**stakingTokenDecimals);\\n    }\\n\\n    /*////////////////////////////////////////////////////////////////////\\n        Optional hooks that can be implemented in the derived contract\\n    ///////////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Exposes the ability to override the msg sender -- support ERC2771.\\n    function _stakeMsgSender() internal virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n        Virtual functions to be implemented in derived contract\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     *  @notice View total rewards available in the staking contract.\\n     *\\n     */\\n    function getRewardTokenBalance() external view virtual returns (uint256 _rewardsAvailableInContract);\\n\\n    /**\\n     *  @dev    Mint/Transfer ERC20 rewards to the staker. Must override.\\n     *\\n     *  @param _staker    Address for which to calculated rewards.\\n     *  @param _rewards   Amount of tokens to be given out as reward.\\n     *\\n     *  For example, override as below to mint ERC20 rewards:\\n     *\\n     * ```\\n     *  function _mintRewards(address _staker, uint256 _rewards) internal override {\\n     *\\n     *      TokenERC20(rewardTokenAddress).mintTo(_staker, _rewards);\\n     *\\n     *  }\\n     * ```\\n     */\\n    function _mintRewards(address _staker, uint256 _rewards) internal virtual;\\n\\n    /**\\n     *  @dev    Returns whether staking restrictions can be set in given execution context.\\n     *          Must override.\\n     *\\n     *\\n     *  For example, override as below to restrict access to admin:\\n     *\\n     * ```\\n     *  function _canSetStakeConditions() internal override {\\n     *\\n     *      return msg.sender == adminAddress;\\n     *\\n     *  }\\n     * ```\\n     */\\n    function _canSetStakeConditions() internal view virtual returns (bool);\\n}\\n\"\r\n    },\r\n    \"@thirdweb-dev/contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@thirdweb-dev/contracts/lib/CurrencyTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n// Helper interfaces\\nimport { IWETH } from \\\"../interfaces/IWETH.sol\\\";\\n\\nimport \\\"../openzeppelin-presets/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary CurrencyTransferLib {\\n    using SafeERC20 for IERC20;\\n\\n    /// @dev The address interpreted as native token of the chain.\\n    address public constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /// @dev Transfers a given amount of currency.\\n    function transferCurrency(\\n        address _currency,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        if (_currency == NATIVE_TOKEN) {\\n            safeTransferNativeToken(_to, _amount);\\n        } else {\\n            safeTransferERC20(_currency, _from, _to, _amount);\\n        }\\n    }\\n\\n    /// @dev Transfers a given amount of currency. (With native token wrapping)\\n    function transferCurrencyWithWrapper(\\n        address _currency,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        address _nativeTokenWrapper\\n    ) internal {\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        if (_currency == NATIVE_TOKEN) {\\n            if (_from == address(this)) {\\n                // withdraw from weth then transfer withdrawn native token to recipient\\n                IWETH(_nativeTokenWrapper).withdraw(_amount);\\n                safeTransferNativeTokenWithWrapper(_to, _amount, _nativeTokenWrapper);\\n            } else if (_to == address(this)) {\\n                // store native currency in weth\\n                require(_amount == msg.value, \\\"msg.value != amount\\\");\\n                IWETH(_nativeTokenWrapper).deposit{ value: _amount }();\\n            } else {\\n                safeTransferNativeTokenWithWrapper(_to, _amount, _nativeTokenWrapper);\\n            }\\n        } else {\\n            safeTransferERC20(_currency, _from, _to, _amount);\\n        }\\n    }\\n\\n    /// @dev Transfer `amount` of ERC20 token from `from` to `to`.\\n    function safeTransferERC20(\\n        address _currency,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        if (_from == _to) {\\n            return;\\n        }\\n\\n        if (_from == address(this)) {\\n            IERC20(_currency).safeTransfer(_to, _amount);\\n        } else {\\n            IERC20(_currency).safeTransferFrom(_from, _to, _amount);\\n        }\\n    }\\n\\n    /// @dev Transfers `amount` of native token to `to`.\\n    function safeTransferNativeToken(address to, uint256 value) internal {\\n        // solhint-disable avoid-low-level-calls\\n        // slither-disable-next-line low-level-calls\\n        (bool success, ) = to.call{ value: value }(\\\"\\\");\\n        require(success, \\\"native token transfer failed\\\");\\n    }\\n\\n    /// @dev Transfers `amount` of native token to `to`. (With native token wrapping)\\n    function safeTransferNativeTokenWithWrapper(\\n        address to,\\n        uint256 value,\\n        address _nativeTokenWrapper\\n    ) internal {\\n        // solhint-disable avoid-low-level-calls\\n        // slither-disable-next-line low-level-calls\\n        (bool success, ) = to.call{ value: value }(\\\"\\\");\\n        if (!success) {\\n            IWETH(_nativeTokenWrapper).deposit{ value: value }();\\n            IERC20(_nativeTokenWrapper).safeTransfer(to, value);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@thirdweb-dev/contracts/lib/TWAddress.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary TWAddress {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * [EIP1884](https://eips.ethereum.org/EIPS/eip-1884) increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@thirdweb-dev/contracts/openzeppelin-presets/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract ReentrancyGuard {\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@thirdweb-dev/contracts/openzeppelin-presets/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../../eip/interface/IERC20.sol\\\";\\nimport \\\"../../../../lib/TWAddress.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using TWAddress for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@thirdweb-dev/contracts/openzeppelin-presets/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ITerminus.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Interface generated by solface: https://github.com/bugout-dev/solface\\n// solface version: 0.0.5\\n// Interface ID: dbbee324\\ninterface ITerminus {\\n    // structs\\n\\n    // events\\n    event ApprovalForAll(address account, address operator, bool approved);\\n    event PoolMintBatch(\\n        uint256 id,\\n        address operator,\\n        address from,\\n        address[] toAddresses,\\n        uint256[] amounts\\n    );\\n    event TransferBatch(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n    event TransferSingle(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value\\n    );\\n    event URI(string value, uint256 id);\\n\\n    // functions\\n    // Selector: 85bc82e2\\n    function approveForPool(uint256 poolID, address operator) external;\\n\\n    // Selector: 00fdd58e\\n    function balanceOf(\\n        address account,\\n        uint256 id\\n    ) external view returns (uint256);\\n\\n    // Selector: 4e1273f4\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) external view returns (uint256[] memory);\\n\\n    // Selector: f5298aca\\n    function burn(address from, uint256 poolID, uint256 amount) external;\\n\\n    // Selector: e8a3d485\\n    function contractURI() external view returns (string memory);\\n\\n    // Selector: 3bad2d82\\n    function createPoolV1(\\n        uint256 _capacity,\\n        bool _transferable,\\n        bool _burnable\\n    ) external returns (uint256);\\n\\n    // Selector: 84fa03a1\\n    function createPoolV2(\\n        uint256 _capacity,\\n        bool _transferable,\\n        bool _burnable,\\n        string memory poolURI\\n    ) external returns (uint256);\\n\\n    // Selector: b507ef52\\n    function createSimplePool(uint256 _capacity) external returns (uint256);\\n\\n    // Selector: e985e9c5\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool);\\n\\n    // Selector: 027b3fc2\\n    function isApprovedForPool(\\n        uint256 poolID,\\n        address operator\\n    ) external view returns (bool);\\n\\n    // Selector: 731133e9\\n    function mint(\\n        address to,\\n        uint256 poolID,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n\\n    // Selector: 1f7fdffa\\n    function mintBatch(\\n        address to,\\n        uint256[] memory poolIDs,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external;\\n\\n    // Selector: 3013ce29\\n    function paymentToken() external view returns (address);\\n\\n    // Selector: 8925d013\\n    function poolBasePrice() external view returns (uint256);\\n\\n    // Selector: 3c50a3c5\\n    function poolIsBurnable(uint256 poolID) external view returns (bool);\\n\\n    // Selector: 69453ce9\\n    function poolIsTransferable(uint256 poolID) external view returns (bool);\\n\\n    // Selector: 21adca96\\n    function poolMintBatch(\\n        uint256 id,\\n        address[] memory toAddresses,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    // Selector: 2eb2c2d6\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external;\\n\\n    // Selector: f242432a\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n\\n    // Selector: a22cb465\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    // Selector: 938e3d7b\\n    function setContractURI(string memory _contractURI) external;\\n\\n    // Selector: 92eefe9b\\n    function setController(address newController) external;\\n\\n    // Selector: 6a326ab1\\n    function setPaymentToken(address newPaymentToken) external;\\n\\n    // Selector: 78cf2e84\\n    function setPoolBasePrice(uint256 newBasePrice) external;\\n\\n    // Selector: 2365c859\\n    function setPoolBurnable(uint256 poolID, bool burnable) external;\\n\\n    // Selector: dc55d0b2\\n    function setPoolController(uint256 poolID, address newController) external;\\n\\n    // Selector: f3dc0a85\\n    function setPoolTransferable(uint256 poolID, bool transferable) external;\\n\\n    // Selector: 862440e2\\n    function setURI(uint256 poolID, string memory poolURI) external;\\n\\n    // Selector: 01ffc9a7\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // Selector: 366e59e3\\n    function terminusController() external view returns (address);\\n\\n    // Selector: 5dc8bdf8\\n    function terminusPoolCapacity(\\n        uint256 poolID\\n    ) external view returns (uint256);\\n\\n    // Selector: d0c402e5\\n    function terminusPoolController(\\n        uint256 poolID\\n    ) external view returns (address);\\n\\n    // Selector: a44cfc82\\n    function terminusPoolSupply(uint256 poolID) external view returns (uint256);\\n\\n    // Selector: ab3c7e52\\n    function totalPools() external view returns (uint256);\\n\\n    // Selector: 1fbeae86\\n    function unapproveForPool(uint256 poolID, address operator) external;\\n\\n    // Selector: 0e89341c\\n    function uri(uint256 poolID) external view returns (string memory);\\n\\n    // Selector: 0e7afec5\\n    function withdrawPayments(address toAddress, uint256 amount) external;\\n\\n    // errors\\n}\\n\"\r\n    },\r\n    \"contracts/Staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"@thirdweb-dev/contracts/base/Staking20Base.sol\\\";\\n\\ncontract Staking is Ownable, Staking20Base {\\n    uint256 public lockTimeUnit = 50 days;\\n    mapping(address => uint256) public lockTime;\\n\\n    constructor(\\n        uint256 _timeUnit,\\n        uint256 _rewardRatioNumerator,\\n        uint256 _rewardRatioDenominator,\\n        address _stakingToken,\\n        address _rewardToken,\\n        address _nativeTokenWrapper\\n    )\\n        Staking20Base(\\n            _timeUnit,\\n            _rewardRatioNumerator,\\n            _rewardRatioDenominator,\\n            _stakingToken,\\n            _rewardToken,\\n            _nativeTokenWrapper\\n        )\\n    {}\\n\\n    function setLockTimeUnit(uint256 _lockTimeUnit) external onlyOwner {\\n        lockTimeUnit = _lockTimeUnit;\\n    }\\n\\n    function _stake(uint256 _amount) internal virtual override {\\n        lockTime[msg.sender] = block.timestamp + lockTimeUnit;\\n        super._stake(_amount);\\n    }\\n\\n    function _withdraw(uint256 _amount) internal virtual override {\\n        require(lockTime[msg.sender] <= block.timestamp, \\\"Staking: still locked\\\");\\n        super._withdraw(_amount);\\n    }\\n\\n    function _mintRewards(address _staker, uint256 _rewards) internal override {\\n        // nothing to do\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/StakingV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"@thirdweb-dev/contracts/base/Staking20Base.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport {Staking} from \\\"./Staking.sol\\\";\\nimport {VILToken} from \\\"./VILToken.sol\\\";\\nimport {ITerminus} from \\\"./ITerminus.sol\\\";\\n\\ncontract StakingV2 is Ownable, Staking20Base, ERC1155Holder {\\n    struct Deposit {\\n        uint256 unlockAt;\\n        uint256 amount;\\n    }\\n\\n    uint256 public lockTimeUnit = 50 days;\\n    uint256 public lootboxID;\\n    uint256 public minStakeAmount = 10000000;\\n    uint256 public bonusMultiplier = 2;\\n    Staking public previousStakingContract;\\n    VILToken public vilToken;\\n    ITerminus public terminus;\\n    mapping(address => bool) bonusWhitelist;\\n    mapping(address => Deposit[]) deposits;\\n\\n    constructor(\\n        uint256 _timeUnit,\\n        uint256 _rewardRatioNumerator,\\n        uint256 _rewardRatioDenominator,\\n        address _stakingToken,\\n        address _rewardToken,\\n        address _nativeTokenWrapper,\\n        address payable _previousStakingContract,\\n        address payable _vilToken,\\n        address _terminus,\\n        uint256 _lootboxID\\n    )\\n        Staking20Base(\\n            _timeUnit,\\n            _rewardRatioNumerator,\\n            _rewardRatioDenominator,\\n            _stakingToken,\\n            _rewardToken,\\n            _nativeTokenWrapper\\n        )\\n    {\\n        previousStakingContract = Staking(_previousStakingContract);\\n        vilToken = VILToken(_vilToken);\\n        terminus = ITerminus(_terminus);\\n        lootboxID = _lootboxID;\\n    }\\n\\n    function setLockTimeUnit(uint256 _lockTimeUnit) external onlyOwner {\\n        lockTimeUnit = _lockTimeUnit;\\n    }\\n\\n    function setPreviousStakingContract(address payable _previousStakingContract) external onlyOwner {\\n        previousStakingContract = Staking(_previousStakingContract);\\n    }\\n\\n    function setVilToken(address payable _vilToken) external onlyOwner {\\n        vilToken = VILToken(_vilToken);\\n    }\\n\\n    function setTerminus(address _terminus) external onlyOwner {\\n        terminus = ITerminus(_terminus);\\n    }\\n\\n    function setLootboxID(uint256 _lootboxID) external onlyOwner {\\n        lootboxID = _lootboxID;\\n    }\\n\\n    function setMinStakeAmount(uint256 _minStakeAmount) external onlyOwner {\\n        minStakeAmount = _minStakeAmount;\\n    }\\n\\n    function setBonusMultiplier(uint256 _bonusMultiplier) external onlyOwner {\\n        bonusMultiplier = _bonusMultiplier;\\n    }\\n\\n    function checkWhitelist(address _address) external view returns (bool) {\\n        return bonusWhitelist[_address];\\n    }\\n\\n    function setBonusWhitelist(address[] memory _addresses, bool _isWhitelisted) external onlyOwner {\\n        for (uint256 i = 0; i < _addresses.length; i++) {\\n            bonusWhitelist[_addresses[i]] = _isWhitelisted;\\n        }\\n    }\\n\\n    function getDeposits(address _address) external view returns (Deposit[] memory) {\\n        return deposits[_address];\\n    }\\n\\n    function _stake(uint256 _amount) internal virtual override {\\n        uint256 unlockAt = block.timestamp + lockTimeUnit;\\n        deposits[msg.sender].push(Deposit(unlockAt, _amount));\\n\\n        uint256 decimals = vilToken.decimals();\\n        uint256 numBoxes = _amount / (minStakeAmount * (10 ** decimals));\\n\\n        if (bonusWhitelist[msg.sender]) {\\n            numBoxes *= bonusMultiplier;\\n            bonusWhitelist[msg.sender] = false;\\n        }\\n\\n        terminus.mint(address(this), lootboxID, numBoxes, \\\"\\\");\\n        terminus.safeTransferFrom(address(this), msg.sender, lootboxID, numBoxes, \\\"\\\");\\n        super._stake(_amount);\\n    }\\n\\n    function _withdraw(uint256 _amount) internal virtual override {\\n        require(_amount > 0, \\\"Staking: nothing to withdraw\\\");\\n\\n        uint256 availableToWithdraw = 0;\\n\\n        for (uint256 i = 0; i < deposits[msg.sender].length; i++) {\\n            Deposit storage deposit = deposits[msg.sender][i];\\n\\n            if (deposit.unlockAt <= block.timestamp) {\\n                availableToWithdraw += deposit.amount;\\n                delete deposits[msg.sender][i];\\n            }\\n        }\\n\\n        require(availableToWithdraw >= _amount, \\\"Staking: not enough unlocked amount\\\");\\n\\n        uint256 leftoverAmount = availableToWithdraw - _amount;\\n        if (leftoverAmount > 0) {\\n            deposits[msg.sender].push(Deposit(block.timestamp, leftoverAmount));\\n        }\\n\\n        super._withdraw(_amount);\\n    }\\n\\n    function _mintRewards(address _staker, uint256 _rewards) internal override {\\n        // nothing to do\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/VILToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract VILToken is ERC20, Ownable {\\n    // the max total supply is 1000000000000 Tokens\\n    uint256 public constant maxTotalSupply = 1000000000000 * 10 ** 18;\\n\\n    mapping(address => bool) whitelist;\\n\\n    constructor() ERC20(\\\"Villain Coin\\\", \\\"VIL\\\") {}\\n\\n    // Function to receive Ether. msg.data must be empty\\n    receive() external payable {}\\n\\n    // Fallback function is called when msg.data is not empty\\n    fallback() external payable {}\\n\\n    function setWhitelist(address _whitelistAddress, bool approved) public onlyOwner {\\n        whitelist[_whitelistAddress] = approved;\\n    }\\n\\n    function checkWhitelist(address _address) public view onlyOwner returns (bool _approved) {\\n        return whitelist[_address];\\n    }\\n\\n    /**\\n     * @dev Mints `amount` number of tokens\\n     */\\n    function mint(uint256 amount) public payable {\\n        require(whitelist[msg.sender] == true || msg.sender == owner(), \\\"Not authorized\\\");\\n        // total tokens + amount <= maxTotalSupply, otherwise revert the transaction\\n        require((totalSupply() + amount) <= maxTotalSupply, \\\"Exceeds the max total supply available.\\\");\\n        // call the internal function from Openzeppelin's ERC20 contract\\n        _mint(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev withdraws all ETH sent to this contract\\n     * Requirements:\\n     * wallet connected must be owner's address\\n     */\\n    function withdraw() public onlyOwner {\\n        uint256 amount = address(this).balance;\\n        require(amount > 0, \\\"Nothing to withdraw, contract balance empty\\\");\\n\\n        address _owner = owner();\\n        (bool sent,) = _owner.call{value: amount}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardRatioNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardRatioDenominator\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nativeTokenWrapper\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_previousStakingContract\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_vilToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_terminus\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lootboxID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"prevURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"UpdatedMinStakeAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDenominator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDenominator\",\"type\":\"uint256\"}],\"name\":\"UpdatedRewardRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimeUnit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimeUnit\",\"type\":\"uint256\"}],\"name\":\"UpdatedTimeUnit\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bonusMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositRewardTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getDeposits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"unlockAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingV2.Deposit[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getStakeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokensStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeUnit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTimeUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lootboxID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousStakingContract\",\"outputs\":[{\"internalType\":\"contract Staking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bonusMultiplier\",\"type\":\"uint256\"}],\"name\":\"setBonusMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_isWhitelisted\",\"type\":\"bool\"}],\"name\":\"setBonusWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockTimeUnit\",\"type\":\"uint256\"}],\"name\":\"setLockTimeUnit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lootboxID\",\"type\":\"uint256\"}],\"name\":\"setLootboxID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStakeAmount\",\"type\":\"uint256\"}],\"name\":\"setMinStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_previousStakingContract\",\"type\":\"address\"}],\"name\":\"setPreviousStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"setRewardRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_terminus\",\"type\":\"address\"}],\"name\":\"setTerminus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeUnit\",\"type\":\"uint256\"}],\"name\":\"setTimeUnit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_vilToken\",\"type\":\"address\"}],\"name\":\"setVilToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeOfLastUpdate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unclaimedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"conditionIdOflastUpdate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakersArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingTokenDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminus\",\"outputs\":[{\"internalType\":\"contract ITerminus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vilToken\",\"outputs\":[{\"internalType\":\"contract VILToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "StakingV2", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000041eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000034a8911a238f0d32bb464dcd329112b895958daa000000000000000000000000636a3083e8f5209d25f35bd83be97ba1e09ec09b00000000000000000000000034a8911a238f0d32bb464dcd329112b895958daa000000000000000000000000325ccc8c3aab6163eb728bdcd5891da33ba728aa00000000000000000000000034a8911a238f0d32bb464dcd329112b895958daa0000000000000000000000009bb8b28b715c9d0c0098816e9fafdd258554de8d0000000000000000000000000000000000000000000000000000000000000002", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}