{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"},\"DogiraPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/*\\r\\n * Dogira Staking/Rewards Pool v1.1\\r\\n *\\r\\n * Website:         https://dogira.net\\r\\n * Staking Pools:   https://dogira.finance\\r\\n * Twitter:         https://twitter.com/DogiraOfficial\\r\\n * Telegram:        https://t.me/Dogiratoken\\r\\n * Discord:         https://discord.dogira.net\\r\\n * Medium:          https://dogira-team.medium.com/\\r\\n * Announcements:   https://t.me/DogiraOfficial\\r\\n * GitHub:          https://github.com/DogiraOfficial\\r\\n *\\r\\n *                    \u2584              \u2584\\r\\n *                  \u258c\u2592\u2588           \u2584\u2580\u2592\u258c\\r\\n *                  \u258c\u2592\u2592\u2588        \u2584\u2580\u2592\u2592\u2592\u2590\\r\\n *                 \u2590\u2584\u2580\u2592\u2592\u2580\u2580\u2580\u2580\u2584\u2584\u2584\u2580\u2592\u2592\u2592\u2592\u2592\u2590\\r\\n *               \u2584\u2584\u2580\u2592\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2592\u2592\u2584\u2588\u2592\u2590\\r\\n *             \u2584\u2580\u2592\u2592\u2592\u2591\u2591\u2591\u2592\u2592\u2592\u2591\u2591\u2591\u2592\u2592\u2592\u2580\u2588\u2588\u2580\u2592\u258c\\r\\n *            \u2590\u2592\u2592\u2592\u2584\u2584\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2580\u2584\u2592\u2592\u258c\\r\\n *            \u258c\u2591\u2591\u258c\u2588\u2580\u2592\u2592\u2592\u2592\u2592\u2584\u2580\u2588\u2584\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2592\u2590\\r\\n *           \u2590\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u258c\u2588\u2588\u2580\u2592\u2592\u2591\u2591\u2591\u2592\u2592\u2592\u2580\u2584\u258c\\r\\n *           \u258c\u2591\u2592\u2584\u2588\u2588\u2584\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u258c\\r\\n *          \u258c\u2592\u2580\u2590\u2584\u2588\u2584\u2588\u258c\u2584\u2591\u2580\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2590\\r\\n *          \u2590\u2592\u2592\u2590\u2580\u2590\u2580\u2592\u2591\u2584\u2584\u2592\u2584\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2592\u2591\u2592\u2591\u2592\u2592\u2592\u2592\u258c\\r\\n *          \u2590\u2592\u2592\u2592\u2580\u2580\u2584\u2584\u2592\u2592\u2592\u2584\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2592\u2591\u2592\u2591\u2592\u2592\u2590\\r\\n *           \u258c\u2592\u2592\u2592\u2592\u2592\u2592\u2580\u2580\u2580\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2592\u2591\u2592\u2591\u2592\u2591\u2592\u2592\u2592\u258c\\r\\n *           \u2590\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2592\u2591\u2592\u2591\u2592\u2592\u2584\u2592\u2592\u2590\\r\\n *            \u2580\u2584\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2592\u2591\u2592\u2591\u2592\u2584\u2592\u2592\u2592\u2592\u258c\\r\\n *              \u2580\u2584\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2584\u2584\u2584\u2580\u2592\u2592\u2592\u2592\u2584\u2580\\r\\n *                \u2580\u2584\u2584\u2584\u2584\u2584\u2584\u2580\u2580\u2580\u2592\u2592\u2592\u2592\u2592\u2584\u2584\u2580\\r\\n *                   \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2580\u2580\\r\\n *\\r\\n */\\r\\n\\r\\nimport \\\"SafeERC20.sol\\\";\\r\\nimport \\\"Ownable.sol\\\";\\r\\nimport \\\"Initializable.sol\\\";\\r\\nimport \\\"ReentrancyGuard.sol\\\";\\r\\n\\r\\ncontract DogiraPool is Ownable, Initializable, ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // Info of each user.\\r\\n    struct UserInfo {\\r\\n        uint256 amount;             // How many tokens the user has provided.\\r\\n        uint256 blockStaked;        // What block the user staked in on.\\r\\n        uint256 rewardDebt;         // Reward debt, tokens staked out to user\\r\\n        uint256 lockedDebt;         // Locked debt, reward tokens owed to user but awaiting lockup time to pass.\\r\\n    }\\r\\n\\r\\n    // Info of each pool.\\r\\n    struct PoolInfo {\\r\\n        uint256 firstRewardBlock;  // First block number that Rewards distribution occurs.\\r\\n        uint256 accRewardTokenPerShare; // Accumulated Rewards per share, times 1e30. See below.\\r\\n    }\\r\\n\\r\\n    // In the event that further config is required, deposits can start disabled.\\r\\n    bool public depositsEnabled = true;\\r\\n\\r\\n    // The stake token\\r\\n    IERC20 public STAKE_TOKEN;\\r\\n    // The reward token\\r\\n    IERC20 public REWARD_TOKEN;\\r\\n    // Fees address\\r\\n    address payable public feeAddress;\\r\\n\\r\\n    // Dead address\\r\\n    address payable burnAddress = payable(0x000000000000000000000000000000000000dEaD);\\r\\n\\r\\n    // Publicly note burn pools, default false\\r\\n    bool public isBurnPool = false;\\r\\n\\r\\n    // Reward tokens created per block.\\r\\n    uint256 public rewardPerBlock;\\r\\n\\r\\n    // Keep track of number of tokens staked in case the contract earns reflect fees\\r\\n    uint256 public totalStaked = 0;\\r\\n\\r\\n    // Deposit fee (if applicable), 100 = 1%.\\r\\n    uint256 public depositFee = 0;\\r\\n    // Max deposit fee (default: 40%).\\r\\n    uint256 private maxDepositFee = 4000;\\r\\n\\r\\n    // Lockup time (if applicable) in blocks. (Polygon = 2S/Block)\\r\\n    uint256 public harvestLockupBlocks = 0;\\r\\n    // Max lockup blocks for vesting (default: 12 months on Polygon)\\r\\n    // NB: 14.4m blocks assumes a worst-case of approx 10% slowdown on the Polygon Network, in the staker\\u0027s favour\\r\\n    uint256 private maxHarvestLockupBlocks = 14400000;\\r\\n\\r\\n    // Minimum amount of blocks that must pass before a withdrawal is not considered \\\"early\\\"\\r\\n    uint256 public earlyWithdrawalBlocks = 0;\\r\\n    // Max blocks for early withdrawal (default: 12 months on Polygon)\\r\\n    // NB: 14.4m blocks assumes a worst-case of approx 10% slowdown on the Polygon Network, in the staker\\u0027s favour\\r\\n    uint256 private maxEarlyWithdrawalBlocks = 14400000;\\r\\n    // Fee for exiting early (if applicable)\\r\\n    uint256 public earlyWithdrawalFee = 0;\\r\\n    // Max fee for exiting early (default: 40%)\\r\\n    uint256 private maxEarlyWithdrawalFee = 4000;\\r\\n\\r\\n    // Max total fee: early withdrawal + deposit combined (default: 40%)\\r\\n    uint256 public maxTotalFee = 4000;\\r\\n\\r\\n    // Info of each pool.\\r\\n    PoolInfo public poolInfo;\\r\\n    // Info of each user that stakes LP tokens.\\r\\n    mapping (address =\\u003e UserInfo) public userInfo;\\r\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\r\\n    uint256 private totalAllocPoint = 0;\\r\\n    // The block number when Reward mining starts.\\r\\n    uint256 public startBlock;\\r\\n    // The block number when mining ends.\\r\\n    uint256 public endBlock;\\r\\n\\r\\n    // Denotes if an owner-level rewards withdrawal has been requested\\r\\n    bool public rewardsWithdrawalRequested = false;\\r\\n    // Denotes which block rewards can be withdrawn at owner-level\\r\\n    uint256 public rewardsWithdrawalBlock = 0;\\r\\n    // Blocks required to wait until owner-level request to withdraw rewards if deposit fees enabled. Default: 4 Hours\\r\\n    uint256 public blocksRequiredForWithdrawalRequest = 7200;\\r\\n\\r\\n    // Block smart contracts from depositing tokens (nb: will also block multisig wallets)\\r\\n    bool blockSmartContracts = false;\\r\\n\\r\\n    event Deposit(address indexed user, uint256 amount);\\r\\n    event DepositRewards(uint256 amount);\\r\\n    event Withdraw(address indexed user, uint256 amount);\\r\\n    event EmergencyWithdraw(address indexed user, uint256 amount);\\r\\n    event SkimStakeTokenFees(address indexed user, uint256 amount);\\r\\n    event LogUpdatePool(uint256 endBlock, uint256 rewardPerBlock);\\r\\n    event EmergencyRewardWithdraw(address indexed user, uint256 amount);\\r\\n    event EmergencySweepWithdraw(address indexed user, IERC20 indexed token, uint256 amount);\\r\\n    event StartBlockUpdated(uint256 newStartBlock);\\r\\n    event EarlyWithdrawalFeeSet(uint256 earlyWithdrawalFee);\\r\\n    event DepositFeeSet(uint256 depositFee);\\r\\n    event HarvestLockupBlocksSet(uint256 blocks);\\r\\n    event EarlyWithdrawalBlocksSet(uint256 earlyWithdrawalBlocks);\\r\\n    event FeeTaken(address indexed feeAddress, uint256 tokensTransferred);\\r\\n    event RewardsWithdrawalRequested(uint256 unlockBlock);\\r\\n    event FeeAddressUpdated(address indexed feeAddress);\\r\\n    event RewardsWithdrawn();\\r\\n    event DepositsEnabled();\\r\\n\\r\\n    /// @dev Modifier which prevents execution if emissions have already begun.\\r\\n    modifier beforeStart {\\r\\n        require(startBlock \\u003e block.number, \\u0027This action can only be executed before emissions have begun!\\u0027);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        IERC20 _stakeToken,\\r\\n        IERC20 _rewardToken,\\r\\n        uint256 _rewardPerBlock,\\r\\n        uint256 _startBlock,\\r\\n        uint256 _endBlock,\\r\\n        bool _depositsEnabled,\\r\\n        bool _blockSmartContracts,\\r\\n        bool _isBurnPool,\\r\\n        address payable _feeAddress\\r\\n    ) external initializer onlyOwner\\r\\n    {\\r\\n        STAKE_TOKEN = _stakeToken;\\r\\n        REWARD_TOKEN = _rewardToken;\\r\\n        rewardPerBlock = _rewardPerBlock;\\r\\n        startBlock = _startBlock;\\r\\n        endBlock = _endBlock;\\r\\n        depositsEnabled = _depositsEnabled;\\r\\n        blockSmartContracts = _blockSmartContracts;\\r\\n        if (_isBurnPool) {\\r\\n            isBurnPool = true;\\r\\n            feeAddress = burnAddress;\\r\\n        } else {\\r\\n            feeAddress = _feeAddress;\\r\\n        }\\r\\n\\r\\n\\r\\n        // staking pool\\r\\n        poolInfo = PoolInfo({\\r\\n        firstRewardBlock: startBlock,\\r\\n        accRewardTokenPerShare: 0\\r\\n        });\\r\\n    }\\r\\n\\r\\n    /// Return reward multiplier over the given _from to _to block.\\r\\n    /// @param _from Starting block\\r\\n    /// @param _to Ending block\\r\\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\\r\\n        if (_to \\u003c= endBlock) {\\r\\n            return _to - _from;\\r\\n        } else if (_from \\u003e= endBlock) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return endBlock - _from;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// Determines if a user can withdraw following any minimum staking period\\r\\n    /// @param _stakedInBlock Block which the user staked in on\\r\\n    /// @return True if minimum staking period has passed, otherwise false\\r\\n    function canWithdrawWithoutLockup(uint256 _stakedInBlock) public view returns(bool) {\\r\\n        if (_stakedInBlock \\u003c startBlock) {\\r\\n            _stakedInBlock = startBlock; // Lockup time should only count from when emissions have begun.\\r\\n        }\\r\\n        uint256 noPenaltyBlock = harvestLockupBlocks + _stakedInBlock;\\r\\n        if (noPenaltyBlock \\u003e endBlock) {\\r\\n            noPenaltyBlock = endBlock;\\r\\n        }\\r\\n        if (block.number \\u003e noPenaltyBlock) {\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /// Determines if a user can withdraw without penalty following any minimum staking period\\r\\n    /// @param _stakedInBlock Block which the user staked in on\\r\\n    /// @return True if minimum staking period has passed, otherwise false\\r\\n    function canWithdrawWithoutPenalty(uint256 _stakedInBlock) public view returns(bool) {\\r\\n        if (_stakedInBlock \\u003c startBlock) {\\r\\n            _stakedInBlock = startBlock; // Penalty time should only count from when emissions have begun.\\r\\n        }\\r\\n        uint256 noPenaltyBlock = earlyWithdrawalBlocks + _stakedInBlock;\\r\\n        if (block.number \\u003e noPenaltyBlock) {\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /// View pending rewards\\r\\n    /// @param _user Wallet ID of staked user\\r\\n    /// @return Pending rewards\\r\\n    function pendingReward(address _user) external view returns (uint256) {\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n        uint256 accRewardTokenPerShare = poolInfo.accRewardTokenPerShare;\\r\\n        if (block.number \\u003e poolInfo.firstRewardBlock \\u0026\\u0026 totalStaked != 0) {\\r\\n            uint256 multiplier = getMultiplier(poolInfo.firstRewardBlock, block.number);\\r\\n            uint256 tokenReward = multiplier * rewardPerBlock;\\r\\n            accRewardTokenPerShare = accRewardTokenPerShare + (tokenReward * 1e30 / totalStaked);\\r\\n        }\\r\\n        return (user.amount * accRewardTokenPerShare / 1e30 - user.rewardDebt) + user.lockedDebt;\\r\\n    }\\r\\n\\r\\n    /// Update reward variables of the given pool to be up-to-date.\\r\\n    function updatePool() public {\\r\\n        if (block.number \\u003c= poolInfo.firstRewardBlock) {\\r\\n            return;\\r\\n        }\\r\\n        if (totalStaked == 0) {\\r\\n            poolInfo.firstRewardBlock = block.number;\\r\\n            return;\\r\\n        }\\r\\n        uint256 multiplier = getMultiplier(poolInfo.firstRewardBlock, block.number);\\r\\n        uint256 tokenReward = multiplier * rewardPerBlock;\\r\\n        poolInfo.accRewardTokenPerShare = poolInfo.accRewardTokenPerShare + (tokenReward * 1e30 / totalStaked);\\r\\n        poolInfo.firstRewardBlock = block.number;\\r\\n    }\\r\\n\\r\\n\\r\\n    /// Deposit staking token into the contract to earn rewards.\\r\\n    /// @dev Since this contract needs to be supplied with rewards we are\\r\\n    ///  sending the balance of the contract if the pending rewards are higher\\r\\n    /// @param _amount The amount of staking tokens to deposit\\r\\n    function deposit(uint256 _amount) public nonReentrant {\\r\\n        require(depositsEnabled, \\u0027Deposits have not yet been enabled.\\u0027);\\r\\n        if (blockSmartContracts) {\\r\\n            require(msg.sender == tx.origin, \\\"Smart Contracts cannot interact with this pool.\\\");\\r\\n        }\\r\\n        UserInfo storage user = userInfo[msg.sender];\\r\\n        uint256 finalDepositAmount = 0;\\r\\n        updatePool();\\r\\n        if (user.amount \\u003e 0) {\\r\\n            uint256 pending = user.amount * poolInfo.accRewardTokenPerShare / 1e30 - user.rewardDebt;\\r\\n            if(pending \\u003e 0) {\\r\\n                uint256 currentRewardBalance = rewardBalance();\\r\\n                if(currentRewardBalance \\u003e 0 \\u0026\\u0026 canWithdrawWithoutLockup(user.blockStaked)) {\\r\\n                    if (user.lockedDebt \\u003e 0) {\\r\\n                        pending = pending + user.lockedDebt;\\r\\n                        user.lockedDebt = 0;\\r\\n                    }\\r\\n                    if(pending \\u003e currentRewardBalance) {\\r\\n                        safeTransferReward(msg.sender, currentRewardBalance);\\r\\n                    } else {\\r\\n                        safeTransferReward(msg.sender, pending);\\r\\n                    }\\r\\n                } else {\\r\\n                    user.lockedDebt = user.lockedDebt + pending;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        if (_amount \\u003e 0) {\\r\\n            uint256 preStakeBalance = STAKE_TOKEN.balanceOf(address(this));\\r\\n            if (depositFee \\u003e 0) {\\r\\n                uint256 _depositFee = _amount * depositFee / 10000;\\r\\n                STAKE_TOKEN.safeTransferFrom(msg.sender, address(feeAddress), _depositFee);\\r\\n                _amount = _amount - _depositFee;\\r\\n                emit FeeTaken(feeAddress, _depositFee);\\r\\n            }\\r\\n            STAKE_TOKEN.safeTransferFrom(msg.sender, address(this), _amount);\\r\\n            finalDepositAmount = STAKE_TOKEN.balanceOf(address(this)) - preStakeBalance;\\r\\n            user.blockStaked = block.number;\\r\\n            user.amount = user.amount + finalDepositAmount;\\r\\n            totalStaked = totalStaked + finalDepositAmount;\\r\\n        }\\r\\n\\r\\n        user.rewardDebt = user.amount * poolInfo.accRewardTokenPerShare / 1e30;\\r\\n\\r\\n        emit Deposit(msg.sender, finalDepositAmount);\\r\\n    }\\r\\n\\r\\n    /// Withdraw rewards and/or staked tokens. Pass a 0 amount to withdraw only rewards\\r\\n    /// @param _amount The amount of staking tokens to withdraw\\r\\n    function withdraw(uint256 _amount) public nonReentrant {\\r\\n        UserInfo storage user = userInfo[msg.sender];\\r\\n        require(user.amount \\u003e= _amount, \\\"Error: insufficient output amount\\\");\\r\\n        require(canWithdrawWithoutLockup(user.blockStaked), \\\"The minimum timespan for withdrawals has not yet passed.\\\");\\r\\n        updatePool();\\r\\n        uint256 pending = user.amount * poolInfo.accRewardTokenPerShare / 1e30 - user.rewardDebt;\\r\\n        if (user.lockedDebt \\u003e 0) {\\r\\n            pending = pending + user.lockedDebt;\\r\\n            user.lockedDebt = 0;\\r\\n        }\\r\\n        if(pending \\u003e 0) {\\r\\n            uint256 currentRewardBalance = rewardBalance();\\r\\n            if(currentRewardBalance \\u003e 0) {\\r\\n                if(pending \\u003e currentRewardBalance) {\\r\\n                    safeTransferReward(msg.sender, currentRewardBalance);\\r\\n                } else {\\r\\n                    safeTransferReward(msg.sender, pending);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        if(_amount \\u003e 0) {\\r\\n            totalStaked -= _amount;\\r\\n            user.amount -= _amount;\\r\\n            if (earlyWithdrawalFee \\u003e 0 \\u0026\\u0026 !canWithdrawWithoutPenalty(user.blockStaked)) {\\r\\n                uint256 withdrawalFee = _amount * earlyWithdrawalFee / 10000;\\r\\n                STAKE_TOKEN.safeTransfer(address(feeAddress), withdrawalFee);\\r\\n                _amount = _amount - withdrawalFee;\\r\\n                emit FeeTaken(feeAddress, withdrawalFee);\\r\\n            }\\r\\n\\r\\n            STAKE_TOKEN.safeTransfer(msg.sender, _amount);\\r\\n        }\\r\\n\\r\\n        user.rewardDebt = user.amount * poolInfo.accRewardTokenPerShare / 1e30;\\r\\n\\r\\n        emit Withdraw(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    /// Obtain the reward balance of this contract\\r\\n    /// @return wei balace of contract\\r\\n    function rewardBalance() public view returns (uint256) {\\r\\n        uint256 balance = REWARD_TOKEN.balanceOf(address(this));\\r\\n        if (STAKE_TOKEN == REWARD_TOKEN)\\r\\n            return balance - totalStaked;\\r\\n        return balance;\\r\\n    }\\r\\n\\r\\n    /// Deposit Rewards into contract\\r\\n    /// @param _amount Amount of tokens to deposit\\r\\n    function depositRewards(uint256 _amount) external {\\r\\n        require(_amount \\u003e 0, \\u0027Deposit value must be greater than 0.\\u0027);\\r\\n        REWARD_TOKEN.safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        emit DepositRewards(_amount);\\r\\n    }\\r\\n\\r\\n    /// @param _to address to send reward token to\\r\\n    /// @param _amount value of reward token to transfer\\r\\n    function safeTransferReward(address _to, uint256 _amount) internal {\\r\\n        REWARD_TOKEN.safeTransfer(_to, _amount);\\r\\n    }\\r\\n\\r\\n    /// @dev Obtain the stake balance of this contract\\r\\n    function totalStakeTokenBalance() public view returns (uint256) {\\r\\n        if (STAKE_TOKEN == REWARD_TOKEN)\\r\\n            return totalStaked;\\r\\n        return STAKE_TOKEN.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /// @dev Obtain the stake token fees (if any) earned by reflect token\\r\\n    function getStakeTokenFeeBalance() public view returns (uint256) {\\r\\n        return STAKE_TOKEN.balanceOf(address(this)) - totalStaked;\\r\\n    }\\r\\n\\r\\n    /* Admin Functions */\\r\\n\\r\\n    /// @param _rewardPerBlock The amount of reward tokens to be given per block\\r\\n    function setRewardPerBlock(uint256 _rewardPerBlock) external onlyOwner {\\r\\n        rewardPerBlock = _rewardPerBlock;\\r\\n        emit LogUpdatePool(endBlock, rewardPerBlock);\\r\\n    }\\r\\n\\r\\n    /// @dev Remove excess stake tokens earned by reflect fees\\r\\n    function skimStakeTokenFees() external onlyOwner {\\r\\n        require(address(REWARD_TOKEN) != address(STAKE_TOKEN), \\\"Cannot skim same-token pairs!\\\");\\r\\n        uint256 stakeTokenFeeBalance = getStakeTokenFeeBalance();\\r\\n        STAKE_TOKEN.safeTransfer(msg.sender, stakeTokenFeeBalance);\\r\\n        emit SkimStakeTokenFees(msg.sender, stakeTokenFeeBalance);\\r\\n    }\\r\\n\\r\\n    /// @param  _endBlock The block when rewards will end\\r\\n    function setEndBlock(uint256 _endBlock) external onlyOwner {\\r\\n        require(_endBlock \\u003e endBlock, \\u0027New end block must be greater than the current.\\u0027);\\r\\n        endBlock = _endBlock;\\r\\n        emit LogUpdatePool(endBlock, rewardPerBlock);\\r\\n    }\\r\\n\\r\\n    /// @param _startBlock The block when rewards will start\\r\\n    function setStartBlock(uint256 _startBlock) external onlyOwner beforeStart {\\r\\n        startBlock = _startBlock;\\r\\n        poolInfo.firstRewardBlock = _startBlock;\\r\\n        emit StartBlockUpdated(_startBlock);\\r\\n    }\\r\\n\\r\\n    /// @param _depositFee Deposit fee for staked tokens, in hundredths of a percent\\r\\n    function setDepositFee(uint256 _depositFee) external onlyOwner beforeStart {\\r\\n        require(_depositFee \\u003c= maxDepositFee, \\u0027Cannot exceed max deposit fee!\\u0027);\\r\\n        require (earlyWithdrawalFee + _depositFee \\u003c= maxTotalFee, \\u0027Cannot exceed max total fees!\\u0027);\\r\\n        depositFee = _depositFee;\\r\\n        emit DepositFeeSet(depositFee);\\r\\n    }\\r\\n\\r\\n    /// @param _earlyWithdrawalFee Withdrawal fee for leaving staking early, in hundredths of a percent\\r\\n    function setEarlyWithdrawalFee(uint256 _earlyWithdrawalFee) external onlyOwner beforeStart {\\r\\n        require (_earlyWithdrawalFee \\u003c= maxEarlyWithdrawalFee, \\u0027Cannot exceed max early withdrawal fee!\\u0027);\\r\\n        require (_earlyWithdrawalFee + depositFee \\u003c= maxTotalFee, \\u0027Cannot exceed max total fees!\\u0027);\\r\\n        earlyWithdrawalFee = _earlyWithdrawalFee;\\r\\n        emit EarlyWithdrawalFeeSet(earlyWithdrawalFee);\\r\\n    }\\r\\n\\r\\n    /// @param _earlyWithdrawalBlocks Amount of blocks that must pass before a user can un-stake without penalty\\r\\n    function setEarlyWithdrawalBlocks(uint256 _earlyWithdrawalBlocks) external onlyOwner beforeStart {\\r\\n        require (_earlyWithdrawalBlocks \\u003c= maxEarlyWithdrawalBlocks, \\u0027Cannot exceed max early withdrawal blocks!\\u0027);\\r\\n        require(_earlyWithdrawalBlocks \\u003e harvestLockupBlocks, \\u0027earlyWithdrawalBlocks must be greater than harvestLockupBlocks!\\u0027);\\r\\n        earlyWithdrawalBlocks = _earlyWithdrawalBlocks;\\r\\n        emit EarlyWithdrawalFeeSet(earlyWithdrawalFee);\\r\\n    }\\r\\n\\r\\n    /// @param _harvestLockupBlocks Amount of blocks that must pass before a user can un-stake\\r\\n    function setHarvestLockupBlocks(uint256 _harvestLockupBlocks) external onlyOwner beforeStart {\\r\\n        require(_harvestLockupBlocks \\u003c= maxHarvestLockupBlocks, \\u0027Cannot exceed max harvest lockup blocks!\\u0027);\\r\\n        if (earlyWithdrawalFee \\u003e 0) {\\r\\n            require(_harvestLockupBlocks \\u003c earlyWithdrawalBlocks, \\u0027harvestLockupBlocks must be less than earlyWithdrawalBlocks!\\u0027);\\r\\n        }\\r\\n        harvestLockupBlocks = _harvestLockupBlocks;\\r\\n        emit HarvestLockupBlocksSet(harvestLockupBlocks);\\r\\n    }\\r\\n\\r\\n    /// @dev Enable deposits for staking\\r\\n    function enableDeposits() external onlyOwner {\\r\\n        depositsEnabled = true;\\r\\n        emit DepositsEnabled();\\r\\n    }\\r\\n\\r\\n    /* Emergency Functions */\\r\\n\\r\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\r\\n    function emergencyWithdraw() external nonReentrant {\\r\\n        UserInfo storage user = userInfo[msg.sender];\\r\\n        totalStaked = totalStaked - user.amount;\\r\\n        uint256 _amount = user.amount;\\r\\n        if (earlyWithdrawalFee \\u003e 0 \\u0026\\u0026 !canWithdrawWithoutPenalty(user.blockStaked)) {\\r\\n            uint256 withdrawalFee = _amount * earlyWithdrawalFee / 10000;\\r\\n            _amount = _amount - withdrawalFee;\\r\\n            STAKE_TOKEN.safeTransfer(address(feeAddress), withdrawalFee);\\r\\n            emit FeeTaken(feeAddress, withdrawalFee);\\r\\n        }\\r\\n        user.amount = 0;\\r\\n        user.rewardDebt = 0;\\r\\n        user.lockedDebt = 0;\\r\\n        STAKE_TOKEN.safeTransfer(msg.sender, _amount);\\r\\n        emit EmergencyWithdraw(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    /// @dev Request removal of rewards balance, in the event a redeploy or otherwise is required.\\r\\n    /// This should only be called in the case of an emergency, with the intention of disabling the pool.\\r\\n    /// Disables withdrawal fees, requires minimum notice period of deposit fees are enabled.\\r\\n    function requestRewardsWithdrawal() external onlyOwner {\\r\\n        rewardsWithdrawalBlock = block.number;\\r\\n        if (depositFee \\u003e 0) {\\r\\n            rewardsWithdrawalBlock = block.number + blocksRequiredForWithdrawalRequest;\\r\\n        }\\r\\n        earlyWithdrawalFee = 0;\\r\\n        earlyWithdrawalBlocks = 0;\\r\\n        harvestLockupBlocks = 0;\\r\\n        depositFee = 0;\\r\\n        depositsEnabled = false;\\r\\n        rewardsWithdrawalRequested = true;\\r\\n        emit RewardsWithdrawalRequested(rewardsWithdrawalBlock);\\r\\n    }\\r\\n\\r\\n    /// @dev Withdraw rewards\\r\\n    function rewardsWithdrawal() external onlyOwner {\\r\\n        require(rewardsWithdrawalRequested, \\u0027Rewards withdrawal not yet requested!\\u0027);\\r\\n        require(block.number \\u003e rewardsWithdrawalBlock, \\u0027Not yet reached the rewards withdrawal block!\\u0027);\\r\\n        uint256 currentRewardBalance = rewardBalance();\\r\\n        if(currentRewardBalance \\u003e 0) {\\r\\n            safeTransferReward(msg.sender, currentRewardBalance);\\r\\n        }\\r\\n        rewardsWithdrawalRequested = false;\\r\\n        emit RewardsWithdrawn();\\r\\n    }\\r\\n\\r\\n    /// @dev Update the fee address\\r\\n    /// @param _feeAddress non-zero payable address to receive fees\\r\\n    function updateFeeAddress(address payable _feeAddress) external onlyOwner {\\r\\n        require(!isBurnPool, \\u0027Cannot update the Fee Address on a burn pool!\\u0027);\\r\\n        require(_feeAddress != address(0), \\u0027Fee address cannot be zero!\\u0027);\\r\\n        feeAddress = _feeAddress;\\r\\n        emit FeeAddressUpdated(_feeAddress);\\r\\n    }\\r\\n\\r\\n    /// @notice A public function to sweep accidental BEP20 transfers to this contract.\\r\\n    ///   Tokens are sent to owner\\r\\n    /// @param token The address of the BEP20 token to sweep\\r\\n    function sweepToken(IERC20 token) external onlyOwner {\\r\\n        require(address(token) != address(STAKE_TOKEN), \\\"Stake Token cannot be sweeped!\\\");\\r\\n        require(address(token) != address(REWARD_TOKEN), \\\"Reward Token cannot be sweeped!\\\");\\r\\n        uint256 balance = token.balanceOf(address(this));\\r\\n        token.safeTransfer(msg.sender, balance);\\r\\n        emit EmergencySweepWithdraw(msg.sender, token, balance);\\r\\n    }\\r\\n\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"},\"Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n// solhint-disable-next-line compiler-version\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\r\\n * behind a proxy. Since a proxied contract can\\u0027t have a constructor, it\\u0027s common to move constructor logic to an\\r\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\r\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\r\\n *\\r\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\r\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\r\\n *\\r\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\r\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\r\\n */\\r\\nabstract contract Initializable {\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates that the contract has been initialized.\\r\\n     */\\r\\n    bool private _initialized;\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates that the contract is in the process of being initialized.\\r\\n     */\\r\\n    bool private _initializing;\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\r\\n     */\\r\\n    modifier initializer() {\\r\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\r\\n\\r\\n        bool isTopLevelCall = !_initializing;\\r\\n        if (isTopLevelCall) {\\r\\n            _initializing = true;\\r\\n            _initialized = true;\\r\\n        }\\r\\n\\r\\n        _;\\r\\n\\r\\n        if (isTopLevelCall) {\\r\\n            _initializing = false;\\r\\n        }\\r\\n    }\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"Context.sol\\\";\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and make it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n}\\r\\n\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"IERC20.sol\\\";\\r\\nimport \\\"Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n    unchecked {\\r\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n        require(oldAllowance \\u003e= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n        uint256 newAllowance = oldAllowance - value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\r\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length \\u003e 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositFee\",\"type\":\"uint256\"}],\"name\":\"DepositFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DepositsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earlyWithdrawalBlocks\",\"type\":\"uint256\"}],\"name\":\"EarlyWithdrawalBlocksSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earlyWithdrawalFee\",\"type\":\"uint256\"}],\"name\":\"EarlyWithdrawalFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyRewardWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencySweepWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeAddress\",\"type\":\"address\"}],\"name\":\"FeeAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensTransferred\",\"type\":\"uint256\"}],\"name\":\"FeeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocks\",\"type\":\"uint256\"}],\"name\":\"HarvestLockupBlocksSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"LogUpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockBlock\",\"type\":\"uint256\"}],\"name\":\"RewardsWithdrawalRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RewardsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SkimStakeTokenFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStartBlock\",\"type\":\"uint256\"}],\"name\":\"StartBlockUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"REWARD_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksRequiredForWithdrawalRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakedInBlock\",\"type\":\"uint256\"}],\"name\":\"canWithdrawWithoutLockup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakedInBlock\",\"type\":\"uint256\"}],\"name\":\"canWithdrawWithoutPenalty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyWithdrawalBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyWithdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeTokenFeeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestLockupBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_stakeToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_depositsEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_blockSmartContracts\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isBurnPool\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBurnPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"firstRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardTokenPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRewardsWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsWithdrawalBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsWithdrawalRequested\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositFee\",\"type\":\"uint256\"}],\"name\":\"setDepositFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_earlyWithdrawalBlocks\",\"type\":\"uint256\"}],\"name\":\"setEarlyWithdrawalBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_earlyWithdrawalFee\",\"type\":\"uint256\"}],\"name\":\"setEarlyWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"name\":\"setEndBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_harvestLockupBlocks\",\"type\":\"uint256\"}],\"name\":\"setHarvestLockupBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"setRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"name\":\"setStartBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"skimStakeTokenFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakeTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"updateFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DogiraPool", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://414c0328169b994ec911d414b01e8c78f70d78f9056967babde8693db51ff35d"}