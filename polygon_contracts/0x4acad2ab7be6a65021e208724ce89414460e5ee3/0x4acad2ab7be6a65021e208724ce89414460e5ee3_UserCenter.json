{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUserBadge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IUserBadge {\\n\\n    function addBadge(uint _uid, uint _badge, uint _num) external;\\n    function subBadge(uint _uid, uint _badge, uint _num) external;\\n    function addBuyRecord(uint _uid, uint _badge, uint _num) external;\\n    function subStock(uint _badge, uint _num) external;\\n    /**\\n        User badge\\n     */\\n    // function badge(uint _uid) external view returns (uint[] calldata _bals);\\n    function balance(uint _uid, uint _badge) external view returns (uint);\\n    function stockOfBadge(uint _badge) external view returns (uint);\\n    function price() external view returns(uint);\\n    function recordBadgeBuyNum(uint _uid, uint _badge) external view returns(uint);\\n    function checkAllowToBuyBadge(uint _uid, uint _num, uint _badge) external view returns(uint);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IUserCenter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n\\ninterface IUserCenter {\\n\\n    /**\\n        reg user info\\n     */\\n    function user(uint _id) external view returns (address _addr, uint _refId, uint _level, uint _regTime, bool _valid);\\n\\n    /**\\n        Register\\n     */\\n    function register() external returns (bool);\\n\\n    /**\\n        Regist and bind refer\\n     */\\n    function regAndBind(address _ref) external returns (bool);\\n    /**\\n        LV regist\\n     */\\n    function badgeRegist(uint _lv, uint _num) external payable returns (bool);\\n\\n    /**\\n        user use badge\\n     */\\n    function useBadge(uint _badge) external returns (bool);\\n\\n    /**\\n        badge inner regist\\n     */\\n    function badgeInnerRegist(uint _uid, uint _lv, uint _num) external returns (bool);\\n\\n    /**\\n        badge transfer\\n     */\\n    function badgeTransfer(uint _lv, address _to, uint _num) external returns (bool);\\n\\n    /**\\n        Transfer user owner\\n     */\\n    function transferUser(address _to) external returns (bool);\\n    \\n    function ownerOf(uint _uid) external view returns(address);\\n    function approve(address _to, uint _uid) external;\\n    function setApprovalForAll(address operator, bool approved) external;\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n    function getApproved(uint uid) external view returns (address);\\n    function transferUserFrom(address _from, address _to, uint _uid) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUserStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IUserStorageRead.sol\\\";\\n\\ninterface IUserStorage is IUserStorageRead{\\n    /**\\n        control data functions\\n     */\\n    function setUser(address _addr, uint _uid) external;\\n    function setUserOfID(address _addr, uint _uid) external;\\n    function setRefer(uint _uid, uint _rfid) external;\\n    function setVId(uint _uid, uint _v, uint _nowVId) external;\\n    function setOldVId(uint _uid, uint _v, uint _oldVId) external;\\n    function copyTargetUidVID(uint _uid, uint _targetUid) external;\\n    function bindNewVID(uint _uid, uint _v) external;\\n    function addTeamVCount(uint _uid, uint _v) external;\\n    function setLevel(uint _uid, uint _level) external;\\n    function setRegTime(uint _uid, uint _time) external;\\n    function setIDRegisted(uint _uid, bool _flag) external;\\n    function setTeamBonusIgnoreCondition(uint _uid, bool _flag) external;\\n\\n    function increaseUID() external;\\n\\n    function addDirect(uint _uid) external;\\n    function subDirect(uint _uid) external;\\n    function addFeat(uint _uid, uint _amount) external;\\n    function subFeat(uint _uid, uint _amount) external;\\n    function addTeamBonus(uint _uid, uint _amount) external;\\n    function addBatchVFeat(uint _uid, uint _featAmount) external;\\n\\n    // trige by invest first\\n    function recordDirect(uint _uid) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IUserStorageRead.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IUserStorageRead {\\n    /**\\n        User address by UID\\n     */\\n    function userOfId(uint _uid) external view returns (address);\\n\\n    /**\\n        User's UID\\n     */\\n    function userId(address _addr) external view returns (uint);\\n\\n    /**\\n        UID check valid\\n     */\\n    function isValidId(uint _uid) external view returns (bool);\\n\\n    /**\\n        Check user is V\\n     */\\n    function isVUser(uint _uid) external view returns (bool);\\n    /**\\n        User V UID by user\\n     */\\n    function userVId(uint _uid, uint _v) external view returns (uint);\\n\\n    /**\\n        User V ids by num\\n     */\\n    function userVIds(uint _uid, uint _vs) external view returns (uint[] calldata);\\n\\n    /**\\n        User V Old by user\\n     */\\n    function userOldVId(uint _uid, uint _v) external view returns (uint);\\n\\n    /**\\n        User V Old by num\\n     */\\n    function userOldVIds(uint _uid, uint _vs) external view returns (uint[] calldata);\\n    /**\\n        User basic by id\\n     */\\n    function userBasicData(uint _uid) external view returns (uint _refId, uint _regTime, uint _level, bool _isValid);\\n\\n    /**\\n        Current ID\\n     */\\n    function currentId() external view returns (uint);\\n\\n    /**\\n        User team data by id\\n     */\\n    function userTeamsData(uint _uid) external view returns (uint _direct, uint _feat, uint _bonus, bool _ignore);\\n\\n    /**\\n        User team v count\\n     */\\n    function teamVCount(uint _uid, uint _v) external view returns (uint _count);\\n\\n    /**\\n        User team V counts by num\\n     */\\n    function teamVCounts(uint _uid, uint _vs) external view returns (uint[] calldata);\\n}\"\r\n    },\r\n    \"contracts/UserCenter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./interfaces/IUserCenter.sol\\\";\\nimport \\\"./interfaces/IUserStorage.sol\\\";\\nimport \\\"./interfaces/IUserBadge.sol\\\";\\n\\ncontract UserCenter is IUserCenter, Ownable {\\n\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n    mapping(uint => address) private _uidApprovals;\\n\\n    IUserStorage private userStorage;\\n    IUserBadge private userBadge;\\n    address private badgeFeeAddr;\\n    address private badgeFeeToken;\\n\\n    constructor() {}\\n\\n    receive() external payable {}\\n\\n    // Contract setting start\\n    function setStorage(address _addr) external onlyOwner {\\n        userStorage = IUserStorage(_addr);\\n    }\\n\\n    function setUserBadge(address _addr) external onlyOwner {\\n        userBadge = IUserBadge(_addr);\\n    }\\n\\n    function setBadgeFeeAddr(address _addr) external onlyOwner {\\n        badgeFeeAddr = _addr;\\n    }\\n\\n    function setBadgeFeeToken(address _token) external onlyOwner{\\n        badgeFeeToken = _token;\\n    }\\n\\n    event NewRegister(address indexed _user, uint indexed _id);\\n    function _reg(address _who) internal virtual {\\n        userStorage.increaseUID();\\n        uint _uid = userStorage.currentId();\\n        userStorage.setUser(_who, _uid);\\n        userStorage.setIDRegisted(_uid, true);\\n        userStorage.setRegTime(_uid, block.timestamp);\\n        emit NewRegister(_who, _uid);\\n    }\\n\\n    function register() public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        require(owner != address(0), \\\"UC: regist user cannot be zero\\\");\\n        require(userId(owner) == 0, \\\"UC: Sender registed\\\");\\n        _reg(owner);\\n        return true;\\n    }\\n\\n    event RegBindEvent(uint indexed _uid, uint indexed _rfid);\\n    function regAndBind(address ref) public virtual override returns (bool) {\\n        address who = _msgSender();\\n        require(who != address(0) && ref != address(0), \\\"UC: regist cannot be zero address\\\");\\n        uint oid = userId(who);\\n        require(!isValidId(oid), \\\"UC: sender registed\\\");\\n        uint rid = userId(ref);\\n        require(isValidId(rid), \\\"UC: Refer dose not regist\\\");\\n        _reg(who);\\n        uint uid = userId(who);\\n        userStorage.setRefer(uid, rid);\\n        userStorage.copyTargetUidVID(uid, rid);\\n        emit RegBindEvent(uid, rid);\\n        return true;\\n    }\\n\\n    event EventUseBadge(uint indexed _uid, uint indexed _badge);\\n\\n    function useBadge(uint _badge) public virtual override returns (bool) {\\n        require(_badge > 0 && _badge < 6, \\\"UC: Badge No. must be 1 - 5\\\");\\n        address who = _msgSender();\\n        require(who != address(0), \\\"UC: regist badge cannot be zero\\\");\\n        uint _uid = userId(who);\\n        (uint refId,,uint _level,) = userStorage.userBasicData(_uid);\\n        require(_level == 0, \\\"UC: user badge registed\\\");\\n        require(userBadge.balance(_uid, _badge) > 0, \\\"UC: Insufficient badge\\\");\\n        userBadge.subBadge(_uid, _badge, 1);\\n        userStorage.setLevel(_uid, _badge);\\n        // user now v uid\\n        bool refIsV = userStorage.isVUser(refId);\\n        if (refIsV) {\\n            userStorage.addTeamVCount(refId, _badge);\\n        }\\n        userStorage.bindNewVID(_uid, _badge);\\n        emit EventUseBadge(_uid, _badge);\\n        return true;\\n    }\\n\\n    function badgeRegist(uint _badge, uint _num) public virtual override payable returns (bool) {\\n        require(_badge < 4 && _badge > 0, \\\"UC: badge must less than 4\\\");\\n        require(userBadge.stockOfBadge(_badge) >= _num, \\\"UC: badge insufficient stock\\\");\\n        address who = _msgSender();\\n        require(who != address(0), \\\"UC: regist badge cannot be zero\\\");        \\n        uint _uid = userId(who);\\n        require(isValidId(_uid), \\\"UC: regist badge invalid uid\\\");\\n        // check allow num to buy\\n        uint _allow = userBadge.checkAllowToBuyBadge(_uid, _num, _badge);\\n        require(_num <= _allow, \\\"UC: overflow V badge number\\\");\\n\\n        uint _totalFee = _num*_badge*userBadge.price();\\n        if (badgeFeeToken == address(0)){\\n            require(msg.value >= _totalFee, \\\"UC: buy amount error\\\");\\n            (bool success, ) = payable(badgeFeeAddr).call{value: msg.value}(\\\"\\\");\\n            require(success, \\\"Transfer failed\\\");\\n        } else {\\n            IERC20(badgeFeeToken).transferFrom(who, badgeFeeAddr, _totalFee);\\n        }\\n        userBadge.addBadge(_uid, _badge, _num);\\n        userBadge.subStock(_badge, _num);\\n        userBadge.addBuyRecord(_uid, _badge, _num);\\n        return true;\\n    }\\n\\n    function badgeInnerRegist(uint _uid, uint _lv, uint _num) public virtual override onlyOwner returns (bool) {\\n        require(_lv < 6 && _lv > 0, \\\"UC: badge innver must be 1 - 5\\\");\\n        userBadge.addBadge(_uid, _lv, _num);\\n        return true;\\n    }\\n\\n    event EventBadgeTransfer(uint indexed _uid, uint indexed _to, uint indexed _badge, uint _num);\\n\\n    function badgeTransfer(uint _badge, address _to, uint _num) public virtual override returns (bool) {\\n        require(_badge < 6 && _badge > 0, \\\"UC: badge must be 1 - 5\\\");\\n        address who = _msgSender();\\n        require(who != address(0), \\\"UC: regist badge cannot be zero\\\");        \\n        uint _uid = userId(who);\\n        require(isValidId(_uid), \\\"UC: regist badge invalid uid\\\");\\n        uint _toUid = userStorage.userId(_to);\\n        require(isValidId(_toUid), \\\"UC: badge transfer to invalid user\\\");\\n        require(userBadge.balance(_uid, _badge) >= _num, \\\"UC: Insufficient transfer balance\\\");\\n        userBadge.subBadge(_uid, _badge, _num);\\n        userBadge.addBadge(_toUid, _badge, _num);\\n        emit EventBadgeTransfer(_uid, _toUid, _badge, _num);\\n        return true;\\n    }\\n\\n\\n    /**\\n        Transfer user info\\n     */\\n    event EventMigrateUser(address indexed _from, address indexed _to, uint _uid);\\n\\n    function _transferUser(address _from, address _to) internal {\\n        require(_from != _to, \\\"UC: migrate user cannot be the same address\\\");\\n        require(userId(_from) > 0 && userId(_to) == 0, \\\"UC: migrate condition is deny\\\");\\n        uint _uid = userId(_from);\\n        userStorage.setUser(_to, _uid);\\n        userStorage.setUserOfID(_from, 0);\\n        delete _uidApprovals[_uid];\\n        emit EventMigrateUser(_from, _to, _uid);\\n    }\\n\\n    function transferUser(address _to) public virtual override returns (bool) {\\n        _transferUser(_msgSender(), _to);\\n        return true;\\n    }\\n\\n    event UidApproval(address indexed owner, address indexed approved, uint256 indexed uid);\\n\\n    function _approve(address _to, uint256 _uid) internal virtual {\\n        _uidApprovals[_uid] = _to;\\n        emit UidApproval(userStorage.userOfId(_uid), _to, _uid);\\n    }\\n\\n    function approve(address _to, uint _uid) public virtual override {\\n        address _owner = userStorage.userOfId(_uid);\\n        require(_to != _owner, \\\"UC: approval to current owner\\\");\\n        require(\\n            _msgSender() == _owner || isApprovedForAll(_owner, _msgSender()),\\n            \\\"UC: approve caller is not token owner or approved for all\\\");\\n        _approve(_to, _uid);\\n    }\\n\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool status);\\n\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"UC: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    function getApproved(uint uid) public view virtual override returns (address) {\\n        require(userStorage.isValidId(uid), \\\"UC: invalid user ID\\\");\\n        return _uidApprovals[uid];\\n    }\\n\\n    function _isApprovedOrOwner(address _spender, uint _uid) internal view virtual returns (bool) {\\n        address _owner = userStorage.userOfId(_uid);\\n        return (_spender == _owner || isApprovedForAll(_owner, _spender) || getApproved(_uid) == _spender);\\n    }\\n\\n    function transferUserFrom(address _from, address _to, uint _uid) public virtual override returns (bool) {\\n        require(_isApprovedOrOwner(_msgSender(), _uid), \\\"UC: caller is not token owner or approved\\\");\\n        _transferUser(_from, _to);\\n        return true;\\n    }\\n\\n    function ownerOf(uint _uid) public view virtual override returns (address) {\\n        address owner = userStorage.userOfId(_uid);\\n        require(owner != address(0), \\\"UC: invalid user ID\\\");\\n        return owner;\\n    }\\n\\n    function userId(address _addr) public view returns (uint _uid) {\\n        _uid = userStorage.userId(_addr);\\n    }\\n\\n    function isValidId(uint _uid) public view returns (bool _valid) {\\n        _valid = userStorage.isValidId(_uid);\\n    }\\n\\n    function user(uint _uid) public view virtual override returns (address _addr, uint _refId, uint _level, uint _regTime, bool _isValid) {\\n        _addr = userStorage.userOfId(_uid);\\n        (_refId, _regTime, _level, _isValid) = userStorage.userBasicData(_uid);\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_uid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_badge\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"EventBadgeTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_uid\",\"type\":\"uint256\"}],\"name\":\"EventMigrateUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_uid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_badge\",\"type\":\"uint256\"}],\"name\":\"EventUseBadge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"NewRegister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_uid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_rfid\",\"type\":\"uint256\"}],\"name\":\"RegBindEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"uid\",\"type\":\"uint256\"}],\"name\":\"UidApproval\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_uid\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_uid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"badgeInnerRegist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_badge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"badgeRegist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_badge\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"badgeTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"uid\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_uid\",\"type\":\"uint256\"}],\"name\":\"isValidId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_valid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_uid\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"regAndBind\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"register\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setBadgeFeeAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setBadgeFeeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setUserBadge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_uid\",\"type\":\"uint256\"}],\"name\":\"transferUserFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_badge\",\"type\":\"uint256\"}],\"name\":\"useBadge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_uid\",\"type\":\"uint256\"}],\"name\":\"user\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_refId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_regTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"userId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_uid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "UserCenter", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}