{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/VRFV2WrapperInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFV2WrapperInterface {\\n  /**\\n   * @return the request ID of the most recent VRF V2 request made by this wrapper. This should only\\n   * be relied option within the same transaction that the request was made.\\n   */\\n  function lastRequestId() external view returns (uint256);\\n\\n  /**\\n   * @notice Calculates the price of a VRF request with the given callbackGasLimit at the current\\n   * @notice block.\\n   *\\n   * @dev This function relies on the transaction gas price which is not automatically set during\\n   * @dev simulation. To estimate the price at a specific gas price, use the estimatePrice function.\\n   *\\n   * @param _callbackGasLimit is the gas limit used to estimate the price.\\n   */\\n  function calculateRequestPrice(uint32 _callbackGasLimit) external view returns (uint256);\\n\\n  /**\\n   * @notice Estimates the price of a VRF request with a specific gas limit and gas price.\\n   *\\n   * @dev This is a convenience function that can be called in simulation to better understand\\n   * @dev pricing.\\n   *\\n   * @param _callbackGasLimit is the gas limit used to estimate the price.\\n   * @param _requestGasPriceWei is the gas price in wei used for the estimation.\\n   */\\n  function estimateRequestPrice(uint32 _callbackGasLimit, uint256 _requestGasPriceWei) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/VRFV2WrapperConsumerBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/VRFV2WrapperInterface.sol\\\";\\n\\n/** *******************************************************************************\\n * @notice Interface for contracts using VRF randomness through the VRF V2 wrapper\\n * ********************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Create VRF V2 requests without the need for subscription management. Rather than creating\\n * @dev and funding a VRF V2 subscription, a user can use this wrapper to create one off requests,\\n * @dev paying up front rather than at fulfillment.\\n *\\n * @dev Since the price is determined using the gas price of the request transaction rather than\\n * @dev the fulfillment transaction, the wrapper charges an additional premium on callback gas\\n * @dev usage, in addition to some extra overhead costs associated with the VRFV2Wrapper contract.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFV2WrapperConsumerBase. The consumer must be funded\\n * @dev with enough LINK to make the request, otherwise requests will revert. To request randomness,\\n * @dev call the 'requestRandomness' function with the desired VRF parameters. This function handles\\n * @dev paying for the request based on the current pricing.\\n *\\n * @dev Consumers must implement the fullfillRandomWords function, which will be called during\\n * @dev fulfillment with the randomness result.\\n */\\nabstract contract VRFV2WrapperConsumerBase {\\n  LinkTokenInterface internal immutable LINK;\\n  VRFV2WrapperInterface internal immutable VRF_V2_WRAPPER;\\n\\n  /**\\n   * @param _link is the address of LinkToken\\n   * @param _vrfV2Wrapper is the address of the VRFV2Wrapper contract\\n   */\\n  constructor(address _link, address _vrfV2Wrapper) {\\n    LINK = LinkTokenInterface(_link);\\n    VRF_V2_WRAPPER = VRFV2WrapperInterface(_vrfV2Wrapper);\\n  }\\n\\n  /**\\n   * @dev Requests randomness from the VRF V2 wrapper.\\n   *\\n   * @param _callbackGasLimit is the gas limit that should be used when calling the consumer's\\n   *        fulfillRandomWords function.\\n   * @param _requestConfirmations is the number of confirmations to wait before fulfilling the\\n   *        request. A higher number of confirmations increases security by reducing the likelihood\\n   *        that a chain re-org changes a published randomness outcome.\\n   * @param _numWords is the number of random words to request.\\n   *\\n   * @return requestId is the VRF V2 request ID of the newly created randomness request.\\n   */\\n  function requestRandomness(\\n    uint32 _callbackGasLimit,\\n    uint16 _requestConfirmations,\\n    uint32 _numWords\\n  ) internal returns (uint256 requestId) {\\n    LINK.transferAndCall(\\n      address(VRF_V2_WRAPPER),\\n      VRF_V2_WRAPPER.calculateRequestPrice(_callbackGasLimit),\\n      abi.encode(_callbackGasLimit, _requestConfirmations, _numWords)\\n    );\\n    return VRF_V2_WRAPPER.lastRequestId();\\n  }\\n\\n  /**\\n   * @notice fulfillRandomWords handles the VRF V2 wrapper response. The consuming contract must\\n   * @notice implement it.\\n   *\\n   * @param _requestId is the VRF V2 request ID.\\n   * @param _randomWords is the randomness result.\\n   */\\n  function fulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) internal virtual;\\n\\n  function rawFulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) external {\\n    require(msg.sender == address(VRF_V2_WRAPPER), \\\"only VRF V2 wrapper can fulfill\\\");\\n    fulfillRandomWords(_requestId, _randomWords);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/HashBetChainlink.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFV2WrapperConsumerBase.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IBankroll} from \\\"./interface/IBankroll.sol\\\";\\nimport {IDAO} from \\\"./interface/IDAO.sol\\\";\\nimport \\\"./Utils/ChainSpecificUtil.sol\\\";\\n\\ncontract HashBetChainlink is Ownable, ReentrancyGuard, VRFV2WrapperConsumerBase {\\n    // Modulo is the number of equiprobable outcomes in a game:\\n    //  2 for coin flip\\n    //  6 for dice roll\\n    //  6*6 = 36 for double dice\\n    //  37 for roulette\\n    //  100 for hashroll\\n    uint constant MAX_MODULO = 100;\\n\\n    // Modulos below MAX_MASK_MODULO are checked against a bit mask, allowing betting on specific outcomes.\\n    // For example in a dice roll (modolo = 6),\\n    // 000001 mask means betting on 1. 000001 converted from binary to decimal becomes 1.\\n    // 101000 mask means betting on 4 and 6. 101000 converted from binary to decimal becomes 40.\\n    // The specific value is dictated by the fact that 256-bit intermediate\\n    // multiplication result allows implementing population count efficiently\\n    // for numbers that are up to 42 bits, and 40 is the highest multiple of\\n    // eight below 42.\\n    uint constant MAX_MASK_MODULO = 40;\\n\\n    // EVM BLOCKHASH opcode can query no further than 256 blocks into the\\n    // past. Given that settleBet uses block hash of placeBet as one of\\n    // complementary entropy sources, we cannot process bets older than this\\n    // threshold. On rare occasions dice2.win croupier may fail to invoke\\n    // settleBet in this timespan due to technical issues or extreme Ethereum\\n    // congestion; such bets can be refunded via invoking refundBet.\\n    uint constant BET_EXPIRATION_BLOCKS = 250;\\n\\n    // This is a check on bet mask overflow. Maximum mask is equivalent to number of possible binary outcomes for maximum modulo.\\n    uint constant MAX_BET_MASK = 2 ** MAX_MASK_MODULO;\\n\\n    // These are constants taht make O(1) population count in placeBet possible.\\n    uint constant POPCNT_MULT =\\n        0x0000000000002000000000100000000008000000000400000000020000000001;\\n    uint constant POPCNT_MASK =\\n        0x0001041041041041041041041041041041041041041041041041041041041041;\\n    uint constant POPCNT_MODULO = 0x3F;\\n\\n    uint256 private constant GRACE_PERIOD_TIME = 3600;\\n\\n    // In addition to house edge, wealth tax is added every time the bet amount exceeds a multiple of a threshold.\\n    // For example, if wealthTaxIncrementThreshold = 3000 ether,\\n    // A bet amount of 3000 ether will have a wealth tax of 1% in addition to house edge.\\n    // A bet amount of 6000 ether will have a wealth tax of 2% in addition to house edge.\\n    uint public wealthTaxIncrementThreshold = 3000 ether;\\n    uint public wealthTaxIncrementPercent = 1;\\n\\n    // The minimum and maximum bets.\\n    uint public minBetAmount = 0.01 ether;\\n    uint public maxBetAmount = 10000 ether;\\n\\n    // max bet profit. Used to cap bets against dynamic odds.\\n    uint public maxProfit = 300000 ether;\\n\\n    // The minimum larger comparison value.\\n    uint public minOverValue = 1;\\n\\n    // The maximum smaller comparison value.\\n    uint public maxUnderValue = 98;\\n\\n    // Depends on the number of requested values that you want sent to the\\n    // fulfillRandomWords() function. Test and adjust\\n    // this limit based on the network that you select, the size of the request,\\n    // and the processing of the callback request in the fulfillRandomWords()\\n    // function.\\n    uint32 constant callbackGasLimit = 1000000;\\n\\n    // The default is 3, but you can set this higher.\\n    uint16 constant requestConfirmations = 3;\\n\\n    // Address LINK\\n    address linkAddress;\\n\\n    // croupiers\\n    mapping(address => bool) public whitelistedCroupier;\\n\\n    // address for DAO management operations\\n    address public dao;\\n\\n    // address for bankroll\\n    address public bankroll;\\n\\n    // Info of each bet.\\n    struct Bet {\\n        // Wager amount in wei.\\n        uint wager;\\n        // Modulo of a game.\\n        uint8 modulo;\\n        // Number of winning outcomes, used to compute winning payment (* modulo/rollEdge),\\n        // and used instead of mask for games with modulo > MAX_MASK_MODULO.\\n        uint8 rollEdge;\\n        // Bit mask representing winning bet outcomes (see MAX_MASK_MODULO comment).\\n        uint40 mask;\\n        // Block number of placeBet tx.\\n        uint placeBlockNumber;\\n        // Address of a gambler, used to pay out winning bets.\\n        address payable gambler;\\n        // Status of bet settlement.\\n        bool isSettled;\\n        // Win amount.\\n        uint winAmount;\\n        // Comparison method.\\n        bool isLarger;\\n        // VRF request id\\n        uint256 requestID;\\n        uint32 numBets;\\n        uint256 stopGain;\\n        uint256 stopLoss;\\n        address tokenAddress;\\n    }\\n\\n    // Each bet is deducted\\n    uint public defaultHouseEdgePercent = 2;\\n\\n    uint256 public requestCounter;\\n    mapping(uint256 => uint256) s_requestIDToRequestIndex;\\n    // bet place time\\n    mapping(uint256 => uint256) betPlaceTime;\\n    // bet data\\n    mapping(uint256 => Bet) public bets;\\n\\n    mapping(uint32 => uint32) public houseEdgePercents;\\n\\n    // stable token that we use to deposit/withdrawal\\n    mapping(address => bool) public whitelistedERC20;\\n\\n    // Events\\n    event BetPlaced(\\n        address indexed gambler,\\n        uint amount,\\n        uint indexed betID,\\n        uint8 indexed modulo,\\n        uint8 rollEdge,\\n        uint40 mask,\\n        bool isLarger\\n    );\\n    event BetSettled(\\n        address indexed gambler,\\n        uint256 wager,\\n        uint8 indexed modulo,\\n        uint8 rollEdge,\\n        uint40 mask,\\n        uint256[] randomWords,\\n        uint256[] outcomes,\\n        uint256[] payouts,\\n        uint256 payout,\\n        uint32 numGames,\\n        uint256 betID\\n    );\\n    event BetRefunded(address indexed gambler, uint256 betID, uint amount);\\n\\n    event TransferFunds(\\n        uint256 indexed id,\\n        address indexed to,\\n        address indexed token,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    error OnlyCoordinatorCanFulfill(address have, address want);\\n    error NotAwaitingVRF();\\n    error AwaitingVRF(uint256 requestID);\\n    error RefundFailed();\\n    error InvalidValue(uint256 required, uint256 sent);\\n    error TransferFailed();\\n    error SequencerDown();\\n    error GracePeriodNotOver();\\n\\n    constructor(\\n        address _linkAddress,\\n        address _vrfV2Wrapper\\n    ) VRFV2WrapperConsumerBase(_linkAddress, _vrfV2Wrapper) {\\n        linkAddress = _linkAddress;\\n        houseEdgePercents[2] = 1;\\n        houseEdgePercents[6] = 1;\\n        houseEdgePercents[36] = 1;\\n        houseEdgePercents[37] = 1;\\n        houseEdgePercents[100] = 1;\\n    }\\n\\n        modifier onlyWhitelist(address token) {\\n        require(whitelistedERC20[token], \\\"OW\\\");\\n        _;\\n    }\\n\\n    // Standard modifier on methods invokable only by croupier.\\n    modifier onlyCroupier(address croupier) {\\n        require(whitelistedCroupier[croupier], \\\"OC\\\");\\n        _;\\n    }\\n\\n    // any admin can whitelist new erc20 token to use\\n    function whitelistERC20(address token) external onlyOwner {\\n        whitelistedERC20[token] = true;\\n    }\\n\\n    // any admin can unwhitelist erc20 token to use\\n    function unwhitelistERC20(address token) external onlyOwner {\\n        require(whitelistedERC20[token], \\\"W\\\");\\n        delete whitelistedERC20[token];\\n    }\\n\\n    // any admin can whitelist croupier\\n    function whitelistCroupier(address croupier) external onlyOwner {\\n        whitelistedCroupier[croupier] = true;\\n    }\\n\\n    // any admin can unwhitelist croupier\\n    function unwhitelistCroupier(address croupier) external onlyOwner {\\n        require(whitelistedCroupier[croupier], \\\"C\\\");\\n        delete whitelistedCroupier[croupier];\\n    }\\n\\n    //set bankroll\\n    function setBankroll(address newBankroll) external onlyOwner {\\n        bankroll = newBankroll;\\n    }\\n\\n    function setInitialDao(address initialDaoAddress) external onlyOwner {\\n        require(dao == address(0), \\\"dao not empty\\\");\\n        require(initialDaoAddress != address(0), \\\"0\\\"); //0x0 addr\\n        dao = initialDaoAddress;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(\\n        address\\n    ) public virtual override onlyOwner {\\n        revert(\\\"Unimplemented\\\");\\n    }\\n\\n    // request to change DAO address\\n    function daoChange(uint256 id) external {\\n        address currentDAO = dao;\\n        dao = IDAO(currentDAO).isDAOChangeAvailable(id);\\n        require(\\n            dao != address(0),\\n            \\\"New dao is the zero address\\\"\\n        );\\n        require(IDAO(currentDAO).confirmDAOChange(id), \\\"N\\\"); // not confirmed\\n    }\\n\\n    // request to DAO for change owner\\n    function ownerChange(uint256 id) external {\\n        address newOwner = IDAO(dao).isOwnerChangeAvailable(id);\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n        require(IDAO(dao).confirmOwnerChange(id), \\\"C\\\"); //not confirmed\\n    }\\n\\n    // Place bet\\n    function placeBet(\\n        uint wager,\\n        uint betMask,\\n        uint modulo,\\n        bool isLarger,\\n        uint32 numBets,\\n        uint256 stopGain,\\n        uint256 stopLoss,\\n        address tokenAddress\\n    ) external payable onlyCroupier(_msgSender()) onlyWhitelist(tokenAddress) nonReentrant {\\n        address msgSender = _msgSender();\\n        Bet memory bet;\\n\\n        validateArguments(wager, numBets, betMask, modulo);\\n\\n        if (modulo <= MAX_MASK_MODULO) {\\n            // Small modulo games can specify exact bet outcomes via bit mask.\\n            // rollEdge is a number of 1 bits in this mask (population count).\\n            // This magic looking formula is an efficient way to compute population\\n            // count on EVM for numbers below 2**40.\\n            bet.rollEdge = uint8(\\n                ((betMask * POPCNT_MULT) & POPCNT_MASK) % POPCNT_MODULO\\n            );\\n            bet.mask = uint40(betMask);\\n        } else {\\n            // Larger modulos games specify the right edge of half-open interval of winning bet outcomes.\\n            bet.rollEdge = uint8(betMask);\\n        }\\n\\n        bet.wager = wager;\\n        // Winning amount.\\n        bet.winAmount = getDiceWinAmount(\\n            bet.wager,\\n            modulo,\\n            bet.rollEdge,\\n            isLarger\\n        );\\n\\n        // Update lock funds,lock single winning amount multipy number of bets\\n        IBankroll(bankroll).lockFunds(tokenAddress, bet.winAmount * numBets);\\n        bet.tokenAddress = tokenAddress;\\n\\n        uint256 requestID = _requestRandomWords(numBets);\\n\\n        s_requestIDToRequestIndex[requestID] = requestCounter;\\n        betPlaceTime[requestCounter] = block.timestamp;\\n        \\n        // Store bet\\n        bet.modulo = uint8(modulo);\\n        bet.placeBlockNumber = ChainSpecificUtil.getBlockNumber();\\n        bet.gambler = payable(msg.sender);\\n        bet.isSettled = false;\\n        bet.requestID = requestID;\\n        bet.isLarger = isLarger;\\n        bet.numBets = numBets;\\n        bet.stopGain = stopGain;\\n        bet.stopLoss = stopLoss;\\n\\n        bets[requestCounter] = bet;\\n\\n        // Record bet in event logs\\n        emit BetPlaced(\\n            msgSender,\\n            bet.wager,\\n            requestCounter,\\n            bet.modulo,\\n            bet.rollEdge,\\n            bet.mask,\\n            bet.isLarger\\n        );\\n\\n        requestCounter += 1;\\n    }\\n\\n    // Get the expected win amount after house edge is subtracted.\\n    function getDiceWinAmount(\\n        uint amount,\\n        uint modulo,\\n        uint rollEdge,\\n        bool isLarger\\n    ) private view returns (uint winAmount) {\\n        require(\\n            0 < rollEdge && rollEdge <= modulo,\\n            \\\"Win probability out of range.\\\"\\n        );\\n        uint houseEdge = (amount *\\n            (getModuloHouseEdgePercent(uint32(modulo)) +\\n                getWealthTax(amount))) / 100;\\n        uint realRollEdge = rollEdge;\\n        if (modulo == MAX_MODULO && isLarger) {\\n            realRollEdge = MAX_MODULO - rollEdge - 1;\\n        }\\n        winAmount = ((amount - houseEdge) * modulo) / realRollEdge;\\n\\n        // round down to multiple 1000Gweis\\n        winAmount = (winAmount / 1e12) * 1e12;\\n\\n        uint maxWinAmount = amount + maxProfit;\\n\\n        if (winAmount > maxWinAmount) {\\n            winAmount = maxWinAmount;\\n        }\\n    }\\n\\n    // Get wealth tax\\n    function getWealthTax(uint amount) private view returns (uint wealthTax) {\\n        wealthTax =\\n            (amount / wealthTaxIncrementThreshold) *\\n            wealthTaxIncrementPercent;\\n    }\\n\\n    // Common settlement code for settleBet.\\n    function settleBetCommon(\\n        Bet storage bet,\\n        uint reveal\\n    ) private view returns (uint256 winAmount, uint256 outcome) {\\n        // Fetch bet parameters into local variables (to save gas).\\n        uint modulo = bet.modulo;\\n        uint rollEdge = bet.rollEdge;\\n        bool isLarger = bet.isLarger;\\n\\n        // The RNG - combine \\\"reveal\\\" and blockhash of placeBet using Keccak256. Miners\\n        // are not aware of \\\"reveal\\\" and cannot deduce it from \\\"commit\\\" (as Keccak256\\n        // preimage is intractable), and house is unable to alter the \\\"reveal\\\" after\\n        // placeBet have been mined (as Keccak256 collision finding is also intractable).\\n        bytes32 entropy = keccak256(abi.encodePacked(reveal));\\n\\n        // Do a roll by taking a modulo of entropy. Compute winning amount.\\n        outcome = uint(entropy) % modulo;\\n\\n        // Win amount if gambler wins this bet\\n        uint possibleWinAmount = bet.winAmount;\\n\\n        // Actual win amount by gambler\\n        winAmount = 0;\\n\\n        // Determine dice outcome.\\n        if (modulo <= MAX_MASK_MODULO) {\\n            // For small modulo games, check the outcome against a bit mask.\\n            if ((2 ** outcome) & bet.mask != 0) {\\n                winAmount = possibleWinAmount;\\n            }\\n        } else {\\n            // For larger modulos, check inclusion into half-open interval.\\n            if (isLarger) {\\n                if (outcome > rollEdge) {\\n                    winAmount = possibleWinAmount;\\n                }\\n            } else {\\n                if (outcome < rollEdge) {\\n                    winAmount = possibleWinAmount;\\n                }\\n            }\\n        }\\n    }\\n\\n    // Return the bet in extremely unlikely scenario it was not settled by Chainlink VRF.\\n    // In case you ever find yourself in a situation like this, just contact hashbet support.\\n    // However, nothing precludes you from calling this method yourself.\\n    function refundBet(uint256 betID) external payable nonReentrant {\\n        Bet storage bet = bets[betID];\\n        uint amount = bet.wager * bet.numBets;\\n        uint betTime = betPlaceTime[betID];\\n\\n        // Validation check\\n        require(amount > 0, \\\"Bet does not exist.\\\"); // Check that bet exists\\n        require(bet.isSettled == false, \\\"Bet is settled already.\\\"); // Check that bet is still open\\n        require(\\n            block.timestamp >= (betTime + 1 hours),\\n            \\\"Wait after placing bet before requesting refund.\\\"\\n        );\\n\\n        // Unlock possibleWinAmount from lockedInBets, regardless of the outcome.\\n        IBankroll(bankroll).unlockFunds(bet.tokenAddress, bet.winAmount * bet.numBets);\\n\\n        // Update bet records\\n        bet.isSettled = true;\\n        bet.winAmount = 0;\\n\\n        // Record refund in event logs\\n        emit BetRefunded(bet.gambler, betID, amount);\\n\\n        delete (s_requestIDToRequestIndex[bet.requestID]);\\n        delete (betPlaceTime[betID]);\\n    }\\n\\n    /**\\n     * Allow withdraw of Link tokens from the contract\\n     */\\n    function withdrawLink() public onlyOwner {\\n        LinkTokenInterface link = LinkTokenInterface(linkAddress);\\n        require(\\n            link.transfer(msg.sender, link.balanceOf(address(this))),\\n            \\\"Unable to transfer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev calculates in form of native token the fee charged by chainlink VRF\\n     * @return VRFfee amount of link user has to pay\\n     */\\n    function getVRFFee(uint gasPrice) public view returns (uint256 VRFfee) {\\n        VRFfee = VRF_V2_WRAPPER.estimateRequestPrice(\\n            callbackGasLimit,\\n            gasPrice\\n        );\\n    }\\n\\n    // Check arguments\\n    function validateArguments(\\n        uint amount,\\n        uint32 numBets,\\n        uint betMask,\\n        uint modulo\\n    ) private view {\\n        // Validate input data.\\n        require(numBets >= 1 && numBets <= 100, \\\"Invalid number of bets\\\");\\n        require(\\n            modulo == 2 ||\\n                modulo == 6 ||\\n                modulo == 36 ||\\n                modulo == 37 ||\\n                modulo == 100,\\n            \\\"Modulo should be valid value.\\\"\\n        );\\n        require(\\n            amount >= minBetAmount && amount <= maxBetAmount,\\n            \\\"Bet amount should be within range.\\\"\\n        );\\n\\n        if (modulo <= MAX_MASK_MODULO) {\\n            require(\\n                betMask > 0 && betMask < MAX_BET_MASK,\\n                \\\"Mask should be within range.\\\"\\n            );\\n        }\\n\\n        if (modulo == MAX_MODULO) {\\n            require(\\n                betMask >= minOverValue && betMask <= maxUnderValue,\\n                \\\"High modulo range, Mask should be within range.\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev function to send the request for randomness to chainlink\\n     */\\n    function _requestRandomWords(\\n        uint32 numWords\\n    ) internal returns (uint256 requestID) {\\n        requestID = requestRandomness(\\n            callbackGasLimit,\\n            requestConfirmations,\\n            numWords\\n        );\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 requestID,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 betID = s_requestIDToRequestIndex[requestID];\\n        Bet storage bet = bets[betID];\\n        if (bet.gambler == address(0)) revert();\\n\\n        // Validation check\\n        require(bet.wager > 0, \\\"Bet does not exist.\\\"); // Check that bet exists\\n        require(bet.isSettled == false, \\\"Bet is settled already\\\"); // Check that bet is not settled yet\\n\\n        // Settle bet must be within one hour\\n        require(\\n            block.timestamp < (betPlaceTime[betID] + 1 hours),\\n            \\\"settleBet has expired.\\\"\\n        );\\n\\n        // Check that bet has not expired yet (see comment to BET_EXPIRATION_BLOCKS).\\n        require(\\n            ChainSpecificUtil.getBlockNumber() > bet.placeBlockNumber,\\n            \\\"settleBet before placeBet\\\"\\n        );\\n\\n        uint32 i = 0;\\n        int256 totalValue = 0;\\n        uint256 payout = 0;\\n\\n        uint256[] memory outcomes = new uint256[](bet.numBets);\\n        uint256[] memory payouts = new uint256[](bet.numBets);\\n\\n        for (i = 0; i < bet.numBets; i++) {\\n            if (bet.stopGain > 0 && totalValue >= int256(bet.stopGain)) {\\n                break;\\n            }\\n            if (bet.stopLoss > 0 && totalValue <= -int256(bet.stopLoss)) {\\n                break;\\n            }\\n            uint curReval = randomWords[i];\\n            // Settle bet using reveal as entropy sources.\\n            (uint256 winAmount, uint256 outcome) = settleBetCommon(\\n                bet,\\n                curReval\\n            );\\n            outcomes[i] = outcome;\\n\\n            if (winAmount > 0) {\\n                totalValue += int256(winAmount - bet.wager);\\n                payout += winAmount;\\n                payouts[i] = winAmount;\\n                continue;\\n            }\\n\\n            totalValue -= int256(bet.wager);\\n        }\\n\\n        payout += (bet.numBets - i) * bet.wager;\\n\\n        // Unlock possibleWinAmount from lockedInBets, regardless of the outcome.\\n        IBankroll(bankroll).unlockFunds(bet.tokenAddress, bet.winAmount * bet.numBets);\\n\\n        // Update bet records\\n        bet.isSettled = true;\\n        uint256[] memory curRandomWords = randomWords;\\n        uint32 curIdx = i;\\n        uint256 curBetID = betID;\\n\\n        emit BetSettled(\\n            bet.gambler,\\n            bet.wager,\\n            uint8(bet.modulo),\\n            uint8(bet.rollEdge),\\n            bet.mask,\\n            curRandomWords,\\n            outcomes,\\n            payouts,\\n            payout,\\n            curIdx,\\n            curBetID\\n        );\\n\\n        delete (s_requestIDToRequestIndex[requestID]);\\n        delete (betPlaceTime[betID]);\\n    }\\n\\n    /**\\n     * @dev returns to user the excess fee sent to pay for the VRF\\n     * @param refund amount to send back to user\\n     */\\n    function refundExcessValue(uint256 refund) internal {\\n        if (refund == 0) {\\n            return;\\n        }\\n        (bool success, ) = payable(msg.sender).call{value: refund}(\\\"\\\");\\n        if (!success) {\\n            revert RefundFailed();\\n        }\\n    }\\n\\n    function getModuloHouseEdgePercent(\\n        uint32 modulo\\n    ) internal view returns (uint32 houseEdgePercent) {\\n        houseEdgePercent = houseEdgePercents[modulo];\\n        if (houseEdgePercent == 0) {\\n            houseEdgePercent = uint32(defaultHouseEdgePercent);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IBankroll.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBankroll {\\n    // lock funds\\n    function lockFunds(address token, uint256 amount) external;\\n    // Unlock funds.\\n    function unlockFunds(address token, uint256 amount) external;\\n    // getter for free funds of some token\\n    function getFreeFunds(address token) external view returns(uint256);\\n}\"\r\n    },\r\n    \"contracts/interface/IDAO.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IDAO {\\n    function isTransferAvailable(\\n        uint256 id\\n    ) external view returns (uint256, address, address);\\n\\n    function confirmTransfer(uint256 id) external returns (bool);\\n\\n    function isOwnerChangeAvailable(uint256 id) external view returns (address);\\n\\n    function confirmOwnerChange(uint256 id) external returns (bool);\\n\\n    function isDAOChangeAvailable(uint256 id) external view returns (address);\\n\\n    function confirmDAOChange(uint256 id) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Utils/ChainSpecificUtil.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface ArbGasInfo {\\n    // return gas prices in wei, assuming the specified aggregator is used\\n    //        (\\n    //            per L2 tx,\\n    //            per L1 calldata unit, (zero byte = 4 units, nonzero byte = 16 units)\\n    //            per storage allocation,\\n    //            per ArbGas base,\\n    //            per ArbGas congestion,\\n    //            per ArbGas total\\n    //        )\\n    function getPricesInWeiWithAggregator(\\n        address aggregator\\n    ) external view returns (uint, uint, uint, uint, uint, uint);\\n\\n    // return gas prices in wei, as described above, assuming the caller's preferred aggregator is used\\n    //     if the caller hasn't specified a preferred aggregator, the default aggregator is assumed\\n    function getPricesInWei()\\n        external\\n        view\\n        returns (uint, uint, uint, uint, uint, uint);\\n\\n    // return prices in ArbGas (per L2 tx, per L1 calldata unit, per storage allocation),\\n    //       assuming the specified aggregator is used\\n    function getPricesInArbGasWithAggregator(\\n        address aggregator\\n    ) external view returns (uint, uint, uint);\\n\\n    // return gas prices in ArbGas, as described above, assuming the caller's preferred aggregator is used\\n    //     if the caller hasn't specified a preferred aggregator, the default aggregator is assumed\\n    function getPricesInArbGas() external view returns (uint, uint, uint);\\n\\n    // return gas accounting parameters (speedLimitPerSecond, gasPoolMax, maxTxGasLimit)\\n    function getGasAccountingParams() external view returns (uint, uint, uint);\\n\\n    // get ArbOS's estimate of the L1 gas price in wei\\n    function getL1GasPriceEstimate() external view returns (uint);\\n\\n    // set ArbOS's estimate of the L1 gas price in wei\\n    // reverts unless called by chain owner or designated gas oracle (if any)\\n    function setL1GasPriceEstimate(uint priceInWei) external;\\n\\n    // get L1 gas fees paid by the current transaction (txBaseFeeWei, calldataFeeWei)\\n    function getCurrentTxL1GasFees() external view returns (uint);\\n}\\n\\ninterface ArbSys {\\n    /**\\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\\n     * @return block number as int\\n     */\\n    function arbBlockNumber() external view returns (uint256);\\n\\n    /**\\n     * @notice Get Arbitrum block hash (reverts unless currentBlockNum-256 <= arbBlockNum < currentBlockNum)\\n     * @return block hash\\n     */\\n    function arbBlockHash(uint256 arbBlockNum) external view returns (bytes32);\\n\\n    /**\\n     * @notice Gets the rollup's unique chain identifier\\n     * @return Chain identifier as int\\n     */\\n    function arbChainID() external view returns (uint256);\\n\\n    /**\\n     * @notice Get internal version number identifying an ArbOS build\\n     * @return version number as int\\n     */\\n    function arbOSVersion() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns 0 since Nitro has no concept of storage gas\\n     * @return uint 0\\n     */\\n    function getStorageGasAvailable() external view returns (uint256);\\n\\n    /**\\n     * @notice (deprecated) check if current call is top level (meaning it was triggered by an EoA or a L1 contract)\\n     * @dev this call has been deprecated and may be removed in a future release\\n     * @return true if current execution frame is not a call by another L2 contract\\n     */\\n    function isTopLevelCall() external view returns (bool);\\n\\n    /**\\n     * @notice map L1 sender contract address to its L2 alias\\n     * @param sender sender address\\n     * @param unused argument no longer used\\n     * @return aliased sender address\\n     */\\n    function mapL1SenderContractAddressToL2Alias(\\n        address sender,\\n        address unused\\n    ) external pure returns (address);\\n\\n    /**\\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\\n     * @return true iff the caller's address is an alias for an L1 contract address\\n     */\\n    function wasMyCallersAddressAliased() external view returns (bool);\\n\\n    /**\\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\\n     * @return address of the caller's caller, without applying L1 contract address aliasing\\n     */\\n    function myCallersAddressWithoutAliasing() external view returns (address);\\n\\n    /**\\n     * @notice Send given amount of Eth to dest from sender.\\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty data.\\n     * @param destination recipient address on L1\\n     * @return unique identifier for this L2-to-L1 transaction.\\n     */\\n    function withdrawEth(\\n        address destination\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @notice Send a transaction to L1\\n     * @dev it is not possible to execute on the L1 any L2-to-L1 transaction which contains data\\n     * to a contract address without any code (as enforced by the Bridge contract).\\n     * @param destination recipient address on L1\\n     * @param data (optional) calldata for L1 contract call\\n     * @return a unique identifier for this L2-to-L1 transaction.\\n     */\\n    function sendTxToL1(\\n        address destination,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @notice Get send Merkle tree state\\n     * @return size number of sends in the history\\n     * @return root root hash of the send history\\n     * @return partials hashes of partial subtrees in the send history tree\\n     */\\n    function sendMerkleTreeState()\\n        external\\n        view\\n        returns (uint256 size, bytes32 root, bytes32[] memory partials);\\n\\n    /**\\n     * @notice creates a send txn from L2 to L1\\n     * @param position = (level << 192) + leaf = (0 << 192) + leaf = leaf\\n     */\\n    event L2ToL1Tx(\\n        address caller,\\n        address indexed destination,\\n        uint256 indexed hash,\\n        uint256 indexed position,\\n        uint256 arbBlockNum,\\n        uint256 ethBlockNum,\\n        uint256 timestamp,\\n        uint256 callvalue,\\n        bytes data\\n    );\\n\\n    /// @dev DEPRECATED in favour of the new L2ToL1Tx event above after the nitro upgrade\\n    event L2ToL1Transaction(\\n        address caller,\\n        address indexed destination,\\n        uint256 indexed uniqueId,\\n        uint256 indexed batchNumber,\\n        uint256 indexInBatch,\\n        uint256 arbBlockNum,\\n        uint256 ethBlockNum,\\n        uint256 timestamp,\\n        uint256 callvalue,\\n        bytes data\\n    );\\n\\n    /**\\n     * @notice logs a merkle branch for proof synthesis\\n     * @param reserved an index meant only to align the 4th index with L2ToL1Transaction's 4th event\\n     * @param hash the merkle hash\\n     * @param position = (level << 192) + leaf\\n     */\\n    event SendMerkleUpdate(\\n        uint256 indexed reserved,\\n        bytes32 indexed hash,\\n        uint256 indexed position\\n    );\\n}\\n\\n//@dev A library that abstracts out opcodes that behave differently across chains.\\n//@dev The methods below return values that are pertinent to the given chain.\\n//@dev For instance, ChainSpecificUtil.getBlockNumber() returns L2 block number in L2 chains\\nlibrary ChainSpecificUtil {\\n    address private constant ARBSYS_ADDR =\\n        address(0x0000000000000000000000000000000000000064);\\n    ArbSys private constant ARBSYS = ArbSys(ARBSYS_ADDR);\\n    address private constant ARBGAS_ADDR =\\n        address(0x000000000000000000000000000000000000006C);\\n    ArbGasInfo private constant ARBGAS = ArbGasInfo(ARBGAS_ADDR);\\n    uint256 private constant ARB_MAINNET_CHAIN_ID = 42161;\\n    uint256 private constant ARB_GOERLI_TESTNET_CHAIN_ID = 421613;\\n\\n    function getBlockhash(uint256 blockNumber) internal view returns (bytes32) {\\n        uint256 chainid = block.chainid;\\n        if (\\n            chainid == ARB_MAINNET_CHAIN_ID ||\\n            chainid == ARB_GOERLI_TESTNET_CHAIN_ID\\n        ) {\\n            if (\\n                (getBlockNumber() - blockNumber) > 256 ||\\n                blockNumber >= getBlockNumber()\\n            ) {\\n                return \\\"\\\";\\n            }\\n            return ARBSYS.arbBlockHash(blockNumber);\\n        }\\n        return blockhash(blockNumber);\\n    }\\n\\n    function getBlockNumber() internal view returns (uint256) {\\n        uint256 chainid = block.chainid;\\n        if (\\n            chainid == ARB_MAINNET_CHAIN_ID ||\\n            chainid == ARB_GOERLI_TESTNET_CHAIN_ID\\n        ) {\\n            return ARBSYS.arbBlockNumber();\\n        }\\n        return block.number;\\n    }\\n\\n    function getCurrentTxL1GasFees() internal view returns (uint256) {\\n        uint256 chainid = block.chainid;\\n        if (\\n            chainid == ARB_MAINNET_CHAIN_ID ||\\n            chainid == ARB_GOERLI_TESTNET_CHAIN_ID\\n        ) {\\n            return ARBGAS.getCurrentTxL1GasFees();\\n        }\\n        return 0;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_linkAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vrfV2Wrapper\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestID\",\"type\":\"uint256\"}],\"name\":\"AwaitingVRF\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GracePeriodNotOver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sent\",\"type\":\"uint256\"}],\"name\":\"InvalidValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAwaitingVRF\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RefundFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SequencerDown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gambler\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"modulo\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"rollEdge\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"mask\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLarger\",\"type\":\"bool\"}],\"name\":\"BetPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gambler\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"betID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BetRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gambler\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wager\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"modulo\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"rollEdge\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"mask\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"outcomes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"payouts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numGames\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"betID\",\"type\":\"uint256\"}],\"name\":\"BetSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferFunds\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bankroll\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wager\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"modulo\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rollEdge\",\"type\":\"uint8\"},{\"internalType\":\"uint40\",\"name\":\"mask\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"placeBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"gambler\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSettled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"winAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLarger\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"requestID\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"numBets\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"stopGain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopLoss\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"daoChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultHouseEdgePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"getVRFFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"VRFfee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"houseEdgePercents\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxUnderValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minOverValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wager\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"betMask\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"modulo\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLarger\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"numBets\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"stopGain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopLoss\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"placeBet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"betID\",\"type\":\"uint256\"}],\"name\":\"refundBet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBankroll\",\"type\":\"address\"}],\"name\":\"setBankroll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialDaoAddress\",\"type\":\"address\"}],\"name\":\"setInitialDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"croupier\",\"type\":\"address\"}],\"name\":\"unwhitelistCroupier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"unwhitelistERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wealthTaxIncrementPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wealthTaxIncrementThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"croupier\",\"type\":\"address\"}],\"name\":\"whitelistCroupier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"whitelistERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedCroupier\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HashBetChainlink", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000b0897686c545045afc77cf20ec7a532e3120e0f10000000000000000000000004e42f0adeb69203ef7aaa4b7c414e5b1331c14dc", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}