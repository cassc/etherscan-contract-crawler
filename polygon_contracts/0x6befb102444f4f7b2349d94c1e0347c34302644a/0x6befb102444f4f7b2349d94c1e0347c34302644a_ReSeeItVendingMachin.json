{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\ninterface IERC20 {\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ncontract ReSeeItVendingMachine {\r\n    address public owner;\r\n    address private pendingOwner;\r\n    address public treasury;\r\n\r\n    IERC20 public RES;\r\n    IERC20 public USDT;\r\n    IERC20 public USDC_POS;\r\n    IERC20 public USDC_Native;\r\n\r\n    uint256 public rate = 100 * 10**12; // Initial rate for USDC/USDT, accounting for decimal difference\r\n    uint256 public maticRate = 65 * 10**16; // Example: 500 RES for 1 MATIC. Adjust as needed.\r\n\r\n    uint256 public totalSold = 0;\r\n    uint256 public salesLimit = 42 * 10**6 * 10**18; // 42 million tokens with 18 decimals\r\n\r\n    bool public isShutdown = false;\r\n\r\n    event Purchased(address indexed user, address indexed paymentToken, uint256 paymentAmount, uint256 resReceived);\r\n    event RateUpdated(uint256 newRate);\r\n    event MaticRateUpdated(uint256 newMaticRate);\r\n    event SalesLimitUpdated(uint256 newLimit);\r\n    event Shutdown(address indexed executor);\r\n    event Reactivated(address indexed executor);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not the contract owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner, \"Not the pending owner\");\r\n        _;\r\n    }\r\n\r\n    modifier whenNotShutdown() {\r\n        require(!isShutdown, \"Contract is shut down\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _RES, address _USDT, address _USDC_POS, address _USDC_Native, address _treasury) {\r\n        owner = msg.sender;\r\n        RES = IERC20(_RES);\r\n        USDT = IERC20(_USDT);\r\n        USDC_POS = IERC20(_USDC_POS);\r\n        USDC_Native = IERC20(_USDC_Native);\r\n        treasury = _treasury;\r\n    }\r\n\r\n    function purchaseWithUSDT(uint256 usdtAmount) external whenNotShutdown {\r\n        _purchase(usdtAmount, USDT);\r\n    }\r\n\r\n    function purchaseWithUSDC_POS(uint256 usdcAmount) external whenNotShutdown {\r\n        _purchase(usdcAmount, USDC_POS);\r\n    }\r\n\r\n    function purchaseWithUSDC_Native(uint256 usdcAmount) external whenNotShutdown {\r\n        _purchase(usdcAmount, USDC_Native);\r\n    }\r\n\r\n    function purchaseWithMATIC() external payable whenNotShutdown {\r\n        uint256 maticReceived = msg.value;\r\n        require(maticReceived > 0, \"Amount should be greater than 0\");\r\n\r\n        uint256 resAmount = maticReceived * maticRate;\r\n\r\n        require(totalSold + resAmount <= salesLimit, \"Purchase exceeds sales limit\");\r\n        require(RES.balanceOf(treasury) >= resAmount, \"Not enough RES in the treasury\");\r\n\r\n        require(RES.transferFrom(treasury, msg.sender, resAmount), \"RES transfer failed\");\r\n\r\n        totalSold += resAmount;\r\n\r\n        emit Purchased(msg.sender, address(0), maticReceived, resAmount);\r\n    }\r\n\r\n    function _purchase(uint256 amount, IERC20 paymentToken) internal {\r\n        require(amount > 0, \"Amount should be greater than 0\");\r\n\r\n        uint256 resAmount = amount * rate;\r\n\r\n        require(totalSold + resAmount <= salesLimit, \"Purchase exceeds sales limit\");\r\n        require(RES.balanceOf(treasury) >= resAmount, \"Not enough RES in the treasury\");\r\n\r\n        require(paymentToken.transferFrom(msg.sender, address(this), amount), \"Payment transfer failed\");\r\n        require(RES.transferFrom(treasury, msg.sender, resAmount), \"RES transfer failed\");\r\n\r\n        totalSold += resAmount;\r\n\r\n        emit Purchased(msg.sender, address(paymentToken), amount, resAmount);\r\n    }\r\n\r\n    function setRate(uint256 newRate) external onlyOwner {\r\n        rate = newRate * 10**12;  // Adjusting for the 12 decimal difference\r\n        emit RateUpdated(rate);\r\n    }\r\n\r\n    function setMaticRate(uint256 newMaticRate) external onlyOwner {\r\n        maticRate = newMaticRate * 10**18; // Adjusting for the 18 decimals of RES token\r\n        emit MaticRateUpdated(maticRate);\r\n    }\r\n\r\n    function setSalesLimit(uint256 newLimit) external onlyOwner {\r\n        salesLimit = newLimit;\r\n        emit SalesLimitUpdated(newLimit);\r\n    }\r\n\r\n    function setTreasury(address newTreasury) external onlyOwner {\r\n        treasury = newTreasury;\r\n    }\r\n\r\n    function shutdown() external onlyOwner {\r\n        isShutdown = true;\r\n        emit Shutdown(msg.sender);\r\n    }\r\n\r\n    function reactivate() external onlyOwner {\r\n        isShutdown = false;\r\n        emit Reactivated(msg.sender);\r\n    }\r\n\r\n    function withdrawTokens(address tokenAddress, uint256 amount) external onlyOwner whenNotShutdown {\r\n        IERC20(tokenAddress).transfer(owner, amount);\r\n    }\r\n\r\n    function withdrawMATIC() external onlyOwner whenNotShutdown {\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"New owner is the zero address\");\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    function claimOwnership() external onlyPendingOwner {\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_RES\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDC_POS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDC_Native\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaticRate\",\"type\":\"uint256\"}],\"name\":\"MaticRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"resReceived\",\"type\":\"uint256\"}],\"name\":\"Purchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"RateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"Reactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"SalesLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"Shutdown\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RES\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC_Native\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC_POS\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isShutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maticRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseWithMATIC\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"}],\"name\":\"purchaseWithUSDC_Native\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"}],\"name\":\"purchaseWithUSDC_POS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"purchaseWithUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reactivate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salesLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaticRate\",\"type\":\"uint256\"}],\"name\":\"setMaticRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setSalesLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawMATIC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ReSeeItVendingMachine", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ce66b952de6ec09e5c13f933f7e7f85b96e5743a000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f0000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000003c499c542cef5e3811e1192ce70d8cc03d5c335900000000000000000000000083150486c40f3de1cbe207d892540ecd4c34c95d", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9f05287320d44b0d07b4b3545ba232db7789ffe27c7d124b0eb8eff4d592048b"}