{"SourceCode": "// Sources flattened with hardhat v2.9.9 https://hardhat.org\n\n// File contracts/interfaces/IInterchainGasPaymaster.sol\n\npragma solidity >=0.6.11;\n\n/**\n * @title IInterchainGasPaymaster\n * @notice Manages payments on a source chain to cover gas costs of relaying\n * messages to destination chains.\n */\ninterface IInterchainGasPaymaster {\n    /**\n     * @notice Emitted when a payment is made for a message's gas costs.\n     * @param messageId The ID of the message to pay for.\n     * @param gasAmount The amount of destination gas paid for.\n     * @param payment The amount of native tokens paid.\n     */\n    event GasPayment(\n        bytes32 indexed messageId,\n        uint256 gasAmount,\n        uint256 payment\n    );\n\n    function payForGas(\n        bytes32 _messageId,\n        uint32 _destinationDomain,\n        uint256 _gasAmount,\n        address _refundAddress\n    ) external payable;\n\n    function quoteGasPayment(uint32 _destinationDomain, uint256 _gasAmount)\n        external\n        view\n        returns (uint256);\n}\n\n\n// File contracts/interfaces/IInterchainSecurityModule.sol\n\npragma solidity >=0.6.11;\n\ninterface IInterchainSecurityModule {\n    enum Types {\n        UNUSED,\n        ROUTING,\n        AGGREGATION,\n        LEGACY_MULTISIG,\n        MULTISIG\n    }\n\n    /**\n     * @notice Returns an enum that represents the type of security model\n     * encoded by this ISM.\n     * @dev Relayers infer how to fetch and format metadata.\n     */\n    function moduleType() external view returns (uint8);\n\n    /**\n     * @notice Defines a security model responsible for verifying interchain\n     * messages based on the provided metadata.\n     * @param _metadata Off-chain metadata provided by a relayer, specific to\n     * the security model encoded by the module (e.g. validator signatures)\n     * @param _message Hyperlane encoded interchain message\n     * @return True if the message was verified\n     */\n    function verify(bytes calldata _metadata, bytes calldata _message)\n        external\n        returns (bool);\n}\n\ninterface ISpecifiesInterchainSecurityModule {\n    function interchainSecurityModule()\n        external\n        view\n        returns (IInterchainSecurityModule);\n}\n\n\n// File contracts/interfaces/IMailbox.sol\n\npragma solidity >=0.8.0;\n\ninterface IMailbox {\n    // ============ Events ============\n    /**\n     * @notice Emitted when a new message is dispatched via Hyperlane\n     * @param sender The address that dispatched the message\n     * @param destination The destination domain of the message\n     * @param recipient The message recipient address on `destination`\n     * @param message Raw bytes of message\n     */\n    event Dispatch(\n        address indexed sender,\n        uint32 indexed destination,\n        bytes32 indexed recipient,\n        bytes message\n    );\n\n    /**\n     * @notice Emitted when a new message is dispatched via Hyperlane\n     * @param messageId The unique message identifier\n     */\n    event DispatchId(bytes32 indexed messageId);\n\n    /**\n     * @notice Emitted when a Hyperlane message is processed\n     * @param messageId The unique message identifier\n     */\n    event ProcessId(bytes32 indexed messageId);\n\n    /**\n     * @notice Emitted when a Hyperlane message is delivered\n     * @param origin The origin domain of the message\n     * @param sender The message sender address on `origin`\n     * @param recipient The address that handled the message\n     */\n    event Process(\n        uint32 indexed origin,\n        bytes32 indexed sender,\n        address indexed recipient\n    );\n\n    function localDomain() external view returns (uint32);\n\n    function delivered(bytes32 messageId) external view returns (bool);\n\n    function defaultIsm() external view returns (IInterchainSecurityModule);\n\n    function dispatch(\n        uint32 _destinationDomain,\n        bytes32 _recipientAddress,\n        bytes calldata _messageBody\n    ) external returns (bytes32);\n\n    function process(bytes calldata _metadata, bytes calldata _message)\n        external;\n\n    function count() external view returns (uint32);\n\n    function root() external view returns (bytes32);\n\n    function latestCheckpoint() external view returns (bytes32, uint32);\n\n    function recipientIsm(address _recipient)\n        external\n        view\n        returns (IInterchainSecurityModule);\n}\n\n\n// File contracts/interfaces/IHyperlaneConnectionClient.sol\n\npragma solidity >=0.8.0;\n\n\n\ninterface IHyperlaneConnectionClient is ISpecifiesInterchainSecurityModule {\n    function mailbox() external view returns (IMailbox);\n\n    function interchainGasPaymaster()\n        external\n        view\n        returns (IInterchainGasPaymaster);\n\n    function setMailbox(address) external;\n\n    function setInterchainGasPaymaster(address) external;\n\n    function setInterchainSecurityModule(address) external;\n}\n\n\n// File @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol@v4.8.0\n\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n\n\n// File @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol@v4.8.0\n\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n\n\n// File @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol@v4.8.0\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n\n// File @openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol@v4.8.0\n\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n\n// File @openzeppelin/contracts/utils/Address.sol@v4.8.0\n\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n\n\n// File contracts/HyperlaneConnectionClient.sol\n\npragma solidity >=0.6.11;\n\n// ============ Internal Imports ============\n\n\n\n\n// ============ External Imports ============\n\n\nabstract contract HyperlaneConnectionClient is\n    OwnableUpgradeable,\n    IHyperlaneConnectionClient\n{\n    // ============ Mutable Storage ============\n\n    IMailbox public mailbox;\n    // Interchain Gas Paymaster contract. The relayer associated with this contract\n    // must be willing to relay messages dispatched from the current Mailbox contract,\n    // otherwise payments made to the paymaster will not result in relayed messages.\n    IInterchainGasPaymaster public interchainGasPaymaster;\n\n    IInterchainSecurityModule public interchainSecurityModule;\n\n    uint256[48] private __GAP; // gap for upgrade safety\n\n    // ============ Events ============\n    /**\n     * @notice Emitted when a new mailbox is set.\n     * @param mailbox The address of the mailbox contract\n     */\n    event MailboxSet(address indexed mailbox);\n\n    /**\n     * @notice Emitted when a new Interchain Gas Paymaster is set.\n     * @param interchainGasPaymaster The address of the Interchain Gas Paymaster.\n     */\n    event InterchainGasPaymasterSet(address indexed interchainGasPaymaster);\n\n    event InterchainSecurityModuleSet(address indexed module);\n\n    // ============ Modifiers ============\n\n    /**\n     * @notice Only accept messages from an Hyperlane Mailbox contract\n     */\n    modifier onlyMailbox() {\n        require(msg.sender == address(mailbox), \"!mailbox\");\n        _;\n    }\n\n    /**\n     * @notice Only accept addresses that at least have contract code\n     */\n    modifier onlyContract(address _contract) {\n        require(Address.isContract(_contract), \"!contract\");\n        _;\n    }\n\n    // ======== Initializer =========\n\n    function __HyperlaneConnectionClient_initialize(address _mailbox)\n        internal\n        onlyInitializing\n    {\n        _setMailbox(_mailbox);\n        __Ownable_init();\n    }\n\n    function __HyperlaneConnectionClient_initialize(\n        address _mailbox,\n        address _interchainGasPaymaster\n    ) internal onlyInitializing {\n        _setInterchainGasPaymaster(_interchainGasPaymaster);\n        __HyperlaneConnectionClient_initialize(_mailbox);\n    }\n\n    function __HyperlaneConnectionClient_initialize(\n        address _mailbox,\n        address _interchainGasPaymaster,\n        address _interchainSecurityModule\n    ) internal onlyInitializing {\n        _setInterchainSecurityModule(_interchainSecurityModule);\n        __HyperlaneConnectionClient_initialize(\n            _mailbox,\n            _interchainGasPaymaster\n        );\n    }\n\n    function __HyperlaneConnectionClient_initialize(\n        address _mailbox,\n        address _interchainGasPaymaster,\n        address _interchainSecurityModule,\n        address _owner\n    ) internal onlyInitializing {\n        _setMailbox(_mailbox);\n        _setInterchainGasPaymaster(_interchainGasPaymaster);\n        _setInterchainSecurityModule(_interchainSecurityModule);\n        _transferOwnership(_owner);\n    }\n\n    // ============ External functions ============\n\n    /**\n     * @notice Sets the address of the application's Mailbox.\n     * @param _mailbox The address of the Mailbox contract.\n     */\n    function setMailbox(address _mailbox) external virtual onlyOwner {\n        _setMailbox(_mailbox);\n    }\n\n    /**\n     * @notice Sets the address of the application's InterchainGasPaymaster.\n     * @param _interchainGasPaymaster The address of the InterchainGasPaymaster contract.\n     */\n    function setInterchainGasPaymaster(address _interchainGasPaymaster)\n        external\n        virtual\n        onlyOwner\n    {\n        _setInterchainGasPaymaster(_interchainGasPaymaster);\n    }\n\n    function setInterchainSecurityModule(address _module)\n        external\n        virtual\n        onlyOwner\n    {\n        _setInterchainSecurityModule(_module);\n    }\n\n    // ============ Internal functions ============\n\n    /**\n     * @notice Sets the address of the application's InterchainGasPaymaster.\n     * @param _interchainGasPaymaster The address of the InterchainGasPaymaster contract.\n     */\n    function _setInterchainGasPaymaster(address _interchainGasPaymaster)\n        internal\n        onlyContract(_interchainGasPaymaster)\n    {\n        interchainGasPaymaster = IInterchainGasPaymaster(\n            _interchainGasPaymaster\n        );\n        emit InterchainGasPaymasterSet(_interchainGasPaymaster);\n    }\n\n    /**\n     * @notice Modify the contract the Application uses to validate Mailbox contracts\n     * @param _mailbox The address of the mailbox contract\n     */\n    function _setMailbox(address _mailbox) internal onlyContract(_mailbox) {\n        mailbox = IMailbox(_mailbox);\n        emit MailboxSet(_mailbox);\n    }\n\n    function _setInterchainSecurityModule(address _module) internal {\n        require(\n            _module == address(0) || Address.isContract(_module),\n            \"!contract\"\n        );\n        interchainSecurityModule = IInterchainSecurityModule(_module);\n        emit InterchainSecurityModuleSet(_module);\n    }\n}\n\n\n// File contracts/interfaces/IMessageRecipient.sol\n\npragma solidity >=0.6.11;\n\ninterface IMessageRecipient {\n    function handle(\n        uint32 _origin,\n        bytes32 _sender,\n        bytes calldata _message\n    ) external;\n}\n\n\n// File @openzeppelin/contracts/utils/structs/EnumerableSet.sol@v4.8.0\n\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n\n\n// File @openzeppelin/contracts/utils/structs/EnumerableMap.sol@v4.8.0\n\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableMap.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing an enumerable variant of Solidity's\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n * type.\n *\n * Maps have the following properties:\n *\n * - Entries are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\n *\n *     // Declare a set state variable\n *     EnumerableMap.UintToAddressMap private myMap;\n * }\n * ```\n *\n * The following map types are supported:\n *\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableMap.\n * ====\n */\nlibrary EnumerableMap {\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Map type with\n    // bytes32 keys and values.\n    // The Map implementation uses private functions, and user-facing\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\n    // the underlying Map.\n    // This means that we can only create new EnumerableMaps for types that fit\n    // in bytes32.\n\n    struct Bytes32ToBytes32Map {\n        // Storage of keys\n        EnumerableSet.Bytes32Set _keys;\n        mapping(bytes32 => bytes32) _values;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        Bytes32ToBytes32Map storage map,\n        bytes32 key,\n        bytes32 value\n    ) internal returns (bool) {\n        map._values[key] = value;\n        return map._keys.add(key);\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\n        delete map._values[key];\n        return map._keys.remove(key);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\n        return map._keys.contains(key);\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\n        return map._keys.length();\n    }\n\n    /**\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n     *\n     * Note that there are no guarantees on the ordering of entries inside the\n     * array, and it may change when more entries are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\n        bytes32 key = map._keys.at(index);\n        return (key, map._values[key]);\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\n        bytes32 value = map._values[key];\n        if (value == bytes32(0)) {\n            return (contains(map, key), bytes32(0));\n        } else {\n            return (true, value);\n        }\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\n        bytes32 value = map._values[key];\n        require(value != 0 || contains(map, key), \"EnumerableMap: nonexistent key\");\n        return value;\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(\n        Bytes32ToBytes32Map storage map,\n        bytes32 key,\n        string memory errorMessage\n    ) internal view returns (bytes32) {\n        bytes32 value = map._values[key];\n        require(value != 0 || contains(map, key), errorMessage);\n        return value;\n    }\n\n    // UintToUintMap\n\n    struct UintToUintMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        UintToUintMap storage map,\n        uint256 key,\n        uint256 value\n    ) internal returns (bool) {\n        return set(map._inner, bytes32(key), bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\n        return remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\n        return contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToUintMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\n        (bytes32 key, bytes32 value) = at(map._inner, index);\n        return (uint256(key), uint256(value));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\n        return (success, uint256(value));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\n        return uint256(get(map._inner, bytes32(key)));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(\n        UintToUintMap storage map,\n        uint256 key,\n        string memory errorMessage\n    ) internal view returns (uint256) {\n        return uint256(get(map._inner, bytes32(key), errorMessage));\n    }\n\n    // UintToAddressMap\n\n    struct UintToAddressMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        UintToAddressMap storage map,\n        uint256 key,\n        address value\n    ) internal returns (bool) {\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\n        return remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\n        return contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\n        (bytes32 key, bytes32 value) = at(map._inner, index);\n        return (uint256(key), address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\n        return (success, address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(\n        UintToAddressMap storage map,\n        uint256 key,\n        string memory errorMessage\n    ) internal view returns (address) {\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\n    }\n\n    // AddressToUintMap\n\n    struct AddressToUintMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        AddressToUintMap storage map,\n        address key,\n        uint256 value\n    ) internal returns (bool) {\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\n        return remove(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\n        return contains(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\n        (bytes32 key, bytes32 value) = at(map._inner, index);\n        return (address(uint160(uint256(key))), uint256(value));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\n        return (success, uint256(value));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(\n        AddressToUintMap storage map,\n        address key,\n        string memory errorMessage\n    ) internal view returns (uint256) {\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\n    }\n\n    // Bytes32ToUintMap\n\n    struct Bytes32ToUintMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        Bytes32ToUintMap storage map,\n        bytes32 key,\n        uint256 value\n    ) internal returns (bool) {\n        return set(map._inner, key, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\n        return remove(map._inner, key);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\n        return contains(map._inner, key);\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\n        (bytes32 key, bytes32 value) = at(map._inner, index);\n        return (key, uint256(value));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\n        (bool success, bytes32 value) = tryGet(map._inner, key);\n        return (success, uint256(value));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\n        return uint256(get(map._inner, key));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(\n        Bytes32ToUintMap storage map,\n        bytes32 key,\n        string memory errorMessage\n    ) internal view returns (uint256) {\n        return uint256(get(map._inner, key, errorMessage));\n    }\n}\n\n\n// File contracts/libs/EnumerableMapExtended.sol\n\n\npragma solidity >=0.6.11;\n\n// ============ External Imports ============\n\n// extends EnumerableMap with uint256 => bytes32 type\n// modelled after https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.8.0/contracts/utils/structs/EnumerableMap.sol\nlibrary EnumerableMapExtended {\n    using EnumerableMap for EnumerableMap.Bytes32ToBytes32Map;\n\n    struct UintToBytes32Map {\n        EnumerableMap.Bytes32ToBytes32Map _inner;\n    }\n\n    // ============ Library Functions ============\n    function keys(UintToBytes32Map storage map)\n        internal\n        view\n        returns (bytes32[] storage)\n    {\n        return map._inner._keys._inner._values;\n    }\n\n    function set(\n        UintToBytes32Map storage map,\n        uint256 key,\n        bytes32 value\n    ) internal {\n        map._inner.set(bytes32(key), value);\n    }\n\n    function get(UintToBytes32Map storage map, uint256 key)\n        internal\n        view\n        returns (bytes32)\n    {\n        return map._inner.get(bytes32(key));\n    }\n\n    function remove(UintToBytes32Map storage map, uint256 key)\n        internal\n        returns (bool)\n    {\n        return map._inner.remove(bytes32(key));\n    }\n\n    function contains(UintToBytes32Map storage map, uint256 key)\n        internal\n        view\n        returns (bool)\n    {\n        return map._inner.contains(bytes32(key));\n    }\n\n    function length(UintToBytes32Map storage map)\n        internal\n        view\n        returns (uint256)\n    {\n        return map._inner.length();\n    }\n\n    function at(UintToBytes32Map storage map, uint256 index)\n        internal\n        view\n        returns (uint256, bytes32)\n    {\n        (bytes32 key, bytes32 value) = map._inner.at(index);\n        return (uint256(key), value);\n    }\n}\n\n\n// File contracts/Router.sol\n\n\npragma solidity >=0.6.11;\n\n// ============ Internal Imports ============\n\n\n\n\n\nabstract contract Router is HyperlaneConnectionClient, IMessageRecipient {\n    using EnumerableMapExtended for EnumerableMapExtended.UintToBytes32Map;\n\n    string private constant NO_ROUTER_ENROLLED_REVERT_MESSAGE =\n        \"No router enrolled for domain. Did you specify the right domain ID?\";\n\n    // ============ Mutable Storage ============\n    EnumerableMapExtended.UintToBytes32Map internal _routers;\n    uint256[49] private __GAP; // gap for upgrade safety\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a router is set.\n     * @param domain The domain of the new router\n     * @param router The address of the new router\n     */\n    event RemoteRouterEnrolled(uint32 indexed domain, bytes32 router);\n\n    // ============ Modifiers ============\n    /**\n     * @notice Only accept messages from a remote Router contract\n     * @param _origin The domain the message is coming from\n     * @param _router The address the message is coming from\n     */\n    modifier onlyRemoteRouter(uint32 _origin, bytes32 _router) {\n        require(\n            _isRemoteRouter(_origin, _router),\n            NO_ROUTER_ENROLLED_REVERT_MESSAGE\n        );\n        _;\n    }\n\n    // ======== Initializer =========\n    function __Router_initialize(address _mailbox) internal onlyInitializing {\n        __HyperlaneConnectionClient_initialize(_mailbox);\n    }\n\n    function __Router_initialize(\n        address _mailbox,\n        address _interchainGasPaymaster\n    ) internal onlyInitializing {\n        __HyperlaneConnectionClient_initialize(\n            _mailbox,\n            _interchainGasPaymaster\n        );\n    }\n\n    function __Router_initialize(\n        address _mailbox,\n        address _interchainGasPaymaster,\n        address _interchainSecurityModule\n    ) internal onlyInitializing {\n        __HyperlaneConnectionClient_initialize(\n            _mailbox,\n            _interchainGasPaymaster,\n            _interchainSecurityModule\n        );\n    }\n\n    // ============ External functions ============\n    function domains() external view returns (uint32[] memory) {\n        bytes32[] storage rawKeys = _routers.keys();\n        uint256 length = rawKeys.length;\n        uint32[] memory keys = new uint32[](length);\n        for (uint256 i = 0; i < length; i++) {\n            keys[i] = uint32(uint256(rawKeys[i]));\n        }\n        return keys;\n    }\n\n    function routers(uint32 _domain) public view returns (bytes32) {\n        if (_routers.contains(_domain)) {\n            return _routers.get(_domain);\n        } else {\n            return bytes32(0); // for backwards compatibility with storage mapping\n        }\n    }\n\n    /**\n     * @notice Register the address of a Router contract for the same Application on a remote chain\n     * @param _domain The domain of the remote Application Router\n     * @param _router The address of the remote Application Router\n     */\n    function enrollRemoteRouter(uint32 _domain, bytes32 _router)\n        external\n        virtual\n        onlyOwner\n    {\n        _enrollRemoteRouter(_domain, _router);\n    }\n\n    /**\n     * @notice Batch version of `enrollRemoteRouter`\n     * @param _domains The domaisn of the remote Application Routers\n     * @param _addresses The addresses of the remote Application Routers\n     */\n    function enrollRemoteRouters(\n        uint32[] calldata _domains,\n        bytes32[] calldata _addresses\n    ) external virtual onlyOwner {\n        require(_domains.length == _addresses.length, \"!length\");\n        uint256 length = _domains.length;\n        for (uint256 i = 0; i < length; i += 1) {\n            _enrollRemoteRouter(_domains[i], _addresses[i]);\n        }\n    }\n\n    /**\n     * @notice Handles an incoming message\n     * @param _origin The origin domain\n     * @param _sender The sender address\n     * @param _message The message\n     */\n    function handle(\n        uint32 _origin,\n        bytes32 _sender,\n        bytes calldata _message\n    ) external virtual override onlyMailbox onlyRemoteRouter(_origin, _sender) {\n        _handle(_origin, _sender, _message);\n    }\n\n    // ============ Virtual functions ============\n    function _handle(\n        uint32 _origin,\n        bytes32 _sender,\n        bytes calldata _message\n    ) internal virtual;\n\n    // ============ Internal functions ============\n\n    /**\n     * @notice Set the router for a given domain\n     * @param _domain The domain\n     * @param _address The new router\n     */\n    function _enrollRemoteRouter(uint32 _domain, bytes32 _address) internal {\n        _routers.set(_domain, _address);\n        emit RemoteRouterEnrolled(_domain, _address);\n    }\n\n    /**\n     * @notice Return true if the given domain / router is the address of a remote Application Router\n     * @param _domain The domain of the potential remote Application Router\n     * @param _address The address of the potential remote Application Router\n     */\n    function _isRemoteRouter(uint32 _domain, bytes32 _address)\n        internal\n        view\n        returns (bool)\n    {\n        return routers(_domain) == _address;\n    }\n\n    /**\n     * @notice Assert that the given domain has a Application Router registered and return its address\n     * @param _domain The domain of the chain for which to get the Application Router\n     * @return _router The address of the remote Application Router on _domain\n     */\n    function _mustHaveRemoteRouter(uint32 _domain)\n        internal\n        view\n        returns (bytes32 _router)\n    {\n        _router = routers(_domain);\n        require(_router != bytes32(0), NO_ROUTER_ENROLLED_REVERT_MESSAGE);\n    }\n\n    /**\n     * @notice Dispatches a message to an enrolled router via the local router's Mailbox\n     * and pays for it to be relayed to the destination.\n     * @dev Reverts if there is no enrolled router for _destinationDomain.\n     * @param _destinationDomain The domain of the chain to which to send the message.\n     * @param _messageBody Raw bytes content of message.\n     * @param _gasAmount The amount of destination gas for the message that is requested via the InterchainGasPaymaster.\n     * @param _gasPayment The amount of native tokens to pay for the message to be relayed.\n     * @param _gasPaymentRefundAddress The address to refund any gas overpayment to.\n     */\n    function _dispatchWithGas(\n        uint32 _destinationDomain,\n        bytes memory _messageBody,\n        uint256 _gasAmount,\n        uint256 _gasPayment,\n        address _gasPaymentRefundAddress\n    ) internal returns (bytes32 _messageId) {\n        _messageId = _dispatch(_destinationDomain, _messageBody);\n        // Call the IGP even if the gas payment is zero. This is to support on-chain\n        // fee quoting in IGPs, which should always revert if gas payment is insufficient.\n        interchainGasPaymaster.payForGas{value: _gasPayment}(\n            _messageId,\n            _destinationDomain,\n            _gasAmount,\n            _gasPaymentRefundAddress\n        );\n    }\n\n    /**\n     * @notice Dispatches a message to an enrolled router via the provided Mailbox.\n     * @dev Does not pay interchain gas.\n     * @dev Reverts if there is no enrolled router for _destinationDomain.\n     * @param _destinationDomain The domain of the chain to which to send the message.\n     * @param _messageBody Raw bytes content of message.\n     */\n    function _dispatch(uint32 _destinationDomain, bytes memory _messageBody)\n        internal\n        virtual\n        returns (bytes32)\n    {\n        // Ensure that destination chain has an enrolled router.\n        bytes32 _router = _mustHaveRemoteRouter(_destinationDomain);\n        return mailbox.dispatch(_destinationDomain, _router, _messageBody);\n    }\n}\n\n\n// File contracts/GasRouter.sol\n\n\npragma solidity >=0.6.11;\n\nabstract contract GasRouter is Router {\n    // ============ Mutable Storage ============\n    mapping(uint32 => uint256) public destinationGas;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a domain's destination gas is set.\n     * @param domain The domain of the router.\n     * @param gas The gas amount used by the handle function of the domain's router.\n     */\n    event DestinationGasSet(uint32 indexed domain, uint256 gas);\n\n    struct GasRouterConfig {\n        uint32 domain;\n        uint256 gas;\n    }\n\n    /**\n     * @notice Sets the gas amount dispatched for each configured domain.\n     * @param gasConfigs The array of GasRouterConfig structs\n     */\n    function setDestinationGas(GasRouterConfig[] calldata gasConfigs)\n        external\n        onlyOwner\n    {\n        for (uint256 i = 0; i < gasConfigs.length; i += 1) {\n            _setDestinationGas(gasConfigs[i].domain, gasConfigs[i].gas);\n        }\n    }\n\n    /**\n     * @notice Returns the gas payment required to dispatch a message to the given domain's router.\n     * @param _destinationDomain The domain of the router.\n     * @return _gasPayment Payment computed by the registered InterchainGasPaymaster.\n     */\n    function quoteGasPayment(uint32 _destinationDomain)\n        external\n        view\n        returns (uint256 _gasPayment)\n    {\n        return\n            interchainGasPaymaster.quoteGasPayment(\n                _destinationDomain,\n                destinationGas[_destinationDomain]\n            );\n    }\n\n    function _setDestinationGas(uint32 domain, uint256 gas) internal {\n        destinationGas[domain] = gas;\n        emit DestinationGasSet(domain, gas);\n    }\n\n    /**\n     * @dev Uses the destinationGas mapping to populate the gas amount for the message.\n     * @notice Dispatches a message to an enrolled router via the local router's Mailbox\n     * and pays for it to be relayed to the destination.\n     * @dev Reverts if there is no enrolled router for _destinationDomain.\n     * @param _destinationDomain The domain of the chain to which to send the message.\n     * @param _messageBody Raw bytes content of message.\n     * @param _gasPayment The amount of native tokens to pay for the message to be relayed.\n     * @param _gasPaymentRefundAddress The address to refund any gas overpayment to.\n     */\n    function _dispatchWithGas(\n        uint32 _destinationDomain,\n        bytes memory _messageBody,\n        uint256 _gasPayment,\n        address _gasPaymentRefundAddress\n    ) internal returns (bytes32 _messageId) {\n        return\n            _dispatchWithGas(\n                _destinationDomain,\n                _messageBody,\n                destinationGas[_destinationDomain],\n                _gasPayment,\n                _gasPaymentRefundAddress\n            );\n    }\n\n    /**\n     * @dev Passes `msg.value` as gas payment and `msg.sender` as gas payment refund address.\n     * @dev Uses the destinationGas mapping to populate the gas amount for the message.\n     * @param _destinationDomain The domain of the chain to send the message.\n     * @param _messageBody Raw bytes content of message.\n     */\n    function _dispatchWithGas(\n        uint32 _destinationDomain,\n        bytes memory _messageBody\n    ) internal returns (bytes32 _messageId) {\n        return\n            _dispatchWithGas(\n                _destinationDomain,\n                _messageBody,\n                msg.value,\n                msg.sender\n            );\n    }\n}\n\n\n// File contracts/interfaces/IGasOracle.sol\n\n\npragma solidity >=0.8.0;\n\ninterface IGasOracle {\n    struct RemoteGasData {\n        // The exchange rate of the remote native token quoted in the local native token.\n        // Scaled with 10 decimals, i.e. 1e10 is \"one\".\n        uint128 tokenExchangeRate;\n        uint128 gasPrice;\n    }\n\n    function getExchangeRateAndGasPrice(uint32 _destinationDomain)\n        external\n        view\n        returns (uint128 tokenExchangeRate, uint128 gasPrice);\n}\n\n\n// File @openzeppelin/contracts/utils/Context.sol@v4.8.0\n\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n\n// File @openzeppelin/contracts/access/Ownable.sol@v4.8.0\n\n\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n\n// File contracts/igps/gas-oracles/StorageGasOracle.sol\n\n\npragma solidity >=0.8.0;\n\n// ============ Internal Imports ============\n\n// ============ External Imports ============\n\n/**\n * @notice A gas oracle that uses data stored within the contract.\n * @dev This contract is intended to be owned by an address that will\n * update the stored remote gas data.\n */\ncontract StorageGasOracle is IGasOracle, Ownable {\n    // ============ Public Storage ============\n\n    /// @notice Keyed by remote domain, gas data on that remote domain.\n    mapping(uint32 => IGasOracle.RemoteGasData) public remoteGasData;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when an entry in `remoteGasData` is set.\n     * @param remoteDomain The remote domain in which the gas data was set for.\n     * @param tokenExchangeRate The exchange rate of the remote native token quoted in the local native token.\n     * @param gasPrice The gas price on the remote chain.\n     */\n    event RemoteGasDataSet(\n        uint32 indexed remoteDomain,\n        uint128 tokenExchangeRate,\n        uint128 gasPrice\n    );\n\n    struct RemoteGasDataConfig {\n        uint32 remoteDomain;\n        uint128 tokenExchangeRate;\n        uint128 gasPrice;\n    }\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Returns the stored `remoteGasData` for the `_destinationDomain`.\n     * @param _destinationDomain The destination domain.\n     * @return tokenExchangeRate The exchange rate of the remote native token quoted in the local native token.\n     * @return gasPrice The gas price on the remote chain.\n     */\n    function getExchangeRateAndGasPrice(uint32 _destinationDomain)\n        external\n        view\n        override\n        returns (uint128 tokenExchangeRate, uint128 gasPrice)\n    {\n        // Intentionally allow unset / zero values\n        IGasOracle.RemoteGasData memory _data = remoteGasData[\n            _destinationDomain\n        ];\n        return (_data.tokenExchangeRate, _data.gasPrice);\n    }\n\n    /**\n     * @notice Sets the remote gas data for many remotes at a time.\n     * @param _configs The configs to use when setting the remote gas data.\n     */\n    function setRemoteGasDataConfigs(RemoteGasDataConfig[] calldata _configs)\n        external\n        onlyOwner\n    {\n        uint256 _len = _configs.length;\n        for (uint256 i = 0; i < _len; i++) {\n            _setRemoteGasData(_configs[i]);\n        }\n    }\n\n    /**\n     * @notice Sets the remote gas data using the values in `_config`.\n     * @param _config The config to use when setting the remote gas data.\n     */\n    function setRemoteGasData(RemoteGasDataConfig calldata _config)\n        external\n        onlyOwner\n    {\n        _setRemoteGasData(_config);\n    }\n\n    // ============ Internal functions ============\n\n    /**\n     * @notice Sets the remote gas data using the values in `_config`.\n     * @param _config The config to use when setting the remote gas data.\n     */\n    function _setRemoteGasData(RemoteGasDataConfig calldata _config) internal {\n        remoteGasData[_config.remoteDomain] = IGasOracle.RemoteGasData({\n            tokenExchangeRate: _config.tokenExchangeRate,\n            gasPrice: _config.gasPrice\n        });\n\n        emit RemoteGasDataSet(\n            _config.remoteDomain,\n            _config.tokenExchangeRate,\n            _config.gasPrice\n        );\n    }\n}\n\n\n// File contracts/igps/InterchainGasPaymaster.sol\n\n\npragma solidity >=0.8.0;\n\n// ============ Internal Imports ============\n\n\n// ============ External Imports ============\n\n/**\n * @title InterchainGasPaymaster\n * @notice Manages payments on a source chain to cover gas costs of relaying\n * messages to destination chains.\n */\ncontract InterchainGasPaymaster is\n    IInterchainGasPaymaster,\n    IGasOracle,\n    OwnableUpgradeable\n{\n    // ============ Constants ============\n\n    /// @notice The scale of gas oracle token exchange rates.\n    uint256 internal constant TOKEN_EXCHANGE_RATE_SCALE = 1e10;\n\n    // ============ Public Storage ============\n\n    /// @notice Keyed by remote domain, the gas oracle to use for the domain.\n    mapping(uint32 => IGasOracle) public gasOracles;\n\n    /// @notice The benficiary that can receive native tokens paid into this contract.\n    address public beneficiary;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when the gas oracle for a remote domain is set.\n     * @param remoteDomain The remote domain.\n     * @param gasOracle The gas oracle.\n     */\n    event GasOracleSet(uint32 indexed remoteDomain, address gasOracle);\n\n    /**\n     * @notice Emitted when the beneficiary is set.\n     * @param beneficiary The new beneficiary.\n     */\n    event BeneficiarySet(address beneficiary);\n\n    struct GasOracleConfig {\n        uint32 remoteDomain;\n        address gasOracle;\n    }\n\n    // ============ External Functions ============\n\n    /**\n     * @param _owner The owner of the contract.\n     * @param _beneficiary The beneficiary.\n     */\n    function initialize(address _owner, address _beneficiary)\n        public\n        initializer\n    {\n        __Ownable_init();\n        _transferOwnership(_owner);\n        _setBeneficiary(_beneficiary);\n    }\n\n    /**\n     * @notice Deposits msg.value as a payment for the relaying of a message\n     * to its destination chain.\n     * @dev Overpayment will result in a refund of native tokens to the _refundAddress.\n     * Callers should be aware that this may present reentrancy issues.\n     * @param _messageId The ID of the message to pay for.\n     * @param _destinationDomain The domain of the message's destination chain.\n     * @param _gasAmount The amount of destination gas to pay for.\n     * @param _refundAddress The address to refund any overpayment to.\n     */\n    function payForGas(\n        bytes32 _messageId,\n        uint32 _destinationDomain,\n        uint256 _gasAmount,\n        address _refundAddress\n    ) external payable override {\n        uint256 _requiredPayment = quoteGasPayment(\n            _destinationDomain,\n            _gasAmount\n        );\n        require(\n            msg.value >= _requiredPayment,\n            \"insufficient interchain gas payment\"\n        );\n        uint256 _overpayment = msg.value - _requiredPayment;\n        if (_overpayment > 0) {\n            (bool _success, ) = _refundAddress.call{value: _overpayment}(\"\");\n            require(_success, \"Interchain gas payment refund failed\");\n        }\n\n        emit GasPayment(_messageId, _gasAmount, _requiredPayment);\n    }\n\n    /**\n     * @notice Transfers the entire native token balance to the beneficiary.\n     * @dev The beneficiary must be able to receive native tokens.\n     */\n    function claim() external {\n        // Transfer the entire balance to the beneficiary.\n        (bool success, ) = beneficiary.call{value: address(this).balance}(\"\");\n        require(success, \"!transfer\");\n    }\n\n    /**\n     * @notice Sets the gas oracles for remote domains specified in the config array.\n     * @param _configs An array of configs including the remote domain and gas oracles to set.\n     */\n    function setGasOracles(GasOracleConfig[] calldata _configs)\n        external\n        onlyOwner\n    {\n        uint256 _len = _configs.length;\n        for (uint256 i = 0; i < _len; i++) {\n            _setGasOracle(_configs[i].remoteDomain, _configs[i].gasOracle);\n        }\n    }\n\n    /**\n     * @notice Sets the beneficiary.\n     * @param _beneficiary The new beneficiary.\n     */\n    function setBeneficiary(address _beneficiary) external onlyOwner {\n        _setBeneficiary(_beneficiary);\n    }\n\n    // ============ Public Functions ============\n\n    /**\n     * @notice Quotes the amount of native tokens to pay for interchain gas.\n     * @param _destinationDomain The domain of the message's destination chain.\n     * @param _gasAmount The amount of destination gas to pay for.\n     * @return The amount of native tokens required to pay for interchain gas.\n     */\n    function quoteGasPayment(uint32 _destinationDomain, uint256 _gasAmount)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        // Get the gas data for the destination domain.\n        (\n            uint128 _tokenExchangeRate,\n            uint128 _gasPrice\n        ) = getExchangeRateAndGasPrice(_destinationDomain);\n\n        // The total cost quoted in destination chain's native token.\n        uint256 _destinationGasCost = _gasAmount * uint256(_gasPrice);\n\n        // Convert to the local native token.\n        return\n            (_destinationGasCost * _tokenExchangeRate) /\n            TOKEN_EXCHANGE_RATE_SCALE;\n    }\n\n    /**\n     * @notice Gets the token exchange rate and gas price from the configured gas oracle\n     * for a given destination domain.\n     * @param _destinationDomain The destination domain.\n     * @return tokenExchangeRate The exchange rate of the remote native token quoted in the local native token.\n     * @return gasPrice The gas price on the remote chain.\n     */\n    function getExchangeRateAndGasPrice(uint32 _destinationDomain)\n        public\n        view\n        override\n        returns (uint128 tokenExchangeRate, uint128 gasPrice)\n    {\n        IGasOracle _gasOracle = gasOracles[_destinationDomain];\n        require(address(_gasOracle) != address(0), \"!gas oracle\");\n\n        return _gasOracle.getExchangeRateAndGasPrice(_destinationDomain);\n    }\n\n    // ============ Internal Functions ============\n\n    /**\n     * @notice Sets the beneficiary.\n     * @param _beneficiary The new beneficiary.\n     */\n    function _setBeneficiary(address _beneficiary) internal {\n        beneficiary = _beneficiary;\n        emit BeneficiarySet(_beneficiary);\n    }\n\n    /**\n     * @notice Sets the gas oracle for a remote domain.\n     * @param _remoteDomain The remote domain.\n     * @param _gasOracle The gas oracle.\n     */\n    function _setGasOracle(uint32 _remoteDomain, address _gasOracle) internal {\n        gasOracles[_remoteDomain] = IGasOracle(_gasOracle);\n        emit GasOracleSet(_remoteDomain, _gasOracle);\n    }\n}\n\n\n// File contracts/igps/OverheadIgp.sol\n\n\npragma solidity >=0.8.0;\n\n// ============ Internal Imports ============\n\n// ============ External Imports ============\n\n/**\n * @notice An IGP that adds configured gas overheads to gas amounts and forwards\n * calls to an \"inner\" IGP.\n * @dev The intended use of this contract is to store overhead gas amounts for destination\n * domains, e.g. Mailbox and/or ISM gas usage, such that users of this IGP are only required\n * to specify the gas amount used by their own applications.\n */\ncontract OverheadIgp is IInterchainGasPaymaster, Ownable {\n    // ============ Constants ============\n\n    /// @notice The IGP that is called when paying for or quoting gas\n    /// after applying overhead gas amounts.\n    IInterchainGasPaymaster public immutable innerIgp;\n\n    // ============ Public Storage ============\n\n    /// @notice Destination domain => overhead gas amount on that domain.\n    mapping(uint32 => uint256) public destinationGasOverhead;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when an entry in the destinationGasOverhead mapping is set.\n     * @param domain The destination domain.\n     * @param gasOverhead The gas overhead amount on that domain.\n     */\n    event DestinationGasOverheadSet(uint32 indexed domain, uint256 gasOverhead);\n\n    struct DomainConfig {\n        uint32 domain;\n        uint256 gasOverhead;\n    }\n\n    // ============ Constructor ============\n\n    constructor(address _innerIgp) {\n        innerIgp = IInterchainGasPaymaster(_innerIgp);\n    }\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Adds the stored destinationGasOverhead to the _gasAmount and forwards the\n     * call to the innerIgp's `payForGas` function.\n     * @param _messageId The ID of the message to pay for.\n     * @param _destinationDomain The domain of the message's destination chain.\n     * @param _gasAmount The amount of destination gas to pay for. This should not\n     * consider any gas that is accounted for in the stored destinationGasOverhead.\n     * @param _refundAddress The address to refund any overpayment to.\n     */\n    function payForGas(\n        bytes32 _messageId,\n        uint32 _destinationDomain,\n        uint256 _gasAmount,\n        address _refundAddress\n    ) external payable {\n        innerIgp.payForGas{value: msg.value}(\n            _messageId,\n            _destinationDomain,\n            destinationGasAmount(_destinationDomain, _gasAmount),\n            _refundAddress\n        );\n    }\n\n    /**\n     * @notice Sets destination gas overheads for multiple domains.\n     * @dev Only callable by the owner.\n     * @param configs A list of destination domains and gas overheads.\n     */\n    function setDestinationGasOverheads(DomainConfig[] calldata configs)\n        external\n        onlyOwner\n    {\n        for (uint256 i; i < configs.length; i++) {\n            _setDestinationGasOverhead(configs[i]);\n        }\n    }\n\n    // ============ Public Functions ============\n\n    /**\n     * @notice Adds the stored destinationGasOverhead to the _gasAmount and forwards the\n     * call to the innerIgp's `quoteGasPayment` function.\n     * @param _destinationDomain The domain of the message's destination chain.\n     * @param _gasAmount The amount of destination gas to pay for. This should not\n     * consider any gas that is accounted for in the stored destinationGasOverhead.\n     * @return The amount of native tokens required to pay for interchain gas.\n     */\n    function quoteGasPayment(uint32 _destinationDomain, uint256 _gasAmount)\n        public\n        view\n        returns (uint256)\n    {\n        return\n            innerIgp.quoteGasPayment(\n                _destinationDomain,\n                destinationGasAmount(_destinationDomain, _gasAmount)\n            );\n    }\n\n    /**\n     * @notice Returns the stored destinationGasOverhead added to the _gasAmount.\n     * @dev If there is no stored destinationGasOverhead, 0 is used.\n     * @param _destinationDomain The domain of the message's destination chain.\n     * @param _gasAmount The amount of destination gas to pay for. This should not\n     * consider any gas that is accounted for in the stored destinationGasOverhead.\n     * @return The stored destinationGasOverhead added to the _gasAmount.\n     */\n    function destinationGasAmount(uint32 _destinationDomain, uint256 _gasAmount)\n        public\n        view\n        returns (uint256)\n    {\n        return destinationGasOverhead[_destinationDomain] + _gasAmount;\n    }\n\n    /**\n     * @notice Sets the destination gas overhead for a single domain.\n     * @param config The destination domain and gas overhead.\n     */\n    function _setDestinationGasOverhead(DomainConfig calldata config) internal {\n        destinationGasOverhead[config.domain] = config.gasOverhead;\n        emit DestinationGasOverheadSet(config.domain, config.gasOverhead);\n    }\n}\n\n\n// File contracts/interfaces/isms/IAggregationIsm.sol\n\n\npragma solidity >=0.6.11;\n\ninterface IAggregationIsm is IInterchainSecurityModule {\n    /**\n     * @notice Returns the set of modules responsible for verifying _message\n     * and the number of modules that must verify\n     * @dev Can change based on the content of _message\n     * @param _message Hyperlane formatted interchain message\n     * @return modules The array of ISM addresses\n     * @return threshold The number of modules needed to verify\n     */\n    function modulesAndThreshold(bytes calldata _message)\n        external\n        view\n        returns (address[] memory modules, uint8 threshold);\n}\n\n\n// File contracts/interfaces/isms/IMultisigIsm.sol\n\n\npragma solidity >=0.6.11;\n\ninterface IMultisigIsm is IInterchainSecurityModule {\n    /**\n     * @notice Returns the set of validators responsible for verifying _message\n     * and the number of signatures required\n     * @dev Can change based on the content of _message\n     * @param _message Hyperlane formatted interchain message\n     * @return validators The array of validator addresses\n     * @return threshold The number of validator signatures needed\n     */\n    function validatorsAndThreshold(bytes calldata _message)\n        external\n        view\n        returns (address[] memory validators, uint8 threshold);\n}\n\n\n// File contracts/interfaces/isms/IRoutingIsm.sol\n\n\npragma solidity >=0.8.0;\n\ninterface IRoutingIsm is IInterchainSecurityModule {\n    /**\n     * @notice Returns the ISM responsible for verifying _message\n     * @dev Can change based on the content of _message\n     * @param _message Formatted Hyperlane message (see Message.sol).\n     * @return module The ISM to use to verify _message\n     */\n    function route(bytes calldata _message)\n        external\n        view\n        returns (IInterchainSecurityModule);\n}\n\n\n// File contracts/libs/TypeCasts.sol\n\n\npragma solidity >=0.6.11;\n\nlibrary TypeCasts {\n    // alignment preserving cast\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\n        return address(uint160(uint256(_buf)));\n    }\n}\n\n\n// File contracts/libs/Call.sol\n\n\npragma solidity ^0.8.13;\n\nlibrary CallLib {\n    struct StaticCall {\n        // supporting non EVM targets\n        bytes32 to;\n        bytes data;\n    }\n\n    struct Call {\n        // supporting non EVM targets\n        bytes32 to;\n        uint256 value;\n        bytes data;\n    }\n\n    struct StaticCallWithCallback {\n        StaticCall _call;\n        bytes callback;\n    }\n\n    function call(Call memory _call)\n        internal\n        returns (bytes memory returnData)\n    {\n        return\n            Address.functionCallWithValue(\n                TypeCasts.bytes32ToAddress(_call.to),\n                _call.data,\n                _call.value\n            );\n    }\n\n    function staticcall(StaticCall memory _call)\n        private\n        view\n        returns (bytes memory)\n    {\n        return\n            Address.functionStaticCall(\n                TypeCasts.bytes32ToAddress(_call.to),\n                _call.data\n            );\n    }\n\n    function staticcall(StaticCallWithCallback memory _call)\n        internal\n        view\n        returns (bytes memory callback)\n    {\n        return bytes.concat(_call.callback, staticcall(_call._call));\n    }\n\n    function multicall(Call[] memory calls) internal {\n        uint256 i = 0;\n        uint256 len = calls.length;\n        while (i < len) {\n            call(calls[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function multistaticcall(StaticCallWithCallback[] memory _calls)\n        internal\n        view\n        returns (bytes[] memory)\n    {\n        uint256 i = 0;\n        uint256 len = _calls.length;\n        bytes[] memory callbacks = new bytes[](len);\n        while (i < len) {\n            callbacks[i] = staticcall(_calls[i]);\n            unchecked {\n                ++i;\n            }\n        }\n        return callbacks;\n    }\n\n    function multicallto(address to, bytes[] memory calls) internal {\n        uint256 i = 0;\n        uint256 len = calls.length;\n        while (i < len) {\n            Address.functionCall(to, calls[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function build(bytes32 to, bytes memory data)\n        internal\n        pure\n        returns (StaticCall memory)\n    {\n        return StaticCall(to, data);\n    }\n\n    function build(address to, bytes memory data)\n        internal\n        pure\n        returns (StaticCall memory)\n    {\n        return build(TypeCasts.addressToBytes32(to), data);\n    }\n\n    function build(\n        bytes32 to,\n        uint256 value,\n        bytes memory data\n    ) internal pure returns (Call memory) {\n        return Call(to, value, data);\n    }\n\n    function build(\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal pure returns (Call memory) {\n        return Call(TypeCasts.addressToBytes32(to), value, data);\n    }\n\n    function build(\n        bytes32 to,\n        bytes memory data,\n        bytes memory callback\n    ) internal pure returns (StaticCallWithCallback memory) {\n        return StaticCallWithCallback(build(to, data), callback);\n    }\n\n    function build(\n        address to,\n        bytes memory data,\n        bytes memory callback\n    ) internal pure returns (StaticCallWithCallback memory) {\n        return StaticCallWithCallback(build(to, data), callback);\n    }\n}\n\n\n// File contracts/OwnableMulticall.sol\n\n\npragma solidity ^0.8.13;\n\n// ============ Internal Imports ============\n\n/*\n * @title OwnableMulticall\n * @dev Permits immutable owner address to execute calls with value to other contracts.\n */\ncontract OwnableMulticall {\n    address public immutable owner;\n\n    constructor(address _owner) {\n        owner = _owner;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"!owner\");\n        _;\n    }\n\n    function multicall(CallLib.Call[] calldata calls) external onlyOwner {\n        return CallLib.multicall(calls);\n    }\n\n    // solhint-disable-next-line no-empty-blocks\n    receive() external payable {}\n}\n\n\n// File contracts/interfaces/middleware/IInterchainAccountRouter.sol\n\n\npragma solidity >=0.6.11;\n\n\ninterface IInterchainAccountRouter {\n    function callRemote(\n        uint32 _destination,\n        address _to,\n        uint256 _value,\n        bytes calldata _data\n    ) external returns (bytes32);\n\n    function callRemote(uint32 _destination, CallLib.Call[] calldata calls)\n        external\n        returns (bytes32);\n\n    function callRemoteWithOverrides(\n        uint32 _destination,\n        bytes32 _router,\n        bytes32 _ism,\n        CallLib.Call[] calldata calls\n    ) external returns (bytes32);\n\n    function getLocalInterchainAccount(\n        uint32 _origin,\n        bytes32 _router,\n        bytes32 _owner,\n        address _ism\n    ) external view returns (OwnableMulticall);\n\n    function getLocalInterchainAccount(\n        uint32 _origin,\n        address _router,\n        address _owner,\n        address _ism\n    ) external view returns (OwnableMulticall);\n\n    function getRemoteInterchainAccount(\n        address _router,\n        address _owner,\n        address _ism\n    ) external view returns (address);\n\n    function getRemoteInterchainAccount(uint32 _destination, address _owner)\n        external\n        view\n        returns (address);\n}\n\n\n// File contracts/interfaces/middleware/IInterchainQueryRouter.sol\n\n\npragma solidity >=0.6.11;\n\ninterface IInterchainQueryRouter {\n    function query(\n        uint32 _destination,\n        address _to,\n        bytes memory _data,\n        bytes memory _callback\n    ) external returns (bytes32);\n\n    function query(\n        uint32 _destination,\n        CallLib.StaticCallWithCallback[] calldata calls\n    ) external returns (bytes32);\n}\n\n\n// File @openzeppelin/contracts/utils/math/Math.sol@v4.8.0\n\n\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n\n\n// File @openzeppelin/contracts/utils/Strings.sol@v4.8.0\n\n\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n\n\n// File @openzeppelin/contracts/utils/cryptography/ECDSA.sol@v4.8.0\n\n\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\n\n// File contracts/libs/isms/AggregationIsmMetadata.sol\n\n\npragma solidity >=0.8.0;\n\n/**\n * Format of metadata:\n *\n * [????:????] Metadata start/end uint32 ranges, packed as uint64\n * [????:????] ISM metadata, packed encoding\n */\nlibrary AggregationIsmMetadata {\n    uint256 private constant RANGE_SIZE = 4;\n\n    /**\n     * @notice Returns whether or not metadata was provided for the ISM at\n     * `_index`\n     * @dev Callers must ensure _index is less than the number of metadatas\n     * provided\n     * @param _metadata Encoded Aggregation ISM metadata\n     * @param _index The index of the ISM to check for metadata for\n     * @return Whether or not metadata was provided for the ISM at `_index`\n     */\n    function hasMetadata(bytes calldata _metadata, uint8 _index)\n        internal\n        pure\n        returns (bool)\n    {\n        (uint32 _start, ) = _metadataRange(_metadata, _index);\n        return _start > 0;\n    }\n\n    /**\n     * @notice Returns the metadata provided for the ISM at `_index`\n     * @dev Callers must ensure _index is less than the number of metadatas\n     * provided\n     * @dev Callers must ensure `hasMetadata(_metadata, _index)`\n     * @param _metadata Encoded Aggregation ISM metadata\n     * @param _index The index of the ISM to return metadata for\n     * @return The metadata provided for the ISM at `_index`\n     */\n    function metadataAt(bytes calldata _metadata, uint8 _index)\n        internal\n        pure\n        returns (bytes calldata)\n    {\n        (uint32 _start, uint32 _end) = _metadataRange(_metadata, _index);\n        return _metadata[_start:_end];\n    }\n\n    /**\n     * @notice Returns the range of the metadata provided for the ISM at\n     * `_index`, or zeroes if not provided\n     * @dev Callers must ensure _index is less than the number of metadatas\n     * provided\n     * @param _metadata Encoded Aggregation ISM metadata\n     * @param _index The index of the ISM to return metadata range for\n     * @return The range of the metadata provided for the ISM at `_index`, or\n     * zeroes if not provided\n     */\n    function _metadataRange(bytes calldata _metadata, uint8 _index)\n        private\n        pure\n        returns (uint32, uint32)\n    {\n        uint256 _start = (uint32(_index) * RANGE_SIZE * 2);\n        uint256 _mid = _start + RANGE_SIZE;\n        uint256 _end = _mid + RANGE_SIZE;\n        return (\n            uint32(bytes4(_metadata[_start:_mid])),\n            uint32(bytes4(_metadata[_mid:_end]))\n        );\n    }\n}\n\n\n// File contracts/isms/aggregation/AbstractAggregationIsm.sol\n\n\npragma solidity >=0.8.0;\n\n// ============ External Imports ============\n\n// ============ Internal Imports ============\n\n\n\n/**\n * @title AggregationIsm\n * @notice Manages per-domain m-of-n ISM sets that are used to verify\n * interchain messages.\n */\nabstract contract AbstractAggregationIsm is IAggregationIsm {\n    // ============ Constants ============\n\n    // solhint-disable-next-line const-name-snakecase\n    uint8 public constant moduleType =\n        uint8(IInterchainSecurityModule.Types.AGGREGATION);\n\n    // ============ Virtual Functions ============\n    // ======= OVERRIDE THESE TO IMPLEMENT =======\n\n    /**\n     * @notice Returns the set of ISMs responsible for verifying _message\n     * and the number of ISMs that must verify\n     * @dev Can change based on the content of _message\n     * @param _message Hyperlane formatted interchain message\n     * @return modules The array of ISM addresses\n     * @return threshold The number of ISMs needed to verify\n     */\n    function modulesAndThreshold(bytes calldata _message)\n        public\n        view\n        virtual\n        returns (address[] memory, uint8);\n\n    // ============ Public Functions ============\n\n    /**\n     * @notice Requires that m-of-n ISMs verify the provided interchain message.\n     * @param _metadata ABI encoded module metadata (see AggregationIsmMetadata.sol)\n     * @param _message Formatted Hyperlane message (see Message.sol).\n     */\n    function verify(bytes calldata _metadata, bytes calldata _message)\n        public\n        returns (bool)\n    {\n        (address[] memory _isms, uint8 _threshold) = modulesAndThreshold(\n            _message\n        );\n        uint256 _count = _isms.length;\n        for (uint8 i = 0; i < _count; i++) {\n            if (!AggregationIsmMetadata.hasMetadata(_metadata, i)) continue;\n            IInterchainSecurityModule _ism = IInterchainSecurityModule(\n                _isms[i]\n            );\n            require(\n                _ism.verify(\n                    AggregationIsmMetadata.metadataAt(_metadata, i),\n                    _message\n                ),\n                \"!verify\"\n            );\n            _threshold -= 1;\n        }\n        require(_threshold == 0, \"!threshold\");\n        return true;\n    }\n}\n\n\n// File contracts/libs/MetaProxy.sol\n\n\npragma solidity >=0.7.6;\n\n/// @dev Adapted from https://eips.ethereum.org/EIPS/eip-3448\nlibrary MetaProxy {\n    bytes32 private constant PREFIX =\n        hex\"600b380380600b3d393df3363d3d373d3d3d3d60368038038091363936013d73\";\n    bytes13 private constant SUFFIX = hex\"5af43d3d93803e603457fd5bf3\";\n\n    function bytecode(address _implementation, bytes memory _metadata)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return\n            abi.encodePacked(\n                PREFIX,\n                bytes20(_implementation),\n                SUFFIX,\n                _metadata,\n                _metadata.length\n            );\n    }\n\n    function metadata() internal pure returns (bytes memory) {\n        bytes memory data;\n        assembly {\n            let posOfMetadataSize := sub(calldatasize(), 32)\n            let size := calldataload(posOfMetadataSize)\n            let dataPtr := sub(posOfMetadataSize, size)\n            data := mload(64)\n            // increment free memory pointer by metadata size + 32 bytes (length)\n            mstore(64, add(data, add(size, 32)))\n            mstore(data, size)\n            let memPtr := add(data, 32)\n            calldatacopy(memPtr, dataPtr, size)\n        }\n        return data;\n    }\n}\n\n\n// File contracts/isms/aggregation/StaticAggregationIsm.sol\n\n\npragma solidity >=0.8.0;\n\n// ============ Internal Imports ============\n\n\n\n/**\n * @title StaticAggregationIsm\n * @notice Manages per-domain m-of-n ISM sets that are used to verify\n * interchain messages.\n */\ncontract StaticAggregationIsm is AbstractAggregationIsm {\n    // ============ Public Functions ============\n\n    /**\n     * @notice Returns the set of ISMs responsible for verifying _message\n     * and the number of ISMs that must verify\n     * @dev Can change based on the content of _message\n     * @return modules The array of ISM addresses\n     * @return threshold The number of ISMs needed to verify\n     */\n    function modulesAndThreshold(bytes calldata)\n        public\n        view\n        virtual\n        override\n        returns (address[] memory, uint8)\n    {\n        return abi.decode(MetaProxy.metadata(), (address[], uint8));\n    }\n}\n\n\n// File @openzeppelin/contracts/utils/Create2.sol@v4.8.0\n\n\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Create2.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(\n        uint256 amount,\n        bytes32 salt,\n        bytes memory bytecode\n    ) internal returns (address addr) {\n        require(address(this).balance >= amount, \"Create2: insufficient balance\");\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        require(addr != address(0), \"Create2: Failed on deploy\");\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(\n        bytes32 salt,\n        bytes32 bytecodeHash,\n        address deployer\n    ) internal pure returns (address addr) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40) // Get free memory pointer\n\n            // |                   | \u2193 ptr ...  \u2193 ptr + 0x0B (start) ...  \u2193 ptr + 0x20 ...  \u2193 ptr + 0x40 ...   |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\n            // | 0xFF              |            FF                                                             |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\n            // | keccak(start, 85) |            \u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191 |\n\n            mstore(add(ptr, 0x40), bytecodeHash)\n            mstore(add(ptr, 0x20), salt)\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\n            mstore8(start, 0xff)\n            addr := keccak256(start, 85)\n        }\n    }\n}\n\n\n// File contracts/libs/StaticMOfNAddressSetFactory.sol\n\n\npragma solidity >=0.8.0;\n// ============ External Imports ============\n\n\n// ============ Internal Imports ============\n\nabstract contract StaticMOfNAddressSetFactory {\n    // ============ Immutables ============\n    address private immutable _implementation;\n\n    // ============ Constructor ============\n\n    constructor() {\n        _implementation = _deployImplementation();\n    }\n\n    function _deployImplementation() internal virtual returns (address);\n\n    /**\n     * @notice Deploys a StaticMOfNAddressSet contract address for the given\n     * values\n     * @dev Consider sorting addresses to ensure contract reuse\n     * @param _values An array of addresses\n     * @param _threshold The threshold value to use\n     * @return set The contract address representing this StaticMOfNAddressSet\n     */\n    function deploy(address[] calldata _values, uint8 _threshold)\n        external\n        returns (address)\n    {\n        (bytes32 _salt, bytes memory _bytecode) = _saltAndBytecode(\n            _values,\n            _threshold\n        );\n        address _set = _getAddress(_salt, _bytecode);\n        if (!Address.isContract(_set)) {\n            _set = Create2.deploy(0, _salt, _bytecode);\n        }\n        return _set;\n    }\n\n    /**\n     * @notice Returns the StaticMOfNAddressSet contract address for the given\n     * values\n     * @dev Consider sorting addresses to ensure contract reuse\n     * @param _values An array of addresses\n     * @param _threshold The threshold value to use\n     * @return set The contract address representing this StaticMOfNAddressSet\n     */\n    function getAddress(address[] calldata _values, uint8 _threshold)\n        external\n        view\n        returns (address)\n    {\n        (bytes32 _salt, bytes memory _bytecode) = _saltAndBytecode(\n            _values,\n            _threshold\n        );\n        return _getAddress(_salt, _bytecode);\n    }\n\n    /**\n     * @notice Returns the StaticMOfNAddressSet contract address for the given\n     * values\n     * @param _salt The salt used in Create2\n     * @param _bytecode The metaproxy bytecode used in Create2\n     * @return set The contract address representing this StaticMOfNAddressSet\n     */\n    function _getAddress(bytes32 _salt, bytes memory _bytecode)\n        private\n        view\n        returns (address)\n    {\n        bytes32 _bytecodeHash = keccak256(_bytecode);\n        return Create2.computeAddress(_salt, _bytecodeHash);\n    }\n\n    /**\n     * @notice Returns the create2 salt and bytecode for the given values\n     * @param _values An array of addresses\n     * @param _threshold The threshold value to use\n     * @return _salt The salt used in Create2\n     * @return _bytecode The metaproxy bytecode used in Create2\n     */\n    function _saltAndBytecode(address[] calldata _values, uint8 _threshold)\n        private\n        view\n        returns (bytes32, bytes memory)\n    {\n        bytes memory _metadata = abi.encode(_values, _threshold);\n        bytes memory _bytecode = MetaProxy.bytecode(_implementation, _metadata);\n        bytes32 _salt = keccak256(_metadata);\n        return (_salt, _bytecode);\n    }\n}\n\n\n// File contracts/isms/aggregation/StaticAggregationIsmFactory.sol\n\n\npragma solidity >=0.8.0;\n// ============ Internal Imports ============\n\n\ncontract StaticAggregationIsmFactory is StaticMOfNAddressSetFactory {\n    function _deployImplementation()\n        internal\n        virtual\n        override\n        returns (address)\n    {\n        return address(new StaticAggregationIsm());\n    }\n}\n\n\n// File contracts/libs/Message.sol\n\n\npragma solidity >=0.8.0;\n\n/**\n * @title Hyperlane Message Library\n * @notice Library for formatted messages used by Mailbox\n **/\nlibrary Message {\n    using TypeCasts for bytes32;\n\n    uint256 private constant VERSION_OFFSET = 0;\n    uint256 private constant NONCE_OFFSET = 1;\n    uint256 private constant ORIGIN_OFFSET = 5;\n    uint256 private constant SENDER_OFFSET = 9;\n    uint256 private constant DESTINATION_OFFSET = 41;\n    uint256 private constant RECIPIENT_OFFSET = 45;\n    uint256 private constant BODY_OFFSET = 77;\n\n    /**\n     * @notice Returns formatted (packed) Hyperlane message with provided fields\n     * @dev This function should only be used in memory message construction.\n     * @param _version The version of the origin and destination Mailboxes\n     * @param _nonce A nonce to uniquely identify the message on its origin chain\n     * @param _originDomain Domain of origin chain\n     * @param _sender Address of sender as bytes32\n     * @param _destinationDomain Domain of destination chain\n     * @param _recipient Address of recipient on destination chain as bytes32\n     * @param _messageBody Raw bytes of message body\n     * @return Formatted message\n     */\n    function formatMessage(\n        uint8 _version,\n        uint32 _nonce,\n        uint32 _originDomain,\n        bytes32 _sender,\n        uint32 _destinationDomain,\n        bytes32 _recipient,\n        bytes calldata _messageBody\n    ) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                _version,\n                _nonce,\n                _originDomain,\n                _sender,\n                _destinationDomain,\n                _recipient,\n                _messageBody\n            );\n    }\n\n    /**\n     * @notice Returns the message ID.\n     * @param _message ABI encoded Hyperlane message.\n     * @return ID of `_message`\n     */\n    function id(bytes memory _message) internal pure returns (bytes32) {\n        return keccak256(_message);\n    }\n\n    /**\n     * @notice Returns the message version.\n     * @param _message ABI encoded Hyperlane message.\n     * @return Version of `_message`\n     */\n    function version(bytes calldata _message) internal pure returns (uint8) {\n        return uint8(bytes1(_message[VERSION_OFFSET:NONCE_OFFSET]));\n    }\n\n    /**\n     * @notice Returns the message nonce.\n     * @param _message ABI encoded Hyperlane message.\n     * @return Nonce of `_message`\n     */\n    function nonce(bytes calldata _message) internal pure returns (uint32) {\n        return uint32(bytes4(_message[NONCE_OFFSET:ORIGIN_OFFSET]));\n    }\n\n    /**\n     * @notice Returns the message origin domain.\n     * @param _message ABI encoded Hyperlane message.\n     * @return Origin domain of `_message`\n     */\n    function origin(bytes calldata _message) internal pure returns (uint32) {\n        return uint32(bytes4(_message[ORIGIN_OFFSET:SENDER_OFFSET]));\n    }\n\n    /**\n     * @notice Returns the message sender as bytes32.\n     * @param _message ABI encoded Hyperlane message.\n     * @return Sender of `_message` as bytes32\n     */\n    function sender(bytes calldata _message) internal pure returns (bytes32) {\n        return bytes32(_message[SENDER_OFFSET:DESTINATION_OFFSET]);\n    }\n\n    /**\n     * @notice Returns the message sender as address.\n     * @param _message ABI encoded Hyperlane message.\n     * @return Sender of `_message` as address\n     */\n    function senderAddress(bytes calldata _message)\n        internal\n        pure\n        returns (address)\n    {\n        return sender(_message).bytes32ToAddress();\n    }\n\n    /**\n     * @notice Returns the message destination domain.\n     * @param _message ABI encoded Hyperlane message.\n     * @return Destination domain of `_message`\n     */\n    function destination(bytes calldata _message)\n        internal\n        pure\n        returns (uint32)\n    {\n        return uint32(bytes4(_message[DESTINATION_OFFSET:RECIPIENT_OFFSET]));\n    }\n\n    /**\n     * @notice Returns the message recipient as bytes32.\n     * @param _message ABI encoded Hyperlane message.\n     * @return Recipient of `_message` as bytes32\n     */\n    function recipient(bytes calldata _message)\n        internal\n        pure\n        returns (bytes32)\n    {\n        return bytes32(_message[RECIPIENT_OFFSET:BODY_OFFSET]);\n    }\n\n    /**\n     * @notice Returns the message recipient as address.\n     * @param _message ABI encoded Hyperlane message.\n     * @return Recipient of `_message` as address\n     */\n    function recipientAddress(bytes calldata _message)\n        internal\n        pure\n        returns (address)\n    {\n        return recipient(_message).bytes32ToAddress();\n    }\n\n    /**\n     * @notice Returns the message body.\n     * @param _message ABI encoded Hyperlane message.\n     * @return Body of `_message`\n     */\n    function body(bytes calldata _message)\n        internal\n        pure\n        returns (bytes calldata)\n    {\n        return bytes(_message[BODY_OFFSET:]);\n    }\n}\n\n\n// File contracts/libs/isms/MultisigIsmMetadata.sol\n\n\npragma solidity >=0.8.0;\n\n/**\n * Format of metadata:\n * [   0:  32] Merkle root\n * [  32:  36] Root index\n * [  36:  68] Origin mailbox address\n * [  68:1092] Merkle proof\n * [1092:????] Validator signatures, 65 bytes each, length == Threshold\n */\nlibrary MultisigIsmMetadata {\n    uint256 private constant MERKLE_ROOT_OFFSET = 0;\n    uint256 private constant MERKLE_INDEX_OFFSET = 32;\n    uint256 private constant ORIGIN_MAILBOX_OFFSET = 36;\n    uint256 private constant MERKLE_PROOF_OFFSET = 68;\n    uint256 private constant SIGNATURES_OFFSET = 1092;\n    uint256 private constant SIGNATURE_LENGTH = 65;\n\n    /**\n     * @notice Returns the merkle root of the signed checkpoint.\n     * @param _metadata ABI encoded Multisig ISM metadata.\n     * @return Merkle root of the signed checkpoint\n     */\n    function root(bytes calldata _metadata) internal pure returns (bytes32) {\n        return bytes32(_metadata[MERKLE_ROOT_OFFSET:MERKLE_INDEX_OFFSET]);\n    }\n\n    /**\n     * @notice Returns the index of the signed checkpoint.\n     * @param _metadata ABI encoded Multisig ISM metadata.\n     * @return Index of the signed checkpoint\n     */\n    function index(bytes calldata _metadata) internal pure returns (uint32) {\n        return\n            uint32(\n                bytes4(_metadata[MERKLE_INDEX_OFFSET:ORIGIN_MAILBOX_OFFSET])\n            );\n    }\n\n    /**\n     * @notice Returns the origin mailbox of the signed checkpoint as bytes32.\n     * @param _metadata ABI encoded Multisig ISM metadata.\n     * @return Origin mailbox of the signed checkpoint as bytes32\n     */\n    function originMailbox(bytes calldata _metadata)\n        internal\n        pure\n        returns (bytes32)\n    {\n        return bytes32(_metadata[ORIGIN_MAILBOX_OFFSET:MERKLE_PROOF_OFFSET]);\n    }\n\n    /**\n     * @notice Returns the merkle proof branch of the message.\n     * @dev This appears to be more gas efficient than returning a calldata\n     * slice and using that.\n     * @param _metadata ABI encoded Multisig ISM metadata.\n     * @return Merkle proof branch of the message.\n     */\n    function proof(bytes calldata _metadata)\n        internal\n        pure\n        returns (bytes32[32] memory)\n    {\n        return\n            abi.decode(\n                _metadata[MERKLE_PROOF_OFFSET:SIGNATURES_OFFSET],\n                (bytes32[32])\n            );\n    }\n\n    /**\n     * @notice Returns the validator ECDSA signature at `_index`.\n     * @dev Assumes signatures are sorted by validator\n     * @dev Assumes `_metadata` encodes `threshold` signatures.\n     * @dev Assumes `_index` is less than `threshold`\n     * @param _metadata ABI encoded Multisig ISM metadata.\n     * @param _index The index of the signature to return.\n     * @return The validator ECDSA signature at `_index`.\n     */\n    function signatureAt(bytes calldata _metadata, uint256 _index)\n        internal\n        pure\n        returns (bytes calldata)\n    {\n        uint256 _start = SIGNATURES_OFFSET + (_index * SIGNATURE_LENGTH);\n        uint256 _end = _start + SIGNATURE_LENGTH;\n        return _metadata[_start:_end];\n    }\n}\n\n\n// File contracts/libs/CheckpointLib.sol\n\n\npragma solidity >=0.8.0;\n\n// ============ External Imports ============\n\nlibrary CheckpointLib {\n    /**\n     * @notice Returns the digest validators are expected to sign when signing checkpoints.\n     * @param _origin The origin domain of the checkpoint.\n     * @param _originMailbox The address of the origin mailbox as bytes32.\n     * @return The digest of the checkpoint.\n     */\n    function digest(\n        uint32 _origin,\n        bytes32 _originMailbox,\n        bytes32 _checkpointRoot,\n        uint32 _checkpointIndex\n    ) internal pure returns (bytes32) {\n        bytes32 _domainHash = domainHash(_origin, _originMailbox);\n        return\n            ECDSA.toEthSignedMessageHash(\n                keccak256(\n                    abi.encodePacked(\n                        _domainHash,\n                        _checkpointRoot,\n                        _checkpointIndex\n                    )\n                )\n            );\n    }\n\n    /**\n     * @notice Returns the domain hash that validators are expected to use\n     * when signing checkpoints.\n     * @param _origin The origin domain of the checkpoint.\n     * @param _originMailbox The address of the origin mailbox as bytes32.\n     * @return The domain hash.\n     */\n    function domainHash(uint32 _origin, bytes32 _originMailbox)\n        internal\n        pure\n        returns (bytes32)\n    {\n        // Including the origin mailbox address in the signature allows the slashing\n        // protocol to enroll multiple mailboxes. Otherwise, a valid signature for\n        // mailbox A would be indistinguishable from a fraudulent signature for mailbox\n        // B.\n        // The slashing protocol should slash if validators sign attestations for\n        // anything other than a whitelisted mailbox.\n        return\n            keccak256(abi.encodePacked(_origin, _originMailbox, \"HYPERLANE\"));\n    }\n}\n\n\n// File contracts/libs/Merkle.sol\n\n\npragma solidity >=0.6.11;\n\n// work based on eth2 deposit contract, which is used under CC0-1.0\n\n/**\n * @title MerkleLib\n * @author Celo Labs Inc.\n * @notice An incremental merkle tree modeled on the eth2 deposit contract.\n **/\nlibrary MerkleLib {\n    uint256 internal constant TREE_DEPTH = 32;\n    uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;\n\n    /**\n     * @notice Struct representing incremental merkle tree. Contains current\n     * branch and the number of inserted leaves in the tree.\n     **/\n    struct Tree {\n        bytes32[TREE_DEPTH] branch;\n        uint256 count;\n    }\n\n    /**\n     * @notice Inserts `_node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param _node Element to insert into tree\n     **/\n    function insert(Tree storage _tree, bytes32 _node) internal {\n        require(_tree.count < MAX_LEAVES, \"merkle tree full\");\n\n        _tree.count += 1;\n        uint256 size = _tree.count;\n        for (uint256 i = 0; i < TREE_DEPTH; i++) {\n            if ((size & 1) == 1) {\n                _tree.branch[i] = _node;\n                return;\n            }\n            _node = keccak256(abi.encodePacked(_tree.branch[i], _node));\n            size /= 2;\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns`_tree`'s current root given array of zero\n     * hashes\n     * @param _zeroes Array of zero hashes\n     * @return _current Calculated root of `_tree`\n     **/\n    function rootWithCtx(Tree storage _tree, bytes32[TREE_DEPTH] memory _zeroes)\n        internal\n        view\n        returns (bytes32 _current)\n    {\n        uint256 _index = _tree.count;\n\n        for (uint256 i = 0; i < TREE_DEPTH; i++) {\n            uint256 _ithBit = (_index >> i) & 0x01;\n            bytes32 _next = _tree.branch[i];\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_next, _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _zeroes[i]));\n            }\n        }\n    }\n\n    /// @notice Calculates and returns`_tree`'s current root\n    function root(Tree storage _tree) internal view returns (bytes32) {\n        return rootWithCtx(_tree, zeroHashes());\n    }\n\n    /// @notice Returns array of TREE_DEPTH zero hashes\n    /// @return _zeroes Array of TREE_DEPTH zero hashes\n    function zeroHashes()\n        internal\n        pure\n        returns (bytes32[TREE_DEPTH] memory _zeroes)\n    {\n        _zeroes[0] = Z_0;\n        _zeroes[1] = Z_1;\n        _zeroes[2] = Z_2;\n        _zeroes[3] = Z_3;\n        _zeroes[4] = Z_4;\n        _zeroes[5] = Z_5;\n        _zeroes[6] = Z_6;\n        _zeroes[7] = Z_7;\n        _zeroes[8] = Z_8;\n        _zeroes[9] = Z_9;\n        _zeroes[10] = Z_10;\n        _zeroes[11] = Z_11;\n        _zeroes[12] = Z_12;\n        _zeroes[13] = Z_13;\n        _zeroes[14] = Z_14;\n        _zeroes[15] = Z_15;\n        _zeroes[16] = Z_16;\n        _zeroes[17] = Z_17;\n        _zeroes[18] = Z_18;\n        _zeroes[19] = Z_19;\n        _zeroes[20] = Z_20;\n        _zeroes[21] = Z_21;\n        _zeroes[22] = Z_22;\n        _zeroes[23] = Z_23;\n        _zeroes[24] = Z_24;\n        _zeroes[25] = Z_25;\n        _zeroes[26] = Z_26;\n        _zeroes[27] = Z_27;\n        _zeroes[28] = Z_28;\n        _zeroes[29] = Z_29;\n        _zeroes[30] = Z_30;\n        _zeroes[31] = Z_31;\n    }\n\n    /**\n     * @notice Calculates and returns the merkle root for the given leaf\n     * `_item`, a merkle branch, and the index of `_item` in the tree.\n     * @param _item Merkle leaf\n     * @param _branch Merkle proof\n     * @param _index Index of `_item` in tree\n     * @return _current Calculated merkle root\n     **/\n    function branchRoot(\n        bytes32 _item,\n        bytes32[TREE_DEPTH] memory _branch,\n        uint256 _index\n    ) internal pure returns (bytes32 _current) {\n        _current = _item;\n\n        for (uint256 i = 0; i < TREE_DEPTH; i++) {\n            uint256 _ithBit = (_index >> i) & 0x01;\n            bytes32 _next = _branch[i];\n            if (_ithBit == 1) {\n                _current = keccak256(abi.encodePacked(_next, _current));\n            } else {\n                _current = keccak256(abi.encodePacked(_current, _next));\n            }\n        }\n    }\n\n    // keccak256 zero hashes\n    bytes32 internal constant Z_0 =\n        hex\"0000000000000000000000000000000000000000000000000000000000000000\";\n    bytes32 internal constant Z_1 =\n        hex\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\";\n    bytes32 internal constant Z_2 =\n        hex\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\";\n    bytes32 internal constant Z_3 =\n        hex\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\";\n    bytes32 internal constant Z_4 =\n        hex\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\";\n    bytes32 internal constant Z_5 =\n        hex\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\";\n    bytes32 internal constant Z_6 =\n        hex\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\";\n    bytes32 internal constant Z_7 =\n        hex\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\";\n    bytes32 internal constant Z_8 =\n        hex\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\";\n    bytes32 internal constant Z_9 =\n        hex\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\";\n    bytes32 internal constant Z_10 =\n        hex\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\";\n    bytes32 internal constant Z_11 =\n        hex\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\";\n    bytes32 internal constant Z_12 =\n        hex\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\";\n    bytes32 internal constant Z_13 =\n        hex\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\";\n    bytes32 internal constant Z_14 =\n        hex\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\";\n    bytes32 internal constant Z_15 =\n        hex\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\";\n    bytes32 internal constant Z_16 =\n        hex\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\";\n    bytes32 internal constant Z_17 =\n        hex\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\";\n    bytes32 internal constant Z_18 =\n        hex\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\";\n    bytes32 internal constant Z_19 =\n        hex\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\";\n    bytes32 internal constant Z_20 =\n        hex\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\";\n    bytes32 internal constant Z_21 =\n        hex\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\";\n    bytes32 internal constant Z_22 =\n        hex\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\";\n    bytes32 internal constant Z_23 =\n        hex\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\";\n    bytes32 internal constant Z_24 =\n        hex\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\";\n    bytes32 internal constant Z_25 =\n        hex\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\";\n    bytes32 internal constant Z_26 =\n        hex\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\";\n    bytes32 internal constant Z_27 =\n        hex\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\";\n    bytes32 internal constant Z_28 =\n        hex\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\";\n    bytes32 internal constant Z_29 =\n        hex\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\";\n    bytes32 internal constant Z_30 =\n        hex\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\";\n    bytes32 internal constant Z_31 =\n        hex\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\";\n}\n\n\n// File contracts/isms/multisig/AbstractMultisigIsm.sol\n\n\npragma solidity >=0.8.0;\n\n// ============ External Imports ============\n\n// ============ Internal Imports ============\n\n\n\n\n\n\n/**\n * @title MultisigIsm\n * @notice Manages per-domain m-of-n Validator sets that are used to verify\n * interchain messages.\n */\nabstract contract AbstractMultisigIsm is IMultisigIsm {\n    // ============ Constants ============\n\n    // solhint-disable-next-line const-name-snakecase\n    uint8 public constant moduleType =\n        uint8(IInterchainSecurityModule.Types.MULTISIG);\n\n    // ============ Virtual Functions ============\n    // ======= OVERRIDE THESE TO IMPLEMENT =======\n\n    /**\n     * @notice Returns the set of validators responsible for verifying _message\n     * and the number of signatures required\n     * @dev Can change based on the content of _message\n     * @param _message Hyperlane formatted interchain message\n     * @return validators The array of validator addresses\n     * @return threshold The number of validator signatures needed\n     */\n    function validatorsAndThreshold(bytes calldata _message)\n        public\n        view\n        virtual\n        returns (address[] memory, uint8);\n\n    // ============ Public Functions ============\n\n    /**\n     * @notice Requires that m-of-n validators verify a merkle root,\n     * and verifies a merkle proof of `_message` against that root.\n     * @param _metadata ABI encoded module metadata (see MultisigIsmMetadata.sol)\n     * @param _message Formatted Hyperlane message (see Message.sol).\n     */\n    function verify(bytes calldata _metadata, bytes calldata _message)\n        public\n        view\n        returns (bool)\n    {\n        require(_verifyMerkleProof(_metadata, _message), \"!merkle\");\n        require(_verifyValidatorSignatures(_metadata, _message), \"!sigs\");\n        return true;\n    }\n\n    // ============ Internal Functions ============\n\n    /**\n     * @notice Verifies the merkle proof of `_message` against the provided\n     * checkpoint.\n     * @param _metadata ABI encoded module metadata (see MultisigIsmMetadata.sol)\n     * @param _message Formatted Hyperlane message (see Message.sol).\n     */\n    function _verifyMerkleProof(\n        bytes calldata _metadata,\n        bytes calldata _message\n    ) internal pure returns (bool) {\n        // calculate the expected root based on the proof\n        bytes32 _calculatedRoot = MerkleLib.branchRoot(\n            Message.id(_message),\n            MultisigIsmMetadata.proof(_metadata),\n            Message.nonce(_message)\n        );\n        return _calculatedRoot == MultisigIsmMetadata.root(_metadata);\n    }\n\n    /**\n     * @notice Verifies that a quorum of the origin domain's validators signed\n     * the provided checkpoint.\n     * @param _metadata ABI encoded module metadata (see MultisigIsmMetadata.sol)\n     * @param _message Formatted Hyperlane message (see Message.sol).\n     */\n    function _verifyValidatorSignatures(\n        bytes calldata _metadata,\n        bytes calldata _message\n    ) internal view returns (bool) {\n        (\n            address[] memory _validators,\n            uint8 _threshold\n        ) = validatorsAndThreshold(_message);\n        require(_threshold > 0, \"No MultisigISM threshold present for message\");\n        bytes32 _digest = CheckpointLib.digest(\n            Message.origin(_message),\n            MultisigIsmMetadata.originMailbox(_metadata),\n            MultisigIsmMetadata.root(_metadata),\n            MultisigIsmMetadata.index(_metadata)\n        );\n        uint256 _validatorCount = _validators.length;\n        uint256 _validatorIndex = 0;\n        // Assumes that signatures are ordered by validator\n        for (uint256 i = 0; i < _threshold; ++i) {\n            address _signer = ECDSA.recover(\n                _digest,\n                MultisigIsmMetadata.signatureAt(_metadata, i)\n            );\n            // Loop through remaining validators until we find a match\n            while (\n                _validatorIndex < _validatorCount &&\n                _signer != _validators[_validatorIndex]\n            ) {\n                ++_validatorIndex;\n            }\n            // Fail if we never found a match\n            require(_validatorIndex < _validatorCount, \"!threshold\");\n            ++_validatorIndex;\n        }\n        return true;\n    }\n}\n\n\n// File contracts/libs/isms/LegacyMultisigIsmMetadata.sol\n\n\npragma solidity >=0.8.0;\n\n/**\n * Format of metadata:\n * [   0:  32] Merkle root\n * [  32:  36] Root index\n * [  36:  68] Origin mailbox address\n * [  68:1092] Merkle proof\n * [1092:1093] Threshold\n * [1093:????] Validator signatures, 65 bytes each, length == Threshold\n * [????:????] Addresses of the entire validator set, left padded to bytes32\n */\nlibrary LegacyMultisigIsmMetadata {\n    uint256 private constant MERKLE_ROOT_OFFSET = 0;\n    uint256 private constant MERKLE_INDEX_OFFSET = 32;\n    uint256 private constant ORIGIN_MAILBOX_OFFSET = 36;\n    uint256 private constant MERKLE_PROOF_OFFSET = 68;\n    uint256 private constant THRESHOLD_OFFSET = 1092;\n    uint256 private constant SIGNATURES_OFFSET = 1093;\n    uint256 private constant SIGNATURE_LENGTH = 65;\n\n    /**\n     * @notice Returns the merkle root of the signed checkpoint.\n     * @param _metadata ABI encoded Multisig ISM metadata.\n     * @return Merkle root of the signed checkpoint\n     */\n    function root(bytes calldata _metadata) internal pure returns (bytes32) {\n        return bytes32(_metadata[MERKLE_ROOT_OFFSET:MERKLE_INDEX_OFFSET]);\n    }\n\n    /**\n     * @notice Returns the index of the signed checkpoint.\n     * @param _metadata ABI encoded Multisig ISM metadata.\n     * @return Index of the signed checkpoint\n     */\n    function index(bytes calldata _metadata) internal pure returns (uint32) {\n        return\n            uint32(\n                bytes4(_metadata[MERKLE_INDEX_OFFSET:ORIGIN_MAILBOX_OFFSET])\n            );\n    }\n\n    /**\n     * @notice Returns the origin mailbox of the signed checkpoint as bytes32.\n     * @param _metadata ABI encoded Multisig ISM metadata.\n     * @return Origin mailbox of the signed checkpoint as bytes32\n     */\n    function originMailbox(bytes calldata _metadata)\n        internal\n        pure\n        returns (bytes32)\n    {\n        return bytes32(_metadata[ORIGIN_MAILBOX_OFFSET:MERKLE_PROOF_OFFSET]);\n    }\n\n    /**\n     * @notice Returns the merkle proof branch of the message.\n     * @dev This appears to be more gas efficient than returning a calldata\n     * slice and using that.\n     * @param _metadata ABI encoded Multisig ISM metadata.\n     * @return Merkle proof branch of the message.\n     */\n    function proof(bytes calldata _metadata)\n        internal\n        pure\n        returns (bytes32[32] memory)\n    {\n        return\n            abi.decode(\n                _metadata[MERKLE_PROOF_OFFSET:THRESHOLD_OFFSET],\n                (bytes32[32])\n            );\n    }\n\n    /**\n     * @notice Returns the number of required signatures. Verified against\n     * the commitment stored in the module.\n     * @param _metadata ABI encoded Multisig ISM metadata.\n     * @return The number of required signatures.\n     */\n    function threshold(bytes calldata _metadata) internal pure returns (uint8) {\n        return uint8(bytes1(_metadata[THRESHOLD_OFFSET:SIGNATURES_OFFSET]));\n    }\n\n    /**\n     * @notice Returns the validator ECDSA signature at `_index`.\n     * @dev Assumes signatures are sorted by validator\n     * @dev Assumes `_metadata` encodes `threshold` signatures.\n     * @dev Assumes `_index` is less than `threshold`\n     * @param _metadata ABI encoded Multisig ISM metadata.\n     * @param _index The index of the signature to return.\n     * @return The validator ECDSA signature at `_index`.\n     */\n    function signatureAt(bytes calldata _metadata, uint256 _index)\n        internal\n        pure\n        returns (bytes calldata)\n    {\n        uint256 _start = SIGNATURES_OFFSET + (_index * SIGNATURE_LENGTH);\n        uint256 _end = _start + SIGNATURE_LENGTH;\n        return _metadata[_start:_end];\n    }\n\n    /**\n     * @notice Returns the validator address at `_index`.\n     * @dev Assumes `_index` is less than the number of validators\n     * @param _metadata ABI encoded Multisig ISM metadata.\n     * @param _index The index of the validator to return.\n     * @return The validator address at `_index`.\n     */\n    function validatorAt(bytes calldata _metadata, uint256 _index)\n        internal\n        pure\n        returns (address)\n    {\n        // Validator addresses are left padded to bytes32 in order to match\n        // abi.encodePacked(address[]).\n        uint256 _start = _validatorsOffset(_metadata) + (_index * 32) + 12;\n        uint256 _end = _start + 20;\n        return address(bytes20(_metadata[_start:_end]));\n    }\n\n    /**\n     * @notice Returns the validator set encoded as bytes. Verified against the\n     * commitment stored in the module.\n     * @dev Validator addresses are encoded as tightly packed array of bytes32,\n     * sorted to match the enumerable set stored by the module.\n     * @param _metadata ABI encoded Multisig ISM metadata.\n     * @return The validator set encoded as bytes.\n     */\n    function validators(bytes calldata _metadata)\n        internal\n        pure\n        returns (bytes calldata)\n    {\n        return _metadata[_validatorsOffset(_metadata):];\n    }\n\n    /**\n     * @notice Returns the size of the validator set encoded in the metadata\n     * @dev Validator addresses are encoded as tightly packed array of bytes32,\n     * sorted to match the enumerable set stored by the module.\n     * @param _metadata ABI encoded Multisig ISM metadata.\n     * @return The size of the validator set encoded in the metadata\n     */\n    function validatorCount(bytes calldata _metadata)\n        internal\n        pure\n        returns (uint256)\n    {\n        return (_metadata.length - _validatorsOffset(_metadata)) / 32;\n    }\n\n    /**\n     * @notice Returns the offset in bytes of the list of validators within\n     * `_metadata`.\n     * @param _metadata ABI encoded Multisig ISM metadata.\n     * @return The index at which the list of validators starts\n     */\n    function _validatorsOffset(bytes calldata _metadata)\n        private\n        pure\n        returns (uint256)\n    {\n        return\n            SIGNATURES_OFFSET +\n            (uint256(threshold(_metadata)) * SIGNATURE_LENGTH);\n    }\n}\n\n\n// File contracts/isms/multisig/LegacyMultisigIsm.sol\n\n\npragma solidity >=0.8.0;\n\n// ============ External Imports ============\n\n\n\n// ============ Internal Imports ============\n\n\n\n\n\n\n/**\n * @title MultisigIsm\n * @notice Manages an ownable set of validators that ECDSA sign checkpoints to\n * reach a quorum.\n */\ncontract LegacyMultisigIsm is IMultisigIsm, Ownable {\n    // ============ Libraries ============\n\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using Message for bytes;\n    using LegacyMultisigIsmMetadata for bytes;\n    using MerkleLib for MerkleLib.Tree;\n\n    // ============ Constants ============\n\n    // solhint-disable-next-line const-name-snakecase\n    uint8 public constant moduleType =\n        uint8(IInterchainSecurityModule.Types.LEGACY_MULTISIG);\n\n    // ============ Mutable Storage ============\n\n    /// @notice The validator threshold for each remote domain.\n    mapping(uint32 => uint8) public threshold;\n\n    /// @notice The validator set for each remote domain.\n    mapping(uint32 => EnumerableSet.AddressSet) private validatorSet;\n\n    /// @notice A succinct commitment to the validator set and threshold for each remote\n    /// domain.\n    mapping(uint32 => bytes32) public commitment;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a validator is enrolled in a validator set.\n     * @param domain The remote domain of the validator set.\n     * @param validator The address of the validator.\n     * @param validatorCount The number of enrolled validators in the validator set.\n     */\n    event ValidatorEnrolled(\n        uint32 indexed domain,\n        address indexed validator,\n        uint256 validatorCount\n    );\n\n    /**\n     * @notice Emitted when a validator is unenrolled from a validator set.\n     * @param domain The remote domain of the validator set.\n     * @param validator The address of the validator.\n     * @param validatorCount The number of enrolled validators in the validator set.\n     */\n    event ValidatorUnenrolled(\n        uint32 indexed domain,\n        address indexed validator,\n        uint256 validatorCount\n    );\n\n    /**\n     * @notice Emitted when the quorum threshold is set.\n     * @param domain The remote domain of the validator set.\n     * @param threshold The new quorum threshold.\n     */\n    event ThresholdSet(uint32 indexed domain, uint8 threshold);\n\n    /**\n     * @notice Emitted when the validator set or threshold changes.\n     * @param domain The remote domain of the validator set.\n     * @param commitment A commitment to the validator set and threshold.\n     */\n    event CommitmentUpdated(uint32 domain, bytes32 commitment);\n\n    // ============ Constructor ============\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor() Ownable() {}\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Enrolls multiple validators into a validator set.\n     * @dev Reverts if `_validator` is already in the validator set.\n     * @param _domains The remote domains of the validator sets.\n     * @param _validators The validators to add to the validator sets.\n     * @dev _validators[i] are the validators to enroll for _domains[i].\n     */\n    function enrollValidators(\n        uint32[] calldata _domains,\n        address[][] calldata _validators\n    ) external onlyOwner {\n        uint256 domainsLength = _domains.length;\n        require(domainsLength == _validators.length, \"!length\");\n        for (uint256 i = 0; i < domainsLength; i += 1) {\n            address[] calldata _domainValidators = _validators[i];\n            uint256 validatorsLength = _domainValidators.length;\n            for (uint256 j = 0; j < validatorsLength; j += 1) {\n                _enrollValidator(_domains[i], _domainValidators[j]);\n            }\n            _updateCommitment(_domains[i]);\n        }\n    }\n\n    /**\n     * @notice Enrolls a validator into a validator set.\n     * @dev Reverts if `_validator` is already in the validator set.\n     * @param _domain The remote domain of the validator set.\n     * @param _validator The validator to add to the validator set.\n     */\n    function enrollValidator(uint32 _domain, address _validator)\n        external\n        onlyOwner\n    {\n        _enrollValidator(_domain, _validator);\n        _updateCommitment(_domain);\n    }\n\n    /**\n     * @notice Unenrolls a validator from a validator set.\n     * @dev Reverts if `_validator` is not in the validator set.\n     * @param _domain The remote domain of the validator set.\n     * @param _validator The validator to remove from the validator set.\n     */\n    function unenrollValidator(uint32 _domain, address _validator)\n        external\n        onlyOwner\n    {\n        require(validatorSet[_domain].remove(_validator), \"!enrolled\");\n        uint256 _validatorCount = validatorCount(_domain);\n        require(\n            _validatorCount >= threshold[_domain],\n            \"violates quorum threshold\"\n        );\n        _updateCommitment(_domain);\n        emit ValidatorUnenrolled(_domain, _validator, _validatorCount);\n    }\n\n    /**\n     * @notice Sets the quorum threshold for multiple domains.\n     * @param _domains The remote domains of the validator sets.\n     * @param _thresholds The new quorum thresholds.\n     */\n    function setThresholds(\n        uint32[] calldata _domains,\n        uint8[] calldata _thresholds\n    ) external onlyOwner {\n        uint256 length = _domains.length;\n        require(length == _thresholds.length, \"!length\");\n        for (uint256 i = 0; i < length; i += 1) {\n            setThreshold(_domains[i], _thresholds[i]);\n        }\n    }\n\n    /**\n     * @notice Returns whether an address is enrolled in a validator set.\n     * @param _domain The remote domain of the validator set.\n     * @param _address The address to test for set membership.\n     * @return True if the address is enrolled, false otherwise.\n     */\n    function isEnrolled(uint32 _domain, address _address)\n        external\n        view\n        returns (bool)\n    {\n        EnumerableSet.AddressSet storage _validatorSet = validatorSet[_domain];\n        return _validatorSet.contains(_address);\n    }\n\n    // ============ Public Functions ============\n\n    /**\n     * @notice Sets the quorum threshold.\n     * @param _domain The remote domain of the validator set.\n     * @param _threshold The new quorum threshold.\n     */\n    function setThreshold(uint32 _domain, uint8 _threshold) public onlyOwner {\n        require(\n            _threshold > 0 && _threshold <= validatorCount(_domain),\n            \"!range\"\n        );\n        threshold[_domain] = _threshold;\n        emit ThresholdSet(_domain, _threshold);\n\n        _updateCommitment(_domain);\n    }\n\n    /**\n     * @notice Verifies that a quorum of the origin domain's validators signed\n     * a checkpoint, and verifies the merkle proof of `_message` against that\n     * checkpoint.\n     * @param _metadata ABI encoded module metadata (see LegacyMultisigIsmMetadata.sol)\n     * @param _message Formatted Hyperlane message (see Message.sol).\n     */\n    function verify(bytes calldata _metadata, bytes calldata _message)\n        external\n        view\n        returns (bool)\n    {\n        require(_verifyMerkleProof(_metadata, _message), \"!merkle\");\n        require(_verifyValidatorSignatures(_metadata, _message), \"!sigs\");\n        return true;\n    }\n\n    /**\n     * @notice Gets the current validator set\n     * @param _domain The remote domain of the validator set.\n     * @return The addresses of the validator set.\n     */\n    function validators(uint32 _domain) public view returns (address[] memory) {\n        EnumerableSet.AddressSet storage _validatorSet = validatorSet[_domain];\n        uint256 _validatorCount = _validatorSet.length();\n        address[] memory _validators = new address[](_validatorCount);\n        for (uint256 i = 0; i < _validatorCount; i++) {\n            _validators[i] = _validatorSet.at(i);\n        }\n        return _validators;\n    }\n\n    /**\n     * @notice Returns the set of validators responsible for verifying _message\n     * and the number of signatures required\n     * @dev Can change based on the content of _message\n     * @param _message Hyperlane formatted interchain message\n     * @return validators The array of validator addresses\n     * @return threshold The number of validator signatures needed\n     */\n    function validatorsAndThreshold(bytes calldata _message)\n        external\n        view\n        returns (address[] memory, uint8)\n    {\n        uint32 _origin = _message.origin();\n        address[] memory _validators = validators(_origin);\n        uint8 _threshold = threshold[_origin];\n        return (_validators, _threshold);\n    }\n\n    /**\n     * @notice Returns the number of validators enrolled in the validator set.\n     * @param _domain The remote domain of the validator set.\n     * @return The number of validators enrolled in the validator set.\n     */\n    function validatorCount(uint32 _domain) public view returns (uint256) {\n        return validatorSet[_domain].length();\n    }\n\n    // ============ Internal Functions ============\n\n    /**\n     * @notice Enrolls a validator into a validator set.\n     * @dev Reverts if `_validator` is already in the validator set.\n     * @param _domain The remote domain of the validator set.\n     * @param _validator The validator to add to the validator set.\n     */\n    function _enrollValidator(uint32 _domain, address _validator) internal {\n        require(_validator != address(0), \"zero address\");\n        require(validatorSet[_domain].add(_validator), \"already enrolled\");\n        emit ValidatorEnrolled(_domain, _validator, validatorCount(_domain));\n    }\n\n    /**\n     * @notice Updates the commitment to the validator set for `_domain`.\n     * @param _domain The remote domain of the validator set.\n     * @return The commitment to the validator set for `_domain`.\n     */\n    function _updateCommitment(uint32 _domain) internal returns (bytes32) {\n        address[] memory _validators = validators(_domain);\n        uint8 _threshold = threshold[_domain];\n        bytes32 _commitment = keccak256(\n            abi.encodePacked(_threshold, _validators)\n        );\n        commitment[_domain] = _commitment;\n        emit CommitmentUpdated(_domain, _commitment);\n        return _commitment;\n    }\n\n    /**\n     * @notice Verifies the merkle proof of `_message` against the provided\n     * checkpoint.\n     * @param _metadata ABI encoded module metadata (see LegacyMultisigIsmMetadata.sol)\n     * @param _message Formatted Hyperlane message (see Message.sol).\n     */\n    function _verifyMerkleProof(\n        bytes calldata _metadata,\n        bytes calldata _message\n    ) internal pure returns (bool) {\n        // calculate the expected root based on the proof\n        bytes32 _calculatedRoot = MerkleLib.branchRoot(\n            _message.id(),\n            _metadata.proof(),\n            _message.nonce()\n        );\n        return _calculatedRoot == _metadata.root();\n    }\n\n    /**\n     * @notice Verifies that a quorum of the origin domain's validators signed\n     * the provided checkpoint.\n     * @param _metadata ABI encoded module metadata (see LegacyMultisigIsmMetadata.sol)\n     * @param _message Formatted Hyperlane message (see Message.sol).\n     */\n    function _verifyValidatorSignatures(\n        bytes calldata _metadata,\n        bytes calldata _message\n    ) internal view returns (bool) {\n        uint8 _threshold = _metadata.threshold();\n        bytes32 _digest;\n        {\n            uint32 _origin = _message.origin();\n\n            bytes32 _commitment = keccak256(\n                abi.encodePacked(_threshold, _metadata.validators())\n            );\n            // Ensures the validator set encoded in the metadata matches\n            // what we've stored on chain.\n            // NB: An empty validator set in `_metadata` will result in a\n            // non-zero computed commitment, and this check will fail\n            // as the commitment in storage will be zero.\n            require(_commitment == commitment[_origin], \"!commitment\");\n            _digest = CheckpointLib.digest(\n                _origin,\n                LegacyMultisigIsmMetadata.originMailbox(_metadata),\n                LegacyMultisigIsmMetadata.root(_metadata),\n                LegacyMultisigIsmMetadata.index(_metadata)\n            );\n        }\n        uint256 _validatorCount = _metadata.validatorCount();\n        uint256 _validatorIndex = 0;\n        // Assumes that signatures are ordered by validator\n        for (uint256 i = 0; i < _threshold; ++i) {\n            address _signer = ECDSA.recover(_digest, _metadata.signatureAt(i));\n            // Loop through remaining validators until we find a match\n            while (\n                _validatorIndex < _validatorCount &&\n                _signer != _metadata.validatorAt(_validatorIndex)\n            ) {\n                ++_validatorIndex;\n            }\n            // Fail if we never found a match\n            require(_validatorIndex < _validatorCount, \"!threshold\");\n            ++_validatorIndex;\n        }\n        return true;\n    }\n}\n\n\n// File contracts/isms/multisig/StaticMultisigIsm.sol\n\n\npragma solidity >=0.8.0;\n\n// ============ Internal Imports ============\n\n\n\n/**\n * @title StaticMultisigIsm\n * @notice Manages per-domain m-of-n Validator sets that are used\n * to verify interchain messages.\n */\ncontract StaticMultisigIsm is AbstractMultisigIsm {\n    // ============ Public Functions ============\n\n    /**\n     * @notice Returns the set of validators responsible for verifying _message\n     * and the number of signatures required\n     * @dev Can change based on the content of _message\n     * @return validators The array of validator addresses\n     * @return threshold The number of validator signatures needed\n     */\n    function validatorsAndThreshold(bytes calldata)\n        public\n        view\n        virtual\n        override\n        returns (address[] memory, uint8)\n    {\n        return abi.decode(MetaProxy.metadata(), (address[], uint8));\n    }\n}\n\n\n// File contracts/isms/multisig/StaticMultisigIsmFactory.sol\n\n\npragma solidity >=0.8.0;\n// ============ Internal Imports ============\n\n\ncontract StaticMultisigIsmFactory is StaticMOfNAddressSetFactory {\n    function _deployImplementation()\n        internal\n        virtual\n        override\n        returns (address)\n    {\n        return address(new StaticMultisigIsm());\n    }\n}\n\n\n// File contracts/isms/routing/AbstractRoutingIsm.sol\n\n\npragma solidity >=0.8.0;\n\n// ============ Internal Imports ============\n\n\n/**\n * @title RoutingIsm\n */\nabstract contract AbstractRoutingIsm is IRoutingIsm {\n    // ============ Constants ============\n\n    uint8 public constant moduleType =\n        uint8(IInterchainSecurityModule.Types.ROUTING);\n\n    // ============ Virtual Functions ============\n    // ======= OVERRIDE THESE TO IMPLEMENT =======\n\n    /**\n     * @notice Returns the ISM responsible for verifying _message\n     * @dev Can change based on the content of _message\n     * @param _message Formatted Hyperlane message (see Message.sol).\n     * @return module The ISM to use to verify _message\n     */\n    function route(bytes calldata _message)\n        public\n        view\n        virtual\n        returns (IInterchainSecurityModule);\n\n    // ============ Public Functions ============\n\n    /**\n     * @notice Routes _metadata and _message to the correct ISM\n     * @param _metadata ABI encoded module metadata\n     * @param _message Formatted Hyperlane message (see Message.sol).\n     */\n    function verify(bytes calldata _metadata, bytes calldata _message)\n        public\n        returns (bool)\n    {\n        return route(_message).verify(_metadata, _message);\n    }\n}\n\n\n// File contracts/isms/routing/DomainRoutingIsm.sol\n\n\npragma solidity >=0.8.0;\n// ============ External Imports ============\n\n\n// ============ Internal Imports ============\n\n\n\n/**\n * @title DomainRoutingIsm\n */\ncontract DomainRoutingIsm is AbstractRoutingIsm, OwnableUpgradeable {\n    // ============ Public Storage ============\n    mapping(uint32 => IInterchainSecurityModule) public modules;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a module is set for a domain\n     * @param domain The origin domain.\n     * @param module The ISM to use.\n     */\n    event ModuleSet(uint32 indexed domain, IInterchainSecurityModule module);\n\n    // ============ External Functions ============\n\n    /**\n     * @param _owner The owner of the contract.\n     */\n    function initialize(address _owner) public initializer {\n        __Ownable_init();\n        _transferOwnership(_owner);\n    }\n\n    /**\n     * @notice Sets the ISMs to be used for the specified origin domains\n     * @param _owner The owner of the contract.\n     * @param _domains The origin domains\n     * @param _modules The ISMs to use to verify messages\n     */\n    function initialize(\n        address _owner,\n        uint32[] calldata _domains,\n        IInterchainSecurityModule[] calldata _modules\n    ) public initializer {\n        __Ownable_init();\n        require(_domains.length == _modules.length, \"length mismatch\");\n        uint256 _length = _domains.length;\n        for (uint256 i = 0; i < _length; ++i) {\n            _set(_domains[i], _modules[i]);\n        }\n        _transferOwnership(_owner);\n    }\n\n    /**\n     * @notice Sets the ISM to be used for the specified origin domain\n     * @param _domain The origin domain\n     * @param _module The ISM to use to verify messages\n     */\n    function set(uint32 _domain, IInterchainSecurityModule _module)\n        external\n        onlyOwner\n    {\n        _set(_domain, _module);\n    }\n\n    // ============ Public Functions ============\n\n    /**\n     * @notice Returns the ISM responsible for verifying _message\n     * @dev Can change based on the content of _message\n     * @param _message Formatted Hyperlane message (see Message.sol).\n     * @return module The ISM to use to verify _message\n     */\n    function route(bytes calldata _message)\n        public\n        view\n        virtual\n        override\n        returns (IInterchainSecurityModule)\n    {\n        IInterchainSecurityModule module = modules[Message.origin(_message)];\n        require(\n            address(module) != address(0),\n            \"No ISM found for origin domain\"\n        );\n        return module;\n    }\n\n    // ============ Internal Functions ============\n\n    /**\n     * @notice Sets the ISM to be used for the specified origin domain\n     * @param _domain The origin domain\n     * @param _module The ISM to use to verify messages\n     */\n    function _set(uint32 _domain, IInterchainSecurityModule _module) internal {\n        require(Address.isContract(address(_module)), \"!contract\");\n        modules[_domain] = _module;\n        emit ModuleSet(_domain, _module);\n    }\n}\n\n\n// File contracts/libs/MinimalProxy.sol\n\n\npragma solidity >=0.6.11;\n\n// Library for building bytecode of minimal proxies (see https://eips.ethereum.org/EIPS/eip-1167)\nlibrary MinimalProxy {\n    bytes20 private constant PREFIX =\n        hex\"3d602d80600a3d3981f3363d3d373d3d3d363d73\";\n    bytes15 private constant SUFFIX = hex\"5af43d82803e903d91602b57fd5bf3\";\n\n    function create(address implementation) internal returns (address proxy) {\n        bytes memory _bytecode = bytecode(implementation);\n        assembly {\n            proxy := create(0, add(_bytecode, 32), mload(_bytecode))\n        }\n    }\n\n    function bytecode(address implementation)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(PREFIX, bytes20(implementation), SUFFIX);\n    }\n}\n\n\n// File contracts/isms/routing/DomainRoutingIsmFactory.sol\n\n\npragma solidity >=0.8.0;\n\n// ============ Internal Imports ============\n\n\n\n/**\n * @title DomainRoutingIsmFactory\n */\ncontract DomainRoutingIsmFactory {\n    // ============ Immutables ============\n    address private immutable _implementation;\n\n    /**\n     * @notice Emitted when a routing module is deployed\n     * @param module The deployed ISM\n     */\n    event ModuleDeployed(DomainRoutingIsm module);\n\n    // ============ Constructor ============\n\n    constructor() {\n        _implementation = address(new DomainRoutingIsm());\n    }\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Deploys and initializes a DomainRoutingIsm using a minimal proxy\n     * @param _domains The origin domains\n     * @param _modules The ISMs to use to verify messages\n     */\n    function deploy(\n        uint32[] calldata _domains,\n        IInterchainSecurityModule[] calldata _modules\n    ) external returns (DomainRoutingIsm) {\n        DomainRoutingIsm _ism = DomainRoutingIsm(\n            MinimalProxy.create(_implementation)\n        );\n        emit ModuleDeployed(_ism);\n        _ism.initialize(msg.sender, _domains, _modules);\n        return _ism;\n    }\n}\n\n\n// File contracts/libs/middleware/InterchainAccountMessage.sol\n\n\npragma solidity >=0.8.0;\n\n\n/**\n * Format of message:\n * [   0:  32] ICA owner\n * [  32:  64] ICA ISM\n * [  64:????] Calls, abi encoded\n */\nlibrary InterchainAccountMessage {\n    using TypeCasts for bytes32;\n\n    /**\n     * @notice Returns formatted (packed) InterchainAccountMessage\n     * @dev This function should only be used in memory message construction.\n     * @param _owner The owner of the interchain account\n     * @param _ism The address of the remote ISM\n     * @param _to The address of the contract to call\n     * @param _value The value to include in the call\n     * @param _data The calldata\n     * @return Formatted message body\n     */\n    function encode(\n        address _owner,\n        bytes32 _ism,\n        address _to,\n        uint256 _value,\n        bytes memory _data\n    ) internal pure returns (bytes memory) {\n        CallLib.Call[] memory _calls = new CallLib.Call[](1);\n        _calls[0] = CallLib.build(_to, _value, _data);\n        return abi.encode(TypeCasts.addressToBytes32(_owner), _ism, _calls);\n    }\n\n    /**\n     * @notice Returns formatted (packed) InterchainAccountMessage\n     * @dev This function should only be used in memory message construction.\n     * @param _owner The owner of the interchain account\n     * @param _ism The address of the remote ISM\n     * @param _calls The sequence of calls to make\n     * @return Formatted message body\n     */\n    function encode(\n        bytes32 _owner,\n        bytes32 _ism,\n        CallLib.Call[] calldata _calls\n    ) internal pure returns (bytes memory) {\n        return abi.encode(_owner, _ism, _calls);\n    }\n\n    /**\n     * @notice Returns formatted (packed) InterchainAccountMessage\n     * @dev This function should only be used in memory message construction.\n     * @param _owner The owner of the interchain account\n     * @param _ism The address of the remote ISM\n     * @param _calls The sequence of calls to make\n     * @return Formatted message body\n     */\n    function encode(\n        address _owner,\n        bytes32 _ism,\n        CallLib.Call[] calldata _calls\n    ) internal pure returns (bytes memory) {\n        return encode(TypeCasts.addressToBytes32(_owner), _ism, _calls);\n    }\n\n    /**\n     * @notice Parses and returns the calls from the provided message\n     * @param _message The interchain account message\n     * @return The array of calls\n     */\n    function decode(bytes calldata _message)\n        internal\n        pure\n        returns (\n            bytes32,\n            bytes32,\n            CallLib.Call[] memory\n        )\n    {\n        return abi.decode(_message, (bytes32, bytes32, CallLib.Call[]));\n    }\n\n    /**\n     * @notice Parses and returns the ISM address from the provided message\n     * @param _message The interchain account message\n     * @return The ISM encoded in the message\n     */\n    function ism(bytes calldata _message) internal pure returns (address) {\n        return address(bytes20(_message[44:64]));\n    }\n}\n\n\n// File contracts/isms/routing/InterchainAccountIsm.sol\n\n\npragma solidity >=0.8.0;\n// ============ Internal Imports ============\n\n\n\n\n\n/**\n * @title InterchainAccountIsm\n */\ncontract InterchainAccountIsm is AbstractRoutingIsm {\n    IMailbox private immutable mailbox;\n\n    // ============ Constructor ============\n    constructor(address _mailbox) {\n        mailbox = IMailbox(_mailbox);\n    }\n\n    // ============ Public Functions ============\n\n    /**\n     * @notice Returns the ISM responsible for verifying _message\n     * @param _message Formatted Hyperlane message (see Message.sol).\n     * @return module The ISM to use to verify _message\n     */\n    function route(bytes calldata _message)\n        public\n        view\n        virtual\n        override\n        returns (IInterchainSecurityModule)\n    {\n        address _ism = InterchainAccountMessage.ism(Message.body(_message));\n        if (_ism == address(0)) {\n            return mailbox.defaultIsm();\n        } else {\n            return IInterchainSecurityModule(_ism);\n        }\n    }\n}\n\n\n// File contracts/libs/middleware/InterchainQueryMessage.sol\n\n\npragma solidity ^0.8.13;\n\n/**\n * Format of message:\n * [   0: 32] Sender address\n * [  32: 64] Message type (left padded with zeroes)\n * [  64:???] Encoded call array\n */\nlibrary InterchainQueryMessage {\n    uint256 private constant SENDER_OFFSET = 0;\n    uint256 private constant TYPE_OFFSET = 32;\n    uint256 private constant CALLS_OFFSET = 64;\n\n    enum MessageType {\n        QUERY,\n        RESPONSE\n    }\n\n    /**\n     * @notice Parses and returns the query sender from the provided message\n     * @param _message The interchain query message\n     * @return The query sender as bytes32\n     */\n    function sender(bytes calldata _message) internal pure returns (bytes32) {\n        return bytes32(_message[SENDER_OFFSET:TYPE_OFFSET]);\n    }\n\n    /**\n     * @notice Parses and returns the message type from the provided message\n     * @param _message The interchain query message\n     * @return The message type (query or response)\n     */\n    function messageType(bytes calldata _message)\n        internal\n        pure\n        returns (MessageType)\n    {\n        // left padded with zeroes\n        return MessageType(uint8(bytes1(_message[CALLS_OFFSET - 1])));\n    }\n\n    /**\n     * @notice Returns formatted InterchainQueryMessage, type == QUERY\n     * @param _sender The query sender as bytes32\n     * @param _calls The sequence of queries to make, with the corresponding\n     * response callbacks\n     * @return Formatted message body\n     */\n    function encode(\n        bytes32 _sender,\n        CallLib.StaticCallWithCallback[] calldata _calls\n    ) internal pure returns (bytes memory) {\n        return abi.encode(_sender, MessageType.QUERY, _calls);\n    }\n\n    /**\n     * @notice Returns formatted InterchainQueryMessage, type == QUERY\n     * @param _sender The query sender as bytes32\n     * @param _to The address of the contract to query\n     * @param _data The calldata encoding the query\n     * @param _callback The calldata of the callback that will be made on the sender.\n     * The return value of the query will be appended.\n     * @return Formatted message body\n     */\n    function encode(\n        bytes32 _sender,\n        address _to,\n        bytes memory _data,\n        bytes memory _callback\n    ) internal pure returns (bytes memory) {\n        CallLib.StaticCallWithCallback[]\n            memory _calls = new CallLib.StaticCallWithCallback[](1);\n        _calls[0] = CallLib.build(_to, _data, _callback);\n        return abi.encode(_sender, MessageType.QUERY, _calls);\n    }\n\n    /**\n     * @notice Parses and returns the calls and callbacks from the message\n     * @param _message The interchain query message, type == QUERY\n     * @return _calls The sequence of queries to make with the corresponding\n     * response callbacks\n     */\n    function callsWithCallbacks(bytes calldata _message)\n        internal\n        pure\n        returns (CallLib.StaticCallWithCallback[] memory _calls)\n    {\n        assert(messageType(_message) == MessageType.QUERY);\n        (, , _calls) = abi.decode(\n            _message,\n            (bytes32, MessageType, CallLib.StaticCallWithCallback[])\n        );\n    }\n\n    /**\n     * @notice Returns formatted InterchainQueryMessage, type == RESPONSE\n     * @param _sender The query sender as bytes32\n     * @param _calls The sequence of callbacks to make\n     * @return Formatted message body\n     */\n    function encode(bytes32 _sender, bytes[] memory _calls)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encode(_sender, MessageType.RESPONSE, _calls);\n    }\n\n    /**\n     * @notice Parses and returns the callbacks from the message\n     * @param _message The interchain query message, type == RESPONSE\n     * @return _calls The sequence of callbacks to make\n     */\n    function rawCalls(bytes calldata _message)\n        internal\n        pure\n        returns (bytes[] memory _calls)\n    {\n        assert(messageType(_message) == MessageType.RESPONSE);\n        (, , _calls) = abi.decode(_message, (bytes32, MessageType, bytes[]));\n    }\n}\n\n\n// File contracts/libs/ValidatorAnnouncements.sol\n\n\npragma solidity >=0.8.0;\n// ============ Internal Imports ============\n\n// ============ External Imports ============\n\nlibrary ValidatorAnnouncements {\n    using TypeCasts for address;\n\n    /**\n     * @notice Returns the digest validators are expected to sign when signing announcements.\n     * @param _mailbox Address of the mailbox being validated\n     * @param _localDomain Domain of chain on which the contract is deployed\n     * @param _storageLocation Storage location string.\n     * @return The digest of the announcement.\n     */\n    function getAnnouncementDigest(\n        address _mailbox,\n        uint32 _localDomain,\n        string memory _storageLocation\n    ) internal pure returns (bytes32) {\n        bytes32 _domainHash = keccak256(\n            abi.encodePacked(\n                _localDomain,\n                _mailbox.addressToBytes32(),\n                \"HYPERLANE_ANNOUNCEMENT\"\n            )\n        );\n        return\n            ECDSA.toEthSignedMessageHash(\n                keccak256(abi.encodePacked(_domainHash, _storageLocation))\n            );\n    }\n}\n\n\n// File contracts/upgrade/Versioned.sol\n\n\npragma solidity >=0.6.11;\n\n/**\n * @title Versioned\n * @notice Version getter for contracts\n **/\ncontract Versioned {\n    uint8 public constant VERSION = 0;\n}\n\n\n// File contracts/PausableReentrancyGuard.sol\n\n\npragma solidity >=0.8.0;\n\n// adapted from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nabstract contract PausableReentrancyGuardUpgradeable is Initializable {\n    uint256 private constant _ENTERED = 0;\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _PAUSED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev MUST be called for `nonReentrant` to not always revert\n     */\n    function __PausableReentrancyGuard_init() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    function _isPaused() internal view returns (bool) {\n        return _status == _PAUSED;\n    }\n\n    function _pause() internal notPaused {\n        _status = _PAUSED;\n    }\n\n    function _unpause() internal {\n        require(_isPaused(), \"!paused\");\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from being entered when paused.\n     */\n    modifier notPaused() {\n        require(!_isPaused(), \"paused\");\n        _;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrantAndNotPaused() {\n        // status must have been initialized\n        require(_status == _NOT_ENTERED, \"reentrant call (or paused)\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n\n// File contracts/Mailbox.sol\n\n\npragma solidity >=0.8.0;\n\n// ============ Internal Imports ============\n\n\n\n\n\n\n\n\n// ============ External Imports ============\n\n\ncontract Mailbox is\n    IMailbox,\n    OwnableUpgradeable,\n    PausableReentrancyGuardUpgradeable,\n    Versioned\n{\n    // ============ Libraries ============\n\n    using MerkleLib for MerkleLib.Tree;\n    using Message for bytes;\n    using TypeCasts for bytes32;\n    using TypeCasts for address;\n\n    // ============ Constants ============\n\n    // Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\n    uint256 public constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;\n    // Domain of chain on which the contract is deployed\n    uint32 public immutable localDomain;\n\n    // ============ Public Storage ============\n\n    // The default ISM, used if the recipient fails to specify one.\n    IInterchainSecurityModule public defaultIsm;\n    // An incremental merkle tree used to store outbound message IDs.\n    MerkleLib.Tree public tree;\n    // Mapping of message ID to whether or not that message has been delivered.\n    mapping(bytes32 => bool) public delivered;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[47] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when the default ISM is updated\n     * @param module The new default ISM\n     */\n    event DefaultIsmSet(address indexed module);\n\n    /**\n     * @notice Emitted when Mailbox is paused\n     */\n    event Paused();\n\n    /**\n     * @notice Emitted when Mailbox is unpaused\n     */\n    event Unpaused();\n\n    // ============ Constructor ============\n\n    constructor(uint32 _localDomain) {\n        localDomain = _localDomain;\n    }\n\n    // ============ Initializers ============\n\n    function initialize(address _owner, address _defaultIsm)\n        external\n        initializer\n    {\n        __PausableReentrancyGuard_init();\n        __Ownable_init();\n        transferOwnership(_owner);\n        _setDefaultIsm(_defaultIsm);\n    }\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Sets the default ISM for the Mailbox.\n     * @param _module The new default ISM. Must be a contract.\n     */\n    function setDefaultIsm(address _module) external onlyOwner {\n        _setDefaultIsm(_module);\n    }\n\n    /**\n     * @notice Dispatches a message to the destination domain & recipient.\n     * @param _destinationDomain Domain of destination chain\n     * @param _recipientAddress Address of recipient on destination chain as bytes32\n     * @param _messageBody Raw bytes content of message body\n     * @return The message ID inserted into the Mailbox's merkle tree\n     */\n    function dispatch(\n        uint32 _destinationDomain,\n        bytes32 _recipientAddress,\n        bytes calldata _messageBody\n    ) external override notPaused returns (bytes32) {\n        require(_messageBody.length <= MAX_MESSAGE_BODY_BYTES, \"msg too long\");\n        // Format the message into packed bytes.\n        bytes memory _message = Message.formatMessage(\n            VERSION,\n            count(),\n            localDomain,\n            msg.sender.addressToBytes32(),\n            _destinationDomain,\n            _recipientAddress,\n            _messageBody\n        );\n\n        // Insert the message ID into the merkle tree.\n        bytes32 _id = _message.id();\n        tree.insert(_id);\n        emit Dispatch(\n            msg.sender,\n            _destinationDomain,\n            _recipientAddress,\n            _message\n        );\n        emit DispatchId(_id);\n        return _id;\n    }\n\n    /**\n     * @notice Attempts to deliver `_message` to its recipient. Verifies\n     * `_message` via the recipient's ISM using the provided `_metadata`.\n     * @param _metadata Metadata used by the ISM to verify `_message`.\n     * @param _message Formatted Hyperlane message (refer to Message.sol).\n     */\n    function process(bytes calldata _metadata, bytes calldata _message)\n        external\n        override\n        nonReentrantAndNotPaused\n    {\n        // Check that the message was intended for this mailbox.\n        require(_message.version() == VERSION, \"!version\");\n        require(_message.destination() == localDomain, \"!destination\");\n\n        // Check that the message hasn't already been delivered.\n        bytes32 _id = _message.id();\n        require(delivered[_id] == false, \"delivered\");\n        delivered[_id] = true;\n\n        // Verify the message via the ISM.\n        IInterchainSecurityModule _ism = IInterchainSecurityModule(\n            recipientIsm(_message.recipientAddress())\n        );\n        require(_ism.verify(_metadata, _message), \"!module\");\n\n        // Deliver the message to the recipient.\n        uint32 origin = _message.origin();\n        bytes32 sender = _message.sender();\n        address recipient = _message.recipientAddress();\n        IMessageRecipient(recipient).handle(origin, sender, _message.body());\n        emit Process(origin, sender, recipient);\n        emit ProcessId(_id);\n    }\n\n    // ============ Public Functions ============\n\n    /**\n     * @notice Calculates and returns tree's current root\n     */\n    function root() public view returns (bytes32) {\n        return tree.root();\n    }\n\n    /**\n     * @notice Returns the number of inserted leaves in the tree\n     */\n    function count() public view returns (uint32) {\n        // count cannot exceed 2**TREE_DEPTH, see MerkleLib.sol\n        return uint32(tree.count);\n    }\n\n    /**\n     * @notice Returns a checkpoint representing the current merkle tree.\n     * @return root The root of the Mailbox's merkle tree.\n     * @return index The index of the last element in the tree.\n     */\n    function latestCheckpoint() external view returns (bytes32, uint32) {\n        return (root(), count() - 1);\n    }\n\n    /**\n     * @notice Pauses mailbox and prevents further dispatch/process calls\n     * @dev Only `owner` can pause the mailbox.\n     */\n    function pause() external onlyOwner {\n        _pause();\n        emit Paused();\n    }\n\n    /**\n     * @notice Unpauses mailbox and allows for message processing.\n     * @dev Only `owner` can unpause the mailbox.\n     */\n    function unpause() external onlyOwner {\n        _unpause();\n        emit Unpaused();\n    }\n\n    /**\n     * @notice Returns whether mailbox is paused.\n     */\n    function isPaused() external view returns (bool) {\n        return _isPaused();\n    }\n\n    /**\n     * @notice Returns the ISM to use for the recipient, defaulting to the\n     * default ISM if none is specified.\n     * @param _recipient The message recipient whose ISM should be returned.\n     * @return The ISM to use for `_recipient`.\n     */\n    function recipientIsm(address _recipient)\n        public\n        view\n        returns (IInterchainSecurityModule)\n    {\n        // Use a default interchainSecurityModule if one is not specified by the\n        // recipient.\n        // This is useful for backwards compatibility and for convenience as\n        // recipients are not mandated to specify an ISM.\n        try\n            ISpecifiesInterchainSecurityModule(_recipient)\n                .interchainSecurityModule()\n        returns (IInterchainSecurityModule _val) {\n            // If the recipient specifies a zero address, use the default ISM.\n            if (address(_val) != address(0)) {\n                return _val;\n            }\n            // solhint-disable-next-line no-empty-blocks\n        } catch {}\n        return defaultIsm;\n    }\n\n    // ============ Internal Functions ============\n\n    /**\n     * @notice Sets the default ISM for the Mailbox.\n     * @param _module The new default ISM. Must be a contract.\n     */\n    function _setDefaultIsm(address _module) internal {\n        require(Address.isContract(_module), \"!contract\");\n        defaultIsm = IInterchainSecurityModule(_module);\n        emit DefaultIsmSet(_module);\n    }\n}\n\n\n// File contracts/interfaces/IRouter.sol\n\n\npragma solidity >=0.8.0;\n\ninterface IRouter {\n    function domains() external view returns (uint32[] memory);\n\n    function routers(uint32 _domain) external view returns (bytes32);\n\n    function enrollRemoteRouter(uint32 _domain, bytes32 _router) external;\n\n    function enrollRemoteRouters(\n        uint32[] calldata _domains,\n        bytes32[] calldata _routers\n    ) external;\n}\n\n\n// File contracts/middleware/InterchainAccountRouter.sol\n\n\npragma solidity ^0.8.13;\n\n// ============ Internal Imports ============\n\n\n\n\n\n\n\n\n\n// ============ External Imports ============\n\n\n\n/*\n * @title A contract that allows accounts on chain A to call contracts via a\n * proxy contract on chain B.\n */\ncontract InterchainAccountRouter is\n    HyperlaneConnectionClient,\n    IRouter,\n    IInterchainAccountRouter\n{\n    // ============ Libraries ============\n\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n\n    // ============ Constants ============\n\n    uint32 internal immutable localDomain;\n    address internal immutable implementation;\n    bytes32 internal immutable bytecodeHash;\n\n    // ============ Private Storage ============\n    uint32[] private _domains;\n\n    // ============ Public Storage ============\n    mapping(uint32 => bytes32) public routers;\n    mapping(uint32 => bytes32) public isms;\n\n    // ============ Upgrade Gap ============\n\n    // gap for upgrade safety\n    uint256[47] private __GAP;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a default router is set for a remote domain\n     * @param domain The remote domain\n     * @param router The address of the remote router\n     */\n    event RemoteRouterEnrolled(uint32 indexed domain, bytes32 router);\n\n    /**\n     * @notice Emitted when a default ISM is set for a remote domain\n     * @param domain The remote domain\n     * @param ism The address of the remote ISM\n     */\n    event RemoteIsmEnrolled(uint32 indexed domain, bytes32 ism);\n\n    /**\n     * @notice Emitted when an interchain call is dispatched to a remote domain\n     * @param destination The destination domain on which to make the call\n     * @param owner The local owner of the remote ICA\n     * @param router The address of the remote router\n     * @param ism The address of the remote ISM\n     */\n    event RemoteCallDispatched(\n        uint32 indexed destination,\n        address indexed owner,\n        bytes32 router,\n        bytes32 ism\n    );\n\n    /**\n     * @notice Emitted when an interchain account contract is deployed\n     * @param origin The domain of the chain where the message was sent from\n     * @param owner The address of the account that sent the message\n     * @param ism The address of the local ISM\n     * @param account The address of the proxy account that was created\n     */\n    event InterchainAccountCreated(\n        uint32 indexed origin,\n        bytes32 indexed owner,\n        address ism,\n        address account\n    );\n\n    // ============ Constructor ============\n\n    /**\n     * @notice Constructor deploys a relay (OwnableMulticall.sol) contract that\n     * will be cloned for each interchain account.\n     * @param _localDomain The Hyperlane domain ID on which this contract is\n     * deployed.\n     * @param _proxy The address of a proxy contract that delegates calls to\n     * this contract. Used by OwnableMulticall for access control.\n     * @dev Set proxy to address(0) to use this contract without a proxy.\n     */\n    constructor(uint32 _localDomain, address _proxy) {\n        localDomain = _localDomain;\n        // TODO: always proxy and remove this sentinel\n        if (_proxy == address(0)) {\n            _proxy = address(this);\n        }\n        implementation = address(new OwnableMulticall(_proxy));\n        // cannot be stored immutably because it is dynamically sized\n        bytes memory _bytecode = MinimalProxy.bytecode(implementation);\n        bytecodeHash = keccak256(_bytecode);\n    }\n\n    // ============ Initializers ============\n\n    /**\n     * @notice Initializes the contract with HyperlaneConnectionClient contracts\n     * @param _mailbox The address of the mailbox contract\n     * @param _interchainGasPaymaster Unused but required by HyperlaneConnectionClient\n     * @param _interchainSecurityModule The address of the local ISM contract\n     * @param _owner The address with owner privileges\n     */\n    function initialize(\n        address _mailbox,\n        address _interchainGasPaymaster,\n        address _interchainSecurityModule,\n        address _owner\n    ) external initializer {\n        __HyperlaneConnectionClient_initialize(\n            _mailbox,\n            _interchainGasPaymaster,\n            _interchainSecurityModule,\n            _owner\n        );\n        require(localDomain == mailbox.localDomain(), \"domain mismatch\");\n    }\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Registers the address of many remote InterchainAccountRouter\n     * contracts to use as a default when making interchain calls\n     * @param _destinations The remote domains\n     * @param _routers The addresses of the remote InterchainAccountRouters\n     */\n    function enrollRemoteRouters(\n        uint32[] calldata _destinations,\n        bytes32[] calldata _routers\n    ) external onlyOwner {\n        require(_destinations.length == _routers.length, \"!length\");\n        for (uint256 i = 0; i < _destinations.length; i += 1) {\n            _enrollRemoteRouterAndIsm(\n                _destinations[i],\n                _routers[i],\n                bytes32(0)\n            );\n        }\n    }\n\n    /**\n     * @notice Dispatches a single remote call to be made by an owner's\n     * interchain account on the destination domain\n     * @dev Uses the default router and ISM addresses for the destination\n     * domain, reverting if none have been configured\n     * @param _destination The remote domain of the chain to make calls on\n     * @param _to The address of the contract to call\n     * @param _value The value to include in the call\n     * @param _data The calldata\n     * @return The Hyperlane message ID\n     */\n    function callRemote(\n        uint32 _destination,\n        address _to,\n        uint256 _value,\n        bytes memory _data\n    ) external returns (bytes32) {\n        bytes32 _router = routers[_destination];\n        bytes32 _ism = isms[_destination];\n        bytes memory _body = InterchainAccountMessage.encode(\n            msg.sender,\n            _ism,\n            _to,\n            _value,\n            _data\n        );\n        return _dispatchMessage(_destination, _router, _ism, _body);\n    }\n\n    /**\n     * @notice Dispatches a sequence of remote calls to be made by an owner's\n     * interchain account on the destination domain\n     * @dev Uses the default router and ISM addresses for the destination\n     * domain, reverting if none have been configured\n     * @dev Recommend using CallLib.build to format the interchain calls.\n     * @param _destination The remote domain of the chain to make calls on\n     * @param _calls The sequence of calls to make\n     * @return The Hyperlane message ID\n     */\n    function callRemote(uint32 _destination, CallLib.Call[] calldata _calls)\n        external\n        returns (bytes32)\n    {\n        bytes32 _router = routers[_destination];\n        bytes32 _ism = isms[_destination];\n        return callRemoteWithOverrides(_destination, _router, _ism, _calls);\n    }\n\n    /**\n     * @notice Handles dispatched messages by relaying calls to the interchain account\n     * @param _origin The origin domain of the interchain account\n     * @param _sender The sender of the interchain message\n     * @param _message The InterchainAccountMessage containing the account\n     * owner, ISM, and sequence of calls to be relayed\n     * @dev Does not need to be onlyRemoteRouter, as this application is designed\n     * to receive messages from untrusted remote contracts.\n     */\n    function handle(\n        uint32 _origin,\n        bytes32 _sender,\n        bytes calldata _message\n    ) external onlyMailbox {\n        (\n            bytes32 _owner,\n            bytes32 _ism,\n            CallLib.Call[] memory _calls\n        ) = InterchainAccountMessage.decode(_message);\n\n        OwnableMulticall _interchainAccount = getDeployedInterchainAccount(\n            _origin,\n            _owner,\n            _sender,\n            TypeCasts.bytes32ToAddress(_ism)\n        );\n        _interchainAccount.multicall(_calls);\n    }\n\n    /**\n     * @notice Returns the local address of an interchain account\n     * @dev This interchain account is not guaranteed to have been deployed\n     * @param _origin The remote origin domain of the interchain account\n     * @param _router The remote origin InterchainAccountRouter\n     * @param _owner The remote owner of the interchain account\n     * @param _ism The local address of the ISM\n     * @return The local address of the interchain account\n     */\n    function getLocalInterchainAccount(\n        uint32 _origin,\n        address _owner,\n        address _router,\n        address _ism\n    ) external view returns (OwnableMulticall) {\n        bytes32 _routerAsBytes32 = TypeCasts.addressToBytes32(_router);\n        bytes32 _ownerAsBytes32 = TypeCasts.addressToBytes32(_owner);\n        return\n            getLocalInterchainAccount(\n                _origin,\n                _ownerAsBytes32,\n                _routerAsBytes32,\n                _ism\n            );\n    }\n\n    /**\n     * @notice Returns the remote address of a locally owned interchain account\n     * @dev This interchain account is not guaranteed to have been deployed\n     * @dev This function will only work if the destination domain is\n     * EVM compatible\n     * @param _destination The remote destination domain of the interchain account\n     * @param _owner The local owner of the interchain account\n     * @return The remote address of the interchain account\n     */\n    function getRemoteInterchainAccount(uint32 _destination, address _owner)\n        external\n        view\n        returns (address)\n    {\n        address _router = TypeCasts.bytes32ToAddress(routers[_destination]);\n        address _ism = TypeCasts.bytes32ToAddress(isms[_destination]);\n        return getRemoteInterchainAccount(_owner, _router, _ism);\n    }\n\n    function domains() external view returns (uint32[] memory) {\n        return _domains;\n    }\n\n    // ============ Public Functions ============\n\n    /**\n     * @notice Registers the address of a remote InterchainAccountRouter\n     * contract to use as a default when making interchain calls\n     * @param _destination The remote domain\n     * @param _router The address of the remote InterchainAccountRouter\n     */\n    function enrollRemoteRouter(uint32 _destination, bytes32 _router)\n        public\n        onlyOwner\n    {\n        _enrollRemoteRouterAndIsm(_destination, _router, bytes32(0));\n    }\n\n    /**\n     * @notice Registers the address of remote InterchainAccountRouter\n     * and ISM contracts to use as a default when making interchain calls\n     * @param _destination The remote domain\n     * @param _router The address of the remote InterchainAccountRouter\n     * @param _ism The address of the remote ISM\n     */\n    function enrollRemoteRouterAndIsm(\n        uint32 _destination,\n        bytes32 _router,\n        bytes32 _ism\n    ) public onlyOwner {\n        _enrollRemoteRouterAndIsm(_destination, _router, _ism);\n    }\n\n    /**\n     * @notice Dispatches a sequence of remote calls to be made by an owner's\n     * interchain account on the destination domain\n     * @dev Recommend using CallLib.build to format the interchain calls\n     * @param _destination The remote domain of the chain to make calls on\n     * @param _router The remote router address\n     * @param _ism The remote ISM address\n     * @param _calls The sequence of calls to make\n     * @return The Hyperlane message ID\n     */\n    function callRemoteWithOverrides(\n        uint32 _destination,\n        bytes32 _router,\n        bytes32 _ism,\n        CallLib.Call[] calldata _calls\n    ) public returns (bytes32) {\n        bytes memory _body = InterchainAccountMessage.encode(\n            msg.sender,\n            _ism,\n            _calls\n        );\n        return _dispatchMessage(_destination, _router, _ism, _body);\n    }\n\n    /**\n     * @notice Returns and deploys (if not already) an interchain account\n     * @param _origin The remote origin domain of the interchain account\n     * @param _owner The remote owner of the interchain account\n     * @param _router The remote origin InterchainAccountRouter\n     * @param _ism The local address of the ISM\n     * @return The address of the interchain account\n     */\n    function getDeployedInterchainAccount(\n        uint32 _origin,\n        address _owner,\n        address _router,\n        address _ism\n    ) public returns (OwnableMulticall) {\n        return\n            getDeployedInterchainAccount(\n                _origin,\n                TypeCasts.addressToBytes32(_owner),\n                TypeCasts.addressToBytes32(_router),\n                _ism\n            );\n    }\n\n    /**\n     * @notice Returns and deploys (if not already) an interchain account\n     * @param _origin The remote origin domain of the interchain account\n     * @param _owner The remote owner of the interchain account\n     * @param _router The remote origin InterchainAccountRouter\n     * @param _ism The local address of the ISM\n     * @return The address of the interchain account\n     */\n    function getDeployedInterchainAccount(\n        uint32 _origin,\n        bytes32 _owner,\n        bytes32 _router,\n        address _ism\n    ) public returns (OwnableMulticall) {\n        bytes32 _salt = _getSalt(\n            _origin,\n            _owner,\n            _router,\n            TypeCasts.addressToBytes32(_ism)\n        );\n        address payable _account = _getLocalInterchainAccount(_salt);\n        if (!Address.isContract(_account)) {\n            bytes memory _bytecode = MinimalProxy.bytecode(implementation);\n            _account = payable(Create2.deploy(0, _salt, _bytecode));\n            emit InterchainAccountCreated(_origin, _owner, _ism, _account);\n        }\n        return OwnableMulticall(_account);\n    }\n\n    /**\n     * @notice Returns the local address of a remotely owned interchain account\n     * @dev This interchain account is not guaranteed to have been deployed\n     * @param _origin The remote origin domain of the interchain account\n     * @param _owner The remote owner of the interchain account\n     * @param _router The remote InterchainAccountRouter\n     * @param _ism The local address of the ISM\n     * @return The local address of the interchain account\n     */\n    function getLocalInterchainAccount(\n        uint32 _origin,\n        bytes32 _owner,\n        bytes32 _router,\n        address _ism\n    ) public view returns (OwnableMulticall) {\n        return\n            OwnableMulticall(\n                _getLocalInterchainAccount(\n                    _getSalt(\n                        _origin,\n                        _owner,\n                        _router,\n                        TypeCasts.addressToBytes32(_ism)\n                    )\n                )\n            );\n    }\n\n    /**\n     * @notice Returns the remote address of a locally owned interchain account\n     * @dev This interchain account is not guaranteed to have been deployed\n     * @dev This function will only work if the destination domain is\n     * EVM compatible\n     * @param _owner The local owner of the interchain account\n     * @param _router The remote InterchainAccountRouter\n     * @param _ism The remote address of the ISM\n     * @return The remote address of the interchain account\n     */\n    function getRemoteInterchainAccount(\n        address _owner,\n        address _router,\n        address _ism\n    ) public view returns (address) {\n        require(_router != address(0), \"no router specified for destination\");\n        // Derives the address of the first contract deployed by _router using\n        // the CREATE opcode.\n        address _implementation = address(\n            uint160(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            bytes1(0xd6),\n                            bytes1(0x94),\n                            _router,\n                            bytes1(0x01)\n                        )\n                    )\n                )\n            )\n        );\n        bytes memory _proxyBytecode = MinimalProxy.bytecode(_implementation);\n        bytes32 _bytecodeHash = keccak256(_proxyBytecode);\n        bytes32 _salt = _getSalt(\n            localDomain,\n            TypeCasts.addressToBytes32(_owner),\n            TypeCasts.addressToBytes32(address(this)),\n            TypeCasts.addressToBytes32(_ism)\n        );\n        return Create2.computeAddress(_salt, _bytecodeHash, _router);\n    }\n\n    // ============ Private Functions ============\n\n    /**\n     * @notice Registers the address of remote InterchainAccountRouter\n     * and ISM contracts to use as a default when making interchain calls\n     * @param _destination The remote domain\n     * @param _router The address of the remote InterchainAccountRouter\n     * @param _ism The address of the remote ISM\n     */\n    function _enrollRemoteRouterAndIsm(\n        uint32 _destination,\n        bytes32 _router,\n        bytes32 _ism\n    ) private {\n        require(_router != bytes32(0), \"invalid router address\");\n        require(\n            routers[_destination] == bytes32(0),\n            \"router and ISM defaults are immutable once set\"\n        );\n        _domains.push(_destination);\n        routers[_destination] = _router;\n        isms[_destination] = _ism;\n        emit RemoteRouterEnrolled(_destination, _router);\n        emit RemoteIsmEnrolled(_destination, _ism);\n    }\n\n    /**\n     * @notice Dispatches an InterchainAccountMessage to the remote router\n     * @param _destination The remote domain\n     * @param _router The address of the remote InterchainAccountRouter\n     * @param _ism The address of the remote ISM\n     * @param _body The InterchainAccountMessage body\n     */\n    function _dispatchMessage(\n        uint32 _destination,\n        bytes32 _router,\n        bytes32 _ism,\n        bytes memory _body\n    ) private returns (bytes32) {\n        require(_router != bytes32(0), \"no router specified for destination\");\n        emit RemoteCallDispatched(_destination, msg.sender, _router, _ism);\n        return mailbox.dispatch(_destination, _router, _body);\n    }\n\n    /**\n     * @notice Returns the salt used to deploy an interchain account\n     * @param _origin The remote origin domain of the interchain account\n     * @param _owner The remote owner of the interchain account\n     * @param _router The remote origin InterchainAccountRouter\n     * @param _ism The local address of the ISM\n     * @return The CREATE2 salt used for deploying the interchain account\n     */\n    function _getSalt(\n        uint32 _origin,\n        bytes32 _owner,\n        bytes32 _router,\n        bytes32 _ism\n    ) private pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_origin, _owner, _router, _ism));\n    }\n\n    /**\n     * @notice Returns the address of the interchain account on the local chain\n     * @param _salt The CREATE2 salt used for deploying the interchain account\n     * @return The address of the interchain account\n     */\n    function _getLocalInterchainAccount(bytes32 _salt)\n        private\n        view\n        returns (address payable)\n    {\n        return payable(Create2.computeAddress(_salt, bytecodeHash));\n    }\n}\n\n\n// File contracts/middleware/InterchainQueryRouter.sol\n\n\npragma solidity ^0.8.13;\n\n// ============ Internal Imports ============\n\n\n\n\n\n// ============ External Imports ============\n\n\n\n/**\n * @title Interchain Query Router that performs remote view calls on other chains and returns the result.\n * @dev Currently does not support Sovereign Consensus (user specified Interchain Security Modules).\n */\ncontract InterchainQueryRouter is Router, IInterchainQueryRouter {\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n\n    /**\n     * @notice Emitted when a query is dispatched to another chain.\n     * @param destination The domain of the chain to query.\n     * @param sender The address that dispatched the query.\n     */\n    event QueryDispatched(uint32 indexed destination, address indexed sender);\n    /**\n     * @notice Emitted when a query is executed on the and callback dispatched to the origin chain.\n     * @param originDomain The domain of the chain that dispatched the query and receives the callback.\n     * @param sender The address to receive the result.\n     */\n    event QueryExecuted(uint32 indexed originDomain, bytes32 indexed sender);\n    /**\n     * @notice Emitted when a query is resolved on the origin chain.\n     * @param destination The domain of the chain that was queried.\n     * @param sender The address that resolved the query.\n     */\n    event QueryResolved(uint32 indexed destination, address indexed sender);\n\n    /**\n     * @notice Initializes the Router contract with Hyperlane core contracts and the address of the interchain security module.\n     * @param _mailbox The address of the mailbox contract.\n     * @param _interchainGasPaymaster The address of the interchain gas paymaster contract.\n     * @param _interchainSecurityModule The address of the interchain security module contract.\n     * @param _owner The address with owner privileges.\n     */\n    function initialize(\n        address _mailbox,\n        address _interchainGasPaymaster,\n        address _interchainSecurityModule,\n        address _owner\n    ) external initializer {\n        __HyperlaneConnectionClient_initialize(\n            _mailbox,\n            _interchainGasPaymaster,\n            _interchainSecurityModule,\n            _owner\n        );\n    }\n\n    /**\n     * @notice Dispatches a sequence of static calls (query) to the destination domain and set of callbacks to resolve the results on the dispatcher.\n     * @param _destination The domain of the chain to query.\n     * @param _to The address of the contract to query\n     * @param _data The calldata encoding the query\n     * @param _callback The calldata of the callback that will be made on the sender.\n     * The return value of the query will be appended.\n     * @dev Callbacks must be returned to the `msg.sender` for security reasons. Require this contract is the `msg.sender` on callbacks.\n     */\n    function query(\n        uint32 _destination,\n        address _to,\n        bytes memory _data,\n        bytes memory _callback\n    ) public returns (bytes32 messageId) {\n        emit QueryDispatched(_destination, msg.sender);\n\n        messageId = _dispatch(\n            _destination,\n            InterchainQueryMessage.encode(\n                msg.sender.addressToBytes32(),\n                _to,\n                _data,\n                _callback\n            )\n        );\n    }\n\n    /**\n     * @notice Dispatches a sequence of static calls (query) to the destination domain and set of callbacks to resolve the results on the dispatcher.\n     * @param _destination The domain of the chain to query.\n     * @param calls The sequence of static calls to dispatch and callbacks on the sender to resolve the results.\n     * @dev Recommend using CallLib.build to format the interchain calls.\n     * @dev Callbacks must be returned to the `msg.sender` for security reasons. Require this contract is the `msg.sender` on callbacks.\n     */\n    function query(\n        uint32 _destination,\n        CallLib.StaticCallWithCallback[] calldata calls\n    ) public returns (bytes32 messageId) {\n        emit QueryDispatched(_destination, msg.sender);\n        messageId = _dispatch(\n            _destination,\n            InterchainQueryMessage.encode(msg.sender.addressToBytes32(), calls)\n        );\n    }\n\n    /**\n     * @notice Handles a message from remote enrolled Interchain Query Router.\n     * @param _origin The domain of the chain that sent the message.\n     * @param _message The ABI-encoded interchain query.\n     */\n    function _handle(\n        uint32 _origin,\n        bytes32, // router sender\n        bytes calldata _message\n    ) internal override {\n        InterchainQueryMessage.MessageType messageType = InterchainQueryMessage\n            .messageType(_message);\n        bytes32 sender = InterchainQueryMessage.sender(_message);\n        if (messageType == InterchainQueryMessage.MessageType.QUERY) {\n            CallLib.StaticCallWithCallback[]\n                memory callsWithCallback = InterchainQueryMessage\n                    .callsWithCallbacks(_message);\n            bytes[] memory callbacks = CallLib.multistaticcall(\n                callsWithCallback\n            );\n            emit QueryExecuted(_origin, sender);\n            _dispatch(\n                _origin,\n                InterchainQueryMessage.encode(sender, callbacks)\n            );\n        } else if (messageType == InterchainQueryMessage.MessageType.RESPONSE) {\n            address senderAddress = sender.bytes32ToAddress();\n            bytes[] memory rawCalls = InterchainQueryMessage.rawCalls(_message);\n            CallLib.multicallto(senderAddress, rawCalls);\n            emit QueryResolved(_origin, senderAddress);\n        } else {\n            assert(false);\n        }\n    }\n}\n\n\n// File contracts/middleware/liquidity-layer/interfaces/circle/ITokenMessenger.sol\n\n\npragma solidity ^0.8.13;\n\ninterface ITokenMessenger {\n    event MessageSent(bytes message);\n\n    /**\n     * @notice Deposits and burns tokens from sender to be minted on destination domain.\n     * Emits a `DepositForBurn` event.\n     * @dev reverts if:\n     * - given burnToken is not supported\n     * - given destinationDomain has no TokenMessenger registered\n     * - transferFrom() reverts. For example, if sender's burnToken balance or approved allowance\n     * to this contract is less than `amount`.\n     * - burn() reverts. For example, if `amount` is 0.\n     * - MessageTransmitter returns false or reverts.\n     * @param _amount amount of tokens to burn\n     * @param _destinationDomain destination domain (ETH = 0, AVAX = 1)\n     * @param _mintRecipient address of mint recipient on destination domain\n     * @param _burnToken address of contract to burn deposited tokens, on local domain\n     * @return _nonce unique nonce reserved by message\n     */\n    function depositForBurn(\n        uint256 _amount,\n        uint32 _destinationDomain,\n        bytes32 _mintRecipient,\n        address _burnToken\n    ) external returns (uint64 _nonce);\n\n    /**\n     * @notice Deposits and burns tokens from sender to be minted on destination domain. The mint\n     * on the destination domain must be called by `_destinationCaller`.\n     * WARNING: if the `_destinationCaller` does not represent a valid address as bytes32, then it will not be possible\n     * to broadcast the message on the destination domain. This is an advanced feature, and the standard\n     * depositForBurn() should be preferred for use cases where a specific destination caller is not required.\n     * Emits a `DepositForBurn` event.\n     * @dev reverts if:\n     * - given destinationCaller is zero address\n     * - given burnToken is not supported\n     * - given destinationDomain has no TokenMessenger registered\n     * - transferFrom() reverts. For example, if sender's burnToken balance or approved allowance\n     * to this contract is less than `amount`.\n     * - burn() reverts. For example, if `amount` is 0.\n     * - MessageTransmitter returns false or reverts.\n     * @param _amount amount of tokens to burn\n     * @param _destinationDomain destination domain\n     * @param _mintRecipient address of mint recipient on destination domain\n     * @param _burnToken address of contract to burn deposited tokens, on local domain\n     * @param _destinationCaller caller on the destination domain, as bytes32\n     * @return _nonce unique nonce reserved by message\n     */\n    function depositForBurnWithCaller(\n        uint256 _amount,\n        uint32 _destinationDomain,\n        bytes32 _mintRecipient,\n        address _burnToken,\n        bytes32 _destinationCaller\n    ) external returns (uint64 _nonce);\n}\n\n\n// File contracts/middleware/liquidity-layer/interfaces/circle/ICircleMessageTransmitter.sol\n\n\npragma solidity ^0.8.13;\n\ninterface ICircleMessageTransmitter {\n    /**\n     * @notice Receive a message. Messages with a given nonce\n     * can only be broadcast once for a (sourceDomain, destinationDomain)\n     * pair. The message body of a valid message is passed to the\n     * specified recipient for further processing.\n     *\n     * @dev Attestation format:\n     * A valid attestation is the concatenated 65-byte signature(s) of exactly\n     * `thresholdSignature` signatures, in increasing order of attester address.\n     * ***If the attester addresses recovered from signatures are not in\n     * increasing order, signature verification will fail.***\n     * If incorrect number of signatures or duplicate signatures are supplied,\n     * signature verification will fail.\n     *\n     * Message format:\n     * Field Bytes Type Index\n     * version 4 uint32 0\n     * sourceDomain 4 uint32 4\n     * destinationDomain 4 uint32 8\n     * nonce 8 uint64 12\n     * sender 32 bytes32 20\n     * recipient 32 bytes32 52\n     * messageBody dynamic bytes 84\n     * @param _message Message bytes\n     * @param _attestation Concatenated 65-byte signature(s) of `_message`, in increasing order\n     * of the attester address recovered from signatures.\n     * @return success bool, true if successful\n     */\n    function receiveMessage(bytes memory _message, bytes calldata _attestation)\n        external\n        returns (bool success);\n\n    function usedNonces(bytes32 _nonceId) external view returns (bool);\n}\n\n\n// File contracts/middleware/liquidity-layer/interfaces/ILiquidityLayerAdapter.sol\n\n\npragma solidity ^0.8.13;\n\ninterface ILiquidityLayerAdapter {\n    function sendTokens(\n        uint32 _destinationDomain,\n        bytes32 _recipientAddress,\n        address _token,\n        uint256 _amount\n    ) external returns (bytes memory _adapterData);\n\n    function receiveTokens(\n        uint32 _originDomain, // Hyperlane domain\n        address _recipientAddress,\n        uint256 _amount,\n        bytes calldata _adapterData // The adapter data from the message\n    ) external returns (address, uint256);\n}\n\n\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.8.0\n\n\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n\n\n// File @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol@v4.8.0\n\n\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n\n\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.8.0\n\n\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n\n// File contracts/middleware/liquidity-layer/adapters/CircleBridgeAdapter.sol\n\n\npragma solidity ^0.8.13;\n\n\n\n\ncontract CircleBridgeAdapter is ILiquidityLayerAdapter, Router {\n    using SafeERC20 for IERC20;\n\n    /// @notice The TokenMessenger contract.\n    ITokenMessenger public tokenMessenger;\n\n    /// @notice The Circle MessageTransmitter contract.\n    ICircleMessageTransmitter public circleMessageTransmitter;\n\n    /// @notice The LiquidityLayerRouter contract.\n    address public liquidityLayerRouter;\n\n    /// @notice Hyperlane domain => Circle domain.\n    /// ATM, known Circle domains are Ethereum = 0 and Avalanche = 1.\n    /// Note this could result in ambiguity between the Circle domain being\n    /// Ethereum or unknown.\n    mapping(uint32 => uint32) public hyperlaneDomainToCircleDomain;\n\n    /// @notice Token symbol => address of token on local chain.\n    mapping(string => IERC20) public tokenSymbolToAddress;\n\n    /// @notice Local chain token address => token symbol.\n    mapping(address => string) public tokenAddressToSymbol;\n\n    /**\n     * @notice Emits the nonce of the Circle message when a token is bridged.\n     * @param nonce The nonce of the Circle message.\n     */\n    event BridgedToken(uint64 nonce);\n\n    /**\n     * @notice Emitted when the Hyperlane domain to Circle domain mapping is updated.\n     * @param hyperlaneDomain The Hyperlane domain.\n     * @param circleDomain The Circle domain.\n     */\n    event DomainAdded(uint32 indexed hyperlaneDomain, uint32 circleDomain);\n\n    /**\n     * @notice Emitted when a local token and its token symbol have been added.\n     */\n    event TokenAdded(address indexed token, string indexed symbol);\n\n    /**\n     * @notice Emitted when a local token and its token symbol have been removed.\n     */\n    event TokenRemoved(address indexed token, string indexed symbol);\n\n    modifier onlyLiquidityLayerRouter() {\n        require(msg.sender == liquidityLayerRouter, \"!liquidityLayerRouter\");\n        _;\n    }\n\n    /**\n     * @param _owner The new owner.\n     * @param _tokenMessenger The TokenMessenger contract.\n     * @param _circleMessageTransmitter The Circle MessageTransmitter contract.\n     * @param _liquidityLayerRouter The LiquidityLayerRouter contract.\n     */\n    function initialize(\n        address _owner,\n        address _tokenMessenger,\n        address _circleMessageTransmitter,\n        address _liquidityLayerRouter\n    ) external initializer {\n        __Ownable_init();\n        _transferOwnership(_owner);\n\n        tokenMessenger = ITokenMessenger(_tokenMessenger);\n        circleMessageTransmitter = ICircleMessageTransmitter(\n            _circleMessageTransmitter\n        );\n        liquidityLayerRouter = _liquidityLayerRouter;\n    }\n\n    function sendTokens(\n        uint32 _destinationDomain,\n        bytes32, // _recipientAddress, unused\n        address _token,\n        uint256 _amount\n    ) external onlyLiquidityLayerRouter returns (bytes memory) {\n        string memory _tokenSymbol = tokenAddressToSymbol[_token];\n        require(\n            bytes(_tokenSymbol).length > 0,\n            \"CircleBridgeAdapter: Unknown token\"\n        );\n\n        uint32 _circleDomain = hyperlaneDomainToCircleDomain[\n            _destinationDomain\n        ];\n        bytes32 _remoteRouter = _mustHaveRemoteRouter(_destinationDomain);\n\n        // Approve the token to Circle. We assume that the LiquidityLayerRouter\n        // has already transferred the token to this contract.\n        require(\n            IERC20(_token).approve(address(tokenMessenger), _amount),\n            \"!approval\"\n        );\n\n        uint64 _nonce = tokenMessenger.depositForBurn(\n            _amount,\n            _circleDomain,\n            _remoteRouter, // Mint to the remote router\n            _token\n        );\n\n        emit BridgedToken(_nonce);\n        return abi.encode(_nonce, _tokenSymbol);\n    }\n\n    // Returns the token and amount sent\n    function receiveTokens(\n        uint32 _originDomain, // Hyperlane domain\n        address _recipient,\n        uint256 _amount,\n        bytes calldata _adapterData // The adapter data from the message\n    ) external onlyLiquidityLayerRouter returns (address, uint256) {\n        _mustHaveRemoteRouter(_originDomain);\n        // The origin Circle domain\n        uint32 _originCircleDomain = hyperlaneDomainToCircleDomain[\n            _originDomain\n        ];\n        // Get the token symbol and nonce of the transfer from the _adapterData\n        (uint64 _nonce, string memory _tokenSymbol) = abi.decode(\n            _adapterData,\n            (uint64, string)\n        );\n\n        // Require the circle message to have been processed\n        bytes32 _nonceId = _circleNonceId(_originCircleDomain, _nonce);\n        require(\n            circleMessageTransmitter.usedNonces(_nonceId),\n            \"Circle message not processed yet\"\n        );\n\n        IERC20 _token = tokenSymbolToAddress[_tokenSymbol];\n        require(\n            address(_token) != address(0),\n            \"CircleBridgeAdapter: Unknown token\"\n        );\n\n        // Transfer the token out to the recipient\n        // Circle doesn't charge any fee, so we can safely transfer out the\n        // exact amount that was bridged over.\n        _token.safeTransfer(_recipient, _amount);\n\n        return (address(_token), _amount);\n    }\n\n    // This contract is only a Router to be aware of remote router addresses,\n    // and doesn't actually send/handle Hyperlane messages directly\n    function _handle(\n        uint32, // origin\n        bytes32, // sender\n        bytes calldata // message\n    ) internal pure override {\n        revert(\"No messages expected\");\n    }\n\n    function addDomain(uint32 _hyperlaneDomain, uint32 _circleDomain)\n        external\n        onlyOwner\n    {\n        hyperlaneDomainToCircleDomain[_hyperlaneDomain] = _circleDomain;\n\n        emit DomainAdded(_hyperlaneDomain, _circleDomain);\n    }\n\n    function addToken(address _token, string calldata _tokenSymbol)\n        external\n        onlyOwner\n    {\n        require(\n            _token != address(0) && bytes(_tokenSymbol).length > 0,\n            \"Cannot add default values\"\n        );\n\n        // Require the token and token symbol to be unset.\n        address _existingToken = address(tokenSymbolToAddress[_tokenSymbol]);\n        require(_existingToken == address(0), \"token symbol already has token\");\n\n        string memory _existingSymbol = tokenAddressToSymbol[_token];\n        require(\n            bytes(_existingSymbol).length == 0,\n            \"token already has token symbol\"\n        );\n\n        tokenAddressToSymbol[_token] = _tokenSymbol;\n        tokenSymbolToAddress[_tokenSymbol] = IERC20(_token);\n\n        emit TokenAdded(_token, _tokenSymbol);\n    }\n\n    function removeToken(address _token, string calldata _tokenSymbol)\n        external\n        onlyOwner\n    {\n        // Require the provided token and token symbols match what's in storage.\n        address _existingToken = address(tokenSymbolToAddress[_tokenSymbol]);\n        require(_existingToken == _token, \"Token mismatch\");\n\n        string memory _existingSymbol = tokenAddressToSymbol[_token];\n        require(\n            keccak256(bytes(_existingSymbol)) == keccak256(bytes(_tokenSymbol)),\n            \"Token symbol mismatch\"\n        );\n\n        // Delete them from storage.\n        delete tokenSymbolToAddress[_tokenSymbol];\n        delete tokenAddressToSymbol[_token];\n\n        emit TokenRemoved(_token, _tokenSymbol);\n    }\n\n    /**\n     * @notice Gets the Circle nonce ID by hashing _originCircleDomain and _nonce.\n     * @param _originCircleDomain Domain of chain where the transfer originated\n     * @param _nonce The unique identifier for the message from source to\n              destination\n     * @return hash of source and nonce\n     */\n    function _circleNonceId(uint32 _originCircleDomain, uint64 _nonce)\n        internal\n        pure\n        returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(_originCircleDomain, _nonce));\n    }\n}\n\n\n// File contracts/middleware/liquidity-layer/interfaces/portal/IPortalTokenBridge.sol\n\n\npragma solidity ^0.8.13;\n\n// Portal's interface from their docs\ninterface IPortalTokenBridge {\n    struct Transfer {\n        uint8 payloadID;\n        uint256 amount;\n        bytes32 tokenAddress;\n        uint16 tokenChain;\n        bytes32 to;\n        uint16 toChain;\n        uint256 fee;\n    }\n\n    struct TransferWithPayload {\n        uint8 payloadID;\n        uint256 amount;\n        bytes32 tokenAddress;\n        uint16 tokenChain;\n        bytes32 to;\n        uint16 toChain;\n        bytes32 fromAddress;\n        bytes payload;\n    }\n\n    struct AssetMeta {\n        uint8 payloadID;\n        bytes32 tokenAddress;\n        uint16 tokenChain;\n        uint8 decimals;\n        bytes32 symbol;\n        bytes32 name;\n    }\n\n    struct RegisterChain {\n        bytes32 module;\n        uint8 action;\n        uint16 chainId;\n        uint16 emitterChainID;\n        bytes32 emitterAddress;\n    }\n\n    struct UpgradeContract {\n        bytes32 module;\n        uint8 action;\n        uint16 chainId;\n        bytes32 newContract;\n    }\n\n    struct RecoverChainId {\n        bytes32 module;\n        uint8 action;\n        uint256 evmChainId;\n        uint16 newChainId;\n    }\n\n    event ContractUpgraded(\n        address indexed oldContract,\n        address indexed newContract\n    );\n\n    function transferTokensWithPayload(\n        address token,\n        uint256 amount,\n        uint16 recipientChain,\n        bytes32 recipient,\n        uint32 nonce,\n        bytes memory payload\n    ) external payable returns (uint64 sequence);\n\n    function completeTransferWithPayload(bytes memory encodedVm)\n        external\n        returns (bytes memory);\n\n    function parseTransferWithPayload(bytes memory encoded)\n        external\n        pure\n        returns (TransferWithPayload memory transfer);\n\n    function wrappedAsset(uint16 tokenChainId, bytes32 tokenAddress)\n        external\n        view\n        returns (address);\n\n    function isWrappedAsset(address token) external view returns (bool);\n}\n\n\n// File contracts/middleware/liquidity-layer/adapters/PortalAdapter.sol\n\n\npragma solidity ^0.8.13;\n\n\n\ncontract PortalAdapter is ILiquidityLayerAdapter, Router {\n    /// @notice The Portal TokenBridge contract.\n    IPortalTokenBridge public portalTokenBridge;\n\n    /// @notice The LiquidityLayerRouter contract.\n    address public liquidityLayerRouter;\n\n    /// @notice Hyperlane domain => Wormhole domain.\n    mapping(uint32 => uint16) public hyperlaneDomainToWormholeDomain;\n    /// @notice transferId => token address\n    mapping(bytes32 => address) public portalTransfersProcessed;\n\n    uint32 public localDomain;\n\n    // We could technically use Portal's sequence number here but it doesn't\n    // get passed through, so we would have to parse the VAA twice\n    // 224 bits should be large enough and allows us to pack into a single slot\n    // with a Hyperlane domain\n    uint224 public nonce = 0;\n\n    /**\n     * @notice Emits the nonce of the Portal message when a token is bridged.\n     * @param nonce The nonce of the Portal message.\n     * @param portalSequence The sequence of the Portal message.\n     * @param destination The hyperlane domain of the destination\n     */\n    event BridgedToken(\n        uint256 nonce,\n        uint64 portalSequence,\n        uint32 destination\n    );\n\n    /**\n     * @notice Emitted when the Hyperlane domain to Wormhole domain mapping is updated.\n     * @param hyperlaneDomain The Hyperlane domain.\n     * @param wormholeDomain The Wormhole domain.\n     */\n    event DomainAdded(uint32 indexed hyperlaneDomain, uint32 wormholeDomain);\n\n    modifier onlyLiquidityLayerRouter() {\n        require(msg.sender == liquidityLayerRouter, \"!liquidityLayerRouter\");\n        _;\n    }\n\n    /**\n     * @param _localDomain The local hyperlane domain\n     * @param _owner The new owner.\n     * @param _portalTokenBridge The Portal TokenBridge contract.\n     * @param _liquidityLayerRouter The LiquidityLayerRouter contract.\n     */\n    function initialize(\n        uint32 _localDomain,\n        address _owner,\n        address _portalTokenBridge,\n        address _liquidityLayerRouter\n    ) public initializer {\n        // Transfer ownership of the contract to deployer\n        _transferOwnership(_owner);\n\n        localDomain = _localDomain;\n        portalTokenBridge = IPortalTokenBridge(_portalTokenBridge);\n        liquidityLayerRouter = _liquidityLayerRouter;\n    }\n\n    /**\n     * Sends tokens as requested by the router\n     * @param _destinationDomain The hyperlane domain of the destination\n     * @param _token The token address\n     * @param _amount The amount of tokens to send\n     */\n    function sendTokens(\n        uint32 _destinationDomain,\n        bytes32, // _recipientAddress, unused\n        address _token,\n        uint256 _amount\n    ) external onlyLiquidityLayerRouter returns (bytes memory) {\n        nonce = nonce + 1;\n        uint16 _wormholeDomain = hyperlaneDomainToWormholeDomain[\n            _destinationDomain\n        ];\n\n        bytes32 _remoteRouter = _mustHaveRemoteRouter(_destinationDomain);\n\n        // Approve the token to Portal. We assume that the LiquidityLayerRouter\n        // has already transferred the token to this contract.\n        require(\n            IERC20(_token).approve(address(portalTokenBridge), _amount),\n            \"!approval\"\n        );\n\n        uint64 _portalSequence = portalTokenBridge.transferTokensWithPayload(\n            _token,\n            _amount,\n            _wormholeDomain,\n            _remoteRouter,\n            // Nonce for grouping Portal messages in the same tx, not relevant for us\n            // https://book.wormhole.com/technical/evm/coreLayer.html#emitting-a-vaa\n            0,\n            // Portal Payload used in completeTransfer\n            abi.encode(localDomain, nonce)\n        );\n\n        emit BridgedToken(nonce, _portalSequence, _destinationDomain);\n        return abi.encode(nonce);\n    }\n\n    /**\n     * Sends the tokens to the recipient as requested by the router\n     * @param _originDomain The hyperlane domain of the origin\n     * @param _recipient The address of the recipient\n     * @param _amount The amount of tokens to send\n     * @param _adapterData The adapter data from the origin chain, containing the nonce\n     */\n    function receiveTokens(\n        uint32 _originDomain, // Hyperlane domain\n        address _recipient,\n        uint256 _amount,\n        bytes calldata _adapterData // The adapter data from the message\n    ) external onlyLiquidityLayerRouter returns (address, uint256) {\n        // Get the nonce information from the adapterData\n        uint224 _nonce = abi.decode(_adapterData, (uint224));\n\n        address _tokenAddress = portalTransfersProcessed[\n            transferId(_originDomain, _nonce)\n        ];\n\n        require(\n            _tokenAddress != address(0x0),\n            \"Portal Transfer has not yet been completed\"\n        );\n\n        IERC20 _token = IERC20(_tokenAddress);\n\n        // Transfer the token out to the recipient\n        // TODO: use safeTransfer\n        // Portal doesn't charge any fee, so we can safely transfer out the\n        // exact amount that was bridged over.\n        require(_token.transfer(_recipient, _amount), \"!transfer out\");\n        return (_tokenAddress, _amount);\n    }\n\n    /**\n     * Completes the Portal transfer which sends the funds to this adapter.\n     * The router can call receiveTokens to move those funds to the ultimate recipient.\n     * @param encodedVm The VAA from the Wormhole Guardians\n     */\n    function completeTransfer(bytes memory encodedVm) public {\n        bytes memory _tokenBridgeTransferWithPayload = portalTokenBridge\n            .completeTransferWithPayload(encodedVm);\n        IPortalTokenBridge.TransferWithPayload\n            memory _transfer = portalTokenBridge.parseTransferWithPayload(\n                _tokenBridgeTransferWithPayload\n            );\n\n        (uint32 _originDomain, uint224 _nonce) = abi.decode(\n            _transfer.payload,\n            (uint32, uint224)\n        );\n\n        // Logic taken from here https://github.com/wormhole-foundation/wormhole/blob/dev.v2/ethereum/contracts/bridge/Bridge.sol#L503\n        address tokenAddress = _transfer.tokenChain ==\n            hyperlaneDomainToWormholeDomain[localDomain]\n            ? TypeCasts.bytes32ToAddress(_transfer.tokenAddress)\n            : portalTokenBridge.wrappedAsset(\n                _transfer.tokenChain,\n                _transfer.tokenAddress\n            );\n\n        portalTransfersProcessed[\n            transferId(_originDomain, _nonce)\n        ] = tokenAddress;\n    }\n\n    // This contract is only a Router to be aware of remote router addresses,\n    // and doesn't actually send/handle Hyperlane messages directly\n    function _handle(\n        uint32, // origin\n        bytes32, // sender\n        bytes calldata // message\n    ) internal pure override {\n        revert(\"No messages expected\");\n    }\n\n    function addDomain(uint32 _hyperlaneDomain, uint16 _wormholeDomain)\n        external\n        onlyOwner\n    {\n        hyperlaneDomainToWormholeDomain[_hyperlaneDomain] = _wormholeDomain;\n\n        emit DomainAdded(_hyperlaneDomain, _wormholeDomain);\n    }\n\n    /**\n     * The key that is used to track fulfilled Portal transfers\n     * @param _hyperlaneDomain The hyperlane of the origin\n     * @param _nonce The nonce of the adapter on the origin\n     */\n    function transferId(uint32 _hyperlaneDomain, uint224 _nonce)\n        public\n        pure\n        returns (bytes32)\n    {\n        return bytes32(abi.encodePacked(_hyperlaneDomain, _nonce));\n    }\n}\n\n\n// File contracts/interfaces/ILiquidityLayerRouter.sol\n\n\npragma solidity >=0.6.11;\n\ninterface ILiquidityLayerRouter {\n    function dispatchWithTokens(\n        uint32 _destinationDomain,\n        bytes32 _recipientAddress,\n        address _token,\n        uint256 _amount,\n        string calldata _bridge,\n        bytes calldata _messageBody\n    ) external returns (bytes32);\n}\n\n\n// File contracts/interfaces/ILiquidityLayerMessageRecipient.sol\n\n\npragma solidity ^0.8.13;\n\ninterface ILiquidityLayerMessageRecipient {\n    function handleWithTokens(\n        uint32 _origin,\n        bytes32 _sender,\n        bytes calldata _message,\n        address _token,\n        uint256 _amount\n    ) external;\n}\n\n\n// File contracts/middleware/liquidity-layer/LiquidityLayerRouter.sol\n\n\npragma solidity ^0.8.13;\n\n\n\n\n\ncontract LiquidityLayerRouter is Router, ILiquidityLayerRouter {\n    using SafeERC20 for IERC20;\n\n    // Token bridge => adapter address\n    mapping(string => address) public liquidityLayerAdapters;\n\n    event LiquidityLayerAdapterSet(string indexed bridge, address adapter);\n\n    /**\n     * @notice Initializes the Router contract with Hyperlane core contracts and the address of the interchain security module.\n     * @param _mailbox The address of the mailbox contract.\n     * @param _interchainGasPaymaster The address of the interchain gas paymaster contract.\n     * @param _interchainSecurityModule The address of the interchain security module contract.\n     * @param _owner The address with owner privileges.\n     */\n    function initialize(\n        address _mailbox,\n        address _interchainGasPaymaster,\n        address _interchainSecurityModule,\n        address _owner\n    ) external initializer {\n        __HyperlaneConnectionClient_initialize(\n            _mailbox,\n            _interchainGasPaymaster,\n            _interchainSecurityModule,\n            _owner\n        );\n    }\n\n    function dispatchWithTokens(\n        uint32 _destinationDomain,\n        bytes32 _recipientAddress,\n        address _token,\n        uint256 _amount,\n        string calldata _bridge,\n        bytes calldata _messageBody\n    ) external returns (bytes32) {\n        ILiquidityLayerAdapter _adapter = _getAdapter(_bridge);\n\n        // Transfer the tokens to the adapter\n        IERC20(_token).safeTransferFrom(msg.sender, address(_adapter), _amount);\n\n        // Reverts if the bridge was unsuccessful.\n        // Gets adapter-specific data that is encoded into the message\n        // ultimately sent via Hyperlane.\n        bytes memory _adapterData = _adapter.sendTokens(\n            _destinationDomain,\n            _recipientAddress,\n            _token,\n            _amount\n        );\n\n        // The user's message \"wrapped\" with metadata required by this middleware\n        bytes memory _messageWithMetadata = abi.encode(\n            TypeCasts.addressToBytes32(msg.sender),\n            _recipientAddress, // The \"user\" recipient\n            _amount, // The amount of the tokens sent over the bridge\n            _bridge, // The destination token bridge ID\n            _adapterData, // The adapter-specific data\n            _messageBody // The \"user\" message\n        );\n\n        // Dispatch the _messageWithMetadata to the destination's LiquidityLayerRouter.\n        return _dispatch(_destinationDomain, _messageWithMetadata);\n    }\n\n    // Handles a message from an enrolled remote LiquidityLayerRouter\n    function _handle(\n        uint32 _origin,\n        bytes32, // _sender, unused\n        bytes calldata _message\n    ) internal override {\n        // Decode the message with metadata, \"unwrapping\" the user's message body\n        (\n            bytes32 _originalSender,\n            bytes32 _userRecipientAddress,\n            uint256 _amount,\n            string memory _bridge,\n            bytes memory _adapterData,\n            bytes memory _userMessageBody\n        ) = abi.decode(\n                _message,\n                (bytes32, bytes32, uint256, string, bytes, bytes)\n            );\n\n        ILiquidityLayerMessageRecipient _userRecipient = ILiquidityLayerMessageRecipient(\n                TypeCasts.bytes32ToAddress(_userRecipientAddress)\n            );\n\n        // Reverts if the adapter hasn't received the bridged tokens yet\n        (address _token, uint256 _receivedAmount) = _getAdapter(_bridge)\n            .receiveTokens(\n                _origin,\n                address(_userRecipient),\n                _amount,\n                _adapterData\n            );\n\n        if (_userMessageBody.length > 0) {\n            _userRecipient.handleWithTokens(\n                _origin,\n                _originalSender,\n                _userMessageBody,\n                _token,\n                _receivedAmount\n            );\n        }\n    }\n\n    function setLiquidityLayerAdapter(string calldata _bridge, address _adapter)\n        external\n        onlyOwner\n    {\n        liquidityLayerAdapters[_bridge] = _adapter;\n        emit LiquidityLayerAdapterSet(_bridge, _adapter);\n    }\n\n    function _getAdapter(string memory _bridge)\n        internal\n        view\n        returns (ILiquidityLayerAdapter _adapter)\n    {\n        _adapter = ILiquidityLayerAdapter(liquidityLayerAdapters[_bridge]);\n        // Require the adapter to have been set\n        require(address(_adapter) != address(0), \"No adapter found for bridge\");\n    }\n}\n\n\n// File @openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol@v4.8.0\n\n\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n\n\n// File @openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol@v4.8.0\n\n\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\n\n// File @openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol@v4.8.0\n\n\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\n\n\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n\n\n// File contracts/mock/MockToken.sol\n\n\npragma solidity ^0.8.13;\n\ncontract MockToken is ERC20Upgradeable {\n    function mint(address account, uint256 amount) external {\n        _mint(account, amount);\n    }\n\n    function burn(uint256 _amount) external {\n        _burn(msg.sender, _amount);\n    }\n}\n\n\n// File contracts/mock/MockCircleMessageTransmitter.sol\n\n\npragma solidity ^0.8.13;\n\n\ncontract MockCircleMessageTransmitter is ICircleMessageTransmitter {\n    mapping(bytes32 => bool) processedNonces;\n    MockToken token;\n\n    constructor(MockToken _token) {\n        token = _token;\n    }\n\n    function receiveMessage(bytes memory, bytes calldata)\n        external\n        pure\n        returns (bool success)\n    {\n        success = true;\n    }\n\n    function hashSourceAndNonce(uint32 _source, uint64 _nonce)\n        public\n        pure\n        returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(_source, _nonce));\n    }\n\n    function process(\n        bytes32 _nonceId,\n        address _recipient,\n        uint256 _amount\n    ) public {\n        processedNonces[_nonceId] = true;\n        token.mint(_recipient, _amount);\n    }\n\n    function usedNonces(bytes32 _nonceId) external view returns (bool) {\n        return processedNonces[_nonceId];\n    }\n}\n\n\n// File contracts/mock/MockCircleTokenMessenger.sol\n\n\npragma solidity ^0.8.13;\n\n\ncontract MockCircleTokenMessenger is ITokenMessenger {\n    uint64 public nextNonce = 0;\n    MockToken token;\n\n    constructor(MockToken _token) {\n        token = _token;\n    }\n\n    function depositForBurn(\n        uint256 _amount,\n        uint32,\n        bytes32,\n        address _burnToken\n    ) external returns (uint64 _nonce) {\n        nextNonce = nextNonce + 1;\n        _nonce = nextNonce;\n        require(address(token) == _burnToken);\n        token.transferFrom(msg.sender, address(this), _amount);\n        token.burn(_amount);\n    }\n\n    function depositForBurnWithCaller(\n        uint256,\n        uint32,\n        bytes32,\n        address,\n        bytes32\n    ) external returns (uint64 _nonce) {\n        nextNonce = nextNonce + 1;\n        _nonce = nextNonce;\n    }\n}\n\n\n// File contracts/mock/MockMailbox.sol\n\n\npragma solidity ^0.8.0;\n\n\n\n\ncontract MockMailbox is Versioned {\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n    // Domain of chain on which the contract is deployed\n\n    // ============ Constants ============\n    uint32 public immutable localDomain;\n    uint256 public constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;\n\n    uint32 public outboundNonce = 0;\n    uint32 public inboundUnprocessedNonce = 0;\n    uint32 public inboundProcessedNonce = 0;\n    IInterchainSecurityModule public defaultIsm;\n    mapping(uint32 => MockMailbox) public remoteMailboxes;\n    mapping(uint256 => MockMessage) public inboundMessages;\n\n    struct MockMessage {\n        uint32 nonce;\n        uint32 origin;\n        address sender;\n        address recipient;\n        bytes body;\n    }\n\n    constructor(uint32 _domain) {\n        localDomain = _domain;\n    }\n\n    function setDefaultIsm(IInterchainSecurityModule _module) external {\n        defaultIsm = _module;\n    }\n\n    function addRemoteMailbox(uint32 _domain, MockMailbox _mailbox) external {\n        remoteMailboxes[_domain] = _mailbox;\n    }\n\n    function dispatch(\n        uint32 _destinationDomain,\n        bytes32 _recipientAddress,\n        bytes calldata _messageBody\n    ) external returns (bytes32) {\n        require(_messageBody.length <= MAX_MESSAGE_BODY_BYTES, \"msg too long\");\n        MockMailbox _destinationMailbox = remoteMailboxes[_destinationDomain];\n        require(\n            address(_destinationMailbox) != address(0),\n            \"Missing remote mailbox\"\n        );\n        _destinationMailbox.addInboundMessage(\n            outboundNonce,\n            localDomain,\n            msg.sender,\n            _recipientAddress.bytes32ToAddress(),\n            _messageBody\n        );\n        outboundNonce++;\n        return bytes32(0);\n    }\n\n    function addInboundMessage(\n        uint32 _nonce,\n        uint32 _origin,\n        address _sender,\n        address _recipient,\n        bytes calldata _body\n    ) external {\n        inboundMessages[inboundUnprocessedNonce] = MockMessage(\n            _nonce,\n            _origin,\n            _sender,\n            _recipient,\n            _body\n        );\n        inboundUnprocessedNonce++;\n    }\n\n    function processNextInboundMessage() public {\n        MockMessage memory _message = inboundMessages[inboundProcessedNonce];\n        address _recipient = _message.recipient;\n        IInterchainSecurityModule _ism = _recipientIsm(_recipient);\n        if (address(_ism) != address(0)) {\n            // Do not pass any metadata because we expect to\n            // be using TestIsms\n            require(_ism.verify(\"\", _encode(_message)), \"ISM verify failed\");\n        }\n\n        IMessageRecipient(_message.recipient).handle(\n            _message.origin,\n            _message.sender.addressToBytes32(),\n            _message.body\n        );\n        inboundProcessedNonce++;\n    }\n\n    function _encode(MockMessage memory _message)\n        private\n        view\n        returns (bytes memory)\n    {\n        return\n            abi.encodePacked(\n                VERSION,\n                _message.nonce,\n                _message.origin,\n                TypeCasts.addressToBytes32(_message.sender),\n                localDomain,\n                TypeCasts.addressToBytes32(_message.recipient),\n                _message.body\n            );\n    }\n\n    function _recipientIsm(address _recipient)\n        private\n        view\n        returns (IInterchainSecurityModule)\n    {\n        try\n            ISpecifiesInterchainSecurityModule(_recipient)\n                .interchainSecurityModule()\n        returns (IInterchainSecurityModule _val) {\n            if (address(_val) != address(0)) {\n                return _val;\n            }\n        } catch {}\n        return defaultIsm;\n    }\n}\n\n\n// File contracts/test/TestInterchainGasPaymaster.sol\n\n\npragma solidity >=0.8.0;\n\n// ============ Internal Imports ============\n\ncontract TestInterchainGasPaymaster is InterchainGasPaymaster {\n    uint256 public constant gasPrice = 10;\n\n    // Ensure the same constructor interface as the inherited InterchainGasPaymaster\n    constructor(address _beneficiary) {\n        initialize(msg.sender, _beneficiary);\n    }\n\n    function quoteGasPayment(uint32, uint256 gasAmount)\n        public\n        pure\n        override\n        returns (uint256)\n    {\n        return gasPrice * gasAmount;\n    }\n}\n\n\n// File contracts/test/TestIsm.sol\n\n\npragma solidity >=0.8.0;\n\ncontract TestIsm is IInterchainSecurityModule {\n    uint8 public constant moduleType = 0;\n    bool public accept;\n\n    constructor() {\n        accept = true;\n    }\n\n    function setAccept(bool _val) external {\n        accept = _val;\n    }\n\n    function verify(bytes calldata, bytes calldata)\n        external\n        view\n        returns (bool)\n    {\n        return accept;\n    }\n}\n\n\n// File contracts/mock/MockHyperlaneEnvironment.sol\n\n\npragma solidity ^0.8.13;\n\n\n\n\ncontract MockHyperlaneEnvironment {\n    uint32 originDomain;\n    uint32 destinationDomain;\n\n    mapping(uint32 => MockMailbox) public mailboxes;\n    mapping(uint32 => TestInterchainGasPaymaster) public igps;\n    mapping(uint32 => IInterchainSecurityModule) public isms;\n    mapping(uint32 => InterchainQueryRouter) public queryRouters;\n\n    constructor(uint32 _originDomain, uint32 _destinationDomain) {\n        originDomain = _originDomain;\n        destinationDomain = _destinationDomain;\n\n        MockMailbox originMailbox = new MockMailbox(_originDomain);\n        MockMailbox destinationMailbox = new MockMailbox(_destinationDomain);\n\n        originMailbox.addRemoteMailbox(_destinationDomain, destinationMailbox);\n        destinationMailbox.addRemoteMailbox(_originDomain, originMailbox);\n\n        igps[originDomain] = new TestInterchainGasPaymaster(address(this));\n        igps[destinationDomain] = new TestInterchainGasPaymaster(address(this));\n\n        isms[originDomain] = new TestIsm();\n        isms[destinationDomain] = new TestIsm();\n\n        originMailbox.setDefaultIsm(isms[originDomain]);\n        destinationMailbox.setDefaultIsm(isms[destinationDomain]);\n\n        mailboxes[_originDomain] = originMailbox;\n        mailboxes[_destinationDomain] = destinationMailbox;\n\n        InterchainQueryRouter originQueryRouter = new InterchainQueryRouter();\n        InterchainQueryRouter destinationQueryRouter = new InterchainQueryRouter();\n\n        address owner = address(this);\n        originQueryRouter.initialize(\n            address(originMailbox),\n            address(igps[originDomain]),\n            address(isms[originDomain]),\n            owner\n        );\n        destinationQueryRouter.initialize(\n            address(destinationMailbox),\n            address(igps[destinationDomain]),\n            address(isms[destinationDomain]),\n            owner\n        );\n\n        originQueryRouter.enrollRemoteRouter(\n            _destinationDomain,\n            TypeCasts.addressToBytes32(address(destinationQueryRouter))\n        );\n        destinationQueryRouter.enrollRemoteRouter(\n            _originDomain,\n            TypeCasts.addressToBytes32(address(originQueryRouter))\n        );\n\n        queryRouters[_originDomain] = originQueryRouter;\n        queryRouters[_destinationDomain] = destinationQueryRouter;\n    }\n\n    function processNextPendingMessage() public {\n        mailboxes[destinationDomain].processNextInboundMessage();\n    }\n\n    function processNextPendingMessageFromDestination() public {\n        mailboxes[originDomain].processNextInboundMessage();\n    }\n}\n\n\n// File contracts/mock/MockPortalBridge.sol\n\n\npragma solidity ^0.8.13;\n\n\n\ncontract MockPortalBridge is IPortalTokenBridge {\n    uint256 nextNonce = 0;\n    MockToken token;\n\n    constructor(MockToken _token) {\n        token = _token;\n    }\n\n    function transferTokensWithPayload(\n        address,\n        uint256 amount,\n        uint16,\n        bytes32,\n        uint32,\n        bytes memory\n    ) external payable returns (uint64 sequence) {\n        nextNonce = nextNonce + 1;\n        token.transferFrom(msg.sender, address(this), amount);\n        token.burn(amount);\n        return uint64(nextNonce);\n    }\n\n    function wrappedAsset(uint16, bytes32) external view returns (address) {\n        return address(token);\n    }\n\n    function isWrappedAsset(address) external pure returns (bool) {\n        return true;\n    }\n\n    function completeTransferWithPayload(bytes memory encodedVm)\n        external\n        returns (bytes memory)\n    {\n        (uint32 _originDomain, uint224 _nonce, uint256 _amount) = abi.decode(\n            encodedVm,\n            (uint32, uint224, uint256)\n        );\n\n        token.mint(msg.sender, _amount);\n        // Format it so that parseTransferWithPayload returns the desired payload\n        return\n            abi.encode(\n                TypeCasts.addressToBytes32(address(token)),\n                adapterData(_originDomain, _nonce, address(token))\n            );\n    }\n\n    function parseTransferWithPayload(bytes memory encoded)\n        external\n        pure\n        returns (TransferWithPayload memory transfer)\n    {\n        (bytes32 tokenAddress, bytes memory payload) = abi.decode(\n            encoded,\n            (bytes32, bytes)\n        );\n        transfer.payload = payload;\n        transfer.tokenAddress = tokenAddress;\n    }\n\n    function adapterData(\n        uint32 _originDomain,\n        uint224 _nonce,\n        address _token\n    ) public pure returns (bytes memory) {\n        return\n            abi.encode(\n                _originDomain,\n                _nonce,\n                TypeCasts.addressToBytes32(_token)\n            );\n    }\n\n    function mockPortalVaa(\n        uint32 _originDomain,\n        uint224 _nonce,\n        uint256 _amount\n    ) public pure returns (bytes memory) {\n        return abi.encode(_originDomain, _nonce, _amount);\n    }\n}\n\n\n// File contracts/test/bad-recipient/BadRecipient1.sol\n\n\npragma solidity >=0.8.0;\n\ncontract BadRecipient1 is IMessageRecipient {\n    function handle(\n        uint32,\n        bytes32,\n        bytes calldata\n    ) external pure override {\n        assembly {\n            revert(0, 0)\n        }\n    }\n}\n\n\n// File contracts/test/bad-recipient/BadRecipient3.sol\n\n\npragma solidity >=0.8.0;\n\ncontract BadRecipient3 is IMessageRecipient {\n    function handle(\n        uint32,\n        bytes32,\n        bytes calldata\n    ) external pure override {\n        assembly {\n            mstore(0, 0xabcdef)\n            revert(0, 32)\n        }\n    }\n}\n\n\n// File contracts/test/bad-recipient/BadRecipient5.sol\n\n\npragma solidity >=0.8.0;\n\ncontract BadRecipient5 is IMessageRecipient {\n    function handle(\n        uint32,\n        bytes32,\n        bytes calldata\n    ) external pure override {\n        require(false, \"no can do\");\n    }\n}\n\n\n// File contracts/test/bad-recipient/BadRecipient6.sol\n\n\npragma solidity >=0.8.0;\n\ncontract BadRecipient6 is IMessageRecipient {\n    function handle(\n        uint32,\n        bytes32,\n        bytes calldata\n    ) external pure override {\n        require(false); // solhint-disable-line reason-string\n    }\n}\n\n\n// File contracts/test/TestRecipient.sol\n\n\npragma solidity >=0.8.0;\n\n\ncontract TestRecipient is\n    Ownable,\n    IMessageRecipient,\n    ISpecifiesInterchainSecurityModule\n{\n    IInterchainSecurityModule public interchainSecurityModule;\n    bytes32 public lastSender;\n    bytes public lastData;\n\n    address public lastCaller;\n    string public lastCallMessage;\n\n    event ReceivedMessage(\n        uint32 indexed origin,\n        bytes32 indexed sender,\n        string message\n    );\n\n    event ReceivedCall(address indexed caller, uint256 amount, string message);\n\n    function handle(\n        uint32 _origin,\n        bytes32 _sender,\n        bytes calldata _data\n    ) external virtual override {\n        emit ReceivedMessage(_origin, _sender, string(_data));\n        lastSender = _sender;\n        lastData = _data;\n    }\n\n    function fooBar(uint256 amount, string calldata message) external {\n        emit ReceivedCall(msg.sender, amount, message);\n        lastCaller = msg.sender;\n        lastCallMessage = message;\n    }\n\n    function setInterchainSecurityModule(address _ism) external onlyOwner {\n        interchainSecurityModule = IInterchainSecurityModule(_ism);\n    }\n}\n\n\n// File contracts/test/LightTestRecipient.sol\n\n\npragma solidity >=0.6.11;\n\ncontract LightTestRecipient is TestRecipient {\n    // solhint-disable-next-line no-empty-blocks\n    function handle(\n        uint32 _origin,\n        bytes32 _sender,\n        bytes calldata _data\n    ) external override {\n        // do nothing\n    }\n}\n\n\n// File contracts/test/TestRouter.sol\n\n\npragma solidity >=0.6.11;\n\ncontract TestRouter is Router {\n    event InitializeOverload();\n\n    function initialize(address _mailbox, address _interchainGasPaymaster)\n        external\n        initializer\n    {\n        __HyperlaneConnectionClient_initialize(\n            _mailbox,\n            _interchainGasPaymaster\n        );\n        emit InitializeOverload();\n    }\n\n    function _handle(\n        uint32,\n        bytes32,\n        bytes calldata\n    ) internal pure override {}\n\n    function isRemoteRouter(uint32 _domain, bytes32 _potentialRemoteRouter)\n        external\n        view\n        returns (bool)\n    {\n        return _isRemoteRouter(_domain, _potentialRemoteRouter);\n    }\n\n    function mustHaveRemoteRouter(uint32 _domain)\n        external\n        view\n        returns (bytes32)\n    {\n        return _mustHaveRemoteRouter(_domain);\n    }\n\n    function dispatch(uint32 _destination, bytes memory _msg) external {\n        _dispatch(_destination, _msg);\n    }\n\n    function dispatchWithGas(\n        uint32 _destinationDomain,\n        bytes memory _messageBody,\n        uint256 _gasAmount,\n        uint256 _gasPayment,\n        address _gasPaymentRefundAddress\n    ) external payable {\n        _dispatchWithGas(\n            _destinationDomain,\n            _messageBody,\n            _gasAmount,\n            _gasPayment,\n            _gasPaymentRefundAddress\n        );\n    }\n}\n\n\n// File contracts/test/TestGasRouter.sol\n\n\npragma solidity >=0.6.11;\n\n\ncontract TestGasRouter is TestRouter, GasRouter {\n    function dispatchWithGas(\n        uint32 _destinationDomain,\n        bytes memory _messageBody,\n        uint256 _gasPayment,\n        address _gasPaymentRefundAddress\n    ) external payable {\n        _dispatchWithGas(\n            _destinationDomain,\n            _messageBody,\n            _gasPayment,\n            _gasPaymentRefundAddress\n        );\n    }\n\n    function dispatchWithGas(\n        uint32 _destinationDomain,\n        bytes memory _messageBody\n    ) external payable {\n        _dispatchWithGas(_destinationDomain, _messageBody);\n    }\n}\n\n\n// File contracts/test/TestHyperlaneConnectionClient.sol\n\n\npragma solidity >=0.6.11;\n\n\ncontract TestHyperlaneConnectionClient is HyperlaneConnectionClient {\n    constructor() {\n        _transferOwnership(msg.sender);\n    }\n\n    function initialize(address _mailbox) external initializer {\n        __HyperlaneConnectionClient_initialize(_mailbox);\n    }\n\n    function localDomain() external view returns (uint32) {\n        return mailbox.localDomain();\n    }\n}\n\n\n// File contracts/test/TestLegacyMultisigIsm.sol\n\n\npragma solidity >=0.8.0;\n\n// ============ Internal Imports ============\n\n\ncontract TestLegacyMultisigIsm is LegacyMultisigIsm {\n    function getDomainHash(uint32 _origin, bytes32 _originMailbox)\n        external\n        pure\n        returns (bytes32)\n    {\n        return CheckpointLib.domainHash(_origin, _originMailbox);\n    }\n}\n\n\n// File contracts/test/TestLiquidityLayerMessageRecipient.sol\n\n\npragma solidity ^0.8.13;\n\ncontract TestLiquidityLayerMessageRecipient is ILiquidityLayerMessageRecipient {\n    event HandledWithTokens(\n        uint32 origin,\n        bytes32 sender,\n        bytes message,\n        address token,\n        uint256 amount\n    );\n\n    function handleWithTokens(\n        uint32 _origin,\n        bytes32 _sender,\n        bytes calldata _message,\n        address _token,\n        uint256 _amount\n    ) external {\n        emit HandledWithTokens(_origin, _sender, _message, _token, _amount);\n    }\n}\n\n\n// File contracts/test/TestMailbox.sol\n\n\npragma solidity >=0.8.0;\n\n\n\n\ncontract TestMailbox is Mailbox {\n    using TypeCasts for bytes32;\n\n    constructor(uint32 _localDomain) Mailbox(_localDomain) {} // solhint-disable-line no-empty-blocks\n\n    function proof() external view returns (bytes32[32] memory) {\n        bytes32[32] memory _zeroes = MerkleLib.zeroHashes();\n        uint256 _index = tree.count - 1;\n        bytes32[32] memory _proof;\n\n        for (uint256 i = 0; i < 32; i++) {\n            uint256 _ithBit = (_index >> i) & 0x01;\n            if (_ithBit == 1) {\n                _proof[i] = tree.branch[i];\n            } else {\n                _proof[i] = _zeroes[i];\n            }\n        }\n        return _proof;\n    }\n\n    function testHandle(\n        uint32 _origin,\n        bytes32 _sender,\n        bytes32 _recipient,\n        bytes calldata _body\n    ) external {\n        IMessageRecipient(_recipient.bytes32ToAddress()).handle(\n            _origin,\n            _sender,\n            _body\n        );\n    }\n}\n\n\n// File contracts/test/TestMerkle.sol\n\n\npragma solidity >=0.8.0;\n\ncontract TestMerkle {\n    using MerkleLib for MerkleLib.Tree;\n\n    MerkleLib.Tree public tree;\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor() {}\n\n    function insert(bytes32 _node) external {\n        tree.insert(_node);\n    }\n\n    function branchRoot(\n        bytes32 _leaf,\n        bytes32[32] calldata _proof,\n        uint256 _index\n    ) external pure returns (bytes32 _node) {\n        return MerkleLib.branchRoot(_leaf, _proof, _index);\n    }\n\n    /**\n     * @notice Returns the number of inserted leaves in the tree\n     */\n    function count() public view returns (uint256) {\n        return tree.count;\n    }\n\n    function root() public view returns (bytes32) {\n        return tree.root();\n    }\n}\n\n\n// File contracts/test/TestMessage.sol\n\n\npragma solidity >=0.6.11;\n\ncontract TestMessage {\n    using Message for bytes;\n\n    function version(bytes calldata _message)\n        external\n        pure\n        returns (uint32 _version)\n    {\n        return _message.version();\n    }\n\n    function nonce(bytes calldata _message)\n        external\n        pure\n        returns (uint256 _nonce)\n    {\n        return _message.nonce();\n    }\n\n    function body(bytes calldata _message)\n        external\n        pure\n        returns (bytes calldata _body)\n    {\n        return _message.body();\n    }\n\n    function origin(bytes calldata _message)\n        external\n        pure\n        returns (uint32 _origin)\n    {\n        return _message.origin();\n    }\n\n    function sender(bytes calldata _message)\n        external\n        pure\n        returns (bytes32 _sender)\n    {\n        return _message.sender();\n    }\n\n    function destination(bytes calldata _message)\n        external\n        pure\n        returns (uint32 _destination)\n    {\n        return _message.destination();\n    }\n\n    function recipient(bytes calldata _message)\n        external\n        pure\n        returns (bytes32 _recipient)\n    {\n        return _message.recipient();\n    }\n\n    function recipientAddress(bytes calldata _message)\n        external\n        pure\n        returns (address _recipient)\n    {\n        return _message.recipientAddress();\n    }\n\n    function id(bytes calldata _message) external pure returns (bytes32) {\n        return _message.id();\n    }\n}\n\n\n// File contracts/test/TestQuery.sol\n\n\npragma solidity ^0.8.13;\n\n\n\ncontract TestQuery {\n    InterchainQueryRouter public router;\n\n    event Owner(uint256, address);\n\n    constructor(address _router) {\n        router = InterchainQueryRouter(_router);\n    }\n\n    /**\n     * @dev Fetches owner of InterchainQueryRouter on provided domain and passes along with provided secret to `this.receiveRouterOwner`\n     */\n    function queryRouterOwner(uint32 domain, uint256 secret) external {\n        address target = TypeCasts.bytes32ToAddress(router.routers(domain));\n        CallLib.StaticCallWithCallback[]\n            memory calls = new CallLib.StaticCallWithCallback[](1);\n        calls[0] = CallLib.build(\n            target,\n            abi.encodeWithSelector(Ownable.owner.selector),\n            abi.encodeWithSelector(this.receiveRouterOwner.selector, secret)\n        );\n        router.query(domain, calls);\n    }\n\n    /**\n     * @dev `msg.sender` must be restricted to `this.router` to prevent any local account from spoofing query data.\n     */\n    function receiveRouterOwner(uint256 secret, address owner) external {\n        require(msg.sender == address(router), \"TestQuery: not from router\");\n        emit Owner(secret, owner);\n    }\n}\n\n\n// File contracts/test/TestQuerySender.sol\n\n\npragma solidity >=0.8.0;\n\n\n\ncontract TestQuerySender {\n    IInterchainQueryRouter queryRouter;\n    IInterchainGasPaymaster interchainGasPaymaster;\n\n    address public lastAddressResult;\n    uint256 public lastUint256Result;\n    bytes32 public lastBytes32Result;\n\n    event ReceivedAddressResult(address result);\n    event ReceivedUint256Result(uint256 result);\n    event ReceivedBytes32Result(bytes32 result);\n\n    function initialize(\n        address _queryRouterAddress,\n        address _interchainGasPaymaster\n    ) external {\n        queryRouter = IInterchainQueryRouter(_queryRouterAddress);\n        interchainGasPaymaster = IInterchainGasPaymaster(\n            _interchainGasPaymaster\n        );\n    }\n\n    function queryAddress(\n        uint32 _destinationDomain,\n        address _target,\n        bytes calldata _targetData,\n        uint256 _gasAmount\n    ) external payable {\n        queryAndPayFor(\n            _destinationDomain,\n            _target,\n            _targetData,\n            this.handleQueryAddressResult.selector,\n            _gasAmount\n        );\n    }\n\n    function handleQueryAddressResult(address _result) external {\n        emit ReceivedAddressResult(_result);\n        lastAddressResult = _result;\n    }\n\n    function queryUint256(\n        uint32 _destinationDomain,\n        address _target,\n        bytes calldata _targetData,\n        uint256 _gasAmount\n    ) external payable {\n        queryAndPayFor(\n            _destinationDomain,\n            _target,\n            _targetData,\n            this.handleQueryUint256Result.selector,\n            _gasAmount\n        );\n    }\n\n    function handleQueryUint256Result(uint256 _result) external {\n        emit ReceivedUint256Result(_result);\n        lastUint256Result = _result;\n    }\n\n    function queryBytes32(\n        uint32 _destinationDomain,\n        address _target,\n        bytes calldata _targetData,\n        uint256 _gasAmount\n    ) external payable {\n        queryAndPayFor(\n            _destinationDomain,\n            _target,\n            _targetData,\n            this.handleQueryBytes32Result.selector,\n            _gasAmount\n        );\n    }\n\n    function handleQueryBytes32Result(bytes32 _result) external {\n        emit ReceivedBytes32Result(_result);\n        lastBytes32Result = _result;\n    }\n\n    function queryAndPayFor(\n        uint32 _destinationDomain,\n        address _target,\n        bytes calldata _targetData,\n        bytes4 _callbackSelector,\n        uint256 _gasAmount\n    ) internal {\n        CallLib.StaticCallWithCallback[]\n            memory calls = new CallLib.StaticCallWithCallback[](1);\n        calls[0] = CallLib.build(\n            _target,\n            _targetData,\n            abi.encodePacked(_callbackSelector)\n        );\n        bytes32 _messageId = queryRouter.query(_destinationDomain, calls);\n        interchainGasPaymaster.payForGas{value: msg.value}(\n            _messageId,\n            _destinationDomain,\n            _gasAmount,\n            msg.sender\n        );\n    }\n}\n\n\n// File contracts/test/TestSendReceiver.sol\n\n\npragma solidity >=0.8.0;\n\n\n\ncontract TestSendReceiver is IMessageRecipient {\n    using TypeCasts for address;\n\n    uint256 public constant HANDLE_GAS_AMOUNT = 50_000;\n\n    event Handled(bytes32 blockHash);\n\n    function dispatchToSelf(\n        IMailbox _mailbox,\n        IInterchainGasPaymaster _paymaster,\n        uint32 _destinationDomain,\n        bytes calldata _messageBody\n    ) external payable {\n        bytes32 _messageId = _mailbox.dispatch(\n            _destinationDomain,\n            address(this).addressToBytes32(),\n            _messageBody\n        );\n        uint256 _blockHashNum = uint256(previousBlockHash());\n        uint256 _value = msg.value;\n        if (_blockHashNum % 5 == 0) {\n            // Pay in two separate calls, resulting in 2 distinct events\n            uint256 _halfPayment = _value / 2;\n            uint256 _halfGasAmount = HANDLE_GAS_AMOUNT / 2;\n            _paymaster.payForGas{value: _halfPayment}(\n                _messageId,\n                _destinationDomain,\n                _halfGasAmount,\n                msg.sender\n            );\n            _paymaster.payForGas{value: _value - _halfPayment}(\n                _messageId,\n                _destinationDomain,\n                HANDLE_GAS_AMOUNT - _halfGasAmount,\n                msg.sender\n            );\n        } else {\n            // Pay the entire msg.value in one call\n            _paymaster.payForGas{value: _value}(\n                _messageId,\n                _destinationDomain,\n                HANDLE_GAS_AMOUNT,\n                msg.sender\n            );\n        }\n    }\n\n    function handle(\n        uint32,\n        bytes32,\n        bytes calldata\n    ) external override {\n        bytes32 blockHash = previousBlockHash();\n        bool isBlockHashEndIn0 = uint256(blockHash) % 16 == 0;\n        require(!isBlockHashEndIn0, \"block hash ends in 0\");\n        emit Handled(blockHash);\n    }\n\n    function previousBlockHash() internal view returns (bytes32) {\n        return blockhash(block.number - 1);\n    }\n}\n\n\n// File contracts/test/TestTokenRecipient.sol\n\n\npragma solidity >=0.8.0;\n\ncontract TestTokenRecipient is ILiquidityLayerMessageRecipient {\n    bytes32 public lastSender;\n    bytes public lastData;\n    address public lastToken;\n    uint256 public lastAmount;\n\n    address public lastCaller;\n    string public lastCallMessage;\n\n    event ReceivedMessage(\n        uint32 indexed origin,\n        bytes32 indexed sender,\n        string message,\n        address token,\n        uint256 amount\n    );\n\n    event ReceivedCall(address indexed caller, uint256 amount, string message);\n\n    function handleWithTokens(\n        uint32 _origin,\n        bytes32 _sender,\n        bytes calldata _data,\n        address _token,\n        uint256 _amount\n    ) external override {\n        emit ReceivedMessage(_origin, _sender, string(_data), _token, _amount);\n        lastSender = _sender;\n        lastData = _data;\n        lastToken = _token;\n        lastAmount = _amount;\n    }\n\n    function fooBar(uint256 amount, string calldata message) external {\n        emit ReceivedCall(msg.sender, amount, message);\n        lastCaller = msg.sender;\n        lastCallMessage = message;\n    }\n}\n\n\n// File @openzeppelin/contracts/proxy/Proxy.sol@v4.8.0\n\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n\n\n// File @openzeppelin/contracts/proxy/beacon/IBeacon.sol@v4.8.0\n\n\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n\n\n// File @openzeppelin/contracts/interfaces/draft-IERC1822.sol@v4.8.0\n\n\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n\n\n// File @openzeppelin/contracts/utils/StorageSlot.sol@v4.8.0\n\n\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n\n\n// File @openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol@v4.8.0\n\n\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\n\n\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n\n\n// File @openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol@v4.8.0\n\n\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n\n\n// File @openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol@v4.8.0\n\n\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(\n        address _logic,\n        address admin_,\n        bytes memory _data\n    ) payable ERC1967Proxy(_logic, _data) {\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function admin() external ifAdmin returns (address admin_) {\n        admin_ = _getAdmin();\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function implementation() external ifAdmin returns (address implementation_) {\n        implementation_ = _implementation();\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n     */\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\n        _changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n     */\n    function upgradeTo(address newImplementation) external ifAdmin {\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n     */\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n        _upgradeToAndCall(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n     */\n    function _beforeFallback() internal virtual override {\n        require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n        super._beforeFallback();\n    }\n}\n\n\n// File @openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol@v4.8.0\n\n\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/ProxyAdmin.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\n */\ncontract ProxyAdmin is Ownable {\n    /**\n     * @dev Returns the current implementation of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"implementation()\")) == 0x5c60da1b\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"5c60da1b\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Returns the current admin of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"admin()\")) == 0xf851a440\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"f851a440\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Changes the admin of `proxy` to `newAdmin`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the current admin of `proxy`.\n     */\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\n        proxy.changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\n        proxy.upgradeTo(implementation);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgradeAndCall(\n        TransparentUpgradeableProxy proxy,\n        address implementation,\n        bytes memory data\n    ) public payable virtual onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }\n}\n\n\n// File contracts/upgrade/ProxyAdmin.sol\n\n\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/ProxyAdmin.sol)\n\npragma solidity ^0.8.0;\n\n\n// File contracts/upgrade/TransparentUpgradeableProxy.sol\n\n\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\n\npragma solidity ^0.8.0;\n\n\n// File contracts/interfaces/IValidatorAnnounce.sol\n\n\npragma solidity >=0.6.11;\n\ninterface IValidatorAnnounce {\n    /// @notice Returns the local domain for validator announcements\n    function localDomain() external view returns (uint32);\n\n    /// @notice Returns the mailbox contract for validator announcements\n    function mailbox() external view returns (address);\n\n    /// @notice Returns a list of validators that have made announcements\n    function getAnnouncedValidators() external view returns (address[] memory);\n\n    /**\n     * @notice Returns a list of all announced storage locations for `validators`\n     * @param _validators The list of validators to get storage locations for\n     * @return A list of announced storage locations\n     */\n    function getAnnouncedStorageLocations(address[] calldata _validators)\n        external\n        view\n        returns (string[][] memory);\n\n    /**\n     * @notice Announces a validator signature storage location\n     * @param _storageLocation Information encoding the location of signed\n     * checkpoints\n     * @param _signature The signed validator announcement\n     * @return True upon success\n     */\n    function announce(\n        address _validator,\n        string calldata _storageLocation,\n        bytes calldata _signature\n    ) external returns (bool);\n}\n\n\n// File contracts/ValidatorAnnounce.sol\n\n\npragma solidity >=0.8.0;\n\n// ============ Internal Imports ============\n\n\n\n\n// ============ External Imports ============\n\n\n/**\n * @title ValidatorAnnounce\n * @notice Stores the location(s) of validator signed checkpoints\n */\ncontract ValidatorAnnounce is IValidatorAnnounce {\n    // ============ Libraries ============\n\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using TypeCasts for address;\n\n    // ============ Constants ============\n\n    // Address of the mailbox being validated\n    address public immutable mailbox;\n    // Domain of chain on which the contract is deployed\n    uint32 public immutable localDomain;\n\n    // ============ Public Storage ============\n\n    // The set of validators that have announced\n    EnumerableSet.AddressSet private validators;\n    // Storage locations of validator signed checkpoints\n    mapping(address => string[]) private storageLocations;\n    // Mapping to prevent the same announcement from being registered\n    // multiple times.\n    mapping(bytes32 => bool) private replayProtection;\n\n    // ============ Events ============\n\n    /**\n     * @notice Emitted when a new validator announcement is made\n     * @param validator The address of the announcing validator\n     * @param storageLocation The storage location being announced\n     */\n    event ValidatorAnnouncement(\n        address indexed validator,\n        string storageLocation\n    );\n\n    // ============ Constructor ============\n\n    constructor(address _mailbox) {\n        mailbox = _mailbox;\n        localDomain = IMailbox(mailbox).localDomain();\n    }\n\n    // ============ External Functions ============\n\n    /**\n     * @notice Announces a validator signature storage location\n     * @param _storageLocation Information encoding the location of signed\n     * checkpoints\n     * @param _signature The signed validator announcement\n     * @return True upon success\n     */\n    function announce(\n        address _validator,\n        string calldata _storageLocation,\n        bytes calldata _signature\n    ) external returns (bool) {\n        // Ensure that the same storage metadata isn't being announced\n        // multiple times for the same validator.\n        bytes32 _replayId = keccak256(\n            abi.encodePacked(_validator, _storageLocation)\n        );\n        require(replayProtection[_replayId] == false, \"replay\");\n        replayProtection[_replayId] = true;\n\n        // Verify that the signature matches the declared validator\n        bytes32 _announcementDigest = ValidatorAnnouncements\n            .getAnnouncementDigest(mailbox, localDomain, _storageLocation);\n        address _signer = ECDSA.recover(_announcementDigest, _signature);\n        require(_signer == _validator, \"!signature\");\n\n        // Store the announcement\n        if (!validators.contains(_validator)) {\n            validators.add(_validator);\n        }\n        storageLocations[_validator].push(_storageLocation);\n        emit ValidatorAnnouncement(_validator, _storageLocation);\n        return true;\n    }\n\n    /**\n     * @notice Returns a list of all announced storage locations\n     * @param _validators The list of validators to get registrations for\n     * @return A list of registered storage metadata\n     */\n    function getAnnouncedStorageLocations(address[] calldata _validators)\n        external\n        view\n        returns (string[][] memory)\n    {\n        string[][] memory _metadata = new string[][](_validators.length);\n        for (uint256 i = 0; i < _validators.length; i++) {\n            _metadata[i] = storageLocations[_validators[i]];\n        }\n        return _metadata;\n    }\n\n    /// @notice Returns a list of validators that have made announcements\n    function getAnnouncedValidators() external view returns (address[] memory) {\n        return validators.values();\n    }\n}\n\n\n// File contracts/test/bad-recipient/BadRecipient2.sol\n\n\npragma solidity >=0.8.0;\n\ncontract BadRecipient2 {\n    function handle(uint32, bytes32) external pure {} // solhint-disable-line no-empty-blocks\n}\n", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract DomainRoutingIsm\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ModuleDeployed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_domains\",\"type\":\"uint32[]\"},{\"internalType\":\"contract IInterchainSecurityModule[]\",\"name\":\"_modules\",\"type\":\"address[]\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"contract DomainRoutingIsm\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DomainRoutingIsmFactory", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}