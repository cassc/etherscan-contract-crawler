{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\n/*\\\r\nCreated by SolidityX for Decision Game\r\nTelegram: @solidityX\r\n\\*/\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function burn(uint256 amount) external; \r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\r\n}\r\n\r\nlibrary EnumerableSet {\r\n\r\n    struct Set {\r\n        bytes32[] _values;\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastValue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastValue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        bytes32[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\nlibrary SafeMath {\r\n\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ninterface AutomationCompatibleInterface {\r\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\r\n  function performUpkeep(bytes calldata performData) external;\r\n}\r\n\r\ncontract AutomationBase {\r\n  error OnlySimulatedBackend();\r\n\r\n  function preventExecution() internal view {\r\n    if (tx.origin != address(0)) {\r\n      revert OnlySimulatedBackend();\r\n    }\r\n  }\r\n  modifier cannotExecute() {\r\n    preventExecution();\r\n    _;\r\n  }\r\n}\r\n\r\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\r\n\r\n\r\n\r\ncontract Staking is AutomationCompatible {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    using SafeMath for uint;\r\n\r\n    IERC20 private depToken; // deposit token (LP)\r\n    IERC20 private rewToken; // reward token\r\n    EnumerableSet.AddressSet private stakeholders; // list of depositor addresses\r\n\r\n    /*\\\r\n    struct that contains information about the deposit\r\n    \\*/\r\n    struct Stake {\r\n        uint staked;\r\n        uint shares;\r\n        uint unlock;\r\n    }\r\n\r\n    address public owner; // owner of the contract\r\n    address public registry; // chainlink automation registry\r\n    uint private totalStakes; // total amount of tokens deposited\r\n    uint private totalShares; // total amount of shares issued\r\n    uint constant private minForExecution = 3; // minimum amount of available withdrawls for chainlink to trigger\r\n    uint constant private maxForExecution = 9; // maximum amount of available withdrawls for chainlink to trigger in one transaction\r\n    bool private initialized; // if contract is initialized\r\n\r\n    mapping(address => Stake) private stakeholderToStake; // mapping from the depositor address to his information (tokens deposited etc.)\r\n    mapping(uint => uint) private timePeriods; // mapping from index to time periods in seconds (mapping are cheaper than arrays)\r\n\r\n    /*\\\r\n    function with this modifier can only be called by the owner\r\n    \\*/\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"caller not owner\");\r\n        _;\r\n    }\r\n\r\n    /*\\\r\n    sets important variables at deployment\r\n    \\*/\r\n    constructor(address _depToken, address _rewToken, address _registry, uint[] memory _timePeriods) {\r\n        depToken = IERC20(_depToken);\r\n        rewToken = IERC20(_rewToken);\r\n        registry = _registry;\r\n        owner = msg.sender;\r\n        for(uint i; i < _timePeriods.length; i++) {\r\n            timePeriods[i] = _timePeriods[i];\r\n        }\r\n    }\r\n\r\n    event StakeAdded(address indexed stakeholder, uint amount, uint shares, uint timestamp); // this event emits on every deposit\r\n    event StakeRemoved(address indexed stakeholder, uint amount, uint shares, uint reward, uint timestamp); // this event emits on every withdraw\r\n\r\n\r\n/*//////////////////////////////////////////////\u203e\u203e\u203e\u203e\u203e\u203e\u203e\u203e\u203e\u203e\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\r\n///////////////////////////////////////////////executeables\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\r\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____________/////////////////////////////////////////////*/\r\n\r\n    /*\\\r\n    initialize all values\r\n    amount will be locked forever\r\n    \\*/\r\n    function initialize(uint _amount, uint _p) external onlyOwner {\r\n        require(!initialized, \"already initialized!\");\r\n        require(depToken.transferFrom(msg.sender, address(this), _amount), \"transfer failed!\");\r\n        require(timePeriods[_p] > 0, \"invalid time period!\");stakeholderToStake[address(0x0)] = Stake({\r\n            staked: _amount,\r\n            shares: _amount,\r\n            unlock: 0\r\n        });\r\n        totalStakes = _amount;\r\n        totalShares = _amount;\r\n        initialized = true;\r\n        owner = address(0x0);\r\n        emit StakeAdded(address(0x0), _amount, _amount, block.timestamp);\r\n    }\r\n\r\n    /*\\\r\n    stake tokens\r\n    \\*/\r\n    function deposit(uint _amount, uint _p) external returns(bool) {\r\n        require(initialized, \"not initialized!\");\r\n        require(stakeholderToStake[msg.sender].staked == 0, \"already deposited!\");\r\n        require(timePeriods[_p] > 0, \"invalid time period!\");\r\n        require(_amount > 0, \"amount too small!\");\r\n\r\n        uint tbal = depToken.balanceOf(address(this)).add(rewToken.balanceOf(address(this)));\r\n        uint shares = _amount.mul(totalShares).div(tbal);\r\n        require(depToken.transferFrom(msg.sender, address(this), _amount), \"transfer failed!\");\r\n\r\n        stakeholders.add(msg.sender);\r\n        stakeholderToStake[msg.sender] = Stake({\r\n            staked: _amount,\r\n            shares: shares,\r\n            unlock: block.timestamp.add(timePeriods[_p])\r\n        });\r\n        totalStakes = totalStakes.add(_amount);\r\n        totalShares += shares;\r\n        emit StakeAdded(msg.sender, _amount, shares, block.timestamp);\r\n        return true;\r\n    }\r\n\r\n    /*\\\r\n    withdraw function if in emergency state (no rewards)\r\n    \\*/\r\n    function emergencyWithdraw() external returns(bool) {\r\n        uint stake = stakeholderToStake[msg.sender].staked;\r\n        uint shares = stakeholderToStake[msg.sender].shares;\r\n\r\n        stakeholderToStake[msg.sender] = Stake({\r\n            staked: 0,\r\n            shares: 0,\r\n            unlock: 0\r\n        });\r\n        totalShares = totalShares.sub(shares);\r\n        totalStakes = totalStakes.sub(stake);\r\n\r\n        require(depToken.transfer(msg.sender, stake), \"initial transfer failed!\");\r\n\r\n        stakeholders.remove(msg.sender);\r\n        return true;\r\n    }\r\n\r\n    /*\\\r\n    remove staked tokens\r\n    \\*/\r\n    function withdraw() external returns(bool){\r\n        _withdraw(msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function _withdraw(address _account) internal {\r\n        require(block.timestamp >= stakeholderToStake[_account].unlock, \"stake still locked!\");\r\n        require(stakeholderToStake[_account].staked > 0, \"not staked!\");\r\n        uint rewards = rewardOf(_account);\r\n        uint stake = stakeholderToStake[_account].staked;\r\n        uint shares = stakeholderToStake[_account].shares;\r\n\r\n        stakeholderToStake[_account] = Stake({\r\n            staked: 0,\r\n            shares: 0,\r\n            unlock: 0\r\n        });\r\n        totalShares = totalShares.sub(shares);\r\n        totalStakes = totalStakes.sub(stake);\r\n\r\n        require(depToken.transfer(_account, stake), \"initial transfer failed!\");\r\n        require(rewToken.transfer(_account, rewards), \"reward transfer failed!\");\r\n\r\n        stakeholders.remove(_account);\r\n\r\n        emit StakeRemoved(_account, stake, shares, rewards, block.timestamp);\r\n    }\r\n\r\n    /*\\\r\n    executed by chainlink automation\r\n    withdraws all withdrawable stakes in performData\r\n    \\*/\r\n    function performUpkeep(bytes calldata performData) external override {\r\n        require(msg.sender == registry, \"not registry!\");\r\n        (address[] memory withdrawable) = abi.decode(performData, (address[]));\r\n        for(uint i; i < withdrawable.length; i++) {\r\n            _withdraw(withdrawable[i]);\r\n        }\r\n    }/*\\\r\n    called by chainlink automation\r\n    returns all withdrawable stakes\r\n    \\*/\r\n    function checkUpkeep(bytes calldata /* checkData */) external view override returns (bool upkeepNeeded, bytes memory performData) {\r\n        address[] memory withdrawableFULL = new address[](getTotalStakeholders());\r\n        uint count;\r\n        for(uint i; i < withdrawableFULL.length; i++) {\r\n            if(block.timestamp >= stakeholderToStake[stakeholders.at(i)].unlock) {\r\n                withdrawableFULL[count] = stakeholders.at(i);\r\n                count++;\r\n            }\r\n            if(count >= maxForExecution)\r\n                break;\r\n        }\r\n        address[] memory withdrawable = new address[](count);\r\n        for(uint i; i < withdrawable.length; i++) {\r\n            withdrawable[i] = withdrawableFULL[i];\r\n        }\r\n        performData = abi.encode(withdrawable);\r\n        if(count >= minForExecution)\r\n            upkeepNeeded = true;\r\n    }\r\n\r\n\r\n/*//////////////////////////////////////////////\u203e\u203e\u203e\u203e\u203e\u203e\u203e\u203e\u203e\u203e\u203e\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\r\n///////////////////////////////////////////////viewable/misc\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\r\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____________/////////////////////////////////////////////*/\r\n\r\n\r\n    /*\\\r\n    ratio of token/share\r\n    \\*/\r\n    function getRatio() public view returns(uint) {\r\n        uint tbal = depToken.balanceOf(address(this)).add(rewToken.balanceOf(address(this)));\r\n        return tbal.mul(1e18).div(totalShares);\r\n    }\r\n\r\n    /*\\\r\n    get token stake of user\r\n    \\*/\r\n    function stakeOf(address stakeholder) public view returns (uint) {\r\n        return stakeholderToStake[stakeholder].staked;\r\n    }\r\n\r\n    /*\\\r\n    get shares of user\r\n    \\*/\r\n    function sharesOf(address stakeholder) public view returns (uint) {\r\n        return stakeholderToStake[stakeholder].shares;\r\n    }\r\n\r\n    /*\\\r\n    get total amount of tokens staked\r\n    \\*/\r\n    function getTotalStakes() external view returns (uint) {\r\n        return totalStakes;\r\n    }\r\n\r\n    /*\\\r\n    get total amount of shares\r\n    \\*/ \r\n    function getTotalShares() external view returns (uint) {\r\n        return totalShares;\r\n    }\r\n\r\n    /*\\\r\n    get total current rewards\r\n    \\*/\r\n    function getCurrentRewards() external view returns (uint) {\r\n        return rewToken.balanceOf(address(this));\r\n    }\r\n\r\n    /*\\\r\n    get list of all stakers\r\n    \\*/\r\n    function getTotalStakeholders() public view returns (uint) {\r\n        return stakeholders.length();\r\n    }\r\n\r\n    /*\\\r\n    get the unix timestamp when the stake of staker unlocks\r\n    \\*/\r\n    function getUnlockOf(address staker) external view returns(uint) {\r\n        return stakeholderToStake[staker].unlock;\r\n    }\r\n\r\n    /*\\\r\n    get rewards that user received\r\n    \\*/\r\n    function rewardOf(address stakeholder) public view returns (uint) {\r\n        uint stakeholderStake = stakeOf(stakeholder);\r\n        uint stakeholderShares = sharesOf(stakeholder);\r\n\r\n        if (stakeholderShares == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint stakedRatio = stakeholderStake.mul(1e18).div(stakeholderShares);\r\n        uint currentRatio = getRatio();\r\n\r\n        if (currentRatio <= stakedRatio) {\r\n            return 0;\r\n        }\r\n\r\n        uint rewards = stakeholderShares.mul(currentRatio.sub(stakedRatio)).div(1e18);\r\n        return rewards;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_timePeriods\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"OnlySimulatedBackend\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakeholder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StakeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakeholder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StakeRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_p\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStakeholders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getUnlockOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_p\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeholder\",\"type\":\"address\"}],\"name\":\"rewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeholder\",\"type\":\"address\"}],\"name\":\"sharesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeholder\",\"type\":\"address\"}],\"name\":\"stakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Staking", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000002e7d9d93d19d90baf2f8bd256d15a94baaa0b4430000000000000000000000008865bc57c58be23137ace9ed1ae1a05fe5c8b20900000000000000000000000002777053d6764996e594c3e88af1d58d5363a2e6000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000f099d10000000000000000000000000000000000000000000000000000000001e133a20000000000000000000000000000000000000000000000000000000002d1cd730000000000000000000000000000000000000000000000000000000003c26745", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://73ad96357600ec2d18b9ef9b38d76a5cea636ee1c3651340bae39016ee6836ca"}