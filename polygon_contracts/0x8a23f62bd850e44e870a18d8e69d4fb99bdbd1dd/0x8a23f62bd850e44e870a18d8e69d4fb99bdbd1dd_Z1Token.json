{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n\r\n// File: deflationary/contracts/interfaces/ISaltzYard.sol\r\n\r\n\r\npragma solidity ^0.8.9;\r\ninterface ISaltzYard {\r\n    \r\n    function lastTimeRewardApplicable() external view returns (uint);\r\n\r\n    function rewardPerToken() external view returns (uint);\r\n\r\n    function stake(uint _amount) external ;\r\n    \r\n    function withdraw(uint _amount) external ;\r\n\r\n    function earned(address _account) external view returns (uint) ;\r\n\r\n    function getReward() external  ;\r\n    \r\n    function setRewardsDuration(uint _duration) external ;\r\n\r\n    function notifyRewardAmount( uint _amount ) external ;\r\n\r\n}\r\n// File: deflationary/contracts/zToken.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\npragma solidity ^0.8.9;\r\ninterface IVault {\r\n\r\nfunction setUpdater(address _updater) external;\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address internal _owner;\r\n    address private _previousOwner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: Vault.sol\r\n\r\npragma solidity ^0.8.9;\r\n\r\ncontract Vault is Ownable {\r\n    IERC20 tokenAddress;\r\n    address public updater;\r\n\r\n    //address public owner;\r\n    constructor(address _token) {\r\n        tokenAddress = IERC20(_token);\r\n    }\r\n\r\n    modifier onlyUpdater() {\r\n        require(msg.sender == updater, \"you are not the updater\");\r\n        _;\r\n    }\r\n\r\n    function setUpdater(address _updater) public onlyOwner {\r\n        updater = _updater;\r\n    }\r\n\r\n    function withdraw(uint amount, address _user) public onlyUpdater {\r\n        tokenAddress.transfer(_user, amount);\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, Ownable, IERC20, IERC20Metadata {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(\r\n        address account\r\n    ) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) public virtual returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) public virtual returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(\r\n            amount,\r\n            \"ERC20: burn amount exceeds balance\"\r\n        );\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function factory() external view returns (address);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract Z1Token is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) public isRegistered;\r\n    mapping(uint8 => uint16) public commision; // for referals\r\n    mapping(address => address) public parent;\r\n\r\n    address[] public users;\r\n\r\n    address public devWallet;\r\n    address public vault;\r\n\r\n    address constant _burnAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    uint16 private totalTax = 1000;\r\n\r\n    // percentage of totalTax(after referrals distributed , if any) that goes into burning mechanism\r\n    uint16 private taxBurn = 4000;\r\n\r\n    // percentage of transaction redistributed to all holders\r\n    uint16 private taxReward = 3500;\r\n\r\n    // percentage of transaction goes to developers\r\n    uint16 private taxDev = 2500;\r\n\r\n    uint256 public currentSupply;\r\n\r\n    uint256 public transactionCount=1;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    IVault Ivault;\r\n    address public uniswapV2Pair;\r\n\r\n    bool public tradingEnabled = false;\r\n\r\n\r\n    uint256 public totalBurnt;\r\n    uint256 public totalVaultSupply;\r\n    uint256 private previousVaultSupply;\r\n\r\n    uint256 public txDayLimit;\r\n\r\n    ISaltzYard IsaltzYard;\r\n    address saltzYard;\r\n\r\n    struct ValuesOfAmount {\r\n        uint256 amount;\r\n        uint256 whaleFee;\r\n        uint256 totalTax;\r\n        uint256 transferAmount;\r\n    }\r\n\r\n    event UserRegistered(\r\n        address indexed user,\r\n        address indexed referer,\r\n        uint256 timestamp\r\n    );\r\n    event RefTx(uint8 refIndex, address referer, uint256 amount);\r\n    event Taxes(uint256 burnTax, uint256 devTax, uint256 rewardstax);\r\n    event Burn(address account, uint256 amount, uint256 timestamp);\r\n\r\n    constructor() ERC20(\"Z5\", \"Z5Token\") {\r\n        devWallet = 0x90b0813cb61E9729C7d226A0cb3C7b62F70A68a5; //my 3rd wallet\r\n\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        _mint(owner(), 1000000 * 10 ** decimals());\r\n\r\n        currentSupply = totalSupply();\r\n\r\n        includeAndExcludeFromFee(address(this), true);\r\n\r\n        vault = address(new Vault(address(this)));\r\n\r\n        Ivault = IVault(vault);\r\n\r\n        commision[0] = 500;\r\n        commision[1] = 300;\r\n        commision[2] = 200;\r\n        commision[3] = 100;\r\n        commision[4] = 50;\r\n    }\r\n\r\n    function includeAndExcludeFromFee(\r\n        address account,\r\n        bool value\r\n    ) public onlyOwner {\r\n        _isExcludedFromFee[account] = value;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function enableTrading() external onlyOwner {\r\n        tradingEnabled = true;\r\n    }\r\n\r\n    function setdevWallet(address _addr) external onlyOwner {\r\n        devWallet = _addr;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if (from != owner() && !tradingEnabled) {\r\n            require(tradingEnabled, \"Trading is not enabled yet\");\r\n        }\r\n\r\n\r\n        bool takeFee = true;\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            super._transfer(from, to, amount);\r\n            takeFee = false;\r\n        } else {\r\n            ValuesOfAmount memory values = getValues(\r\n                amount,\r\n                _isExcludedFromFee[from],\r\n                _isExcludedFromFee[to]\r\n            );\r\n\r\n            super._transfer(from, to, values.transferAmount); // amount transfer to recepient\r\n\r\n            getTaxTransfer(values, from);\r\n            transactionCount++;\r\n        }\r\n    }\r\n\r\n    function getValues(\r\n        uint256 amount,\r\n        bool deductTransferFee,\r\n        bool sender\r\n    ) private view returns (ValuesOfAmount memory) {\r\n        ValuesOfAmount memory values;\r\n        values.amount = amount;\r\n        if (!deductTransferFee && !sender) {\r\n            // calculate fee\r\n            uint16 taxWhale_ = taxWhale(values.amount);\r\n            values.whaleFee = calculateTax(values.amount, taxWhale_);\r\n            uint256 tempTotalTax = calculateTax(\r\n                (values.amount - values.whaleFee),\r\n                totalTax\r\n            );\r\n            values.totalTax = tempTotalTax + values.whaleFee;\r\n            values.transferAmount = values.amount - values.totalTax;\r\n        } else {\r\n            values.whaleFee = 0;\r\n            values.totalTax = 0;\r\n            values.transferAmount = values.amount;\r\n        }\r\n        return values;\r\n    }\r\n\r\n    function calculateTax(\r\n        uint256 amount,\r\n        uint16 tax\r\n    ) private pure returns (uint256) {\r\n        return (amount * tax) / (10 ** 4);\r\n    }\r\n\r\n    function taxWhale(uint256 _amount) internal view returns (uint16) {\r\n        uint256 i = (_amount * 100) / currentSupply;\r\n        uint16 whaleTax;\r\n        if (i < 1) {\r\n            whaleTax = 0;\r\n        } else if (i >= 1 && i < 2) {\r\n            whaleTax = 500;\r\n        } else if (i >= 2 && i < 3) {\r\n            whaleTax = 1000;\r\n        } else if (i >= 3 && i < 4) {\r\n            whaleTax = 1500;\r\n        } else if (i >= 4 && i < 5) {\r\n            whaleTax = 2000;\r\n        } else if (i >= 5 && i < 6) {\r\n            whaleTax = 2500;\r\n        } else if (i >= 6 && i < 7) {\r\n            whaleTax = 3000;\r\n        } else if (i >= 7 && i < 8) {\r\n            whaleTax = 3500;\r\n        } else if (i >= 8 && i < 9) {\r\n            whaleTax = 4000;\r\n        } else if (i >= 9 && i < 10) {\r\n            whaleTax = 4500;\r\n        } else if (i >= 10) {\r\n            whaleTax = 5000;\r\n        }\r\n        return whaleTax;\r\n    }\r\n\r\n    function setRouter(address _router, address _pair) public onlyOwner {\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(_router);\r\n        uniswapV2Pair = _pair;\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n    }\r\n\r\n    function getParent(address user) private view returns (address referer) {\r\n        return parent[user];\r\n    }\r\n\r\n    function registerUser(address _user, address _referer) public {\r\n        if (isRegistered[_user] == false) {\r\n            _register(_user, _referer);\r\n            emit UserRegistered(_user, _referer, block.timestamp);\r\n        }\r\n    }\r\n\r\n    function _register(address _user, address _referer) internal {\r\n        parent[_user] = _referer;\r\n        isRegistered[_user] = true;\r\n        users.push(_user);\r\n    }\r\n\r\n    function getTaxTransfer(\r\n        ValuesOfAmount memory values,\r\n        address sender\r\n    ) private {\r\n        uint8 i = 0;\r\n        address parentAddress = getParent(sender);\r\n        while (parentAddress != address(0) && i <= 4) {\r\n            uint256 tAmount = calculateTax(values.totalTax, commision[i]);\r\n            super._transfer(sender, parentAddress, tAmount); // sending commision to parents    += tAmount;\r\n            values.totalTax -= tAmount;\r\n            emit RefTx(i, parentAddress, tAmount);\r\n            parentAddress = getParent(parentAddress);\r\n            i++;\r\n        }\r\n\r\n        uint256 BurnFee = calculateTax(values.totalTax, taxBurn);\r\n        uint256 RewardFee = calculateTax(values.totalTax, taxReward);\r\n        uint256 DevFee = calculateTax(values.totalTax, taxDev);\r\n\r\n        super._transfer(sender, devWallet, DevFee); //dev Wallet\r\n\r\n        super._transfer(sender, vault, RewardFee); //to reward wallet\r\n        totalVaultSupply += RewardFee;\r\n\r\n        super._transfer(sender, _burnAddress, BurnFee); //burning tokens\r\n        currentSupply -= BurnFee;\r\n        emit Burn(sender, BurnFee, block.timestamp);\r\n\r\n        if (transactionCount % getTrnx() == 0) {\r\n            uint _amount = totalVaultSupply - previousVaultSupply; //recent changes\r\n            IsaltzYard.notifyRewardAmount(_amount);\r\n            previousVaultSupply = totalVaultSupply;\r\n        }\r\n\r\n        emit Taxes(BurnFee, DevFee, RewardFee);\r\n    }\r\n\r\n    function transferRewardToYard() external onlyOwner {\r\n        uint _amount = totalVaultSupply - previousVaultSupply; //recent changes\r\n        IsaltzYard.notifyRewardAmount(_amount);\r\n        previousVaultSupply = totalVaultSupply;\r\n    }\r\n\r\n    function addYard(address _yard) external onlyOwner {\r\n        saltzYard = _yard;\r\n        IsaltzYard = ISaltzYard(_yard);\r\n        Ivault.setUpdater(saltzYard);\r\n    }\r\n\r\n    function updateTrnx(uint256 _trnx) public onlyOwner {\r\n        txDayLimit = _trnx;\r\n    }\r\n\r\n    function getTrnx() public view returns (uint256) {\r\n        return txDayLimit;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"refIndex\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefTx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"devTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardstax\",\"type\":\"uint256\"}],\"name\":\"Taxes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UserRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_yard\",\"type\":\"address\"}],\"name\":\"addYard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"commision\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrnx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"includeAndExcludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"parent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referer\",\"type\":\"address\"}],\"name\":\"registerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setdevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurnt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVaultSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferRewardToYard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txDayLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trnx\",\"type\":\"uint256\"}],\"name\":\"updateTrnx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Z1Token", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://31c587830fa130f817281e300ea80fa72c645f6b4f19555bb747f792f5884f9d"}