{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IKonaFinance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IKonaFinance {\\n  event LoanCreated(\\n    uint256 indexed providerID,\\n    uint256 indexed loanID,\\n    address indexed creator,\\n    uint256 amount,\\n    address borrower,\\n    uint8 _status\\n  );\\n  event LoanApproved(\\n    uint256 indexed providerID,\\n    uint256 indexed loanID,\\n    string lockReference\\n  );\\n  event LoanInvested(\\n    uint256 indexed providerID,\\n    uint256 indexed loanID,\\n    address indexed lender\\n  );\\n  event LoanCancelled(\\n    uint256 indexed providerID,\\n    uint256 indexed loanID,\\n    address indexed lender,\\n    uint256 totalReimbursed\\n  );\\n  event LoanDeleted(\\n    uint256 indexed providerID,\\n    uint256 indexed loanID,\\n    address indexed lender,\\n    uint256 totalReimbursed\\n  );\\n  event LoanRepaid(\\n    uint256 indexed providerID,\\n    uint256 indexed loanID,\\n    address contractAddreess,\\n    uint256 amountRepaid,\\n    uint256 konaFees,\\n    uint256 amountForLender\\n  );\\n  event LoanWithdrawn(\\n    uint256 indexed providerID,\\n    uint256 indexed loanID,\\n    address indexed lender,\\n    uint256 amount\\n  );\\n  event LoanUpdated(uint256 indexed providerID, uint256 indexed loanID);\\n\\n  event LenderClaimed(\\n    uint256 indexed providerID,\\n    uint256 indexed loanID,\\n    address indexed lender,\\n    uint256 total\\n  );\\n  event FeesAdded(address indexed beneficiary, uint256 total);\\n  event FeesClaimed(address indexed caller, uint256 total);\\n\\n  event ProviderEnabled(\\n    uint256 indexed providerID,\\n    string name,\\n    bool autoApprove,\\n    bool autoWithdraw,\\n    uint256[] feeAmounts,\\n    address[] feeWallets\\n  );\\n  event ProviderCreatorSet(\\n    uint256 indexed providerID,\\n    address indexed creator,\\n    bool enabled\\n  );\\n  event ProviderDisabled(uint256 indexed providerID);\\n  event ProviderUpdated(\\n    uint256 indexed providerID,\\n    bool autoApprove,\\n    bool autoWithdraw,\\n    uint256 maxLoanAmount\\n  );\\n  event ProviderFeesReplaced(\\n    uint256 indexed providerID,\\n    uint256[] feeAmounts,\\n    address[] feeWallets\\n  );\\n}\\n\"\r\n    },\r\n    \"contracts/IStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IStrategy {\\n  function strategyRepay(\\n    uint256 _total,\\n    uint256 _providerID,\\n    uint256 _loanId\\n  ) external;\\n\\n  function cancelStrategy(uint256 _providerID, uint256 _loanID) external;\\n}\\n\"\r\n    },\r\n    \"contracts/KonaFinance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./KonaStorage.sol\\\";\\nimport \\\"./IKonaFinance.sol\\\";\\nimport \\\"./IStrategy.sol\\\";\\n\\n/**\\n * @title KonaFinance\\n * @dev This contract manages loans and investments for the Kona Finance v1 protocol.\\n */\\ncontract KonaFinance is KonaStorage, IKonaFinance {\\n  address brzToken = 0x4eD141110F6EeeAbA9A1df36d8c26f684d2475Dc;\\n\\n  constructor() {\\n    konaAddress = msg.sender;\\n  }\\n\\n  function createLoan(\\n    uint256 _providerID,\\n    uint256 _loanID,\\n    uint256 _amount,\\n    address _borrower,\\n    string memory _borrowerInfo,\\n    uint256 _maturity,\\n    uint256 _repayments,\\n    uint256 _interestRate,\\n    uint256 _amountPlusInterest,\\n    uint256 _excessCollateral\\n  ) external {\\n    require(providers[_providerID].valid, \\\"Invalid provider\\\");\\n    require(providers[_providerID].creators[msg.sender], \\\"Forbidden access\\\");\\n    require(\\n      !providers[_providerID].loans[_loanID].valid,\\n      \\\"Loan ID already created\\\"\\n    );\\n    require(\\n      _amount > 0 && _interestRate > 0 && _amountPlusInterest >= _amount,\\n      \\\"Invalid conditions\\\"\\n    );\\n    require(\\n      (rampAddress != address(0) && _borrower == rampAddress) ||\\n        (rampAddress == address(0) && _borrower != address(0)),\\n      \\\"Invalid borrower address\\\"\\n    );\\n    require(\\n      providers[_providerID].maxLoanAmount == 0 ||\\n        _amount <= providers[_providerID].maxLoanAmount,\\n      \\\"Max amount reached\\\"\\n    );\\n\\n    Loan storage loan = providers[_providerID].loans[_loanID];\\n\\n    loan.valid = true;\\n\\n    //Approve automatically if using Kona's Oracle\\n    if (providers[_providerID].autoApprove) {\\n      loan.status = LoanStatus.Approved;\\n      emit LoanApproved(_providerID, _loanID, \\\"-\\\");\\n    } else {\\n      loan.status = LoanStatus.Created;\\n    }\\n\\n    loan.amount = _amount;\\n    loan.borrower = _borrower;\\n    loan.borrowerInfo = _borrowerInfo;\\n    loan.conditions.maturity = _maturity;\\n    loan.conditions.repayments = _repayments;\\n    loan.conditions.interestRate = _interestRate;\\n    loan.conditions.amountPlusInterest = _amountPlusInterest;\\n    loan.conditions.excessCollateral = _excessCollateral;\\n\\n    emit LoanCreated(\\n      _providerID,\\n      _loanID,\\n      msg.sender,\\n      _amount,\\n      _borrower,\\n      uint8(loan.status)\\n    );\\n  }\\n\\n  function approveLoan(\\n    uint256 _providerID,\\n    uint256 _loanID,\\n    string memory _lockReference\\n  ) external onlyRole(LOAN_CONFIRM_ROLE) {\\n    Loan storage loan = providers[_providerID].loans[_loanID];\\n\\n    require(loan.status == LoanStatus.Created, \\\"Loan already approved\\\");\\n\\n    loan.status = LoanStatus.Approved;\\n    loan.lockReference = _lockReference;\\n\\n    emit LoanApproved(_providerID, _loanID, _lockReference);\\n  }\\n\\n  function invest(\\n    uint256 _providerID,\\n    uint256 _loanID,\\n    address _payToContract\\n  ) external {\\n    require(providers[_providerID].valid, \\\"Invalid provider\\\");\\n\\n    Loan storage loan = providers[_providerID].loans[_loanID];\\n\\n    require(loan.valid, \\\"Invalid loan\\\");\\n    require(loan.status == LoanStatus.Approved, \\\"Loan is not approved yet\\\");\\n\\n    loan.lender = msg.sender;\\n    loan.payToContract = _payToContract;\\n\\n    if (providers[_providerID].autoWithdraw) {\\n      require(IERC20(brzToken).transferFrom(msg.sender, loan.borrower, loan.amount), \\\"Transfer failed\\\");\\n\\n      loan.status = LoanStatus.Withdrawn;\\n      \\n      emit LoanWithdrawn(_providerID, _loanID, loan.lender, loan.amount);\\n\\n    } else {\\n      require(IERC20(brzToken).transferFrom(msg.sender, address(this), loan.amount), \\\"Transfer failed\\\");\\n\\n      loan.status = LoanStatus.Invested;\\n    }\\n\\n    emit LoanInvested(_providerID, _loanID, msg.sender);\\n  }\\n\\n  function confirmLoanWithdrawal(\\n    uint256 _providerID,\\n    uint256 _loanID,\\n    string memory _lockReference\\n  ) external onlyRole(LOAN_CONFIRM_ROLE) {\\n    require(providers[_providerID].valid, \\\"Invalid provider\\\");\\n\\n    Loan storage loan = providers[_providerID].loans[_loanID];\\n\\n    require(loan.valid, \\\"Invalid loan\\\");\\n    require(loan.status == LoanStatus.Invested, \\\"Loan is not invested yet\\\");\\n\\n    loan.status = LoanStatus.Withdrawn;\\n    loan.lockReference = _lockReference;\\n\\n    require(IERC20(brzToken).transfer(loan.borrower, loan.amount));\\n\\n    emit LoanWithdrawn(_providerID, _loanID, loan.lender, loan.amount);\\n  }\\n\\n  function cancelLoan(uint256 _providerID, uint256 _loanID) public {\\n    require(providers[_providerID].valid, \\\"Invalid provider\\\");\\n    require(\\n      providers[_providerID].creators[msg.sender] ||\\n        hasRole(LOAN_MANAGER_ROLE, msg.sender),\\n      \\\"Forbidden access\\\"\\n    );\\n\\n    Loan storage loan = providers[_providerID].loans[_loanID];\\n\\n    require(loan.valid, \\\"Invalid loan\\\");\\n\\n    uint256 totalReimbursed = 0;\\n\\n    if (loan.status == LoanStatus.Invested) {\\n      totalReimbursed = reimburseLender(\\n        _providerID,\\n        _loanID,\\n        loan.payToContract,\\n        loan.lender,\\n        loan.amount\\n      );\\n    } else {\\n      require(loan.status == LoanStatus.Approved, \\\"Invalid status\\\");\\n    }\\n\\n    loan.status = LoanStatus.Cancelled;\\n\\n    emit LoanCancelled(_providerID, _loanID, loan.lender, totalReimbursed);\\n  }\\n\\n  function deleteLoan(\\n    uint256 _providerID,\\n    uint256 _loanID\\n  ) external onlyRole(LOAN_MANAGER_ROLE) {\\n    require(providers[_providerID].valid, \\\"Invalid provider\\\");\\n\\n    Loan memory loan = providers[_providerID].loans[_loanID];\\n\\n    require(loan.valid, \\\"Invalid loan\\\");\\n\\n    uint256 totalReimbursed = 0;\\n\\n    if (loan.status == LoanStatus.Invested) {\\n      totalReimbursed = reimburseLender(\\n        _providerID,\\n        _loanID,\\n        loan.payToContract,\\n        loan.lender,\\n        loan.amount\\n      );\\n    }\\n\\n    delete providers[_providerID].loans[_loanID];\\n\\n    emit LoanDeleted(_providerID, _loanID, loan.lender, totalReimbursed);\\n  }\\n\\n  function reimburseLender(\\n    uint256 _providerID,\\n    uint256 _loanID,\\n    address _payToContract,\\n    address _lender,\\n    uint256 _amount\\n  ) internal returns (uint256) {\\n    if (_payToContract == address(0)) {\\n      IERC20(brzToken).transfer(_lender, _amount);\\n    } else {\\n      IStrategy(_payToContract).cancelStrategy(_providerID, _loanID);\\n    }\\n\\n    return _amount;\\n  }\\n\\n  //Extra collateral is paid back off-chain before calling repay\\n  function repay(\\n    uint256 _amount,\\n    uint256 _providerID,\\n    uint256 _loanID\\n  ) external {\\n    require(providers[_providerID].valid, \\\"Invalid provider\\\");\\n\\n    require(\\n      IERC20(brzToken).transferFrom(msg.sender, address(this), _amount),\\n      \\\"Transfer failed\\\"\\n    );\\n\\n    Loan memory loan = providers[_providerID].loans[_loanID];\\n\\n    require(loan.valid, \\\"Invalid loan\\\");\\n    require(loan.status == LoanStatus.Withdrawn, \\\"Invalid status\\\");\\n\\n    uint256 lenderTotal = _amount;\\n\\n    uint256 konaTotalFees = 0;\\n\\n    if (konaFees > 0) {\\n      konaTotalFees += (lenderTotal * konaFees) / 1e4;\\n      feesToCollect[konaAddress] += konaTotalFees;\\n      lenderTotal -= konaTotalFees;\\n      emit FeesAdded(konaAddress, konaTotalFees);\\n    }\\n\\n    for (uint i = 0; i < providers[_providerID].feeAmounts.length; i++) {\\n      uint256 total = (_amount * providers[_providerID].feeAmounts[i]) / 1e4;\\n      address beneficiary = providers[_providerID].feeWallets[i];\\n      feesToCollect[beneficiary] += total;\\n      lenderTotal -= total;\\n      emit FeesAdded(beneficiary, total);\\n    }\\n\\n    if (loan.payToContract == address(0)) {\\n      providers[_providerID].loans[_loanID].lenderToClaim += lenderTotal;\\n    } else {\\n      IERC20(brzToken).approve(loan.payToContract, lenderTotal);\\n      IStrategy(loan.payToContract).strategyRepay(\\n        lenderTotal,\\n        _providerID,\\n        _loanID\\n      );\\n    }\\n\\n    providers[_providerID].loans[_loanID].totalRepaid += lenderTotal;\\n\\n    emit LoanRepaid(\\n      _providerID,\\n      _loanID,\\n      loan.payToContract,\\n      _amount,\\n      konaTotalFees,\\n      lenderTotal\\n    );\\n  }\\n\\n  function lenderClaim(uint256 _providerID, uint256 _loanID) external {\\n    require(providers[_providerID].valid, \\\"Invalid provider\\\");\\n\\n    Loan storage loan = providers[_providerID].loans[_loanID];\\n\\n    require(loan.valid, \\\"Invalid loan\\\");\\n    require(loan.lender == msg.sender, \\\"Invalid caller\\\");\\n    require(loan.payToContract == address(0), \\\"Payments are automatic\\\");\\n    require(loan.lenderToClaim >= 0, \\\"Nothing to claim\\\");\\n\\n    uint256 total = loan.lenderToClaim;\\n\\n    loan.lenderToClaim = 0;\\n\\n    IERC20(brzToken).transfer(msg.sender, total);\\n\\n    emit LenderClaimed(_providerID, _loanID, msg.sender, total);\\n  }\\n\\n  function claimFees() external {\\n    uint256 total = feesToCollect[msg.sender];\\n\\n    require(total > 0, \\\"Nothing to claim\\\");\\n\\n    feesToCollect[msg.sender] = 0;\\n    IERC20(brzToken).transfer(msg.sender, total);\\n\\n    emit FeesClaimed(msg.sender, total);\\n  }\\n\\n  function enableProvider(\\n    uint256 _providerID,\\n    string calldata _name,\\n    bool _autoApprove,\\n    bool _autoWithdraw,\\n    uint256[] calldata _feeAmounts,\\n    address[] calldata _feeWallets\\n  ) external onlyRole(PROVIDER_MANAGER_ROLE) {\\n    require(!providers[_providerID].valid, \\\"Already enabled\\\");\\n    require(\\n      _feeAmounts.length == _feeWallets.length,\\n      \\\"Fee lengths do not match\\\"\\n    );\\n\\n    Provider storage provider = providers[_providerID];\\n    provider.valid = true;\\n    provider.name = _name;\\n    provider.autoApprove = _autoApprove;\\n    provider.autoWithdraw = _autoWithdraw;\\n\\n    for (uint i = 0; i < _feeAmounts.length; i++) {\\n      provider.feeAmounts.push(_feeAmounts[i]);\\n      provider.feeWallets.push(_feeWallets[i]);\\n    }\\n\\n    providers[_providerID].creators[msg.sender] = true;\\n\\n    emit ProviderEnabled(\\n      _providerID,\\n      _name,\\n      _autoApprove,\\n      _autoWithdraw,\\n      _feeAmounts,\\n      _feeWallets\\n    );\\n  }\\n\\n  function updateProvider(\\n    uint256 _providerID,\\n    bool _autoApprove,\\n    bool _autoWithdraw,\\n    uint256 _maxLoanAmount\\n  ) external onlyRole(PROVIDER_MANAGER_ROLE) {\\n    require(providers[_providerID].valid, \\\"Invalid provider\\\");\\n\\n    Provider storage provider = providers[_providerID];\\n    provider.autoApprove = _autoApprove;\\n    provider.autoWithdraw = _autoWithdraw;\\n    provider.maxLoanAmount = _maxLoanAmount;\\n\\n    emit ProviderUpdated(_providerID, _autoApprove, _autoWithdraw, _maxLoanAmount);\\n  }\\n\\n  function replaceProviderFees(\\n    uint256 _providerID,\\n    uint256[] calldata _feeAmounts,\\n    address[] calldata _feeWallets\\n  ) external onlyRole(PROVIDER_MANAGER_ROLE) {\\n    require(providers[_providerID].valid, \\\"Invalid provider\\\");\\n    require(\\n      _feeAmounts.length == _feeWallets.length,\\n      \\\"Fee lengths do not match\\\"\\n    );\\n\\n    delete providers[_providerID].feeAmounts;\\n    delete providers[_providerID].feeWallets;\\n\\n    for (uint i = 0; i < _feeAmounts.length; i++) {\\n      providers[_providerID].feeAmounts.push(_feeAmounts[i]);\\n      providers[_providerID].feeWallets.push(_feeWallets[i]);\\n    }\\n\\n    emit ProviderFeesReplaced(_providerID, _feeAmounts, _feeWallets);\\n  }\\n\\n  function setProviderCreator(\\n    uint256 _providerID,\\n    address _creator,\\n    bool _enabled\\n  ) external onlyRole(PROVIDER_MANAGER_ROLE) {\\n    require(providers[_providerID].valid, \\\"Invalid provider\\\");\\n\\n    providers[_providerID].creators[_creator] = _enabled;\\n\\n    emit ProviderCreatorSet(_providerID, _creator, _enabled);\\n  }\\n\\n  function disableProvider(\\n    uint256 _providerID\\n  ) external onlyRole(PROVIDER_MANAGER_ROLE) {\\n    require(providers[_providerID].valid, \\\"Invalid provider\\\");\\n\\n    delete providers[_providerID];\\n\\n    emit ProviderDisabled(_providerID);\\n  }\\n\\n  function updateLoanState(\\n    uint256 _providerID,\\n    uint256 _loanID,\\n    address _lender,\\n    address _payToContract,\\n    LoanStatus _status\\n  ) external onlyRole(LOAN_MANAGER_ROLE) {\\n    providers[_providerID].loans[_loanID].lender = _lender;\\n    providers[_providerID].loans[_loanID].payToContract = _payToContract;\\n    providers[_providerID].loans[_loanID].status = _status;\\n\\n    emit LoanUpdated(_providerID, _loanID);\\n  }\\n\\n  function updateLoanInfo(\\n    uint256 _providerID,\\n    uint256 _loanID,\\n    uint256 _amount,\\n    address _borrower,\\n    string memory _borrowerInfo,\\n    uint256 _maturity,\\n    uint256 _repayments,\\n    uint256 _interestRate,\\n    uint256 _amountPlusInterest,\\n    uint256 _excessCollateral\\n  ) external {\\n    require(providers[_providerID].valid, \\\"Invalid provider\\\");\\n\\n    Loan storage loan = providers[_providerID].loans[_loanID];\\n\\n    require(loan.valid, \\\"Invalid loan\\\");\\n\\n    if (!hasRole(LOAN_MANAGER_ROLE, msg.sender)) {\\n      require(providers[_providerID].creators[msg.sender], \\\"Forbidden access\\\");\\n      require(loan.status == LoanStatus.Created, \\\"Invalid status\\\");\\n    }\\n\\n    require(\\n      _amount > 0 && _interestRate > 0 && _amountPlusInterest >= _amount,\\n      \\\"Invalid conditions\\\"\\n    );\\n    require(\\n      (rampAddress != address(0) && _borrower == rampAddress) ||\\n        (rampAddress == address(0) && _borrower != address(0)),\\n      \\\"Invalid borrower address\\\"\\n    );\\n    require(\\n      providers[_providerID].maxLoanAmount == 0 ||\\n        _amount <= providers[_providerID].maxLoanAmount,\\n      \\\"Max amount reached\\\"\\n    );\\n\\n    loan.amount = _amount;\\n    loan.borrower = _borrower;\\n    loan.borrowerInfo = _borrowerInfo;\\n    loan.conditions.maturity = _maturity;\\n    loan.conditions.repayments = _repayments;\\n    loan.conditions.interestRate = _interestRate;\\n    loan.conditions.amountPlusInterest = _amountPlusInterest;\\n    loan.conditions.excessCollateral = _excessCollateral;\\n\\n    emit LoanUpdated(_providerID, _loanID);\\n  }\\n\\n  function setKonaFees(\\n    uint256 _konaFees,\\n    address _konaAddress\\n  ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    konaFees = _konaFees;\\n    konaAddress = _konaAddress;\\n  }\\n\\n  function setRampAddress(\\n    address _rampAddress\\n  ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    rampAddress = _rampAddress;\\n  }\\n\\n  /**\\n   * @dev Function to recover any ERC20 tokens sent accidentally to the contract.\\n   * Note: Only callable by the super admin and possibly include a time lock.\\n   */\\n  function recoverTokens(\\n    uint256 _amount,\\n    address _asset\\n  ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    require(IERC20(_asset).transfer(msg.sender, _amount), \\\"Transfer failed\\\");\\n  }\\n\\n  /**\\n   * @dev Function to recover any ETH sent accidentally to the contract.\\n   * Note: Only callable by the super admin and possibly include a time lock.\\n   */\\n  function recoverETH(uint256 _amount) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    payable(msg.sender).transfer(_amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/KonaStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract KonaStorage is AccessControl {\\n  bytes32 public constant LOAN_CONFIRM_ROLE = keccak256(\\\"LOAN_CONFIRM_ROLE\\\");\\n  bytes32 public constant PROVIDER_MANAGER_ROLE =\\n    keccak256(\\\"PROVIDER_MANAGER_ROLE\\\");\\n  bytes32 public constant LOAN_MANAGER_ROLE = keccak256(\\\"LOAN_MANAGER_ROLE\\\");\\n\\n  constructor() {\\n    _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    _grantRole(LOAN_CONFIRM_ROLE, msg.sender);\\n    _grantRole(PROVIDER_MANAGER_ROLE, msg.sender);\\n    _grantRole(LOAN_MANAGER_ROLE, msg.sender);\\n  }\\n\\n  struct Provider {\\n    bool valid;\\n    string name;\\n    bool autoApprove;\\n    bool autoWithdraw;\\n    uint256 maxLoanAmount;\\n    uint256[] feeAmounts;\\n    address[] feeWallets;\\n    mapping(address => bool) creators;\\n    mapping(uint256 => Loan) loans;\\n  }\\n\\n  struct Conditions {\\n    uint256 maturity;\\n    uint256 repayments;\\n    uint256 interestRate;\\n    uint256 amountPlusInterest;\\n    uint256 excessCollateral;\\n  }\\n\\n  enum LoanStatus {\\n    Created,\\n    Approved,\\n    Invested,\\n    Withdrawn,\\n    Cancelled,\\n    Complete\\n  }\\n\\n  struct Loan {\\n    bool valid;\\n    uint256 amount;\\n    address borrower;\\n    string borrowerInfo;\\n    LoanStatus status;\\n    address lender;\\n    uint256 lenderToClaim;\\n    address payToContract;\\n    string lockReference;\\n    uint256 totalRepaid;\\n    Conditions conditions;\\n  }\\n\\n  mapping(uint256 => Provider) public providers;\\n\\n  mapping(address => uint256) public feesToCollect;\\n\\n  uint256 public konaFees = 0;\\n  address public konaAddress;\\n\\n  address rampAddress;\\n\\n  function getProviderFees(\\n    uint256 _providerID\\n  )\\n    external\\n    view\\n    returns (uint256[] memory feeAmounts, address[] memory feeWallets)\\n  {\\n    if (providers[_providerID].valid) {\\n      feeAmounts = providers[_providerID].feeAmounts;\\n      feeWallets = providers[_providerID].feeWallets;\\n    }\\n  }\\n\\n  function getLoan(\\n    uint256 _providerID,\\n    uint256 _loanID\\n  )\\n    external\\n    view\\n    returns (\\n      bool,\\n      uint256,\\n      address,\\n      LoanStatus,\\n      address,\\n      uint256,\\n      address,\\n      string memory,\\n      uint256,\\n      string memory\\n    )\\n  {\\n    Loan memory loan = providers[_providerID].loans[_loanID];\\n\\n    if (!providers[_providerID].valid || !loan.valid) {\\n      return (\\n        false,\\n        0,\\n        address(0),\\n        LoanStatus.Created,\\n        address(0),\\n        0,\\n        address(0),\\n        \\\"\\\",\\n        0,\\n        \\\"\\\"\\n      );\\n    }\\n\\n    return (\\n      true,\\n      loan.amount,\\n      loan.borrower,\\n      loan.status,\\n      loan.lender,\\n      loan.lenderToClaim,\\n      loan.payToContract,\\n      loan.lockReference,\\n      loan.totalRepaid,\\n      loan.borrowerInfo\\n    );\\n  }\\n\\n  function getLoanConditions(\\n    uint256 _providerID,\\n    uint256 _loanID\\n  ) external view returns (bool, uint256, uint256, uint256, uint256, uint256) {\\n    Loan memory loan = providers[_providerID].loans[_loanID];\\n\\n    if (!providers[_providerID].valid || !loan.valid) {\\n      return (false, 0, 0, 0, 0, 0);\\n    }\\n\\n    return (\\n      true,\\n      loan.conditions.maturity,\\n      loan.conditions.repayments,\\n      loan.conditions.interestRate,\\n      loan.conditions.amountPlusInterest,\\n      loan.conditions.excessCollateral\\n    );\\n  }\\n\\n  function getLoanBasic(\\n    uint256 _providerID,\\n    uint256 _loanID\\n  ) external view returns (bool, uint256, LoanStatus, uint256) {\\n    Loan memory loan = providers[_providerID].loans[_loanID];\\n\\n    if (!providers[_providerID].valid || !loan.valid) {\\n      return (false, 0, LoanStatus.Created, 0);\\n    }\\n\\n    return (true, loan.amount, loan.status, loan.conditions.repayments);\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"FeesAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"FeesClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"providerID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"LenderClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"providerID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"lockReference\",\"type\":\"string\"}],\"name\":\"LoanApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"providerID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalReimbursed\",\"type\":\"uint256\"}],\"name\":\"LoanCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"providerID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"LoanCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"providerID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalReimbursed\",\"type\":\"uint256\"}],\"name\":\"LoanDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"providerID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"LoanInvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"providerID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddreess\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRepaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"konaFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountForLender\",\"type\":\"uint256\"}],\"name\":\"LoanRepaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"providerID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"}],\"name\":\"LoanUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"providerID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LoanWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"providerID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ProviderCreatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"providerID\",\"type\":\"uint256\"}],\"name\":\"ProviderDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"providerID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"autoApprove\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"autoWithdraw\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"feeWallets\",\"type\":\"address[]\"}],\"name\":\"ProviderEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"providerID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"feeWallets\",\"type\":\"address[]\"}],\"name\":\"ProviderFeesReplaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"providerID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"autoApprove\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"autoWithdraw\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxLoanAmount\",\"type\":\"uint256\"}],\"name\":\"ProviderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOAN_CONFIRM_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOAN_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROVIDER_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_providerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loanID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_lockReference\",\"type\":\"string\"}],\"name\":\"approveLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_providerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loanID\",\"type\":\"uint256\"}],\"name\":\"cancelLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_providerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loanID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_lockReference\",\"type\":\"string\"}],\"name\":\"confirmLoanWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_providerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loanID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_borrowerInfo\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_repayments\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountPlusInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_excessCollateral\",\"type\":\"uint256\"}],\"name\":\"createLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_providerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loanID\",\"type\":\"uint256\"}],\"name\":\"deleteLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_providerID\",\"type\":\"uint256\"}],\"name\":\"disableProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_providerID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_autoApprove\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_autoWithdraw\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"_feeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_feeWallets\",\"type\":\"address[]\"}],\"name\":\"enableProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feesToCollect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_providerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loanID\",\"type\":\"uint256\"}],\"name\":\"getLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum KonaStorage.LoanStatus\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_providerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loanID\",\"type\":\"uint256\"}],\"name\":\"getLoanBasic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum KonaStorage.LoanStatus\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_providerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loanID\",\"type\":\"uint256\"}],\"name\":\"getLoanConditions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_providerID\",\"type\":\"uint256\"}],\"name\":\"getProviderFees\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"feeWallets\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_providerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loanID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_payToContract\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"konaAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"konaFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_providerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loanID\",\"type\":\"uint256\"}],\"name\":\"lenderClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"providers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"autoApprove\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"autoWithdraw\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"maxLoanAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_providerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loanID\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_providerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_feeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_feeWallets\",\"type\":\"address[]\"}],\"name\":\"replaceProviderFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_konaFees\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_konaAddress\",\"type\":\"address\"}],\"name\":\"setKonaFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_providerID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setProviderCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rampAddress\",\"type\":\"address\"}],\"name\":\"setRampAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_providerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loanID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_borrowerInfo\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_repayments\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountPlusInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_excessCollateral\",\"type\":\"uint256\"}],\"name\":\"updateLoanInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_providerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loanID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_payToContract\",\"type\":\"address\"},{\"internalType\":\"enum KonaStorage.LoanStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"updateLoanState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_providerID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_autoApprove\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_autoWithdraw\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_maxLoanAmount\",\"type\":\"uint256\"}],\"name\":\"updateProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KonaFinance", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}