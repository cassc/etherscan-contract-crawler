{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC1967.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the proxy with `beacon`.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\n     * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\\n     * constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\n     */\\n    constructor(address beacon, bytes memory data) payable {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/CMTAT_PROXY.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MPL-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./modules/CMTAT_BASE.sol\\\";\\n\\ncontract CMTAT_PROXY is CMTAT_BASE {\\n    /** \\n    @notice Contract version for the deployment with a proxy\\n    @param forwarderIrrevocable address of the forwarder, required for the gasless support\\n    */\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        // Initialize the variable for the implementation\\n        deployedWithProxy = true;\\n        // Disable the possibility to initialize the implementation\\n        _disableInitializers();\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/common/errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nlibrary Errors {\\n    error NoZeroAddress();\\n    error DateInPast(uint256 date);\\n    error DateInFuture(uint256 date);\\n    error InvalidAmount(uint256 amount);\\n    error EmptyArray();\\n    error OutOfBounds(uint256 index);\\n    error TransferFailed();\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDebtGlobal.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MPL-2.0\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nenum Label {\\n    Secured,\\n    Green,\\n    Social,\\n    Sustainable,\\n    Supernational,\\n    Governmental,\\n    Municipal,\\n    Subordinated\\n}\\n\\ninterface IDebtGlobal {\\n    struct DebtBase {\\n        // Assume two decimals so 5.95% is 595\\n        uint256 interestRate;\\n        uint256 parValue;\\n        string guarantor;\\n        string bondHolder;\\n        string maturityDate;\\n        string interestScheduleFormat;\\n        string interestPaymentDate;\\n        string dayCountConvention;\\n        string businessDayConvention;\\n        string publicHolidaysCalendar;\\n        string issuanceDate;\\n        string couponFrequency;\\n    }\\n    struct DebtAdditionalInfo {\\n        string issuerName;\\n        string issuerInfo;\\n        IERC20 currency;\\n        uint8[] labels;\\n    }\\n    struct CreditEvents {\\n        bool flagDefault;\\n        bool flagRedeemed;\\n        string rating;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEIP1404/IEIP1404.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MPL-2.0\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n@dev Contrary to the EIP-1404, this interface does not inherit from the ERC20 interface\\n*/\\ninterface IEIP1404 {\\n    /**\\n     * @dev See ERC/EIP-1404\\n     *\\n     */\\n    function detectTransferRestriction(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external view returns (uint8);\\n\\n    /**\\n     * @dev See ERC/EIP-1404\\n     *\\n     */\\n    function messageForTransferRestriction(\\n        uint8 _restrictionCode\\n    ) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEIP1404/IEIP1404Wrapper.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MPL-2.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IEIP1404.sol\\\";\\n\\ninterface IEIP1404Wrapper is IEIP1404 {\\n    /* \\n    @dev leave the code 4-9 free/unused for further additions in your ruleEngine implementation\\n    */\\n    enum REJECTED_CODE_BASE {\\n        TRANSFER_OK,\\n        TRANSFER_REJECTED_PAUSED,\\n        TRANSFER_REJECTED_FROM_FROZEN,\\n        TRANSFER_REJECTED_TO_FROZEN\\n    }\\n\\n    /**\\n     * @dev Returns true if the transfer is valid, and false otherwise.\\n     */\\n    function validateTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external view returns (bool isValid);\\n}\\n\"\r\n    },\r\n    \"contracts/modules/CMTAT_BASE.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MPL-2.0\\n\\npragma solidity ^0.8.17;\\n\\n// required OZ imports here\\nimport \\\"../../openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\\\";\\n\\nimport \\\"./wrapper/mandatory/BaseModule.sol\\\";\\nimport \\\"./wrapper/mandatory/BurnModule.sol\\\";\\nimport \\\"./wrapper/mandatory/MintModule.sol\\\";\\nimport \\\"./wrapper/mandatory/EnforcementModule.sol\\\";\\nimport \\\"./wrapper/mandatory/ERC20BaseModule.sol\\\";\\nimport \\\"./wrapper/mandatory/PauseModule.sol\\\";\\nimport \\\"./wrapper/optional/ValidationModule.sol\\\";\\nimport \\\"./wrapper/optional/DebtModule/DebtBaseModule.sol\\\";\\nimport \\\"./wrapper/optional/DebtModule/CreditEventsModule.sol\\\";\\nimport \\\"./wrapper/optional/DebtModule/DistributionModule.sol\\\";\\nimport \\\"./security/AuthorizationModule.sol\\\";\\nimport \\\"../interfaces/IEIP1404/IEIP1404Wrapper.sol\\\";\\n\\nabstract contract CMTAT_BASE is\\nInitializable,\\nContextUpgradeable,\\nBaseModule,\\nPauseModule,\\nMintModule,\\nBurnModule,\\nEnforcementModule,\\nValidationModule,\\nERC20BaseModule,\\nDebtBaseModule,\\nCreditEventsModule,\\nDistributionModule\\n{\\n    /**\\n    @notice \\n    initialize the proxy contract\\n    The calls to this function will revert if the contract was deployed without a proxy\\n    */\\n    function initialize(\\n        address admin,\\n        string memory nameIrrevocable,\\n        string memory symbolIrrevocable,\\n        string memory tokenId_,\\n        string memory terms_,\\n        IEIP1404Wrapper ruleEngine_,\\n        string memory information_,\\n        uint256 flag_,\\n        address paymentRedemptionTokenFactory_,\\n        bool restrictTransfer_\\n    ) public initializer {\\n        __CMTAT_init(\\n            admin,\\n            nameIrrevocable,\\n            symbolIrrevocable,\\n            tokenId_,\\n            terms_,\\n            ruleEngine_,\\n            information_,\\n            flag_,\\n            paymentRedemptionTokenFactory_,\\n            restrictTransfer_\\n        );\\n    }\\n\\n    /**\\n    @dev calls the different initialize functions from the different modules\\n    */\\n    function __CMTAT_init(\\n        address admin,\\n        string memory nameIrrevocable,\\n        string memory symbolIrrevocable,\\n        string memory tokenId_,\\n        string memory terms_,\\n        IEIP1404Wrapper ruleEngine_,\\n        string memory information_,\\n        uint256 flag_,\\n        address paymentRedemptionTokenFactory_,\\n        bool restrictTransfer_\\n    ) internal onlyInitializing {\\n        /* OpenZeppelin library */\\n        // OZ init_unchained functions are called firstly due to inheritance\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(nameIrrevocable, symbolIrrevocable);\\n        // AccessControlUpgradeable inherits from ERC165Upgradeable\\n        __ERC165_init_unchained();\\n        // AuthorizationModule inherits from AccessControlUpgradeable\\n        __AccessControl_init_unchained();\\n        __Pausable_init_unchained();\\n\\n        /* Internal Modules */\\n        __Enforcement_init_unchained();\\n\\n        __Snapshot_init_unchained();\\n        __Validation_init_unchained(ruleEngine_);\\n\\n        /* Wrapper */\\n        // AuthorizationModule_init_unchained is called firstly due to inheritance\\n        __AuthorizationModule_init_unchained(admin);\\n        __BurnModule_init_unchained();\\n        __MintModule_init_unchained();\\n        // EnforcementModule_init_unchained is called before ValidationModule_init_unchained due to inheritance\\n        __EnforcementModule_init_unchained();\\n        __ERC20Module_init_unchained(0);\\n        // PauseModule_init_unchained is called before ValidationModule_init_unchained due to inheritance\\n        __PauseModule_init_unchained();\\n        __ValidationModule_init_unchained(restrictTransfer_);\\n\\n        /* Other modules */\\n        __DebtBaseModule_init_unchained();\\n        __CreditEvents_init_unchained();\\n        __DistributionModule_init_unchained(paymentRedemptionTokenFactory_);\\n        __Base_init_unchained(tokenId_, terms_, information_, flag_);\\n\\n        /* own function */\\n        __CMTAT_init_unchained();\\n    }\\n\\n    function __CMTAT_init_unchained() internal onlyInitializing {\\n        // no variable to initialize\\n    }\\n\\n    /**\\n    @notice Returns the number of decimals used to get its user representation.\\n    */\\n    function decimals()\\n    public\\n    view\\n    virtual\\n    override(ERC20Upgradeable, ERC20BaseModule)\\n    returns (uint8)\\n    {\\n        return ERC20BaseModule.decimals();\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    )\\n    public\\n    virtual\\n    override(ERC20Upgradeable, ERC20BaseModule)\\n    returns (bool)\\n    {\\n        return ERC20BaseModule.transferFrom(sender, recipient, amount);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override(SnapshotModuleInternal, ERC20Upgradeable) {\\n        if (!validateTransfer(from, to, amount)) {\\n            revert TransferRejected();\\n        }\\n        // We call the SnapshotModule only if the transfer is valid\\n        SnapshotModuleInternal._beforeTokenTransfer(from, to, amount);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/modules/internal/EnforcementModuleInternal.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MPL-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../../../openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../../openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Enforcement module.\\n *\\n * Allows the issuer to freeze transfers from a given address\\n */\\nabstract contract EnforcementModuleInternal is\\n    Initializable,\\n    ContextUpgradeable\\n{\\n    /**\\n     * @notice Emitted when an address is frozen.\\n     */\\n    event Freeze(\\n        address indexed enforcer,\\n        address indexed owner,\\n        string indexed reasonIndexed,\\n        string reason\\n    );\\n\\n    /**\\n     * @notice Emitted when an address is unfrozen.\\n     */\\n    event Unfreeze(\\n        address indexed enforcer,\\n        address indexed owner,\\n        string indexed reasonIndexed,\\n        string reason\\n    );\\n\\n    mapping(address => bool) private _frozen;\\n\\n    /**\\n     * @dev Initializes the contract\\n     */\\n    function __Enforcement_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Enforcement_init_unchained();\\n    }\\n\\n    function __Enforcement_init_unchained() internal onlyInitializing {\\n        // no variable to initialize\\n    }\\n\\n    /**\\n     * @dev Returns true if the account is frozen, and false otherwise.\\n     */\\n    function frozen(address account) public view virtual returns (bool) {\\n        return _frozen[account];\\n    }\\n\\n    /**\\n     * @dev Freezes an address.\\n     * @param account the account to freeze\\n     * @param reason indicate why the account was frozen.\\n     *\\n     */\\n    function _freeze(\\n        address account,\\n        string memory reason\\n    ) internal virtual returns (bool) {\\n        if (_frozen[account]) return false;\\n        _frozen[account] = true;\\n        emit Freeze(_msgSender(), account, reason, reason);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Unfreezes an address.\\n     * @param account the account to unfreeze\\n     * @param reason indicate why the account was unfrozen.\\n     */\\n    function _unfreeze(\\n        address account,\\n        string memory reason\\n    ) internal virtual returns (bool) {\\n        if (!_frozen[account]) return false;\\n        _frozen[account] = false;\\n        emit Unfreeze(_msgSender(), account, reason, reason);\\n\\n        return true;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/modules/internal/SnapshotModuleInternal.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MPL-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../../../openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../../openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"../../../openzeppelin-contracts-upgradeable/contracts/utils/ArraysUpgradeable.sol\\\";\\n\\nerror ScheduledSnapshotInThePast();\\nerror TimeLessThanLastSnapshot();\\nerror SnapshotAlreadyExists();\\nerror SnapshotAlreadyDone();\\nerror NoScheduledSnapshot();\\nerror SnapshotNotFound();\\nerror TimeGreaterThanNextSnapshot();\\nerror TimeLessThanPreviousSnapshot();\\nerror OnlyLastSnapshotCanBeUnscheduled();\\n\\nabstract contract SnapshotModuleInternal is ERC20Upgradeable {\\n    using ArraysUpgradeable for uint256[];\\n\\n    /**\\n    @notice Emitted when the snapshot with the specified oldTime was scheduled or rescheduled at the specified newTime.\\n    */\\n    event SnapshotSchedule(uint256 indexed oldTime, uint256 indexed newTime);\\n\\n    /** \\n    @notice Emitted when the scheduled snapshot with the specified time was cancelled.\\n    */\\n    event SnapshotUnschedule(uint256 indexed time);\\n\\n    /** \\n    @dev See {OpenZeppelin - ERC20Snapshot}\\n    Snapshotted values have arrays of ids (time) and the value corresponding to that id.\\n    ids is expected to be sorted in ascending order, and to contain no repeated elements \\n    because we use findUpperBound in the function _valueAt\\n    */\\n    struct Snapshots {\\n        uint256[] ids;\\n        uint256[] values;\\n    }\\n\\n    /**\\n    @dev See {OpenZeppelin - ERC20Snapshot}\\n    */\\n    mapping(address => Snapshots) private _accountBalanceSnapshots;\\n    Snapshots private _totalSupplySnapshots;\\n\\n    /**\\n    @dev time instead of a counter for OpenZeppelin\\n    */\\n    uint256 private _currentSnapshotTime;\\n    uint256 private _currentSnapshotIndex;\\n\\n    /** \\n    @dev \\n    list of scheduled snapshot (time)\\n    This list is sorted in ascending order\\n    */\\n    uint256[] private _scheduledSnapshots;\\n\\n    /**\\n     * @dev Initializes the contract\\n     */\\n    function __Snapshot_init(\\n        string memory name_,\\n        string memory symbol_\\n    ) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC20_init(name_, symbol_);\\n        __Snapshot_init_unchained();\\n    }\\n\\n    function __Snapshot_init_unchained() internal onlyInitializing {\\n        _currentSnapshotTime = 0;\\n        _currentSnapshotIndex = 0;\\n    }\\n\\n    /** \\n    @dev schedule a snapshot at the specified time\\n    You can only add a snapshot after the last previous\\n    */\\n    function _scheduleSnapshot(uint256 time) internal {\\n        if (time <= block.timestamp) revert ScheduledSnapshotInThePast();\\n        if (\\n            _scheduledSnapshots.length > 0 &&\\n            time <= _scheduledSnapshots[_scheduledSnapshots.length - 1]\\n        ) {\\n            revert TimeLessThanLastSnapshot();\\n        }\\n        _scheduledSnapshots.push(time);\\n        emit SnapshotSchedule(0, time);\\n    }\\n\\n    //    /**\\n    //    @dev schedule a snapshot at the specified time\\n    //    */\\n    //    function _scheduleSnapshotNotOptimized(uint256 time) internal {\\n    //        if (time <= block.timestamp) revert ScheduledSnapshotInThePast();\\n    //        (bool isFound, uint256 index) = _findScheduledSnapshotIndex(time);\\n    //        if (isFound) revert SnapshotAlreadyExists();\\n    //        // if no upper bound match found, we push the snapshot at the end of the list\\n    //        if (index == _scheduledSnapshots.length) {\\n    //            _scheduledSnapshots.push(time);\\n    //        } else {\\n    //            _scheduledSnapshots.push(\\n    //                _scheduledSnapshots[_scheduledSnapshots.length - 1]\\n    //            );\\n    //            for (uint256 i = _scheduledSnapshots.length - 2; i > index; ) {\\n    //                _scheduledSnapshots[i] = _scheduledSnapshots[i - 1];\\n    //                unchecked {\\n    //                    --i;\\n    //                }\\n    //            }\\n    //            _scheduledSnapshots[index] = time;\\n    //        }\\n    //        emit SnapshotSchedule(0, time);\\n    //    }\\n\\n    //    function _rescheduleSnapshot(uint256 oldTime, uint256 newTime) internal {\\n    //        if (oldTime <= block.timestamp) revert SnapshotAlreadyDone();\\n    //        if (newTime <= block.timestamp) revert ScheduledSnapshotInThePast();\\n    //        if (_scheduledSnapshots.length == 0) revert NoScheduledSnapshot();\\n    //\\n    //        (bool foundOld, uint256 index) = _findScheduledSnapshotIndex(oldTime);\\n    //        if (!foundOld) revert SnapshotNotFound();\\n    //\\n    //        if (\\n    //            index + 1 < _scheduledSnapshots.length &&\\n    //            newTime >= _scheduledSnapshots[index + 1]\\n    //        ) {\\n    //            revert TimeGreaterThanNextSnapshot();\\n    //        }\\n    //\\n    //        if (index > 0 && newTime <= _scheduledSnapshots[index - 1]) {\\n    //            revert TimeLessThanPreviousSnapshot();\\n    //        }\\n    //\\n    //        _scheduledSnapshots[index] = newTime;\\n    //\\n    //        emit SnapshotSchedule(oldTime, newTime);\\n    //    }\\n\\n    /**\\n    @dev unschedule the last scheduled snapshot\\n    */\\n    function _unscheduleLastSnapshot(uint256 time) internal {\\n        if (time <= block.timestamp) revert SnapshotAlreadyDone();\\n        if (_scheduledSnapshots.length == 0) revert NoScheduledSnapshot();\\n        if (time != _scheduledSnapshots[_scheduledSnapshots.length - 1])\\n            revert OnlyLastSnapshotCanBeUnscheduled();\\n        _scheduledSnapshots.pop();\\n        emit SnapshotUnschedule(time);\\n    }\\n\\n    //    /**\\n    //    @dev unschedule (remove) a scheduled snapshot in three steps:\\n    //    - search the snapshot in the list\\n    //    - If found, move all next snapshots one position to the left\\n    //    - Reduce the array size by deleting the last snapshot\\n    //    */\\n    //    function _unscheduleSnapshotNotOptimized(uint256 time) internal {\\n    //        if (time <= block.timestamp) revert SnapshotAlreadyDone();\\n    //        (bool isFound, uint256 index) = _findScheduledSnapshotIndex(time);\\n    //        if (!isFound) revert SnapshotNotFound();\\n    //        for (uint256 i = index; i + 1 < _scheduledSnapshots.length; ) {\\n    //            _scheduledSnapshots[i] = _scheduledSnapshots[i + 1];\\n    //            unchecked {\\n    //                ++i;\\n    //            }\\n    //        }\\n    //        _scheduledSnapshots.pop();\\n    //    }\\n\\n    /** \\n    @dev \\n    Get the next scheduled snapshots\\n    */\\n    function getNextSnapshots() public view returns (uint256[] memory) {\\n        uint256[] memory nextScheduledSnapshot = new uint256[](0);\\n        // no snapshot were planned\\n        if (_scheduledSnapshots.length > 0) {\\n            (\\n                uint256 timeLowerBound,\\n                uint256 indexLowerBound\\n            ) = _findScheduledMostRecentPastSnapshot();\\n            // All snapshots are situated in the futur\\n            if ((timeLowerBound == 0) && (_currentSnapshotTime == 0)) {\\n                return _scheduledSnapshots;\\n            } else {\\n                // There are snapshots situated in the futur\\n                if (indexLowerBound + 1 != _scheduledSnapshots.length) {\\n                    // All next snapshots are located after the snapshot specified by indexLowerBound\\n                    uint256 arraySize = _scheduledSnapshots.length -\\n                        indexLowerBound -\\n                        1;\\n                    nextScheduledSnapshot = new uint256[](arraySize);\\n                    for (uint256 i = 0; i < nextScheduledSnapshot.length; ++i) {\\n                        nextScheduledSnapshot[i] = _scheduledSnapshots[\\n                            indexLowerBound + 1 + i\\n                        ];\\n                    }\\n                }\\n            }\\n        }\\n        return nextScheduledSnapshot;\\n    }\\n\\n    /** \\n    @dev \\n    Get all snapshots\\n    */\\n    function getAllSnapshots() public view returns (uint256[] memory) {\\n        return _scheduledSnapshots;\\n    }\\n\\n    /** \\n    @notice Return the number of tokens owned by the given owner at the time when the snapshot with the given time was created.\\n    @return value stored in the snapshot, or the actual balance if no snapshot\\n    */\\n    function snapshotBalanceOf(\\n        uint256 time,\\n        address owner\\n    ) public view returns (uint256) {\\n        (bool snapshotted, uint256 value) = _valueAt(\\n            time,\\n            _accountBalanceSnapshots[owner]\\n        );\\n\\n        return snapshotted ? value : balanceOf(owner);\\n    }\\n\\n    /**\\n    @dev See {OpenZeppelin - ERC20Snapshot}\\n    Retrieves the total supply at the specified time.\\n    @return value stored in the snapshot, or the actual totalSupply if no snapshot\\n    */\\n    function snapshotTotalSupply(uint256 time) public view returns (uint256) {\\n        (bool snapshotted, uint256 value) = _valueAt(\\n            time,\\n            _totalSupplySnapshots\\n        );\\n        return snapshotted ? value : totalSupply();\\n    }\\n\\n    /** \\n    @dev Update balance and/or total supply snapshots before the values are modified. This is implemented\\n    in the _beforeTokenTransfer hook, which is executed for _mint, _burn, and _transfer operations.\\n    */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        _setCurrentSnapshot();\\n        if (from != address(0)) {\\n            // for both burn and transfer\\n            _updateAccountSnapshot(from);\\n            if (to != address(0)) {\\n                // transfer\\n                _updateAccountSnapshot(to);\\n            } else {\\n                // burn\\n                _updateTotalSupplySnapshot();\\n            }\\n        } else {\\n            // mint\\n            _updateAccountSnapshot(to);\\n            _updateTotalSupplySnapshot();\\n        }\\n    }\\n\\n    /**\\n    @dev See {OpenZeppelin - ERC20Snapshot}\\n    @param time where we want a snapshot\\n    @param snapshots the struct where are stored the snapshots\\n    @return  snapshotExist true if a snapshot is found, false otherwise\\n    value 0 if no snapshot, balance value if a snapshot exists\\n    */\\n    function _valueAt(\\n        uint256 time,\\n        Snapshots storage snapshots\\n    ) private view returns (bool snapshotExist, uint256 value) {\\n        // When a valid snapshot is queried, there are three possibilities:\\n        //  a) The queried value was not modified after the snapshot was taken. Therefore, a snapshot entry was never\\n        //  created for this id, and all stored snapshot ids are smaller than the requested one. The value that corresponds\\n        //  to this id is the current one.\\n        //  b) The queried value was modified after the snapshot was taken. Therefore, there will be an entry with the\\n        //  requested id, and its value is the one to return.\\n        //  c) More snapshots were created after the requested one, and the queried value was later modified. There will be\\n        //  no entry for the requested id: the value that corresponds to it is that of the smallest snapshot id that is\\n        //  larger than the requested one.\\n        //\\n        // In summary, we need to find an element in an array, returning the index of the smallest value that is larger if\\n        // it is not found, unless said value doesn't exist (e.g. when all values are smaller). Arrays.findUpperBound does\\n        // exactly this.\\n\\n        uint256 index = snapshots.ids.findUpperBound(time);\\n\\n        if (index == snapshots.ids.length) {\\n            return (false, 0);\\n        } else {\\n            return (true, snapshots.values[index]);\\n        }\\n    }\\n\\n    /**\\n    @dev See {OpenZeppelin - ERC20Snapshot}\\n    */\\n    function _updateAccountSnapshot(address account) private {\\n        _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account));\\n    }\\n\\n    /**\\n    @dev See {OpenZeppelin - ERC20Snapshot}\\n    */\\n    function _updateTotalSupplySnapshot() private {\\n        _updateSnapshot(_totalSupplySnapshots, totalSupply());\\n    }\\n\\n    /** \\n    @dev \\n    Inside a struct Snapshots:\\n    - Update the array ids to the current Snapshot time if this one is greater than the snapshot times stored in ids.\\n    - Update the value to the corresponding value.\\n    */\\n    function _updateSnapshot(\\n        Snapshots storage snapshots,\\n        uint256 currentValue\\n    ) private {\\n        uint256 current = _currentSnapshotTime;\\n        if (_lastSnapshot(snapshots.ids) < current) {\\n            snapshots.ids.push(current);\\n            snapshots.values.push(currentValue);\\n        }\\n    }\\n\\n    /** \\n    @dev\\n    Set the currentSnapshotTime by retrieving the most recent snapshot\\n    if a snapshot exists, clear all past scheduled snapshot\\n    */\\n    function _setCurrentSnapshot() internal {\\n        (\\n            uint256 scheduleSnapshotTime,\\n            uint256 scheduleSnapshotIndex\\n        ) = _findScheduledMostRecentPastSnapshot();\\n        if (scheduleSnapshotTime > 0) {\\n            _currentSnapshotTime = scheduleSnapshotTime;\\n            _currentSnapshotIndex = scheduleSnapshotIndex;\\n        }\\n    }\\n\\n    /**\\n    @return the last snapshot time inside a snapshot ids array\\n    */\\n    function _lastSnapshot(\\n        uint256[] storage ids\\n    ) private view returns (uint256) {\\n        if (ids.length == 0) {\\n            return 0;\\n        } else {\\n            return ids[ids.length - 1];\\n        }\\n    }\\n\\n    /** \\n    @dev Find the snapshot index at the specified time\\n    @return (true, index) if the snapshot exists, (false, 0) otherwise\\n    */\\n    function _findScheduledSnapshotIndex(\\n        uint256 time\\n    ) private view returns (bool, uint256) {\\n        uint256 indexFound = _scheduledSnapshots.findUpperBound(time);\\n        // Exact match\\n        if (\\n            indexFound != _scheduledSnapshots.length &&\\n            _scheduledSnapshots[indexFound] == time\\n        ) {\\n            return (true, indexFound);\\n        }\\n        // Upper bound match\\n        else if (indexFound != _scheduledSnapshots.length) {\\n            return (false, indexFound);\\n        }\\n        // no match\\n        else {\\n            return (false, _scheduledSnapshots.length);\\n        }\\n    }\\n\\n    /** \\n    @dev find the most recent past snapshot\\n    The complexity of this function is O(N) because we go through the whole list\\n    */\\n    function _findScheduledMostRecentPastSnapshot()\\n        private\\n        view\\n        returns (uint256 time, uint256 index)\\n    {\\n        uint256 currentArraySize = _scheduledSnapshots.length;\\n        // no snapshot or the current snapshot already points on the last snapshot\\n        if (\\n            currentArraySize == 0 ||\\n            ((_currentSnapshotIndex + 1 == currentArraySize) && (time != 0))\\n        ) {\\n            return (0, currentArraySize);\\n        }\\n        uint256 mostRecent = 0;\\n        index = currentArraySize;\\n        for (uint256 i = _currentSnapshotIndex; i < currentArraySize; ++i) {\\n            if (_scheduledSnapshots[i] <= block.timestamp) {\\n                mostRecent = _scheduledSnapshots[i];\\n                index = i;\\n            } else {\\n                // All snapshot are planned in the futur\\n                break;\\n            }\\n        }\\n        return (mostRecent, index);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/modules/internal/ValidationModuleInternal.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MPL-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../../../openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../interfaces/IEIP1404/IEIP1404Wrapper.sol\\\";\\n\\n/**\\n * @dev Validation module.\\n *\\n * Useful for to restrict and validate transfers\\n */\\nabstract contract ValidationModuleInternal is\\n    Initializable,\\n    ContextUpgradeable\\n{\\n    /**\\n     * @dev Emitted when a rule engine is set.\\n     */\\n    event RuleEngine(IEIP1404Wrapper indexed newRuleEngine);\\n\\n    IEIP1404Wrapper public ruleEngine;\\n\\n    /**\\n     * @dev Initializes the contract with rule engine.\\n     */\\n    function __Validation_init(\\n        IEIP1404Wrapper ruleEngine_\\n    ) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Validation_init_unchained(ruleEngine_);\\n    }\\n\\n    function __Validation_init_unchained(\\n        IEIP1404Wrapper ruleEngine_\\n    ) internal onlyInitializing {\\n        if (address(ruleEngine_) != address(0)) {\\n            ruleEngine = ruleEngine_;\\n            emit RuleEngine(ruleEngine);\\n        }\\n    }\\n\\n    /**\\n    @dev before making a call to this function, you have to check if a ruleEngine is set.\\n    */\\n    function _validateTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal view returns (bool) {\\n        return ruleEngine.validateTransfer(from, to, amount);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/modules/PAYMENT_REDEMPTION_TOKEN_BASE.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MPL-2.0\\n\\npragma solidity ^0.8.17;\\n\\n// required OZ imports here\\nimport \\\"../../openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\\\";\\n\\nimport \\\"./wrapper/mandatory/BaseModule.sol\\\";\\nimport \\\"./wrapper/mandatory/BurnModule.sol\\\";\\nimport \\\"./wrapper/mandatory/MintModule.sol\\\";\\nimport \\\"./wrapper/mandatory/EnforcementModule.sol\\\";\\nimport \\\"./wrapper/mandatory/ERC20BaseModule.sol\\\";\\nimport \\\"./wrapper/mandatory/PauseModule.sol\\\";\\nimport \\\"./wrapper/optional/ValidationModule.sol\\\";\\nimport \\\"./security/AuthorizationModule.sol\\\";\\nimport \\\"../interfaces/IEIP1404/IEIP1404Wrapper.sol\\\";\\n\\nabstract contract PAYMENT_REDEMPTION_TOKEN_BASE is\\n    Initializable,\\n    ContextUpgradeable,\\n    BaseModule,\\n    PauseModule,\\n    MintModule,\\n    BurnModule,\\n    EnforcementModule,\\n    ValidationModule,\\n    ERC20BaseModule\\n{\\n    /**\\n    @notice \\n    initialize the proxy contract\\n    The calls to this function will revert if the contract was deployed without a proxy\\n    */\\n    function initialize(\\n        address admin,\\n        string memory nameIrrevocable,\\n        string memory symbolIrrevocable,\\n        string memory tokenId_,\\n        string memory terms_,\\n        IEIP1404Wrapper ruleEngine_,\\n        string memory information_,\\n        uint256 flag_,\\n        bool restrictTransfer_\\n    ) public initializer {\\n        __CMTAT_init(\\n            admin,\\n            nameIrrevocable,\\n            symbolIrrevocable,\\n            tokenId_,\\n            terms_,\\n            ruleEngine_,\\n            information_,\\n            flag_,\\n            restrictTransfer_\\n        );\\n    }\\n\\n    /**\\n    @dev calls the different initialize functions from the different modules\\n    */\\n    function __CMTAT_init(\\n        address admin,\\n        string memory nameIrrevocable,\\n        string memory symbolIrrevocable,\\n        string memory tokenId_,\\n        string memory terms_,\\n        IEIP1404Wrapper ruleEngine_,\\n        string memory information_,\\n        uint256 flag_,\\n        bool restrictTransfer_\\n    ) internal onlyInitializing {\\n        /* OpenZeppelin library */\\n        // OZ init_unchained functions are called firstly due to inheritance\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(nameIrrevocable, symbolIrrevocable);\\n        // AccessControlUpgradeable inherits from ERC165Upgradeable\\n        __ERC165_init_unchained();\\n        // AuthorizationModule inherits from AccessControlUpgradeable\\n        __AccessControl_init_unchained();\\n        __Pausable_init_unchained();\\n\\n        /* Internal Modules */\\n        __Enforcement_init_unchained();\\n        __Validation_init_unchained(ruleEngine_);\\n\\n        /* Wrapper */\\n        // AuthorizationModule_init_unchained is called firstly due to inheritance\\n        __AuthorizationModule_init_unchained(admin);\\n        __BurnModule_init_unchained();\\n        __MintModule_init_unchained();\\n        // EnforcementModule_init_unchained is called before ValidationModule_init_unchained due to inheritance\\n        __EnforcementModule_init_unchained();\\n        __ERC20Module_init_unchained(0);\\n        // PauseModule_init_unchained is called before ValidationModule_init_unchained due to inheritance\\n        __PauseModule_init_unchained();\\n        __ValidationModule_init_unchained(restrictTransfer_);\\n\\n        /* Other modules */\\n        __Base_init_unchained(tokenId_, terms_, information_, flag_);\\n\\n        /* own function */\\n        __CMTAT_init_unchained();\\n    }\\n\\n    function __CMTAT_init_unchained() internal onlyInitializing {\\n        // no variable to initialize\\n    }\\n\\n    /**\\n    @notice Returns the number of decimals used to get its user representation.\\n    */\\n    function decimals()\\n        public\\n        view\\n        virtual\\n        override(ERC20Upgradeable, ERC20BaseModule)\\n        returns (uint8)\\n    {\\n        return ERC20BaseModule.decimals();\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    )\\n        public\\n        virtual\\n        override(ERC20Upgradeable, ERC20BaseModule)\\n        returns (bool)\\n    {\\n        return ERC20BaseModule.transferFrom(sender, recipient, amount);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal view override(ERC20Upgradeable) {\\n        if(!validateTransfer(from, to, amount)) {\\n            revert TransferRejected();\\n        }\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/modules/PAYMENT_REDEMPTION_TOKEN_FACTORY_BASE.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\\\";\\n\\nimport \\\"../../openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\\\";\\nimport \\\"../PAYMENT_REDEMPTION_TOKEN_PROXY.sol\\\";\\nimport \\\"../modules/CMTAT_BASE.sol\\\";\\nimport \\\"../common/errors.sol\\\";\\n\\nimport \\\"../../openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\\\";\\n\\nstruct RoleMap {\\n    address account;\\n    bytes32 role;\\n}\\n\\nerror InvalidRole();\\n\\ncontract PAYMENT_REDEMPTION_TOKEN_FACTORY_BASE is Initializable, ContextUpgradeable {\\n\\n    address public paymentRedemptionTokenBeacon;\\n\\n    function initialize(address paymentRedemptionTokenBeacon_) public{\\n        __PAYMENT_REDEMPTION_TOKEN_FACTORY_init(paymentRedemptionTokenBeacon_);\\n    }\\n\\n    function __PAYMENT_REDEMPTION_TOKEN_FACTORY_init(address paymentRedemptionTokenBeacon_) internal initializer {\\n        __Context_init_unchained();\\n        __PAYMENT_REDEMPTION_TOKEN_FACTORY_init_unchained(paymentRedemptionTokenBeacon_);\\n    }\\n\\n    function __PAYMENT_REDEMPTION_TOKEN_FACTORY_init_unchained(address paymentRedemptionTokenBeacon_) internal initializer {\\n        if(paymentRedemptionTokenBeacon_ == address(0)) {\\n            revert Errors.NoZeroAddress();\\n        }\\n        paymentRedemptionTokenBeacon = paymentRedemptionTokenBeacon_;\\n    }\\n\\n    function createPaymentRedemptionToken(uint256 paymentIndex, RoleMap[] memory roles) public returns(address){\\n        CMTAT_BASE cmtat = CMTAT_BASE(_msgSender());\\n        bytes memory initializationData = abi.encodeWithSelector(\\n            PAYMENT_REDEMPTION_TOKEN_PROXY(address(this)).initialize.selector,\\n            address(this),\\n            string.concat(cmtat.name(), \\\" \\\", \\\"payment\\\", \\\" \\\", StringsUpgradeable.toString(paymentIndex)),\\n            string.concat(cmtat.symbol(), \\\"P\\\", StringsUpgradeable.toString(paymentIndex)),\\n            cmtat.tokenId(),\\n            cmtat.terms(),\\n            cmtat.ruleEngine(),\\n            cmtat.information(),\\n            cmtat.flag(),\\n            cmtat.restrictTransfer()\\n        );\\n\\n        PAYMENT_REDEMPTION_TOKEN_PROXY paymentRedemptionToken = PAYMENT_REDEMPTION_TOKEN_PROXY(address(new BeaconProxy(paymentRedemptionTokenBeacon, initializationData)));\\n\\n        for(uint256 i = 0; i < roles.length; i++){\\n            if(!cmtat.hasRole(roles[i].role, roles[i].account)) {\\n                revert InvalidRole();\\n            }\\n            paymentRedemptionToken.grantRole(roles[i].role, roles[i].account);\\n        }\\n\\n        paymentRedemptionToken.grantRole(keccak256(\\\"MINTER_ROLE\\\"), address(cmtat));\\n        paymentRedemptionToken.grantRole(keccak256(\\\"BURNER_ROLE\\\"), address(cmtat));\\n        paymentRedemptionToken.grantRole(keccak256(\\\"PAUSER_ROLE\\\"), address(cmtat));\\n\\n        paymentRedemptionToken.pause();\\n\\n        paymentRedemptionToken.renounceRole(keccak256(\\\"DEFAULT_ADMIN_ROLE\\\"), address(this));\\n\\n        return address(paymentRedemptionToken);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/modules/security/AuthorizationModule.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MPL-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../../common/errors.sol\\\";\\n\\nimport \\\"../../../openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"../../../openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract AuthorizationModule is AccessControlUpgradeable {\\n    // BurnModule\\n    bytes32 public constant BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\");\\n    // EnforcementModule\\n    bytes32 public constant ENFORCER_ROLE = keccak256(\\\"ENFORCER_ROLE\\\");\\n    // MintModule\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    // PauseModule\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    // SnapshotModule\\n    bytes32 public constant SNAPSHOOTER_ROLE = keccak256(\\\"SNAPSHOOTER_ROLE\\\");\\n    // DebtModule\\n    bytes32 public constant DEBT_ROLE = keccak256(\\\"DEBT_ROLE\\\");\\n    // DistributionModule\\n    bytes32 public constant PAYMENT_UPDATE_ROLE =\\n        keccak256(\\\"PAYMENT_UPDATE_ROLE\\\");\\n    // CreditEvents\\n    bytes32 public constant DEBT_CREDIT_EVENT_ROLE =\\n        keccak256(\\\"DEBT_CREDIT_EVENT_ROLE\\\");\\n    // IssuanceProgram.sol\\n    bytes32 public constant ISSUER_ROLE = keccak256(\\\"ISSUER_ROLE\\\");\\n\\n    function __AuthorizationModule_init(\\n        address admin\\n    ) internal onlyInitializing {\\n        /* OpenZeppelin */\\n        __Context_init_unchained();\\n        // AccessControlUpgradeable inherits from ERC165Upgradeable\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n\\n        /* own function */\\n        __AuthorizationModule_init_unchained(admin);\\n    }\\n\\n    /**\\n     * @dev Grants the different roles to the\\n     * account that deploys the contract.\\n     *\\n     */\\n    function __AuthorizationModule_init_unchained(\\n        address admin\\n    ) internal onlyInitializing {\\n        if (admin == address(0)) {\\n            revert Errors.NoZeroAddress();\\n        }\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n    }\\n\\n    /*\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(\\n        bytes32 role,\\n        address account\\n    ) public view virtual override returns (bool) {\\n        // The Default Admin has all roles\\n        if (AccessControlUpgradeable.hasRole(DEFAULT_ADMIN_ROLE, account)) {\\n            return true;\\n        }\\n        return AccessControlUpgradeable.hasRole(role, account);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/modules/wrapper/mandatory/BaseModule.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MPL-2.0\\n\\npragma solidity ^0.8.17;\\n\\n// required OZ imports here\\nimport \\\"../../../../openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../security/AuthorizationModule.sol\\\";\\n\\nabstract contract BaseModule is AuthorizationModule {\\n    // to initialize inside the implementation constructor when deployed with a Proxy\\n    bool internal deployedWithProxy;\\n    /* Events */\\n    event Term(string indexed newTermIndexed, string newTerm);\\n    event TokenId(string indexed newTokenIdIndexed, string newTokenId);\\n    event Information(\\n        string indexed newInformationIndexed,\\n        string newInformation\\n    );\\n    event Flag(uint256 indexed newFlag);\\n\\n    /* Variables */\\n    string public tokenId;\\n    string public terms;\\n    string public information;\\n    uint256 public flag;\\n\\n    /* Initializers */\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __Base_init(\\n        string memory tokenId_,\\n        string memory terms_,\\n        string memory information_,\\n        uint256 flag_,\\n        address admin\\n    ) internal onlyInitializing {\\n        /* OpenZeppelin */\\n        __Context_init_unchained();\\n        // AccessControlUpgradeable inherits from ERC165Upgradeable\\n        __ERC165_init_unchained();\\n        // AuthorizationModule inherits from AccessControlUpgradeable\\n        __AccessControl_init_unchained();\\n\\n        /* CMTAT modules */\\n        // Security\\n        __AuthorizationModule_init_unchained(admin);\\n\\n        // own function\\n        __Base_init_unchained(tokenId_, terms_, information_, flag_);\\n    }\\n\\n    function __Base_init_unchained(\\n        string memory tokenId_,\\n        string memory terms_,\\n        string memory information_,\\n        uint256 flag_\\n    ) internal onlyInitializing {\\n        tokenId = tokenId_;\\n        terms = terms_;\\n        information = information_;\\n        flag = flag_;\\n    }\\n\\n    //    /* Methods */\\n    //    /*\\n    //    @notice the tokenId will be changed even if the new value is the same as the current one\\n    //    */\\n    //    function setTokenId(\\n    //        string memory tokenId_\\n    //    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n    //        tokenId = tokenId_;\\n    //        emit TokenId(tokenId_, tokenId_);\\n    //    }\\n    //\\n    //    /*\\n    //    @notice The terms will be changed even if the new value is the same as the current one\\n    //    */\\n    //    function setTerms(\\n    //        string memory terms_\\n    //    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n    //        terms = terms_;\\n    //        emit Term(terms_, terms_);\\n    //    }\\n    //\\n    //    /*\\n    //    @notice The information will be changed even if the new value is the same as the current one\\n    //    */\\n    //    function setInformation(\\n    //        string memory information_\\n    //    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n    //        information = information_;\\n    //        emit Information(information_, information_);\\n    //    }\\n    //\\n    //    function setFlag(uint256 flag_) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n    //        flag = flag_;\\n    //        emit Flag(flag_);\\n    //    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/modules/wrapper/mandatory/BurnModule.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MPL-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../../../../openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"../../../../openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../security/AuthorizationModule.sol\\\";\\n\\nabstract contract BurnModule is ERC20Upgradeable, AuthorizationModule {\\n    event Burn(address indexed owner, uint256 amount, string reason);\\n\\n    function __BurnModule_init(\\n        string memory name_,\\n        string memory symbol_,\\n        address admin\\n    ) internal onlyInitializing {\\n        /* OpenZeppelin */\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n        // AccessControlUpgradeable inherits from ERC165Upgradeable\\n        __ERC165_init_unchained();\\n        // AuthorizationModule inherits from AccessControlUpgradeable\\n        __AccessControl_init_unchained();\\n\\n        /* CMTAT modules */\\n        // Security\\n        __AuthorizationModule_init_unchained(admin);\\n\\n        // own function\\n        __BurnModule_init_unchained();\\n    }\\n\\n    function __BurnModule_init_unchained() internal onlyInitializing {\\n        // no variable to initialize\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`\\n     *\\n     * See {ERC20-_burn}\\n     */\\n    function forceBurn(\\n        address account,\\n        uint256 amount,\\n        string memory reason\\n    ) public onlyRole(BURNER_ROLE) {\\n        _burn(account, amount);\\n        emit Burn(account, amount, reason);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/modules/wrapper/mandatory/EnforcementModule.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MPL-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../../../../openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol\\\";\\nimport \\\"../../../../openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../security/AuthorizationModule.sol\\\";\\nimport \\\"../../internal/EnforcementModuleInternal.sol\\\";\\n\\n/**\\n * @dev Enforcement module.\\n *\\n * Allows the issuer to freeze transfers from a given address\\n */\\nabstract contract EnforcementModule is\\n    EnforcementModuleInternal,\\n    AuthorizationModule\\n{\\n    string internal constant TEXT_TRANSFER_REJECTED_FROM_FROZEN =\\n        \\\"FROM is frozen\\\";\\n\\n    string internal constant TEXT_TRANSFER_REJECTED_TO_FROZEN = \\\"TO is frozen\\\";\\n\\n    function __EnforcementModule_init(address admin) internal onlyInitializing {\\n        /* OpenZeppelin */\\n        __Context_init_unchained();\\n        // AccessControlUpgradeable inherits from ERC165Upgradeable\\n        __ERC165_init_unchained();\\n        // AuthorizationModule inherits from AccessControlUpgradeable\\n        __AccessControl_init_unchained();\\n\\n        /* CMTAT modules */\\n        // Internal\\n        __Enforcement_init_unchained();\\n\\n        // Security\\n        __AuthorizationModule_init_unchained(admin);\\n\\n        // own function\\n        __EnforcementModule_init_unchained();\\n    }\\n\\n    function __EnforcementModule_init_unchained() internal onlyInitializing {\\n        // no variable to initialize\\n    }\\n\\n    /**\\n     * @notice Freezes an address.\\n     * @param account the account to freeze\\n     * @param reason indicate why the account was frozen.\\n     */\\n    function freeze(\\n        address account,\\n        string memory reason\\n    ) public onlyRole(ENFORCER_ROLE) returns (bool) {\\n        return _freeze(account, reason);\\n    }\\n\\n    /**\\n     * @notice Unfreezes an address.\\n     * @param account the account to unfreeze\\n     * @param reason indicate why the account was unfrozen.\\n     *\\n     *\\n     */\\n    function unfreeze(\\n        address account,\\n        string memory reason\\n    ) public onlyRole(ENFORCER_ROLE) returns (bool) {\\n        return _unfreeze(account, reason);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/modules/wrapper/mandatory/ERC20BaseModule.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MPL-2.0\\n\\npragma solidity ^0.8.17;\\n\\n// required OZ imports here\\nimport \\\"../../../../openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../../../openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\nabstract contract ERC20BaseModule is ERC20Upgradeable {\\n    /* Events */\\n    event Spend(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /* Variables */\\n    uint8 private _decimals;\\n\\n    /* Initializers */\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20Module_init(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) internal onlyInitializing {\\n        /* OpenZeppelin */\\n        __Context_init_unchained();\\n        __ERC20_init(name_, symbol_);\\n\\n        /* own function */\\n        __ERC20Module_init_unchained(decimals_);\\n    }\\n\\n    function __ERC20Module_init_unchained(\\n        uint8 decimals_\\n    ) internal onlyInitializing {\\n        _decimals = decimals_;\\n    }\\n\\n    /* Methods */\\n    /**\\n     * @notice Returns the number of decimals used to get its user representation.\\n     * @dev\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        bool result = super.transferFrom(sender, recipient, amount);\\n        // The result will be normally always true because OpenZeppelin uses require to check all the conditions.\\n        if (result) {\\n            emit Spend(sender, _msgSender(), amount);\\n        }\\n\\n        return result;\\n    }\\n\\n    // Commented out seems not necessary and breaks ERC20 interface\\n    //    /**\\n    //     * @dev See {IERC20-approve}.\\n    //     *\\n    //     * Requirements:\\n    //     *\\n    //     * - `spender` cannot be the zero address.\\n    //     */\\n    //    function approve(\\n    //        address spender,\\n    //        uint256 amount,\\n    //        uint256 currentAllowance\\n    //    ) public virtual returns (bool) {\\n    //        require(\\n    //            allowance(_msgSender(), spender) == currentAllowance,\\n    //            \\\"CMTAT: current allowance is not right\\\"\\n    //        );\\n    //        super.approve(spender, amount);\\n    //        return true;\\n    //    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/modules/wrapper/mandatory/MintModule.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MPL-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../../../../openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"../../../../openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../security/AuthorizationModule.sol\\\";\\n\\nabstract contract MintModule is ERC20Upgradeable, AuthorizationModule {\\n    event Mint(address indexed beneficiary, uint256 amount);\\n\\n    function __MintModule_init(\\n        string memory name_,\\n        string memory symbol_,\\n        address admin\\n    ) internal onlyInitializing {\\n        /* OpenZeppelin */\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n        // AccessControlUpgradeable inherits from ERC165Upgradeable\\n        __ERC165_init_unchained();\\n        // AuthorizationModule inherits from AccessControlUpgradeable\\n        __AccessControl_init_unchained();\\n\\n        /* CMTAT modules */\\n        // Security\\n        __AuthorizationModule_init_unchained(admin);\\n\\n        // own function\\n        __MintModule_init_unchained();\\n    }\\n\\n    function __MintModule_init_unchained() internal onlyInitializing {\\n        // no variable to initialize\\n    }\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     *\\n     * See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to, uint256 amount) public onlyRole(MINTER_ROLE) {\\n        _mint(to, amount);\\n        emit Mint(to, amount);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/modules/wrapper/mandatory/PauseModule.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MPL-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../../../../openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol\\\";\\nimport \\\"../../../../openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../security/AuthorizationModule.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract PauseModule is PausableUpgradeable, AuthorizationModule {\\n    string internal constant TEXT_TRANSFER_REJECTED_PAUSED =\\n        \\\"All transfers paused\\\";\\n\\n    function __PauseModule_init(address admin) internal onlyInitializing {\\n        /* OpenZeppelin */\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n        // AccessControlUpgradeable inherits from ERC165Upgradeable\\n        __ERC165_init_unchained();\\n        // AuthorizationModule inherits from AccessControlUpgradeable\\n        __AccessControl_init_unchained();\\n\\n        /* CMTAT modules */\\n        // Security\\n        __AuthorizationModule_init_unchained(admin);\\n\\n        // own function\\n        __PauseModule_init_unchained();\\n    }\\n\\n    function __PauseModule_init_unchained() internal onlyInitializing {\\n        // no variable to initialize\\n    }\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/modules/wrapper/optional/DebtModule/CreditEventsModule.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MPL-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../../../../../openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"../../../../../openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../../../interfaces/IDebtGlobal.sol\\\";\\nimport \\\"../../../security/AuthorizationModule.sol\\\";\\n\\nabstract contract CreditEventsModule is\\n    IDebtGlobal,\\n    Initializable,\\n    ContextUpgradeable,\\n    AuthorizationModule\\n{\\n    CreditEvents public creditEvents;\\n\\n    /* Events */\\n    event FlagDefault(bool indexed newFlagDefault);\\n    event FlagRedeemed(bool indexed newFlagRedeemed);\\n    event Rating(string indexed newRatingIndexed, string newRating);\\n\\n    function __CreditEvents_init(address admin) internal onlyInitializing {\\n        /* OpenZeppelin */\\n        __Context_init_unchained();\\n\\n        // AccessControlUpgradeable inherits from ERC165Upgradeable\\n        __ERC165_init_unchained();\\n        // AuthorizationModule inherits from AccessControlUpgradeable\\n        __AccessControl_init_unchained();\\n\\n        /* CMTAT modules */\\n        // Security\\n        __AuthorizationModule_init_unchained(admin);\\n\\n        // own function\\n        __CreditEvents_init_unchained();\\n    }\\n\\n    function __CreditEvents_init_unchained() internal onlyInitializing {\\n        // no variable to initialize\\n    }\\n\\n    /*\\n    @notice Set all attributes of creditEvents\\n    The values of all attributes will be changed even if the new values are the same as the current ones\\n    */\\n    function setCreditEvents(\\n        bool flagDefault_,\\n        bool flagRedeemed_,\\n        string memory rating_\\n    ) public onlyRole(DEBT_CREDIT_EVENT_ROLE) {\\n        creditEvents = (CreditEvents(flagDefault_, flagRedeemed_, rating_));\\n        emit FlagDefault(flagDefault_);\\n        emit FlagRedeemed(flagRedeemed_);\\n        emit Rating(rating_, rating_);\\n    }\\n\\n    function setFlagDefault(\\n        bool flagDefault_\\n    ) public onlyRole(DEBT_CREDIT_EVENT_ROLE) {\\n        creditEvents.flagDefault = flagDefault_;\\n        emit FlagDefault(flagDefault_);\\n    }\\n\\n    function setFlagRedeemed(\\n        bool flagRedeemed_\\n    ) public onlyRole(DEBT_CREDIT_EVENT_ROLE) {\\n        creditEvents.flagRedeemed = flagRedeemed_;\\n        emit FlagRedeemed(flagRedeemed_);\\n    }\\n\\n\\n    function setRating(\\n        string memory rating_\\n    ) public onlyRole(DEBT_CREDIT_EVENT_ROLE) {\\n        creditEvents.rating = rating_;\\n        emit Rating(rating_, rating_);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/modules/wrapper/optional/DebtModule/DebtBaseModule.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MPL-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../../../../../openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"../../../../../openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../../../interfaces/IDebtGlobal.sol\\\";\\nimport \\\"../../../security/AuthorizationModule.sol\\\";\\nimport \\\"../../../../common/errors.sol\\\";\\n\\nerror DuplicateLabel(uint256 label);\\n\\nabstract contract DebtBaseModule is\\n    IDebtGlobal,\\n    Initializable,\\n    ContextUpgradeable,\\n    AuthorizationModule\\n{\\n    DebtBase public debt;\\n    DebtAdditionalInfo public debtAdditionalInfo;\\n\\n    /* Events */\\n    event InterestRate(uint256 newInterestRate);\\n    event ParValue(uint256 newParValue);\\n    event Guarantor(string indexed newGuarantorIndexed, string newGuarantor);\\n    event BondHolder(string indexed newBondHolderIndexed, string newBondHolder);\\n    event MaturityDate(\\n        string indexed newMaturityDateIndexed,\\n        string newMaturityDate\\n    );\\n    event InterestScheduleFormat(\\n        string indexed newInterestScheduleFormatIndexed,\\n        string newInterestScheduleFormat\\n    );\\n    event InterestPaymentDate(\\n        string indexed newInterestPaymentDateIndexed,\\n        string newInterestPaymentDate\\n    );\\n    event DayCountConvention(\\n        string indexed newDayCountConventionIndexed,\\n        string newDayCountConvention\\n    );\\n    event BusinessDayConvention(\\n        string indexed newBusinessDayConventionIndexed,\\n        string newBusinessDayConvention\\n    );\\n    event PublicHolidaysCalendar(\\n        string indexed newPublicHolidaysCalendarIndexed,\\n        string newPublicHolidaysCalendar\\n    );\\n    event IssuanceDate(\\n        string indexed newIssuanceDateIndexed,\\n        string newIssuanceDate\\n    );\\n    event CouponFrequency(\\n        string indexed newCouponFrequencyIndexed,\\n        string newCouponFrequency\\n    );\\n\\n    event IssuerName(string indexed issuerName_);\\n    event IssuerInfo(string indexed issuerInfo_);\\n    event Currency(address indexed currency_);\\n    event Labels(uint8[] labels_);\\n\\n    function __DebtBaseModule_init(address admin) internal onlyInitializing {\\n        /* OpenZeppelin */\\n        __Context_init_unchained();\\n\\n        // AccessControlUpgradeable inherits from ERC165Upgradeable\\n        __ERC165_init_unchained();\\n        // AuthorizationModule inherits from AccessControlUpgradeable\\n        __AccessControl_init_unchained();\\n\\n        /* CMTAT modules */\\n        // Security\\n        __AuthorizationModule_init_unchained(admin);\\n\\n        // own function\\n        __DebtBaseModule_init_unchained();\\n    }\\n\\n    function __DebtBaseModule_init_unchained() internal onlyInitializing {\\n        // no variable to initialize\\n    }\\n\\n    /*\\n    @notice Set all attributes of debt\\n    The values of all attributes will be changed even if the new values are the same as the current ones\\n    */\\n    function setDebt(DebtBase memory debt_) public onlyRole(DEBT_ROLE) {\\n        // setGuarantor\\n        debt = (\\n            DebtBase(\\n                debt_.interestRate,\\n                debt_.parValue,\\n                debt_.guarantor,\\n                debt_.bondHolder,\\n                debt_.maturityDate,\\n                debt_.interestScheduleFormat,\\n                debt_.interestPaymentDate,\\n                debt_.dayCountConvention,\\n                debt_.businessDayConvention,\\n                debt_.publicHolidaysCalendar,\\n                debt_.issuanceDate,\\n                debt_.couponFrequency\\n            )\\n        );\\n        emit InterestRate(debt_.interestRate);\\n        emit ParValue(debt_.parValue);\\n        emit Guarantor(debt_.guarantor, debt_.guarantor);\\n        emit BondHolder(debt_.bondHolder, debt_.bondHolder);\\n        emit MaturityDate(debt_.maturityDate, debt_.maturityDate);\\n        emit InterestScheduleFormat(\\n            debt_.interestScheduleFormat,\\n            debt_.interestScheduleFormat\\n        );\\n        emit InterestPaymentDate(\\n            debt_.interestPaymentDate,\\n            debt_.interestPaymentDate\\n        );\\n        emit DayCountConvention(\\n            debt_.dayCountConvention,\\n            debt_.dayCountConvention\\n        );\\n        emit BusinessDayConvention(\\n            debt_.businessDayConvention,\\n            debt_.businessDayConvention\\n        );\\n        emit PublicHolidaysCalendar(\\n            debt_.publicHolidaysCalendar,\\n            debt_.publicHolidaysCalendar\\n        );\\n\\n        emit IssuanceDate(debt_.issuanceDate, debt_.issuanceDate);\\n\\n        emit CouponFrequency(debt_.couponFrequency, debt_.couponFrequency);\\n    }\\n\\n    function setDebtAdditionalInfo(\\n        string memory issuerName_,\\n        string memory issuerInfo_,\\n        IERC20 currency_,\\n        uint8[] memory labels_\\n    ) public onlyRole(DEBT_ROLE) {\\n        if(address(currency_) == address(0)) revert Errors.NoZeroAddress();\\n        debtAdditionalInfo = (\\n            DebtAdditionalInfo(\\n                issuerName_,\\n                issuerInfo_,\\n                currency_,\\n                labels_\\n            )\\n        );\\n        emit IssuerName(issuerName_);\\n        emit IssuerInfo(issuerInfo_);\\n        emit Currency(address(currency_));\\n        emit Labels(labels_);\\n    }\\n\\n    function getLabels() public view returns (uint8[] memory) {\\n        return debtAdditionalInfo.labels;\\n    }\\n\\n    /*\\n    @notice The call will be reverted if the new value of interestRate is the same as the current one\\n    */\\n    function setInterestRate(uint256 interestRate_) public onlyRole(DEBT_ROLE) {\\n        debt.interestRate = interestRate_;\\n        emit InterestRate(interestRate_);\\n    }\\n\\n    /*\\n    @notice The call will be reverted if the new value of parValue is the same as the current one\\n    */\\n    function setParValue(uint256 parValue_) public onlyRole(DEBT_ROLE) {\\n        debt.parValue = parValue_;\\n        emit ParValue(parValue_);\\n    }\\n\\n    /*\\n    @notice The Guarantor will be changed even if the new value is the same as the current one\\n    */\\n    function setGuarantor(string memory guarantor_) public onlyRole(DEBT_ROLE) {\\n        debt.guarantor = guarantor_;\\n        emit Guarantor(guarantor_, guarantor_);\\n    }\\n\\n    /*\\n    @notice The bonHolder will be changed even if the new value is the same as the current one\\n    */\\n    function setBondHolder(\\n        string memory bondHolder_\\n    ) public onlyRole(DEBT_ROLE) {\\n        debt.bondHolder = bondHolder_;\\n        emit BondHolder(bondHolder_, bondHolder_);\\n    }\\n\\n    /*\\n    @notice The maturityDate will be changed even if the new value is the same as the current one\\n    */\\n    function setMaturityDate(\\n        string memory maturityDate_\\n    ) public onlyRole(DEBT_ROLE) {\\n        debt.maturityDate = maturityDate_;\\n        emit MaturityDate(maturityDate_, maturityDate_);\\n    }\\n\\n    /*\\n    @notice The interestScheduleFormat will be changed even if the new value is the same as the current one\\n    */\\n    function setInterestScheduleFormat(\\n        string memory interestScheduleFormat_\\n    ) public onlyRole(DEBT_ROLE) {\\n        debt.interestScheduleFormat = interestScheduleFormat_;\\n        emit InterestScheduleFormat(\\n            interestScheduleFormat_,\\n            interestScheduleFormat_\\n        );\\n    }\\n\\n    /*\\n    @notice The interestPaymentDate will be changed even if the new value is the same as the current one\\n    */\\n    function setInterestPaymentDate(\\n        string memory interestPaymentDate_\\n    ) public onlyRole(DEBT_ROLE) {\\n        debt.interestPaymentDate = interestPaymentDate_;\\n        emit InterestPaymentDate(interestPaymentDate_, interestPaymentDate_);\\n    }\\n\\n    /*\\n    @notice The dayCountConvention will be changed even if the new value is the same as the current one\\n    */\\n    function setDayCountConvention(\\n        string memory dayCountConvention_\\n    ) public onlyRole(DEBT_ROLE) {\\n        debt.dayCountConvention = dayCountConvention_;\\n        emit DayCountConvention(dayCountConvention_, dayCountConvention_);\\n    }\\n\\n    /*\\n    @notice The businessDayConvention will be changed even if the new value is the same as the current one\\n    */\\n    function setBusinessDayConvention(\\n        string memory businessDayConvention_\\n    ) public onlyRole(DEBT_ROLE) {\\n        debt.businessDayConvention = businessDayConvention_;\\n        emit BusinessDayConvention(\\n            businessDayConvention_,\\n            businessDayConvention_\\n        );\\n    }\\n\\n    /*\\n    @notice The publicHolidayCalendar will be changed even if the new value is the same as the current one\\n    */\\n    function setPublicHolidaysCalendar(\\n        string memory publicHolidaysCalendar_\\n    ) public onlyRole(DEBT_ROLE) {\\n        debt.publicHolidaysCalendar = publicHolidaysCalendar_;\\n        emit PublicHolidaysCalendar(\\n            publicHolidaysCalendar_,\\n            publicHolidaysCalendar_\\n        );\\n    }\\n\\n    /*\\n    @notice The issuanceDate will be changed even if the new value is the same as the current one\\n    */\\n    function setIssuanceDate(\\n        string memory issuanceDate_\\n    ) public onlyRole(DEBT_ROLE) {\\n        debt.issuanceDate = issuanceDate_;\\n        emit IssuanceDate(issuanceDate_, issuanceDate_);\\n    }\\n\\n    /*\\n    @notice The couponFrequency will be changed even if the new value is the same as the current one\\n    */\\n    function setCouponFrequency(\\n        string memory couponFrequency_\\n    ) public onlyRole(DEBT_ROLE) {\\n        debt.couponFrequency = couponFrequency_;\\n        emit CouponFrequency(couponFrequency_, couponFrequency_);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/modules/wrapper/optional/DebtModule/DistributionModule.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"../../../../common/errors.sol\\\";\\nimport \\\"../../../../../openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../../security/AuthorizationModule.sol\\\";\\nimport \\\"../../../internal/SnapshotModuleInternal.sol\\\";\\nimport \\\"../../../internal/ValidationModuleInternal.sol\\\";\\n\\nimport \\\"../../../../../openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol\\\";\\nimport \\\"../../../PAYMENT_REDEMPTION_TOKEN_BASE.sol\\\";\\nimport \\\"../../../../../openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../../PAYMENT_REDEMPTION_TOKEN_FACTORY_BASE.sol\\\";\\n\\nimport \\\"./DebtBaseModule.sol\\\";\\n\\nerror DistributionDateNotAfterLast(\\n    uint256 distributionDate,\\n    uint256 lastDistributionDate\\n);\\nerror PaymentNotCompleted(uint256 index);\\nerror OutOfOrder();\\nerror AlreadyMinted();\\nerror ImmutablePayment();\\nerror AlreadyRepaid();\\n\\nstruct Payment {\\n    uint256 amount; // per unit in currency\\n    uint256 distributionDateInSeconds;\\n    PAYMENT_REDEMPTION_TOKEN_BASE paymentRedemptionToken;\\n    bool allTokensMinted;\\n    bool mut;\\n}\\n\\ncontract DistributionModule is\\n    Initializable,\\n    ContextUpgradeable,\\n    SnapshotModuleInternal,\\n    AuthorizationModule,\\n    ValidationModule,\\n    DebtBaseModule\\n{\\n    Payment[] public payments;\\n    uint256 public pendingPaymentIndex;\\n    PAYMENT_REDEMPTION_TOKEN_FACTORY_BASE public paymentRedemptionTokenFactory;\\n\\n    event PushPayment(\\n        uint256 indexed amount,\\n        uint256 indexed distributionDate,\\n        address indexed paymentRedemptionToken\\n    );\\n    event UpdatePaymentAmount(uint256 indexed amount, address indexed signer);\\n    event PopPayment(uint256 indexed index);\\n    event Repay(uint256 indexed index, uint256 indexed amount);\\n    event RevertRepayment(uint256 indexed index, uint256 indexed amount);\\n    event MintPaymentRedemptionToken(\\n        address indexed paymentRedemptionToken,\\n        uint256 indexed amount,\\n        address indexed to\\n    );\\n    event ClaimPayment(\\n        uint256 indexed index,\\n        address indexed holder,\\n        uint256 indexed units\\n    );\\n\\n    function __DistributionModule_init(\\n        address admin,\\n        string memory name_,\\n        string memory symbol_,\\n        IEIP1404Wrapper ruleEngine_,\\n        address paymentRedemptionTokenFactory_,\\n        bool restrictTransfer_\\n    ) internal onlyInitializing {\\n        /* OpenZeppelin */\\n        __Context_init_unchained();\\n        // AccessControlUpgradeable inherits from ERC165Upgradeable\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n        __Pausable_init_unchained();\\n\\n        // SnapshotModuelInternal inherits from ERC20\\n        __ERC20_init_unchained(name_, symbol_);\\n\\n        // Wrapper\\n        __PauseModule_init_unchained();\\n        __EnforcementModule_init_unchained();\\n\\n        /* CMTAT modules */\\n        // Internal\\n        __Validation_init_unchained(ruleEngine_);\\n        __Snapshot_init_unchained();\\n\\n        // Security\\n        __AuthorizationModule_init_unchained(admin);\\n        __ValidationModule_init_unchained(restrictTransfer_);\\n\\n        __DebtBaseModule_init_unchained();\\n\\n        // own function\\n        __DistributionModule_init_unchained(paymentRedemptionTokenFactory_);\\n    }\\n\\n    function __DistributionModule_init_unchained(\\n        address paymentRedemptionTokenFactory_\\n    ) public onlyInitializing {\\n        paymentRedemptionTokenFactory = PAYMENT_REDEMPTION_TOKEN_FACTORY_BASE(\\n            paymentRedemptionTokenFactory_\\n        );\\n    }\\n\\n    function pushPayment(\\n        uint256 amount,\\n        uint256 distributionDate,\\n        RoleMap[] memory roles,\\n        bool mut\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) returns (address) {\\n        if (address(debtAdditionalInfo.currency) == address(0)) {\\n            revert Errors.NoZeroAddress();\\n        }\\n        if (distributionDate <= block.timestamp) {\\n            revert Errors.DateInPast(distributionDate);\\n        }\\n        if (amount == 0) {\\n            revert Errors.InvalidAmount(amount);\\n        }\\n        if (\\n            payments.length != 0 &&\\n            payments[payments.length - 1].distributionDateInSeconds >=\\n            distributionDate\\n        ) {\\n            revert DistributionDateNotAfterLast(\\n                distributionDate,\\n                payments[payments.length - 1].distributionDateInSeconds\\n            );\\n        }\\n\\n        PAYMENT_REDEMPTION_TOKEN_BASE newPaymentRedemptionToken = PAYMENT_REDEMPTION_TOKEN_BASE(\\n                paymentRedemptionTokenFactory.createPaymentRedemptionToken(\\n                    payments.length,\\n                    roles\\n                )\\n            );\\n\\n        payments.push(\\n            Payment(\\n                amount,\\n                distributionDate,\\n                newPaymentRedemptionToken,\\n                false,\\n                mut\\n            )\\n        );\\n\\n        emit PushPayment(\\n            amount,\\n            distributionDate,\\n            address(newPaymentRedemptionToken)\\n        );\\n\\n        return address(newPaymentRedemptionToken);\\n    }\\n\\n    function updatePaymentAmount(\\n        uint256 index,\\n        uint256 amount\\n    ) public onlyRole(PAYMENT_UPDATE_ROLE) {\\n        if (index >= payments.length) {\\n            revert Errors.OutOfBounds(index);\\n        }\\n        if (index < pendingPaymentIndex) {\\n            revert AlreadyRepaid();\\n        }\\n        if (!payments[index].mut) {\\n            revert ImmutablePayment();\\n        }\\n        if (payments[index].distributionDateInSeconds < block.timestamp) {\\n            revert Errors.DateInPast(payments[index].distributionDateInSeconds);\\n        }\\n\\n        payments[index].amount = amount;\\n        emit UpdatePaymentAmount(amount, _msgSender());\\n    }\\n\\n    function mintPaymentRedemptionToken(\\n        uint256 paymentIndex,\\n        address holder\\n    ) public {\\n        if (paymentIndex >= pendingPaymentIndex) {\\n            revert PaymentNotCompleted(paymentIndex);\\n        }\\n        if (payments[paymentIndex].allTokensMinted) {\\n            revert AlreadyMinted();\\n        }\\n\\n        if (getAllSnapshots()[paymentIndex] > block.timestamp) {\\n            revert Errors.DateInFuture(getAllSnapshots()[paymentIndex]);\\n        }\\n\\n        uint256 snapshotBalance = snapshotBalanceOf(\\n            getAllSnapshots()[paymentIndex],\\n            holder\\n        );\\n        if (snapshotBalance == 0) {\\n            revert InsufficientBalance(snapshotBalance);\\n        }\\n\\n        /**\\n         * @dev\\n         * This checks that the holder hasn't received any tokens yet\\n         * and works as the token is paused as long as we're in minting phase\\n         **/\\n        if (\\n            payments[paymentIndex].paymentRedemptionToken.balanceOf(holder) != 0\\n        ) {\\n            revert AlreadyMinted();\\n        }\\n\\n        payments[paymentIndex].paymentRedemptionToken.unpause();\\n        payments[paymentIndex].paymentRedemptionToken.mint(\\n            holder,\\n            snapshotBalance\\n        );\\n        /**\\n         * @dev\\n         * as long as the total supply is less than the snapshot total supply, the token stays paused\\n         **/\\n        if (\\n            payments[paymentIndex].paymentRedemptionToken.totalSupply() <\\n            snapshotTotalSupply(getAllSnapshots()[paymentIndex])\\n        ) {\\n            payments[paymentIndex].paymentRedemptionToken.pause();\\n        } else {\\n            payments[paymentIndex].allTokensMinted = true;\\n        }\\n        emit MintPaymentRedemptionToken(\\n            address(payments[paymentIndex].paymentRedemptionToken),\\n            snapshotBalanceOf(getAllSnapshots()[paymentIndex], holder),\\n            holder\\n        );\\n    }\\n\\n    // We always validateTransfer on repayments\\n    function repay(uint256 paymentIndex) public {\\n        if (\\n            address(ruleEngine) != address(0) &&\\n            !_validateTransfer(\\n                _msgSender(),\\n                address(0),\\n                payments[paymentIndex].amount * totalSupply()\\n            )\\n        ) {\\n            revert TransferRejected();\\n        }\\n        if (paymentIndex >= payments.length) {\\n            revert Errors.OutOfBounds(paymentIndex);\\n        }\\n        if (paymentIndex != pendingPaymentIndex) {\\n            revert OutOfOrder();\\n        }\\n\\n        if (\\n            !debtAdditionalInfo.currency.transferFrom(\\n                _msgSender(),\\n                address(this),\\n                payments[paymentIndex].amount * totalSupply()\\n            )\\n        ) {\\n            revert Errors.TransferFailed();\\n        }\\n\\n        if (\\n            payments[paymentIndex].distributionDateInSeconds > block.timestamp\\n        ) {\\n            _scheduleSnapshot(payments[paymentIndex].distributionDateInSeconds);\\n        } else {\\n            _scheduleSnapshot(block.timestamp + 1);\\n        }\\n        pendingPaymentIndex++;\\n        emit Repay(paymentIndex, payments[paymentIndex].amount * totalSupply());\\n    }\\n\\n    function revertRepayment(\\n        uint256 paymentIndex\\n    ) public onlyRole(ISSUER_ROLE) {\\n        if (paymentIndex >= payments.length) {\\n            revert Errors.OutOfBounds(paymentIndex);\\n        }\\n        if (paymentIndex != pendingPaymentIndex - 1) {\\n            revert OutOfOrder();\\n        }\\n        if (\\n            payments[paymentIndex].distributionDateInSeconds <= block.timestamp\\n        ) {\\n            revert Errors.DateInPast(\\n                payments[paymentIndex].distributionDateInSeconds\\n            );\\n        }\\n\\n        if (\\n            address(ruleEngine) != address(0) &&\\n            !_validateTransfer(\\n                address(0),\\n                _msgSender(),\\n                payments[paymentIndex].amount * this.totalSupply()\\n            )\\n        ) {\\n            revert TransferRejected();\\n        }\\n\\n        if (\\n            !debtAdditionalInfo.currency.transfer(\\n                _msgSender(),\\n                payments[paymentIndex].amount * totalSupply()\\n            )\\n        ) revert Errors.TransferFailed();\\n\\n        _unscheduleLastSnapshot(\\n            payments[paymentIndex].distributionDateInSeconds\\n        );\\n\\n        pendingPaymentIndex--;\\n        emit RevertRepayment(\\n            paymentIndex,\\n            payments[paymentIndex].amount * totalSupply()\\n        );\\n    }\\n\\n    function claimPayment(uint256 index) public {\\n        if (index >= payments.length) {\\n            revert Errors.OutOfBounds(index);\\n        }\\n        if (index >= pendingPaymentIndex) {\\n            revert PaymentNotCompleted(index);\\n        }\\n        uint256 paymentRedemptionTokenBalance = payments[index]\\n            .paymentRedemptionToken\\n            .balanceOf(_msgSender());\\n        if (paymentRedemptionTokenBalance == 0) {\\n            revert InsufficientBalance(\\n                payments[index].paymentRedemptionToken.balanceOf(_msgSender())\\n            );\\n        }\\n\\n        if (\\n            address(ruleEngine) != address(0) &&\\n            !_validateTransfer(\\n                address(0),\\n                _msgSender(),\\n                payments[index].amount * paymentRedemptionTokenBalance\\n            )\\n        ) {\\n            revert TransferRejected();\\n        }\\n\\n        uint256 paymentAmount = payments[index].amount *\\n            paymentRedemptionTokenBalance;\\n        payments[index].paymentRedemptionToken.forceBurn(\\n            _msgSender(),\\n            paymentRedemptionTokenBalance,\\n            \\\"\\\"\\n        );\\n        if (\\n            !debtAdditionalInfo.currency.transfer(_msgSender(), paymentAmount)\\n        ) {\\n            revert Errors.TransferFailed();\\n        }\\n        emit ClaimPayment(index, _msgSender(), paymentRedemptionTokenBalance);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/modules/wrapper/optional/ValidationModule.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MPL-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../../../../openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../security/AuthorizationModule.sol\\\";\\nimport \\\"../../internal/ValidationModuleInternal.sol\\\";\\nimport \\\"../mandatory/PauseModule.sol\\\";\\nimport \\\"../mandatory/EnforcementModule.sol\\\";\\n\\nerror TransferRejected();\\n\\n/**\\n * @dev Validation module.\\n *\\n * Useful for to restrict and validate transfers\\n */\\nabstract contract ValidationModule is\\n    ValidationModuleInternal,\\n    PauseModule,\\n    EnforcementModule\\n{\\n    bool public restrictTransfer;\\n\\n    function __ValidationModule_init(\\n        IEIP1404Wrapper ruleEngine_,\\n        bool restrictTransfer_,\\n        address admin\\n    ) internal onlyInitializing {\\n        /* OpenZeppelin */\\n        __Context_init_unchained();\\n        // AccessControlUpgradeable inherits from ERC165Upgradeable\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n        __Pausable_init_unchained();\\n\\n        /* CMTAT modules */\\n        // Internal\\n        __Validation_init_unchained(ruleEngine_);\\n\\n        // Security\\n        __AuthorizationModule_init_unchained(admin);\\n\\n        // Wrapper\\n        __PauseModule_init_unchained();\\n        __EnforcementModule_init_unchained();\\n\\n        // own function\\n        __ValidationModule_init_unchained(restrictTransfer_);\\n    }\\n\\n    function __ValidationModule_init_unchained(\\n        bool restrictTransfer_\\n    ) internal onlyInitializing {\\n        restrictTransfer = restrictTransfer_;\\n    }\\n\\n    /*\\n    @notice set a RuleEngine\\n    @param ruleEngine_\\n    */\\n    function setRuleEngine(\\n        IEIP1404Wrapper ruleEngine_\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        ruleEngine = ruleEngine_;\\n        emit RuleEngine(ruleEngine_);\\n    }\\n\\n    function validateTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public view returns (bool) {\\n        if (paused() || frozen(from) || frozen(to)) {\\n            return false;\\n        }\\n        if (address(ruleEngine) != address(0) && restrictTransfer) {\\n            // @dev this allows our issuance program to mint tokens to itself\\n            if (from == address(0) && hasRole(MINTER_ROLE, to)) {\\n                return true;\\n            }\\n            // @dev minter role is allowed to send tokens to anyone (issuance program checks whitelist)\\n            if (hasRole(MINTER_ROLE, from)) {\\n                return true;\\n            }\\n            return _validateTransfer(from, to, amount);\\n        }\\n        return true;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/PAYMENT_REDEMPTION_TOKEN_PROXY.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MPL-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./modules/PAYMENT_REDEMPTION_TOKEN_BASE.sol\\\";\\n\\ncontract PAYMENT_REDEMPTION_TOKEN_PROXY is PAYMENT_REDEMPTION_TOKEN_BASE {\\n    /**\\n@notice Contract version for the deployment with a proxy    */\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        // Disable the possibility to initialize the implementation\\n        _disableInitializers();\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\nerror ContractAlreadyInitialized();\\nerror ContractNotInitializing();\\nerror ContractInitializing();\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        if(\\n            !((isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1))\\n        ) {\\n            revert ContractAlreadyInitialized();\\n        }\\n\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n       if(_initializing || _initialized < version) {\\n          revert ContractAlreadyInitialized();\\n       }\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        if(!_initializing) {\\n            revert ContractNotInitializing();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        if(_initializing) {\\n            revert ContractInitializing();\\n        }\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\nerror ZeroAddressTransferNotAllowed(address from, address to);\\nerror InsufficientBalance(uint256 balance);\\nerror AllowanceBelowZeroNotAllowed();\\nerror ZeroAddressMintNotAllowed();\\nerror ZeroAddressBurnNotAllowed();\\nerror ZeroAddressApproveNotAllowed(address owner, address spender);\\nerror InsufficientAllowance(uint256 amount, uint256 allowance);\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if(currentAllowance < subtractedValue) {\\n            revert AllowanceBelowZeroNotAllowed();\\n        }\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        if(from == address(0) || to == address(0)) {\\n            revert ZeroAddressTransferNotAllowed(from, to);\\n        }\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        if(fromBalance < amount) {\\n            revert InsufficientBalance(fromBalance);\\n        }\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        if (account == address(0)) {\\n            revert ZeroAddressMintNotAllowed();\\n        }\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        if(account == address(0)) {\\n            revert ZeroAddressBurnNotAllowed();\\n        }\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        if (accountBalance < amount) {\\n            revert InsufficientBalance(accountBalance);\\n        }\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        if(owner == address(0) || spender == address(0)) {\\n            revert ZeroAddressApproveNotAllowed(owner, spender);\\n        }\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < amount) {\\n                revert InsufficientAllowance(amount, currentAllowance);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts-upgradeable/contracts/utils/ArraysUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Arrays.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./StorageSlotUpgradeable.sol\\\";\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary ArraysUpgradeable {\\n    using StorageSlotUpgradeable for bytes32;\\n\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        if (array.length == 0) {\\n            return 0;\\n        }\\n\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        while (low < high) {\\n            uint256 mid = MathUpgradeable.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds down (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlotUpgradeable.AddressSlot storage) {\\n        bytes32 slot;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getAddressSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlotUpgradeable.Bytes32Slot storage) {\\n        bytes32 slot;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getBytes32Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlotUpgradeable.Uint256Slot storage) {\\n        bytes32 slot;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getUint256Slot();\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1,\r\n      \"details\": {\r\n        \"yul\": true\r\n      }\r\n    },\r\n    \"viaIR\": false,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AllowanceBelowZeroNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyRepaid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractNotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"DateInFuture\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"DateInPast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"distributionDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDistributionDate\",\"type\":\"uint256\"}],\"name\":\"DistributionDateNotAfterLast\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ImmutablePayment\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"}],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoScheduledSnapshot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyLastSnapshotCanBeUnscheduled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"OutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OutOfOrder\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"PaymentNotCompleted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ScheduledSnapshotInThePast\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SnapshotAlreadyDone\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TimeLessThanLastSnapshot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferRejected\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ZeroAddressApproveNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressBurnNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressMintNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ZeroAddressTransferNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"newBondHolderIndexed\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newBondHolder\",\"type\":\"string\"}],\"name\":\"BondHolder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"newBusinessDayConventionIndexed\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newBusinessDayConvention\",\"type\":\"string\"}],\"name\":\"BusinessDayConvention\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"}],\"name\":\"ClaimPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"newCouponFrequencyIndexed\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newCouponFrequency\",\"type\":\"string\"}],\"name\":\"CouponFrequency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currency_\",\"type\":\"address\"}],\"name\":\"Currency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"newDayCountConventionIndexed\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newDayCountConvention\",\"type\":\"string\"}],\"name\":\"DayCountConvention\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newFlag\",\"type\":\"uint256\"}],\"name\":\"Flag\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"newFlagDefault\",\"type\":\"bool\"}],\"name\":\"FlagDefault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"newFlagRedeemed\",\"type\":\"bool\"}],\"name\":\"FlagRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"reasonIndexed\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"newGuarantorIndexed\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newGuarantor\",\"type\":\"string\"}],\"name\":\"Guarantor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"newInformationIndexed\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newInformation\",\"type\":\"string\"}],\"name\":\"Information\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"newInterestPaymentDateIndexed\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newInterestPaymentDate\",\"type\":\"string\"}],\"name\":\"InterestPaymentDate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newInterestRate\",\"type\":\"uint256\"}],\"name\":\"InterestRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"newInterestScheduleFormatIndexed\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newInterestScheduleFormat\",\"type\":\"string\"}],\"name\":\"InterestScheduleFormat\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"newIssuanceDateIndexed\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newIssuanceDate\",\"type\":\"string\"}],\"name\":\"IssuanceDate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"issuerInfo_\",\"type\":\"string\"}],\"name\":\"IssuerInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"issuerName_\",\"type\":\"string\"}],\"name\":\"IssuerName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"labels_\",\"type\":\"uint8[]\"}],\"name\":\"Labels\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"newMaturityDateIndexed\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newMaturityDate\",\"type\":\"string\"}],\"name\":\"MaturityDate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"paymentRedemptionToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"MintPaymentRedemptionToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newParValue\",\"type\":\"uint256\"}],\"name\":\"ParValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"PopPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"newPublicHolidaysCalendarIndexed\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newPublicHolidaysCalendar\",\"type\":\"string\"}],\"name\":\"PublicHolidaysCalendar\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"distributionDate\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"paymentRedemptionToken\",\"type\":\"address\"}],\"name\":\"PushPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"newRatingIndexed\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newRating\",\"type\":\"string\"}],\"name\":\"Rating\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RevertRepayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IEIP1404Wrapper\",\"name\":\"newRuleEngine\",\"type\":\"address\"}],\"name\":\"RuleEngine\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldTime\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"SnapshotSchedule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SnapshotUnschedule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Spend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"newTermIndexed\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newTerm\",\"type\":\"string\"}],\"name\":\"Term\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"newTokenIdIndexed\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newTokenId\",\"type\":\"string\"}],\"name\":\"TokenId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"reasonIndexed\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"UpdatePaymentAmount\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEBT_CREDIT_EVENT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEBT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENFORCER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ISSUER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAYMENT_UPDATE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SNAPSHOOTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentRedemptionTokenFactory_\",\"type\":\"address\"}],\"name\":\"__DistributionModule_init_unchained\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"claimPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creditEvents\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"flagDefault\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"flagRedeemed\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"rating\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parValue\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"guarantor\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bondHolder\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"maturityDate\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"interestScheduleFormat\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"interestPaymentDate\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dayCountConvention\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"businessDayConvention\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"publicHolidaysCalendar\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"issuanceDate\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"couponFrequency\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtAdditionalInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"issuerName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"issuerInfo\",\"type\":\"string\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flag\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"forceBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"freeze\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"frozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllSnapshots\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLabels\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextSnapshots\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"information\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"nameIrrevocable\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbolIrrevocable\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenId_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"terms_\",\"type\":\"string\"},{\"internalType\":\"contract IEIP1404Wrapper\",\"name\":\"ruleEngine_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"information_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"flag_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentRedemptionTokenFactory_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"restrictTransfer_\",\"type\":\"bool\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"mintPaymentRedemptionToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentRedemptionTokenFactory\",\"outputs\":[{\"internalType\":\"contract PAYMENT_REDEMPTION_TOKEN_FACTORY_BASE\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributionDateInSeconds\",\"type\":\"uint256\"},{\"internalType\":\"contract PAYMENT_REDEMPTION_TOKEN_BASE\",\"name\":\"paymentRedemptionToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allTokensMinted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"mut\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingPaymentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributionDate\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"internalType\":\"struct RoleMap[]\",\"name\":\"roles\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"mut\",\"type\":\"bool\"}],\"name\":\"pushPayment\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentIndex\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restrictTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentIndex\",\"type\":\"uint256\"}],\"name\":\"revertRepayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ruleEngine\",\"outputs\":[{\"internalType\":\"contract IEIP1404Wrapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"bondHolder_\",\"type\":\"string\"}],\"name\":\"setBondHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"businessDayConvention_\",\"type\":\"string\"}],\"name\":\"setBusinessDayConvention\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"couponFrequency_\",\"type\":\"string\"}],\"name\":\"setCouponFrequency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flagDefault_\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"flagRedeemed_\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"rating_\",\"type\":\"string\"}],\"name\":\"setCreditEvents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dayCountConvention_\",\"type\":\"string\"}],\"name\":\"setDayCountConvention\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parValue\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"guarantor\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bondHolder\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"maturityDate\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"interestScheduleFormat\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"interestPaymentDate\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dayCountConvention\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"businessDayConvention\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"publicHolidaysCalendar\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"issuanceDate\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"couponFrequency\",\"type\":\"string\"}],\"internalType\":\"struct IDebtGlobal.DebtBase\",\"name\":\"debt_\",\"type\":\"tuple\"}],\"name\":\"setDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"issuerName_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"issuerInfo_\",\"type\":\"string\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency_\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"labels_\",\"type\":\"uint8[]\"}],\"name\":\"setDebtAdditionalInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flagDefault_\",\"type\":\"bool\"}],\"name\":\"setFlagDefault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flagRedeemed_\",\"type\":\"bool\"}],\"name\":\"setFlagRedeemed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"guarantor_\",\"type\":\"string\"}],\"name\":\"setGuarantor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"interestPaymentDate_\",\"type\":\"string\"}],\"name\":\"setInterestPaymentDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"interestRate_\",\"type\":\"uint256\"}],\"name\":\"setInterestRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"interestScheduleFormat_\",\"type\":\"string\"}],\"name\":\"setInterestScheduleFormat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"issuanceDate_\",\"type\":\"string\"}],\"name\":\"setIssuanceDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"maturityDate_\",\"type\":\"string\"}],\"name\":\"setMaturityDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"parValue_\",\"type\":\"uint256\"}],\"name\":\"setParValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"publicHolidaysCalendar_\",\"type\":\"string\"}],\"name\":\"setPublicHolidaysCalendar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"rating_\",\"type\":\"string\"}],\"name\":\"setRating\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IEIP1404Wrapper\",\"name\":\"ruleEngine_\",\"type\":\"address\"}],\"name\":\"setRuleEngine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"snapshotBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"snapshotTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terms\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"unfreeze\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updatePaymentAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"validateTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CMTAT_PROXY", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}