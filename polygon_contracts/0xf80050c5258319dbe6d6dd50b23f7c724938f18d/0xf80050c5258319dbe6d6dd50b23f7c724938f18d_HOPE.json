{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @title HOPE\r\n * @author 0xSumo\r\n */\r\n\r\n/// OwnControll by 0xSumo\r\nabstract contract OwnControll {\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event AdminSet(bytes32 indexed controllerType, bytes32 indexed controllerSlot, address indexed controller, bool status);\r\n    address public owner;\r\n    mapping(bytes32 => mapping(address => bool)) internal admin;\r\n    constructor() { owner = msg.sender; }\r\n    modifier onlyOwner() { require(owner == msg.sender, \"only owner\");_; }\r\n    modifier onlyAdmin(string memory type_) { require(isAdmin(type_, msg.sender), \"only admin\");_; }\r\n    function transferOwnership(address newOwner) external onlyOwner { emit OwnershipTransferred(owner, newOwner); owner = newOwner; }\r\n    function setAdmin(string calldata type_, address controller, bool status) external onlyOwner { bytes32 typeHash = keccak256(abi.encodePacked(type_)); admin[typeHash][controller] = status; emit AdminSet(typeHash, typeHash, controller, status); }\r\n    function isAdmin(string memory type_, address controller) public view returns (bool) { bytes32 typeHash = keccak256(abi.encodePacked(type_)); return admin[typeHash][controller]; }\r\n}\r\n\r\ninterface IFxMessageProcessor {\r\n    function processMessageFromRoot(uint256 stateId, address rootMessageSender, bytes calldata data) external;\r\n}\r\n\r\nabstract contract FxBaseChildTunnel is IFxMessageProcessor {\r\n\r\n    event MessageSent(bytes message);\r\n    address public fxChild;\r\n    address public fxRootTunnel;\r\n\r\n    constructor(address _fxChild) {\r\n        fxChild = _fxChild;\r\n    }\r\n\r\n    modifier validateSender(address sender) {\r\n        require(sender == fxRootTunnel, \"FxBaseChildTunnel: INVALID_SENDER_FROM_ROOT\");\r\n        _;\r\n    }\r\n\r\n    function setFxRootTunnel(address _fxRootTunnel) external virtual {\r\n        require(fxRootTunnel == address(0x0), \"FxBaseChildTunnel: ROOT_TUNNEL_ALREADY_SET\");\r\n        fxRootTunnel = _fxRootTunnel;\r\n    }\r\n\r\n    function processMessageFromRoot(uint256 stateId, address rootMessageSender, bytes calldata data) external override {\r\n        require(msg.sender == fxChild, \"FxBaseChildTunnel: INVALID_SENDER\");\r\n        _processMessageFromRoot(stateId, rootMessageSender, data);\r\n    }\r\n\r\n    function _sendMessageToRoot(bytes memory message) internal {\r\n        emit MessageSent(message);\r\n    }\r\n\r\n    function _processMessageFromRoot(uint256 stateId, address sender, bytes memory message) internal virtual;\r\n}\r\n\r\n/**\r\n * @title Point Database\r\n * @author 0xSumo\r\n *\r\n * Description:\r\n * This smart contract implements a simple point system that can serve as a \r\n * foundation for a variety of applications.\r\n *\r\n * Features:\r\n * - Increase points for a specific address\r\n * - Decrease points from a specific address\r\n * - Transfer points from one address to another\r\n *\r\n * Note:\r\n * This contract does not include any tokenization features or integrations \r\n * with ERC standards. Points do not represent a form of currency or value \r\n * outside of the specific system in which they are used. Please ensure \r\n * legal compliance in your jurisdiction when using this contract.\r\n */\r\n\r\nabstract contract PointDatabase {\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n    function _increasePoints(address address_, uint256 amount_) internal {\r\n        balanceOf[address_] += amount_;\r\n    }\r\n\r\n    function _decreasePoints(address address_, uint256 amount_) internal {\r\n        balanceOf[address_] -= amount_;\r\n    }\r\n\r\n    function transferFrom(address from_, address to_, uint256 amount_) public returns (bool) {\r\n        require(msg.sender == from_, \"Only the sender can transfer points\");\r\n        balanceOf[from_] -= amount_;\r\n        balanceOf[to_] += amount_;\r\n        emit Transfer(from_, to_, amount_);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract HOPE is PointDatabase, FxBaseChildTunnel, OwnControll {\r\n\r\n    address public constant NTP = 0xA65bA71d653f62c64d97099b58D25a955Eb374a0;\r\n    address public constant ROARS = 0x066b62EA211249925800eD8676f69eD506175714;\r\n\r\n    uint256 public NTPRATE = 20 ether;\r\n    uint256 public ROARSRATE = 1 ether;\r\n\r\n    /// user => collection => amount\r\n    mapping(address => mapping(address => uint256)) public stakedBalanceByUser;\r\n    mapping(address => mapping(address => uint256)) public hopeAccumulatedByUser;\r\n    mapping(address => mapping(address => uint256)) public lastUpdatedByUser;\r\n\r\n    event ProcessedMessage(address from, address collection, uint256 amount, bool action);\r\n\r\n    constructor() FxBaseChildTunnel(0x8397259c983751DAf40400790063935a11afa28a) {}\r\n\r\n    /// point system\r\n    function increasePoints(address address_, uint256 amount_) external onlyAdmin(\"INCREASE\") {\r\n        _increasePoints(address_, amount_);\r\n    }\r\n\r\n    function decreasePoints(address address_, uint256 amount_) external onlyAdmin(\"DECREASE\") {\r\n        _decreasePoints(address_, amount_);\r\n    }\r\n\r\n    /// collect points\r\n    function collectHOPE() external updateReward(msg.sender) {\r\n        uint256 n = hopeAccumulatedByUser[msg.sender][NTP];\r\n        uint256 r = hopeAccumulatedByUser[msg.sender][ROARS];\r\n        uint256 amount = n + r;\r\n        hopeAccumulatedByUser[msg.sender][NTP] = 0;\r\n        hopeAccumulatedByUser[msg.sender][ROARS] = 0;\r\n        _increasePoints(msg.sender, amount);\r\n    }\r\n\r\n    /// owner setting\r\n    function setNTPRATE(uint256 reward) external onlyAdmin(\"ADMIN\") {\r\n        NTPRATE = reward;\r\n    }\r\n\r\n    function setROARSRATE(uint256 reward) external onlyAdmin(\"ADMIN\") {\r\n        ROARSRATE = reward;\r\n    }\r\n\r\n    function updateFxRootTunnel(address _fxRootTunnel) external onlyAdmin(\"ADMIN\") {\r\n        fxRootTunnel = _fxRootTunnel;\r\n    }\r\n\r\n    /// internal staking logic\r\n    modifier updateReward(address account) {\r\n        uint256 ntpAmount = earnedNTP(account);\r\n        uint256 roarsAmount = earnedROARS(account);\r\n    \r\n        lastUpdatedByUser[account][NTP] = block.timestamp;\r\n        hopeAccumulatedByUser[account][NTP] += ntpAmount;\r\n\r\n        lastUpdatedByUser[account][ROARS] = block.timestamp;\r\n        hopeAccumulatedByUser[account][ROARS] += roarsAmount;\r\n    \r\n        _;\r\n    }\r\n\r\n    function processStake(address account, address collection, uint256 amount) internal updateReward(account) {\r\n        stakedBalanceByUser[account][collection] += amount;\r\n    }\r\n\r\n    function processUnstake(address account, address collection, uint256 amount) internal updateReward(account) {\r\n        uint256 totalStaked = stakedBalanceByUser[account][collection];\r\n        if (amount == totalStaked) {\r\n            hopeAccumulatedByUser[account][collection] = 0;\r\n        } else {\r\n            uint256 percentageUnstaked = amount * 1e18 / totalStaked; // Calculate the percentage being unstaked (in Wei for precision)\r\n            uint256 rewardReduction = hopeAccumulatedByUser[account][collection] * percentageUnstaked / 1e18; // Calculate the amount of rewards to reduce\r\n            hopeAccumulatedByUser[account][collection] -= rewardReduction;\r\n        }\r\n        stakedBalanceByUser[account][collection] -= amount;\r\n    }\r\n\r\n    function _processMessageFromRoot(uint256 stateId, address sender, bytes memory message) internal override validateSender(sender) {\r\n        (address from, address collection, uint256 count, bool action) \r\n        = abi.decode(message, (address, address, uint256, bool));\r\n        action ? processStake(from, collection, count) : processUnstake(from, collection, count);\r\n        emit ProcessedMessage(from, collection, count, action);\r\n    }\r\n\r\n    /// utils\r\n    function getUserAccruedRewards(address account) external view returns (uint256) {\r\n        return hopeAccumulatedByUser[account][NTP] + hopeAccumulatedByUser[account][ROARS] + earnedNTP(account) + earnedROARS(account);\r\n    }\r\n\r\n    function earnedNTP(address account) internal view returns (uint256) {\r\n        return rewardsPerSecondNTP(account) * (block.timestamp - lastUpdatedByUser[account][NTP]);\r\n    }\r\n\r\n    function earnedROARS(address account) internal view returns (uint256) {\r\n        return rewardsPerSecondROARS(account) * (block.timestamp - lastUpdatedByUser[account][ROARS]);\r\n    }\r\n\r\n    function rewardsPerSecondNTP(address account) internal view returns (uint256) {\r\n        return (stakedBalanceByUser[account][NTP] * NTPRATE) / 1 days;\r\n    }\r\n\r\n    function rewardsPerSecondROARS(address account) internal view returns (uint256) {\r\n        return (stakedBalanceByUser[account][ROARS] * ROARSRATE) / 1 days;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"controllerType\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"controllerSlot\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"AdminSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"action\",\"type\":\"bool\"}],\"name\":\"ProcessedMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NTP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NTPRATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROARS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROARSRATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectHOPE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"decreasePoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChild\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRootTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserAccruedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hopeAccumulatedByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"increasePoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"type_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastUpdatedByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stateId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rootMessageSender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"processMessageFromRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"type_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxRootTunnel\",\"type\":\"address\"}],\"name\":\"setFxRootTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"setNTPRATE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"setROARSRATE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedBalanceByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxRootTunnel\",\"type\":\"address\"}],\"name\":\"updateFxRootTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HOPE", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a7af0f3f26df91112419d692a1b4c0716b8b8c1288e9e8b3024bc957adaebfb3"}