{"SourceCode": "/**\r\n *Submitted for verification at polygonscan.com on 2022-03-14\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.4;\r\n\r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a * b;\r\n\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a), 'mul overflow');\r\n        return c;\r\n    }\r\n\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != -1 || a != MIN_INT256);\r\n\r\n        return a / b;\r\n    }\r\n\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a),\r\n            'sub overflow');\r\n        return c;\r\n    }\r\n\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a),\r\n            'add overflow');\r\n        return c;\r\n    }\r\n\r\n    function abs(int256 a) internal pure returns (int256) {\r\n        require(a != MIN_INT256,\r\n            'abs overflow');\r\n        return a < 0 ? -a : a;\r\n    }\r\n\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, 'SafeMath: addition overflow');\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, 'SafeMath: subtraction overflow');\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, 'SafeMath: multiplication overflow');\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, 'SafeMath: division by zero');\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0,\r\n            'parameter 2 can not be 0');\r\n        return a % b;\r\n    }\r\n\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\ninterface InterfaceLP {\r\n    function sync() external;\r\n}\r\n\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping(address => bool) bearer;\r\n    }\r\n\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), 'Roles: account already has role');\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), 'Roles: account does not have role');\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    function has(Role storage role, address account)\r\n    internal\r\n    view\r\n    returns (bool)\r\n    {\r\n        require(account != address(0), 'Roles: account is the zero address');\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\nabstract contract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor(\r\n        string memory _tokenName,\r\n        string memory _tokenSymbol,\r\n        uint8 _tokenDecimals\r\n    ) {\r\n        _name = _tokenName;\r\n        _symbol = _tokenSymbol;\r\n        _decimals = _tokenDecimals;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    returns (\r\n        uint256 amountA,\r\n        uint256 amountB,\r\n        uint256 liquidity\r\n    );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    payable\r\n    returns (\r\n        uint256 amountToken,\r\n        uint256 amountETH,\r\n        uint256 liquidity\r\n    );\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n    external\r\n    returns (address pair);\r\n}\r\n\r\ninterface IBalanceOfSphere {\r\n    function balanceOfSphere(address _address) external view returns (uint256);\r\n}\r\n\r\ninterface IPublicBalance {\r\n    function balanceOf(address _address) external view returns (uint256);\r\n}\r\n\r\ninterface IDexPair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n    external\r\n    view\r\n    returns (\r\n        uint112 reserve0,\r\n        uint112 reserve1,\r\n        uint32 blockTimestampLast\r\n    );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n    external\r\n    returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event TransferOwnerShip(address indexed previousOwner);\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, 'Not owner');\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(_owner);\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        emit TransferOwnerShip(newOwner);\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0),\r\n            'Owner can not be 0');\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract SphereToken is ERC20Detailed, Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n\r\n    bool public initialDistributionFinished = false;\r\n    bool public swapEnabled = true;\r\n    bool public autoRebase = false;\r\n    bool public feesOnNormalTransfers = false;\r\n    bool public isLiquidityInMatic = true;\r\n    bool public isBurnEnabled = false;\r\n    bool public isTaxBracketEnabled = false;\r\n    bool public isStillLaunchPeriod = true;\r\n    bool public taxNonMarketMaker = false;\r\n    bool public isPartyOver = false;\r\n\r\n    uint256 public rebaseIndex = 1 * 10**18;\r\n    uint256 public oneEEighteen = 1 * 10**18;\r\n    uint256 public secondsPerDay = 86400;\r\n    uint256 public rewardYield = 3943560072416;\r\n    uint256 public rewardYieldDenominator = 10000000000000000;\r\n    uint256 public maxSellTransactionAmount = 2500000 * 10**18;\r\n    uint256 public maxBuyTransactionAmount = 2500000 * 10**18;\r\n\r\n    uint256 public rebaseFrequency = 1800;\r\n    uint256 public nextRebase = block.timestamp + 31536000;\r\n    uint256 public rebaseEpoch = 0;\r\n    uint256 public taxBracketMultiplier = 5;\r\n    uint256 public nonMarketMakerFee = 5;\r\n\r\n    mapping(address => bool) _isFeeExempt;\r\n    address[] public _markerPairs;\r\n    uint256 public _markerPairCount;\r\n    address[] public subContracts;\r\n    address[] public sphereGamesContracts;\r\n    address[] public partyArray;\r\n    mapping(address => bool) public automatedMarketMakerPairs;\r\n    mapping(address => bool) public subContractCheck;\r\n    mapping(address => bool) public sphereGamesCheck;\r\n    mapping(address => bool) public partyArrayCheck;\r\n\r\n    uint256 public constant MAX_FEE_RATE = 25;\r\n    uint256 public constant MAX_TAX_BRACKET_FEE_RATE = 5;\r\n    uint256 public constant MAX_PARTY_LIST_DIVISOR_RATE = 75;\r\n    uint256 public constant NON_MARKET_MAKER_FEE_RATE = 5;\r\n    uint256 public constant MIN_SELL_AMOUNT_RATE = 1500000 * 10**18;\r\n    uint256 public constant MIN_BUY_AMOUNT_RATE = 1500000 * 10**18;\r\n    uint256 private constant MAX_REBASE_FREQUENCY = 1800;\r\n    uint256 public constant feeDenominator = 100;\r\n\r\n    uint256 private constant DECIMALS = 18;\r\n    uint256 private constant MAX_UINT256 = ~uint256(0);\r\n    uint256 private constant INITIAL_FRAGMENTS_SUPPLY =\r\n    5 * 10**9 * 10**DECIMALS;\r\n    uint256 private constant TOTAL_GONS =\r\n    MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\r\n    uint256 private constant MAX_SUPPLY = ~uint128(0);\r\n\r\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address constant ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n    address public liquidityReceiver =\r\n    0x1a2Ce410A034424B784D4b228f167A061B94CFf4;\r\n    address public treasuryReceiver =\r\n    0x20D61737f972EEcB0aF5f0a85ab358Cd083Dd56a;\r\n    address public riskFreeValueReceiver =\r\n    0x826b8d2d523E7af40888754E3De64348C00B99f4;\r\n    address public stableCoin = 0xa3Fa99A148fA48D14Ed51d610c367C61876997F1;\r\n\r\n    IDEXRouter public router;\r\n    IDEXFactory public factory;\r\n    IDexPair public iDexPair;\r\n    address public pair;\r\n\r\n    uint256 private constant maxBracketTax = 10; // max bracket is holding 10%\r\n\r\n    uint256 public liquidityFee = 5;\r\n    uint256 public treasuryFee = 3;\r\n    uint256 public burnFee = 0;\r\n    uint256 public sellBurnFee = 0;\r\n    uint256 public buyFeeRFV = 5;\r\n    uint256 public sellFeeTreasuryAdded = 2;\r\n    uint256 public sellFeeRFVAdded = 5;\r\n    uint256 public sellLaunchFeeAdded = 10;\r\n    uint256 public sellLaunchFeeSubtracted = 0;\r\n    uint256 public partyListDivisor = 50;\r\n    uint256 public totalBuyFee = liquidityFee.add(treasuryFee).add(buyFeeRFV);\r\n    uint256 public totalSellFee =\r\n    totalBuyFee.add(sellFeeTreasuryAdded).add(sellFeeRFVAdded).add(\r\n        sellLaunchFeeAdded\r\n    );\r\n    uint256 targetLiquidity = 50;\r\n    uint256 targetLiquidityDenominator = 100;\r\n\r\n    bool inSwap;\r\n\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    modifier validRecipient(address to) {\r\n        require(to != address(0x0),\r\n            'recipient is not valid');\r\n        _;\r\n    }\r\n\r\n    uint256 private _totalSupply;\r\n    uint256 private _gonsPerFragment;\r\n    uint256 private gonSwapThreshold = (TOTAL_GONS * 10) / 10000;\r\n\r\n    mapping(address => uint256) private _gonBalances;\r\n    mapping(address => mapping(address => uint256)) private _allowedFragments;\r\n\r\n    constructor() ERC20Detailed('Sphere Finance', 'SPHERE', uint8(DECIMALS)) {\r\n        router = IDEXRouter(0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff);\r\n        pair = IDEXFactory(router.factory()).createPair(\r\n            address(this),\r\n            router.WETH()\r\n        );\r\n\r\n        address pairStableCoin = IDEXFactory(router.factory()).createPair(\r\n            address(this),\r\n            stableCoin\r\n        );\r\n\r\n        _allowedFragments[address(this)][address(router)] = uint256(-1);\r\n        _allowedFragments[address(this)][pair] = uint256(-1);\r\n        _allowedFragments[address(this)][address(this)] = uint256(-1);\r\n        _allowedFragments[address(this)][pairStableCoin] = uint256(-1);\r\n\r\n        setAutomatedMarketMakerPair(pair, true);\r\n        setAutomatedMarketMakerPair(pairStableCoin, true);\r\n\r\n        _totalSupply = INITIAL_FRAGMENTS_SUPPLY;\r\n        _gonBalances[msg.sender] = TOTAL_GONS;\r\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\r\n\r\n        _isFeeExempt[treasuryReceiver] = true;\r\n        _isFeeExempt[riskFreeValueReceiver] = true;\r\n        _isFeeExempt[address(this)] = true;\r\n        _isFeeExempt[msg.sender] = true;\r\n\r\n        IERC20(stableCoin).approve(address(router), uint256(-1));\r\n        IERC20(stableCoin).approve(address(pairStableCoin), uint256(-1));\r\n        IERC20(stableCoin).approve(address(this), uint256(-1));\r\n\r\n        emit Transfer(address(0x0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function allowance(address owner_, address spender)\r\n    external\r\n    view\r\n    override\r\n    returns (uint256)\r\n    {\r\n        return _allowedFragments[owner_][spender];\r\n    }\r\n\r\n    function balanceOf(address who) public view override returns (uint256) {\r\n        return _gonBalances[who].div(_gonsPerFragment);\r\n    }\r\n\r\n    function markerPairAddress(uint256 value) public view returns (address) {\r\n        return _markerPairs[value];\r\n    }\r\n\r\n    function currentIndex() public view returns (uint256) {\r\n        return rebaseIndex;\r\n    }\r\n\r\n    function checkFeeExempt(address _addr) external view returns (bool) {\r\n        return _isFeeExempt[_addr];\r\n    }\r\n\r\n    function checkSwapThreshold() external view returns (uint256) {\r\n        return gonSwapThreshold.div(_gonsPerFragment);\r\n    }\r\n\r\n    function shouldRebase() internal view returns (bool) {\r\n        return nextRebase <= block.timestamp;\r\n    }\r\n\r\n    function shouldBurn() internal view returns (bool) {\r\n        return isBurnEnabled;\r\n    }\r\n\r\n    function isStillLaunchPhase() internal view returns (bool) {\r\n        return isStillLaunchPeriod;\r\n    }\r\n\r\n    function isTaxBracket() internal view returns (bool) {\r\n        return isTaxBracketEnabled;\r\n    }\r\n\r\n    function shouldTakeFee(address from, address to)\r\n    internal\r\n    view\r\n    returns (bool)\r\n    {\r\n        if (_isFeeExempt[from] || _isFeeExempt[to]) {\r\n            return false;\r\n        } else if (feesOnNormalTransfers) {\r\n            return true;\r\n        } else {\r\n            return (automatedMarketMakerPairs[from] ||\r\n            automatedMarketMakerPairs[to]);\r\n        }\r\n    }\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return\r\n        !automatedMarketMakerPairs[msg.sender] &&\r\n        !inSwap &&\r\n        swapEnabled &&\r\n        totalBuyFee.add(totalSellFee) > 0 &&\r\n        _gonBalances[address(this)] >= gonSwapThreshold;\r\n    }\r\n\r\n    function getGonBalances() public view returns (bool thresholdReturn, uint256 gonBalanceReturn ) {\r\n        thresholdReturn  = _gonBalances[address(this)] >= gonSwapThreshold;\r\n        gonBalanceReturn = _gonBalances[address(this)];\r\n\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return\r\n        (TOTAL_GONS.sub(_gonBalances[DEAD]).sub(_gonBalances[ZERO])).div(\r\n            _gonsPerFragment\r\n        );\r\n    }\r\n\r\n    function getCurrentTimestamp() public view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function getLiquidityBacking(uint256 accuracy)\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        uint256 liquidityBalance = 0;\r\n        for (uint256 i = 0; i < _markerPairs.length; i++) {\r\n            liquidityBalance.add(balanceOf(_markerPairs[i]).div(10**9));\r\n        }\r\n\r\n        return\r\n        accuracy.mul(liquidityBalance.mul(2)).div(\r\n            getCirculatingSupply().div(10**9)\r\n        );\r\n    }\r\n\r\n    function getUserTotalOnDifferentContractsSphere(address sender)\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        uint256 userTotal = balanceOf(sender);\r\n        uint256 balanceOfAllSubContracts;\r\n        uint256 balanceOfAllSphereGamesContracts;\r\n\r\n        //calculate the balance of different contracts on different wallets and sum them\r\n        balanceOfAllSubContracts = getBalanceOfAllSubContracts(sender);\r\n        balanceOfAllSphereGamesContracts = getBalanceOfAllSphereGamesContracts(\r\n            sender\r\n        );\r\n\r\n        userTotal.add(balanceOfAllSubContracts).add(\r\n            balanceOfAllSphereGamesContracts\r\n        );\r\n        return userTotal;\r\n    }\r\n\r\n    //this function iterates through all other contracts that are being part of the Sphere ecosystem\r\n    //we add a new contract like wSPHERE or sSPHERE, whales could technically abuse this\r\n    //by swapping to these contracts and leave the dynamic tax bracket\r\n    function getBalanceOfAllSubContracts(address sender)\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        uint256 userTotal;\r\n\r\n        for (uint256 i = 0; i < subContracts.length; i++) {\r\n            userTotal += IBalanceOfSphere(subContracts[i]).balanceOfSphere(\r\n                sender\r\n            );\r\n        }\r\n\r\n        return userTotal;\r\n    }\r\n\r\n    //get S.P.H.E.R.E. Games Tickets Count For Tax\r\n    function getBalanceOfAllSphereGamesContracts(address sender)\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        uint256 sphereGamesTotal;\r\n\r\n        for (uint256 i = 0; i < sphereGamesContracts.length; i++) {\r\n            sphereGamesTotal += IPublicBalance(sphereGamesContracts[i])\r\n            .balanceOf(sender);\r\n        }\r\n\r\n        return sphereGamesTotal;\r\n    }\r\n\r\n    function getTokensInLPCirculation() public view returns (uint256) {\r\n        uint112 reserve0;\r\n        uint112 reserve1;\r\n        uint32 blockTimestampLast;\r\n        address token0;\r\n        address token1;\r\n        IDexPair iDexFeeCalculator;\r\n        uint256 LPTotal;\r\n\r\n        for (uint256 i = 0; i < _markerPairs.length; i++) {\r\n            iDexFeeCalculator = IDexPair(_markerPairs[i]);\r\n            (reserve0, reserve1, blockTimestampLast) = iDexFeeCalculator\r\n            .getReserves();\r\n\r\n            token0 = iDexFeeCalculator.token0();\r\n            token1 = iDexFeeCalculator.token1();\r\n\r\n            if (token0 == address(this)) {\r\n                LPTotal += reserve0;\r\n                //first one\r\n            } else if (token1 == address(this)) {\r\n                LPTotal += reserve1;\r\n            }\r\n        }\r\n\r\n        return LPTotal;\r\n    }\r\n\r\n    function getOneTokenInLPCirculation(uint256 _id)\r\n    public\r\n    view\r\n    returns (\r\n        uint256 LPTotal,\r\n        uint112 reserve0,\r\n        uint112 reserve1\r\n    )\r\n    {\r\n        uint32 blockTimestampLast;\r\n        address token0;\r\n        address token1;\r\n        IDexPair iDexFeeCalculator;\r\n\r\n        iDexFeeCalculator = IDexPair(_markerPairs[_id]);\r\n        (reserve0, reserve1, blockTimestampLast) = iDexFeeCalculator\r\n        .getReserves();\r\n\r\n        token0 = iDexFeeCalculator.token0();\r\n        token1 = iDexFeeCalculator.token1();\r\n\r\n        if (token0 == address(this)) {\r\n            LPTotal += reserve0;\r\n        } else if (token1 == address(this)) {\r\n            LPTotal += reserve1;\r\n        }\r\n\r\n        return (LPTotal, reserve0, reserve1);\r\n    }\r\n\r\n    function getCurrentTaxBracket(address _address)\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        //gets the total balance of the user\r\n        uint256 userTotal = getUserTotalOnDifferentContractsSphere(_address);\r\n\r\n        //calculate the percentage\r\n        uint256 totalCap = userTotal.mul(100).div(getTokensInLPCirculation());\r\n\r\n        //calculate what is smaller, and use that\r\n        uint256 _bracket = SafeMath.min(totalCap, maxBracketTax);\r\n\r\n        //multiply the bracket with the multiplier\r\n        _bracket *= taxBracketMultiplier;\r\n\r\n        return _bracket;\r\n    }\r\n\r\n    function isOverLiquified(uint256 target, uint256 accuracy)\r\n    public\r\n    view\r\n    returns (bool)\r\n    {\r\n        return getLiquidityBacking(accuracy) > target;\r\n    }\r\n\r\n    function manualSync() public {\r\n        for (uint256 i = 0; i < _markerPairs.length; i++) {\r\n            IDexPair(_markerPairs[i]).sync();\r\n        }\r\n    }\r\n\r\n    function transfer(address to, uint256 value)\r\n    external\r\n    override\r\n    validRecipient(to)\r\n    returns (bool)\r\n    {\r\n        _transferFrom(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        uint256 gonAmount = amount.mul(_gonsPerFragment);\r\n        _gonBalances[from] = _gonBalances[from].sub(gonAmount);\r\n        _gonBalances[to] = _gonBalances[to].add(gonAmount);\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        bool excludedAccount = _isFeeExempt[sender] || _isFeeExempt[recipient];\r\n\r\n        require(\r\n            initialDistributionFinished || excludedAccount,\r\n            'Trading not started'\r\n        );\r\n\r\n        if (automatedMarketMakerPairs[recipient] && !excludedAccount) {\r\n            require(amount <= maxSellTransactionAmount, 'Error amount');\r\n        }\r\n\r\n        if (automatedMarketMakerPairs[sender] && !excludedAccount) {\r\n            require(amount <= maxBuyTransactionAmount, 'Buy Amount Exceeded!');\r\n        }\r\n\r\n        if (inSwap) {\r\n            return _basicTransfer(sender, recipient, amount);\r\n        }\r\n\r\n        uint256 gonAmount = amount.mul(_gonsPerFragment);\r\n\r\n        if (shouldSwapBack()) {\r\n            swapBack();\r\n        }\r\n\r\n        _gonBalances[sender] = _gonBalances[sender].sub(gonAmount);\r\n\r\n        uint256 gonAmountReceived = shouldTakeFee(sender, recipient)\r\n        ? takeFee(sender, recipient, gonAmount)\r\n        : gonAmount;\r\n        _gonBalances[recipient] = _gonBalances[recipient].add(\r\n            gonAmountReceived\r\n        );\r\n\r\n        emit Transfer(\r\n            sender,\r\n            recipient,\r\n            gonAmountReceived.div(_gonsPerFragment)\r\n        );\r\n\r\n        if (shouldRebase() && autoRebase) {\r\n            _rebase();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external override validRecipient(to) returns (bool) {\r\n        if (_allowedFragments[from][msg.sender] != uint256(-1)) {\r\n            _allowedFragments[from][msg.sender] = _allowedFragments[from][\r\n            msg.sender\r\n            ].sub(value, 'Insufficient Allowance');\r\n        }\r\n\r\n        _transferFrom(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function _swapAndLiquify(uint256 contractTokenBalance) private {\r\n        uint256 half = contractTokenBalance.div(2);\r\n        uint256 otherHalf = contractTokenBalance.sub(half);\r\n\r\n        if (isLiquidityInMatic) {\r\n            uint256 initialBalance = address(this).balance;\r\n\r\n            _swapTokensForMATIC(half, address(this));\r\n\r\n            uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n            _addLiquidity(otherHalf, newBalance);\r\n\r\n            emit SwapAndLiquify(half, newBalance, otherHalf);\r\n        } else {\r\n            uint256 initialBalance = IERC20(stableCoin).balanceOf(\r\n                address(this)\r\n            );\r\n\r\n            _swapTokensForStableCoin(half, address(this));\r\n\r\n            uint256 newBalance = IERC20(stableCoin)\r\n            .balanceOf(address(this))\r\n            .sub(initialBalance);\r\n\r\n            _addLiquidityStableCoin(otherHalf, newBalance);\r\n\r\n            emit SwapAndLiquifyStableCoin(half, newBalance, otherHalf);\r\n        }\r\n    }\r\n\r\n    function _addLiquidity(uint256 tokenAmount, uint256 MATICAmount) private {\r\n        router.addLiquidityETH{value: MATICAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            liquidityReceiver,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _addLiquidityStableCoin(\r\n        uint256 tokenAmount,\r\n        uint256 StableCoinAmount\r\n    ) private {\r\n        router.addLiquidity(\r\n            address(this),\r\n            stableCoin,\r\n            tokenAmount,\r\n            StableCoinAmount,\r\n            0,\r\n            0,\r\n            liquidityReceiver,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _swapTokensForMATIC(uint256 tokenAmount, address receiver)\r\n    private\r\n    {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            receiver,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _swapTokensForStableCoin(uint256 tokenAmount, address receiver)\r\n    private\r\n    {\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        path[2] = stableCoin;\r\n\r\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            receiver,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapBack() internal swapping {\r\n        uint256 realTotalFee = totalBuyFee.add(totalSellFee);\r\n\r\n        uint256 dynamicLiquidityFee = isOverLiquified(\r\n            targetLiquidity,\r\n            targetLiquidityDenominator\r\n        )\r\n        ? 0\r\n        : liquidityFee;\r\n        uint256 contractTokenBalance = _gonBalances[address(this)].div(\r\n            _gonsPerFragment\r\n        );\r\n\r\n        uint256 amountToLiquify = contractTokenBalance\r\n        .mul(dynamicLiquidityFee.mul(2))\r\n        .div(realTotalFee);\r\n\r\n        uint256 amountToRFV = contractTokenBalance\r\n        .mul(buyFeeRFV.mul(2).add(sellFeeRFVAdded))\r\n        .div(realTotalFee);\r\n\r\n        uint256 amountToTreasury = contractTokenBalance\r\n        .sub(amountToLiquify)\r\n        .sub(amountToRFV);\r\n\r\n        if (amountToLiquify > 0) {\r\n            _swapAndLiquify(amountToLiquify);\r\n        }\r\n\r\n        if (amountToRFV > 0) {\r\n            _swapTokensForStableCoin(amountToRFV, riskFreeValueReceiver);\r\n        }\r\n\r\n        if (amountToTreasury > 0) {\r\n            _swapTokensForMATIC(amountToTreasury, treasuryReceiver);\r\n        }\r\n\r\n        emit SwapBack(\r\n            contractTokenBalance,\r\n            amountToLiquify,\r\n            amountToRFV,\r\n            amountToTreasury\r\n        );\r\n    }\r\n\r\n    function manualSwapBack() external onlyOwner {\r\n        uint256 realTotalFee = totalBuyFee.add(totalSellFee);\r\n\r\n        uint256 dynamicLiquidityFee = isOverLiquified(\r\n            targetLiquidity,\r\n            targetLiquidityDenominator\r\n        )\r\n        ? 0\r\n        : liquidityFee;\r\n        uint256 contractTokenBalance = _gonBalances[address(this)].div(\r\n            _gonsPerFragment\r\n        );\r\n\r\n        uint256 amountToLiquify = contractTokenBalance\r\n        .mul(dynamicLiquidityFee.mul(2))\r\n        .div(realTotalFee);\r\n\r\n        uint256 amountToRFV = contractTokenBalance\r\n        .mul(buyFeeRFV.mul(2).add(sellFeeRFVAdded))\r\n        .div(realTotalFee);\r\n\r\n        uint256 amountToTreasury = contractTokenBalance\r\n        .sub(amountToLiquify)\r\n        .sub(amountToRFV);\r\n\r\n        if (amountToLiquify > 0) {\r\n            _swapAndLiquify(amountToLiquify);\r\n        }\r\n\r\n        if (amountToRFV > 0) {\r\n            _swapTokensForStableCoin(amountToRFV, riskFreeValueReceiver);\r\n        }\r\n\r\n        if (amountToTreasury > 0) {\r\n            _swapTokensForMATIC(amountToTreasury, treasuryReceiver);\r\n        }\r\n\r\n        emit SwapBack(\r\n            contractTokenBalance,\r\n            amountToLiquify,\r\n            amountToRFV,\r\n            amountToTreasury\r\n        );\r\n    }\r\n\r\n    function takeFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 gonAmount\r\n    ) internal returns (uint256) {\r\n        uint256 _realFee = totalBuyFee;\r\n        uint256 _burnFee = burnFee;\r\n\r\n        //check if it's a sell fee embedded\r\n        if (automatedMarketMakerPairs[recipient]) {\r\n            _realFee = totalSellFee;\r\n            _burnFee = _burnFee.add(sellBurnFee);\r\n        }\r\n\r\n        //calculate Tax\r\n        if (isTaxBracketEnabled) {\r\n            _realFee += getCurrentTaxBracket(sender);\r\n        }\r\n\r\n        //trying to join our party? Become the party maker :)\r\n        if ((partyArrayCheck[sender] || partyArrayCheck[recipient])) {\r\n            if (_realFee < 49) _realFee = 49;\r\n        }\r\n\r\n        uint256 feeAmount = gonAmount.mul(_realFee).div(feeDenominator);\r\n\r\n        //make sure Burn is enabled and burnFee is > 0 (integer 0 equals to false)\r\n        if (shouldBurn() && _burnFee > 0) {\r\n            // burn the amount given % every transaction\r\n            tokenBurner(\r\n                (gonAmount.div(_gonsPerFragment)).mul(_burnFee).div(100)\r\n            );\r\n        }\r\n\r\n        _gonBalances[address(this)] = _gonBalances[address(this)].add(\r\n            feeAmount\r\n        );\r\n        emit Transfer(sender, address(this), feeAmount.div(_gonsPerFragment));\r\n\r\n        return gonAmount.sub(feeAmount);\r\n    }\r\n\r\n    function tokenBurner(uint256 _tokenAmount) private {\r\n        _transferFrom(address(this), address(DEAD), _tokenAmount);\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n    external\r\n    returns (bool)\r\n    {\r\n        uint256 oldValue = _allowedFragments[msg.sender][spender];\r\n        if (subtractedValue >= oldValue) {\r\n            _allowedFragments[msg.sender][spender] = 0;\r\n        } else {\r\n            _allowedFragments[msg.sender][spender] = oldValue.sub(\r\n                subtractedValue\r\n            );\r\n        }\r\n        emit Approval(\r\n            msg.sender,\r\n            spender,\r\n            _allowedFragments[msg.sender][spender]\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n    external\r\n    returns (bool)\r\n    {\r\n        _allowedFragments[msg.sender][spender] = _allowedFragments[msg.sender][\r\n        spender\r\n        ].add(addedValue);\r\n        emit Approval(\r\n            msg.sender,\r\n            spender,\r\n            _allowedFragments[msg.sender][spender]\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value)\r\n    external\r\n    override\r\n    returns (bool)\r\n    {\r\n\r\n        _allowedFragments[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function _rebase() private {\r\n        if (!inSwap) {\r\n            uint256 circulatingSupply = getCirculatingSupply();\r\n            int256 supplyDelta = int256(\r\n                circulatingSupply.mul(rewardYield).div(rewardYieldDenominator)\r\n            );\r\n\r\n            coreRebase(supplyDelta);\r\n        }\r\n    }\r\n\r\n    function coreRebase(int256 supplyDelta) private returns (uint256) {\r\n        uint256 epoch = block.timestamp;\r\n\r\n        if (supplyDelta == 0) {\r\n            emit LogRebase(epoch, _totalSupply);\r\n            return _totalSupply;\r\n        }\r\n\r\n        if (supplyDelta < 0) {\r\n            _totalSupply = _totalSupply.sub(uint256(-supplyDelta));\r\n        } else {\r\n            _totalSupply = _totalSupply.add(uint256(supplyDelta));\r\n        }\r\n\r\n        if (_totalSupply > MAX_SUPPLY) {\r\n            _totalSupply = MAX_SUPPLY;\r\n        }\r\n\r\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\r\n\r\n        updateRebaseIndex(epoch);\r\n\r\n        if (isStillLaunchPhase()) {\r\n            updateLaunchPeriodFee();\r\n        }\r\n\r\n        emit LogRebase(epoch, _totalSupply);\r\n        return _totalSupply;\r\n    }\r\n\r\n    function manualRebase() external onlyOwner {\r\n        require(!inSwap, 'Try again');\r\n        require(nextRebase <= block.timestamp, 'Not in time');\r\n\r\n        uint256 circulatingSupply = getCirculatingSupply();\r\n        int256 supplyDelta = int256(\r\n            circulatingSupply.mul(rewardYield).div(rewardYieldDenominator)\r\n        );\r\n\r\n        emit LogManualRebase(circulatingSupply, block.timestamp);\r\n        coreRebase(supplyDelta);\r\n    }\r\n\r\n    function updateRebaseIndex(uint256 epoch) private {\r\n        // update the next Rebase time\r\n        nextRebase = epoch.add(rebaseFrequency);\r\n\r\n        //update Index similarly to OHM, so a wrapped token created is possible (wSPHERE)\r\n\r\n        //formula: rebaseIndex * (1 * 10 ** 18 + ((1 * 10 ** 18) + rewardYield / rewardYieldDenominator)) / 1 * 10 ** 18\r\n        rebaseIndex = rebaseIndex\r\n        .mul(\r\n            oneEEighteen.add(\r\n                oneEEighteen.mul(rewardYield).div(rewardYieldDenominator)\r\n            )\r\n        )\r\n        .div(oneEEighteen);\r\n\r\n        //simply show how often we rebased since inception (how many epochs)\r\n        rebaseEpoch += 1;\r\n    }\r\n\r\n    //create a dynamic decrease of sell launch fees within first 5 days (immutable)\r\n    function updateLaunchPeriodFee() private {\r\n        //thanks to integer, if rebaseEpoch is > rebase frequency (30 minutes), sellLaunchFeeSubtracted goes to 1 (48 rebases everyday)\r\n        //the calculation should always round down to the lowest fee deduction every day\r\n        //this calculates how often the rebase frequency is (maximum of 48) - every 30 minutes, so 24 hours / rebase frequency\r\n        uint256 _sellLaunchFeeSubtracted = rebaseEpoch.div(\r\n            secondsPerDay.div(rebaseFrequency)\r\n        );\r\n\r\n        //multiply by 2 to remove 5% everyday\r\n        sellLaunchFeeSubtracted = _sellLaunchFeeSubtracted.mul(5);\r\n\r\n        //if the sellLaunchFeeSubtracted epochs have exceeded or are same as the sellLaunchFeeAdded, set the sellLaunchFeeAdded to 0 (false)\r\n        if (sellLaunchFeeAdded <= sellLaunchFeeSubtracted) {\r\n            isStillLaunchPeriod = false;\r\n            sellLaunchFeeSubtracted = sellLaunchFeeAdded;\r\n        }\r\n\r\n        //set the sellFee\r\n        setSellFee(\r\n            totalBuyFee\r\n            .add(sellFeeTreasuryAdded)\r\n            .add(sellFeeRFVAdded)\r\n            .add(sellBurnFee)\r\n            .add(sellLaunchFeeAdded - sellLaunchFeeSubtracted)\r\n        );\r\n    }\r\n\r\n    //add new subcontracts to the protocol so they can be calculated\r\n    function addSubContracts(address _subContract, bool _value)\r\n    public\r\n    onlyOwner\r\n    {\r\n        require(subContractCheck[_subContract] != _value, 'Value already set');\r\n\r\n        subContractCheck[_subContract] = _value;\r\n\r\n        if (_value) {\r\n            subContracts.push(_subContract);\r\n        } else {\r\n            for (uint256 i = 0; i < subContracts.length; i++) {\r\n                if (subContracts[i] == _subContract) {\r\n                    subContracts[i] = subContracts[subContracts.length - 1];\r\n                    subContracts.pop();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        emit SetSubContracts(_subContract, _value);\r\n    }\r\n\r\n    //Add S.P.H.E.R.E. Games Contracts\r\n    function addSphereGamesAddies(address _sphereGamesAddy, bool _value)\r\n    private\r\n    {\r\n        require(\r\n            sphereGamesCheck[_sphereGamesAddy] != _value,\r\n            'Value already set'\r\n        );\r\n\r\n        sphereGamesCheck[_sphereGamesAddy] = _value;\r\n\r\n        if (_value) {\r\n            sphereGamesContracts.push(_sphereGamesAddy);\r\n        } else {\r\n            require(sphereGamesContracts.length > 1, 'Required 1 pair');\r\n            for (uint256 i = 0; i < sphereGamesContracts.length; i++) {\r\n                if (sphereGamesContracts[i] == _sphereGamesAddy) {\r\n                    sphereGamesContracts[i] = sphereGamesContracts[\r\n                    sphereGamesContracts.length - 1\r\n                    ];\r\n                    sphereGamesContracts.pop();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        emit SetSphereGamesAddresses(_sphereGamesAddy, _value);\r\n    }\r\n\r\n    function addPartyAddies(address _partyAddy, bool _value) public onlyOwner {\r\n        require(partyArrayCheck[_partyAddy] != _value, 'Value already set');\r\n\r\n        partyArrayCheck[_partyAddy] = _value;\r\n\r\n        if (_value) {\r\n            partyArray.push(_partyAddy);\r\n        } else {\r\n            for (uint256 i = 0; i < partyArray.length; i++) {\r\n                if (partyArray[i] == _partyAddy) {\r\n                    partyArray[i] = partyArray[partyArray.length - 1];\r\n                    partyArray.pop();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        emit SetPartyAddresses(_partyAddy, _value);\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address _pair, bool _value)\r\n    public\r\n    onlyOwner\r\n    {\r\n        require(\r\n            automatedMarketMakerPairs[_pair] != _value,\r\n            'Value already set'\r\n        );\r\n\r\n        automatedMarketMakerPairs[_pair] = _value;\r\n\r\n        if (_value) {\r\n            _markerPairs.push(_pair);\r\n            _markerPairCount++;\r\n        } else {\r\n            require(_markerPairs.length > 1, 'Required 1 pair');\r\n            for (uint256 i = 0; i < _markerPairs.length; i++) {\r\n                if (_markerPairs[i] == _pair) {\r\n                    _markerPairs[i] = _markerPairs[_markerPairs.length - 1];\r\n                    _markerPairs.pop();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        emit SetAutomatedMarketMakerPair(_pair, _value);\r\n    }\r\n\r\n    function setInitialDistributionFinished(bool _value) external onlyOwner {\r\n        require(initialDistributionFinished != _value, 'Not changed');\r\n        initialDistributionFinished = _value;\r\n\r\n        emit SetInitialDistribution(_value);\r\n    }\r\n\r\n    function setPartyListDivisor(uint256 _value) external onlyOwner {\r\n        require(partyListDivisor != _value, 'Not changed');\r\n        require(\r\n            _value <= MAX_PARTY_LIST_DIVISOR_RATE,\r\n            'max party divisor amount'\r\n        );\r\n        partyListDivisor = _value;\r\n\r\n        emit SetPartyListDivisor(_value);\r\n    }\r\n\r\n    function setFeeExempt(address _addr, bool _value) external onlyOwner {\r\n        require(_isFeeExempt[_addr] != _value, 'Not changed');\r\n        _isFeeExempt[_addr] = _value;\r\n\r\n        emit SetFeeExempt(_addr, _value);\r\n    }\r\n\r\n    function setTaxNonMarketMaker(bool _value) external onlyOwner {\r\n        require(taxNonMarketMaker != _value, 'Not changed');\r\n        taxNonMarketMaker = _value;\r\n        emit TaxNonMarketMakerSet(_value, block.timestamp);\r\n    }\r\n\r\n    function setTargetLiquidity(uint256 target, uint256 accuracy)\r\n    external\r\n    onlyOwner\r\n    {\r\n        targetLiquidity = target;\r\n        targetLiquidityDenominator = accuracy;\r\n        emit SetTargetLiquidity(target, accuracy);\r\n    }\r\n\r\n    function setSwapBackSettings(\r\n        bool _enabled,\r\n        uint256 _num,\r\n        uint256 _denom\r\n    ) external onlyOwner {\r\n        swapEnabled = _enabled;\r\n        gonSwapThreshold = TOTAL_GONS.mul(_num).div(_denom);\r\n        emit SetSwapBackSettings(_enabled, _num, _denom);\r\n    }\r\n\r\n    function setFeeReceivers(\r\n        address _liquidityReceiver,\r\n        address _treasuryReceiver,\r\n        address _riskFreeValueReceiver\r\n    ) external onlyOwner {\r\n        require(_liquidityReceiver != address(0), '_liquidityReceiver not set');\r\n        require(_treasuryReceiver != address(0), '_treasuryReceiver not set');\r\n        require(\r\n            _riskFreeValueReceiver != address(0),\r\n            '_riskFreeValueReceiver not set'\r\n        );\r\n        liquidityReceiver = _liquidityReceiver;\r\n        treasuryReceiver = _treasuryReceiver;\r\n        riskFreeValueReceiver = _riskFreeValueReceiver;\r\n        emit SetFeeReceivers(_liquidityReceiver, _treasuryReceiver, _riskFreeValueReceiver);\r\n    }\r\n\r\n    function setFees(\r\n        uint256 _liquidityFee,\r\n        uint256 _riskFreeValue,\r\n        uint256 _treasuryFee,\r\n        uint256 _burnFee,\r\n        uint256 _sellFeeTreasuryAdded,\r\n        uint256 _sellFeeRFVAdded,\r\n        uint256 _sellBurnFee\r\n    ) external onlyOwner {\r\n        //check if total value does not exceed 20%\r\n        //PoC that Libero's contract is exploitable:\r\n        //https://mumbai.polygonscan.com/address/0x6fc034596feb97a522346d7a42e705b075632d0c#readContract\r\n        //Libero Contract: https://bscscan.com/address/0x0dfcb45eae071b3b846e220560bbcdd958414d78#readContract\r\n        uint256 maxTotalBuyFee = _liquidityFee.add(_treasuryFee).add(\r\n            _riskFreeValue\r\n        );\r\n\r\n        uint256 maxTotalSellFee = maxTotalBuyFee.add(_sellFeeTreasuryAdded).add(\r\n            _sellFeeRFVAdded\r\n        );\r\n\r\n        require(\r\n            _liquidityFee <= MAX_FEE_RATE &&\r\n            _riskFreeValue <= MAX_FEE_RATE &&\r\n            _treasuryFee <= MAX_FEE_RATE &&\r\n            _sellFeeTreasuryAdded <= MAX_FEE_RATE &&\r\n            _sellFeeRFVAdded <= MAX_FEE_RATE,\r\n            'set fee higher than max fee allowing'\r\n        );\r\n\r\n        require(maxTotalBuyFee < MAX_FEE_RATE, 'exceeded max buy fees');\r\n\r\n        require(maxTotalSellFee < MAX_FEE_RATE, 'exceeded max sell fees');\r\n\r\n        liquidityFee = _liquidityFee;\r\n        buyFeeRFV = _riskFreeValue;\r\n        treasuryFee = _treasuryFee;\r\n        sellFeeTreasuryAdded = _sellFeeTreasuryAdded;\r\n        sellFeeRFVAdded = _sellFeeRFVAdded;\r\n        burnFee = _burnFee;\r\n        sellBurnFee = _sellBurnFee;\r\n        totalBuyFee = liquidityFee.add(treasuryFee).add(buyFeeRFV);\r\n\r\n        setSellFee(\r\n            totalBuyFee.add(sellFeeTreasuryAdded).add(sellFeeRFVAdded).add(\r\n                sellLaunchFeeAdded - sellLaunchFeeSubtracted\r\n            )\r\n        );\r\n\r\n        emit SetFees(_liquidityFee, _riskFreeValue, _treasuryFee, _sellFeeTreasuryAdded, _sellFeeRFVAdded, _burnFee, sellBurnFee, totalBuyFee);\r\n    }\r\n\r\n    function setSellFee(uint256 _sellFee) internal {\r\n        totalSellFee = _sellFee;\r\n    }\r\n\r\n    function setStablecoin(address _stableCoin) external onlyOwner {\r\n        require(_stableCoin != address(0x0), 'can not use 0x0 address');\r\n        stableCoin = _stableCoin;\r\n        emit SetStablecoin(_stableCoin);\r\n    }\r\n\r\n    function setPartyIsOver() external onlyOwner {\r\n        isPartyOver = true;\r\n        emit SetPartyIsOver(true, block.timestamp);\r\n    }\r\n\r\n    function setTaxBracketFeeMultiplier(uint256 _taxBracketFeeMultiplier)\r\n    external\r\n    onlyOwner\r\n    {\r\n        require(\r\n            _taxBracketFeeMultiplier <= MAX_TAX_BRACKET_FEE_RATE,\r\n            'max bracket fee exceeded'\r\n        );\r\n        taxBracketMultiplier = _taxBracketFeeMultiplier;\r\n        emit SetTaxBracketFeeMultiplier(_taxBracketFeeMultiplier, block.timestamp);\r\n    }\r\n\r\n    function clearStuckBalance(address _receiver) external onlyOwner {\r\n        require(_receiver != address(0x0), 'invalid address');\r\n        uint256 balance = address(this).balance;\r\n        payable(_receiver).transfer(balance);\r\n        emit ClearStuckBalance(balance, _receiver, block.timestamp);\r\n\r\n    }\r\n\r\n    function rescueToken(address tokenAddress, uint256 tokens)\r\n    external\r\n    onlyOwner\r\n    returns (bool success)\r\n    {\r\n        emit RescueToken(tokenAddress, msg.sender, tokens, block.timestamp);\r\n        return ERC20Detailed(tokenAddress).transfer(msg.sender, tokens);\r\n    }\r\n\r\n    function setAutoRebase(bool _autoRebase) external onlyOwner {\r\n        require(autoRebase != _autoRebase, 'Not changed');\r\n        autoRebase = _autoRebase;\r\n        emit SetAutoRebase(_autoRebase, block.timestamp);\r\n    }\r\n\r\n    //enable burn fee if necessary\r\n    function setBurnFee(bool _isBurnEnabled) external onlyOwner {\r\n        require(\r\n            isBurnEnabled != _isBurnEnabled,\r\n            \"Burn function hasn't changed\"\r\n        );\r\n        isBurnEnabled = _isBurnEnabled;\r\n        emit SetBurnFee(_isBurnEnabled, block.timestamp);\r\n    }\r\n\r\n    //disable launch fee so calculations are not necessarily made\r\n    function setLaunchPeriod(bool _isStillLaunchPeriod) external onlyOwner {\r\n        require(\r\n            isStillLaunchPeriod != _isStillLaunchPeriod,\r\n            \"Launch function hasn't changed\"\r\n        );\r\n        require(isStillLaunchPeriod, 'launch period already over');\r\n        isStillLaunchPeriod = _isStillLaunchPeriod;\r\n        emit SetLaunchPeriod(_isStillLaunchPeriod, block.timestamp);\r\n    }\r\n\r\n    //enable burn fee if necessary\r\n    function setTaxBracket(bool _isTaxBracketEnabled) external onlyOwner {\r\n        require(\r\n            isTaxBracketEnabled != _isTaxBracketEnabled,\r\n            \"Tax Bracket function hasn't changed\"\r\n        );\r\n        isTaxBracketEnabled = _isTaxBracketEnabled;\r\n        emit SetTaxBracket(_isTaxBracketEnabled, block.timestamp);\r\n    }\r\n\r\n    function setRebaseFrequency(uint256 _rebaseFrequency) external onlyOwner {\r\n        require(_rebaseFrequency <= MAX_REBASE_FREQUENCY, 'Too high');\r\n        rebaseFrequency = _rebaseFrequency;\r\n        emit SetRebaseFrequency(_rebaseFrequency, block.timestamp);\r\n    }\r\n\r\n    function setRewardYield(\r\n        uint256 _rewardYield,\r\n        uint256 _rewardYieldDenominator\r\n    ) external onlyOwner {\r\n        rewardYield = _rewardYield;\r\n        rewardYieldDenominator = _rewardYieldDenominator;\r\n        emit SetRewardYield(_rewardYield, _rewardYieldDenominator, block.timestamp);\r\n    }\r\n\r\n    function setFeesOnNormalTransfers(bool _enabled) external onlyOwner {\r\n        require(feesOnNormalTransfers != _enabled, 'Not changed');\r\n        feesOnNormalTransfers = _enabled;\r\n        emit SetFeesOnNormalTransfers(_enabled, block.timestamp);\r\n    }\r\n\r\n    function setIsLiquidityInMATIC(bool _value) external onlyOwner {\r\n        require(isLiquidityInMatic != _value, 'Not changed');\r\n        isLiquidityInMatic = _value;\r\n        emit SetIsLiquidityInMATIC(_value, block.timestamp);\r\n    }\r\n\r\n    function setNextRebase(uint256 _nextRebase) external onlyOwner {\r\n        require(\r\n            _nextRebase > block.timestamp,\r\n            'Next rebase can not be in the past'\r\n        );\r\n        nextRebase = _nextRebase;\r\n        emit SetNextRebase(_nextRebase, block.timestamp);\r\n    }\r\n\r\n    function setMaxSellTransaction(uint256 _maxTxn) external onlyOwner {\r\n        require(_maxTxn > MIN_SELL_AMOUNT_RATE, 'Below minimum sell amount');\r\n        maxSellTransactionAmount = _maxTxn;\r\n        emit SetMaxSellTransaction(_maxTxn, block.timestamp);\r\n    }\r\n\r\n    function setMaxBuyTransactionAmount(uint256 _maxTxn) external onlyOwner {\r\n        require(_maxTxn > MIN_BUY_AMOUNT_RATE, 'Below minimum buy amount');\r\n        maxBuyTransactionAmount = _maxTxn;\r\n        emit SetMaxBuyTransactionAmount(_maxTxn, block.timestamp);\r\n    }\r\n\r\n    event SwapBack(\r\n        uint256 contractTokenBalance,\r\n        uint256 amountToLiquify,\r\n        uint256 amountToRFV,\r\n        uint256 amountToTreasury\r\n    );\r\n\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 MATICReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    event SwapAndLiquifyStableCoin(\r\n        uint256 tokensSwapped,\r\n        uint256 StableCoinReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n\r\n    event SetFeeReceivers(\r\n        address indexed _liquidityReceiver,\r\n        address indexed _treasuryReceiver,\r\n        address indexed _riskFreeValueReceiver\r\n    );\r\n\r\n    event SetStablecoin(\r\n        address indexed stableCoin\r\n    );\r\n\r\n    event SetPartyIsOver(\r\n        bool indexed state,\r\n        uint256 indexed time\r\n    );\r\n\r\n    event SetTaxBracketFeeMultiplier(\r\n        uint256 indexed state,\r\n        uint256 indexed time\r\n    );\r\n\r\n    event ClearStuckBalance(\r\n        uint256 indexed amount,\r\n        address indexed receiver,\r\n        uint256 indexed time\r\n    );\r\n\r\n    event RescueToken(\r\n        address indexed tokenAddress,\r\n        address indexed sender,\r\n        uint256 indexed tokens,\r\n        uint256 time\r\n    );\r\n\r\n    event SetAutoRebase(\r\n        bool indexed value,\r\n        uint256 indexed time\r\n    );\r\n\r\n    event SetLaunchPeriod(\r\n        bool indexed value,\r\n        uint256 indexed time\r\n    );\r\n\r\n    event SetTaxBracket(\r\n        bool indexed value,\r\n        uint256 indexed time\r\n    );\r\n\r\n    event SetRebaseFrequency(\r\n        uint256 indexed frequency,\r\n        uint256 indexed time\r\n    );\r\n\r\n    event SetRewardYield(\r\n        uint256 indexed rewardYield,\r\n        uint256 indexed frequency,\r\n        uint256 indexed time\r\n    );\r\n\r\n    event SetFeesOnNormalTransfers(\r\n        bool indexed value,\r\n        uint256 indexed time\r\n    );\r\n\r\n    event SetIsLiquidityInMATIC(\r\n        bool indexed value,\r\n        uint256 indexed time\r\n    );\r\n\r\n    event SetNextRebase(\r\n        uint256 indexed value,\r\n        uint256 indexed time\r\n    );\r\n\r\n    event SetMaxSellTransaction(\r\n        uint256 indexed value,\r\n        uint256 indexed time\r\n    );\r\n\r\n    event SetMaxBuyTransactionAmount(\r\n        uint256 indexed value,\r\n        uint256 indexed time\r\n    );\r\n\r\n    event SetBurnFee(\r\n        bool indexed value,\r\n        uint256 indexed time\r\n    );\r\n\r\n    event SetSwapBackSettings(\r\n        bool indexed enabled,\r\n        uint256 indexed num,\r\n        uint256 indexed denum\r\n    );\r\n\r\n    event MainLPAddressSet(address mainLP, uint256 time);\r\n\r\n    event TaxNonMarketMakerSet(bool value, uint256 time);\r\n    event SetTargetLiquidity(uint256 indexed target, uint256 indexed accuracy);\r\n\r\n\r\n    event Main(bool enabled, uint256 time);\r\n\r\n    event SetFees(\r\n        uint256 indexed _liquidityFee,\r\n        uint256 indexed _riskFreeValue,\r\n        uint256 indexed _treasuryFee,\r\n        uint256 _sellFeeTreasuryAdded,\r\n        uint256 _sellFeeRFVAdded,\r\n        uint256 _burnFee,\r\n        uint256 sellBurnFee,\r\n        uint256 totalBuyFee\r\n    );\r\n\r\n    event LogRebase(uint256 indexed epoch, uint256 totalSupply);\r\n    event LogManualRebase(uint256 circulatingSupply, uint256 timeStamp);\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n    event SetInitialDistribution(bool indexed value);\r\n    event SetPartyListDivisor(uint256 indexed value);\r\n    event SetFeeExempt(address indexed addy, bool indexed value);\r\n    event SetSubContracts(address indexed pair, bool indexed value);\r\n    event SetPartyAddresses(address indexed pair, bool indexed value);\r\n    event SetSphereGamesAddresses(address indexed pair, bool indexed value);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ClearStuckBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"circulatingSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"LogManualRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Main\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mainLP\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"MainLPAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"RescueToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SetAutoRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SetBurnFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetFeeExempt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_liquidityReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_treasuryReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_riskFreeValueReceiver\",\"type\":\"address\"}],\"name\":\"SetFeeReceivers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_riskFreeValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sellFeeTreasuryAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sellFeeRFVAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellBurnFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBuyFee\",\"type\":\"uint256\"}],\"name\":\"SetFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SetFeesOnNormalTransfers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetInitialDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SetIsLiquidityInMATIC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SetLaunchPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SetMaxBuyTransactionAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SetMaxSellTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SetNextRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetPartyAddresses\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SetPartyIsOver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetPartyListDivisor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"frequency\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SetRebaseFrequency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rewardYield\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"frequency\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SetRewardYield\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetSphereGamesAddresses\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stableCoin\",\"type\":\"address\"}],\"name\":\"SetStablecoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetSubContracts\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"denum\",\"type\":\"uint256\"}],\"name\":\"SetSwapBackSettings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"SetTargetLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SetTaxBracket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"state\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SetTaxBracketFeeMultiplier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"MATICReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"StableCoinReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquifyStableCoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractTokenBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToLiquify\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToRFV\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToTreasury\",\"type\":\"uint256\"}],\"name\":\"SwapBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"TaxNonMarketMakerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"TransferOwnerShip\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_FEE_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PARTY_LIST_DIVISOR_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TAX_BRACKET_FEE_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_BUY_AMOUNT_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_SELL_AMOUNT_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NON_MARKET_MAKER_FEE_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_markerPairCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_markerPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partyAddy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"addPartyAddies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_subContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"addSubContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeRFV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IDEXFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesOnNormalTransfers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getBalanceOfAllSphereGamesContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getBalanceOfAllSubContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getCurrentTaxBracket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGonBalances\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"thresholdReturn\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"gonBalanceReturn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"getLiquidityBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getOneTokenInLPCirculation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"LPTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokensInLPCirculation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getUserTotalOnDifferentContractsSphere\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iDexPair\",\"outputs\":[{\"internalType\":\"contract IDexPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialDistributionFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBurnEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLiquidityInMatic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"isOverLiquified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPartyOver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStillLaunchPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTaxBracketEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"markerPairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonMarketMakerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneEEighteen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"partyArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"partyArrayCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partyListDivisor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardYieldDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"riskFreeValueReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondsPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeRFVAdded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeTreasuryAdded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLaunchFeeAdded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLaunchFeeSubtracted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_autoRebase\",\"type\":\"bool\"}],\"name\":\"setAutoRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isBurnEnabled\",\"type\":\"bool\"}],\"name\":\"setBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_riskFreeValueReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_riskFreeValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFeeTreasuryAdded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFeeRFVAdded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellBurnFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setFeesOnNormalTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setInitialDistributionFinished\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setIsLiquidityInMATIC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isStillLaunchPeriod\",\"type\":\"bool\"}],\"name\":\"setLaunchPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTxn\",\"type\":\"uint256\"}],\"name\":\"setMaxBuyTransactionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTxn\",\"type\":\"uint256\"}],\"name\":\"setMaxSellTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nextRebase\",\"type\":\"uint256\"}],\"name\":\"setNextRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPartyIsOver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setPartyListDivisor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rebaseFrequency\",\"type\":\"uint256\"}],\"name\":\"setRebaseFrequency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardYieldDenominator\",\"type\":\"uint256\"}],\"name\":\"setRewardYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stableCoin\",\"type\":\"address\"}],\"name\":\"setStablecoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denom\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"setTargetLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isTaxBracketEnabled\",\"type\":\"bool\"}],\"name\":\"setTaxBracket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taxBracketFeeMultiplier\",\"type\":\"uint256\"}],\"name\":\"setTaxBracketFeeMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setTaxNonMarketMaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sphereGamesCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sphereGamesContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableCoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"subContractCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"subContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxBracketMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxNonMarketMaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SphereToken", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9b36d5d1aa9f4f10f44bbf37d23c32cd65fbdb833d1f75b1da9190857f44ea90"}