{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@poolzfinance/poolz-helper-v2/contracts/interfaces/IVaultManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\r\\n\\r\\ninterface IVaultManager is IERC2981 {\\r\\n    function depositByToken(address _tokenAddress, uint _amount) external returns (uint vaultId);\\r\\n    function safeDeposit(\\r\\n        address _tokenAddress,\\r\\n        uint _amount,\\r\\n        address _from,\\r\\n        bytes memory _signature\\r\\n    ) external returns (uint vaultId);\\r\\n    function withdrawByVaultId(uint _vaultId, address to, uint _amount) external;\\r\\n    function vaultIdToTokenAddress(uint _vaultId) external view returns (address token);\\r\\n    function vaultIdToTradeStartTime(uint256 _vaultId) external view returns (uint256 startTime);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/AdvancedProviders/CollateralProvider/CollateralProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IFundsManager.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"./CollateralState.sol\\\";\\nimport \\\"../../util/CalcUtils.sol\\\";\\n\\ncontract CollateralProvider is IFundsManager, ERC721Holder, CollateralState {\\n    using CalcUtils for uint256;\\n\\n    ///@dev withdraw tokens\\n    constructor(ILockDealNFT _lockDealNFT, address _dealProvider) {\\n        require(address(_lockDealNFT) != address(0x0) && _dealProvider != address(0x0), \\\"invalid address\\\");\\n        lockDealNFT = _lockDealNFT;\\n        provider = ISimpleProvider(_dealProvider);\\n        name = \\\"CollateralProvider\\\";\\n    }\\n\\n    function registerPool(\\n        uint256 poolId,\\n        uint256[] calldata params\\n    )\\n        public\\n        override\\n        onlyProvider\\n        validProviderId(poolId)\\n        validParamsLength(params.length, currentParamsTargetLenght())\\n    {\\n        _registerPool(poolId, params);\\n    }\\n\\n    /// @dev Each provider decides how many parameters it needs by overriding this function.\\n    /// @param params[0] = token amount\\n    /// @param params[params.length - 2] = main coin amount\\n    /// @param params[params.length - 1] = FinishTime\\n    function _registerPool(uint256 poolId, uint256[] calldata params) internal {\\n        uint256 tokenAmount = params[0];\\n        uint256 mainCoinAmount = params[params.length - 2];\\n        uint256 finishTime = params[params.length - 1];\\n\\n        require(block.timestamp <= finishTime, \\\"start time must be in the future\\\");\\n        require(poolId == lockDealNFT.totalSupply() - 1, \\\"Invalid poolId\\\");\\n\\n        uint256 rate = mainCoinAmount.calcRate(tokenAmount);\\n        require(rate <= 1e21, \\\"invalid rateToWei\\\");\\n\\n        uint256 mainCoinHolderId = _mintNFTs();\\n        _setPoolProperties(poolId, rate, finishTime, mainCoinAmount);\\n        _cloneVaultIds(poolId);\\n\\n        assert(mainCoinHolderId == poolId + 3);\\n        emit UpdateParams(poolId, params);\\n    }\\n\\n    function _setPoolProperties(uint256 poolId, uint256 rate, uint256 finishTime, uint256 mainCoinAmount) private {\\n        poolIdToRateToWei[poolId] = rate;\\n        poolIdToTime[poolId] = finishTime;\\n        uint256[] memory mainCoinParams = new uint256[](1);\\n        mainCoinParams[0] = mainCoinAmount;\\n        provider.registerPool(poolId + 3, mainCoinParams); // Just need the 0 index, token left amount\\n    }\\n\\n    function _mintNFTs() private returns (uint256 poolId) {\\n        lockDealNFT.mintForProvider(address(this), provider); // Main Coin Collector\\n        lockDealNFT.mintForProvider(address(this), provider); // Token Collector\\n        poolId = lockDealNFT.mintForProvider(address(this), provider);\\n    }\\n\\n    function _cloneVaultIds(uint256 mainCoinPoolId) private {\\n        lockDealNFT.cloneVaultId(mainCoinPoolId + 1, mainCoinPoolId);\\n        lockDealNFT.cloneVaultId(mainCoinPoolId + 3, mainCoinPoolId);\\n    }\\n\\n    // this need to give the project owner to get the tokens that in the poolId + 2\\n    function withdraw(uint256 poolId) public view override onlyNFT returns (uint256, bool isFinal) {\\n        isFinal = poolIdToTime[poolId] < block.timestamp;\\n    }\\n\\n    ///@dev newPoolId is collateral provider\\n    function split(uint256 poolId, uint256, uint256 ratio) external override onlyNFT {\\n        (uint256 mainCoinCollectorId, uint256 tokenCollectorId, uint256 mainCoinHolderId) = getInnerIds(poolId);\\n        uint256 tokenCollectorAmount = provider.getWithdrawableAmount(tokenCollectorId);\\n        uint256 coinCollectorAmount = provider.getWithdrawableAmount(mainCoinCollectorId);\\n        uint256 coinHolderAmount = poolIdToTime[poolId] < block.timestamp\\n            ? provider.getWithdrawableAmount(mainCoinHolderId)\\n            : 0;\\n        require(coinHolderAmount + coinCollectorAmount + tokenCollectorAmount > 0, \\\"pools are empty\\\");\\n        _splitter(coinCollectorAmount, mainCoinCollectorId, ratio);\\n        _splitter(tokenCollectorAmount, tokenCollectorId, ratio);\\n        _splitter(coinHolderAmount, mainCoinHolderId, ratio);\\n    }\\n\\n    function _splitter(uint256 amount, uint256 poolId, uint256 ratio) internal {\\n        if (amount > 0) {\\n            lockDealNFT.safeTransferFrom(address(this), address(lockDealNFT), poolId, abi.encode(ratio));\\n        } else {\\n            lockDealNFT.mintForProvider(address(this), provider);\\n        }\\n    }\\n\\n    function handleRefund(\\n        uint256 poolId,\\n        address user,\\n        uint256 tokenAmount\\n    ) public override onlyProvider validProviderId(poolId) {\\n        (, uint256 tokenCollectorId, uint256 mainCoinHolderId) = getInnerIds(poolId);\\n        uint256 mainCoinAmount = tokenAmount.calcAmount(poolIdToRateToWei[poolId]);\\n        provider.withdraw(mainCoinHolderId, mainCoinAmount);\\n        _deposit(tokenCollectorId, tokenAmount);\\n        uint256 newMainCoinPoolId = lockDealNFT.mintForProvider(user, provider);\\n        uint256[] memory params = new uint256[](1);\\n        params[0] = mainCoinAmount;\\n        provider.registerPool(newMainCoinPoolId, params);\\n        lockDealNFT.cloneVaultId(newMainCoinPoolId, mainCoinHolderId);\\n    }\\n\\n    function handleWithdraw(uint256 poolId, uint256 tokenAmount) public override onlyProvider validProviderId(poolId) {\\n        uint256 mainCoinCollectorId = poolId + 1;\\n        uint256 mainCoinHolderId = poolId + 3;\\n        uint256 mainCoinAmount = tokenAmount.calcAmount(poolIdToRateToWei[poolId]);\\n        provider.withdraw(mainCoinHolderId, mainCoinAmount);\\n        _deposit(mainCoinCollectorId, mainCoinAmount);\\n    }\\n\\n    function _deposit(uint256 poolId, uint256 amount) internal {\\n        uint256[] memory params = provider.getParams(poolId);\\n        params[0] += amount;\\n        provider.registerPool(poolId, params);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/AdvancedProviders/CollateralProvider/CollateralState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../SimpleProviders/LockProvider/LockDealState.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"../../SimpleProviders/Provider/ProviderModifiers.sol\\\";\\nimport \\\"../../interfaces/IInnerWithdraw.sol\\\";\\n\\nabstract contract CollateralState is LockDealState, IInnerWithdraw, IERC165, ProviderModifiers {\\n    mapping(uint256 => uint256) public poolIdToRateToWei;\\n\\n    function getParams(uint256 poolId) public view override returns (uint256[] memory params) {\\n        (, , uint256 mainCoinHolderId) = getInnerIds(poolId);\\n        params = new uint256[](3);\\n        params[0] = provider.getParams(mainCoinHolderId)[0];\\n        params[1] = poolIdToTime[poolId];\\n        params[2] = poolIdToRateToWei[poolId];\\n    }\\n\\n    function getInnerIdsArray(uint256 poolId) public view override returns (uint256[] memory ids) {\\n        if (poolIdToTime[poolId] < block.timestamp) {\\n            ids = new uint256[](3);\\n            (ids[0], ids[1], ids[2]) = getInnerIds(poolId);\\n        } else {\\n            ids = new uint256[](2);\\n            (, ids[0], ids[1]) = getInnerIds(poolId);\\n        }\\n    }\\n\\n    function currentParamsTargetLenght() public pure override returns (uint256) {\\n        return 3;\\n    }\\n\\n    function getInnerIds(\\n        uint256 poolId\\n    ) internal pure returns (uint256 mainCoinCollectorId, uint256 tokenHolderId, uint256 mainCoinHolderId) {\\n        mainCoinCollectorId = poolId + 1;\\n        tokenHolderId = poolId + 2;\\n        mainCoinHolderId = poolId + 3;\\n    }\\n\\n    function getWithdrawableAmount(uint256 poolId) public view override returns (uint256 withdrawalAmount) {\\n        if (lockDealNFT.poolIdToProvider(poolId) == this) {\\n            (uint256 mainCoinCollectorId, , uint256 mainCoinHolderId) = getInnerIds(poolId);\\n            withdrawalAmount = lockDealNFT.getWithdrawableAmount(mainCoinCollectorId);\\n            if (poolIdToTime[poolId] <= block.timestamp) {\\n                withdrawalAmount += lockDealNFT.getWithdrawableAmount(mainCoinHolderId);\\n            }\\n        }\\n    }\\n\\n    ///@dev Collateral can't be Refundble or Bundleble\\n    /// Override basic provider supportsInterface\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId || interfaceId == type(IInnerWithdraw).interfaceId;\\n    }\\n\\n    function getSubProvidersPoolIds(\\n        uint256 poolId\\n    ) public view virtual override returns (uint256[] memory poolIds) {\\n        if (lockDealNFT.poolIdToProvider(poolId) == this) {\\n            poolIds = new uint256[](3);\\n            poolIds[0] = poolId + 1;\\n            poolIds[1] = poolId + 2;\\n            poolIds[2] = poolId + 3;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFundsManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IFundsManager {\\n    function handleWithdraw(uint256 poolId, uint256 tokenAmount) external;\\n    function handleRefund(uint256 poolId, address user, uint256 tokenAmount) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IInnerWithdraw.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IInnerWithdraw {\\n    function getInnerIdsArray(uint256 poolId) external returns (uint256[] calldata ids);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILockDealNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IProvider.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@poolzfinance/poolz-helper-v2/contracts/interfaces/IVaultManager.sol\\\";\\n\\ninterface ILockDealNFT is IERC721Enumerable {\\n    function approvedContracts(address contractAddress) external view returns (bool);\\n\\n    function mintAndTransfer(\\n        address owner,\\n        address token,\\n        uint256 amount,\\n        IProvider provider\\n    ) external returns (uint256 poolId);\\n\\n    function safeMintAndTransfer(\\n        address owner,\\n        address token,\\n        address from,\\n        uint256 amount,\\n        IProvider provider,\\n        bytes calldata data\\n    ) external returns (uint256 poolId);\\n\\n    function cloneVaultId(uint256 destinationPoolId, uint256 sourcePoolId) external;\\n\\n    function mintForProvider(address owner, IProvider provider) external returns (uint256 poolId);\\n\\n    function getData(uint256 poolId) external view returns (BasePoolInfo memory poolInfo);\\n\\n    function getFullData(uint256 poolId) external view returns (BasePoolInfo[] memory poolInfo);\\n\\n    function tokenOf(uint256 poolId) external view returns (address token);\\n\\n    function vaultManager() external view returns (IVaultManager);\\n\\n    function poolIdToProvider(uint256 poolId) external view returns (IProvider provider);\\n\\n    function getWithdrawableAmount(uint256 poolId) external view returns (uint256 withdrawalAmount);\\n\\n    struct BasePoolInfo {\\n        IProvider provider;\\n        string name;\\n        uint256 poolId;\\n        uint256 vaultId;\\n        address owner;\\n        address token;\\n        uint256[] params;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n///@dev Interface for the provider contract\\n///@notice This interface is used by the NFT contract to call the provider contract\\ninterface IProvider {\\n    event UpdateParams(uint256 indexed poolId, uint256[] params);\\n\\n    function withdraw(uint256 tokenId) external returns (uint256 withdrawnAmount, bool isFinal);\\n\\n    function split(uint256 oldPoolId, uint256 newPoolId, uint256 ratio) external;\\n\\n    function registerPool(uint256 poolId, uint256[] calldata params) external;\\n\\n    function getParams(uint256 poolId) external view returns (uint256[] memory params);\\n\\n    function getWithdrawableAmount(uint256 poolId) external view returns (uint256 withdrawalAmount);\\n\\n    function currentParamsTargetLenght() external view returns (uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function getSubProvidersPoolIds(uint256 poolID) external view returns (uint256[] memory poolIds);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISimpleProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IProvider.sol\\\";\\n\\n///@dev Interface for the simple providers\\ninterface ISimpleProvider is IProvider {\\n    function withdraw(uint256 poolId, uint256 amount) external returns (uint256 withdrawnAmount, bool isFinal);\\n}\\n\"\r\n    },\r\n    \"contracts/SimpleProviders/LockProvider/LockDealState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/ISimpleProvider.sol\\\";\\n\\n/// @title LockDealState contract\\n/// @notice Contains storage variables\\nabstract contract LockDealState {\\n    ISimpleProvider public provider;\\n    mapping(uint256 => uint256) public poolIdToTime;\\n}\\n\"\r\n    },\r\n    \"contracts/SimpleProviders/Provider/ProviderModifiers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ProviderState.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\n\\nabstract contract ProviderModifiers is ProviderState {\\n    modifier onlyProvider() {\\n        _onlyProvider();\\n        _;\\n    }\\n\\n    modifier validParamsLength(uint256 paramsLength, uint256 minLength) {\\n        _validParamsLength(paramsLength, minLength);\\n        _;\\n    }\\n\\n    modifier onlyNFT() {\\n        _onlyNFT();\\n        _;\\n    }\\n\\n    modifier validProviderAssociation(uint256 poolId, IProvider provider) {\\n        _validProvider(poolId, provider);\\n        _;\\n    }\\n\\n    modifier validProviderId(uint256 poolId) {\\n        _validProvider(poolId, this);\\n        _;\\n    }\\n\\n    modifier validAddressesLength(uint256 addressLength, uint256 minLength) {\\n        _validAddressLength(addressLength, minLength);\\n        _;\\n    }\\n\\n    function _validAddressLength(uint256 addressLength, uint256 minLength) internal pure {\\n        require(addressLength >= minLength, \\\"invalid addresses length\\\");\\n    }\\n\\n    function _validProvider(uint256 poolId, IProvider provider) internal view {\\n        require(lockDealNFT.poolIdToProvider(poolId) == provider, \\\"Invalid provider poolId\\\");\\n    }\\n\\n    function _onlyNFT() internal view {\\n        require(msg.sender == address(lockDealNFT), \\\"only NFT contract can call this function\\\");\\n    }\\n\\n    function _validParamsLength(uint256 paramsLength, uint256 minLength) private pure {\\n        require(paramsLength >= minLength, \\\"invalid params length\\\");\\n    }\\n\\n    function _onlyProvider() private view {\\n        require(lockDealNFT.approvedContracts(msg.sender), \\\"invalid provider address\\\");\\n    }\\n\\n    function _validProviderInterface(IProvider provider, bytes4 interfaceId) internal view {\\n        require(ERC165Checker.supportsInterface(address(provider), interfaceId), \\\"invalid provider type\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/SimpleProviders/Provider/ProviderState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/ILockDealNFT.sol\\\";\\n\\nabstract contract ProviderState is IProvider {\\n    ///@dev Each provider sets its own name\\n    string public name;\\n    ILockDealNFT public lockDealNFT;\\n\\n    ///@dev each provider decides how many parameters it needs by overriding this function\\n    function currentParamsTargetLenght() public view virtual returns (uint256) {\\n        return 1;\\n    }\\n\\n    function getSubProvidersPoolIds(uint256) public view virtual override returns (uint256[] memory poolIds) {\\n        return poolIds;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/util/CalcUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary CalcUtils {\\n    function calcAmount(uint256 amount, uint256 rate) internal pure returns (uint256 tokenA) {\\n        return (amount * rate) / 1e21;\\n    }\\n\\n    function calcRate(uint256 tokenAValue, uint256 tokenBValue) internal pure returns (uint256 rate) {\\n        return (tokenAValue * 1e21) / tokenBValue;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ILockDealNFT\",\"name\":\"_lockDealNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dealProvider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"params\",\"type\":\"uint256[]\"}],\"name\":\"UpdateParams\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"currentParamsTargetLenght\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getInnerIdsArray\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getParams\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"params\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getSubProvidersPoolIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"poolIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getWithdrawableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"handleRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"handleWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDealNFT\",\"outputs\":[{\"internalType\":\"contract ILockDealNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolIdToRateToWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolIdToTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"provider\",\"outputs\":[{\"internalType\":\"contract ISimpleProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"params\",\"type\":\"uint256[]\"}],\"name\":\"registerPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"split\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFinal\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CollateralProvider", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c61634a6bbb934270725af221b5ff4fd4bdb0b130000000000000000000000004b597bb8bff75665de86d1a0d1f55a8c81bdf616", "EVMVersion": "istanbul", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}