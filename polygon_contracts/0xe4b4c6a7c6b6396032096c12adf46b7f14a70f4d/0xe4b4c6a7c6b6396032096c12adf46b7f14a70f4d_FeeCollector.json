{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"./contracts/FeeCollector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport { IFeeCollector } from \\\"./interfaces/IFeeCollector.sol\\\";\\nimport { LibTransfer } from \\\"./lib/LibTransfer.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Multicall } from \\\"@openzeppelin/contracts/utils/Multicall.sol\\\";\\n\\n/// @title A smart contract for registering vaults for payments.\\ncontract FeeCollector is IFeeCollector, Multicall, Ownable {\\n    using LibTransfer for address payable;\\n\\n    address payable public guildTreasury;\\n    uint96 public totalFeeBps;\\n\\n    mapping(string => FeeShare[]) internal feeSchemas;\\n\\n    Vault[] internal vaults;\\n\\n    /// @param guildTreasury_ The address that will receive Guild's share from the funds.\\n    /// @param totalFeeBps_ The percentage of Guild's and any partner's share expressed in basis points.\\n    constructor(address payable guildTreasury_, uint256 totalFeeBps_) {\\n        guildTreasury = guildTreasury_;\\n        totalFeeBps = uint96(totalFeeBps_);\\n    }\\n\\n    function registerVault(address payable owner, address token, bool multiplePayments, uint128 fee) external {\\n        Vault storage vault = vaults.push();\\n        vault.owner = owner;\\n        vault.token = token;\\n        vault.multiplePayments = multiplePayments;\\n        vault.fee = fee;\\n\\n        emit VaultRegistered(vaults.length - 1, owner, token, fee);\\n    }\\n\\n    function payFee(uint256 vaultId) external payable {\\n        if (vaultId >= vaults.length) revert VaultDoesNotExist(vaultId);\\n\\n        Vault storage vault = vaults[vaultId];\\n\\n        if (!vault.multiplePayments && vault.paid[msg.sender]) revert AlreadyPaid(vaultId, msg.sender);\\n\\n        uint256 requiredAmount = vault.fee;\\n        vault.balance += uint128(requiredAmount);\\n        vault.paid[msg.sender] = true;\\n\\n        // If the tokenAddress is zero, the payment should be in Ether, otherwise in ERC20.\\n        address tokenAddress = vault.token;\\n        if (tokenAddress == address(0)) {\\n            if (msg.value != requiredAmount) revert IncorrectFee(vaultId, msg.value, requiredAmount);\\n        } else {\\n            if (msg.value != 0) revert IncorrectFee(vaultId, msg.value, 0);\\n            payable(address(this)).sendTokenFrom(msg.sender, tokenAddress, requiredAmount);\\n        }\\n\\n        emit FeeReceived(vaultId, msg.sender, requiredAmount);\\n    }\\n\\n    function withdraw(uint256 vaultId, string calldata feeSchemaKey) external {\\n        if (vaultId >= vaults.length) revert VaultDoesNotExist(vaultId);\\n\\n        Vault storage vault = vaults[vaultId];\\n\\n        if (msg.sender != vault.owner) revert AccessDenied(msg.sender, vault.owner);\\n\\n        uint256 collected = vault.balance;\\n        vault.balance = 0;\\n\\n        // Calculate fees to receive. Royalty is truncated - the remainder goes to the owner.\\n        uint256 royaltyAmount = (collected * totalFeeBps) / 10000;\\n        uint256 guildAmount = royaltyAmount;\\n\\n        // If the tokenAddress is zero, the collected fees are in Ether, otherwise in ERC20.\\n        address tokenAddress = vault.token;\\n\\n        // Distribute fees for partners.\\n        FeeShare[] memory feeSchema = feeSchemas[feeSchemaKey];\\n        for (uint256 i; i < feeSchema.length; ) {\\n            uint256 partnerAmount = (royaltyAmount * feeSchema[i].feeShareBps) / 10000;\\n            guildAmount -= partnerAmount;\\n\\n            if (tokenAddress == address(0)) feeSchema[i].treasury.sendEther(partnerAmount);\\n            else feeSchema[i].treasury.sendToken(tokenAddress, partnerAmount);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // Send the fees to Guild and the vault owner.\\n        if (tokenAddress == address(0)) {\\n            guildTreasury.sendEther(guildAmount);\\n            vault.owner.sendEther(collected - royaltyAmount);\\n        } else {\\n            guildTreasury.sendToken(tokenAddress, guildAmount);\\n            vault.owner.sendToken(tokenAddress, collected - royaltyAmount);\\n        }\\n\\n        emit Withdrawn(vaultId);\\n    }\\n\\n    function addFeeSchema(string calldata key, FeeShare[] calldata feeShare) external onlyOwner {\\n        FeeShare[] storage fs = feeSchemas[key];\\n        for (uint256 i; i < feeShare.length; ) {\\n            fs.push(feeShare[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        emit FeeSchemaAdded(key);\\n    }\\n\\n    function setGuildTreasury(address payable newTreasury) external onlyOwner {\\n        guildTreasury = newTreasury;\\n        emit GuildTreasuryChanged(newTreasury);\\n    }\\n\\n    function setTotalFeeBps(uint96 newShare) external onlyOwner {\\n        totalFeeBps = newShare;\\n        emit TotalFeeBpsChanged(newShare);\\n    }\\n\\n    function setVaultDetails(\\n        uint256 vaultId,\\n        address payable newOwner,\\n        bool newMultiplePayments,\\n        uint128 newFee\\n    ) external {\\n        if (vaultId >= vaults.length) revert VaultDoesNotExist(vaultId);\\n        Vault storage vault = vaults[vaultId];\\n\\n        if (msg.sender != vault.owner) revert AccessDenied(msg.sender, vault.owner);\\n\\n        vault.owner = newOwner;\\n        vault.multiplePayments = newMultiplePayments;\\n        vault.fee = newFee;\\n\\n        emit VaultDetailsChanged(vaultId);\\n    }\\n\\n    function getFeeSchema(string calldata key) external view returns (FeeShare[] memory schema) {\\n        return feeSchemas[key];\\n    }\\n\\n    function getVault(\\n        uint256 vaultId\\n    )\\n        external\\n        view\\n        returns (address payable owner, address token, bool multiplePayments, uint128 fee, uint128 balance)\\n    {\\n        if (vaultId >= vaults.length) revert VaultDoesNotExist(vaultId);\\n        Vault storage vault = vaults[vaultId];\\n        return (vault.owner, vault.token, vault.multiplePayments, vault.fee, vault.balance);\\n    }\\n\\n    function hasPaid(uint256 vaultId, address account) external view returns (bool paid) {\\n        if (vaultId >= vaults.length) revert VaultDoesNotExist(vaultId);\\n        return vaults[vaultId].paid[account];\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/interfaces/IFeeCollector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title A smart contract for registering vaults for payments.\\ninterface IFeeCollector {\\n    /// @notice An item that represents whom to transfer fees to and what percentage of the fees\\n    /// should be sent (expressed in basis points).\\n    struct FeeShare {\\n        address payable treasury;\\n        uint96 feeShareBps;\\n    }\\n\\n    /// @notice Contains information about individual fee collections.\\n    /// @dev See {getVault} for details.\\n    struct Vault {\\n        address payable owner;\\n        address token;\\n        bool multiplePayments;\\n        uint128 fee;\\n        uint128 balance;\\n        mapping(address => bool) paid;\\n    }\\n\\n    /// @notice Registers a vault and it's fee.\\n    /// @param owner The address that receives the fees from the payment.\\n    /// @param token The zero address for Ether, otherwise an ERC20 token.\\n    /// @param multiplePayments Whether the fee can be paid multiple times.\\n    /// @param fee The amount of fee to pay in base units.\\n    function registerVault(address payable owner, address token, bool multiplePayments, uint128 fee) external;\\n\\n    /// @notice Registers the paid fee, both in Ether or ERC20.\\n    /// @dev If ERC20 tokens are used, the contract needs to be approved using the {IERC20-approve} function.\\n    /// @param vaultId The id of the vault to pay to.\\n    function payFee(uint256 vaultId) external payable;\\n\\n    /// @notice Distributes the funds from a vault to the fee collectors and the owner.\\n    /// @dev Callable only by the vault's owner.\\n    /// @param vaultId The id of the vault whose funds should be distributed.\\n    /// @param feeSchemaKey The key of the schema used to distribute fees.\\n    function withdraw(uint256 vaultId, string calldata feeSchemaKey) external;\\n\\n    /// @notice Adds a new fee schema (array of FeeShares).\\n    /// Note that any remaining percentage of the fees will go to Guild's treasury.\\n    /// A FeeShare is an item that represents whom to transfer fees to and what percentage of the fees\\n    /// should be sent (expressed in basis points).\\n    /// @dev Callable only by the owner.\\n    /// @param key The key of the schema, used to look it up in the feeSchemas mapping.\\n    /// @param feeShares An array of FeeShare structs.\\n    function addFeeSchema(string calldata key, FeeShare[] calldata feeShares) external;\\n\\n    /// @notice Sets the address that receives Guild's share from the funds.\\n    /// @dev Callable only by the owner.\\n    /// @param newTreasury The new address of Guild's treasury.\\n    function setGuildTreasury(address payable newTreasury) external;\\n\\n    /// @notice Sets Guild's and any partner's share from the funds.\\n    /// @dev Callable only by the owner.\\n    /// @param newShare The percentual value expressed in basis points.\\n    function setTotalFeeBps(uint96 newShare) external;\\n\\n    /// @notice Changes the details of a vault.\\n    /// @dev Callable only by the owner of the vault to be changed.\\n    /// @param vaultId The id of the vault whose details should be changed.\\n    /// @param newOwner The address that will receive the fees from now on.\\n    /// @param newMultiplePayments Whether the fee can be paid multiple times from now on.\\n    /// @param newFee The amount of fee to pay in base units from now on.\\n    function setVaultDetails(\\n        uint256 vaultId,\\n        address payable newOwner,\\n        bool newMultiplePayments,\\n        uint128 newFee\\n    ) external;\\n\\n    /// @notice Returns a fee schema for a given key.\\n    /// @param key The key of the schema.\\n    /// @param schema The fee schema corresponding to the key.\\n    function getFeeSchema(string calldata key) external view returns (FeeShare[] memory schema);\\n\\n    /// @notice Returns a vault's details.\\n    /// @param vaultId The id of the queried vault.\\n    /// @return owner The owner of the vault who recieves the funds.\\n    /// @return token The address of the token to receive funds in (the zero address in case of Ether).\\n    /// @return multiplePayments Whether the fee can be paid multiple times.\\n    /// @return fee The amount of required funds in base units.\\n    /// @return balance The amount of already collected funds.\\n    function getVault(\\n        uint256 vaultId\\n    ) external view returns (address payable owner, address token, bool multiplePayments, uint128 fee, uint128 balance);\\n\\n    /// @notice Returns if an account has paid the fee to a vault.\\n    /// @param vaultId The id of the queried vault.\\n    /// @param account The address of the queried account.\\n    function hasPaid(uint256 vaultId, address account) external view returns (bool paid);\\n\\n    /// @notice Returns the address that receives Guild's share from the funds.\\n    function guildTreasury() external view returns (address payable);\\n\\n    /// @notice Returns the percentage of Guild's and any partner's share expressed in basis points.\\n    function totalFeeBps() external view returns (uint96);\\n\\n    /// @notice Event emitted when a call to {payFee} succeeds.\\n    /// @param vaultId The id of the vault that received the payment.\\n    /// @param account The address of the account that paid.\\n    /// @param amount The amount of fee received in base units.\\n    event FeeReceived(uint256 indexed vaultId, address indexed account, uint256 amount);\\n\\n    /// @notice Event emitted when a new fee schema is added.\\n    /// @param key The key of the schema, used to look it up in the feeSchemas mapping.\\n    event FeeSchemaAdded(string key);\\n\\n    /// @notice Event emitted when the Guild treasury address is changed.\\n    /// @param newTreasury The address to change Guild's treasury to.\\n    event GuildTreasuryChanged(address newTreasury);\\n\\n    /// @notice Event emitted when the share of the total fee changes.\\n    /// @param newShare The new value of totalFeeBps.\\n    event TotalFeeBpsChanged(uint96 newShare);\\n\\n    /// @notice Event emitted when a vault's details are changed.\\n    /// @param vaultId The id of the altered vault.\\n    event VaultDetailsChanged(uint256 vaultId);\\n\\n    /// @notice Event emitted when a new vault is registered.\\n    /// @param owner The address that receives the fees from the payment.\\n    /// @param token The zero address for Ether, otherwise an ERC20 token.\\n    /// @param fee The amount of fee to pay in base units.\\n    event VaultRegistered(uint256 vaultId, address payable indexed owner, address indexed token, uint256 fee);\\n\\n    /// @notice Event emitted when funds are withdrawn by a vault owner.\\n    /// @param vaultId The id of the vault.\\n    event Withdrawn(uint256 indexed vaultId);\\n\\n    /// @notice Error thrown when a function is attempted to be called by the wrong address.\\n    /// @param sender The address that sent the transaction.\\n    /// @param owner The address that is allowed to call the function.\\n    error AccessDenied(address sender, address owner);\\n\\n    /// @notice Error thrown when multiple payments aren't enabled, but the sender attempts to pay repeatedly.\\n    /// @param vaultId The id of the vault.\\n    /// @param sender The sender of the transaction.\\n    error AlreadyPaid(uint256 vaultId, address sender);\\n\\n    /// @notice Error thrown when an incorrect amount of fee is attempted to be paid.\\n    /// @dev requiredAmount might be 0 in cases when an ERC20 payment was expected but Ether was received, too.\\n    /// @param vaultId The id of the vault.\\n    /// @param paid The amount of funds received.\\n    /// @param requiredAmount The amount of fees required by the vault.\\n    error IncorrectFee(uint256 vaultId, uint256 paid, uint256 requiredAmount);\\n\\n    /// @notice Error thrown when a vault does not exist.\\n    /// @param vaultId The id of the requested vault.\\n    error VaultDoesNotExist(uint256 vaultId);\\n}\\n\"\r\n    },\r\n    \"./contracts/lib/LibTransfer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Library for functions related to transfers.\\nlibrary LibTransfer {\\n    /// @notice Error thrown when sending ether fails.\\n    /// @param recipient The address that could not receive the ether.\\n    error FailedToSendEther(address recipient);\\n\\n    /// @notice Error thrown when an ERC20 transfer failed.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    error TransferFailed(address from, address to);\\n\\n    /// @notice Sends ether to an address, forwarding all available gas and reverting on errors.\\n    /// @param recipient The recipient of the ether.\\n    /// @param amount The amount of ether to send in base units.\\n    function sendEther(address payable recipient, uint256 amount) internal {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        if (!success) revert FailedToSendEther(recipient);\\n    }\\n\\n    /// @notice Sends an ERC20 token to an address and reverts if the transfer returns false.\\n    /// @dev Wrapper for {IERC20-transfer}.\\n    /// @param to The recipient of the tokens.\\n    /// @param token The address of the token to send.\\n    /// @param amount The amount of the token to send in base units.\\n    function sendToken(address to, address token, uint256 amount) internal {\\n        if (!IERC20(token).transfer(to, amount)) revert TransferFailed(msg.sender, address(this));\\n    }\\n\\n    /// @notice Sends an ERC20 token to an address from another address and reverts if transferFrom returns false.\\n    /// @dev Wrapper for {IERC20-transferFrom}.\\n    /// @dev The contract needs to be approved using the {IERC20-approve} function to move the tokens.\\n    /// @param to The recipient of the tokens.\\n    /// @param from The source of the tokens.\\n    /// @param token The address of the token to send.\\n    /// @param amount The amount of the token to send in base units.\\n    function sendTokenFrom(address to, address from, address token, uint256 amount) internal {\\n        if (!IERC20(token).transferFrom(from, to, amount)) revert TransferFailed(msg.sender, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Multicall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract Multicall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"guildTreasury_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalFeeBps_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AlreadyPaid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"FailedToSendEther\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredAmount\",\"type\":\"uint256\"}],\"name\":\"IncorrectFee\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"VaultDoesNotExist\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"FeeSchemaAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"GuildTreasuryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"newShare\",\"type\":\"uint96\"}],\"name\":\"TotalFeeBpsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"VaultDetailsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"VaultRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeShareBps\",\"type\":\"uint96\"}],\"internalType\":\"struct IFeeCollector.FeeShare[]\",\"name\":\"feeShare\",\"type\":\"tuple[]\"}],\"name\":\"addFeeSchema\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"getFeeSchema\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeShareBps\",\"type\":\"uint96\"}],\"internalType\":\"struct IFeeCollector.FeeShare[]\",\"name\":\"schema\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"getVault\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"multiplePayments\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"fee\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"balance\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guildTreasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasPaid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"payFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"multiplePayments\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"fee\",\"type\":\"uint128\"}],\"name\":\"registerVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"setGuildTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"newShare\",\"type\":\"uint96\"}],\"name\":\"setTotalFeeBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newMultiplePayments\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"newFee\",\"type\":\"uint128\"}],\"name\":\"setVaultDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeBps\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"feeSchemaKey\",\"type\":\"string\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FeeCollector", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000030b6f80a535ecf39892ec8e7c2776910d2576cd900000000000000000000000000000000000000000000000000000000000003e8", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://90d1df7df51566cd36b47e9f105e6bb0ff0c5c6870bb202643e4da1245dd86b5"}