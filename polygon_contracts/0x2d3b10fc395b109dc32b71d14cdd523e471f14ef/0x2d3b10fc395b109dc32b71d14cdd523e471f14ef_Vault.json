{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Vault.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"./libraries/AddArrayLib.sol\\\";\\nimport \\\"solmate/utils/SafeTransferLib.sol\\\";\\nimport {FixedPointMathLib} from \\\"solmate/utils/FixedPointMathLib.sol\\\";\\n\\nimport \\\"solmate/tokens/ERC20.sol\\\";\\nimport \\\"solmate/mixins/ERC4626.sol\\\";\\nimport \\\"solmate/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/ITradeExecutor.sol\\\";\\nimport \\\"./interfaces/IYieldExecutor.sol\\\";\\n\\n/// @title vault (Brahma Vault)\\n/// @author 0xAd1\\n/// @notice Minimal vault contract to support trades across different protocols.\\ncontract Vault is IVault, ERC4626, ReentrancyGuard {\\n    using SafeTransferLib for ERC20;\\n    using FixedPointMathLib for uint256;\\n\\n    /// @dev 1 BPS buffer for curve estimations\\n    uint256 public curveEstimateSlippage = 1e4;\\n\\n    uint256 public assetBaseDecimalNormalization = 1e18;\\n\\n    /// @dev yield generated by YieldExecutor during last epoch\\n    uint256 public lastEpochYield;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                 CONSTANTS\\n    //////////////////////////////////////////////////////////////*/\\n    /// @dev The max basis points used as normalizing factor.\\n    uint256 public constant MAX_BPS = 10000;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        GLOBAL MUTABLE STATE\\n    //////////////////////////////////////////////////////////////*/\\n    /// @notice performance fee collected by vault, during harvest\\n    /// @dev denomination in `MAX_BPS`\\n    uint256 public performanceFee;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            MUTABLE ACCESS MODFIERS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice boolean for enabling emergency mode to halt new withdrawal/deposits into vault.\\n    bool public emergencyMode;\\n\\n    /// @notice keeper address to move funds between executors.\\n    address public override keeper;\\n    /// @notice Governance address to add/remove  executors.\\n    address public override governance;\\n    /// @notice Placeholder for new governance to be confirmed.\\n    address public pendingGovernance;\\n\\n    constructor(\\n        address _asset,\\n        string memory _name,\\n        string memory _symbol,\\n        address _governance,\\n        address _keeper,\\n        uint256 _vaultDepositCap,\\n        uint256 _performanceFee\\n    ) ERC4626(ERC20(_asset), _name, _symbol) {\\n        governance = _governance;\\n        keeper = _keeper;\\n        vaultCapInAsset = _vaultDepositCap;\\n        performanceFee = _performanceFee;\\n    }\\n\\n    /// @notice Combined assets of vault and yield executor and trade executor\\n    function totalAssets() public view override returns (uint256) {\\n        return totalLiquidAssets() + lastEpochYield;\\n    }\\n\\n    /// @notice Combined assets of vault and yield executor, are solvent\\n    function totalLiquidAssets() public view returns (uint256) {\\n        return asset.balanceOf(address(this)) + totalYieldExecutorFunds();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                          TE MAINTAINENCE LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Used to deposit asset into CurveYieldExecutor\\n    /// @param amountIn Amount of asset token to deposit\\n    /// @return lp LP tokens received after deposit\\n    function depositIntoYieldExecutor(uint256 amountIn)\\n        public\\n        returns (uint256 lp)\\n    {\\n        onlyGovernance();\\n\\n        isValidAddress(address(yieldExecutor));\\n        asset.transfer(address(yieldExecutor), amountIn);\\n        lp = yieldExecutor.depositIntoExecutor(amountIn);\\n    }\\n\\n    /// @notice Used to withdraw LP back into asset token from CurveYieldExecutor\\n    /// @param lp Amount of lp tokens to redeem back into asset tokens\\n    /// @return amountOut amount of asset tokens received\\n    function withdrawFromYieldExecutor(uint256 lp)\\n        public\\n        returns (uint256 amountOut)\\n    {\\n        onlyGovernance();\\n\\n        isValidAddress(address(yieldExecutor));\\n        amountOut = yieldExecutor.withdrawfromExecutor(lp);\\n    }\\n\\n    /// @notice event emitted when fees are collected\\n    /// @param fees fees collected in last harvest cycle\\n    event FeesCollected(uint256 fees);\\n\\n    /// @param _claimYieldData bytes data to pass params to claimYield (Price of LDO)\\n    /// @param _withdrawData - reserved\\n    function harvest(\\n        bytes calldata _claimYieldData,\\n        bytes calldata _withdrawData,\\n        bool _shouldPlaceTrade\\n    ) public {\\n        onlyKeeper();\\n        isValidAddress(address(yieldExecutor));\\n        isValidAddress(address(tradeExecutor));\\n\\n        uint256 prevAssetBal = asset.balanceOf(address(this));\\n        lastEpochYield = yieldExecutor.claimYield(_claimYieldData);\\n        uint256 baseYield = lastEpochYield;\\n        uint256 updatedAssetBal = asset.balanceOf(address(this));\\n        // Ensure baseYield reported correctly\\n        assert(updatedAssetBal - prevAssetBal == lastEpochYield);\\n        prevAssetBal = updatedAssetBal;\\n        uint256 boostedYield = tradeExecutor.initiateWithdraw(_withdrawData);\\n        updatedAssetBal = asset.balanceOf(address(this));\\n        // Ensure boostedYield reported correctly\\n        assert(updatedAssetBal - prevAssetBal == boostedYield);\\n\\n        uint256 feeCollectedBase = 0;\\n        uint256 feeCollectedBoosted = 0;\\n\\n        if (boostedYield > 0) {\\n            // Charge 1/2 Fee BPS from both yields\\n            feeCollectedBoosted +=\\n                (boostedYield * performanceFee) /\\n                MAX_BPS /\\n                2;\\n            feeCollectedBase += (baseYield * performanceFee) / MAX_BPS / 2;\\n        } else {\\n            // Charge 1 Fee BPS from base yeild\\n            feeCollectedBase += (baseYield * performanceFee) / MAX_BPS;\\n        }\\n\\n        uint256 amountToCompound = 0;\\n\\n        if (_shouldPlaceTrade) {\\n            // Send asset to tradeExecutor\\n            if (baseYield - feeCollectedBase > 0)\\n                asset.transfer(\\n                    address(tradeExecutor),\\n                    baseYield - feeCollectedBase\\n                );\\n\\n            // Calculate amount to be compounded in yieldExecutor\\n            amountToCompound = boostedYield - feeCollectedBoosted;\\n        } else {\\n            // No trade to take, not sending anything to tradeExecutor\\n            // Calculate amount to be compounded in yieldExecutor\\n            amountToCompound =\\n                baseYield +\\n                boostedYield -\\n                feeCollectedBase -\\n                feeCollectedBoosted;\\n        }\\n\\n        if (amountToCompound > 0) {\\n            asset.transfer(address(yieldExecutor), amountToCompound);\\n            yieldExecutor.depositIntoExecutor(amountToCompound);\\n        }\\n\\n        if (feeCollectedBase + feeCollectedBoosted > 0) {\\n            // Send collected fee to governance\\n            asset.transfer(governance, feeCollectedBase + feeCollectedBoosted);\\n            emit FeesCollected(feeCollectedBase + feeCollectedBoosted);\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                          ERC4626 OVERRIDES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Function to accept native MATIC in the vault\\n    /// @param receiver Address receiving shares of vault\\n    function deposit(address receiver)\\n        public\\n        payable\\n        nonReentrant\\n        returns (uint256 shares)\\n    {\\n        uint256 assets = msg.value;\\n\\n        require((shares = previewDeposit(assets)) != 0, \\\"ZERO_SHARES\\\");\\n\\n        require(\\n            address(asset) == 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270,\\n            \\\"NOT_NATIVE_ASSET\\\"\\n        );\\n        require(assets > 0, \\\"NO_ASSETS_RECEIVED\\\");\\n\\n        uint256 oldBal = asset.balanceOf(address(this));\\n        (bool success, ) = address(asset).call{value: assets}(\\\"\\\");\\n        require(success, \\\"WRAP_UNSUCCESS\\\");\\n        uint256 newBal = asset.balanceOf(address(this));\\n\\n        require(newBal - oldBal == assets, \\\"WRAP_UNSUCCESSFULL\\\");\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n    /// @dev override IERC4626\\n    function previewDeposit(uint256 assets)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 lpMinted = yieldExecutor.previewAddLiquidity(assets);\\n        lpMinted =\\n            lpMinted -\\n            (lpMinted * curveEstimateSlippage) /\\n            assetBaseDecimalNormalization;\\n        uint256 lpValueInAssets = yieldExecutor.lpValueInAsset(lpMinted);\\n        return convertToShares(lpValueInAssets);\\n    }\\n\\n    /// @dev override IERC4626\\n    function previewMint(uint256 shares)\\n        public\\n        pure\\n        override\\n        returns (uint256 assets)\\n    {\\n        revert(\\\"CURVE_AMM_ESTIMATION_NOT_SUPPORTED\\\");\\n    }\\n\\n    /// @dev override IERC4626\\n    function previewWithdraw(uint256 assets)\\n        public\\n        pure\\n        override\\n        returns (uint256 shares)\\n    {\\n        revert(\\\"CURVE_AMM_ESTIMATION_NOT_SUPPORTED\\\");\\n    }\\n\\n    /// @dev override IERC4626\\n    function previewRedeem(uint256 shares)\\n        public\\n        view\\n        override\\n        returns (uint256 totalAssetsOwed)\\n    {\\n        uint256 assetBalance = asset.balanceOf(address(this)) +\\n            asset.balanceOf(address(yieldExecutor));\\n        uint256 assetOwed = (assetBalance * shares) / totalSupply;\\n        uint256 lpBalance = yieldExecutor.totalLPTokens();\\n        uint256 lpOwed = (lpBalance * shares) / totalSupply;\\n        uint256 lpValueOwed = yieldExecutor.previewWithdrawLiquidity(lpOwed);\\n        lpValueOwed =\\n            lpValueOwed -\\n            (lpValueOwed * curveEstimateSlippage) /\\n            assetBaseDecimalNormalization;\\n        totalAssetsOwed = assetOwed + lpValueOwed;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                          INTERNAL HOOKS LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev internal accountuing and funds management logic before issuing withdrawal\\n    function beforeWithdraw(uint256 assets, uint256 shares) internal override {\\n        require(!emergencyMode, \\\"EMERGENCY\\\");\\n\\n        uint256 vaultAssetBalance = asset.balanceOf(address(this));\\n        uint256 yieldExecutorAssetBalance = asset.balanceOf(\\n            address(yieldExecutor)\\n        );\\n        uint256 assetBalance = vaultAssetBalance + yieldExecutorAssetBalance;\\n        uint256 assetOwed = (assetBalance * shares) / totalSupply;\\n        uint256 lpBalance = yieldExecutor.totalLPTokens();\\n        uint256 lpOwed = (lpBalance * shares) / totalSupply;\\n\\n        if (assetOwed > vaultAssetBalance) {\\n            asset.safeTransferFrom(\\n                address(yieldExecutor),\\n                address(this),\\n                assetOwed - vaultAssetBalance\\n            );\\n        }\\n\\n        yieldExecutor.withdrawfromExecutor(lpOwed);\\n\\n        assert(asset.balanceOf(address(this)) >= assets);\\n    }\\n\\n    /// @dev internal accountuing and funds management logic after accepting deposit\\n    function afterDeposit(uint256 assets, uint256 shares) internal override {\\n        require(!emergencyMode, \\\"EMERGENCY\\\");\\n\\n        isValidAddress(address(yieldExecutor));\\n        require(totalAssets() <= vaultCapInAsset, \\\"VAULT_CAP_EXCEEDED\\\");\\n        asset.transfer(address(yieldExecutor), assets);\\n        yieldExecutor.depositIntoExecutor(assets);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    EXECUTOR ADDITION/REMOVAL LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice list of yield executors connected to vault.\\n    IYieldExecutor public yieldExecutor;\\n\\n    /// @notice list of trade executors connected to vault.\\n    ITradeExecutor public tradeExecutor;\\n\\n    /// @notice Emitted when executor is added to vault.\\n    /// @param executor The address of added executor.\\n    event YieldExecutorAdded(address indexed executor);\\n\\n    /// @notice Emitted when executor is added to vault.\\n    /// @param executor The address of added executor.\\n    event TradeExecutorAdded(address indexed executor);\\n\\n    /// @notice Yield Executor setter\\n    /// @param _yieldExecutor new yield executor address\\n    function setYieldExecutor(address _yieldExecutor) public {\\n        onlyGovernance();\\n        isValidAddress(_yieldExecutor);\\n        require(\\n            ITradeExecutor(_yieldExecutor).vault() == address(this),\\n            \\\"INVALID_VAULT\\\"\\n        );\\n        require(\\n            asset.allowance(_yieldExecutor, address(this)) > 0,\\n            \\\"NO_ALLOWANCE\\\"\\n        );\\n        yieldExecutor = IYieldExecutor(_yieldExecutor);\\n        emit YieldExecutorAdded(_yieldExecutor);\\n    }\\n\\n    /// @notice Trade Executor setter\\n    /// @param _tradeExecutor new trade executor address\\n    function setTradeExecutor(address _tradeExecutor) public {\\n        onlyGovernance();\\n        isValidAddress(_tradeExecutor);\\n        require(\\n            ITradeExecutor(_tradeExecutor).vault() == address(this),\\n            \\\"INVALID_VAULT\\\"\\n        );\\n        require(\\n            asset.allowance(_tradeExecutor, address(this)) > 0,\\n            \\\"NO_ALLOWANCE\\\"\\n        );\\n        tradeExecutor = ITradeExecutor(_tradeExecutor);\\n        emit TradeExecutorAdded(_tradeExecutor);\\n    }\\n\\n    function totalYieldExecutorFunds() public view returns (uint256 posValue) {\\n        (posValue, ) = yieldExecutor.totalFunds();\\n        return posValue;\\n    }\\n\\n    // function totalTradeExecutorFunds() public view returns (uint256 posValue) {\\n    //     (posValue, ) = tradeExecutor.totalFunds();\\n    //     return posValue;\\n    // }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                     DEPOSIT/WITHDRAWAL LIMIT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Tracking max deposit limit of vault\\n    uint256 public vaultCapInAsset;\\n\\n    function maxDeposit(address) public view override returns (uint256) {\\n        return vaultCapInAsset - totalAssets();\\n    }\\n\\n    function maxMint(address) public view override returns (uint256) {\\n        return convertToShares(maxDeposit(address(0)));\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    GOVERNANCE ACTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Changes the vault deposit cap\\n    /// @param _newVaultCap New vault deposit cap\\n    function setVaultCap(uint256 _newVaultCap) public {\\n        onlyGovernance();\\n        vaultCapInAsset = _newVaultCap;\\n    }\\n\\n    /// @notice Nominates new governance address.\\n    /// @dev  Governance will only be changed if the new governance accepts it. It will be pending till then.\\n    /// @param _governance The address of new governance.\\n    function setGovernance(address _governance) public {\\n        onlyGovernance();\\n        pendingGovernance = _governance;\\n    }\\n\\n    /// @notice Emitted when governance is updated.\\n    /// @param oldGovernance The address of the current governance.\\n    /// @param newGovernance The address of new governance.\\n    event UpdatedGovernance(\\n        address indexed oldGovernance,\\n        address indexed newGovernance\\n    );\\n\\n    /// @notice The nomine of new governance address proposed by `setGovernance` function can accept the governance.\\n    /// @dev  This can only be called by address of pendingGovernance.\\n    function acceptGovernance() public {\\n        require(msg.sender == pendingGovernance, \\\"INVALID_ADDRESS\\\");\\n        emit UpdatedGovernance(governance, pendingGovernance);\\n        governance = pendingGovernance;\\n    }\\n\\n    /// @notice Emitted when keeper is updated.\\n    /// @param oldKeeper The address of the old keeper.\\n    /// @param newKeeper The address of the new keeper.\\n    event UpdatedKeeper(address indexed oldKeeper, address indexed newKeeper);\\n\\n    /// @notice Sets new keeper address.\\n    /// @dev  This can only be called by governance.\\n    /// @param _keeper The address of new keeper.\\n    function setKeeper(address _keeper) public {\\n        onlyGovernance();\\n        emit UpdatedKeeper(keeper, _keeper);\\n        keeper = _keeper;\\n    }\\n\\n    /// @notice Emitted when emergencyMode status is updated.\\n    /// @param emergencyMode boolean indicating state of emergency.\\n    event EmergencyModeStatus(bool emergencyMode);\\n\\n    /// @notice sets emergencyMode.\\n    /// @dev  This can only be called by governance.\\n    /// @param _emergencyMode if true, vault will be in emergency mode.\\n    function setEmergencyMode(bool _emergencyMode) public {\\n        onlyGovernance();\\n        emergencyMode = _emergencyMode;\\n        emit EmergencyModeStatus(_emergencyMode);\\n    }\\n\\n    /// @notice Removes invalid tokens from the vault.\\n    /// @dev  This is used as fail safe to remove want tokens from the vault during emergency mode\\n    /// can be called by anyone to send funds to governance.\\n    /// @param _token The address of token to be removed.\\n    function sweep(address _token) public {\\n        isEmergencyMode();\\n        onlyGovernance();\\n        ERC20(_token).safeTransfer(\\n            governance,\\n            ERC20(_token).balanceOf(address(this))\\n        );\\n    }\\n\\n    /// @notice Changes the curve estimation slippage offset\\n    /// @param _estimateSlippage new curve estimate slippage\\n    function setCurveEstimateSlippage(uint256 _estimateSlippage) public {\\n        onlyGovernance();\\n        curveEstimateSlippage = _estimateSlippage;\\n    }\\n\\n    /// @notice Emitted when performance fee is updated\\n    /// @param prevFee fee before update\\n    /// @param curFee current fee\\n    event UpdatedPerformanceFee(uint256 prevFee, uint256 curFee);\\n\\n    /// @notice Governance function to set performance fee\\n    /// @param newPerformanceFee the new performance fee to be updated\\n    function setPerformanceFee(uint256 newPerformanceFee) public {\\n        onlyGovernance();\\n        require(newPerformanceFee <= MAX_BPS / 2, \\\"FEE_TOO_HIGH\\\");\\n\\n        emit UpdatedPerformanceFee(performanceFee, newPerformanceFee);\\n        performanceFee = newPerformanceFee;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    ACCESS MODIFERS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Checks if emergency mode is enabled.\\n    function isEmergencyMode() public view {\\n        require(emergencyMode, \\\"EMERGENCY_MODE\\\");\\n    }\\n\\n    /// @dev Checks if the sender is the governance.\\n    function onlyGovernance() internal view {\\n        require(msg.sender == governance, \\\"ONLY_GOV\\\");\\n    }\\n\\n    /// @dev Checks if the sender is the keeper.\\n    function onlyKeeper() internal view {\\n        require(msg.sender == keeper, \\\"ONLY_KEEPER\\\");\\n    }\\n\\n    /// @dev Checks if the address is valid.\\n    function isValidAddress(address _addr) internal pure {\\n        require(_addr != address(0), \\\"NULL_ADDRESS\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/AddArrayLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary AddrArrayLib {\\n    using AddrArrayLib for Addresses;\\n\\n    struct Addresses {\\n        address[] _items;\\n    }\\n\\n    /**\\n     * @notice push an address to the array\\n     * @dev if the address already exists, it will not be added again\\n     * @param self Storage array containing address type variables\\n     * @param element the element to add in the array\\n     */\\n    function pushAddress(Addresses storage self, address element) internal {\\n        if (!exists(self, element)) {\\n            self._items.push(element);\\n        }\\n    }\\n\\n    /**\\n     * @notice remove an address from the array\\n     * @dev finds the element, swaps it with the last element, and then deletes it;\\n     * @param self Storage array containing address type variables\\n     * @param element the element to remove from the array\\n     */\\n    function removeAddress(Addresses storage self, address element) internal {\\n        for (uint256 i = 0; i < self.size(); i++) {\\n            if (self._items[i] == element) {\\n                self._items[i] = self._items[self.size() - 1];\\n                self._items.pop();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice get the address at a specific index from array\\n     * @dev revert if the index is out of bounds\\n     * @param self Storage array containing address type variables\\n     * @param index the index in the array\\n     */\\n    function getAddressAtIndex(Addresses memory self, uint256 index)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        require(index < size(self), \\\"INVALID_INDEX\\\");\\n        return self._items[index];\\n    }\\n\\n    /**\\n     * @notice get the size of the array\\n     * @param self Storage array containing address type variables\\n     */\\n    function size(Addresses memory self) internal pure returns (uint256) {\\n        return self._items.length;\\n    }\\n\\n    /**\\n     * @notice check if an element exist in the array\\n     * @param self Storage array containing address type variables\\n     * @param element the element to check if it exists in the array\\n     */\\n    function exists(Addresses memory self, address element)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        for (uint256 i = 0; i < self.size(); i++) {\\n            if (self._items[i] == element) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @notice get the array\\n     * @param self Storage array containing address type variables\\n     */\\n    function getAllAddresses(Addresses memory self)\\n        internal\\n        pure\\n        returns (address[] memory)\\n    {\\n        return self._items;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/utils/SafeTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/utils/FixedPointMathLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // Start off with z at 1.\\n            z := 1\\n\\n            // Used below to help find a nearby power of 2.\\n            let y := x\\n\\n            // Find the lowest power of 2 that is at least sqrt(x).\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\n                z := shl(64, z) // Like multiplying by 2 ** 64.\\n            }\\n            if iszero(lt(y, 0x10000000000000000)) {\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\n                z := shl(32, z) // Like multiplying by 2 ** 32.\\n            }\\n            if iszero(lt(y, 0x100000000)) {\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\n                z := shl(16, z) // Like multiplying by 2 ** 16.\\n            }\\n            if iszero(lt(y, 0x10000)) {\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\n                z := shl(8, z) // Like multiplying by 2 ** 8.\\n            }\\n            if iszero(lt(y, 0x100)) {\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\n                z := shl(4, z) // Like multiplying by 2 ** 4.\\n            }\\n            if iszero(lt(y, 0x10)) {\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\n                z := shl(2, z) // Like multiplying by 2 ** 2.\\n            }\\n            if iszero(lt(y, 0x8)) {\\n                // Equivalent to 2 ** z.\\n                z := shl(1, z)\\n            }\\n\\n            // Shifting right by 1 is like dividing by 2.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // Compute a rounded down version of z.\\n            let zRoundDown := div(x, z)\\n\\n            // If zRoundDown is smaller, use it.\\n            if lt(zRoundDown, z) {\\n                z := zRoundDown\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/tokens/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/mixins/ERC4626.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\nimport {SafeTransferLib} from \\\"../utils/SafeTransferLib.sol\\\";\\nimport {FixedPointMathLib} from \\\"../utils/FixedPointMathLib.sol\\\";\\n\\n/// @notice Minimal ERC4626 tokenized Vault implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/mixins/ERC4626.sol)\\nabstract contract ERC4626 is ERC20 {\\n    using SafeTransferLib for ERC20;\\n    using FixedPointMathLib for uint256;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               IMMUTABLES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    ERC20 public immutable asset;\\n\\n    constructor(\\n        ERC20 _asset,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC20(_name, _symbol, _asset.decimals()) {\\n        asset = _asset;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        DEPOSIT/WITHDRAWAL LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256 shares) {\\n        // Check for rounding error since we round down in previewDeposit.\\n        require((shares = previewDeposit(assets)) != 0, \\\"ZERO_SHARES\\\");\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n    function mint(uint256 shares, address receiver) public virtual returns (uint256 assets) {\\n        assets = previewMint(shares); // No need to check for rounding error, previewMint rounds up.\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256 shares) {\\n        shares = previewWithdraw(assets); // No need to check for rounding error, previewWithdraw rounds up.\\n\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\\n        }\\n\\n        beforeWithdraw(assets, shares);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256 assets) {\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\\n        }\\n\\n        // Check for rounding error since we round down in previewRedeem.\\n        require((assets = previewRedeem(shares)) != 0, \\\"ZERO_ASSETS\\\");\\n\\n        beforeWithdraw(assets, shares);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ACCOUNTING LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function totalAssets() public view virtual returns (uint256);\\n\\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? assets : assets.mulDivDown(supply, totalAssets());\\n    }\\n\\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? shares : shares.mulDivDown(totalAssets(), supply);\\n    }\\n\\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\\n        return convertToShares(assets);\\n    }\\n\\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? shares : shares.mulDivUp(totalAssets(), supply);\\n    }\\n\\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? assets : assets.mulDivUp(supply, totalAssets());\\n    }\\n\\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\\n        return convertToAssets(shares);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                     DEPOSIT/WITHDRAWAL LIMIT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function maxDeposit(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function maxMint(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\\n        return convertToAssets(balanceOf[owner]);\\n    }\\n\\n    function maxRedeem(address owner) public view virtual returns (uint256) {\\n        return balanceOf[owner];\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                          INTERNAL HOOKS LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function beforeWithdraw(uint256 assets, uint256 shares) internal virtual {}\\n\\n    function afterDeposit(uint256 assets, uint256 shares) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Gas optimized reentrancy protection for smart contracts.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/ReentrancyGuard.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\\nabstract contract ReentrancyGuard {\\n    uint256 private locked = 1;\\n\\n    modifier nonReentrant() virtual {\\n        require(locked == 1, \\\"REENTRANCY\\\");\\n\\n        locked = 2;\\n\\n        _;\\n\\n        locked = 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IVault.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport {ERC20} from \\\"solmate/tokens/ERC20.sol\\\";\\n\\ninterface IVault {\\n    function keeper() external view returns (address);\\n\\n    function governance() external view returns (address);\\n\\n    function isEmergencyMode() external view;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ITradeExecutor.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.4;\\n\\ninterface ITradeExecutor {\\n    function vault() external view returns (address);\\n\\n    /// @notice Called to deposit asset into 3rd party protocol\\n    function initiateDeposit(bytes calldata _data) external;\\n\\n    /// @notice Called for the process of removal of asset from 3rd party protocol\\n    function initiateWithdraw(bytes calldata _data)\\n        external\\n        returns (uint256 amountWithdrawn);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IYieldExecutor.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.4;\\n\\ninterface IYieldExecutor {\\n    function vault() external view returns (address);\\n\\n    // /// @notice Called to initiate the process of depositing of asset into 3rd party protocol\\n    // function initiateDeposit(bytes calldata _data) external;\\n\\n    // /// @notice Called to initiate the process of removal of asset from 3rd party protocol\\n    // function initiateWithdraw(bytes calldata _data) external;\\n\\n    function totalFunds()\\n        external\\n        view\\n        returns (uint256 posValue, uint256 lastUpdatedBlock);\\n\\n    function depositIntoExecutor(uint256 amount)\\n        external\\n        returns (uint256 lpTokens);\\n\\n    function withdrawfromExecutor(uint256 amountRequested)\\n        external\\n        returns (uint256 amountReturned);\\n\\n    function previewAddLiquidity(uint256 assets)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function previewWithdrawLiquidity(uint256 lpTokens)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function lpValueInAsset(uint256 lpTokens) external view returns (uint256);\\n\\n    function assetValueInLpToken(uint256 assets)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function totalLPTokens() external view returns (uint256);\\n\\n    function maxSlippage() external view returns (uint256);\\n\\n    function claimYield(bytes calldata _data) external returns (uint256 yield);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/solmate/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"solmate/=lib/solmate/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_vaultDepositCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"emergencyMode\",\"type\":\"bool\"}],\"name\":\"EmergencyModeStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"FeesCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"TradeExecutorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldGovernance\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"UpdatedGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldKeeper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newKeeper\",\"type\":\"address\"}],\"name\":\"UpdatedKeeper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"curFee\",\"type\":\"uint256\"}],\"name\":\"UpdatedPerformanceFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"YieldExecutorAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetBaseDecimalNormalization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveEstimateSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"depositIntoYieldExecutor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lp\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_claimYieldData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_withdrawData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_shouldPlaceTrade\",\"type\":\"bool\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEmergencyMode\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEpochYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAssetsOwed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_estimateSlippage\",\"type\":\"uint256\"}],\"name\":\"setCurveEstimateSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_emergencyMode\",\"type\":\"bool\"}],\"name\":\"setEmergencyMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPerformanceFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tradeExecutor\",\"type\":\"address\"}],\"name\":\"setTradeExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newVaultCap\",\"type\":\"uint256\"}],\"name\":\"setVaultCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_yieldExecutor\",\"type\":\"address\"}],\"name\":\"setYieldExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalYieldExecutorFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"posValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeExecutor\",\"outputs\":[{\"internalType\":\"contract ITradeExecutor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultCapInAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lp\",\"type\":\"uint256\"}],\"name\":\"withdrawFromYieldExecutor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldExecutor\",\"outputs\":[{\"internalType\":\"contract IYieldExecutor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Vault", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf127000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000949226f21809637113700f901c7d9bbaa3fd94b0000000000000000000000000ab3bcd63a3938031c27b122ec2b7f87ec0ba472a000000000000000000000000000000000000000000007f0e10af47c1c700000000000000000000000000000000000000000000000000000000000000000005dc0000000000000000000000000000000000000000000000000000000000000010427261686d6120506f6c794761696e7300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000862726168504f4c59000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}