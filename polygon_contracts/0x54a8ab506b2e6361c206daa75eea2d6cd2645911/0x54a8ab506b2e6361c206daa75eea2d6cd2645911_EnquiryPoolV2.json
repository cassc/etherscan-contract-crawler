{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/enquiry-pool/v2/EnquiryPoolV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IReputation} from \\\"../interfaces/IReputation.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {EnquiryLibV2} from \\\"../libs/v2/EnquiryLibV2.sol\\\";\\nimport {AnswerLib} from \\\"../libs/AnswerLib.sol\\\";\\n\\ncontract EnquiryPoolV2 is ReentrancyGuard, Ownable, Pausable {\\n    using SafeERC20 for IERC20;\\n    using Strings for uint256;\\n    using ECDSA for bytes32;\\n    using Address for address payable;\\n\\n    // total number of created enquires\\n    uint256 public totalEnquiry;\\n    // enquiry id => question details\\n    mapping(uint256 => EnquiryLibV2.Enquiry) enquiries;\\n    // enquiry id => price expert => answer details\\n    mapping(uint256 => mapping(address => AnswerLib.Answer)) answers;\\n    // enquiry id => merkle tree root\\n    mapping(uint256 => bytes32) results;\\n\\n    // RP Address\\n    IReputation public immutable RP_TOKEN;\\n\\n    // Service fee rate\\n    uint32 public stakeServiceFeeRate;\\n    uint32 public rewardServiceFeeRate;\\n\\n    // Treasury address\\n    address public treasury;\\n\\n    // Max reward mint rp allowed\\n    uint256 public maxRewardRp;\\n\\n    // Service fee rate %  4 decimal place\\n    uint32 constant SERVICE_FEE_PRECISION_FACTOR = 1e6;\\n    // Cross Rate precision factor\\n    uint64 constant CROSS_RATE_PRECISION_FACTOR = 1e6;\\n    // Multiplier precision factor\\n    uint16 constant MULTIPLIER_PRECISION_FACTOR = 1e4;\\n    // Max service fee rate 5 %\\n    uint16 constant MAX_SERVICE_FEE_RATE = 5 * 1e4;\\n    // Max time user can schedule an enquiry\\n    uint32 constant MAX_START_TIME_BUFFER = 4 weeks;\\n    // Max time enquiry can open\\n    uint32 constant MAX_END_TIME_BUFFER = 4 weeks;\\n    // Min time enquiry can open\\n    uint32 constant MIN_END_TIME_BUFFER = 1 days;\\n    // Max time the admin can post result time\\n    uint32 constant MAX_POST_RESULT_BUFFER = 2 weeks;\\n\\n    // Initialized status\\n    bool internal initialized;\\n\\n    event Init();\\n\\n    event CreateEnquiry(\\n        uint256 indexed enquiryId,\\n        address indexed seeker,\\n        uint256 reward,\\n        address rewardToken,\\n        address stakeAToken,\\n        address stakeBToken,\\n        uint256 startTime,\\n        uint256 endTime,\\n        uint256 userLimit,\\n        uint256 BACrossRate,\\n        uint256 maxRPTokenAMultiplier,\\n        uint256 tokenStakeThreshold,\\n        uint256 rpStakeThreshold,\\n        string uri\\n    );\\n\\n    event RefundEnquiry(uint256 indexed enquiryId, address seeker, uint256 reward);\\n\\n    event AddReward(uint256 indexed enquiryId, address sponsor, uint256 reward);\\n\\n    event CreateAnswer(\\n        uint256 indexed enquiryId,\\n        address indexed expert,\\n        address stakeToken,\\n        uint256 rp,\\n        uint256 stakeAmount,\\n        bytes signature\\n    );\\n\\n    event UpdateAnswer(\\n        uint256 indexed enquiryId,\\n        address indexed expert,\\n        uint256 rp,\\n        uint256 stakeAmount,\\n        bytes signature\\n    );\\n\\n    event RefundAnswer(\\n        uint256 indexed enquiryId,\\n        address indexed expert,\\n        uint256 rp,\\n        uint256 stakeAmount\\n    );\\n\\n    event ResultRoot(uint256 indexed enquiryId, address admin, bytes32 root);\\n\\n    event ClaimReward(\\n        uint256 indexed enquiryId,\\n        address indexed expert,\\n        uint256 stakeAmount,\\n        uint256 tokenReward,\\n        uint256 rpReward\\n    );\\n\\n    event SetMaxRewardRp(address admin, uint256 rp);\\n\\n    event SetStakeServiceFeeRate(address admin, uint256 rate);\\n\\n    event SetRewardServiceFeeRate(address admin, uint256 rate);\\n\\n    event SetTreasury(address admin, address treasaury);\\n\\n    modifier enquiryExists(uint256 enquiryId) {\\n        // check if the enquiry exist\\n        require(existsEnquiry(enquiryId), \\\"EnquiryNotExist\\\");\\n        _;\\n    }\\n\\n    constructor(IReputation _rp, address _admin) {\\n        // Set RP token\\n        RP_TOKEN = _rp;\\n\\n        initialized = false;\\n\\n        // transfer ownership\\n        transferOwnership(_admin);\\n    }\\n\\n    function init(address _treasury) external virtual onlyOwner {\\n        require(!initialized, \\\"NotAllowed\\\");\\n        // Set treasury\\n        setTreasury(_treasury);\\n\\n        setMaxRewardRP(100000000000);\\n\\n        initialized = true;\\n\\n        emit Init();\\n    }\\n\\n    function createEnquiry(EnquiryLibV2.CreateEnquiryParam calldata _enquiry)\\n        external\\n        payable\\n        virtual\\n        onlyOwner\\n        whenNotPaused\\n    {\\n        // check if the enquiry exist\\n        require(!existsEnquiry(totalEnquiry + 1), \\\"EnquiryExist\\\");\\n\\n        // check if start time has passed or the start time is within a reasonable schedule time\\n        require(\\n            _enquiry.startTime >= block.timestamp &&\\n                _enquiry.startTime <= block.timestamp + MAX_START_TIME_BUFFER,\\n            \\\"StartTimeNotAllowed\\\"\\n        );\\n        // check if there's enough time for user to answer and within a reasonable to end the answer time\\n        require(\\n            _enquiry.endTime <= _enquiry.startTime + MAX_END_TIME_BUFFER &&\\n                _enquiry.endTime >= _enquiry.startTime + MIN_END_TIME_BUFFER,\\n            \\\"EndTimeNotAllowed\\\"\\n        );\\n\\n        // check if the user limit is not zero\\n        require(_enquiry.userLimit > 0, \\\"UserLimitZero\\\");\\n\\n        // check if the b to a exchange rate not zero\\n        require(_enquiry.BACrossRate > 0, \\\"ZeroBACrossRate\\\");\\n\\n        // check if uri is empty\\n        require(bytes(_enquiry.uri).length > 0, \\\"EmptyURI\\\");\\n\\n        if (_enquiry.reward > 0)\\n            _transferInToken(msg.sender, _enquiry.rewardToken, _enquiry.reward);\\n\\n        totalEnquiry += 1;\\n        enquiries[totalEnquiry] = EnquiryLibV2.Enquiry({\\n            seeker: msg.sender,\\n            reward: _enquiry.reward,\\n            rewardToken: _enquiry.rewardToken,\\n            stakeAToken: _enquiry.stakeAToken,\\n            stakeBToken: _enquiry.stakeBToken,\\n            startTime: _enquiry.startTime,\\n            endTime: _enquiry.endTime,\\n            userLimit: _enquiry.userLimit,\\n            BACrossRate: _enquiry.BACrossRate,\\n            maxRPTokenAMultiplier: _enquiry.maxRPTokenAMultiplier,\\n            tokenStakeThreshold: _enquiry.tokenStakeThreshold,\\n            rpStakeThreshold: _enquiry.rpStakeThreshold,\\n            uri: _enquiry.uri,\\n            totalAnswer: 0,\\n            totalStakedAToken: 0,\\n            totalStakedBToken: 0,\\n            totalStakedRp: 0\\n        });\\n\\n        emit CreateEnquiry(\\n            totalEnquiry,\\n            msg.sender,\\n            _enquiry.reward,\\n            _enquiry.rewardToken,\\n            _enquiry.stakeAToken,\\n            _enquiry.stakeBToken,\\n            _enquiry.startTime,\\n            _enquiry.endTime,\\n            _enquiry.userLimit,\\n            _enquiry.BACrossRate,\\n            _enquiry.maxRPTokenAMultiplier,\\n            _enquiry.tokenStakeThreshold,\\n            _enquiry.rpStakeThreshold,\\n            _enquiry.uri\\n        );\\n    }\\n\\n    function addReward(uint256 _enquiryId, uint256 _reward)\\n        external\\n        payable\\n        enquiryExists(_enquiryId)\\n    {\\n        EnquiryLibV2.Enquiry storage enquiry = enquiries[_enquiryId];\\n\\n        require(enquiries[_enquiryId].endTime >= block.timestamp, \\\"OutsideAllowTime\\\");\\n\\n        require(_reward > 0, \\\"ZeroReward\\\");\\n\\n        _transferInToken(msg.sender, enquiry.rewardToken, _reward);\\n\\n        enquiry.reward += _reward;\\n\\n        emit AddReward(_enquiryId, msg.sender, _reward);\\n    }\\n\\n    function refundEnquiry(uint256 _enquiryId) external enquiryExists(_enquiryId) onlyOwner {\\n        EnquiryLibV2.Enquiry storage enquiry = enquiries[_enquiryId];\\n\\n        uint256 remain = enquiry.reward;\\n        enquiry.userLimit = 0;\\n        enquiry.reward = 0;\\n\\n        if (remain > 0) _transferOutToken(payable(enquiry.seeker), enquiry.rewardToken, remain);\\n\\n        emit RefundEnquiry(_enquiryId, msg.sender, remain);\\n    }\\n\\n    function verifyAnswer(\\n        address _expert,\\n        uint256 _enquiryId,\\n        bytes32 _tokenId,\\n        bytes32 _bidPrice,\\n        bytes32 _askPrice,\\n        address _stakeToken,\\n        uint256 _rp,\\n        uint256 _stakeAmount,\\n        string calldata _secret,\\n        bytes calldata _signature\\n    ) external pure returns (bool) {\\n        require(_expert != address(0), \\\"ZeroAddress\\\");\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    _enquiryId,\\n                    _tokenId,\\n                    _bidPrice,\\n                    _askPrice,\\n                    _stakeToken,\\n                    _rp,\\n                    _stakeAmount,\\n                    _secret\\n                )\\n            ).toEthSignedMessageHash().recover(_signature) == _expert;\\n    }\\n\\n    function createAnswer(\\n        uint256 _enquiryId,\\n        address _stakeToken,\\n        uint256 _rp,\\n        uint256 _stakeAmount,\\n        bytes calldata _signature\\n    ) external payable enquiryExists(_enquiryId) whenNotPaused nonReentrant {\\n        // check if answer exist\\n        require(!existsAnswer(_enquiryId, msg.sender), \\\"AnswerExist\\\");\\n        // check if the enquiry still allow people to create/update answer\\n        require(\\n            enquiries[_enquiryId].endTime >= block.timestamp &&\\n                enquiries[_enquiryId].startTime <= block.timestamp,\\n            \\\"OutsideAllowTime\\\"\\n        );\\n\\n        // check if the enquiry user limit is over\\n        require(\\n            enquiries[_enquiryId].userLimit >= enquiries[_enquiryId].totalAnswer + 1,\\n            \\\"OverUserLimit\\\"\\n        );\\n\\n        // check if the stake token\\n        require(\\n            enquiries[_enquiryId].stakeAToken == _stakeToken ||\\n                enquiries[_enquiryId].stakeBToken == _stakeToken,\\n            \\\"StakeTokenIncorrect\\\"\\n        );\\n\\n        // check stake ratio\\n        require(withinStakeLimits(_enquiryId, _stakeToken, _rp, _stakeAmount), \\\"OutsideStakeLimit\\\");\\n\\n        // check signature and encrypted message cannot be empty\\n        require(_signature.length > 0, \\\"EmptySignature\\\");\\n\\n        if (_stakeAmount > 0) _transferInToken(msg.sender, _stakeToken, _stakeAmount);\\n\\n        if (_rp > 0)\\n            // burn the RP\\n            RP_TOKEN.burn(msg.sender, _rp);\\n\\n        enquiries[_enquiryId].totalAnswer += 1;\\n        _addTotalStakedToken(_enquiryId, _stakeToken, _stakeAmount);\\n        enquiries[_enquiryId].totalStakedRp += _rp;\\n\\n        answers[_enquiryId][msg.sender] = AnswerLib.Answer({\\n            stakeToken: _stakeToken,\\n            rp: _rp,\\n            signature: _signature,\\n            stakedAmount: _stakeAmount,\\n            claimed: false\\n        });\\n\\n        emit CreateAnswer(_enquiryId, msg.sender, _stakeToken, _rp, _stakeAmount, _signature);\\n    }\\n\\n    function updateAnswer(\\n        uint256 _enquiryId,\\n        uint256 _rp,\\n        uint256 _stakeAmount,\\n        bytes calldata _signature\\n    ) external payable whenNotPaused nonReentrant {\\n        // check if answer exist\\n        require(existsAnswer(_enquiryId, msg.sender), \\\"AnswerNotExist\\\");\\n\\n        // check if the enquiry still allow people to create/update answer\\n        require(\\n            enquiries[_enquiryId].endTime >= block.timestamp &&\\n                enquiries[_enquiryId].startTime <= block.timestamp,\\n            \\\"OutsideAllowTime\\\"\\n        );\\n\\n        uint256 rp = answers[_enquiryId][msg.sender].rp;\\n        address stakeToken = answers[_enquiryId][msg.sender].stakeToken;\\n        uint256 stakedAmount = answers[_enquiryId][msg.sender].stakedAmount;\\n\\n        if (_stakeAmount == stakedAmount) require(msg.value == 0, \\\"AmountNotMatch\\\");\\n\\n        if (_rp != rp || _stakeAmount != stakedAmount) {\\n            require(\\n                withinStakeLimits(_enquiryId, stakeToken, _rp, _stakeAmount),\\n                \\\"OutsideStakeLimit\\\"\\n            );\\n\\n            uint256 amount;\\n            if (_rp > rp) {\\n                amount = _rp - rp;\\n                RP_TOKEN.burn(msg.sender, amount);\\n                answers[_enquiryId][msg.sender].rp = _rp;\\n                enquiries[_enquiryId].totalStakedRp += amount;\\n            } else if (_rp < rp) {\\n                amount = rp - _rp;\\n                answers[_enquiryId][msg.sender].rp = _rp;\\n                enquiries[_enquiryId].totalStakedRp -= amount;\\n                RP_TOKEN.mint(msg.sender, amount);\\n            }\\n\\n            if (_stakeAmount > stakedAmount) {\\n                amount = _stakeAmount - stakedAmount;\\n                _transferInToken(msg.sender, stakeToken, amount);\\n                answers[_enquiryId][msg.sender].stakedAmount = _stakeAmount;\\n                _addTotalStakedToken(_enquiryId, stakeToken, amount);\\n            } else if (_stakeAmount < stakedAmount) {\\n                amount = stakedAmount - _stakeAmount;\\n                uint256 transferAmount = stakeToken == address(0) ? amount + msg.value : amount;\\n                answers[_enquiryId][msg.sender].stakedAmount = _stakeAmount;\\n                _subTotalStakedToken(_enquiryId, stakeToken, amount);\\n                _transferOutToken(payable(msg.sender), stakeToken, transferAmount);\\n            }\\n        }\\n\\n        if (\\n            _signature.length > 0 &&\\n            keccak256(_signature) != keccak256(answers[_enquiryId][msg.sender].signature)\\n        ) answers[_enquiryId][msg.sender].signature = _signature;\\n\\n        emit UpdateAnswer(_enquiryId, msg.sender, _rp, _stakeAmount, _signature);\\n    }\\n\\n    function refundAnswer(uint256 _enquiryId) external nonReentrant {\\n        require(existsAnswer(_enquiryId, msg.sender), \\\"AnswerNotExist\\\");\\n\\n        // check if enquiry cancelled or during commit answer time\\n        require(\\n            (enquiries[_enquiryId].endTime >= block.timestamp &&\\n                enquiries[_enquiryId].startTime <= block.timestamp) ||\\n                ((enquiries[_enquiryId].endTime + MAX_POST_RESULT_BUFFER < block.timestamp) &&\\n                    !existsEnquiryResult(_enquiryId)) ||\\n                (enquiries[_enquiryId].userLimit == 0),\\n            \\\"RefundNotAllow\\\"\\n        );\\n\\n        AnswerLib.Answer storage answer = answers[_enquiryId][msg.sender];\\n        // check if the reward is claimed\\n        require(!answer.claimed, \\\"RewardAlreadyClaimed\\\");\\n\\n        address stakeToken = answer.stakeToken;\\n        uint256 stakedAmount = answer.stakedAmount;\\n        uint256 rp = answer.rp;\\n\\n        //check if token stake token is zero after refund\\n        require(\\n            stakeToken == enquiries[_enquiryId].stakeAToken\\n                ? enquiries[_enquiryId].totalStakedAToken >= stakedAmount\\n                : enquiries[_enquiryId].totalStakedBToken >= stakedAmount &&\\n                    enquiries[_enquiryId].totalStakedRp >= rp,\\n            \\\"StakeOverClaimed\\\"\\n        );\\n\\n        enquiries[_enquiryId].totalStakedRp -= rp;\\n        _subTotalStakedToken(_enquiryId, stakeToken, stakedAmount);\\n        enquiries[_enquiryId].totalAnswer -= 1;\\n        delete answers[_enquiryId][msg.sender];\\n\\n        // refund the user\\n        if (stakedAmount > 0) _transferOutToken(payable(msg.sender), stakeToken, stakedAmount);\\n\\n        if (rp > 0)\\n            // mint the RP\\n            RP_TOKEN.mint(msg.sender, rp);\\n\\n        emit RefundAnswer(_enquiryId, msg.sender, rp, stakedAmount);\\n    }\\n\\n    function verifyMerkleTree(\\n        bytes32 _root,\\n        bytes32[] calldata _proof,\\n        bytes calldata _data\\n    ) public pure returns (bool) {\\n        return MerkleProof.verify(_proof, _root, keccak256(_data));\\n    }\\n\\n    function postResultRoot(uint256 _enquiryId, bytes32 _root)\\n        external\\n        enquiryExists(_enquiryId)\\n        onlyOwner\\n    {\\n        // check if the commit time has pass\\n        require(\\n            enquiries[_enquiryId].endTime < block.timestamp &&\\n                (enquiries[_enquiryId].endTime + MAX_POST_RESULT_BUFFER) >= block.timestamp,\\n            \\\"OutsideAllowTime\\\"\\n        );\\n\\n        // check if the result exist\\n        require(!existsEnquiryResult(_enquiryId), \\\"ResultExist\\\");\\n\\n        // check if the result has a valid merkle root\\n        require(_root != bytes32(0), \\\"EmptyRoot\\\");\\n\\n        results[_enquiryId] = _root;\\n\\n        emit ResultRoot(_enquiryId, msg.sender, _root);\\n    }\\n\\n    function claimReward(\\n        uint256 _enquiryId,\\n        bytes32[] calldata _proof,\\n        bytes calldata _data\\n    ) external enquiryExists(_enquiryId) nonReentrant {\\n        // check if the result exist\\n        require(existsEnquiryResult(_enquiryId), \\\"ResultNotExist\\\");\\n        // check if the proof and leaf is valid\\n        require(verifyMerkleTree(results[_enquiryId], _proof, _data), \\\"ProofOrLeafNotCorrect\\\");\\n\\n        (uint256 tokenReward, uint256 rpReward, address expert, bytes memory signature) = abi\\n            .decode(_data, (uint256, uint256, address, bytes));\\n\\n        // check if answer exist\\n        require(existsAnswer(_enquiryId, expert), \\\"AnswerNotExist\\\");\\n\\n        AnswerLib.Answer storage answer = answers[_enquiryId][expert];\\n\\n        // check if the answer is correct\\n        require(keccak256(answer.signature) == keccak256(signature), \\\"SignatureNotCorrect\\\");\\n\\n        // check if the reward is claimed\\n        require(!answer.claimed, \\\"RewardAlreadyClaimed\\\");\\n\\n        EnquiryLibV2.Enquiry storage enquiry = enquiries[_enquiryId];\\n\\n        answer.claimed = true;\\n        require(enquiry.reward >= tokenReward, \\\"OverClaimed\\\");\\n        if (tokenReward > 0) enquiries[_enquiryId].reward -= tokenReward;\\n\\n        // add checking for rp minting max\\n        require(rpReward <= maxRewardRp, \\\"OverRpRewardLimit\\\");\\n\\n        uint256 stakedAmount = answer.stakedAmount;\\n        //check if token stake token is zero after refund\\n        require(\\n            answer.stakeToken == enquiries[_enquiryId].stakeAToken\\n                ? enquiries[_enquiryId].totalStakedAToken >= stakedAmount\\n                : enquiries[_enquiryId].totalStakedBToken >= stakedAmount &&\\n                    enquiry.totalStakedRp >= answer.rp,\\n            \\\"StakeOverClaimed\\\"\\n        );\\n\\n        uint256 stakedAmountAfterFee;\\n        uint256 rewardAmountAfterFee;\\n        enquiry.totalStakedRp -= answer.rp;\\n        _subTotalStakedToken(_enquiryId, answer.stakeToken, stakedAmount);\\n        answer.stakedAmount = 0;\\n        answer.rp = 0;\\n\\n        if (stakedAmount > 0) {\\n            // calculate the service fee\\n            uint256 serviceFee = (stakedAmount * stakeServiceFeeRate) /\\n                SERVICE_FEE_PRECISION_FACTOR;\\n            if (serviceFee > 0) _transferOutToken(payable(treasury), answer.stakeToken, serviceFee);\\n            stakedAmountAfterFee = stakedAmount - serviceFee;\\n            // transfer the reward to the user\\n            _transferOutToken(payable(expert), answer.stakeToken, stakedAmountAfterFee);\\n        }\\n\\n        if (tokenReward > 0) {\\n            // calculate the service fee\\n            uint256 serviceFee = (tokenReward * rewardServiceFeeRate) /\\n                SERVICE_FEE_PRECISION_FACTOR;\\n            if (serviceFee > 0)\\n                _transferOutToken(payable(treasury), enquiry.rewardToken, serviceFee);\\n            rewardAmountAfterFee = tokenReward - serviceFee;\\n            // transfer the reward to the user\\n            _transferOutToken(payable(expert), enquiry.rewardToken, rewardAmountAfterFee);\\n        }\\n\\n        if (rpReward > 0)\\n            // mint the RP\\n            RP_TOKEN.mint(expert, rpReward);\\n\\n        emit ClaimReward(_enquiryId, expert, stakedAmountAfterFee, rewardAmountAfterFee, rpReward);\\n    }\\n\\n    function _addTotalStakedToken(\\n        uint256 _enquiryId,\\n        address _stakeToken,\\n        uint256 _stakeAmount\\n    ) internal {\\n        if (_stakeToken == enquiries[_enquiryId].stakeAToken) {\\n            enquiries[_enquiryId].totalStakedAToken += _stakeAmount;\\n        } else {\\n            enquiries[_enquiryId].totalStakedBToken += _stakeAmount;\\n        }\\n    }\\n\\n    function _subTotalStakedToken(\\n        uint256 _enquiryId,\\n        address _stakeToken,\\n        uint256 _stakeAmount\\n    ) internal {\\n        if (_stakeToken == enquiries[_enquiryId].stakeAToken) {\\n            enquiries[_enquiryId].totalStakedAToken -= _stakeAmount;\\n        } else {\\n            enquiries[_enquiryId].totalStakedBToken -= _stakeAmount;\\n        }\\n    }\\n\\n    function _transferOutToken(\\n        address payable _account,\\n        address _token,\\n        uint256 _amount\\n    ) internal {\\n        if (_token == address(0)) {\\n            // Transfer native token reward to seeker\\n            _account.sendValue(_amount);\\n        } else {\\n            // Transfer erc20 reward to the seeker\\n            IERC20(_token).safeTransfer(_account, _amount);\\n        }\\n    }\\n\\n    function _transferInToken(\\n        address _account,\\n        address _token,\\n        uint256 _amount\\n    ) internal {\\n        if (_token == address(0)) {\\n            // check if the native token matches the transferred value\\n            require(msg.value == _amount, \\\"AmountNotMatch\\\");\\n        } else {\\n            // Transfer token to the contract for reward\\n            IERC20(_token).safeTransferFrom(_account, address(this), _amount);\\n        }\\n    }\\n\\n    function getEnquiry(uint256 _enquiryId) external view returns (EnquiryLibV2.Enquiry memory) {\\n        return enquiries[_enquiryId];\\n    }\\n\\n    function getResult(uint256 _enquiryId) external view returns (bytes32) {\\n        return results[_enquiryId];\\n    }\\n\\n    function getAnswer(uint256 _enquiryId, address _account)\\n        external\\n        view\\n        returns (AnswerLib.Answer memory)\\n    {\\n        return answers[_enquiryId][_account];\\n    }\\n\\n    function withinStakeLimits(\\n        uint256 _enquiryId,\\n        address _stakeToken,\\n        uint256 _rp,\\n        uint256 _stakeAmount\\n    ) public view returns (bool) {\\n        uint16 precision = MULTIPLIER_PRECISION_FACTOR;\\n        uint256 amount;\\n\\n        if (enquiries[_enquiryId].stakeBToken == _stakeToken) {\\n            amount =\\n                (_stakeAmount * enquiries[_enquiryId].BACrossRate) /\\n                CROSS_RATE_PRECISION_FACTOR;\\n        } else {\\n            amount = _stakeAmount;\\n        }\\n\\n        // check if the stake amount pass the lithThreshold and require to check ratio\\n        uint256 maxTokenStake = (_rp * enquiries[_enquiryId].maxRPTokenAMultiplier) / precision;\\n        uint256 maxRPStake = ((amount * precision) / enquiries[_enquiryId].maxRPTokenAMultiplier) +\\n            100000000;\\n        bool tokenCheck = amount <= enquiries[_enquiryId].tokenStakeThreshold ||\\n            amount <= maxTokenStake;\\n        bool rpCheck = _rp <= enquiries[_enquiryId].rpStakeThreshold || _rp <= maxRPStake;\\n\\n        return tokenCheck && rpCheck;\\n    }\\n\\n    function existsEnquiry(uint256 _enquiryId) public view returns (bool) {\\n        return enquiries[_enquiryId].seeker != address(0) && enquiries[_enquiryId].userLimit > 0;\\n    }\\n\\n    function existsAnswer(uint256 _enquiryId, address _account) public view returns (bool) {\\n        return _account != address(0) && answers[_enquiryId][_account].signature.length > 0;\\n    }\\n\\n    function existsEnquiryResult(uint256 _enquiryId) public view returns (bool) {\\n        return results[_enquiryId] != bytes32(0);\\n    }\\n\\n    function setMaxRewardRP(uint64 _rp) public onlyOwner {\\n        require(_rp <= 1000000000000, \\\"OverMax\\\");\\n        maxRewardRp = _rp;\\n        emit SetMaxRewardRp(msg.sender, _rp);\\n    }\\n\\n    function setRewardServiceFeeRate(uint32 _rate) public onlyOwner {\\n        require(_rate <= MAX_SERVICE_FEE_RATE, \\\"OverMax\\\");\\n        rewardServiceFeeRate = _rate;\\n        emit SetRewardServiceFeeRate(msg.sender, _rate);\\n    }\\n\\n    function setStakeServiceFeeRate(uint32 _rate) public onlyOwner {\\n        require(_rate <= MAX_SERVICE_FEE_RATE, \\\"OverMax\\\");\\n        stakeServiceFeeRate = _rate;\\n        emit SetStakeServiceFeeRate(msg.sender, _rate);\\n    }\\n\\n    function setTreasury(address _account) public onlyOwner {\\n        require(_account != address(0), \\\"ZeroAddress\\\");\\n        treasury = _account;\\n        emit SetTreasury(msg.sender, _account);\\n    }\\n\\n    function togglePause() external onlyOwner {\\n        if (paused()) {\\n            _unpause();\\n        } else {\\n            _pause();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/enquiry-pool/interfaces/IReputation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IReputation {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the time of user last action owned by `account`.\\n     */\\n    function lastActionTimeOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the burn rate of the rp token.\\n     */\\n    function burnRate() external view returns (uint32);\\n\\n    function mint(address account, uint256 amount) external;\\n\\n    function burn(address account, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/enquiry-pool/libs/v2/EnquiryLibV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nlibrary EnquiryLibV2 {\\n    struct Enquiry {\\n        address seeker;\\n        uint256 reward;\\n        address rewardToken;\\n        address stakeAToken;\\n        address stakeBToken;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 userLimit;\\n        uint256 BACrossRate;\\n        uint256 maxRPTokenAMultiplier;\\n        uint256 tokenStakeThreshold;\\n        uint256 rpStakeThreshold;\\n        string uri;\\n        uint256 totalAnswer;\\n        uint256 totalStakedAToken;\\n        uint256 totalStakedBToken;\\n        uint256 totalStakedRp;\\n    }\\n\\n    struct CreateEnquiryParam {\\n        uint256 reward;\\n        address rewardToken;\\n        address stakeAToken;\\n        address stakeBToken;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 userLimit;\\n        uint256 BACrossRate;\\n        uint256 maxRPTokenAMultiplier;\\n        uint256 tokenStakeThreshold;\\n        uint256 rpStakeThreshold;\\n        string uri;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/enquiry-pool/libs/AnswerLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nlibrary AnswerLib {\\n    struct Answer {\\n        address stakeToken;\\n        uint256 rp;\\n        bytes signature;\\n        uint256 stakedAmount;\\n        bool claimed;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 9999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IReputation\",\"name\":\"_rp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"enquiryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"AddReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"enquiryId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"expert\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rpReward\",\"type\":\"uint256\"}],\"name\":\"ClaimReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"enquiryId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"expert\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"CreateAnswer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"enquiryId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seeker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakeAToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakeBToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"BACrossRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxRPTokenAMultiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenStakeThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rpStakeThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"CreateEnquiry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Init\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"enquiryId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"expert\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"name\":\"RefundAnswer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"enquiryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seeker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RefundEnquiry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"enquiryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"ResultRoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rp\",\"type\":\"uint256\"}],\"name\":\"SetMaxRewardRp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"SetRewardServiceFeeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"SetStakeServiceFeeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasaury\",\"type\":\"address\"}],\"name\":\"SetTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"enquiryId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"expert\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"UpdateAnswer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RP_TOKEN\",\"outputs\":[{\"internalType\":\"contract IReputation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_enquiryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_enquiryId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_enquiryId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"createAnswer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakeAToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakeBToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"BACrossRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRPTokenAMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenStakeThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rpStakeThreshold\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"internalType\":\"struct EnquiryLibV2.CreateEnquiryParam\",\"name\":\"_enquiry\",\"type\":\"tuple\"}],\"name\":\"createEnquiry\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_enquiryId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"existsAnswer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_enquiryId\",\"type\":\"uint256\"}],\"name\":\"existsEnquiry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_enquiryId\",\"type\":\"uint256\"}],\"name\":\"existsEnquiryResult\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_enquiryId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAnswer\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"internalType\":\"struct AnswerLib.Answer\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_enquiryId\",\"type\":\"uint256\"}],\"name\":\"getEnquiry\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seeker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakeAToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakeBToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"BACrossRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRPTokenAMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenStakeThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rpStakeThreshold\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalAnswer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakedAToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakedBToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakedRp\",\"type\":\"uint256\"}],\"internalType\":\"struct EnquiryLibV2.Enquiry\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_enquiryId\",\"type\":\"uint256\"}],\"name\":\"getResult\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRewardRp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_enquiryId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"postResultRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_enquiryId\",\"type\":\"uint256\"}],\"name\":\"refundAnswer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_enquiryId\",\"type\":\"uint256\"}],\"name\":\"refundEnquiry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardServiceFeeRate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_rp\",\"type\":\"uint64\"}],\"name\":\"setMaxRewardRP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_rate\",\"type\":\"uint32\"}],\"name\":\"setRewardServiceFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_rate\",\"type\":\"uint32\"}],\"name\":\"setStakeServiceFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeServiceFeeRate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEnquiry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_enquiryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"updateAnswer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_expert\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_enquiryId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_bidPrice\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_askPrice\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_secret\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"verifyAnswer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"verifyMerkleTree\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_enquiryId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeAmount\",\"type\":\"uint256\"}],\"name\":\"withinStakeLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "EnquiryPoolV2", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "9999", "ConstructorArguments": "000000000000000000000000d03f79f2f68ec5a0f1bb9b5ff50e7b29fcb582f700000000000000000000000067523c331b140afcf9a970d42df1f6a694aec037", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}