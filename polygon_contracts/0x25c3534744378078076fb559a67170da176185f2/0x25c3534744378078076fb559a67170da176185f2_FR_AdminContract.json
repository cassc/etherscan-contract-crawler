{"SourceCode": "{\"FR_AdminContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./FR_IDataContract.sol\\\";\\r\\nimport \\\"./FR_IDataContractV2.sol\\\";\\r\\nimport \\\"./FR_IIDGenerator.sol\\\";\\r\\nimport \\\"./FR_Library.sol\\\";\\r\\nimport \\\"./FR_IERC1155.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\ncontract FR_AdminContract {\\r\\n    using SafeMath for uint256;\\r\\n    FR_IDataContract public iDataContractFR;\\r\\n    FR_IDataContractV2 public iDataContractV2FR;\\r\\n    FR_IIDGeneretor public iIDGeneretorFR;\\r\\n    FR_IERC1155 public iERC1155FR;\\r\\n    bool initialized = false;\\r\\n\\r\\n    event AddKYCWhiteList(\\r\\n        uint256 indexed _event_id,\\r\\n        uint256 indexed _call_ref_id,\\r\\n        string indexed _user_id\\r\\n    );\\r\\n    event AddProperty(\\r\\n        uint256 indexed _event_id,\\r\\n        uint256 indexed _call_ref_id,\\r\\n        uint256 indexed _property_id\\r\\n    );\\r\\n    event UpdatePropertyDetails(\\r\\n        uint256 indexed _event_id,\\r\\n        uint256 indexed _call_ref_id,\\r\\n        uint256 indexed _property_id\\r\\n    );\\r\\n    event UpdatePropertyPriceDetails(\\r\\n        uint256 indexed _event_id,\\r\\n        uint256 indexed _call_ref_id,\\r\\n        uint256 indexed _property_id\\r\\n    );\\r\\n    event UpdatePropertySaleStatus(\\r\\n        uint256 indexed _event_id,\\r\\n        uint256 indexed _call_ref_id,\\r\\n        uint256 indexed _property_id\\r\\n    );\\r\\n\\r\\n    event UpdatePropertyResaleStatus(\\r\\n        uint256 indexed _event_id,\\r\\n        uint256 indexed _call_ref_id,\\r\\n        uint256 indexed _property_id\\r\\n    );\\r\\n\\r\\n    event UpdatePropertySPVStatus(\\r\\n        uint256 indexed _event_id,\\r\\n        uint256 indexed _call_ref_id,\\r\\n        uint256 indexed _property_id\\r\\n    );\\r\\n\\r\\n    event UpdatePropertyNFTStatus(\\r\\n        uint256 indexed _event_id,\\r\\n        uint256 indexed _call_ref_id,\\r\\n        uint256 indexed _property_id\\r\\n    );\\r\\n\\r\\n    event CreatePropertyNFT(\\r\\n        uint256 indexed _event_id,\\r\\n        uint256 indexed _call_ref_id\\r\\n    );\\r\\n\\r\\n    constructor(\\r\\n        address _dataContractFR,\\r\\n        address _dataContractV2FR,\\r\\n        address _idGenertorContract,\\r\\n        address _erc1155FR\\r\\n    ) {\\r\\n        iDataContractFR = FR_IDataContract(_dataContractFR);\\r\\n        iDataContractV2FR = FR_IDataContractV2(_dataContractV2FR);\\r\\n        iIDGeneretorFR = FR_IIDGeneretor(_idGenertorContract);\\r\\n        iERC1155FR = FR_IERC1155(_erc1155FR);\\r\\n    }\\r\\n\\r\\n    function setIDataContractFR(address _dataContract) public {\\r\\n        iDataContractFR.checkRole(\\r\\n            keccak256(abi.encodePacked(\\\"ADMIN_ROLE\\\")),\\r\\n            msg.sender\\r\\n        );\\r\\n        iDataContractFR = FR_IDataContract(_dataContract);\\r\\n    }\\r\\n\\r\\n    function setIDataContractV2FR(address _dataContract_v2) public {\\r\\n        iDataContractFR.checkRole(\\r\\n            keccak256(abi.encodePacked(\\\"ADMIN_ROLE\\\")),\\r\\n            msg.sender\\r\\n        );\\r\\n        iDataContractV2FR = FR_IDataContractV2(_dataContract_v2);\\r\\n    }\\r\\n\\r\\n    function setIIDGeneretorFR(address _idGenertorContract) public {\\r\\n        iDataContractFR.checkRole(\\r\\n            keccak256(abi.encodePacked(\\\"ADMIN_ROLE\\\")),\\r\\n            msg.sender\\r\\n        );\\r\\n        iIDGeneretorFR = FR_IIDGeneretor(_idGenertorContract);\\r\\n    }\\r\\n\\r\\n    function setIERC1155FR(address _erc1155FR) external {\\r\\n        iDataContractFR.checkRole(\\r\\n            keccak256(abi.encodePacked(\\\"ADMIN_ROLE\\\")),\\r\\n            msg.sender\\r\\n        );\\r\\n        iERC1155FR = FR_IERC1155(_erc1155FR);\\r\\n    }\\r\\n\\r\\n    function addProperty(\\r\\n        uint256 _call_ref_id,\\r\\n        string memory _property_name,\\r\\n        uint256 _listing_date,\\r\\n        uint256 _number_of_shares,\\r\\n        uint256 _limit_per_share,\\r\\n        uint256 _price_per_share,\\r\\n        string memory _debit_currency,\\r\\n        FR_Library.addPropertyInvoiceStruct[] memory _invoiceItems\\r\\n    ) public {\\r\\n        iDataContractFR.checkRole(\\r\\n            keccak256(abi.encodePacked(\\\"ADMIN_ROLE\\\")),\\r\\n            msg.sender\\r\\n        );\\r\\n        uint256 _property_id = iIDGeneretorFR.generateNewId(\\\"PROPERTY_ID\\\");\\r\\n        addPropertyInternal(\\r\\n            _property_id,\\r\\n            _property_name,\\r\\n            _listing_date,\\r\\n            _number_of_shares,\\r\\n            _limit_per_share,\\r\\n            _price_per_share,\\r\\n            _debit_currency\\r\\n        );\\r\\n        for (\\r\\n            uint256 invoiceIndex = 0;\\r\\n            invoiceIndex \\u003c _invoiceItems.length;\\r\\n            invoiceIndex++\\r\\n        ) {\\r\\n            setInvoiceAttributes(\\r\\n                _property_id,\\r\\n                _invoiceItems[invoiceIndex].saleType,\\r\\n                _invoiceItems[invoiceIndex].tradeType,\\r\\n                _invoiceItems[invoiceIndex].invoiceAttributeItems\\r\\n            );\\r\\n        }\\r\\n        uint256 eventId = iIDGeneretorFR.generateNewId(\\\"EVENT_ID\\\");\\r\\n        emit AddProperty(eventId, _call_ref_id, _property_id);\\r\\n    }\\r\\n\\r\\n    function addPropertyInternal(\\r\\n        uint256 _property_id,\\r\\n        string memory _property_name,\\r\\n        uint256 _listing_date,\\r\\n        uint256 _number_of_shares,\\r\\n        uint256 _limit_per_share,\\r\\n        uint256 _price_per_share,\\r\\n        string memory _debit_currency\\r\\n    ) internal {\\r\\n        require(\\r\\n            _limit_per_share \\u003c= _number_of_shares,\\r\\n            \\\"INVALID LIMIT PER SHARE\\\"\\r\\n        );\\r\\n        require(_price_per_share != 0, \\\"INVALID PROPERTY PRICING\\\");\\r\\n        FR_Library.Properties_Struct memory newProperty = FR_Library\\r\\n            .Properties_Struct(\\r\\n                _property_name,\\r\\n                _listing_date,\\r\\n                _number_of_shares,\\r\\n                0,\\r\\n                _limit_per_share,\\r\\n                _debit_currency,\\r\\n                \\\"\\\",\\r\\n                0,\\r\\n                block.timestamp\\r\\n            );\\r\\n        FR_Library.Property_Price_Struct memory newPropertyPrice = FR_Library\\r\\n            .Property_Price_Struct(_price_per_share, block.timestamp);\\r\\n        FR_Library.Property_Status_Struct memory newPropertyStatus = FR_Library\\r\\n            .Property_Status_Struct(\\r\\n                \\\"CREATED\\\",\\r\\n                \\\"UNFORMED\\\",\\r\\n                \\\"NOT_ISSUED\\\",\\r\\n                \\\"NOT_OPEN\\\",\\r\\n                block.timestamp\\r\\n            );\\r\\n        iDataContractFR.setPropertyDetails(_property_id, newProperty);\\r\\n        iDataContractFR.setPropertyPricing(_property_id, newPropertyPrice);\\r\\n        iDataContractFR.setPropertyStatus(_property_id, newPropertyStatus);\\r\\n    }\\r\\n\\r\\n    function updatePropertyDetails(\\r\\n        uint256 _call_ref_id,\\r\\n        uint256 _property_id,\\r\\n        string memory _property_name,\\r\\n        uint256 _listing_date,\\r\\n        uint256 _total_shares,\\r\\n        uint256 _limit_per_share,\\r\\n        string memory _debit_currency,\\r\\n        bool _is_price_update,\\r\\n        uint256 _price_per_share,\\r\\n        FR_Library.updatePropertyInvoiceStruct[] memory _invoiceItems\\r\\n    ) public {\\r\\n        iDataContractFR.checkRole(\\r\\n            keccak256(abi.encodePacked(\\\"ADMIN_ROLE\\\")),\\r\\n            msg.sender\\r\\n        );\\r\\n        updatePropertyDetailsInternal(\\r\\n            _property_id,\\r\\n            _property_name,\\r\\n            _listing_date,\\r\\n            _total_shares,\\r\\n            _limit_per_share,\\r\\n            _debit_currency,\\r\\n            _is_price_update,\\r\\n            _price_per_share\\r\\n        );\\r\\n\\r\\n        for (\\r\\n            uint256 invoiceIndex = 0;\\r\\n            invoiceIndex \\u003c _invoiceItems.length;\\r\\n            invoiceIndex++\\r\\n        ) {\\r\\n            if (_invoiceItems[invoiceIndex].isInvoiceChanged) {\\r\\n                setInvoiceAttributes(\\r\\n                    _property_id,\\r\\n                    _invoiceItems[invoiceIndex].saleType,\\r\\n                    _invoiceItems[invoiceIndex].tradeType,\\r\\n                    _invoiceItems[invoiceIndex].invoiceAttributeItems\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n        uint256 event_id = iIDGeneretorFR.generateNewId(\\\"EVENT_ID\\\");\\r\\n        emit UpdatePropertyDetails(event_id, _call_ref_id, _property_id);\\r\\n    }\\r\\n\\r\\n    function updatePropertyDetailsInternal(\\r\\n        uint256 _property_id,\\r\\n        string memory _property_name,\\r\\n        uint256 _listing_date,\\r\\n        uint256 _total_shares,\\r\\n        uint256 _limit_per_share,\\r\\n        string memory _debit_currency,\\r\\n        bool _is_price_update,\\r\\n        uint256 _price_per_share\\r\\n    ) internal {\\r\\n        FR_Library.Properties_Struct memory propertyToUpdate = iDataContractFR\\r\\n            .getProperties(_property_id);\\r\\n\\r\\n        require(\\r\\n            _limit_per_share \\u003c= propertyToUpdate.totalShares,\\r\\n            \\\"INVALID LIMIT PER SHARE\\\"\\r\\n        );\\r\\n\\r\\n        if (propertyToUpdate.totalShares != _total_shares) {\\r\\n            require(\\r\\n                propertyToUpdate.soldShares == 0,\\r\\n                \\\"INVALID TOTAL SHARES, PROPERTY ALREADY STARTS SELLING\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        propertyToUpdate.propertyName = _property_name;\\r\\n        propertyToUpdate.listingDate = _listing_date;\\r\\n        propertyToUpdate.limitPerShare = _limit_per_share;\\r\\n        propertyToUpdate.totalShares = _total_shares;\\r\\n        propertyToUpdate.debitCurrency = _debit_currency;\\r\\n        propertyToUpdate.lastUpdated = block.timestamp;\\r\\n        iDataContractFR.setPropertyDetails(_property_id, propertyToUpdate);\\r\\n        if (_is_price_update) {\\r\\n            require(_price_per_share != 0, \\\"INVALID PROPERTY PRICING\\\");\\r\\n            FR_Library.Property_Price_Struct\\r\\n                memory newPropertyPrice = FR_Library.Property_Price_Struct(\\r\\n                    _price_per_share,\\r\\n                    block.timestamp\\r\\n                );\\r\\n            iDataContractFR.setPropertyPricing(_property_id, newPropertyPrice);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updatePropertyPriceDetails(\\r\\n        uint256 _call_ref_id,\\r\\n        uint256 _property_id,\\r\\n        uint256 _price_per_share\\r\\n    ) public {\\r\\n        iDataContractFR.checkRole(\\r\\n            keccak256(abi.encodePacked(\\\"ADMIN_ROLE\\\")),\\r\\n            msg.sender\\r\\n        );\\r\\n        FR_Library.Property_Price_Struct memory newPropertyPrice = FR_Library\\r\\n            .Property_Price_Struct(\\r\\n                _price_per_share,\\r\\n                block.timestamp\\r\\n            );\\r\\n        iDataContractFR.setPropertyPricing(_property_id, newPropertyPrice);\\r\\n        uint256 event_id = iIDGeneretorFR.generateNewId(\\\"EVENT_ID\\\");\\r\\n        emit UpdatePropertyPriceDetails(event_id, _call_ref_id, _property_id);\\r\\n    }\\r\\n\\r\\n    function updatePropertySaleStatus(\\r\\n        uint256 _call_ref_id,\\r\\n        uint256 _property_id,\\r\\n        string memory _sale_status\\r\\n    ) public {\\r\\n        iDataContractFR.checkRole(\\r\\n            keccak256(abi.encodePacked(\\\"ADMIN_ROLE\\\")),\\r\\n            msg.sender\\r\\n        );\\r\\n\\r\\n        FR_Library.Property_Status_Struct\\r\\n            memory propertyStatusUpdate = iDataContractFR.getPropertyStatus(\\r\\n                _property_id\\r\\n            );\\r\\n\\r\\n        require(\\r\\n            !(keccak256(abi.encodePacked(_sale_status)) ==\\r\\n                keccak256(abi.encodePacked(\\\"\\\"))),\\r\\n            \\\"INVALID STATUS\\\"\\r\\n        );\\r\\n        require(\\r\\n            !(keccak256(abi.encodePacked(propertyStatusUpdate.saleStatus)) ==\\r\\n                keccak256(abi.encodePacked(_sale_status))),\\r\\n            \\\"INVALID STATUS - ALREADY AT THE SAME STATE\\\"\\r\\n        );\\r\\n\\r\\n        propertyStatusUpdate.saleStatus = _sale_status;\\r\\n        propertyStatusUpdate.lastUpdated = block.timestamp;\\r\\n\\r\\n        iDataContractFR.setPropertyStatus(_property_id, propertyStatusUpdate);\\r\\n\\r\\n        uint256 event_id = iIDGeneretorFR.generateNewId(\\\"EVENT_ID\\\");\\r\\n        emit UpdatePropertySaleStatus(event_id, _call_ref_id, _property_id);\\r\\n    }\\r\\n\\r\\n    function updatePropertyResaleStatus(\\r\\n        uint256 _call_ref_id,\\r\\n        uint256 _property_id,\\r\\n        string memory _resale_status\\r\\n    ) public {\\r\\n        iDataContractFR.checkRole(\\r\\n            keccak256(abi.encodePacked(\\\"ADMIN_ROLE\\\")),\\r\\n            msg.sender\\r\\n        );\\r\\n\\r\\n        FR_Library.Property_Status_Struct\\r\\n            memory propertyStatusUpdate = iDataContractFR.getPropertyStatus(\\r\\n                _property_id\\r\\n            );\\r\\n\\r\\n        require(\\r\\n            !(keccak256(abi.encodePacked(_resale_status)) ==\\r\\n                keccak256(abi.encodePacked(\\\"\\\"))),\\r\\n            \\\"INVALID STATUS\\\"\\r\\n        );\\r\\n        require(\\r\\n            !(keccak256(abi.encodePacked(propertyStatusUpdate.resaleStatus)) ==\\r\\n                keccak256(abi.encodePacked(_resale_status))),\\r\\n            \\\"INVALID STATUS - ALREADY AT THE SAME STATE\\\"\\r\\n        );\\r\\n        require(\\r\\n            (keccak256(abi.encodePacked(propertyStatusUpdate.NFTStatus)) ==\\r\\n                keccak256(abi.encodePacked(\\\"ISSUED\\\"))),\\r\\n            \\\"NFT IS NOT ISSUED YET\\\"\\r\\n        );\\r\\n\\r\\n        propertyStatusUpdate.resaleStatus = _resale_status;\\r\\n        propertyStatusUpdate.lastUpdated = block.timestamp;\\r\\n\\r\\n        iDataContractFR.setPropertyStatus(_property_id, propertyStatusUpdate);\\r\\n\\r\\n        uint256 event_id = iIDGeneretorFR.generateNewId(\\\"EVENT_ID\\\");\\r\\n        emit UpdatePropertyResaleStatus(event_id, _call_ref_id, _property_id);\\r\\n    }\\r\\n\\r\\n    function updatePropertySPVStatus(\\r\\n        uint256 _call_ref_id,\\r\\n        uint256 _property_id,\\r\\n        string memory _spv_status\\r\\n    ) public {\\r\\n        iDataContractFR.checkRole(\\r\\n            keccak256(abi.encodePacked(\\\"ADMIN_ROLE\\\")),\\r\\n            msg.sender\\r\\n        );\\r\\n\\r\\n        FR_Library.Property_Status_Struct\\r\\n            memory propertyStatusUpdate = iDataContractFR.getPropertyStatus(\\r\\n                _property_id\\r\\n            );\\r\\n\\r\\n        require(\\r\\n            !(keccak256(abi.encodePacked(_spv_status)) ==\\r\\n                keccak256(abi.encodePacked(\\\"\\\"))),\\r\\n            \\\"INVALID STATUS\\\"\\r\\n        );\\r\\n        require(\\r\\n            !(keccak256(abi.encodePacked(propertyStatusUpdate.SPVStatus)) ==\\r\\n                keccak256(abi.encodePacked(_spv_status))),\\r\\n            \\\"INVALID STATUS - ALREADY AT THE SAME STATE\\\"\\r\\n        );\\r\\n\\r\\n        propertyStatusUpdate.SPVStatus = _spv_status;\\r\\n        propertyStatusUpdate.lastUpdated = block.timestamp;\\r\\n\\r\\n        iDataContractFR.setPropertyStatus(_property_id, propertyStatusUpdate);\\r\\n\\r\\n        uint256 event_id = iIDGeneretorFR.generateNewId(\\\"EVENT_ID\\\");\\r\\n        emit UpdatePropertySPVStatus(event_id, _call_ref_id, _property_id);\\r\\n    }\\r\\n\\r\\n    function commitAndIssueNFT(\\r\\n        uint256 _call_ref_id,\\r\\n        uint256 _property_id,\\r\\n        string memory ipfs\\r\\n    ) public {\\r\\n        iDataContractFR.checkRole(\\r\\n            keccak256(abi.encodePacked(\\\"ADMIN_ROLE\\\")),\\r\\n            msg.sender\\r\\n        );\\r\\n        FR_Library.Property_Status_Struct\\r\\n            memory propertyStatusUpdate = iDataContractFR.getPropertyStatus(\\r\\n                _property_id\\r\\n            );\\r\\n\\r\\n        require(\\r\\n            !(keccak256(abi.encodePacked(ipfs)) ==\\r\\n                keccak256(abi.encodePacked(\\\"\\\"))),\\r\\n            \\\"INVALID IPFS URI\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            (keccak256(abi.encodePacked(propertyStatusUpdate.SPVStatus)) ==\\r\\n                keccak256(abi.encodePacked(\\\"FORMED\\\"))),\\r\\n            \\\"INVALID STATUS - SPV NOT FORMED\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            !(keccak256(abi.encodePacked(propertyStatusUpdate.NFTStatus)) ==\\r\\n                keccak256(abi.encodePacked(\\\"ISSUED\\\"))),\\r\\n            \\\"INVALID STATUS - ALREADY ISSUED\\\"\\r\\n        );\\r\\n\\r\\n        createPropertyNFT(_property_id, ipfs);\\r\\n\\r\\n        propertyStatusUpdate.NFTStatus = \\\"ISSUED\\\";\\r\\n        propertyStatusUpdate.lastUpdated = block.timestamp;\\r\\n\\r\\n        iDataContractFR.setPropertyStatus(_property_id, propertyStatusUpdate);\\r\\n\\r\\n        \\r\\n\\r\\n        uint256 event_id = iIDGeneretorFR.generateNewId(\\\"EVENT_ID\\\");\\r\\n        emit UpdatePropertyNFTStatus(event_id, _call_ref_id, _property_id);\\r\\n    }\\r\\n\\r\\n    function createPropertyNFT(\\r\\n        uint256 _property_id,\\r\\n        string memory ipfs\\r\\n    ) internal {\\r\\n        iDataContractFR.checkRole(\\r\\n            keccak256(abi.encodePacked(\\\"ADMIN_ROLE\\\")),\\r\\n            msg.sender\\r\\n        );\\r\\n        iERC1155FR.addURI(ipfs);\\r\\n        uint256 token_id = iERC1155FR.getTokenIdByURI(ipfs);\\r\\n        require(token_id != 0, \\\"URI NOT FOUND\\\");\\r\\n        iDataContractFR.updateNFTDetailsToProperty(\\r\\n            _property_id,\\r\\n            ipfs,\\r\\n            token_id\\r\\n        );\\r\\n        iDataContractV2FR.setPropertyIDbyTokenID(token_id, _property_id);\\r\\n    }\\r\\n\\r\\n    function addKYCWhiteList(\\r\\n        uint256 _call_ref_id,\\r\\n        string memory _user_id\\r\\n    ) public {\\r\\n        iDataContractFR.checkRole(\\r\\n            keccak256(abi.encodePacked(\\\"ADMIN_ROLE\\\")),\\r\\n            msg.sender\\r\\n        );\\r\\n        iDataContractFR.setKYCWhiteList(_user_id, true);\\r\\n        uint256 eventId = iIDGeneretorFR.generateNewId(\\\"EVENT_ID\\\");\\r\\n        emit AddKYCWhiteList(eventId, _call_ref_id, _user_id);\\r\\n    }\\r\\n\\r\\n    function toHexDigit(uint8 d) internal pure returns (bytes1) {\\r\\n        if (d \\u003c= 9) {\\r\\n            return bytes1(uint8(bytes1(\\\"0\\\")) + d);\\r\\n        } else if (d \\u003e= 10 \\u0026\\u0026 d \\u003c= 15) {\\r\\n            return bytes1(uint8(bytes1(\\\"a\\\")) + (d - 10));\\r\\n        }\\r\\n        revert(\\\"Invalid input\\\");\\r\\n    }\\r\\n\\r\\n    function generateUserId(\\r\\n        string memory _userName\\r\\n    ) public returns (string memory) {\\r\\n        uint256 user_id = iIDGeneretorFR.generateNewId(\\\"USER_ID\\\");\\r\\n        string memory username = string(abi.encodePacked(_userName, user_id));\\r\\n        bytes memory encodedString = abi.encodePacked(\\r\\n            username,\\r\\n            block.timestamp,\\r\\n            block.difficulty,\\r\\n            block.number,\\r\\n            blockhash(block.number - 1)\\r\\n        );\\r\\n        bytes32 hashedString = keccak256(encodedString);\\r\\n        bytes4 userId = bytes4(hashedString);\\r\\n        bytes memory result = new bytes(8);\\r\\n        for (uint i = 0; i \\u003c 4; ++i) {\\r\\n            uint8 digit1 = uint8(userId[i] \\u003e\\u003e 4);\\r\\n            uint8 digit2 = uint8(userId[i] \\u0026 0x0F);\\r\\n            result[2 * i] = toHexDigit(digit1);\\r\\n            result[2 * i + 1] = toHexDigit(digit2);\\r\\n        }\\r\\n        return string(result);\\r\\n    }\\r\\n\\r\\n    function setExchangeRateFiatToCrypto(\\r\\n        string memory _fiat_currency,\\r\\n        string memory _crypto_currency,\\r\\n        uint256 _new_rate\\r\\n    ) public {\\r\\n        iDataContractFR.checkRole(\\r\\n            keccak256(abi.encodePacked(\\\"ADMIN_ROLE\\\")),\\r\\n            msg.sender\\r\\n        );\\r\\n        iDataContractFR.setExchangeRateFiatToCrypto(\\r\\n            _fiat_currency,\\r\\n            _crypto_currency,\\r\\n            _new_rate\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setTreasury(address _new_treasury_address) public {\\r\\n        iDataContractFR.checkRole(\\r\\n            keccak256(abi.encodePacked(\\\"ADMIN_ROLE\\\")),\\r\\n            msg.sender\\r\\n        );\\r\\n        iDataContractFR.setTreasury(_new_treasury_address);\\r\\n    }\\r\\n\\r\\n    function setCryptoAddress(\\r\\n        string memory _crypto_name,\\r\\n        address _crypto_address\\r\\n    ) public {\\r\\n        iDataContractFR.checkRole(\\r\\n            keccak256(abi.encodePacked(\\\"ADMIN_ROLE\\\")),\\r\\n            msg.sender\\r\\n        );\\r\\n        iDataContractFR.setCryptoAddress(_crypto_name, _crypto_address);\\r\\n    }\\r\\n\\r\\n    function disableUser(string memory _user_id) external {\\r\\n        iDataContractFR.checkRole(\\r\\n            keccak256(abi.encodePacked(\\\"ADMIN_ROLE\\\")),\\r\\n            msg.sender\\r\\n        );\\r\\n        iDataContractFR.disableUser(_user_id);\\r\\n    }\\r\\n\\r\\n    function enableUser(string memory _user_id) external {\\r\\n        iDataContractFR.checkRole(\\r\\n            keccak256(abi.encodePacked(\\\"ADMIN_ROLE\\\")),\\r\\n            msg.sender\\r\\n        );\\r\\n        iDataContractFR.disableUser(_user_id);\\r\\n    }\\r\\n\\r\\n    function setExchangeLiquidityCryptoToCrypto(\\r\\n        address _from_currency,\\r\\n        address _to_currency,\\r\\n        address _liquidity_address\\r\\n    ) public {\\r\\n        iDataContractFR.checkRole(\\r\\n            keccak256(abi.encodePacked(\\\"ADMIN_ROLE\\\")),\\r\\n            msg.sender\\r\\n        );\\r\\n        iDataContractFR.setExchangeLiquidityCryptoToCrypto(\\r\\n            _from_currency,\\r\\n            _to_currency,\\r\\n            _liquidity_address\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function validateERC1155Transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 id,\\r\\n        uint256 numberOfShare, bytes memory data) public returns(bool) {\\r\\n        iDataContractFR.checkRole(\\r\\n            keccak256(abi.encodePacked(\\\"ADMIN_CONTRACT_ACCESS_ROLE\\\")),\\r\\n            msg.sender\\r\\n        );\\r\\n        string memory _user_id_to = iDataContractFR.usersIdByWallet(to);\\r\\n        require(\\r\\n                iDataContractFR.getIsWhiteListed(_user_id_to),\\r\\n            \\\"INVALID USER - NOT WHITELISTED\\\"\\r\\n        );\\r\\n\\r\\n        uint256 propertyID = iDataContractV2FR.getPropertyIDbyTokenID(id);\\r\\n\\r\\n        FR_Library.Properties_Struct memory propertyInfo = iDataContractFR.getProperties(propertyID);\\r\\n        uint256 limitPerShare = propertyInfo.limitPerShare;\\r\\n\\r\\n        require(\\r\\n        iERC1155FR.balanceOf(to, id).add(numberOfShare)  \\u003c= limitPerShare,\\r\\n        \\\"Transfer exceeds limitPerShare for the receiver\\\"\\r\\n        );\\r\\n\\r\\n        string memory _user_id_from = iDataContractFR.usersIdByWallet(from);\\r\\n        FR_Library.User_Holdings_Struct memory fromHoldings = iDataContractFR.userHoldings(_user_id_from,propertyID);\\r\\n        fromHoldings.numberOfShares = fromHoldings.numberOfShares.sub(numberOfShare);\\r\\n        iDataContractFR.updateUserHoldings(_user_id_from, propertyID, fromHoldings);\\r\\n\\r\\n        FR_Library.User_Holdings_Struct memory toHoldings = iDataContractFR.userHoldings(_user_id_to, propertyID);\\r\\n        toHoldings.numberOfShares = toHoldings.numberOfShares.add(numberOfShare);\\r\\n        iDataContractFR.updateUserHoldings(_user_id_to, propertyID, toHoldings);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function setInvoiceAttributes(\\r\\n        uint256 _property_id,\\r\\n        string memory _sale_type,\\r\\n        string memory _trade_type,\\r\\n        FR_Library.InvoiceAttributeItemStruct[] memory _invoiceAttributeItems\\r\\n    ) public {\\r\\n        iDataContractFR.checkRole(\\r\\n            keccak256(abi.encodePacked(\\\"ADMIN_ROLE\\\")),\\r\\n            msg.sender\\r\\n        );\\r\\n        iDataContractV2FR.setInvoiceAttributes(\\r\\n            _property_id,\\r\\n            _sale_type,\\r\\n            _trade_type,\\r\\n            _invoiceAttributeItems\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\"},\"FR_Counter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library\\u0027s function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function setValue(Counter storage counter, uint256 _value) internal {\\n        unchecked {\\n            counter._value = _value;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value \\u003e 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n}\\n\"},\"FR_IDataContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./FR_Library.sol\\\";\\r\\nimport \\\"./FR_Counter.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface FR_IDataContract {\\r\\n    function initialize(\\r\\n        address _system_role,\\r\\n        address _admin_role,\\r\\n        address _user_contract_access_role,\\r\\n        address _admin_contract_access_role\\r\\n    ) external;\\r\\n\\r\\n    function getProperties(\\r\\n        uint256 _property_id\\r\\n    ) external view returns (FR_Library.Properties_Struct memory);\\r\\n\\r\\n    function getPropertyStatus(\\r\\n        uint256 _property_id\\r\\n    ) external view returns (FR_Library.Property_Status_Struct memory);\\r\\n\\r\\n    function userHoldings(\\r\\n        string memory _user_id,\\r\\n        uint256 _property_id\\r\\n    ) external returns (FR_Library.User_Holdings_Struct memory);\\r\\n\\r\\n    function usersIdByWallet(address _wallet) external returns (string memory);\\r\\n\\r\\n    function giveRole(bytes32 _role_name, address _wallet) external;\\r\\n\\r\\n    function checkRole(bytes32 role, address account) external view;\\r\\n\\r\\n    function setPropertyDetails(\\r\\n        uint256 _property_id,\\r\\n        FR_Library.Properties_Struct memory _property_details\\r\\n    ) external;\\r\\n\\r\\n    function setPropertyPricing(\\r\\n        uint256 _property_id,\\r\\n        FR_Library.Property_Price_Struct memory _property_pricing\\r\\n    ) external;\\r\\n\\r\\n    function setPropertyStatus(\\r\\n        uint256 _property_id,\\r\\n        FR_Library.Property_Status_Struct memory _property_status\\r\\n    ) external;\\r\\n\\r\\n    function generateNewUserId(\\r\\n        string memory _userName\\r\\n    ) external view returns (string memory);\\r\\n\\r\\n    function setUserDetails(\\r\\n        string memory _user_id,\\r\\n        FR_Library.User_Struct memory _user_details\\r\\n    ) external;\\r\\n\\r\\n    function setUserIdByUserWallet(\\r\\n        string memory _user_id,\\r\\n        address _user_wallet\\r\\n    ) external;\\r\\n\\r\\n    function setKYCWhiteList(string memory _user_id, bool _flag) external;\\r\\n\\r\\n    function setPrimaryOrders(\\r\\n        uint256 _order_id,\\r\\n        FR_Library.Orders_Struct memory _order_details,\\r\\n        FR_Library.Order_Share_Details_Struct memory _order_share_details,\\r\\n        FR_Library.User_Struct memory _new_user_struct\\r\\n    ) external;\\r\\n\\r\\n    function getOrderProcessDetails(\\r\\n        string memory _user_id,\\r\\n        uint256 _property_id\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (FR_Library.Order_Process_Details_Struct memory);\\r\\n\\r\\n    function mintNFTs(\\r\\n        string memory _user_id,\\r\\n        uint256 nft_amount,\\r\\n        string memory nft_address\\r\\n    ) external;\\r\\n\\r\\n    function transferNFT(\\r\\n        string memory _user_id,\\r\\n        uint256 nft_amount,\\r\\n        string memory nft_address\\r\\n    ) external;\\r\\n\\r\\n    function transferCoin(\\r\\n        string memory _user_id,\\r\\n        uint256 coin_amount,\\r\\n        address coin_address\\r\\n    ) external;\\r\\n\\r\\n    function updateNFTDetailsToProperty(\\r\\n        uint256 _property_id,\\r\\n        string memory _ipfs,\\r\\n        uint256 _uri_index\\r\\n    ) external;\\r\\n\\r\\n    function updateUserWallet(string memory _user_id, address _wallet) external;\\r\\n\\r\\n    function getIsWhiteListed(string memory _uer_id) external view returns(bool);\\r\\n\\r\\n    function getUsers(\\r\\n        string memory _user_id\\r\\n    ) external view returns (FR_Library.User_Struct memory);\\r\\n\\r\\n    function getMintProcessInfo(\\r\\n        uint256 _property_id,\\r\\n        address _sender\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (FR_Library.Mint_Details_Struct memory _mint_details_struct);\\r\\n\\r\\n    function updateUserHoldings(\\r\\n        string memory _user_id,\\r\\n        uint256 _property_id,\\r\\n        FR_Library.User_Holdings_Struct memory _user_holdings\\r\\n    ) external;\\r\\n\\r\\n    function getTopUpFiatToCryptoPaymentInfo(\\r\\n        string memory _user_id,\\r\\n        string memory _fiat_currency,\\r\\n        string memory _crypto_currency\\r\\n    ) external view returns (FR_Library.TopUpFiatToCryptoPaymentInfo memory);\\r\\n\\r\\n    function creditTransfer(uint256 amount, address to, IERC20 token) external;\\r\\n\\r\\n    function debitTransfer(uint256 amount, address from, IERC20 token) external;\\r\\n\\r\\n    function setExchangeRateFiatToCrypto(\\r\\n        string memory _fiat_currency,\\r\\n        string memory _crypto_currency,\\r\\n        uint256 _new_rate\\r\\n    ) external;\\r\\n\\r\\n    function exchangeRateFiatToCrypto(\\r\\n        string memory _fiat_currency,\\r\\n        string memory _crypto_currency\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function getWithdrawFiatToCryptoPaymentInfo(\\r\\n        address _sender,\\r\\n        string memory _fiat_currency,\\r\\n        string memory _crypto_currency\\r\\n    ) external view returns (FR_Library.WithdrawFiatToCryptoPaymentInfo memory);\\r\\n\\r\\n    function setTreasury(address _treasury) external;\\r\\n\\r\\n    function setCryptoAddress(\\r\\n        string memory _crypto_name,\\r\\n        address _crypto_address\\r\\n    ) external;\\r\\n\\r\\n    function getCryptoToCryptoPaymentInfo(\\r\\n        string memory _user_id,\\r\\n        address _from_currency,\\r\\n        address _to_currency\\r\\n    ) external view returns (FR_Library.CryptoToCryptoPaymentInfo memory);\\r\\n\\r\\n    function disableUser(string memory _user_id) external;\\r\\n\\r\\n    function enableUser(string memory _user_id) external;\\r\\n\\r\\n    function setExchangeLiquidityCryptoToCrypto(\\r\\n        address _from_currency,\\r\\n        address _to_currency,\\r\\n        address _liquidity_address\\r\\n    ) external;\\r\\n\\r\\n    function getPrimaryShareDetails(\\r\\n        uint256 _order_id\\r\\n    ) external view returns (FR_Library.Order_Share_Details_Struct[] memory);\\r\\n\\r\\n    function getPrimaryOrders(\\r\\n        uint256 _order_id\\r\\n    ) external view returns (FR_Library.Orders_Struct memory);\\r\\n}\\r\\n\"},\"FR_IDataContractV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./FR_Library.sol\\\";\\n\\ninterface FR_IDataContractV2 {\\n    function initiaize(address _data_contract) external;\\n\\n    function setInvoiceAttributes(\\n        uint256 _property_id,\\n        string memory _sale_type,\\n        string memory _trade_type,\\n        FR_Library.InvoiceAttributeItemStruct[] memory _invoiceAttributeItems\\n    ) external;\\n\\n    function getInvoiceAttributeItems(\\n        uint256 _property_id,\\n        string memory _sale_type,\\n        string memory _trade_type\\n    ) external view returns (FR_Library.InvoiceAttributesStruct[] memory);\\n\\n    function getLatestInvoiceAttributeItems(\\n        uint256 _property_id,\\n        string memory _sale_type,\\n        string memory _trade_type\\n    ) external view returns (FR_Library.InvoiceAttributesStruct memory);\\n\\n    function setPropertyIDbyTokenID(\\n        uint256 _tokenID,\\n        uint256 _propertyID\\n    ) external;\\n\\n    function getPropertyIDbyTokenID(\\n        uint256 _tokenID\\n    ) external view returns (uint256);\\n\\n    function getMatchOrderNodeByPrice(\\n        uint256 _property_id,\\n        string memory _type,\\n        uint256 _price\\n    ) external view returns (uint256);\\n\\n    function getOrderDetailsNodeByOrderId(\\n        uint256 _property_id,\\n        string memory _type,\\n        uint256 _node_id,\\n        uint256 _order_id\\n    ) external view returns (uint256);\\n\\n    function getMatchOrderInfo(\\n        uint256 _property_id,\\n        string memory _type,\\n        uint256 _node_id\\n    ) external view returns (FR_Library.Match_Info_Struct memory);\\n\\n    function addMatchOrderInfo(uint256 _property_id, string memory _type, FR_Library.Match_Info_Struct memory _new_match_amount_node) external ;\\n    function addMatchOrderDetailsOnlyInfo(uint256 _property_id, string memory _type, uint256 _node_id, FR_Library.Match_Order_Info_Struct memory _new_order_details_node) external ;\\n    function updateBuyOrSellOrder(uint256 _property_id, string memory _type, uint256 _price, uint256 _amount_node_id, FR_Library.UpdateOrderDetailsStruct[] memory) external;\\n}   \\n\"},\"FR_IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./FR_Library.sol\\\";\\r\\n\\r\\ninterface FR_IERC1155 {\\r\\n\\r\\n    function setIDataContractFR(address _iDataContract) external ;\\r\\n    function getURIByTokenId(uint256 _tokenId) external view returns (string memory) ;\\r\\n\\r\\n    function getTokenIdByURI(\\r\\n        string memory _uri_string\\r\\n    ) external view returns (uint256) ;\\r\\n\\r\\n    function balanceOf(\\r\\n        address account,\\r\\n        uint256 id\\r\\n    ) external view returns (uint256) ;\\r\\n    function balanceOfBatch(\\r\\n        address[] memory accounts,\\r\\n        uint256[] memory ids\\r\\n    ) external view returns (uint256[] memory) ;\\r\\n    function setApprovalForAll(\\r\\n        address operator,\\r\\n        bool approved\\r\\n    ) external ;\\r\\n    function isApprovedForAll(\\r\\n        address account,\\r\\n        address operator\\r\\n    ) external view returns (bool) ;\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 id,\\r\\n        uint256 amount,\\r\\n        bytes memory data\\r\\n    ) external ;\\r\\n\\r\\n    /**\\r\\n     * @dev See ;IERC1155-safeBatchTransferFrom}.\\r\\n     */\\r\\n    function safeBatchTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory amounts,\\r\\n        bytes memory data\\r\\n    ) external ;\\r\\n\\r\\n    function addURI(string memory new_uri) external ;\\r\\n    function mint(\\r\\n        address account,\\r\\n        uint256 id,\\r\\n        uint256 amount,\\r\\n        bytes memory data\\r\\n    ) external ;\\r\\n\\r\\n\\r\\n}\"},\"FR_IIDGenerator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface FR_IIDGeneretor {\\n    function setIDataContractFR(address _dataContractFR) external;\\n    function setFRIdInitialValue(string memory _id_name, uint256 _value) external;\\n    function setSecondaryAmountNodeIdInitialValue(string memory _type, uint256 _property_id, uint256 _value) external;\\n    function setSecondaryOrderNodeIdInitialValue(string memory _type, uint256 _property_id, uint256 _amount_node_id, uint256 _value) external;\\n    function generateNewId(string memory _id_name) external returns (uint256);\\n    function generateSecondaryAmountNodeId(string memory _type, uint256 _property_id) external returns (uint256);\\n    function generateSecondaryOrderIdNodeId(string memory _type, uint256 _property_id, uint256 _amount_node_id) external returns (uint256);\\n}\\n\"},\"FR_Library.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary FR_Library {\\r\\n    struct Properties_Struct {\\r\\n        string propertyName;\\r\\n        uint256 listingDate;\\r\\n        uint256 totalShares;\\r\\n        uint256 soldShares;\\r\\n        uint256 limitPerShare;\\r\\n        string debitCurrency;\\r\\n        string ipfsUri;\\r\\n        uint256 tokenId;\\r\\n        uint256 lastUpdated;\\r\\n    }\\r\\n    struct Property_Price_Struct {\\r\\n        // uint256 propertyPrice;\\r\\n        uint256 pricePerShare;\\r\\n        // uint256 propertyDiscount;\\r\\n        uint256 lastUpdated;\\r\\n    }\\r\\n    struct Property_Status_Struct {\\r\\n        string saleStatus;\\r\\n        string SPVStatus;\\r\\n        string NFTStatus;\\r\\n        string resaleStatus;\\r\\n        uint256 lastUpdated;\\r\\n    }\\r\\n\\r\\n    struct User_Struct {\\r\\n        address wallet;\\r\\n        uint256[] ownedPropertyIDs;\\r\\n        uint256[] orderIds;\\r\\n        uint256[] activeOrderIDs;\\r\\n        bool isDisabled;\\r\\n    }\\r\\n    struct User_Holdings_Struct {\\r\\n        uint256 numberOfShares;\\r\\n        uint256 numberOfMintedShares;\\r\\n    }\\r\\n\\r\\n    struct Orders_Struct {\\r\\n        string userId;\\r\\n        uint256 propertyId;\\r\\n        uint256 orderDate;\\r\\n        string orderType;\\r\\n        string saleType;\\r\\n        string orderStatus;\\r\\n        InvoiceAttributeItemStruct[] invoiceAttribute;\\r\\n        uint256 lastUpdated;\\r\\n    }\\r\\n\\r\\n    struct Order_Share_Details_Struct {\\r\\n        uint256 price;\\r\\n        uint256 totalShares;\\r\\n        uint256 executedShares;\\r\\n        uint256[] matchIds;\\r\\n    }\\r\\n\\r\\n    struct Match_Order_Info_Struct {\\r\\n        uint256 quantity;\\r\\n        uint256 orderId;\\r\\n        uint256 lastUpdated;\\r\\n        uint256 prevNodeId;\\r\\n        uint256 currentNodeId;\\r\\n        uint256 nextNodeId;\\r\\n    }\\r\\n\\r\\n    struct Match_Info_Struct {\\r\\n        uint256 price;\\r\\n        uint256 totalQuantity;\\r\\n        uint256 totalOrders;\\r\\n        Match_Order_Info_Struct[] matchOrderInfo;\\r\\n        uint256 prevNodeId;\\r\\n        uint256 currentNodeId;\\r\\n        uint256 nextNodeId;\\r\\n    }\\r\\n\\r\\n    struct Matched_Transfers_Struct {\\r\\n        uint256 quantity;\\r\\n        uint256 price;\\r\\n        uint256 orderID;\\r\\n        uint256 buyerID;\\r\\n        uint256 sellerID;\\r\\n        uint256 transferDate;\\r\\n    }\\r\\n\\r\\n    struct Order_Process_Details_Struct {\\r\\n        bool isWhiteListed;\\r\\n        User_Holdings_Struct userHolidings;\\r\\n        uint256 limitPerShare;\\r\\n        uint256 avaiablePropertyShares;\\r\\n        uint256 pricePerShare;\\r\\n        User_Struct userStruct;\\r\\n        Property_Status_Struct propertyStatus;\\r\\n        address propertyToken;\\r\\n        uint256 propertyListingDate;\\r\\n    }\\r\\n\\r\\n    struct Mint_Details_Struct {\\r\\n        string userId;\\r\\n        bool userStatus;\\r\\n        bool isWhiteListed;\\r\\n        uint256 tokenId;\\r\\n        User_Holdings_Struct userHoldings;\\r\\n    }\\r\\n\\r\\n    struct TopUpFiatToCryptoPaymentInfo {\\r\\n        User_Struct userInfo;\\r\\n        address treasury;\\r\\n        bool isWhiteListed;\\r\\n        // uint256 exchangeRate;\\r\\n        address creditToken;\\r\\n    }\\r\\n\\r\\n    struct CryptoToCryptoPaymentInfo {\\r\\n        User_Struct userInfo;\\r\\n        address treasury;\\r\\n        bool isWhiteListed;\\r\\n        string fromCurrency;\\r\\n        string toCurrency;\\r\\n        // address liquidityAddress;\\r\\n    }\\r\\n\\r\\n    struct WithdrawFiatToCryptoPaymentInfo {\\r\\n        string userId;\\r\\n        User_Struct userInfo;\\r\\n        address treasury;\\r\\n        bool isWhiteListed;\\r\\n        // uint256 exchangeRate;\\r\\n        address debitToken;\\r\\n    }\\r\\n\\r\\n    struct ValidateBuyPrimaryOrderStruct {\\r\\n        string userId;\\r\\n        uint256 propertyId;\\r\\n        uint256 orderPricePerShare;\\r\\n        uint256 orderNumberOfShares;\\r\\n        bool isPartCrypto;\\r\\n        uint256 isPartCryptoAmount;\\r\\n    }\\r\\n\\r\\n    struct ValidateBuyPrimaryOrderCryptoStruct {\\r\\n        string userId;\\r\\n        uint256 propertyId;\\r\\n        uint256 orderPricePerShare;\\r\\n        uint256 orderNumberOfShares;\\r\\n        bool isPartCrypto;\\r\\n        uint256 isPartCryptoAmount;\\r\\n    }\\r\\n\\r\\n    struct ValidateSecondaryOrderCryptoStruct {\\r\\n        string userId;\\r\\n        address userAddress;\\r\\n        uint256 propertyId;\\r\\n        string orderType;\\r\\n        uint256 pricePerShare;\\r\\n        uint256 numberOfShares;\\r\\n        bool isPartCrypto;\\r\\n        uint256 isPartCryptoAmount;\\r\\n    }\\r\\n\\r\\n\\r\\n    struct InvoiceAttributeItemStruct {\\r\\n        string invoiceName;\\r\\n        uint256 invoicePrice;\\r\\n        bool isPercentage;\\r\\n        address wallet;\\r\\n        string bankAccount;\\r\\n    }\\r\\n\\r\\n    struct InvoiceAttributesStruct {\\r\\n        InvoiceAttributeItemStruct[] invoiceAttributeItems;\\r\\n        uint256 lastUpdated;\\r\\n    }\\r\\n\\r\\n    struct addPropertyInvoiceStruct {\\r\\n        string saleType;\\r\\n        string tradeType;\\r\\n        InvoiceAttributeItemStruct[] invoiceAttributeItems;\\r\\n    }\\r\\n\\r\\n    struct updatePropertyInvoiceStruct {\\r\\n        bool isInvoiceChanged;\\r\\n        string saleType;\\r\\n        string tradeType;\\r\\n        InvoiceAttributeItemStruct[] invoiceAttributeItems;\\r\\n    }\\r\\n\\r\\n    struct UpdateOrderDetailsStruct{\\r\\n        uint256 orderId;\\r\\n        uint256 quantity;\\r\\n    }\\r\\n\\r\\n    //**************************Handy Function************//\\r\\n    function compareStrings(\\r\\n        string memory a,\\r\\n        string memory b\\r\\n    ) public pure returns (bool) {\\r\\n        return (keccak256(abi.encodePacked(a)) ==\\r\\n            keccak256(abi.encodePacked(b)));\\r\\n    }\\r\\n\\r\\n    function isPropertyEmpty(\\r\\n        Properties_Struct memory _property\\r\\n    ) internal pure returns (bool) {\\r\\n        Properties_Struct memory emptyStruct = Properties_Struct(\\r\\n            \\\"\\\",\\r\\n            0,\\r\\n            0,\\r\\n            0,\\r\\n            0,\\r\\n            \\\"\\\",\\r\\n            \\\"\\\",\\r\\n            0,\\r\\n            0\\r\\n        );\\r\\n        if (\\r\\n            emptyStruct.listingDate == _property.listingDate \\u0026\\u0026\\r\\n            compareStrings(emptyStruct.ipfsUri, _property.ipfsUri) \\u0026\\u0026\\r\\n            compareStrings(\\r\\n                emptyStruct.debitCurrency,\\r\\n                _property.debitCurrency\\r\\n            ) \\u0026\\u0026\\r\\n            compareStrings(emptyStruct.propertyName, _property.propertyName) \\u0026\\u0026\\r\\n            emptyStruct.totalShares == _property.totalShares \\u0026\\u0026\\r\\n            emptyStruct.soldShares == _property.soldShares \\u0026\\u0026\\r\\n            emptyStruct.limitPerShare == _property.limitPerShare \\u0026\\u0026\\r\\n            emptyStruct.lastUpdated == _property.lastUpdated\\r\\n        ) {\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function min(uint256 a, uint256 b) public pure returns (uint256) {\\r\\n        return a \\u003c b ? a : b;\\r\\n    }\\r\\n\\r\\n    function max(uint256 a, uint256 b) public pure returns (uint256) {\\r\\n        return a \\u003e b ? a : b;\\r\\n    }\\r\\n\\r\\n    //********************ARRAY UTILS********************//\\r\\n\\r\\n    function contains(\\r\\n        uint256[] memory arr,\\r\\n        uint256 element\\r\\n    ) internal pure returns (bool) {\\r\\n        for (uint256 i = 0; i \\u003c arr.length; i++) {\\r\\n            if (arr[i] == element) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function put(\\r\\n        uint256[] memory array,\\r\\n        uint256 element\\r\\n    ) internal pure returns (uint256[] memory) {\\r\\n        uint256 newLength = array.length + 1;\\r\\n        uint256[] memory newArray = new uint256[](newLength);\\r\\n        for (uint i = 0; i \\u003c array.length; i++) {\\r\\n            newArray[i] = array[i];\\r\\n        }\\r\\n        newArray[newLength - 1] = element;\\r\\n        return newArray;\\r\\n    }\\r\\n}\\r\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler\\u0027s built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c \\u003c a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b \\u003e a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n            // benefit is lost if \\u0027b\\u0027 is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003c= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003e 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003e 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dataContractFR\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dataContractV2FR\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_idGenertorContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_erc1155FR\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_event_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_call_ref_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_user_id\",\"type\":\"string\"}],\"name\":\"AddKYCWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_event_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_call_ref_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_property_id\",\"type\":\"uint256\"}],\"name\":\"AddProperty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_event_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_call_ref_id\",\"type\":\"uint256\"}],\"name\":\"CreatePropertyNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_event_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_call_ref_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_property_id\",\"type\":\"uint256\"}],\"name\":\"UpdatePropertyDetails\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_event_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_call_ref_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_property_id\",\"type\":\"uint256\"}],\"name\":\"UpdatePropertyNFTStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_event_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_call_ref_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_property_id\",\"type\":\"uint256\"}],\"name\":\"UpdatePropertyPriceDetails\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_event_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_call_ref_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_property_id\",\"type\":\"uint256\"}],\"name\":\"UpdatePropertyResaleStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_event_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_call_ref_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_property_id\",\"type\":\"uint256\"}],\"name\":\"UpdatePropertySPVStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_event_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_call_ref_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_property_id\",\"type\":\"uint256\"}],\"name\":\"UpdatePropertySaleStatus\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_call_ref_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_user_id\",\"type\":\"string\"}],\"name\":\"addKYCWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_call_ref_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_property_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_listing_date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_number_of_shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit_per_share\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price_per_share\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_debit_currency\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"saleType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tradeType\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"invoiceName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"invoicePrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPercentage\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bankAccount\",\"type\":\"string\"}],\"internalType\":\"struct FR_Library.InvoiceAttributeItemStruct[]\",\"name\":\"invoiceAttributeItems\",\"type\":\"tuple[]\"}],\"internalType\":\"struct FR_Library.addPropertyInvoiceStruct[]\",\"name\":\"_invoiceItems\",\"type\":\"tuple[]\"}],\"name\":\"addProperty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_call_ref_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_property_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfs\",\"type\":\"string\"}],\"name\":\"commitAndIssueNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_user_id\",\"type\":\"string\"}],\"name\":\"disableUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_user_id\",\"type\":\"string\"}],\"name\":\"enableUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userName\",\"type\":\"string\"}],\"name\":\"generateUserId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iDataContractFR\",\"outputs\":[{\"internalType\":\"contract FR_IDataContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iDataContractV2FR\",\"outputs\":[{\"internalType\":\"contract FR_IDataContractV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iERC1155FR\",\"outputs\":[{\"internalType\":\"contract FR_IERC1155\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iIDGeneretorFR\",\"outputs\":[{\"internalType\":\"contract FR_IIDGeneretor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_crypto_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_crypto_address\",\"type\":\"address\"}],\"name\":\"setCryptoAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from_currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to_currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidity_address\",\"type\":\"address\"}],\"name\":\"setExchangeLiquidityCryptoToCrypto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_fiat_currency\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_crypto_currency\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_new_rate\",\"type\":\"uint256\"}],\"name\":\"setExchangeRateFiatToCrypto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dataContract\",\"type\":\"address\"}],\"name\":\"setIDataContractFR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dataContract_v2\",\"type\":\"address\"}],\"name\":\"setIDataContractV2FR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc1155FR\",\"type\":\"address\"}],\"name\":\"setIERC1155FR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_idGenertorContract\",\"type\":\"address\"}],\"name\":\"setIIDGeneretorFR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_property_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_sale_type\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_trade_type\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"invoiceName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"invoicePrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPercentage\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bankAccount\",\"type\":\"string\"}],\"internalType\":\"struct FR_Library.InvoiceAttributeItemStruct[]\",\"name\":\"_invoiceAttributeItems\",\"type\":\"tuple[]\"}],\"name\":\"setInvoiceAttributes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_treasury_address\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_call_ref_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_property_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_property_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_listing_date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit_per_share\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_debit_currency\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_is_price_update\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_price_per_share\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isInvoiceChanged\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"saleType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tradeType\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"invoiceName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"invoicePrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPercentage\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bankAccount\",\"type\":\"string\"}],\"internalType\":\"struct FR_Library.InvoiceAttributeItemStruct[]\",\"name\":\"invoiceAttributeItems\",\"type\":\"tuple[]\"}],\"internalType\":\"struct FR_Library.updatePropertyInvoiceStruct[]\",\"name\":\"_invoiceItems\",\"type\":\"tuple[]\"}],\"name\":\"updatePropertyDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_call_ref_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_property_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price_per_share\",\"type\":\"uint256\"}],\"name\":\"updatePropertyPriceDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_call_ref_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_property_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_resale_status\",\"type\":\"string\"}],\"name\":\"updatePropertyResaleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_call_ref_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_property_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_spv_status\",\"type\":\"string\"}],\"name\":\"updatePropertySPVStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_call_ref_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_property_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_sale_status\",\"type\":\"string\"}],\"name\":\"updatePropertySaleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfShare\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"validateERC1155Transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FR_AdminContract", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000002912a80c6ef4f49b845a4a596146afd694d9e9b000000000000000000000000b8d9893cb13cd8fea8b16b7c97c8fd8d38c433e000000000000000000000000031180eb8c8bda70c954b1f50ebb51e658397f3640000000000000000000000000740df95ed420c913abde9d62810622a47e88d9a", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9fa6ebd617874a66ff0b28c6b534ee3451783340d2df3b40568d63ba20d9eab6"}