{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Exchange.sol\": {\r\n      \"content\": \"/**\\n *Submitted for verification at PolygonScan.com on 2023-06-07\\n*/\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n}\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\ninterface ERC721 {\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n}\\n\\ninterface ERC1155 {\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface ERC20 {\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) external returns (bool);\\n\\n    function withdraw(uint256 wad) external;\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n}\\n\\ninterface Distributor {\\n    function addFee(address[2] calldata addr, uint256 fee) external;\\n}\\n\\ncontract Exchange is Ownable {\\n    bytes32 public immutable EIP712_DOMAIN_TYPEHASH;\\n    mapping(address => uint256) public nonces; // all nonces other then this nonce\\n    mapping(bytes32 => uint256) public filled;\\n\\n    ERC20 WETH = ERC20(0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619);\\n\\n    struct Order {\\n        address collection; // NFT contract address\\n        uint256 tokenId; // order for which tokenId of the collection\\n        address signer; // maker of order address\\n        uint256 orderType; // 0 if selling nft for eth , 1 if offering weth for nft,2 if offering weth for collection with special criteria root\\n        uint256 totalAmt; // price value of the trade // total amt maker is willing to give up per unit of amount\\n        Payment exchange; // payment agreed by maker of the order to pay on succesful filling of trade this amt is subtracted from totalamt\\n        Payment prePayment; // another payment , can be used for royalty, facilating trades\\n        bool isERC721; // standard of the collection , if 721 then true , if 1155 then false\\n        uint256 tokenAmt; // token amt useful if standard is 1155 if >1 means whole order can be filled tokenAmt times\\n        uint256 refererrAmt; // amt to pay to the address that helps in filling your order\\n        bytes32 root; // A merkle root derived from each valid tokenId \u2014 set to 0 to indicate a collection-level or tokenId-specific order.\\n        address reservedAddress; // if not address(0) , only this address can fill the order\\n        uint256 nonce; // nonce of order usefull for cancelling in bulk\\n        uint256 deadline; // timestamp till order is valid epoch timestamp in secs\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    struct Payment {\\n        uint256 paymentAmt;\\n        address paymentAddress;\\n    }\\n\\n    address public governance;\\n\\n    Distributor public distributor;\\n    address public pendingDistributor;\\n    uint256 public distributorEnableDate;\\n\\n    // events\\n    event NonceIncremented(address indexed maker, uint256 newNonce);\\n\\n    event OrderFilled(\\n        address indexed maker,\\n        address indexed taker,\\n        uint256 indexed orderType,\\n        bytes32 orderHash,\\n        uint256 price,\\n        uint256 tokenId\\n    );\\n\\n    event OrderCancelled(bytes32 indexed orderHash);\\n\\n    /// @param _governance Address of the governance, responsible for setting distributor\\n    constructor(address _governance) {\\n        // sets governance as owner\\n        _transferOwnership(_governance);\\n\\n        EIP712_DOMAIN_TYPEHASH = keccak256(\\n            abi.encode(\\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\n                keccak256(bytes('AUREM.IO')),\\n                keccak256(bytes('1')),\\n                137,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function hashPayment(Payment calldata p) private pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256('payment(uint256 paymentAmt,address paymentAddress)'),\\n                    p.paymentAmt,\\n                    p.paymentAddress\\n                )\\n            );\\n    }\\n\\n    function _hashOrder(Order calldata o) private pure returns (bytes32) {\\n        return _hashOrderinternal(o, [o.nonce, o.deadline]);\\n    }\\n\\n    function _hashOrderinternal(Order calldata o, uint256[2] memory extra) private pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        'order(address collection,uint256 tokenId,address signer,uint256 orderType,uint256 totalAmt,payment exchange,payment prePayment,bool isERC721,uint256 tokenAmt,uint256 refererrAmt,bytes32 root,address reservedAddress,uint256 nonce,uint256 deadline)payment(uint256 paymentAmt,address paymentAddress)'\\n                    ),\\n                    o.collection,\\n                    o.tokenId,\\n                    o.signer,\\n                    o.orderType,\\n                    o.totalAmt,\\n                    hashPayment(o.exchange),\\n                    hashPayment(o.prePayment),\\n                    o.isERC721,\\n                    o.tokenAmt,\\n                    o.refererrAmt,\\n                    o.root,\\n                    o.reservedAddress,\\n                    extra\\n                )\\n            );\\n    }\\n\\n    function payEther(uint256 payAmt, address payAddress) internal {\\n        if (payAmt > 0) {\\n            // if royalty has to be paid\\n            payable(payAddress).transfer(payAmt); // royalty transfer to royaltyaddress\\n        }\\n    }\\n\\n    /// @dev Validates Order and returns OrderStatus, hashedorder, amountRemaining to be filled\\n    ///      OrderStatus = 0 , if signature is invalid\\n    ///      OrderStatus = 1 , if deadline has been\\n    ///      OrderStatus = 2 , order is filled or cancelled\\n    ///      OrderStatus = 3 , valid order\\n    /// @param o the Order struct to be validated\\n    function validateOrder(Order calldata o)\\n        public\\n        view\\n        returns (\\n            uint256,\\n            bytes32,\\n            uint256\\n        )\\n    {\\n        // match signature\\n        bytes32 hashStruct = _hashOrder(o);\\n        bytes32 hash = keccak256(abi.encodePacked('\\\\x19\\\\x01', EIP712_DOMAIN_TYPEHASH, hashStruct));\\n        address signaturesigner = ecrecover(hash, o.v, o.r, o.s);\\n        require(signaturesigner == o.signer, 'invalid signature');\\n        if (signaturesigner != o.signer) {\\n            return (0, hashStruct, 0);\\n        }\\n        //deadline\\n        if (block.timestamp > o.deadline) {\\n            return (1, hashStruct, 0);\\n        }\\n        // not cancelled by nonce or by hash\\n        if (o.nonce != nonces[o.signer]) {\\n            return (2, hashStruct, 0);\\n        }\\n        if (filled[hashStruct] >= o.tokenAmt) {\\n            // handles erc1155\\n            return (2, hashStruct, 0);\\n        }\\n        return (3, hashStruct, o.tokenAmt - filled[hashStruct]);\\n    }\\n\\n    /// @dev function to fill a signed order of ordertype 0, also has a payment param in case the taker wants\\n    ///      to send ether to that address on filling the order\\n    /// @param o the Order struct to be filled must be orderType 0\\n    /// @param amount the amount of times the order is to be filled(useful for ERC1155)\\n    /// @param referrer referrer of the order\\n    /// @param p any extra payment that the taker of this order wanna send on succesful execution of order\\n    function fillAsk(\\n        Order calldata o,\\n        uint256 amount,\\n        address referrer,\\n        Payment calldata p\\n    ) public payable {\\n        // check if the signed total amount has all the amounts as well as 50 basis points fee\\n        require(\\n            o.totalAmt >= o.exchange.paymentAmt + o.prePayment.paymentAmt + o.refererrAmt,\\n            'amt not matching'\\n        );\\n\\n        // attached ETH value should be greater than total value of one NFT * total number of NFTs + any extra payment to be given\\n        require(msg.value >= o.totalAmt * amount + p.paymentAmt, 'mgmtm');\\n\\n        if (o.reservedAddress != address(0)) {\\n            require(msg.sender == o.reservedAddress);\\n        }\\n        require(o.orderType == 0, 'invalid orderType');\\n\\n        (uint256 status, bytes32 hashStruct, uint256 amountRemaining) = validateOrder(o);\\n\\n        require(status == 3, 'order not valid');\\n        require(amountRemaining >= amount, 'order already filled');\\n\\n        filled[hashStruct] = filled[hashStruct] + amount;\\n\\n        if (o.isERC721) {\\n            require(amount == 1, 'only 1 erc721 at 1 time');\\n            ERC721(o.collection).transferFrom(o.signer, msg.sender, o.tokenId);\\n        } else {\\n            ERC1155(o.collection).safeTransferFrom(o.signer, msg.sender, o.tokenId, amount, '');\\n        }\\n\\n        // pay fees of 50 basis points to the distributor\\n        // payEther(((o.totalAmt * 0) / 10000) * amount, address(distributor));\\n\\n        // pay the exchange share\\n        payEther(o.exchange.paymentAmt * amount, o.exchange.paymentAddress);\\n\\n        // pay the pre payment\\n        payEther(o.prePayment.paymentAmt * amount, o.prePayment.paymentAddress);\\n\\n        if (o.refererrAmt > 0 && referrer != address(0)) {\\n            payEther(o.refererrAmt * amount, referrer);\\n            payEther(\\n                (o.totalAmt -\\n                    o.exchange.paymentAmt -\\n                    o.prePayment.paymentAmt -\\n                    o.refererrAmt) * amount,\\n                o.signer\\n            );\\n        } else {\\n            payEther(\\n                (o.totalAmt - o.exchange.paymentAmt - o.prePayment.paymentAmt) * amount,\\n                o.signer\\n            );\\n        }\\n        payEther(p.paymentAmt, p.paymentAddress);\\n\\n        // distributor.addFee([o.signer, o.exchange.paymentAddress], ((o.totalAmt * 0) / 10000) * amount);\\n        emit OrderFilled(o.signer, msg.sender, 0, hashStruct, o.totalAmt * amount, o.tokenId);\\n    }\\n\\n    /// @dev function to fill a signed order of ordertype 1 also has a payment param in case the taker wants\\n    ///      to send ether to that address on filling the order\\n    /// @param o the Order struct to be filled must be orderType 1\\n    /// @param amount the amount of times the order is to be filled(useful for ERC1155)\\n    /// @param referrer referrer of the order\\n    /// @param p any extra payment that the taker of this order wanna send on succesful execution of order\\n    function fillBid(\\n        Order calldata o,\\n        uint256 amount,\\n        address referrer,\\n        Payment calldata p\\n    ) public  {\\n        require(\\n            o.totalAmt * amount >\\n                (o.exchange.paymentAmt + o.prePayment.paymentAmt + o.refererrAmt) * amount + p.paymentAmt\\n        ); // cause bidder eth is paying for seller payment p , dont take anything extra from seller\\n        // require eth amt is sufficient\\n        if (o.reservedAddress != address(0)) {\\n            require(msg.sender == o.reservedAddress);\\n        }\\n        require(o.orderType == 1);\\n        (uint256 status, bytes32 hashStruct, uint256 amountRemaining) = validateOrder(o);\\n        require(status == 3);\\n        require(amountRemaining >= amount);\\n        filled[hashStruct] = filled[hashStruct] + amount;\\n        if (o.isERC721) {\\n            require(amount == 1, 'only 1 erc721 at 1 time');\\n            ERC721 nftcontract = ERC721(o.collection);\\n            nftcontract.transferFrom(msg.sender, o.signer, o.tokenId);\\n        } else {\\n            ERC1155 nftcontract = ERC1155(o.collection);\\n            nftcontract.safeTransferFrom(msg.sender, o.signer, o.tokenId, amount, '');\\n        }\\n        emit OrderFilled(msg.sender, o.signer, 1, hashStruct, o.totalAmt * amount, o.tokenId);\\n        _settleBalances(o, amount, referrer, p);\\n    }\\n\\n    // cancel by nonce and by individual order\\n\\n    function cancelOrder(Order calldata o) public {\\n        require(o.signer == msg.sender);\\n        (, bytes32 hashStruct, ) = validateOrder(o);\\n        filled[hashStruct] = o.tokenAmt + 1;\\n        emit OrderCancelled(hashStruct);\\n    }\\n\\n    /**\\n     * Increment a particular maker's nonce, thereby invalidating all orders that were not signed\\n     * with the original nonce.\\n     */\\n    function incrementNonce() external {\\n        uint256 newNonce = ++nonces[msg.sender];\\n        emit NonceIncremented(msg.sender, newNonce);\\n    }\\n\\n    /// @dev function to fill a signed order of ordertype 2 also has a payment param in case the taker wants\\n    ///      to send ether to that address on filling the order, Match an criteria order, ensuring that the supplied proof demonstrates inclusion of the tokenId in the associated merkle root, if root is 0 then any token can be used to fill the order\\n    /// @param o the Order struct to be filled must be orderType 2\\n    /// @param amount the amount of times the order is to be filled(useful for ERC1155)\\n    /// @param referrer referrer of the order\\n    /// @param p any extra payment that the taker of this order wanna send on succesful execution of order\\n    function fillCriteriaBid(\\n        Order calldata o,\\n        uint256 amount,\\n        uint256 tokenId,\\n        bytes32[] calldata proof,\\n        address referrer,\\n        Payment calldata p\\n    ) public {\\n        require(o.totalAmt >= o.exchange.paymentAmt + o.prePayment.paymentAmt + o.refererrAmt);\\n        // require eth amt is sufficient\\n        if (o.reservedAddress != address(0)) {\\n            require(msg.sender == o.reservedAddress);\\n        }\\n        require(o.orderType == 2);\\n        (uint256 status, bytes32 hashStruct, uint256 amountRemaining) = validateOrder(o);\\n        require(status == 3);\\n        require(amountRemaining >= amount);\\n\\n        filled[hashStruct] = filled[hashStruct] + amount;\\n        // Proof verification is performed when there's a non-zero root.\\n        if (o.root != bytes32(0)) {\\n            _verifyProof(tokenId, o.root, proof);\\n        }\\n\\n        if (o.isERC721) {\\n            require(amount == 1, 'only 1 erc721 at 1 time');\\n            ERC721 nftcontract = ERC721(o.collection);\\n            nftcontract.transferFrom(msg.sender, o.signer, tokenId);\\n        } else {\\n            ERC1155 nftcontract = ERC1155(o.collection);\\n            nftcontract.safeTransferFrom(msg.sender, o.signer, tokenId, amount, '');\\n        }\\n        emit OrderFilled(msg.sender, o.signer, 2, hashStruct, o.totalAmt * amount, tokenId);\\n        _settleBalances(o, amount, referrer, p);\\n    }\\n    \\n\\n    /// @dev function to settle balances when a bid is filled succesfully\\n    /// @param o the Order struct to be filled must be orderType 1\\n    /// @param amount the amount of times the order is to be filled(useful for ERC1155)\\n    /// @param referrer referrer of the order\\n    /// @param p any extra payment that the taker of this order wanna send on succesful execution of order\\n    function _settleBalances(\\n        Order calldata o,\\n        uint256 amount,\\n        address referrer,\\n        Payment calldata p\\n    ) internal {\\n        // uint256 protocolfee = ((o.totalAmt * 0) / 10000) * amount;\\n        // uint256 protocolfee = 0;\\n        // withdrawing selected amount to the contract \\n        WETH.transferFrom(o.signer, address(this), o.totalAmt * amount);\\n        // paying exchange fees \\n        if(o.exchange.paymentAmt > 0){\\n            WETH.transfer(o.exchange.paymentAddress, o.exchange.paymentAmt * amount);\\n        }\\n        // paying prepayment\\n        if(o.prePayment.paymentAmt > 0){\\n            WETH.transfer(o.prePayment.paymentAddress, o.prePayment.paymentAmt * amount);\\n        }\\n        if (o.refererrAmt > 0 && referrer != address(0)) {\\n            // payEther(o.refererrAmt * amount, referrer);\\n            // paying referral\\n            WETH.transfer(referrer, o.refererrAmt);\\n            // paying sender\\n            WETH.transfer(msg.sender, (o.totalAmt - o.exchange.paymentAmt - o.prePayment.paymentAmt - o.refererrAmt) * amount - p.paymentAmt);\\n        } else {\\n            // paying sender\\n            WETH.transfer(msg.sender, (o.totalAmt - o.exchange.paymentAmt - o.prePayment.paymentAmt) * amount - p.paymentAmt);\\n           \\n        }\\n        if (p.paymentAmt > 0){\\n            // paying post payments\\n            WETH.transfer(p.paymentAddress, p.paymentAmt);\\n        }\\n        // distributor.addFee([msg.sender, o.exchange.paymentAddress], protocolfee);\\n    }\\n\\n    /// @dev Ensure that a given tokenId is contained within a supplied merkle root using a supplied proof.\\n    /// @param leaf The tokenId.\\n    /// @param root A merkle root derived from each valid tokenId.\\n    /// @param proof A proof that the supplied tokenId is contained within the associated merkle root.\\n    function _verifyProof(\\n        uint256 leaf,\\n        bytes32 root,\\n        bytes32[] memory proof\\n    ) public view {\\n        bytes32 computedHash = keccak256(abi.encode(leaf));\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        if (computedHash != root) {\\n            revert('invalid proof');\\n        }\\n    }\\n\\n    /// @dev Efficiently hash two bytes32 elements using memory scratch space.\\n    /// @param a The first element included in the hash.\\n    /// @param b The second element included in the hash.\\n    /// @return value The resultant hash of the two bytes32 elements.\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /// @notice Sets the distributor contract\\n    /// @param _distributor Address of the distributor\\n    function setDistributor(address _distributor) external onlyOwner {\\n        if (address(distributor) == address(0)) {\\n            distributor = Distributor(_distributor);\\n        } else {\\n            pendingDistributor = _distributor;\\n            distributorEnableDate = block.timestamp + 1 days;\\n        }\\n    }\\n\\n    /// @notice Executes the set distributor function after the timelock\\n    function executeSetDistributor() external onlyOwner {\\n        require(distributorEnableDate >= block.timestamp, 'not allowed');\\n        distributor = Distributor(pendingDistributor);\\n    }\\n\\n    fallback() external payable {}\\n\\n    receive() external payable {}\\n\\n\\n    /// helper function for batch actions\\n    function fillAskBatch(\\n        Order[] calldata orders,\\n        address referrer,\\n        Payment calldata p\\n    ) public payable {\\n        for (uint256 i = 0; i < orders.length; i++) {\\n            Order calldata order = orders[i];\\n            fillAsk(order, 1, referrer, p);\\n        }\\n    }\\n\\n    function fillBidBatch(\\n        Order[] calldata orders,\\n        address referrer,\\n        Payment calldata p\\n    ) public {\\n        for (uint256 i = 0; i < orders.length; i++) {\\n            Order calldata order = orders[i];\\n            fillBid(order, 1, referrer, p);\\n        }\\n    }\\n\\n    function cancelOrderBatch(\\n        Order[] calldata orders\\n    ) public {\\n        for (uint256 i = 0; i < orders.length; i++) {\\n            Order calldata order = orders[i];\\n            cancelOrder(order);\\n        }\\n    }\\n\\n    function fillCriteriaBidBatch(\\n        Order calldata o,\\n        uint256[] calldata tokenIds,\\n        bytes32[] calldata proof,\\n        address referrer,\\n        Payment calldata p\\n    ) public {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n            fillCriteriaBid(o, 1, tokenId, proof, referrer, p);\\n        }\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNonce\",\"type\":\"uint256\"}],\"name\":\"NonceIncremented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"OrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"OrderFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"EIP712_DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"leaf\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"_verifyProof\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"paymentAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentAddress\",\"type\":\"address\"}],\"internalType\":\"struct Exchange.Payment\",\"name\":\"exchange\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"paymentAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentAddress\",\"type\":\"address\"}],\"internalType\":\"struct Exchange.Payment\",\"name\":\"prePayment\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isERC721\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refererrAmt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"reservedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Exchange.Order\",\"name\":\"o\",\"type\":\"tuple\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"paymentAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentAddress\",\"type\":\"address\"}],\"internalType\":\"struct Exchange.Payment\",\"name\":\"exchange\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"paymentAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentAddress\",\"type\":\"address\"}],\"internalType\":\"struct Exchange.Payment\",\"name\":\"prePayment\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isERC721\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refererrAmt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"reservedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Exchange.Order[]\",\"name\":\"orders\",\"type\":\"tuple[]\"}],\"name\":\"cancelOrderBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract Distributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributorEnableDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeSetDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"paymentAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentAddress\",\"type\":\"address\"}],\"internalType\":\"struct Exchange.Payment\",\"name\":\"exchange\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"paymentAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentAddress\",\"type\":\"address\"}],\"internalType\":\"struct Exchange.Payment\",\"name\":\"prePayment\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isERC721\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refererrAmt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"reservedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Exchange.Order\",\"name\":\"o\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"paymentAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentAddress\",\"type\":\"address\"}],\"internalType\":\"struct Exchange.Payment\",\"name\":\"p\",\"type\":\"tuple\"}],\"name\":\"fillAsk\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"paymentAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentAddress\",\"type\":\"address\"}],\"internalType\":\"struct Exchange.Payment\",\"name\":\"exchange\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"paymentAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentAddress\",\"type\":\"address\"}],\"internalType\":\"struct Exchange.Payment\",\"name\":\"prePayment\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isERC721\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refererrAmt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"reservedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Exchange.Order[]\",\"name\":\"orders\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"paymentAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentAddress\",\"type\":\"address\"}],\"internalType\":\"struct Exchange.Payment\",\"name\":\"p\",\"type\":\"tuple\"}],\"name\":\"fillAskBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"paymentAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentAddress\",\"type\":\"address\"}],\"internalType\":\"struct Exchange.Payment\",\"name\":\"exchange\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"paymentAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentAddress\",\"type\":\"address\"}],\"internalType\":\"struct Exchange.Payment\",\"name\":\"prePayment\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isERC721\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refererrAmt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"reservedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Exchange.Order\",\"name\":\"o\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"paymentAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentAddress\",\"type\":\"address\"}],\"internalType\":\"struct Exchange.Payment\",\"name\":\"p\",\"type\":\"tuple\"}],\"name\":\"fillBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"paymentAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentAddress\",\"type\":\"address\"}],\"internalType\":\"struct Exchange.Payment\",\"name\":\"exchange\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"paymentAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentAddress\",\"type\":\"address\"}],\"internalType\":\"struct Exchange.Payment\",\"name\":\"prePayment\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isERC721\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refererrAmt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"reservedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Exchange.Order[]\",\"name\":\"orders\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"paymentAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentAddress\",\"type\":\"address\"}],\"internalType\":\"struct Exchange.Payment\",\"name\":\"p\",\"type\":\"tuple\"}],\"name\":\"fillBidBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"paymentAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentAddress\",\"type\":\"address\"}],\"internalType\":\"struct Exchange.Payment\",\"name\":\"exchange\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"paymentAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentAddress\",\"type\":\"address\"}],\"internalType\":\"struct Exchange.Payment\",\"name\":\"prePayment\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isERC721\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refererrAmt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"reservedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Exchange.Order\",\"name\":\"o\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"paymentAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentAddress\",\"type\":\"address\"}],\"internalType\":\"struct Exchange.Payment\",\"name\":\"p\",\"type\":\"tuple\"}],\"name\":\"fillCriteriaBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"paymentAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentAddress\",\"type\":\"address\"}],\"internalType\":\"struct Exchange.Payment\",\"name\":\"exchange\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"paymentAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentAddress\",\"type\":\"address\"}],\"internalType\":\"struct Exchange.Payment\",\"name\":\"prePayment\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isERC721\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refererrAmt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"reservedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Exchange.Order\",\"name\":\"o\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"paymentAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentAddress\",\"type\":\"address\"}],\"internalType\":\"struct Exchange.Payment\",\"name\":\"p\",\"type\":\"tuple\"}],\"name\":\"fillCriteriaBidBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"filled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incrementNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"}],\"name\":\"setDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"paymentAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentAddress\",\"type\":\"address\"}],\"internalType\":\"struct Exchange.Payment\",\"name\":\"exchange\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"paymentAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentAddress\",\"type\":\"address\"}],\"internalType\":\"struct Exchange.Payment\",\"name\":\"prePayment\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isERC721\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refererrAmt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"reservedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Exchange.Order\",\"name\":\"o\",\"type\":\"tuple\"}],\"name\":\"validateOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Exchange", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}