{"SourceCode": "// Sources flattened with hardhat v2.1.2 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.0.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.0.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/structs/EnumerableSet.sol@v4.0.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index)\r\n        private\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        require(\r\n            set._values.length > index,\r\n            \"EnumerableSet: index out of bounds\"\r\n        );\r\n        return set._values[index];\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n// File contracts/services/AutoTopUp.sol\r\n\r\npragma solidity 0.8.0;\r\n\r\ncontract AutoTopUp is Ownable {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    address payable public immutable gelato;\r\n\r\n    struct TopUpData {\r\n        uint256 amount;\r\n        uint256 balanceThreshold;\r\n    }\r\n\r\n    EnumerableSet.AddressSet internal _receivers;\r\n    mapping(address => bytes32) public hashes;\r\n    mapping(address => TopUpData) public receiverDetails;\r\n\r\n    event LogFundsDeposited(address indexed sender, uint256 amount);\r\n    event LogFundsWithdrawn(\r\n        address indexed sender,\r\n        uint256 amount,\r\n        address receiver\r\n    );\r\n    event LogTaskSubmitted(\r\n        address indexed receiver,\r\n        uint256 amount,\r\n        uint256 balanceThreshold\r\n    );\r\n    event LogTaskCancelled(address indexed receiver, bytes32 cancelledHash);\r\n\r\n    constructor(address payable _gelato) {\r\n        gelato = _gelato;\r\n    }\r\n\r\n    modifier gelatofy() {\r\n        require(msg.sender == gelato, \"AutoTopUp: Only gelato\");\r\n        _;\r\n    }\r\n\r\n    /// @notice deposit funds\r\n    receive() external payable {\r\n        emit LogFundsDeposited(msg.sender, msg.value);\r\n    }\r\n\r\n    /// @notice withdraw fuds\r\n    function withdraw(uint256 _amount, address payable _receiver)\r\n        external\r\n        onlyOwner\r\n    {\r\n        (bool success, ) = _receiver.call{value: _amount}(\"\");\r\n        require(success, \"AutoTopUp: exec: Receiver payment failed\");\r\n\r\n        emit LogFundsWithdrawn(msg.sender, _amount, _receiver);\r\n    }\r\n\r\n    /// @notice start an autopay\r\n    function startAutoPay(\r\n        address payable _receiver,\r\n        uint256 _amount,\r\n        uint256 _balanceThreshold\r\n    ) external payable onlyOwner {\r\n        require(\r\n            !_receivers.contains(_receiver),\r\n            \"AutoTopUp: startAutoPay: Receiver already assigned\"\r\n        );\r\n\r\n        require(\r\n            hashes[_receiver] == bytes32(0),\r\n            \"AutoTopUp: startAutoPay: Hash already assigned\"\r\n        );\r\n\r\n        _receivers.add(_receiver);\r\n\r\n        hashes[_receiver] = keccak256(abi.encode(_amount, _balanceThreshold));\r\n        receiverDetails[_receiver] = TopUpData({\r\n            amount: _amount,\r\n            balanceThreshold: _balanceThreshold\r\n        });\r\n\r\n        LogTaskSubmitted(_receiver, _amount, _balanceThreshold);\r\n    }\r\n\r\n    /// @notice stop an autopay\r\n    function stopAutoPay(address payable _receiver) external onlyOwner {\r\n        require(\r\n            _receivers.contains(_receiver),\r\n            \"AutoTopUp: stopAutoPay: Invalid Autopay\"\r\n        );\r\n\r\n        bytes32 storedHash = hashes[_receiver];\r\n\r\n        require(\r\n            storedHash != bytes32(0),\r\n            \"AutoTopUp: stopAutoPay: Hash not found\"\r\n        );\r\n\r\n        // store receiver\r\n        _receivers.remove(_receiver);\r\n\r\n        delete hashes[_receiver];\r\n        delete receiverDetails[_receiver];\r\n\r\n        LogTaskCancelled(_receiver, storedHash);\r\n    }\r\n\r\n    /// @dev entry point for gelato executiom\r\n    /// @notice overcharging is prevented on Gelato.sol\r\n    function exec(\r\n        address payable _receiver,\r\n        uint256 _amount,\r\n        uint256 _balanceThreshold,\r\n        uint256 _fee\r\n    ) external gelatofy {\r\n        require(\r\n            isScheduled(_receiver, _amount, _balanceThreshold),\r\n            \"AutoTopUp: exec: Hash invalid\"\r\n        );\r\n        require(\r\n            _receiver.balance <= _balanceThreshold,\r\n            \"AutoTopUp: exec: Balance not below threshold\"\r\n        );\r\n\r\n        bool success;\r\n        (success, ) = _receiver.call{value: _amount}(\"\");\r\n        require(success, \"AutoTopUp: exec: Receiver payment failed\");\r\n\r\n        (success, ) = gelato.call{value: _fee}(\"\");\r\n        require(success, \"AutoTopUp: exec: Receiver payment failed\");\r\n    }\r\n\r\n    /// @notice Get all receivers\r\n    /// @dev useful to query which autoPays to cancel\r\n    function getReceivers()\r\n        external\r\n        view\r\n        returns (address[] memory currentReceivers)\r\n    {\r\n        uint256 length = _receivers.length();\r\n        currentReceivers = new address[](length);\r\n        for (uint256 i; i < length; i++) currentReceivers[i] = _receivers.at(i);\r\n    }\r\n\r\n    function isScheduled(\r\n        address payable _receiver,\r\n        uint256 _amount,\r\n        uint256 _balanceThreshold\r\n    ) public view returns (bool) {\r\n        return\r\n            hashes[_receiver] ==\r\n            keccak256(abi.encode(_amount, _balanceThreshold));\r\n    }\r\n}\r\n\r\n// File contracts/services/AutoTopUpFactory.sol\r\n\r\npragma solidity 0.8.0;\r\n\r\ncontract AutoTopUpFactory is Ownable {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    mapping(address => AutoTopUp) public autoTopUpByOwner;\r\n    mapping(AutoTopUp => address) public ownerByAutoTopUp;\r\n\r\n    EnumerableSet.AddressSet internal _autoTopUps;\r\n\r\n    address payable public immutable gelato;\r\n\r\n    event LogContractDeployed(address indexed autoTopUp, address owner);\r\n\r\n    constructor(address payable _gelato) {\r\n        gelato = _gelato;\r\n    }\r\n\r\n    function withdraw(uint256 _amount, address payable _to) external onlyOwner {\r\n        (bool success, ) = _to.call{value: _amount}(\"\");\r\n        require(success, \"AutoTopUpFactory: withdraw: ETH transfer failed\");\r\n    }\r\n\r\n    function newAutoTopUp(\r\n        address payable[] calldata _receivers,\r\n        uint256[] calldata _amounts,\r\n        uint256[] calldata _balanceThresholds\r\n    ) external payable returns (AutoTopUp autoTopUp) {\r\n        require(\r\n            autoTopUpByOwner[msg.sender] == AutoTopUp(payable(address(0))),\r\n            \"AutoTopUpFactory: newAutoTopUp: Already created AutoTopUp\"\r\n        );\r\n        require(\r\n            _receivers.length == _amounts.length &&\r\n                _receivers.length == _balanceThresholds.length,\r\n            \"AutoTopUpFactory: newAutoTopUp: Input length mismatch\"\r\n        );\r\n\r\n        autoTopUp = new AutoTopUp(gelato);\r\n        for (uint256 i; i < _receivers.length; i++) {\r\n            autoTopUp.startAutoPay(\r\n                _receivers[i],\r\n                _amounts[i],\r\n                _balanceThresholds[i]\r\n            );\r\n        }\r\n\r\n        if (msg.value > 0) {\r\n            (bool success, ) =\r\n                payable(address(autoTopUp)).call{value: msg.value}(\"\");\r\n            require(\r\n                success,\r\n                \"AutoTopUpFactory: newAutoTopUp: ETH transfer failed\"\r\n            );\r\n        }\r\n\r\n        autoTopUp.transferOwnership(msg.sender);\r\n\r\n        autoTopUpByOwner[msg.sender] = autoTopUp;\r\n        ownerByAutoTopUp[autoTopUp] = msg.sender;\r\n        _autoTopUps.add(address(autoTopUp));\r\n\r\n        emit LogContractDeployed(address(autoTopUp), msg.sender);\r\n    }\r\n\r\n    /// @notice Get all autoTopUps\r\n    /// @dev useful to query which autoTopUps to cancel\r\n    function getAutoTopUps()\r\n        external\r\n        view\r\n        returns (address[] memory currentAutoTopUps)\r\n    {\r\n        uint256 length = _autoTopUps.length();\r\n        currentAutoTopUps = new address[](length);\r\n        for (uint256 i; i < length; i++)\r\n            currentAutoTopUps[i] = _autoTopUps.at(i);\r\n    }\r\n}\r\n", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_gelato\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoTopUp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogContractDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoTopUpByOwner\",\"outputs\":[{\"internalType\":\"contract AutoTopUp\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gelato\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAutoTopUps\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"currentAutoTopUps\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_balanceThresholds\",\"type\":\"uint256[]\"}],\"name\":\"newAutoTopUp\",\"outputs\":[{\"internalType\":\"contract AutoTopUp\",\"name\":\"autoTopUp\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AutoTopUp\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerByAutoTopUp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AutoTopUpFactory", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007598e84b2e114ab62cab288ce5f7d5f6bad35bba", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}