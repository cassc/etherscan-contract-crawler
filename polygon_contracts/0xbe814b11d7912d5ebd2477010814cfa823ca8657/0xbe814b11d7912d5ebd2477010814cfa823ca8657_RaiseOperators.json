{"SourceCode": "// Sources flattened with hardhat v2.4.0 https://hardhat.org\r\n\r\n// File openzeppelin-solidity/contracts/access/Roles.sol@v2.5.0\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n\r\n// File contracts/role/interface/IBaseOperators.sol\r\n\r\n/**\r\n * @title IBaseOperators\r\n * @notice Interface for BaseOperators contract\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\ninterface IBaseOperators {\r\n    function isOperator(address _account) external view returns (bool);\r\n\r\n    function isAdmin(address _account) external view returns (bool);\r\n\r\n    function isSystem(address _account) external view returns (bool);\r\n\r\n    function isRelay(address _account) external view returns (bool);\r\n\r\n    function isMultisig(address _contract) external view returns (bool);\r\n\r\n    function confirmFor(address _address) external;\r\n\r\n    function addOperator(address _account) external;\r\n\r\n    function removeOperator(address _account) external;\r\n\r\n    function addAdmin(address _account) external;\r\n\r\n    function removeAdmin(address _account) external;\r\n\r\n    function addSystem(address _account) external;\r\n\r\n    function removeSystem(address _account) external;\r\n\r\n    function addRelay(address _account) external;\r\n\r\n    function removeRelay(address _account) external;\r\n\r\n    function addOperatorAndAdmin(address _account) external;\r\n\r\n    function removeOperatorAndAdmin(address _account) external;\r\n}\r\n\r\n\r\n// File contracts/helpers/Initializable.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private initializing;\r\n\r\n    /**\r\n     * @dev Modifier to use in the initializer function of a contract.\r\n     */\r\n    modifier initializer() {\r\n        require(\r\n            initializing || isConstructor() || !initialized,\r\n            \"Initializable: Contract instance has already been initialized\"\r\n        );\r\n\r\n        bool isTopLevelCall = !initializing;\r\n        if (isTopLevelCall) {\r\n            initializing = true;\r\n            initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        uint256 cs;\r\n        // solhint-disable-next-line\r\n        assembly {\r\n            cs := extcodesize(address)\r\n        }\r\n        return cs == 0;\r\n    }\r\n\r\n    function isInitialized() public view returns (bool) {\r\n        return initialized;\r\n    }\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\n// File contracts/role/base/Operatorable.sol\r\n\r\n/**\r\n * @title Operatorable\r\n * @author Team 3301 <team3301@sygnum.com>\r\n * @dev Operatorable contract stores the BaseOperators contract address, and modifiers for\r\n *       contracts.\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\ncontract Operatorable is Initializable {\r\n    IBaseOperators internal operatorsInst;\r\n    address private operatorsPending;\r\n\r\n    event OperatorsContractChanged(address indexed caller, address indexed operatorsAddress);\r\n    event OperatorsContractPending(address indexed caller, address indexed operatorsAddress);\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have operator role associated.\r\n     */\r\n    modifier onlyOperator() {\r\n        require(isOperator(msg.sender), \"Operatorable: caller does not have the operator role\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have admin role associated.\r\n     */\r\n    modifier onlyAdmin() {\r\n        require(isAdmin(msg.sender), \"Operatorable: caller does not have the admin role\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have system role associated.\r\n     */\r\n    modifier onlySystem() {\r\n        require(isSystem(msg.sender), \"Operatorable: caller does not have the system role\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have multisig privileges.\r\n     */\r\n    modifier onlyMultisig() {\r\n        require(isMultisig(msg.sender), \"Operatorable: caller does not have multisig role\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have admin or system role associated.\r\n     */\r\n    modifier onlyAdminOrSystem() {\r\n        require(isAdminOrSystem(msg.sender), \"Operatorable: caller does not have the admin role nor system\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have operator or system role associated.\r\n     */\r\n    modifier onlyOperatorOrSystem() {\r\n        require(isOperatorOrSystem(msg.sender), \"Operatorable: caller does not have the operator role nor system\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have the relay role associated.\r\n     */\r\n    modifier onlyRelay() {\r\n        require(isRelay(msg.sender), \"Operatorable: caller does not have relay role associated\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have relay or operator role associated.\r\n     */\r\n    modifier onlyOperatorOrRelay() {\r\n        require(\r\n            isOperator(msg.sender) || isRelay(msg.sender),\r\n            \"Operatorable: caller does not have the operator role nor relay\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have relay or admin role associated.\r\n     */\r\n    modifier onlyAdminOrRelay() {\r\n        require(\r\n            isAdmin(msg.sender) || isRelay(msg.sender),\r\n            \"Operatorable: caller does not have the admin role nor relay\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have the operator, or system, or relay role associated.\r\n     */\r\n    modifier onlyOperatorOrSystemOrRelay() {\r\n        require(\r\n            isOperator(msg.sender) || isSystem(msg.sender) || isRelay(msg.sender),\r\n            \"Operatorable: caller does not have the operator role nor system nor relay\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have the operator, or admin, or relay role associated.\r\n     */\r\n    modifier onlyOperatorOrAdminOrRelay() {\r\n        require(\r\n            isOperator(msg.sender) || isAdmin(msg.sender) || isRelay(msg.sender),\r\n            \"Operatorable: caller does not have the operator role nor admin nor relay\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initialization instead of constructor, called once. The setOperatorsContract function can be called only by Admin role with\r\n     *       confirmation through the operators contract.\r\n     * @param _baseOperators BaseOperators contract address.\r\n     */\r\n    function initialize(address _baseOperators) public initializer {\r\n        _setOperatorsContract(_baseOperators);\r\n    }\r\n\r\n    /**\r\n     * @dev Set the new the address of Operators contract, should be confirmed from operators contract by calling confirmFor(addr)\r\n     *       where addr is the address of current contract instance. This is done to prevent the case when the new contract address is\r\n     *       broken and control of the contract can be lost in such case\r\n     * @param _baseOperators BaseOperators contract address.\r\n     */\r\n    function setOperatorsContract(address _baseOperators) public onlyAdmin {\r\n        require(_baseOperators != address(0), \"Operatorable: address of new operators contract can not be zero\");\r\n        operatorsPending = _baseOperators;\r\n        emit OperatorsContractPending(msg.sender, _baseOperators);\r\n    }\r\n\r\n    /**\r\n     * @dev The function should be called from new operators contract by admin to ensure that operatorsPending address\r\n     *       is the real contract address.\r\n     */\r\n    function confirmOperatorsContract() public {\r\n        require(operatorsPending != address(0), \"Operatorable: address of new operators contract can not be zero\");\r\n        require(msg.sender == operatorsPending, \"Operatorable: should be called from new operators contract\");\r\n        _setOperatorsContract(operatorsPending);\r\n    }\r\n\r\n    /**\r\n     * @return The address of the BaseOperators contract.\r\n     */\r\n    function getOperatorsContract() public view returns (address) {\r\n        return address(operatorsInst);\r\n    }\r\n\r\n    /**\r\n     * @return The pending address of the BaseOperators contract.\r\n     */\r\n    function getOperatorsPending() public view returns (address) {\r\n        return operatorsPending;\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has operator privileges.\r\n     */\r\n    function isOperator(address _account) public view returns (bool) {\r\n        return operatorsInst.isOperator(_account);\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has admin privileges.\r\n     */\r\n    function isAdmin(address _account) public view returns (bool) {\r\n        return operatorsInst.isAdmin(_account);\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has system privileges.\r\n     */\r\n    function isSystem(address _account) public view returns (bool) {\r\n        return operatorsInst.isSystem(_account);\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has relay privileges.\r\n     */\r\n    function isRelay(address _account) public view returns (bool) {\r\n        return operatorsInst.isRelay(_account);\r\n    }\r\n\r\n    /**\r\n     * @return If '_contract' has multisig privileges.\r\n     */\r\n    function isMultisig(address _contract) public view returns (bool) {\r\n        return operatorsInst.isMultisig(_contract);\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has admin or system privileges.\r\n     */\r\n    function isAdminOrSystem(address _account) public view returns (bool) {\r\n        return (operatorsInst.isAdmin(_account) || operatorsInst.isSystem(_account));\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has operator or system privileges.\r\n     */\r\n    function isOperatorOrSystem(address _account) public view returns (bool) {\r\n        return (operatorsInst.isOperator(_account) || operatorsInst.isSystem(_account));\r\n    }\r\n\r\n    /** INTERNAL FUNCTIONS */\r\n    function _setOperatorsContract(address _baseOperators) internal {\r\n        require(_baseOperators != address(0), \"Operatorable: address of new operators contract cannot be zero\");\r\n        operatorsInst = IBaseOperators(_baseOperators);\r\n        emit OperatorsContractChanged(msg.sender, _baseOperators);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/role/interface/IRaiseOperators.sol\r\n\r\n/**\r\n * @title IRaiseOperators\r\n * @notice Interface for RaiseOperators contract\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\ncontract IRaiseOperators {\r\n    function isInvestor(address _account) external view returns (bool);\r\n\r\n    function isIssuer(address _account) external view returns (bool);\r\n\r\n    function addInvestor(address _account) external;\r\n\r\n    function removeInvestor(address _account) external;\r\n\r\n    function addIssuer(address _account) external;\r\n\r\n    function removeIssuer(address _account) external;\r\n}\r\n\r\n\r\n// File contracts/role/raise/RaiseOperatorable.sol\r\n\r\n/**\r\n * @title RaiseOperatorable\r\n * @author Team 3301 <team3301@sygnum.com>\r\n * @dev RaiseOperatorable contract stores RaiseOperators contract address, and modifiers for\r\n *      contracts.\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\ncontract RaiseOperatorable is Operatorable {\r\n    IRaiseOperators internal raiseOperatorsInst;\r\n    address private raiseOperatorsPending;\r\n\r\n    event RaiseOperatorsContractChanged(address indexed caller, address indexed raiseOperatorsAddress);\r\n    event RaiseOperatorsContractPending(address indexed caller, address indexed raiseOperatorsAddress);\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have the investor role associated.\r\n     */\r\n    modifier onlyInvestor() {\r\n        require(isInvestor(msg.sender), \"RaiseOperatorable: caller is not investor\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have the issuer role associated.\r\n     */\r\n    modifier onlyIssuer() {\r\n        require(isIssuer(msg.sender), \"RaiseOperatorable: caller is not issuer\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initialization instead of constructor, called once. The setOperatorsContract function can be called only by Admin role with\r\n     * confirmation through the operators contract.\r\n     * @param _baseOperators BaseOperators contract address.\r\n     */\r\n    function initialize(address _baseOperators, address _raiseOperators) public initializer {\r\n        super.initialize(_baseOperators);\r\n        _setRaiseOperatorsContract(_raiseOperators);\r\n    }\r\n\r\n    /**\r\n     * @dev Set the new the address of Operators contract, should be confirmed from operators contract by calling confirmFor(addr)\r\n     * where addr is the address of current contract instance. This is done to prevent the case when the new contract address is\r\n     *broken and control of the contract can be lost in such case\r\n     * @param _raiseOperators RaiseOperators contract address.\r\n     */\r\n    function setRaiseOperatorsContract(address _raiseOperators) public onlyAdmin {\r\n        require(\r\n            _raiseOperators != address(0),\r\n            \"RaiseOperatorable: address of new raiseOperators contract can not be zero\"\r\n        );\r\n        raiseOperatorsPending = _raiseOperators;\r\n        emit RaiseOperatorsContractPending(msg.sender, _raiseOperators);\r\n    }\r\n\r\n    /**\r\n     * @dev The function should be called from new operators contract by admin to insure that operatorsPending address\r\n     *       is the real contract address.\r\n     */\r\n    function confirmRaiseOperatorsContract() public {\r\n        require(\r\n            raiseOperatorsPending != address(0),\r\n            \"RaiseOperatorable: address of pending raiseOperators contract can not be zero\"\r\n        );\r\n        require(\r\n            msg.sender == raiseOperatorsPending,\r\n            \"RaiseOperatorable: should be called from new raiseOperators contract\"\r\n        );\r\n        _setRaiseOperatorsContract(raiseOperatorsPending);\r\n    }\r\n\r\n    /**\r\n     * @return The address of the RaiseOperators contract.\r\n     */\r\n    function getRaiseOperatorsContract() public view returns (address) {\r\n        return address(raiseOperatorsInst);\r\n    }\r\n\r\n    /**\r\n     * @return The pending RaiseOperators contract address\r\n     */\r\n    function getRaiseOperatorsPending() public view returns (address) {\r\n        return raiseOperatorsPending;\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has investor privileges.\r\n     */\r\n    function isInvestor(address _account) public view returns (bool) {\r\n        return raiseOperatorsInst.isInvestor(_account);\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has issuer privileges.\r\n     */\r\n    function isIssuer(address _account) public view returns (bool) {\r\n        return raiseOperatorsInst.isIssuer(_account);\r\n    }\r\n\r\n    /** INTERNAL FUNCTIONS */\r\n    function _setRaiseOperatorsContract(address _raiseOperators) internal {\r\n        require(\r\n            _raiseOperators != address(0),\r\n            \"RaiseOperatorable: address of new raiseOperators contract can not be zero\"\r\n        );\r\n        raiseOperatorsInst = IRaiseOperators(_raiseOperators);\r\n        emit RaiseOperatorsContractChanged(msg.sender, _raiseOperators);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/role/raise/RaiseOperators.sol\r\n\r\n/**\r\n * @title RaiseOperators\r\n * @author Team 3301 <team3301@sygnum.com>\r\n * @dev For managing account privileges associated to the capital raise process: investors, and issuers.\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\ncontract RaiseOperators is Operatorable {\r\n    using Roles for Roles.Role;\r\n\r\n    Roles.Role private _investors;\r\n    Roles.Role private _issuers;\r\n\r\n    event InvestorAdded(address indexed caller, address indexed account);\r\n    event InvestorRemoved(address indexed caller, address indexed account);\r\n    event IssuerAdded(address indexed caller, address indexed account);\r\n    event IssuerRemoved(address indexed caller, address indexed account);\r\n\r\n    /**\r\n     * @dev Confirms RaiseOperator contract address once acive.\r\n     * @param _address Address of RaiseOperators contract.\r\n     */\r\n    function confirmFor(address _address) public onlyAdmin {\r\n        RaiseOperatorable(_address).confirmRaiseOperatorsContract();\r\n    }\r\n\r\n    /* --------------- INVESTOR --------------- */\r\n    /**\r\n     * @return If '_account' has investor privileges.\r\n     */\r\n    function isInvestor(address _account) public view returns (bool) {\r\n        return _investors.has(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Operator or relay can give '_account' address investor privileges if the contract is not paused.\r\n     * @param _account address that should be given investor privileges.\r\n     */\r\n    function addInvestor(address _account) public onlyOperatorOrRelay {\r\n        _addInvestor(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Operator or relay can revoke '_account' address investor privileges if the contract is not paused.\r\n     * @param _account address that should be revoked investor privileges.\r\n     */\r\n    function removeInvestor(address _account) public onlyOperatorOrRelay {\r\n        _removeInvestor(_account);\r\n    }\r\n\r\n    /* --------------- ISSUER --------------- */\r\n    /**\r\n     * @return If '_account' has issuer privileges.\r\n     */\r\n    function isIssuer(address _account) public view returns (bool) {\r\n        return _issuers.has(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Operator/Admin can give '_account' address issuer privileges if the contract is not paused.\r\n     * @param _account address that should be given issuer privileges.\r\n     */\r\n    function addIssuer(address _account) public onlyOperator {\r\n        _addIssuer(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Operator/Admin can revoke '_account' address issuer privileges if the contract is not paused.\r\n     * @param _account address that should be revoked issuer privileges.\r\n     */\r\n    function removeIssuer(address _account) public onlyOperator {\r\n        _removeIssuer(_account);\r\n    }\r\n\r\n    /* --------------- INTERNAL --------------- */\r\n    function _addInvestor(address _account) internal {\r\n        _investors.add(_account);\r\n        emit InvestorAdded(msg.sender, _account);\r\n    }\r\n\r\n    function _removeInvestor(address _account) internal {\r\n        _investors.remove(_account);\r\n        emit InvestorRemoved(msg.sender, _account);\r\n    }\r\n\r\n    function _addIssuer(address _account) internal {\r\n        _issuers.add(_account);\r\n        emit IssuerAdded(msg.sender, _account);\r\n    }\r\n\r\n    function _removeIssuer(address _account) internal {\r\n        _issuers.remove(_account);\r\n        emit IssuerRemoved(msg.sender, _account);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"InvestorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"InvestorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"IssuerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"IssuerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operatorsAddress\",\"type\":\"address\"}],\"name\":\"OperatorsContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operatorsAddress\",\"type\":\"address\"}],\"name\":\"OperatorsContractPending\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addIssuer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"confirmFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOperatorsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOperatorsContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOperatorsPending\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseOperators\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAdminOrSystem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isInvestor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isIssuer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"isMultisig\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isOperatorOrSystem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isRelay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isSystem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeIssuer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseOperators\",\"type\":\"address\"}],\"name\":\"setOperatorsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RaiseOperators", "CompilerVersion": "v0.5.12+commit.7709ece9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://88c217c7110d1e40a34818b7a956312547a2fa19258b8f18667703407170564d"}