{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facades/UnitStorageFacade.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.4;\\n// SPDX-License-Identifier: GPL-3.0-or-later\\nimport \\\"../storage/IStorage.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract UnitStorageFacade is Ownable{\\n    struct Range {\\n        // rename this\\n        address storageContract;\\n        uint256 start;\\n        uint256 end;\\n    }\\n\\n    // Mapping after Cosmetics of metadata ( 3rd iteration ) ( final for `UnitText` )\\n    // UnitStorage1 = 1 - 20\\n    // UnitStorage2 = 21 - 39\\n    // UnitStorage3 = 40 - 58\\n    // UnitStorage4 = 59 - 77\\n    // UnitStorage5 = 78 - 96\\n    // UnitStorage6 = 97 - 116\\n    // UnitStorage7 = 117 - 135\\n    // UnitStorage8 = 136 - 154\\n    // UnitStorage9 = 155 - 173\\n    // UnitStorage10 = 174 - 192\\n    // UnitStorage11 = 193 - 211\\n    // UnitStorage12 = 212 - 230\\n    // UnitStorage13 = 231 - 249\\n    // UnitStorage14 = 250 - 268\\n    // UnitStorage15 = 269 - 287\\n    // UnitStorage16 = 288 - 306\\n    // UnitStorage17 = 307 - 326\\n    // UnitStorage18 = 327 - 345\\n    // UnitStorage19 = 346 - 364\\n    // UnitStorage20 = 365 - 383\\n    // UnitStorage21 = 384 - 402\\n    // UnitStorage22 = 403 - 421\\n    // UnitStorage23 = 422 - 440\\n    // UnitStorage24 = 441 - 459\\n    // UnitStorage25 = 460 - 478\\n    // UnitStorage26 = 479 - 497\\n    // UnitStorage27 = 498 - 517\\n    // UnitStorage28 = 518 - 536\\n    // UnitStorage29 = 537 - 555\\n    // UnitStorage30 = 556 - 574\\n    // UnitStorage31 = 575 - 593\\n    // UnitStorage32 = 594 - 612\\n    // UnitStorage33 = 613 - 635\\n    // UnitStorage34 = 636 - 654\\n    // UnitStorage35 = 655 - 674\\n    // UnitStorage36 = 675 - 693\\n    // UnitStorage37 = 694 - 714\\n    // UnitStorage38 = 715 - 735\\n    // UnitStorage39 = 736 - 739\\n\\n    // Logic: \\n\\n    // ... examples - id = 456\\n    // for eachStorageContract get it's range\\n    // if `id` ( 456 ) fits the range, we first can store address of a contract ( unitStorage7 ).\\n    // contract found - address unitStorage7; // 410 - 489\\n    // then for range 410-489 ( difference is 79 ), ids are actually ( 0 - 79 )\\n    // so if it's not first contract ( it starts with 1 ), requested id = 456, in actual range of ids ( 0 - 79 ) is 33 ( if deduced by - toRange ), 46 if it is desired - from range  \\n    \\n    // set to onlyOwner()\\n    // check if value exists - \\n\\n    // this must be replaced by arrays unitStorageAddress[], startRange[], endRange[]\\n    // and then for...\\n\\n\\n    // ! previously working mapping -> Currently organizing mapping!\\n    \\n    Range[] ranges;\\n\\n    constructor(address[] memory unitStorage, uint256[] memory startRange, uint256[] memory endRange){\\n        for (uint256 i = 0; i < unitStorage.length; i++) \\n        {\\n            Range memory unitStorageRange = Range({storageContract:unitStorage[i], start:startRange[i], end: endRange[i] });\\n            ranges.push(unitStorageRange);\\n        }\\n    }\\n    function updateRange(uint256 index, address newStorageContract, uint256 newStart, uint256 newEnd) public onlyOwner {\\n        require(index < ranges.length, \\\"Invalid index\\\");\\n\\n        ranges[index].storageContract = newStorageContract;\\n        ranges[index].start = newStart;\\n        ranges[index].end = newEnd;\\n    }\\n    function _getBasedOnId(uint256 id) public view returns (address storageAddress, uint256 storageInterpolatedId){\\n    \\n\\n    // only if it's 2nd, 3rd or nth contract - there is no need for idInterpolation for the first contract\\n    if(id > ranges[0].end){\\n        for(uint256 i = 0; i < ranges.length; i++){\\n            if(id >= ranges[i].start && id <= ranges[i].end){\\n                // return the address\\n                storageAddress = ranges[i].storageContract;\\n                storageInterpolatedId = id - ranges[i].start;\\n            }\\n        }\\n        // Add a return statement here to handle the case when id doesn't match any range\\n        return (storageAddress, storageInterpolatedId);\\n    } else {\\n        return (ranges[0].storageContract, id);\\n    }\\n    }\\n\\n    function getUnitBasedOnId(uint256 id) public returns (string memory){\\n        (address storageAddress, uint256 storageInterpolatedId) = _getBasedOnId(id);\\n        IStorage unit = IStorage(storageAddress);\\n        return unit.getById(storageInterpolatedId);\\n    }\\n\\n\\n}\"\r\n    },\r\n    \"contracts/storage/IStorage.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.4;\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// https://soliditytips.com/articles/solidity-interface-interact-with-other-contracts/\\ninterface IStorage {\\n    function getById(uint256 id) external returns (string memory unit);\\n    // Add more function signatures as needed.\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"unitStorage\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"startRange\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"endRange\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"_getBasedOnId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"storageAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"storageInterpolatedId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getUnitBasedOnId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newStorageContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newEnd\",\"type\":\"uint256\"}],\"name\":\"updateRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UnitStorageFacade", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000005600000000000000000000000000000000000000000000000000000000000000a600000000000000000000000000000000000000000000000000000000000000027000000000000000000000000b68afffa642696a90680080f738d33d69c2589cf00000000000000000000000014e47f12754e342d9b4e291d7b86c9a9f2059607000000000000000000000000bef6bd9e5c63ac93836464c80beb2c0efa3852d9000000000000000000000000d5f111172828795e512e1f0577483a8778bf31d7000000000000000000000000e2c0d11a16e84b6f75001bce6f8d7f86db393130000000000000000000000000156b0f810f496db932b076a0013faa77576f210a000000000000000000000000f5edcdbd05da5d3a8560e4818faf6e9bf62cad430000000000000000000000004eaf8a1974fb5d95aaa03cc09fbd11518e5c86b70000000000000000000000004ab9150fa2a527d506a1a6a4baa75aa0f009186a00000000000000000000000021de2018ffa4e5c5ded62fede8410d4249b52bce0000000000000000000000002ab2ce9e1d4f166c29ff802cff163c497b4e3f160000000000000000000000003a663a9e32e2bdd80e7649121e37d18f4db1e43800000000000000000000000031d0f26572c0cdf131339940ff658282988a8c3f000000000000000000000000f68ca868df181feebe3fbad93fff4b4c26a31a580000000000000000000000006149e2ed958fdc4f28bae5586899c78b1d11ee47000000000000000000000000181881a68dd8c3eca58ea89fd243367faf5146650000000000000000000000001259698f2d1239650f39831dcd0179f135e90f15000000000000000000000000fb9ba8eab2a565e7b2f05fa32b78c999b0de5e1d0000000000000000000000008f8e51e1ad5c51f3a751e5037e220545e34135ee00000000000000000000000055842a7cd9411c22cfcaf2d1d15355766fa47e4c0000000000000000000000004f122c20805d9fba01604ffe27662d97c5c2b01d0000000000000000000000007819ae2285b482533b02eb307228f89a134f486c0000000000000000000000000a0d127d18631c981b588ee0c6750fc8aa75ab2e000000000000000000000000d7e53f2b35fa1c92e009709194349c358769544e000000000000000000000000cf986035b45f8badd3a4a11ac064ac1ab1785fd30000000000000000000000009f8c83816606b36c241049d337c60052bbc1c9930000000000000000000000007803abd48f2ed845532e7c845627d82672023f460000000000000000000000003a24adfea78c51f5c92af2633a158ef72b611d1e0000000000000000000000001c40628cda58abc25101ab7aa1a31d62bbb94c6c00000000000000000000000065d034aa21a42e8dde6795882744d490eaa06e2c00000000000000000000000080d3c87869cdf58c3a716b24fc1cf5815398ee2900000000000000000000000037183afc458654b65c9d1444dc49f0ffda973b5700000000000000000000000089e7024b4abb13985d1418630115870a4d6939b70000000000000000000000003f0dc74cfea994a66236642338ba2ab93b542516000000000000000000000000fac48271e0ed370fe1fb74e9f77c59ec66e183c00000000000000000000000005875925deb815d335accceb18209e63f077a1477000000000000000000000000e350cac13484ba656006fc9f29416dd13237ec8f0000000000000000000000000d63fd51a5c250836bab367374b12d9fa8baa44a00000000000000000000000027e12f82dcd82b028bcd50c37df3623c08a0caa70000000000000000000000000000000000000000000000000000000000000027000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000150000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000003b000000000000000000000000000000000000000000000000000000000000004e000000000000000000000000000000000000000000000000000000000000006100000000000000000000000000000000000000000000000000000000000000750000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000009b00000000000000000000000000000000000000000000000000000000000000ae00000000000000000000000000000000000000000000000000000000000000c100000000000000000000000000000000000000000000000000000000000000d400000000000000000000000000000000000000000000000000000000000000e700000000000000000000000000000000000000000000000000000000000000fa000000000000000000000000000000000000000000000000000000000000010d000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001330000000000000000000000000000000000000000000000000000000000000147000000000000000000000000000000000000000000000000000000000000015a000000000000000000000000000000000000000000000000000000000000016d0000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000019300000000000000000000000000000000000000000000000000000000000001a600000000000000000000000000000000000000000000000000000000000001b900000000000000000000000000000000000000000000000000000000000001cc00000000000000000000000000000000000000000000000000000000000001df00000000000000000000000000000000000000000000000000000000000001f200000000000000000000000000000000000000000000000000000000000002060000000000000000000000000000000000000000000000000000000000000219000000000000000000000000000000000000000000000000000000000000022c000000000000000000000000000000000000000000000000000000000000023f00000000000000000000000000000000000000000000000000000000000002520000000000000000000000000000000000000000000000000000000000000265000000000000000000000000000000000000000000000000000000000000027c000000000000000000000000000000000000000000000000000000000000028f00000000000000000000000000000000000000000000000000000000000002a300000000000000000000000000000000000000000000000000000000000002b600000000000000000000000000000000000000000000000000000000000002cb00000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000002700000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000027000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000004d000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000740000000000000000000000000000000000000000000000000000000000000087000000000000000000000000000000000000000000000000000000000000009a00000000000000000000000000000000000000000000000000000000000000ad00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000d300000000000000000000000000000000000000000000000000000000000000e600000000000000000000000000000000000000000000000000000000000000f9000000000000000000000000000000000000000000000000000000000000010c000000000000000000000000000000000000000000000000000000000000011f000000000000000000000000000000000000000000000000000000000000013200000000000000000000000000000000000000000000000000000000000001460000000000000000000000000000000000000000000000000000000000000159000000000000000000000000000000000000000000000000000000000000016c000000000000000000000000000000000000000000000000000000000000017f000000000000000000000000000000000000000000000000000000000000019200000000000000000000000000000000000000000000000000000000000001a500000000000000000000000000000000000000000000000000000000000001b800000000000000000000000000000000000000000000000000000000000001cb00000000000000000000000000000000000000000000000000000000000001de00000000000000000000000000000000000000000000000000000000000001f100000000000000000000000000000000000000000000000000000000000002050000000000000000000000000000000000000000000000000000000000000218000000000000000000000000000000000000000000000000000000000000022b000000000000000000000000000000000000000000000000000000000000023e00000000000000000000000000000000000000000000000000000000000002510000000000000000000000000000000000000000000000000000000000000264000000000000000000000000000000000000000000000000000000000000027b000000000000000000000000000000000000000000000000000000000000028e00000000000000000000000000000000000000000000000000000000000002a200000000000000000000000000000000000000000000000000000000000002b500000000000000000000000000000000000000000000000000000000000002ca00000000000000000000000000000000000000000000000000000000000002df00000000000000000000000000000000000000000000000000000000000002e3", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}