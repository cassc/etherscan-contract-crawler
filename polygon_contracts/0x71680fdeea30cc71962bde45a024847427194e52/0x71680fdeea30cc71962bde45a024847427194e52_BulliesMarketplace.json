{"SourceCode": "// SPDX-License-Identifier: MIT\r\n/*\r\n  ____  _   _ _     _     ___ _____ ____  \r\n | __ )| | | | |   | |   |_ _| ____/ ___| \r\n |  _ \\| | | | |   | |    | ||  _| \\___ \\ \r\n | |_) | |_| | |___| |___ | || |___ ___) |\r\n |____/ \\___/|_____|_____|___|_____|____/ \r\n                                          \r\n          By Devko.dev#7286\r\n*/\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contract.sol\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\ninterface IBONES {\r\n    function burnFrom(\r\n        address _from,\r\n        uint256 _value\r\n    ) external;\r\n}\r\n\r\ncontract BulliesMarketplace is Ownable {\r\n\r\n    struct Item {\r\n        string _name;\r\n        string _image;\r\n        string _type;\r\n        uint256 _quantity;\r\n        uint256 _price;\r\n        bool _enabled;\r\n    }\r\n    IBONES public BONES_CONTRACT = IBONES(0x19369905226F2D37562370a05A711C1DE4c9593C);\r\n    mapping(uint256 => Item) public Items;\r\n    mapping(uint256 => address[]) claimers;\r\n\r\n    struct claim {\r\n        uint256 itemId;\r\n        uint256 claimTime;\r\n    }\r\n    mapping(address => claim[]) public claimHistory;\r\n    mapping(address => uint256) public totalClaims;\r\n    uint256 public _nextItemId;\r\n\r\n    constructor() {}\r\n\r\n    modifier notContract() {\r\n        require(\r\n            (!_isContract(msg.sender)) && (msg.sender == tx.origin),\r\n            \"CONTRACTS_NOT_ALLOWED\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function _isContract(address addr) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(addr)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function addItem(\r\n        string memory _name,\r\n        string memory _image,\r\n        string memory _type,\r\n        uint256 _quantity,\r\n        uint256 _price,\r\n        bool _enabled\r\n    ) external onlyOwner {\r\n        Items[_nextItemId] = Item(\r\n            _name,\r\n            _image,\r\n            _type,\r\n            _quantity,\r\n            _price,\r\n            _enabled\r\n        );\r\n        _nextItemId++;\r\n    }\r\n\r\n    function editItem(\r\n        uint256 _itemId,\r\n        string memory _name,\r\n        string memory _image,\r\n        string memory _type,\r\n        uint256 _quantity,\r\n        uint256 _price,\r\n        bool _enabled\r\n    ) external onlyOwner {\r\n        require(_nextItemId > _itemId, \"ITEM_NOT_FOUND\");\r\n        Items[_itemId] = Item(\r\n            _name,\r\n            _image,\r\n            _type,\r\n            _quantity,\r\n            _price,\r\n            _enabled\r\n        );\r\n    }\r\n\r\n    function buyItem(uint256 _itemId) external notContract {\r\n        require(_nextItemId > _itemId, \"ITEM_NOT_FOUND\");\r\n        require(Items[_itemId]._quantity > claimers[_itemId].length, \"SOLD_OUT\");\r\n        require(Items[_itemId]._enabled, \"ITEM_DISABLED\");\r\n        BONES_CONTRACT.burnFrom(\r\n            msg.sender,\r\n            Items[_itemId]._price\r\n        );\r\n        claimers[_itemId].push(msg.sender);\r\n        claimHistory[msg.sender].push(claim(\r\n         _itemId,\r\n         block.timestamp\r\n        ));\r\n        totalClaims[msg.sender]++;\r\n    }\r\n\r\n    function changePaymentToken(address newToken) external onlyOwner {\r\n        BONES_CONTRACT = IBONES(newToken);\r\n    }\r\n\r\n    function getAvailableItems() external view returns (Item[] memory, uint256[] memory) {\r\n        uint256 totalItemsCount = 0;\r\n        for (uint256 index = 0; index < _nextItemId; index++) {\r\n            if (Items[index]._enabled == true && Items[index]._quantity > claimers[index].length) {\r\n                totalItemsCount++;\r\n            }\r\n        }\r\n        Item[] memory itemsList = new Item[](totalItemsCount);\r\n        uint256[] memory itemIds = new uint256[](totalItemsCount);\r\n        uint256 tokenListIndex;\r\n        for (uint256 index = 0; index < _nextItemId; index++) {\r\n            if (Items[index]._enabled == true && Items[index]._quantity > claimers[index].length) {\r\n                itemsList[tokenListIndex] = Items[index];\r\n                itemIds[tokenListIndex] = index;\r\n                tokenListIndex++;\r\n            }\r\n        }\r\n        return (itemsList, itemIds);\r\n    }\r\n\r\n    function quantityLeftForItem(uint256 itemId) external view returns (uint256) {\r\n        return Items[itemId]._quantity - claimers[itemId].length;\r\n    }\r\n\r\n    function getSoldItems() external view returns (Item[] memory, uint256[] memory) {\r\n        uint256 totalItemsCount = 0;\r\n        for (uint256 index = 0; index < _nextItemId; index++) {\r\n            if (Items[index]._enabled == true && Items[index]._quantity <= claimers[index].length) {\r\n                totalItemsCount++;\r\n            }\r\n        }\r\n        Item[] memory itemsList = new Item[](totalItemsCount);\r\n        uint256[] memory itemIds = new uint256[](totalItemsCount);\r\n        uint256 tokenListIndex;\r\n        for (uint256 index = 0; index < _nextItemId; index++) {\r\n            if (Items[index]._enabled == true && Items[index]._quantity <= claimers[index].length) {\r\n                itemsList[tokenListIndex] = Items[index];\r\n                itemIds[tokenListIndex] = index;\r\n                tokenListIndex++;\r\n            }\r\n        }\r\n        return (itemsList, itemIds);\r\n    }\r\n\r\n    function getClaimersOf(uint256 itemId) external view returns (address[] memory) {\r\n        return claimers[itemId];\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONES_CONTRACT\",\"outputs\":[{\"internalType\":\"contract IBONES\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Items\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_type\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nextItemId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_type\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"addItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"changePaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_type\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"editItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailableItems\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_type\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"internalType\":\"struct BulliesMarketplace.Item[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"getClaimersOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSoldItems\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_type\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"internalType\":\"struct BulliesMarketplace.Item[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"quantityLeftForItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BulliesMarketplace", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4de4f60c3e5265a72dbd1f7eaaa0d9aa0cba4c9352e7ca925736e22b355c49da"}