{"SourceCode": "// File: contracts\\interfaces\\UniswapRouterInterfaceV5.sol\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.15;\r\n\r\ninterface UniswapRouterInterfaceV5{\r\n\tfunction swapExactTokensForTokens(\r\n\t\tuint amountIn,\r\n\t\tuint amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint[] memory amounts);\r\n\r\n\tfunction swapTokensForExactTokens(\r\n\t\tuint amountOut,\r\n\t\tuint amountInMax,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint[] memory amounts);\r\n}\r\n\r\n// File: contracts\\interfaces\\TokenInterfaceV5.sol\r\n\r\npragma solidity 0.8.15;\r\n\r\ninterface TokenInterfaceV5{\r\n    function burn(address, uint256) external;\r\n    function mint(address, uint256) external;\r\n    function transfer(address, uint256) external returns (bool);\r\n    function transferFrom(address, address, uint256) external returns(bool);\r\n    function balanceOf(address) external view returns(uint256);\r\n    function hasRole(bytes32, address) external view returns (bool);\r\n    function approve(address, uint256) external returns (bool);\r\n    function allowance(address, address) external view returns (uint256);\r\n}\r\n\r\n// File: contracts\\interfaces\\NftInterfaceV5.sol\r\n\r\npragma solidity 0.8.15;\r\n\r\ninterface NftInterfaceV5{\r\n    function balanceOf(address) external view returns (uint);\r\n    function ownerOf(uint) external view returns (address);\r\n    function transferFrom(address, address, uint) external;\r\n    function tokenOfOwnerByIndex(address, uint) external view returns(uint);\r\n}\r\n\r\n// File: contracts\\interfaces\\VaultInterfaceV5.sol\r\n\r\npragma solidity 0.8.15;\r\n\r\ninterface VaultInterfaceV5{\r\n\tfunction sendDaiToTrader(address, uint) external;\r\n\tfunction receiveDaiFromTrader(address, uint, uint) external;\r\n\tfunction currentBalanceDai() external view returns(uint);\r\n\tfunction distributeRewardDai(uint) external;\r\n}\r\n\r\n// File: contracts\\interfaces\\PairsStorageInterfaceV6.sol\r\n\r\npragma solidity 0.8.15;\r\n\r\ninterface PairsStorageInterfaceV6{\r\n    enum FeedCalculation { DEFAULT, INVERT, COMBINE }    // FEED 1, 1 / (FEED 1), (FEED 1)/(FEED 2)\r\n    struct Feed{ address feed1; address feed2; FeedCalculation feedCalculation; uint maxDeviationP; } // PRECISION (%)\r\n    function incrementCurrentOrderId() external returns(uint);\r\n    function updateGroupCollateral(uint, uint, bool, bool) external;\r\n    function pairJob(uint) external returns(string memory, string memory, bytes32, uint);\r\n    function pairFeed(uint) external view returns(Feed memory);\r\n    function pairSpreadP(uint) external view returns(uint);\r\n    function pairMinLeverage(uint) external view returns(uint);\r\n    function pairMaxLeverage(uint) external view returns(uint);\r\n    function groupMaxCollateral(uint) external view returns(uint);\r\n    function groupCollateral(uint, bool) external view returns(uint);\r\n    function guaranteedSlEnabled(uint) external view returns(bool);\r\n    function pairOpenFeeP(uint) external view returns(uint);\r\n    function pairCloseFeeP(uint) external view returns(uint);\r\n    function pairOracleFeeP(uint) external view returns(uint);\r\n    function pairNftLimitOrderFeeP(uint) external view returns(uint);\r\n    function pairReferralFeeP(uint) external view returns(uint);\r\n    function pairMinLevPosDai(uint) external view returns(uint);\r\n}\r\n\r\n// File: contracts\\interfaces\\StorageInterfaceV5.sol\r\n\r\npragma solidity 0.8.15;\r\n\r\ninterface StorageInterfaceV5{\r\n    enum LimitOrder { TP, SL, LIQ, OPEN }\r\n    struct Trader{\r\n        uint leverageUnlocked;\r\n        address referral;\r\n        uint referralRewardsTotal;  // 1e18\r\n    }\r\n    struct Trade{\r\n        address trader;\r\n        uint pairIndex;\r\n        uint index;\r\n        uint initialPosToken;       // 1e18\r\n        uint positionSizeDai;       // 1e18\r\n        uint openPrice;             // PRECISION\r\n        bool buy;\r\n        uint leverage;\r\n        uint tp;                    // PRECISION\r\n        uint sl;                    // PRECISION\r\n    }\r\n    struct TradeInfo{\r\n        uint tokenId;\r\n        uint tokenPriceDai;         // PRECISION\r\n        uint openInterestDai;       // 1e18\r\n        uint tpLastUpdated;\r\n        uint slLastUpdated;\r\n        bool beingMarketClosed;\r\n    }\r\n    struct OpenLimitOrder{\r\n        address trader;\r\n        uint pairIndex;\r\n        uint index;\r\n        uint positionSize;          // 1e18 (DAI or GFARM2)\r\n        uint spreadReductionP;\r\n        bool buy;\r\n        uint leverage;\r\n        uint tp;                    // PRECISION (%)\r\n        uint sl;                    // PRECISION (%)\r\n        uint minPrice;              // PRECISION\r\n        uint maxPrice;              // PRECISION\r\n        uint block;\r\n        uint tokenId;               // index in supportedTokens\r\n    }\r\n    struct PendingMarketOrder{\r\n        Trade trade;\r\n        uint block;\r\n        uint wantedPrice;           // PRECISION\r\n        uint slippageP;             // PRECISION (%)\r\n        uint spreadReductionP;\r\n        uint tokenId;               // index in supportedTokens\r\n    }\r\n    struct PendingNftOrder{\r\n        address nftHolder;\r\n        uint nftId;\r\n        address trader;\r\n        uint pairIndex;\r\n        uint index;\r\n        LimitOrder orderType;\r\n    }\r\n    function PRECISION() external pure returns(uint);\r\n    function gov() external view returns(address);\r\n    function dev() external view returns(address);\r\n    function dai() external view returns(TokenInterfaceV5);\r\n    function token() external view returns(TokenInterfaceV5);\r\n    function linkErc677() external view returns(TokenInterfaceV5);\r\n    function tokenDaiRouter() external view returns(UniswapRouterInterfaceV5);\r\n    function priceAggregator() external view returns(AggregatorInterfaceV6_2);\r\n    function vault() external view returns(VaultInterfaceV5);\r\n    function trading() external view returns(address);\r\n    function callbacks() external view returns(address);\r\n    function handleTokens(address,uint,bool) external;\r\n    function transferDai(address, address, uint) external;\r\n    function transferLinkToAggregator(address, uint, uint) external;\r\n    function unregisterTrade(address, uint, uint) external;\r\n    function unregisterPendingMarketOrder(uint, bool) external;\r\n    function unregisterOpenLimitOrder(address, uint, uint) external;\r\n    function hasOpenLimitOrder(address, uint, uint) external view returns(bool);\r\n    function storePendingMarketOrder(PendingMarketOrder memory, uint, bool) external;\r\n    function storeReferral(address, address) external;\r\n    function openTrades(address, uint, uint) external view returns(Trade memory);\r\n    function openTradesInfo(address, uint, uint) external view returns(TradeInfo memory);\r\n    function updateSl(address, uint, uint, uint) external;\r\n    function updateTp(address, uint, uint, uint) external;\r\n    function getOpenLimitOrder(address, uint, uint) external view returns(OpenLimitOrder memory);\r\n    function spreadReductionsP(uint) external view returns(uint);\r\n    function positionSizeTokenDynamic(uint,uint) external view returns(uint);\r\n    function maxSlP() external view returns(uint);\r\n    function storeOpenLimitOrder(OpenLimitOrder memory) external;\r\n    function reqID_pendingMarketOrder(uint) external view returns(PendingMarketOrder memory);\r\n    function storePendingNftOrder(PendingNftOrder memory, uint) external;\r\n    function updateOpenLimitOrder(OpenLimitOrder calldata) external;\r\n    function firstEmptyTradeIndex(address, uint) external view returns(uint);\r\n    function firstEmptyOpenLimitIndex(address, uint) external view returns(uint);\r\n    function increaseNftRewards(uint, uint) external;\r\n    function nftSuccessTimelock() external view returns(uint);\r\n    function currentPercentProfit(uint,uint,bool,uint) external view returns(int);\r\n    function reqID_pendingNftOrder(uint) external view returns(PendingNftOrder memory);\r\n    function setNftLastSuccess(uint) external;\r\n    function updateTrade(Trade memory) external;\r\n    function nftLastSuccess(uint) external view returns(uint);\r\n    function unregisterPendingNftOrder(uint) external;\r\n    function handleDevGovFees(uint, uint, bool, bool) external returns(uint);\r\n    function distributeLpRewards(uint) external;\r\n    function getReferral(address) external view returns(address);\r\n    function increaseReferralRewards(address, uint) external;\r\n    function storeTrade(Trade memory, TradeInfo memory) external;\r\n    function setLeverageUnlocked(address, uint) external;\r\n    function getLeverageUnlocked(address) external view returns(uint);\r\n    function openLimitOrdersCount(address, uint) external view returns(uint);\r\n    function maxOpenLimitOrdersPerPair() external view returns(uint);\r\n    function openTradesCount(address, uint) external view returns(uint);\r\n    function pendingMarketOpenCount(address, uint) external view returns(uint);\r\n    function pendingMarketCloseCount(address, uint) external view returns(uint);\r\n    function maxTradesPerPair() external view returns(uint);\r\n    function maxTradesPerBlock() external view returns(uint);\r\n    function tradesPerBlock(uint) external view returns(uint);\r\n    function pendingOrderIdsCount(address) external view returns(uint);\r\n    function maxPendingMarketOrders() external view returns(uint);\r\n    function maxGainP() external view returns(uint);\r\n    function defaultLeverageUnlocked() external view returns(uint);\r\n    function openInterestDai(uint, uint) external view returns(uint);\r\n    function getPendingOrderIds(address) external view returns(uint[] memory);\r\n    function traders(address) external view returns(Trader memory);\r\n    function nfts(uint) external view returns(NftInterfaceV5);\r\n}\r\n\r\ninterface AggregatorInterfaceV6_2{\r\n    enum OrderType { MARKET_OPEN, MARKET_CLOSE, LIMIT_OPEN, LIMIT_CLOSE, UPDATE_SL }\r\n    function pairsStorage() external view returns(PairsStorageInterfaceV6);\r\n    function getPrice(uint,OrderType,uint) external returns(uint);\r\n    function tokenPriceDai() external returns(uint);\r\n    function linkFee(uint,uint) external view returns(uint);\r\n    function tokenDaiReservesLp() external view returns(uint, uint);\r\n    function pendingSlOrders(uint) external view returns(PendingSl memory);\r\n    function storePendingSlOrder(uint orderId, PendingSl calldata p) external;\r\n    function unregisterPendingSlOrder(uint orderId) external;\r\n    struct PendingSl{address trader; uint pairIndex; uint index; uint openPrice; bool buy; uint newSl; }\r\n}\r\n\r\ninterface NftRewardsInterfaceV6{\r\n    struct TriggeredLimitId{ address trader; uint pairIndex; uint index; StorageInterfaceV5.LimitOrder order; }\r\n    enum OpenLimitOrderType{ LEGACY, REVERSAL, MOMENTUM }\r\n    function storeFirstToTrigger(TriggeredLimitId calldata, address) external;\r\n    function storeTriggerSameBlock(TriggeredLimitId calldata, address) external;\r\n    function unregisterTrigger(TriggeredLimitId calldata) external;\r\n    function distributeNftReward(TriggeredLimitId calldata, uint) external;\r\n    function openLimitOrderTypes(address, uint, uint) external view returns(OpenLimitOrderType);\r\n    function setOpenLimitOrderType(address, uint, uint, OpenLimitOrderType) external;\r\n    function triggered(TriggeredLimitId calldata) external view returns(bool);\r\n    function timedOut(TriggeredLimitId calldata) external view returns(bool);\r\n}\r\n\r\n// File: contracts\\GNSReferralsV6_2.sol\r\n\r\npragma solidity 0.8.15;\r\n\r\ncontract GNSReferralsV6_2 {\r\n\r\n    // CONSTANTS\r\n    uint constant PRECISION = 1e10;\r\n    StorageInterfaceV5 public immutable storageT;\r\n\r\n    // ADJUSTABLE PARAMETERS\r\n    uint public allyFeeP;           // % (of referrer fees going to allies, eg. 10)\r\n    uint public startReferrerFeeP;  // % (of referrer fee when 0 volume referred, eg. 75)\r\n    uint public openFeeP;           // % (of opening fee used for referral system, eg. 33)\r\n    uint public targetVolumeDai;    // DAI (to reach maximum referral system fee, eg. 1e8)\r\n\r\n    // CUSTOM TYPES\r\n    struct AllyDetails{\r\n        address[] referrersReferred;\r\n        uint volumeReferredDai;    // 1e18\r\n        uint pendingRewardsToken;  // 1e18\r\n        uint totalRewardsToken;    // 1e18\r\n        uint totalRewardsValueDai; // 1e18\r\n        bool active;\r\n    }\r\n\r\n    struct ReferrerDetails{\r\n        address ally;\r\n        address[] tradersReferred;\r\n        uint volumeReferredDai;    // 1e18\r\n        uint pendingRewardsToken;  // 1e18\r\n        uint totalRewardsToken;    // 1e18\r\n        uint totalRewardsValueDai; // 1e18\r\n        bool active;\r\n    }\r\n\r\n    // STATE (MAPPINGS)\r\n    mapping(address => AllyDetails) public allyDetails;\r\n    mapping(address => ReferrerDetails) public referrerDetails;\r\n\r\n    mapping(address => address) public referrerByTrader;\r\n\r\n    // EVENTS\r\n    event UpdatedAllyFeeP(uint value);\r\n    event UpdatedStartReferrerFeeP(uint value);\r\n    event UpdatedOpenFeeP(uint value);\r\n    event UpdatedTargetVolumeDai(uint value);\r\n\r\n    event AllyWhitelisted(address indexed ally);\r\n    event AllyUnwhitelisted(address indexed ally);\r\n\r\n    event ReferrerWhitelisted(\r\n        address indexed referrer,\r\n        address indexed ally\r\n    );\r\n    event ReferrerUnwhitelisted(address indexed referrer);\r\n    event ReferrerRegistered(\r\n        address indexed trader,\r\n        address indexed referrer\r\n    );\r\n\r\n    event AllyRewardDistributed(\r\n        address indexed ally,\r\n        address indexed trader,\r\n        uint volumeDai,\r\n        uint amountToken,\r\n        uint amountValueDai\r\n    );\r\n    event ReferrerRewardDistributed(\r\n        address indexed referrer,\r\n        address indexed trader,\r\n        uint volumeDai,\r\n        uint amountToken,\r\n        uint amountValueDai\r\n    );\r\n\r\n    event AllyRewardsClaimed(\r\n        address indexed ally,\r\n        uint amountToken\r\n    );\r\n    event ReferrerRewardsClaimed(\r\n        address indexed referrer,\r\n        uint amountToken\r\n    );\r\n\r\n    constructor(\r\n        StorageInterfaceV5 _storageT,\r\n        uint _allyFeeP,\r\n        uint _startReferrerFeeP,\r\n        uint _openFeeP,\r\n        uint _targetVolumeDai\r\n    ){\r\n        require(address(_storageT) != address(0)\r\n            && _allyFeeP <= 50\r\n            && _startReferrerFeeP <= 100\r\n            && _openFeeP <= 50\r\n            && _targetVolumeDai > 0, \"WRONG_PARAMS\");\r\n\r\n        storageT = _storageT;\r\n\r\n        allyFeeP = _allyFeeP;\r\n        startReferrerFeeP = _startReferrerFeeP;\r\n        openFeeP = _openFeeP;\r\n        targetVolumeDai = _targetVolumeDai;\r\n    }\r\n\r\n    // MODIFIERS\r\n    modifier onlyGov(){\r\n        require(msg.sender == storageT.gov(), \"GOV_ONLY\");\r\n        _;\r\n    }\r\n    modifier onlyTrading(){\r\n        require(msg.sender == storageT.trading(), \"TRADING_ONLY\");\r\n        _;\r\n    }\r\n    modifier onlyCallbacks(){\r\n        require(msg.sender == storageT.callbacks(), \"CALLBACKS_ONLY\");\r\n        _;\r\n    }\r\n\r\n    // MANAGE PARAMETERS\r\n    function updateAllyFeeP(uint value) external onlyGov{\r\n        require(value <= 50, \"VALUE_ABOVE_50\");\r\n\r\n        allyFeeP = value;\r\n        \r\n        emit UpdatedAllyFeeP(value);\r\n    }\r\n    function updateStartReferrerFeeP(uint value) external onlyGov{\r\n        require(value <= 100, \"VALUE_ABOVE_100\");\r\n\r\n        startReferrerFeeP = value;\r\n\r\n        emit UpdatedStartReferrerFeeP(value);\r\n    }\r\n    function updateOpenFeeP(uint value) external onlyGov{\r\n        require(value <= 50, \"VALUE_ABOVE_50\");\r\n\r\n        openFeeP = value;\r\n\r\n        emit UpdatedOpenFeeP(value);\r\n    }\r\n    function updateTargetVolumeDai(uint value) external onlyGov{\r\n        require(value > 0, \"VALUE_0\");\r\n\r\n        targetVolumeDai = value;\r\n        \r\n        emit UpdatedTargetVolumeDai(value);\r\n    }\r\n\r\n    // MANAGE ALLIES\r\n    function whitelistAlly(address ally) external onlyGov{\r\n        require(ally != address(0), \"ADDRESS_0\");\r\n\r\n        AllyDetails storage a = allyDetails[ally];\r\n        require(!a.active, \"ALLY_ALREADY_ACTIVE\");\r\n\r\n        a.active = true;\r\n\r\n        emit AllyWhitelisted(ally);\r\n    }\r\n    function unwhitelistAlly(address ally) external onlyGov{\r\n        AllyDetails storage a = allyDetails[ally];\r\n        require(a.active, \"ALREADY_UNACTIVE\");\r\n\r\n        a.active = false;\r\n\r\n        emit AllyUnwhitelisted(ally);\r\n    }\r\n\r\n    // MANAGE REFERRERS\r\n    function whitelistReferrer(\r\n        address referrer,\r\n        address ally\r\n    ) external onlyGov{\r\n        \r\n        require(referrer != address(0), \"ADDRESS_0\");\r\n\r\n        ReferrerDetails storage r = referrerDetails[referrer];      \r\n        require(!r.active, \"REFERRER_ALREADY_ACTIVE\");\r\n\r\n        r.active = true;\r\n        \r\n        if(ally != address(0)){\r\n            AllyDetails storage a = allyDetails[ally];\r\n            require(a.active, \"ALLY_NOT_ACTIVE\");\r\n\r\n            r.ally = ally;\r\n            a.referrersReferred.push(referrer);\r\n        }\r\n\r\n        emit ReferrerWhitelisted(referrer, ally);\r\n    }\r\n    function unwhitelistReferrer(address referrer) external onlyGov{\r\n        ReferrerDetails storage r = referrerDetails[referrer];\r\n        require(r.active, \"ALREADY_UNACTIVE\");\r\n\r\n        r.active = false;\r\n\r\n        emit ReferrerUnwhitelisted(referrer);\r\n    }\r\n\r\n    function registerPotentialReferrer(\r\n        address trader,\r\n        address referrer\r\n    ) external onlyTrading{\r\n\r\n        ReferrerDetails storage r = referrerDetails[referrer];\r\n\r\n        if(referrerByTrader[trader] != address(0)\r\n        || referrer == address(0)\r\n        || !r.active){\r\n            return;\r\n        }\r\n\r\n        referrerByTrader[trader] = referrer;\r\n        r.tradersReferred.push(trader);\r\n\r\n        emit ReferrerRegistered(trader, referrer);\r\n    }\r\n\r\n    // REWARDS DISTRIBUTION\r\n    function distributePotentialReward(\r\n        address trader,\r\n        uint volumeDai,\r\n        uint pairOpenFeeP,\r\n        uint tokenPriceDai\r\n    ) external onlyCallbacks returns(uint){\r\n\r\n        address referrer = referrerByTrader[trader];\r\n        ReferrerDetails storage r = referrerDetails[referrer];\r\n\r\n        if(!r.active){\r\n            return 0;\r\n        }\r\n\r\n        uint referrerRewardValueDai = volumeDai * getReferrerFeeP(\r\n            pairOpenFeeP,\r\n            r.volumeReferredDai\r\n        ) / PRECISION / 100;\r\n\r\n        uint referrerRewardToken = referrerRewardValueDai * PRECISION / tokenPriceDai;\r\n\r\n        storageT.handleTokens(address(this), referrerRewardToken, true);\r\n\r\n        AllyDetails storage a = allyDetails[r.ally];\r\n        \r\n        uint allyRewardValueDai;\r\n        uint allyRewardToken;\r\n\r\n        if(a.active){\r\n            allyRewardValueDai = referrerRewardValueDai * allyFeeP / 100;\r\n            allyRewardToken = referrerRewardToken * allyFeeP / 100;\r\n\r\n            a.volumeReferredDai += volumeDai;\r\n            a.pendingRewardsToken += allyRewardToken;\r\n            a.totalRewardsToken += allyRewardToken;\r\n            a.totalRewardsValueDai += allyRewardValueDai;\r\n\r\n            referrerRewardValueDai -= allyRewardValueDai;\r\n            referrerRewardToken -= allyRewardToken;\r\n\r\n            emit AllyRewardDistributed(\r\n                r.ally,\r\n                trader,\r\n                volumeDai,\r\n                allyRewardToken,\r\n                allyRewardValueDai\r\n            );\r\n        }\r\n\r\n        r.volumeReferredDai += volumeDai;\r\n        r.pendingRewardsToken += referrerRewardToken;\r\n        r.totalRewardsToken += referrerRewardToken;\r\n        r.totalRewardsValueDai += referrerRewardValueDai;\r\n\r\n        emit ReferrerRewardDistributed(\r\n            referrer,\r\n            trader,\r\n            volumeDai,\r\n            referrerRewardToken,\r\n            referrerRewardValueDai\r\n        );\r\n\r\n        return referrerRewardValueDai + allyRewardValueDai;\r\n    }\r\n\r\n    // REWARDS CLAIMING\r\n    function claimAllyRewards() external{\r\n        AllyDetails storage a = allyDetails[msg.sender];\r\n        uint rewardsToken = a.pendingRewardsToken;\r\n        \r\n        require(rewardsToken > 0, \"NO_PENDING_REWARDS\");\r\n\r\n        a.pendingRewardsToken = 0;\r\n        storageT.token().transfer(msg.sender, rewardsToken);\r\n\r\n        emit AllyRewardsClaimed(msg.sender, rewardsToken);\r\n    }\r\n    function claimReferrerRewards() external{\r\n        ReferrerDetails storage r = referrerDetails[msg.sender];\r\n        uint rewardsToken = r.pendingRewardsToken;\r\n        \r\n        require(rewardsToken > 0, \"NO_PENDING_REWARDS\");\r\n\r\n        r.pendingRewardsToken = 0;\r\n        storageT.token().transfer(msg.sender, rewardsToken);\r\n\r\n        emit ReferrerRewardsClaimed(msg.sender, rewardsToken);\r\n    }\r\n\r\n    // VIEW FUNCTIONS\r\n    function getReferrerFeeP(\r\n        uint pairOpenFeeP,\r\n        uint volumeReferredDai\r\n    ) public view returns(uint){\r\n\r\n        uint maxReferrerFeeP = pairOpenFeeP * 2 * openFeeP / 100;\r\n        uint minFeeP = maxReferrerFeeP * startReferrerFeeP / 100;\r\n\r\n        uint feeP = minFeeP + (maxReferrerFeeP - minFeeP)\r\n            * volumeReferredDai / 1e18 / targetVolumeDai;\r\n\r\n        return feeP > maxReferrerFeeP ? maxReferrerFeeP : feeP;\r\n    }\r\n\r\n    function getPercentOfOpenFeeP(\r\n        address trader\r\n    ) external view returns(uint){\r\n        return getPercentOfOpenFeeP_calc(referrerDetails[referrerByTrader[trader]].volumeReferredDai);\r\n    }\r\n\r\n    function getPercentOfOpenFeeP_calc(\r\n        uint volumeReferredDai\r\n    ) public view returns(uint resultP){\r\n        resultP = (openFeeP * (\r\n            startReferrerFeeP * PRECISION +\r\n            volumeReferredDai * PRECISION * (100 - startReferrerFeeP) / 1e18 / targetVolumeDai)\r\n        ) / 100;\r\n\r\n        resultP = resultP > openFeeP * PRECISION ?\r\n            openFeeP * PRECISION :\r\n            resultP;\r\n    }\r\n\r\n    function getTraderReferrer(\r\n        address trader\r\n    ) external view returns(address){\r\n        address referrer = referrerByTrader[trader];\r\n\r\n        return referrerDetails[referrer].active ? referrer : address(0);\r\n    }\r\n    function getReferrersReferred(\r\n        address ally\r\n    ) external view returns (address[] memory){\r\n        return allyDetails[ally].referrersReferred;\r\n    }\r\n    function getTradersReferred(\r\n        address referred\r\n    ) external view returns (address[] memory){\r\n        return referrerDetails[referred].tradersReferred;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract StorageInterfaceV5\",\"name\":\"_storageT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allyFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startReferrerFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_openFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_targetVolumeDai\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ally\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"volumeDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountValueDai\",\"type\":\"uint256\"}],\"name\":\"AllyRewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ally\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"}],\"name\":\"AllyRewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ally\",\"type\":\"address\"}],\"name\":\"AllyUnwhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ally\",\"type\":\"address\"}],\"name\":\"AllyWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"ReferrerRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"volumeDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountValueDai\",\"type\":\"uint256\"}],\"name\":\"ReferrerRewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"}],\"name\":\"ReferrerRewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"ReferrerUnwhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ally\",\"type\":\"address\"}],\"name\":\"ReferrerWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UpdatedAllyFeeP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UpdatedOpenFeeP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UpdatedStartReferrerFeeP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UpdatedTargetVolumeDai\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allyDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"volumeReferredDai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewardsToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardsToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardsValueDai\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allyFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAllyRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReferrerRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"volumeDai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pairOpenFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPriceDai\",\"type\":\"uint256\"}],\"name\":\"distributePotentialReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getPercentOfOpenFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"volumeReferredDai\",\"type\":\"uint256\"}],\"name\":\"getPercentOfOpenFeeP_calc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"resultP\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairOpenFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"volumeReferredDai\",\"type\":\"uint256\"}],\"name\":\"getReferrerFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ally\",\"type\":\"address\"}],\"name\":\"getReferrersReferred\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getTraderReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referred\",\"type\":\"address\"}],\"name\":\"getTradersReferred\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrerByTrader\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrerDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ally\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"volumeReferredDai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewardsToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardsToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardsValueDai\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"registerPotentialReferrer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startReferrerFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storageT\",\"outputs\":[{\"internalType\":\"contract StorageInterfaceV5\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetVolumeDai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ally\",\"type\":\"address\"}],\"name\":\"unwhitelistAlly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"unwhitelistReferrer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateAllyFeeP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateOpenFeeP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateStartReferrerFeeP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateTargetVolumeDai\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ally\",\"type\":\"address\"}],\"name\":\"whitelistAlly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ally\",\"type\":\"address\"}],\"name\":\"whitelistReferrer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GNSReferralsV6_2", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "125", "ConstructorArguments": "000000000000000000000000aee4d11a16b2bc65edd6416fb626eb404a6d65bd000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004b00000000000000000000000000000000000000000000000000000000000000210000000000000000000000000000000000000000000000000000000000989680", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ae159f40b1ffe67475d6253d522f645a4c324215b77ea1e1f8a29a2a12694e78"}