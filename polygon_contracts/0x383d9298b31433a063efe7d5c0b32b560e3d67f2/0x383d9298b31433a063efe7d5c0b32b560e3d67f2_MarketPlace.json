{"SourceCode": "pragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface WUNToken {\r\n    function getTokenRoyality(uint256 tokenId) external view returns (uint8);\r\n    function getTokenCreator(uint256 tokenId) external view returns (address);\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    \r\n      struct Item {\r\n        uint256 id;\r\n        address creator;\r\n        string uri;\r\n        uint8 royalties ;\r\n    }\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    \r\n    function items(uint256 _tokenId) external view returns  (Item memory);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - `from` cannot be the zero address.\r\n      * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMathUpgradeable {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\n \r\n abstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        address self = address(this);\r\n        uint256 cs;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { cs := extcodesize(self) }\r\n        return cs == 0;\r\n    }\r\n}\r\n\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract EscrowUpgradeable is Initializable, OwnableUpgradeable {\r\n    function initialize() public virtual initializer {\r\n        __Escrow_init();\r\n    }\r\n    function __Escrow_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n        __Escrow_init_unchained();\r\n    }\r\n\r\n    function __Escrow_init_unchained() internal initializer {\r\n    }\r\n    using SafeMathUpgradeable for uint256;\r\n    using AddressUpgradeable for address payable;\r\n\r\n    event Deposited(address indexed payee, uint256 weiAmount);\r\n    event Withdrawn(address indexed payee, uint256 weiAmount);\r\n\r\n    mapping(address => uint256) private _deposits;\r\n\r\n    function depositsOf(address payee) public view returns (uint256) {\r\n        return _deposits[payee];\r\n    }\r\n\r\n    /**\r\n     * @dev Stores the sent amount as credit to be withdrawn.\r\n     * @param payee The destination address of the funds.\r\n     */\r\n    function deposit(address payee) public virtual payable onlyOwner {\r\n        uint256 amount = msg.value;\r\n        _deposits[payee] = _deposits[payee].add(amount);\r\n\r\n        emit Deposited(payee, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw accumulated balance for a payee, forwarding all gas to the\r\n     * recipient.\r\n     *\r\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\r\n     * Make sure you trust the recipient, or are either following the\r\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\r\n     *\r\n     * @param payee The address whose funds will be withdrawn and transferred to.\r\n     */\r\n    function withdraw(address payable payee) public virtual onlyOwner {\r\n        uint256 payment = _deposits[payee];\r\n\r\n        _deposits[payee] = 0;\r\n\r\n        payee.sendValue(payment);\r\n\r\n        emit Withdrawn(payee, payment);\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\nabstract contract PullPaymentUpgradeable is Initializable {\r\n    EscrowUpgradeable private _escrow;\r\n\r\n    function __PullPayment_init() internal initializer {\r\n        __PullPayment_init_unchained();\r\n    }\r\n\r\n    function __PullPayment_init_unchained() internal initializer {\r\n        _escrow = new EscrowUpgradeable();\r\n        _escrow.initialize();\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw accumulated payments, forwarding all gas to the recipient.\r\n     *\r\n     * Note that _any_ account can call this function, not just the `payee`.\r\n     * This means that contracts unaware of the `PullPayment` protocol can still\r\n     * receive funds this way, by having a separate account call\r\n     * {withdrawPayments}.\r\n     *\r\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\r\n     * Make sure you trust the recipient, or are either following the\r\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\r\n     *\r\n     * @param payee Whose payments will be withdrawn.\r\n     */\r\n    function withdrawPayments(address payable payee) public virtual {\r\n        _escrow.withdraw(payee);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the payments owed to an address.\r\n     * @param dest The creditor's address.\r\n     */\r\n    function payments(address dest) public view returns (uint256) {\r\n        return _escrow.depositsOf(dest);\r\n    }\r\n\r\n    /**\r\n     * @dev Called by the payer to store the sent amount as credit to be pulled.\r\n     * Funds sent in this way are stored in an intermediate {Escrow} contract, so\r\n     * there is no danger of them being spent before withdrawal.\r\n     *\r\n     * @param dest The destination address of the funds.\r\n     * @param amount The amount to transfer.\r\n     */\r\n    function _asyncTransfer(address dest, uint256 amount) internal virtual {\r\n        _escrow.deposit{ value: amount }(dest);\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\ninterface ISendValueProxy {\r\n    function sendValue(address payable _to) external payable;\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract that attempts to send value to an address.\r\n */\r\ncontract SendValueProxy is ISendValueProxy {\r\n    /**\r\n     * @dev Send some wei to the address.\r\n     * @param _to address to send some value to.\r\n     */\r\n    function sendValue(address payable _to) external override payable {\r\n        // Note that `<address>.transfer` limits gas sent to receiver. It may\r\n        // not support complex contract operations in the future.\r\n        _to.transfer(msg.value);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract with a ISendValueProxy that will catch reverts when attempting to transfer funds.\r\n */\r\ncontract MaybeSendValue  {\r\n    SendValueProxy proxy;\r\n\r\n    // constructor() internal {\r\n    //     proxy = new SendValueProxy();\r\n    // }\r\n\r\n      constructor() public {\r\n        proxy = new SendValueProxy();\r\n    }\r\n\r\n    /**\r\n     * @dev Maybe send some wei to the address via a proxy. Returns true on success and false if transfer fails.\r\n     * @param _to address to send some value to.\r\n     * @param _value uint256 amount to send.\r\n     */\r\n    function maybeSendValue(address payable _to, uint256 _value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        // Call sendValue on the proxy contract and forward the mesg.value.\r\n        /* solium-disable-next-line */\r\n        (bool success,) = address(proxy).call{value : _value}(\r\n            abi.encodeWithSignature(\"sendValue(address)\", _to)\r\n        );\r\n        return success;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract to make payments. If a direct transfer fails, it will store the payment in escrow until the address decides to pull the payment.\r\n */\r\ncontract SendValueOrEscrow is MaybeSendValue, PullPaymentUpgradeable {\r\n    /////////////////////////////////////////////////////////////////////////\r\n    // Events\r\n    /////////////////////////////////////////////////////////////////////////\r\n    event SendValue(address indexed _payee, uint256 amount);\r\n\r\n    /////////////////////////////////////////////////////////////////////////\r\n    // sendValueOrEscrow\r\n    /////////////////////////////////////////////////////////////////////////\r\n    /**\r\n     * @dev Send some value to an address.\r\n     * @param _to address to send some value to.\r\n     * @param _value uint256 amount to send.\r\n     */\r\n    function sendValueOrEscrow(address payable _to, uint256 _value) internal {\r\n        // attempt to make the transfer\r\n        _to.transfer(_value);\r\n        // if it fails, transfer it into escrow for them to redeem at their will.\r\n        // if (!successfulTransfer) {\r\n        //     _asyncTransfer(_to, _value);\r\n        // }\r\n        emit SendValue(_to, _value);\r\n    }\r\n\r\n    function sendViaTransfer(address payable _to, uint256 _value) internal {\r\n        // This function is no longer recommended for sending Ether.\r\n        _to.transfer(_value);\r\n    }\r\n\r\n    function sendViaSend(address payable _to, uint256 _value) internal {\r\n        // Send returns a boolean value indicating success or failure.\r\n        // This function is not recommended for sending Ether.\r\n        bool sent = _to.send(_value);\r\n        require(sent, \"Failed to send Ether\");\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Payments contract for SuperRare Marketplaces.\r\n */\r\ncontract Payments is SendValueOrEscrow {\r\n    using SafeMathUpgradeable for uint256;\r\n    using SafeMathUpgradeable for uint8;\r\n\r\n    /////////////////////////////////////////////////////////////////////////\r\n    // refund\r\n    /////////////////////////////////////////////////////////////////////////\r\n    /**\r\n     * @dev Internal function to refund an address. Typically for canceled bids or offers.\r\n     * Requirements:\r\n     *\r\n     *  - _payee cannot be the zero address\r\n     *\r\n     * @param _marketplacePercentage uint8 percentage of the fee for the marketplace.\r\n     * @param _amount uint256 value to be split.\r\n     * @param _payee address seller of the token.\r\n     */\r\n    function refund(\r\n        uint8 _marketplacePercentage,\r\n        address payable _payee,\r\n        uint256 _amount\r\n    ) internal {\r\n        require(\r\n            _payee != address(0),\r\n            \"refund::no payees can be the zero address\"\r\n        );\r\n\r\n        if (_amount > 0) {\r\n            SendValueOrEscrow.sendValueOrEscrow(\r\n                _payee,\r\n                _amount.add(\r\n                    calcPercentagePayment(_amount, _marketplacePercentage)\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n    /////////////////////////////////////////////////////////////////////////\r\n    // payout\r\n    /////////////////////////////////////////////////////////////////////////\r\n    /**\r\n     * @dev Internal function to pay the seller, creator, and maintainer.\r\n     * Requirements:\r\n     *\r\n     *  - _marketplacePercentage + _royaltyPercentage + _primarySalePercentage <= 100\r\n     *  - no payees can be the zero address\r\n     *\r\n     * @param _amount uint256 value to be split.\r\n     * @param _isPrimarySale bool of whether this is a primary sale.\r\n     * @param _marketplacePercentage uint8 percentage of the fee for the marketplace.\r\n     * @param _royaltyPercentage uint8 percentage of the fee for the royalty.\r\n     * @param _primarySalePercentage uint8 percentage primary sale fee for the marketplace.\r\n     * @param _payee address seller of the token.\r\n     * @param _marketplacePayee address seller of the token.\r\n     * @param _royaltyPayee address seller of the token.\r\n     * @param _primarySalePayee address seller of the token.\r\n     */\r\n    function payout(\r\n        uint256 _amount,\r\n        bool _isPrimarySale,\r\n        uint8 _marketplacePercentage,\r\n        uint8 _royaltyPercentage,\r\n        uint8 _primarySalePercentage,\r\n        address payable _payee,\r\n        address payable _marketplacePayee,\r\n        address payable _royaltyPayee,\r\n        address payable _primarySalePayee\r\n    ) internal {\r\n        require(\r\n            _marketplacePercentage <= 100,\r\n            \"payout::marketplace percentage cannot be above 100\"\r\n        );\r\n        require(\r\n            _royaltyPercentage.add(_primarySalePercentage) <= 100,\r\n            \"payout::percentages cannot go beyond 100\"\r\n        );\r\n        require(\r\n            _payee != address(0) &&\r\n                _primarySalePayee != address(0) &&\r\n                _marketplacePayee != address(0) &&\r\n                _royaltyPayee != address(0),\r\n            \"payout::no payees can be the zero address\"\r\n        );\r\n\r\n        // Note:: Solidity is kind of terrible in that there is a limit to local\r\n        //        variables that can be put into the stack. The real pain is that\r\n        //        one can put structs, arrays, or mappings into memory but not basic\r\n        //        data types. Hence our payments array that stores these values.\r\n        uint256[4] memory payments;\r\n\r\n        // uint256 marketplacePayment\r\n        payments[0] = calcPercentagePayment(_amount, _marketplacePercentage);\r\n\r\n        // uint256 royaltyPayment\r\n        payments[1] = calcRoyaltyPayment(\r\n            _isPrimarySale,\r\n            _amount,\r\n            _royaltyPercentage\r\n        );\r\n\r\n        // uint256 primarySalePayment\r\n        payments[2] = calcPrimarySalePayment(\r\n            _isPrimarySale,\r\n            _amount,\r\n            _primarySalePercentage\r\n        );\r\n\r\n        // uint256 payeePayment\r\n        payments[3] = _amount.sub(payments[1]).sub(payments[2]);\r\n\r\n        // marketplacePayment\r\n        if (payments[0] > 0) {\r\n            SendValueOrEscrow.sendValueOrEscrow(_marketplacePayee, payments[0]);\r\n            // SendValueOrEscrow.sendViaCall(_marketplacePayee, payments[0]-1);\r\n        }\r\n\r\n        // royaltyPayment\r\n        if (payments[1] > 0) {\r\n            SendValueOrEscrow.sendValueOrEscrow(_royaltyPayee, payments[1]);\r\n            // SendValueOrEscrow.sendViaCall(_royaltyPayee, payments[1]-1);\r\n        }\r\n        // primarySalePayment\r\n        if (payments[2] > 0) {\r\n            SendValueOrEscrow.sendValueOrEscrow(_primarySalePayee, payments[2]);\r\n            // SendValueOrEscrow.sendViaCall(_primarySalePayee, payments[2]-1);\r\n        }\r\n        // payeePayment\r\n        if (payments[3] > 0) {\r\n            SendValueOrEscrow.sendValueOrEscrow(_payee, payments[3]);\r\n            // SendValueOrEscrow.sendViaCall(_payee, payments[3]-1);\r\n        }\r\n    }\r\n    \r\n    function simplePayout(\r\n        uint256 _amount,\r\n        address payable _payee\r\n        \r\n        ) internal {\r\n            \r\n            require(\r\n            _payee != address(0),\r\n            \"payout::no payees can be the zero address\"\r\n            );\r\n            \r\n            SendValueOrEscrow.sendValueOrEscrow(_payee, _amount);\r\n            \r\n        }\r\n\r\n    /////////////////////////////////////////////////////////////////////////\r\n    // calcRoyaltyPayment\r\n    /////////////////////////////////////////////////////////////////////////\r\n    /**\r\n     * @dev Private function to calculate Royalty amount.\r\n     *      If primary sale: 0\r\n     *      If no royalty percentage: 0\r\n     *      otherwise: royalty in wei\r\n     * @param _isPrimarySale bool of whether this is a primary sale\r\n     * @param _amount uint256 value to be split\r\n     * @param _percentage uint8 royalty percentage\r\n     * @return uint256 wei value owed for royalty\r\n     */\r\n    function calcRoyaltyPayment(\r\n        bool _isPrimarySale,\r\n        uint256 _amount,\r\n        uint8 _percentage\r\n    ) private pure returns (uint256) {\r\n        if (_isPrimarySale) {\r\n            return 0;\r\n        }\r\n        return calcPercentagePayment(_amount, _percentage);\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////\r\n    // calcPrimarySalePayment\r\n    /////////////////////////////////////////////////////////////////////////\r\n    /**\r\n     * @dev Private function to calculate PrimarySale amount.\r\n     *      If not primary sale: 0\r\n     *      otherwise: primary sale in wei+\r\n     * @param _isPrimarySale bool of whether this is a primary sale\r\n     * @param _amount uint256 value to be split\r\n     * @param _percentage uint8 royalty percentage\r\n     * @return uint256 wei value owed for primary sale\r\n     */\r\n    function calcPrimarySalePayment(\r\n        bool _isPrimarySale,\r\n        uint256 _amount,\r\n        uint8 _percentage\r\n    ) private pure returns (uint256) {\r\n        if (_isPrimarySale) {\r\n            return calcPercentagePayment(_amount, _percentage);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////\r\n    // calcPercentagePayment\r\n    /////////////////////////////////////////////////////////////////////////\r\n    /**\r\n     * @dev Internal function to calculate percentage value.\r\n     * @param _amount uint256 wei value\r\n     * @param _percentage uint8  percentage\r\n     * @return uint256 wei value based on percentage.\r\n     */\r\n    function calcPercentagePayment(uint256 _amount, uint8 _percentage)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return _amount.mul(_percentage).div(100);\r\n    }\r\n}\r\n\r\ncontract MarketPlace is OwnableUpgradeable, Payments {\r\n    using SafeMathUpgradeable for uint256;\r\n    // Market fee on sales\r\n    uint8 public marketplacePercentage = 10; // 10% cut\r\n\r\n\r\n    /////////////////////////////////////////////////////////////////////////\r\n    // Structs\r\n    /////////////////////////////////////////////////////////////////////////\r\n\r\n    // The active bid for a given token, contains the bidder, the marketplace fee at the time of the bid, and the amount of wei placed on the token\r\n    struct ActiveBid {\r\n        address payable bidder;\r\n        uint8 marketplaceFee;\r\n        uint256 amount;\r\n    }\r\n\r\n    // The sale price for a given token containing the seller and the amount of wei to be sold for\r\n    struct SalePrice {\r\n        address payable seller;\r\n        uint256 amount;\r\n    }\r\n\r\n\r\n    // Mapping from ERC721 contract to mapping of tokenId to sale price.\r\n    mapping(address => mapping(uint256 => SalePrice)) private tokenPrices;\r\n\r\n    // Mapping of ERC721 contract to mapping of token ID to the current bid amount.\r\n    mapping(address => mapping(uint256 => ActiveBid)) private tokenCurrentBids;\r\n\r\n    // A minimum increase in bid amount when out bidding someone.\r\n    uint8 public minimumBidIncreasePercentage; // 10 = 10%\r\n\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    // Events\r\n    /////////////////////////////////////////////////////////////////////////////\r\n    event ChangedMarketPlacePercentage(\r\n        uint8 marketplacePercentage\r\n    );\r\n    event Sold(\r\n        address indexed _originContract,\r\n        address indexed _buyer,\r\n        address indexed _seller,\r\n        uint256 _amount,\r\n        uint256 _tokenId\r\n    );\r\n\r\n    event SetSalePrice(\r\n        address indexed _originContract,\r\n        uint256 _amount,\r\n        uint256 _tokenId\r\n    );\r\n\r\n    event Bid(\r\n        address indexed _originContract,\r\n        address indexed _bidder,\r\n        uint256 _amount,\r\n        uint256 _tokenId\r\n    );\r\n\r\n    event AcceptBid(\r\n        address indexed _originContract,\r\n        address indexed _bidder,\r\n        address indexed _seller,\r\n        uint256 _amount,\r\n        uint256 _tokenId\r\n    );\r\n\r\n    event CancelBid(\r\n        address indexed _originContract,\r\n        address indexed _bidder,\r\n        uint256 _amount,\r\n        uint256 _tokenId\r\n    );\r\n\r\n    /////////////////////////////////////////////////////////////////////////\r\n    // Constructor\r\n    /////////////////////////////////////////////////////////////////////////\r\n    /**\r\n     * @dev Initializes the contract setting the market settings and creator royalty interfaces.\r\n     */\r\n    constructor()\r\n        public\r\n    {\r\n     \r\n        minimumBidIncreasePercentage = 10;\r\n        __Ownable_init();\r\n        \r\n    }\r\n     /**\r\n     * @dev Sets the share cut for the owner of the contract that's\r\n     *  charged to the seller on a successful sale\r\n     * @param _marketplacePercentage - Share amount, from 0 to 99\r\n     */\r\n    function setMarketPlacePercentage(uint8 _marketplacePercentage) external onlyOwner {\r\n        require(\r\n            _marketplacePercentage < 100,\r\n            \"The owner cut should be less then 100%\"\r\n        );\r\n\r\n        marketplacePercentage = _marketplacePercentage;\r\n        emit ChangedMarketPlacePercentage(marketplacePercentage);\r\n    }\r\n    /**\r\n     * @dev Admin function to set the minimum bid increase percentage.\r\n     * Rules:\r\n     * - only owner\r\n     * @param _percentage uint8 to set as the new percentage.\r\n     */\r\n    function setMinimumBidIncreasePercentage(uint8 _percentage)\r\n        public\r\n        onlyOwner\r\n    {\r\n        minimumBidIncreasePercentage = _percentage;\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////\r\n    // Modifiers (as functions)\r\n    /////////////////////////////////////////////////////////////////////////\r\n    /**\r\n     * @dev Checks that the token owner is approved for the ERC721Market\r\n     * @param _originContract address of the contract storing the token.\r\n     * @param _tokenId uint256 ID of the token\r\n     */\r\n    function ownerMustHaveMarketplaceApproved(\r\n        address _originContract,\r\n        uint256 _tokenId\r\n    ) internal view {\r\n        IERC721 erc721 = IERC721(_originContract);\r\n        address owner = erc721.ownerOf(_tokenId);\r\n        require(\r\n            erc721.isApprovedForAll(owner, address(this)),\r\n            \"owner must have approved contract\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Checks that the token is owned by the sender\r\n     * @param _originContract address of the contract storing the token.\r\n     * @param _tokenId uint256 ID of the token\r\n     */\r\n    function senderMustBeTokenOwner(address _originContract, uint256 _tokenId)\r\n        internal\r\n        view\r\n    {\r\n        IERC721 erc721 = IERC721(_originContract);\r\n        require(\r\n            erc721.ownerOf(_tokenId) == msg.sender,\r\n            \"sender must be the token owner\"\r\n        );\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////\r\n    // setSalePrice\r\n    /////////////////////////////////////////////////////////////////////////\r\n    /**\r\n     * @dev Set the token for sale. The owner of the token must be the sender and have the marketplace approved.\r\n     * @param _originContract address of the contract storing the token.\r\n     * @param _tokenId uint256 ID of the token\r\n     * @param _amount uint256 wei value that the item is for sale\r\n     */\r\n    function setSalePrice(\r\n        address _originContract,\r\n        uint256 _tokenId,\r\n        uint256 _amount\r\n    ) external {\r\n        // The owner of the token must have the marketplace approved\r\n        ownerMustHaveMarketplaceApproved(_originContract, _tokenId);\r\n\r\n        // The sender must be the token owner\r\n        senderMustBeTokenOwner(_originContract, _tokenId);\r\n\r\n        if (_amount == 0) {\r\n            // Set not for sale and exit\r\n            _resetTokenPrice(_originContract, _tokenId);\r\n            emit SetSalePrice(_originContract, _amount, _tokenId);\r\n            return;\r\n        }\r\n\r\n        tokenPrices[_originContract][_tokenId] = SalePrice(msg.sender, _amount);\r\n        emit SetSalePrice(_originContract, _amount, _tokenId);\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////\r\n    // safeBuy\r\n    /////////////////////////////////////////////////////////////////////////\r\n    /**\r\n     * @dev Purchase the token with the expected amount. The current token owner must have the marketplace approved.\r\n     * @param _originContract address of the contract storing the token.\r\n     * @param _tokenId uint256 ID of the token\r\n     * @param _amount uint256 wei amount expecting to purchase the token for.\r\n     */\r\n    function safeBuy(\r\n        address _originContract,\r\n        uint256 _tokenId,\r\n        uint256 _amount\r\n    ) external payable {\r\n        // Make sure the tokenPrice is the expected amount\r\n        require(\r\n            tokenPrices[_originContract][_tokenId].amount == _amount,\r\n            \"safeBuy::Purchase amount must equal expected amount\"\r\n        );\r\n        buy(_originContract, _tokenId);\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////\r\n    // buy\r\n    /////////////////////////////////////////////////////////////////////////\r\n    /**\r\n     * @dev Purchases the token if it is for sale.\r\n     * @param _originContract address of the contract storing the token.\r\n     * @param _tokenId uint256 ID of the token.\r\n     */\r\n    function buy(address _originContract, uint256 _tokenId) public payable {\r\n        // The owner of the token must have the marketplace approved\r\n        ownerMustHaveMarketplaceApproved(_originContract, _tokenId);\r\n\r\n        // Check that the person who set the price still owns the token.\r\n        require(\r\n            _priceSetterStillOwnsTheToken(_originContract, _tokenId),\r\n            \"buy::Current token owner must be the person to have the latest price.\"\r\n        );\r\n\r\n        SalePrice memory sp = tokenPrices[_originContract][_tokenId];\r\n        \r\n        // Check that token is for sale.\r\n        require(sp.amount > 0, \"buy::Tokens priced at 0 are not for sale.\");\r\n\r\n        // Check that enough ether was sent.\r\n        require(\r\n            tokenPriceFeeIncluded(_originContract, _tokenId) == msg.value,\r\n            \"buy::Must purchase the token for the correct price(buy)\"\r\n        );\r\n\r\n        WUNToken  token = WUNToken(_originContract);\r\n        uint8 royalty = token.getTokenRoyality(_tokenId);\r\n        address creator = token.getTokenCreator(_tokenId);\r\n\r\n        // Get token contract details.\r\n        IERC721 erc721 = IERC721(_originContract);\r\n        address tokenOwner = erc721.ownerOf(_tokenId);\r\n\r\n        // Wipe the token price.\r\n        _resetTokenPrice(_originContract, _tokenId);\r\n\r\n        // Transfer token.\r\n        erc721.safeTransferFrom(tokenOwner, msg.sender, _tokenId);\r\n\r\n        // if the buyer had an existing bid, return it\r\n        if (_addressHasBidOnToken(msg.sender, _originContract, _tokenId)) {\r\n            _refundBid(_originContract, _tokenId);\r\n        }\r\n\r\n        // Payout all parties.\r\n        address payable owner = _makePayable(owner());\r\n        uint256 paymentMarketPlace = calcPercentagePayment(sp.amount, marketplacePercentage);      //amount, _marketplacePercentage\r\n        uint256 paymentRoyalty= calcPercentagePayment(sp.amount, royalty);          //amount, _royaltyPercentage\r\n        uint256 paymentPayee = (sp.amount).sub(paymentMarketPlace).sub(paymentRoyalty).sub(100);       //sub 100 to ensure that available balance is always > sending balance\r\n        \r\n        if(paymentMarketPlace > 0){\r\n            \r\n            Payments.simplePayout(\r\n                paymentMarketPlace,\r\n                _makePayable(owner)\r\n            );\r\n        }\r\n        if(paymentRoyalty > 0){\r\n        \r\n            Payments.simplePayout(\r\n                paymentRoyalty,\r\n                _makePayable(creator)\r\n            );\r\n        }\r\n        \r\n        if(paymentPayee > 0){\r\n            \r\n            Payments.simplePayout(\r\n                paymentPayee,\r\n                _makePayable(tokenOwner)\r\n            );\r\n        }\r\n        \r\n        emit Sold(_originContract, msg.sender, tokenOwner, sp.amount, _tokenId);\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////\r\n    // tokenPrice\r\n    /////////////////////////////////////////////////////////////////////////\r\n    /**\r\n     * @dev Gets the sale price of the token\r\n     * @param _originContract address of the contract storing the token.\r\n     * @param _tokenId uint256 ID of the token\r\n     * @return uint256 sale price of the token\r\n     */\r\n    function tokenPrice(address _originContract, uint256 _tokenId)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // The owner of the token must have the marketplace approved\r\n        ownerMustHaveMarketplaceApproved(_originContract, _tokenId); // TODO: Make sure to write test to verify that this returns 0 when it fails\r\n\r\n        if (_priceSetterStillOwnsTheToken(_originContract, _tokenId)) {\r\n            return tokenPrices[_originContract][_tokenId].amount;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////\r\n    // tokenPriceFeeIncluded\r\n    /////////////////////////////////////////////////////////////////////////\r\n    /**\r\n     * @dev Gets the sale price of the token including the marketplace fee.\r\n     * @param _originContract address of the contract storing the token.\r\n     * @param _tokenId uint256 ID of the token\r\n     * @return uint256 sale price of the token including the fee.\r\n     */\r\n    function tokenPriceFeeIncluded(address _originContract, uint256 _tokenId)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // The owner of the token must have the marketplace approved\r\n        ownerMustHaveMarketplaceApproved(_originContract, _tokenId); // TODO: Make sure to write test to verify that this returns 0 when it fails\r\n\r\n        if (_priceSetterStillOwnsTheToken(_originContract, _tokenId)) {\r\n            return\r\n                tokenPrices[_originContract][_tokenId].amount.add(0);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////\r\n    // bid\r\n    /////////////////////////////////////////////////////////////////////////\r\n    /**\r\n     * @dev Bids on the token, replacing the bid if the bid is higher than the current bid. You cannot bid on a token you already own.\r\n     * @param _newBidAmount uint256 value in wei to bid.\r\n     * @param _originContract address of the contract storing the token.\r\n     * @param _tokenId uint256 ID of the token\r\n     */\r\n    function bid(\r\n        uint256 _newBidAmount,\r\n        address _originContract,\r\n        uint256 _tokenId\r\n    ) external payable {\r\n        // Check that bid is greater than 0.\r\n        require(_newBidAmount > 0, \"bid::Cannot bid 0 Wei.\");\r\n\r\n        // Check that bid is higher than previous bid\r\n        uint256 currentBidAmount =\r\n            tokenCurrentBids[_originContract][_tokenId].amount;\r\n        require(\r\n            _newBidAmount > currentBidAmount &&\r\n                _newBidAmount >=\r\n                currentBidAmount.add(\r\n                    currentBidAmount.mul(minimumBidIncreasePercentage).div(100)\r\n                ),\r\n            \"bid::Must place higher bid than existing bid + minimum percentage.\"\r\n        );\r\n\r\n        // Check that enough ether was sent.\r\n        uint256 requiredCost =\r\n            _newBidAmount.add(\r\n                0\r\n            );\r\n        require(\r\n            requiredCost == msg.value,\r\n            \"bid::Must purchase the token for the correct price.\"\r\n        );\r\n\r\n        // Check that bidder is not owner.\r\n        IERC721 erc721 = IERC721(_originContract);\r\n        address tokenOwner = erc721.ownerOf(_tokenId);\r\n        require(tokenOwner != msg.sender, \"bid::Bidder cannot be owner.\");\r\n\r\n        // Refund previous bidder.\r\n        _refundBid(_originContract, _tokenId);\r\n\r\n        // Set the new bid.\r\n        _setBid(_newBidAmount, msg.sender, _originContract, _tokenId);\r\n\r\n        emit Bid(_originContract, msg.sender, _newBidAmount, _tokenId);\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////\r\n    // safeAcceptBid\r\n    /////////////////////////////////////////////////////////////////////////\r\n    /**\r\n     * @dev Accept the bid on the token with the expected bid amount.\r\n     * @param _originContract address of the contract storing the token.\r\n     * @param _tokenId uint256 ID of the token\r\n     * @param _amount uint256 wei amount of the bid\r\n     */\r\n    function safeAcceptBid(\r\n        address _originContract,\r\n        uint256 _tokenId,\r\n        uint256 _amount\r\n    ) external {\r\n        // Make sure accepting bid is the expected amount\r\n        require(\r\n            tokenCurrentBids[_originContract][_tokenId].amount == _amount,\r\n            \"safeAcceptBid::Bid amount must equal expected amount\"\r\n        );\r\n        acceptBid(_originContract, _tokenId);\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////\r\n    // acceptBid\r\n    /////////////////////////////////////////////////////////////////////////\r\n    /**\r\n     * @dev Accept the bid on the token.\r\n     * @param _originContract address of the contract storing the token.\r\n     * @param _tokenId uint256 ID of the token\r\n     */\r\n    function acceptBid(address _originContract, uint256 _tokenId) public {\r\n        // The owner of the token must have the marketplace approved\r\n        ownerMustHaveMarketplaceApproved(_originContract, _tokenId);\r\n\r\n        // The sender must be the token owner\r\n        senderMustBeTokenOwner(_originContract, _tokenId);\r\n\r\n        // Check that a bid exists.\r\n        require(\r\n            _tokenHasBid(_originContract, _tokenId),\r\n            \"acceptBid::Cannot accept a bid when there is none.\"\r\n        );\r\n\r\n        // Get current bid on token\r\n\r\n        ActiveBid memory currentBid =\r\n            tokenCurrentBids[_originContract][_tokenId];\r\n\r\n        // Wipe the token price and bid.\r\n        _resetTokenPrice(_originContract, _tokenId);\r\n        _resetBid(_originContract, _tokenId);\r\n\r\n        // Transfer token.\r\n        IERC721 erc721 = IERC721(_originContract);\r\n        erc721.safeTransferFrom(msg.sender, currentBid.bidder, _tokenId);\r\n\r\n        address payable owner = _makePayable(owner());\r\n        WUNToken  token = WUNToken(_originContract);\r\n        uint8 royalty = token.getTokenRoyality(_tokenId);\r\n        address creator = token.getTokenCreator(_tokenId);\r\n        // Payout all parties.\r\n        uint256 paymentMarketPlace = calcPercentagePayment(currentBid.amount, marketplacePercentage);      //amount, _marketplacePercentage\r\n        uint256 paymentRoyalty= calcPercentagePayment(currentBid.amount, royalty);          //amount, _royaltyPercentage\r\n        uint256 paymentPayee = (currentBid.amount).sub(paymentMarketPlace).sub(paymentRoyalty).sub(100);       //sub 100 to ensure that available balance is always > sending balance\r\n        \r\n        if(paymentMarketPlace > 0){\r\n            \r\n            Payments.simplePayout(\r\n                paymentMarketPlace,\r\n                _makePayable(owner)\r\n            );\r\n        }\r\n        if(paymentRoyalty > 0){\r\n        \r\n            Payments.simplePayout(\r\n                paymentRoyalty,\r\n                _makePayable(creator)\r\n            );\r\n        }\r\n        \r\n        if(paymentPayee > 0){\r\n            \r\n            Payments.simplePayout(\r\n                paymentPayee,\r\n                _makePayable(msg.sender)\r\n            );\r\n        }\r\n\r\n        emit AcceptBid(\r\n            _originContract,\r\n            currentBid.bidder,\r\n            msg.sender,\r\n            currentBid.amount,\r\n            _tokenId\r\n        );\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////\r\n    // cancelBid\r\n    /////////////////////////////////////////////////////////////////////////\r\n    /**\r\n     * @dev Cancel the bid on the token.\r\n     * @param _originContract address of the contract storing the token.\r\n     * @param _tokenId uint256 ID of the token.\r\n     */\r\n    function cancelBid(address _originContract, uint256 _tokenId) external {\r\n        // Check that sender has a current bid.\r\n        require(\r\n            _addressHasBidOnToken(msg.sender, _originContract, _tokenId),\r\n            \"cancelBid::Cannot cancel a bid if sender hasn't made one.\"\r\n        );\r\n\r\n        // Refund the bidder.\r\n        _refundBid(_originContract, _tokenId);\r\n\r\n        emit CancelBid(\r\n            _originContract,\r\n            msg.sender,\r\n            tokenCurrentBids[_originContract][_tokenId].amount,\r\n            _tokenId\r\n        );\r\n    }\r\n\r\n    function transferWithTax(address payable recipient, uint256 percentage) public payable {\r\n        require(msg.value > 0, \"Amount should be greater then zero.\");\r\n        require(percentage > 0, \"Percentage should be greater then zero.\");\r\n        uint256 tax = (msg.value * percentage) / 100;\r\n        uint256 netAmount = msg.value - tax;\r\n        address payable owner = _makePayable(owner());\r\n\r\n        require(netAmount > 0, \"Amount after tax must be greater than 0\");\r\n        require(owner.balance >= tax, \"Insufficient balance to pay tax\");\r\n        \r\n        owner.transfer(tax);\r\n        recipient.transfer(netAmount);\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////\r\n    // currentBidDetailsOfToken\r\n    /////////////////////////////////////////////////////////////////////////\r\n    /**\r\n     * @dev Function to get current bid and bidder of a token.\r\n     * @param _originContract address of ERC721 contract.\r\n     * @param _tokenId uin256 id of the token.\r\n     */\r\n    function currentBidDetailsOfToken(address _originContract, uint256 _tokenId)\r\n        public\r\n        view\r\n        returns (uint256, address)\r\n    {\r\n        return (\r\n            tokenCurrentBids[_originContract][_tokenId].amount,\r\n            tokenCurrentBids[_originContract][_tokenId].bidder\r\n        );\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////\r\n    // _priceSetterStillOwnsTheToken\r\n    /////////////////////////////////////////////////////////////////////////\r\n    /**\r\n     * @dev Checks that the token is owned by the same person who set the sale price.\r\n     * @param _originContract address of the contract storing the token.\r\n     * @param _tokenId uint256 id of the.\r\n     */\r\n    function _priceSetterStillOwnsTheToken(\r\n        address _originContract,\r\n        uint256 _tokenId\r\n    ) internal view returns (bool) {\r\n        IERC721 erc721 = IERC721(_originContract);\r\n        return\r\n            erc721.ownerOf(_tokenId) ==\r\n            tokenPrices[_originContract][_tokenId].seller;\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////\r\n    // _resetTokenPrice\r\n    /////////////////////////////////////////////////////////////////////////\r\n    /**\r\n     * @dev Internal function to set token price to 0 for a given contract.\r\n     * @param _originContract address of ERC721 contract.\r\n     * @param _tokenId uin256 id of the token.\r\n     */\r\n    function _resetTokenPrice(address _originContract, uint256 _tokenId)\r\n        internal\r\n    {\r\n        tokenPrices[_originContract][_tokenId] = SalePrice(address(0), 0);\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////\r\n    // _addressHasBidOnToken\r\n    /////////////////////////////////////////////////////////////////////////\r\n    /**\r\n     * @dev Internal function see if the given address has an existing bid on a token.\r\n     * @param _bidder address that may have a current bid.\r\n     * @param _originContract address of ERC721 contract.\r\n     * @param _tokenId uin256 id of the token.\r\n     */\r\n    function _addressHasBidOnToken(\r\n        address _bidder,\r\n        address _originContract,\r\n        uint256 _tokenId\r\n    ) internal view returns (bool) {\r\n        return tokenCurrentBids[_originContract][_tokenId].bidder == _bidder;\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////\r\n    // _tokenHasBid\r\n    /////////////////////////////////////////////////////////////////////////\r\n    /**\r\n     * @dev Internal function see if the token has an existing bid.\r\n     * @param _originContract address of ERC721 contract.\r\n     * @param _tokenId uin256 id of the token.\r\n     */\r\n    function _tokenHasBid(address _originContract, uint256 _tokenId)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return tokenCurrentBids[_originContract][_tokenId].bidder != address(0);\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////\r\n    // _refundBid\r\n    /////////////////////////////////////////////////////////////////////////\r\n    /**\r\n     * @dev Internal function to return an existing bid on a token to the\r\n     *      bidder and reset bid.\r\n     * @param _originContract address of ERC721 contract.\r\n     * @param _tokenId uin256 id of the token.\r\n     */\r\n    function _refundBid(address _originContract, uint256 _tokenId) internal {\r\n        ActiveBid memory currentBid =\r\n            tokenCurrentBids[_originContract][_tokenId];\r\n        if (currentBid.bidder == address(0)) {\r\n            return;\r\n        }\r\n        _resetBid(_originContract, _tokenId);\r\n        Payments.refund(\r\n            currentBid.marketplaceFee,\r\n            currentBid.bidder,\r\n            currentBid.amount\r\n        );\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////\r\n    // _resetBid\r\n    /////////////////////////////////////////////////////////////////////////\r\n    /**\r\n     * @dev Internal function to reset bid by setting bidder and bid to 0.\r\n     * @param _originContract address of ERC721 contract.\r\n     * @param _tokenId uin256 id of the token.\r\n     */\r\n    function _resetBid(address _originContract, uint256 _tokenId) internal {\r\n        tokenCurrentBids[_originContract][_tokenId] = ActiveBid(\r\n            address(0),\r\n            0,\r\n            0\r\n        );\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////\r\n    // _setBid\r\n    /////////////////////////////////////////////////////////////////////////\r\n    /**\r\n     * @dev Internal function to set a bid.\r\n     * @param _amount uint256 value in wei to bid. Does not include marketplace fee.\r\n     * @param _bidder address of the bidder.\r\n     * @param _originContract address of ERC721 contract.\r\n     * @param _tokenId uin256 id of the token.\r\n     */\r\n    function _setBid(\r\n        uint256 _amount,\r\n        address payable _bidder,\r\n        address _originContract,\r\n        uint256 _tokenId\r\n    ) internal {\r\n        // Check bidder not 0 address.\r\n        require(_bidder != address(0), \"Bidder cannot be 0 address.\");\r\n\r\n        // Set bid.\r\n        tokenCurrentBids[_originContract][_tokenId] = ActiveBid(\r\n            _bidder,\r\n            0,\r\n            _amount\r\n        );\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////\r\n    // _makePayable\r\n    /////////////////////////////////////////////////////////////////////////\r\n    /**\r\n     * @dev Internal function to set a bid.\r\n     * @param _address non-payable address\r\n     * @return payable address\r\n     */\r\n    function _makePayable(address _address)\r\n        internal\r\n        pure\r\n        returns (address payable)\r\n    {\r\n        return address(uint160(_address));\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_originContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"AcceptBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_originContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Bid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_originContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"CancelBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"marketplacePercentage\",\"type\":\"uint8\"}],\"name\":\"ChangedMarketPlacePercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_originContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"SetSalePrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_originContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_originContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"acceptBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBidAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_originContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_originContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_originContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_originContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"currentBidDetailsOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketplacePercentage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumBidIncreasePercentage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_originContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"safeAcceptBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_originContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"safeBuy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_marketplacePercentage\",\"type\":\"uint8\"}],\"name\":\"setMarketPlacePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_percentage\",\"type\":\"uint8\"}],\"name\":\"setMinimumBidIncreasePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_originContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_originContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_originContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenPriceFeeIncluded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"transferWithTax\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"withdrawPayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MarketPlace", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ee31afafba8a218f55ff90c4f3be7e608680a27b51f6993c9624d45a7819f835"}