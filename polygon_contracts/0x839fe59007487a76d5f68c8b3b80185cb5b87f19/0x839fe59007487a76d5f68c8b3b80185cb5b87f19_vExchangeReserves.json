{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/vExchangeReserves.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.18;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/Multicall.sol';\\n\\nimport './types.sol';\\nimport './libraries/PoolAddress.sol';\\nimport './interfaces/IvPair.sol';\\nimport './interfaces/IvExchangeReserves.sol';\\nimport './interfaces/IvPairFactory.sol';\\n\\ncontract vExchangeReserves is IvExchangeReserves, Multicall {\\n    address public immutable factory;\\n    uint256 public incentivesLimitPct;\\n\\n    constructor(address _factory) {\\n        factory = _factory;\\n        incentivesLimitPct = 1;\\n    }\\n\\n    function changeIncentivesLimitPct(uint256 newLimit) external override {\\n        require(msg.sender == IvPairFactory(factory).admin(), 'Admin only');\\n        require(newLimit <= 100, 'Invalid limit');\\n        incentivesLimitPct = newLimit;\\n        emit NewIncentivesLimit(newLimit);\\n    }\\n\\n    function vFlashSwapCallback(\\n        address,\\n        address,\\n        uint256 requiredBackAmount,\\n        bytes calldata data\\n    ) external override {\\n        ExchangeReserveCallbackParams memory decodedData = abi.decode(\\n            data,\\n            (ExchangeReserveCallbackParams)\\n        );\\n\\n        (address jk0, address jk1) = IvPair(decodedData.jkPair1).getTokens();\\n        require(\\n            msg.sender == PoolAddress.computeAddress(factory, jk0, jk1),\\n            'IC'\\n        );\\n\\n        (address _leftoverToken, uint256 _leftoverAmount) = IvPair(\\n            decodedData.jkPair2\\n        ).swapNativeToReserve(\\n                requiredBackAmount,\\n                decodedData.ikPair2,\\n                decodedData.jkPair1,\\n                incentivesLimitPct,\\n                new bytes(0)\\n            );\\n\\n        if (_leftoverAmount > 0)\\n            SafeERC20.safeTransfer(\\n                IERC20(_leftoverToken),\\n                decodedData.caller,\\n                _leftoverAmount\\n            );\\n\\n        emit ReservesExchanged(\\n            decodedData.jkPair1,\\n            decodedData.ikPair1,\\n            decodedData.jkPair2,\\n            decodedData.ikPair2,\\n            requiredBackAmount,\\n            decodedData.flashAmountOut,\\n            _leftoverToken,\\n            _leftoverAmount\\n        );\\n    }\\n\\n    function exchange(\\n        address jkPair1,\\n        address ikPair1,\\n        address jkPair2,\\n        address ikPair2,\\n        uint256 flashAmountOut\\n    ) external override {\\n        (address _jkToken0, address _jkToken1) = IvPair(jkPair1).getTokens();\\n        require(\\n            PoolAddress.computeAddress(factory, _jkToken0, _jkToken1) ==\\n                jkPair1,\\n            'IJKP1'\\n        );\\n        (_jkToken0, _jkToken1) = IvPair(jkPair2).getTokens();\\n        require(\\n            PoolAddress.computeAddress(factory, _jkToken0, _jkToken1) ==\\n                jkPair2,\\n            'IJKP2'\\n        );\\n\\n        IvPair(jkPair1).swapNativeToReserve(\\n            flashAmountOut,\\n            ikPair1,\\n            jkPair2,\\n            incentivesLimitPct,\\n            abi.encode(\\n                ExchangeReserveCallbackParams({\\n                    jkPair1: jkPair1,\\n                    ikPair1: ikPair1,\\n                    jkPair2: jkPair2,\\n                    ikPair2: ikPair2,\\n                    flashAmountOut: flashAmountOut,\\n                    caller: msg.sender\\n                })\\n            )\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/types.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.8.18;\\n\\nstruct MaxTradeAmountParams {\\n    uint256 fee;\\n    uint256 balance0;\\n    uint256 balance1;\\n    uint256 vBalance0;\\n    uint256 vBalance1;\\n    uint256 reserveRatioFactor;\\n    uint256 priceFeeFactor;\\n    uint256 maxReserveRatio;\\n    uint256 reserves;\\n    uint256 reservesBaseValueSum;\\n}\\n\\nstruct VirtualPoolModel {\\n    uint24 fee;\\n    address token0;\\n    address token1;\\n    uint256 balance0;\\n    uint256 balance1;\\n    address commonToken;\\n    address jkPair;\\n    address ikPair;\\n}\\n\\nstruct VirtualPoolTokens {\\n    address jk0;\\n    address jk1;\\n    address ik0;\\n    address ik1;\\n}\\n\\nstruct ExchangeReserveCallbackParams {\\n    address jkPair1;\\n    address ikPair1;\\n    address jkPair2;\\n    address ikPair2;\\n    address caller;\\n    uint256 flashAmountOut;\\n}\\n\\nstruct SwapCallbackData {\\n    address caller;\\n    uint256 tokenInMax;\\n    uint ETHValue;\\n    address jkPool;\\n}\\n\\nstruct PoolCreationDefaults {\\n    address factory;\\n    address token0;\\n    address token1;\\n    uint16 fee;\\n    uint16 vFee;\\n    uint256 maxReserveRatio;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IvExchangeReserves.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.8.18;\\n\\nimport './IvFlashSwapCallback.sol';\\n\\ninterface IvExchangeReserves is IvFlashSwapCallback {\\n    event ReservesExchanged(\\n        address jkPair1,\\n        address ikPair1,\\n        address jkPair2,\\n        address ikPair2,\\n        uint256 requiredBackAmount,\\n        uint256 flashAmountOut,\\n        address leftOverToken,\\n        uint leftOverAmount\\n    );\\n\\n    event NewIncentivesLimit(uint256 newLimit);\\n\\n    function factory() external view returns (address);\\n\\n    function exchange(\\n        address jkPair1,\\n        address ikPair1,\\n        address jkPair2,\\n        address ikPair2,\\n        uint256 flashAmountOut\\n    ) external;\\n\\n    function changeIncentivesLimitPct(uint256 newLimit) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/PoolAddress.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.8.18;\\n\\n/// @title Provides functions for deriving a pool address from the factory and token\\nlibrary PoolAddress {\\n    bytes32 internal constant POOL_INIT_CODE_HASH =\\n        0x637bc1e6555f050fef1c3804f2f03647a960ac0a39ac52c519c3c6d9da312ae0;\\n\\n    function orderAddresses(\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (address token0, address token1) {\\n        return (tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA));\\n    }\\n\\n    function getSalt(\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (bytes32 salt) {\\n        (address token0, address token1) = orderAddresses(tokenA, tokenB);\\n        salt = keccak256(abi.encode(token0, token1));\\n    }\\n\\n    function computeAddress(\\n        address factory,\\n        address token0,\\n        address token1\\n    ) internal pure returns (address pool) {\\n        bytes32 _salt = getSalt(token0, token1);\\n\\n        pool = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            bytes1(0xff),\\n                            factory,\\n                            _salt,\\n                            POOL_INIT_CODE_HASH\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IvPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.8.18;\\n\\nimport '../types.sol';\\n\\ninterface IvPair {\\n    event TestEvent(\\n        VirtualPoolModel vPool,\\n        uint256 amountIn,\\n        uint256 maxTradeAmount\\n    );\\n\\n    event Mint(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint lpTokens,\\n        uint poolLPTokens\\n    );\\n\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to,\\n        uint256 totalSupply\\n    );\\n\\n    event Swap(\\n        address indexed sender,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        address indexed to\\n    );\\n\\n    event SwapReserve(\\n        address indexed sender,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        address ikPool,\\n        address indexed to\\n    );\\n\\n    event AllowListChanged(address[] tokens);\\n\\n    event vSync(uint112 balance0, uint112 balance1);\\n\\n    event ReserveSync(address asset, uint256 balance, uint256 rRatio);\\n\\n    event FeeChanged(uint16 fee, uint16 vFee);\\n\\n    event ReserveThresholdChanged(uint256 newThreshold);\\n\\n    event BlocksDelayChanged(uint256 _newBlocksDelay);\\n\\n    event ReserveRatioWarningThresholdChanged(\\n        uint256 _newReserveRatioWarningThreshold\\n    );\\n\\n    function fee() external view returns (uint16);\\n\\n    function vFee() external view returns (uint16);\\n\\n    function setFee(uint16 _fee, uint16 _vFee) external;\\n\\n    function swapNative(\\n        uint256 amountOut,\\n        address tokenOut,\\n        address to,\\n        bytes calldata data\\n    ) external returns (uint256 _amountIn);\\n\\n    function swapReserveToNative(\\n        uint256 amountOut,\\n        address ikPair,\\n        address to,\\n        bytes calldata data\\n    ) external returns (uint256 _amountIn);\\n\\n    function swapNativeToReserve(\\n        uint256 amountOut,\\n        address ikPair,\\n        address to,\\n        uint256 incentivesLimitPct,\\n        bytes calldata data\\n    ) external returns (address _token, uint256 _leftovers);\\n\\n    function liquidateReserve(\\n        address reserveToken,\\n        address nativePool\\n    ) external;\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(\\n        address to\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    function setAllowList(address[] memory _allowList) external;\\n\\n    function allowListMap(address _token) external view returns (bool allowed);\\n\\n    function calculateReserveRatio() external view returns (uint256 rRatio);\\n\\n    function setMaxReserveThreshold(uint256 threshold) external;\\n\\n    function setReserveRatioWarningThreshold(uint256 threshold) external;\\n\\n    function setBlocksDelay(uint128 _newBlocksDelay) external;\\n\\n    function emergencyToggle() external;\\n\\n    function allowListLength() external view returns (uint);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function pairBalance0() external view returns (uint112);\\n\\n    function pairBalance1() external view returns (uint112);\\n\\n    function maxReserveRatio() external view returns (uint256);\\n\\n    function getBalances() external view returns (uint112, uint112);\\n\\n    function lastSwapBlock() external view returns (uint128);\\n\\n    function blocksDelay() external view returns (uint128);\\n\\n    function getTokens() external view returns (address, address);\\n\\n    function reservesBaseValue(\\n        address reserveAddress\\n    ) external view returns (uint256);\\n\\n    function reserves(address reserveAddress) external view returns (uint256);\\n\\n    function reservesBaseValueSum() external view returns (uint256);\\n\\n    function reserveRatioFactor() external pure returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IvPairFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.8.18;\\n\\ninterface IvPairFactory {\\n    event PairCreated(\\n        address poolAddress,\\n        address factory,\\n        address token0,\\n        address token1,\\n        uint16 fee,\\n        uint16 vFee,\\n        uint256 maxReserveRatio\\n    );\\n\\n    event DefaultAllowListChanged(address[] allowList);\\n\\n    event FactoryNewAdmin(address newAdmin);\\n    event FactoryNewPendingAdmin(address newPendingAdmin);\\n\\n    event FactoryNewEmergencyAdmin(address newEmergencyAdmin);\\n    event FactoryNewPendingEmergencyAdmin(address newPendingEmergencyAdmin);\\n\\n    event ExchangeReserveAddressChanged(address newExchangeReserve);\\n\\n    event FactoryVPoolManagerChanged(address newVPoolManager);\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB\\n    ) external returns (address);\\n\\n    function pairs(\\n        address tokenA,\\n        address tokenB\\n    ) external view returns (address);\\n\\n    function setDefaultAllowList(address[] calldata _defaultAllowList) external;\\n\\n    function allPairs(uint256 index) external view returns (address);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function vPoolManager() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function emergencyAdmin() external view returns (address);\\n\\n    function pendingEmergencyAdmin() external view returns (address);\\n\\n    function setPendingEmergencyAdmin(address newEmergencyAdmin) external;\\n\\n    function acceptEmergencyAdmin() external;\\n\\n    function pendingAdmin() external view returns (address);\\n\\n    function setPendingAdmin(address newAdmin) external;\\n\\n    function setVPoolManagerAddress(address _vPoolManager) external;\\n\\n    function acceptAdmin() external;\\n\\n    function exchangeReserves() external view returns (address);\\n\\n    function setExchangeReservesAddress(address _exchangeReserves) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Multicall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract Multicall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IvFlashSwapCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.8.18;\\n\\ninterface IvFlashSwapCallback {\\n    function vFlashSwapCallback(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 requiredBackAmount,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 833\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"NewIncentivesLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"jkPair1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ikPair1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"jkPair2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ikPair2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requiredBackAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"flashAmountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"leftOverToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"leftOverAmount\",\"type\":\"uint256\"}],\"name\":\"ReservesExchanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"changeIncentivesLimitPct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"jkPair1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ikPair1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jkPair2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ikPair2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"flashAmountOut\",\"type\":\"uint256\"}],\"name\":\"exchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incentivesLimitPct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requiredBackAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"vFlashSwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "vExchangeReserves", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "833", "ConstructorArguments": "000000000000000000000000d4e3668a9c39ebb603f02a6987fc915dbc906b43", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}