{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Staking/Staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface ICommissionsAddressRouter {\\n    function getAddress() external view returns (address);\\n}\\n\\ninterface ICommissionsRouter {\\n    function receiveFees(uint256, bytes32) external;\\n}\\n\\ninterface IReferralContract {\\n    function updateReferrerEarnings(address, uint) external returns (uint);\\n}\\n\\nuint constant INITIAL_REWARD_THRESHOLD = 4000000 ether;\\n\\ncontract Staking is Ownable {\\n    /*\\n    Types of staking\\n    */\\n    enum StakeTypes {\\n        BRISTAKE_30,\\n        BRISTAKE_90,\\n        BRISTKAE_180,\\n        BRISTAKE_360,\\n        BRISTAKE_180_PLUS\\n    }\\n    struct DateInfo {\\n        uint createDate;\\n        uint unlockDate;\\n        uint lastClaimedAt;\\n        uint periodLength;\\n    }\\n    /*\\n    Struct defining a Position\\n    */\\n    struct Position {\\n        uint positionId;\\n        address walletAddress;\\n        DateInfo dateInfo;\\n        uint initialAmountStaked;\\n        uint amountStaked;\\n        uint amountInterest;\\n        bool open;\\n        StakeTypes stakeType;\\n        uint dailyRewardAmount;\\n        uint remainingInterest;\\n    }\\n    /*\\n    Struct defining a Tier\\n    -Number of days of staking\\n    -Interest Rate\\n    -StakeTypes\\n    */\\n    struct Tier {\\n        uint numOfDays;\\n        uint basisPoint;\\n        StakeTypes stakeType;\\n    }\\n\\n    ICommissionsAddressRouter commissionsAddressRouter;\\n    IReferralContract referralContract;\\n    IERC20 public immutable token;\\n    uint public BRINGOLD_FEE = 4 ether;\\n    uint public STAKING_FEE = 10 ether;\\n    uint public PENALTY_FEE = 15;\\n\\n    Position position;\\n    uint public currentPositionId;\\n    mapping(uint => Position) public positions;\\n    mapping(address => uint[]) public positionIdsByAddress;\\n    mapping(uint => Tier) public tiers;\\n    bool started;\\n\\n    //Total rewards in this contracts balance\\n    uint public RewardsTotal = 0;\\n    //Keep track of the rewards to be distributed when positions are unlocked\\n    uint public TotalRewardsToDistribute = 0;\\n    //Total staked tokens\\n    uint public totalStakedTokens;\\n\\n    event Staked(\\n        address indexed staker,\\n        uint256 indexed positionId,\\n        StakeTypes stakeType,\\n        uint256 amount,\\n        uint256 timestamp,\\n        uint256 unlockDate\\n    );\\n    event Unstaked(\\n        address indexed staker,\\n        uint256 indexed positionId,\\n        StakeTypes stakeType,\\n        uint256 stakeAmount,\\n        uint256 unstakeAmount,\\n        uint256 fees,\\n        uint256 timestamp\\n    );\\n    event ClaimedRewards(\\n        address indexed staker,\\n        uint256 indexed positionId,\\n        StakeTypes stakeType,\\n        uint256 claimAmount,\\n        uint256 timestamp\\n    );\\n    event ClosedPosition(\\n        address indexed staker,\\n        uint256 indexed positionId,\\n        StakeTypes stakeType,\\n        uint256 unstakeAmount,\\n        uint256 rewardAmount,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n    @dev Constructor of contract\\n    @param _token BRG Token Address\\n    */\\n    constructor(\\n        address _token,\\n        address _referralContract,\\n        address _commissionsAddressRouter\\n    ) {\\n        commissionsAddressRouter = ICommissionsAddressRouter(\\n            _commissionsAddressRouter\\n        );\\n        token = IERC20(_token);\\n        currentPositionId = 0;\\n        referralContract = IReferralContract(_referralContract);\\n\\n        //BRISTAKE_30\\n        tiers[0] = Tier(30, 500, StakeTypes.BRISTAKE_30);\\n        //BRISTAKE_90\\n        tiers[1] = Tier(90, 1500, StakeTypes.BRISTAKE_90);\\n        //BRISTKAE_180\\n        tiers[2] = Tier(180, 3500, StakeTypes.BRISTKAE_180);\\n        //BRISTAKE_360\\n        tiers[3] = Tier(360, 6000, StakeTypes.BRISTAKE_360);\\n        //BRISTAKE_180_PLUS\\n        tiers[4] = Tier(180, 2500, StakeTypes.BRISTAKE_180_PLUS);\\n    }\\n\\n    modifier active() {\\n        require(started == true, \\\"Staking pool is not active\\\");\\n        _;\\n    }\\n\\n    function withdrawBRIN(address to) external onlyOwner {\\n        require(!started, \\\"cannot withdraw\\\");\\n        token.transfer(to, token.balanceOf(address(this)));\\n    }\\n\\n    function setBringoldFee(uint fee) external onlyOwner {\\n        require(fee > 0 && fee < 50 ether, \\\"invalid fee amount\\\");\\n        BRINGOLD_FEE = fee;\\n    }\\n\\n    function setStakingFee(uint fee) external onlyOwner {\\n        require(fee > 0 && fee < 50 ether, \\\"invalid fee amount\\\");\\n        STAKING_FEE = fee;\\n    }\\n\\n    function setPentalyFeePercentage(uint percentage) external onlyOwner {\\n        PENALTY_FEE = percentage;\\n    }\\n\\n    function addFunds(uint amount) external onlyOwner {\\n        require(amount > 0, \\\"Amount cannot be zero\\\");\\n        token.transferFrom(msg.sender, address(this), amount);\\n        RewardsTotal += amount;\\n    }\\n\\n    function setReferralContract(address referralAddress) external onlyOwner {\\n        referralContract = IReferralContract(referralAddress);\\n    }\\n\\n    function StartStakingPool() external {\\n        require(started == false, \\\"Period Already started\\\");\\n        require(\\n            getBalance() >= INITIAL_REWARD_THRESHOLD,\\n            \\\"Cannot start without funding\\\"\\n        );\\n        RewardsTotal = getBalance();\\n        started = true;\\n    }\\n\\n    function _updateReferralEarning(uint amount) internal {\\n        referralContract.updateReferrerEarnings(msg.sender, amount);\\n    }\\n\\n    function getBalance() internal view returns (uint) {\\n        return token.balanceOf(address(this));\\n    }\\n\\n    /**\\n    @dev Function to use for claiming rewards if Stake type is BRISTAKE_90 or BRISTAKE_360 and lastClaimedAt is 24 hours before\\n    @param positionId ID of staking position\\n    */\\n\\n    function claimDailyRewards(uint positionId) external {\\n        require(\\n            positions[positionId].walletAddress == msg.sender,\\n            \\\"Caller is not the staker\\\"\\n        );\\n        require(\\n            positions[positionId].stakeType == StakeTypes.BRISTAKE_90 ||\\n                positions[positionId].stakeType == StakeTypes.BRISTAKE_360,\\n            \\\"This position type cannot claim daily rewards\\\"\\n        );\\n        require(\\n            block.timestamp - positions[positionId].dateInfo.lastClaimedAt >=\\n                1 days,\\n            \\\"You can claim rewards once per day\\\"\\n        );\\n        require(block.timestamp < positions[positionId].dateInfo.unlockDate);\\n\\n        uint claimAmount = positions[positionId].dailyRewardAmount *\\n            ((block.timestamp - positions[positionId].dateInfo.lastClaimedAt) /\\n                60 /\\n                60 /\\n                24);\\n\\n        if (positions[positionId].stakeType == StakeTypes.BRISTAKE_360) {\\n            uint unStakeAmount = (positions[positionId].initialAmountStaked *\\n                ((block.timestamp -\\n                    positions[positionId].dateInfo.lastClaimedAt) /\\n                    60 /\\n                    60 /\\n                    24)) / tiers[3].numOfDays;\\n            claimAmount += unStakeAmount;\\n            totalStakedTokens -= unStakeAmount;\\n            positions[positionId].amountStaked -= unStakeAmount;\\n        }\\n        positions[positionId].remainingInterest -= claimAmount;\\n        TotalRewardsToDistribute -= claimAmount;\\n        positions[positionId].dateInfo.lastClaimedAt = block.timestamp;\\n        require(claimAmount > 0, \\\"no claimable tokens\\\");\\n        processClaim(claimAmount);\\n\\n        emit ClaimedRewards(\\n            msg.sender,\\n            positionId,\\n            positions[positionId].stakeType,\\n            claimAmount,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n    @dev Function to stake tokens, requires ALLOWANCE from user to transfer users tokens to itself. \\n    @dev tierIds match with stake types, 0=>BRISTAKE_30, 1=>BRISTAKE_90, 2=>BRISTKAE_180, 3=>BRISTAKE_360, 4=>BRISTAKE_180_PLUS\\n    @param _amount Amount of tokens to be staked in wei (tokenAmount*10**18)\\n    @param tierId Index of tier to be staked representing stake type (0,1,2,3,4)\\n    */\\n    function stake(uint _amount, uint tierId) external active {\\n        require(_amount > 100, \\\"Amount cannot less than 100 wei\\\");\\n        require(tiers[tierId].basisPoint > 0, \\\"Tier not found\\\");\\n        uint interest = calculateInterest(tiers[tierId].basisPoint, _amount);\\n        require(\\n            TotalRewardsToDistribute + interest <= RewardsTotal,\\n            \\\"Insufficient reward token for this position\\\"\\n        );\\n        token.transferFrom(msg.sender, address(this), _amount + STAKING_FEE);\\n        transferStakingFees();\\n\\n        positions[currentPositionId] = Position(\\n            currentPositionId,\\n            msg.sender,\\n            DateInfo(\\n                block.timestamp,\\n                block.timestamp + (tiers[tierId].numOfDays * 1 days),\\n                block.timestamp,\\n                tiers[tierId].numOfDays\\n            ),\\n            _amount,\\n            _amount,\\n            interest,\\n            true,\\n            tiers[tierId].stakeType,\\n            (interest * 1) / tiers[tierId].numOfDays,\\n            interest\\n        );\\n\\n        positionIdsByAddress[msg.sender].push(currentPositionId);\\n        emit Staked(\\n            msg.sender,\\n            currentPositionId,\\n            tiers[tierId].stakeType,\\n            _amount,\\n            block.timestamp,\\n            block.timestamp + (tiers[tierId].numOfDays * 1 days)\\n        );\\n        TotalRewardsToDistribute += interest;\\n        totalStakedTokens += _amount;\\n        currentPositionId += 1;\\n        _updateReferralEarning(_amount);\\n    }\\n\\n    function modifyRewardRate(uint id, uint basisPoints) external onlyOwner {\\n        tiers[id].basisPoint = basisPoints;\\n    }\\n\\n    function getInterestRate(uint id) external view returns (uint) {\\n        return tiers[id].basisPoint;\\n    }\\n\\n    function getPositionById(\\n        uint positionId\\n    ) external view returns (Position memory) {\\n        return positions[positionId];\\n    }\\n\\n    function getPositionIdsForAddress(\\n        address _account\\n    ) external view returns (uint[] memory) {\\n        return positionIdsByAddress[_account];\\n    }\\n\\n    /**\\n    @dev Function to get Staking Positions of account, returns Array of Positions\\n    @param _account Wallet Address for positions to be fetched\\n    */\\n    function getPositionsOfAddress(\\n        address _account\\n    ) external view returns (Position[] memory) {\\n        uint positionId;\\n        uint userPositionsLength = positionIdsByAddress[_account].length;\\n        Position[] memory userPositions = new Position[](userPositionsLength);\\n        for (uint i = 0; i < userPositionsLength; i++) {\\n            positionId = positionIdsByAddress[_account][i];\\n            Position storage currentPosition = positions[positionId];\\n            userPositions[i] = currentPosition;\\n        }\\n        return userPositions;\\n    }\\n\\n    function changeUnlockDate(\\n        uint positionId,\\n        uint newUnlockDate\\n    ) external onlyOwner {\\n        positions[positionId].dateInfo.unlockDate = newUnlockDate;\\n    }\\n\\n    /**\\n    @dev Function to Close a staking positions if position is unlocked\\n    @param positionId ID of staking position\\n    */\\n    function closePosition(uint positionId) external active {\\n        require(\\n            positions[positionId].walletAddress == msg.sender,\\n            \\\"Only staker may modifiy position\\\"\\n        );\\n        require(\\n            positions[positionId].open == true,\\n            \\\"Position is already closed\\\"\\n        );\\n\\n        require(\\n            block.timestamp > positions[positionId].dateInfo.unlockDate,\\n            \\\"Cannot close position before unlock date\\\"\\n        );\\n        uint amount = positions[positionId].amountStaked +\\n            positions[positionId].remainingInterest;\\n        TotalRewardsToDistribute -= positions[positionId].remainingInterest;\\n        totalStakedTokens -= positions[positionId].amountStaked;\\n        positions[positionId].open = false;\\n        if (amount > 0) {\\n            processClaim(amount);\\n        } else {\\n            transferBringoldFees();\\n        }\\n        emit ClosedPosition(\\n            msg.sender,\\n            positionId,\\n            positions[positionId].stakeType,\\n            positions[positionId].amountStaked,\\n            positions[positionId].remainingInterest,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n    @dev Function to unstake tokens with paying some fees, If staking type is BRISTAKE_180_PLUS\\n    @param positionId ID of staking position\\n    */\\n    function earlyWithdraw(uint positionId) external active {\\n        require(\\n            positions[positionId].walletAddress == msg.sender,\\n            \\\"Only staker may modifiy position\\\"\\n        );\\n        require(\\n            positions[positionId].open == true,\\n            \\\"Position is already closed\\\"\\n        );\\n        require(\\n            positions[positionId].stakeType == StakeTypes.BRISTAKE_180_PLUS,\\n            \\\"Position is not eligible for early withdrawal\\\"\\n        );\\n        require(\\n            positions[positionId].dateInfo.unlockDate > block.timestamp,\\n            \\\"Period has already ended\\\"\\n        );\\n        uint amount = positions[positionId].amountStaked;\\n        uint penaltyFee = (amount * PENALTY_FEE) / 100;\\n        TotalRewardsToDistribute -= positions[positionId].amountInterest;\\n        totalStakedTokens -= positions[positionId].amountStaked;\\n        positions[positionId].open = false;\\n        processClaim(amount - penaltyFee);\\n        transferPenaltyFees(penaltyFee);\\n\\n        emit Unstaked(\\n            msg.sender,\\n            positionId,\\n            positions[positionId].stakeType,\\n            positions[positionId].initialAmountStaked,\\n            amount - penaltyFee,\\n            penaltyFee,\\n            block.timestamp\\n        );\\n    }\\n\\n    function transferStakingFees() internal {\\n        bytes32 route = bytes32(\\\"TX\\\");\\n        address commissionsRouter = commissionsAddressRouter.getAddress();\\n        token.approve(commissionsRouter, STAKING_FEE);\\n        ICommissionsRouter(commissionsRouter).receiveFees(STAKING_FEE, route);\\n    }\\n\\n    function transferPenaltyFees(uint penaltyFee) internal {\\n        bytes32 route;\\n        if (penaltyFee > 100) {\\n            route = bytes32(\\\"TX\\\");\\n        } else {\\n            route = bytes32(\\\"STAKING\\\");\\n        }\\n        address commissionsRouter = commissionsAddressRouter.getAddress();\\n        token.approve(commissionsRouter, penaltyFee);\\n        ICommissionsRouter(commissionsRouter).receiveFees(penaltyFee, route);\\n    }\\n\\n    function transferBringoldFees() internal {\\n        token.transferFrom(msg.sender, address(this), BRINGOLD_FEE);\\n        bytes32 route = bytes32(\\\"TX\\\");\\n        address commissionsRouter = commissionsAddressRouter.getAddress();\\n        token.approve(commissionsRouter, BRINGOLD_FEE);\\n        ICommissionsRouter(commissionsRouter).receiveFees(BRINGOLD_FEE, route);\\n    }\\n\\n    function processClaim(uint amount) internal {\\n        token.transfer(msg.sender, amount);\\n        transferBringoldFees();\\n    }\\n\\n    function calculateInterest(\\n        uint basisPoint,\\n        uint _amount\\n    ) internal pure returns (uint) {\\n        return (basisPoint * _amount) / 10000;\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referralContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_commissionsAddressRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Staking.StakeTypes\",\"name\":\"stakeType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ClaimedRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Staking.StakeTypes\",\"name\":\"stakeType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ClosedPosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Staking.StakeTypes\",\"name\":\"stakeType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Staking.StakeTypes\",\"name\":\"stakeType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BRINGOLD_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PENALTY_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RewardsTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"StartStakingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalRewardsToDistribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newUnlockDate\",\"type\":\"uint256\"}],\"name\":\"changeUnlockDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"claimDailyRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"closePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPositionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"earlyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"getPositionById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"createDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodLength\",\"type\":\"uint256\"}],\"internalType\":\"struct Staking.DateInfo\",\"name\":\"dateInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"initialAmountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInterest\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"},{\"internalType\":\"enum Staking.StakeTypes\",\"name\":\"stakeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dailyRewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingInterest\",\"type\":\"uint256\"}],\"internalType\":\"struct Staking.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getPositionIdsForAddress\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getPositionsOfAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"createDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodLength\",\"type\":\"uint256\"}],\"internalType\":\"struct Staking.DateInfo\",\"name\":\"dateInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"initialAmountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInterest\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"},{\"internalType\":\"enum Staking.StakeTypes\",\"name\":\"stakeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dailyRewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingInterest\",\"type\":\"uint256\"}],\"internalType\":\"struct Staking.Position[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basisPoints\",\"type\":\"uint256\"}],\"name\":\"modifyRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"positionIdsByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"createDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodLength\",\"type\":\"uint256\"}],\"internalType\":\"struct Staking.DateInfo\",\"name\":\"dateInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"initialAmountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInterest\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"},{\"internalType\":\"enum Staking.StakeTypes\",\"name\":\"stakeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dailyRewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingInterest\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setBringoldFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"setPentalyFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referralAddress\",\"type\":\"address\"}],\"name\":\"setReferralContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setStakingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numOfDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basisPoint\",\"type\":\"uint256\"},{\"internalType\":\"enum Staking.StakeTypes\",\"name\":\"stakeType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawBRIN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Staking", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000bc0b7de316f4e57c677370ccd3a36697d6fc5de2000000000000000000000000049f7644f5e46534f6f6daf30ed222284bbb581b00000000000000000000000083e92ce0965ab1b6e4c02fb2746c13daaa1fe69e", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}