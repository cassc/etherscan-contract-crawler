{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/loan/terms/simple/factory/offer/PWNSimpleLoanSimpleOffer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.16;\\n\\nimport \\\"MultiToken/MultiToken.sol\\\";\\n\\nimport \\\"@pwn/loan/lib/PWNSignatureChecker.sol\\\";\\nimport \\\"@pwn/loan/terms/simple/factory/offer/base/PWNSimpleLoanOffer.sol\\\";\\nimport \\\"@pwn/loan/terms/PWNLOANTerms.sol\\\";\\nimport \\\"@pwn/PWNErrors.sol\\\";\\n\\n\\n/**\\n * @title PWN Simple Loan Simple Offer\\n * @notice Loan terms factory contract creating a simple loan terms from a simple offer.\\n */\\ncontract PWNSimpleLoanSimpleOffer is PWNSimpleLoanOffer {\\n\\n    string internal constant VERSION = \\\"1.1\\\";\\n\\n    /*----------------------------------------------------------*|\\n    |*  # VARIABLES & CONSTANTS DEFINITIONS                     *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @dev EIP-712 simple offer struct type hash.\\n     */\\n    bytes32 constant internal OFFER_TYPEHASH = keccak256(\\n        \\\"Offer(uint8 collateralCategory,address collateralAddress,uint256 collateralId,uint256 collateralAmount,address loanAssetAddress,uint256 loanAmount,uint256 loanYield,uint32 duration,uint40 expiration,address borrower,address lender,bool isPersistent,uint256 nonce)\\\"\\n    );\\n\\n    bytes32 immutable internal DOMAIN_SEPARATOR;\\n\\n    /**\\n     * @notice Construct defining a simple offer.\\n     * @param collateralCategory Category of an asset used as a collateral (0 == ERC20, 1 == ERC721, 2 == ERC1155).\\n     * @param collateralAddress Address of an asset used as a collateral.\\n     * @param collateralId Token id of an asset used as a collateral, in case of ERC20 should be 0.\\n     * @param collateralAmount Amount of tokens used as a collateral, in case of ERC721 should be 0.\\n     * @param loanAssetAddress Address of an asset which is lender to a borrower.\\n     * @param loanAmount Amount of tokens which is offered as a loan to a borrower.\\n     * @param loanYield Amount of tokens which acts as a lenders loan interest. Borrower has to pay back a borrowed amount + yield.\\n     * @param duration Loan duration in seconds.\\n     * @param expiration Offer expiration timestamp in seconds.\\n     * @param borrower Address of a borrower. Only this address can accept an offer. If the address is zero address, anybody with a collateral can accept the offer.\\n     * @param lender Address of a lender. This address has to sign an offer to be valid.\\n     * @param isPersistent If true, offer will not be revoked on acceptance. Persistent offer can be revoked manually.\\n     * @param nonce Additional value to enable identical offers in time. Without it, it would be impossible to make again offer, which was once revoked.\\n     *              Can be used to create a group of offers, where accepting one offer will make other offers in the group revoked.\\n     */\\n    struct Offer {\\n        MultiToken.Category collateralCategory;\\n        address collateralAddress;\\n        uint256 collateralId;\\n        uint256 collateralAmount;\\n        address loanAssetAddress;\\n        uint256 loanAmount;\\n        uint256 loanYield;\\n        uint32 duration;\\n        uint40 expiration;\\n        address borrower;\\n        address lender;\\n        bool isPersistent;\\n        uint256 nonce;\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # CONSTRUCTOR                                           *|\\n    |*----------------------------------------------------------*/\\n\\n    constructor(address hub, address revokedOfferNonce) PWNSimpleLoanOffer(hub, revokedOfferNonce) {\\n        DOMAIN_SEPARATOR = keccak256(abi.encode(\\n            keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n            keccak256(\\\"PWNSimpleLoanSimpleOffer\\\"),\\n            keccak256(\\\"1\\\"),\\n            block.chainid,\\n            address(this)\\n        ));\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # OFFER MANAGEMENT                                      *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @notice Make an on-chain offer.\\n     * @dev Function will mark an offer hash as proposed. Offer will become acceptable by a borrower without an offer signature.\\n     * @param offer Offer struct containing all needed offer data.\\n     */\\n    function makeOffer(Offer calldata offer) external {\\n        _makeOffer(getOfferHash(offer), offer.lender);\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # IPWNSimpleLoanFactory                                 *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @notice See { IPWNSimpleLoanFactory.sol }.\\n     */\\n    function createLOANTerms(\\n        address caller,\\n        bytes calldata factoryData,\\n        bytes calldata signature\\n    ) external override onlyActiveLoan returns (PWNLOANTerms.Simple memory loanTerms, bytes32 offerHash) {\\n\\n        Offer memory offer = abi.decode(factoryData, (Offer));\\n        offerHash = getOfferHash(offer);\\n\\n        address lender = offer.lender;\\n        address borrower = caller;\\n\\n        // Check that offer has been made via on-chain tx, EIP-1271 or signed off-chain\\n        if (offersMade[offerHash] == false)\\n            if (PWNSignatureChecker.isValidSignatureNow(lender, offerHash, signature) == false)\\n                revert InvalidSignature();\\n\\n        // Check valid offer\\n        if (offer.expiration != 0 && block.timestamp >= offer.expiration)\\n            revert OfferExpired();\\n\\n        if (revokedOfferNonce.isNonceRevoked(lender, offer.nonce) == true)\\n            revert NonceAlreadyRevoked();\\n\\n        if (offer.borrower != address(0))\\n            if (borrower != offer.borrower)\\n                revert CallerIsNotStatedBorrower(offer.borrower);\\n\\n        if (offer.duration < MIN_LOAN_DURATION)\\n            revert InvalidDuration();\\n\\n        // Prepare collateral and loan asset\\n        MultiToken.Asset memory collateral = MultiToken.Asset({\\n            category: offer.collateralCategory,\\n            assetAddress: offer.collateralAddress,\\n            id: offer.collateralId,\\n            amount: offer.collateralAmount\\n        });\\n        MultiToken.Asset memory loanAsset = MultiToken.Asset({\\n            category: MultiToken.Category.ERC20,\\n            assetAddress: offer.loanAssetAddress,\\n            id: 0,\\n            amount: offer.loanAmount\\n        });\\n\\n        // Create loan object\\n        loanTerms = PWNLOANTerms.Simple({\\n            lender: lender,\\n            borrower: borrower,\\n            expiration: uint40(block.timestamp) + offer.duration,\\n            collateral: collateral,\\n            asset: loanAsset,\\n            loanRepayAmount: offer.loanAmount + offer.loanYield\\n        });\\n\\n        // Revoke offer if not persistent\\n        if (!offer.isPersistent)\\n            revokedOfferNonce.revokeNonce(lender, offer.nonce);\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # GET OFFER HASH                                        *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @notice Get an offer hash according to EIP-712.\\n     * @param offer Offer struct to be hashed.\\n     * @return Offer struct hash.\\n     */\\n    function getOfferHash(Offer memory offer) public view returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\n            hex\\\"1901\\\",\\n            DOMAIN_SEPARATOR,\\n            keccak256(abi.encodePacked(\\n                OFFER_TYPEHASH,\\n                abi.encode(offer)\\n            ))\\n        ));\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # LOAN TERMS FACTORY DATA ENCODING                      *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @notice Return encoded input data for this loan terms factory.\\n     * @param offer Simple loan simple offer struct to encode.\\n     * @return Encoded loan terms factory data that can be used as an input of `createLOANTerms` function with this factory.\\n     */\\n    function encodeLoanTermsFactoryData(Offer memory offer) external pure returns (bytes memory) {\\n        return abi.encode(offer);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"lib/MultiToken/src/MultiToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/interfaces/IERC721.sol\\\";\\nimport \\\"@openzeppelin/interfaces/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/utils/introspection/ERC165Checker.sol\\\";\\n\\nimport \\\"@MT/interfaces/ICryptoKitties.sol\\\";\\n\\n\\nlibrary MultiToken {\\n    using ERC165Checker for address;\\n    using SafeERC20 for IERC20;\\n\\n    bytes4 public constant ERC20_INTERFACE_ID = 0x36372b07;\\n    bytes4 public constant ERC721_INTERFACE_ID = 0x80ac58cd;\\n    bytes4 public constant ERC1155_INTERFACE_ID = 0xd9b67a26;\\n    bytes4 public constant CRYPTO_KITTIES_INTERFACE_ID = 0x9a20483d;\\n\\n    /**\\n     * @title Category\\n     * @dev Enum representation Asset category.\\n     */\\n    enum Category {\\n        ERC20,\\n        ERC721,\\n        ERC1155,\\n        CryptoKitties\\n    }\\n\\n    /**\\n     * @title Asset\\n     * @param category Corresponding asset category.\\n     * @param assetAddress Address of the token contract defining the asset.\\n     * @param id TokenID of an NFT or 0.\\n     * @param amount Amount of fungible tokens or 0 -> 1.\\n     */\\n    struct Asset {\\n        Category category;\\n        address assetAddress;\\n        uint256 id;\\n        uint256 amount;\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # TRANSFER ASSET                                        *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * transferAssetFrom\\n     * @dev Wrapping function for `transferFrom` calls on various token interfaces.\\n     *      If `source` is `address(this)`, function `transfer` is called instead of `transferFrom` for ERC20 category.\\n     * @param asset Struct defining all necessary context of a token.\\n     * @param source Account/address that provided the allowance.\\n     * @param dest Destination address.\\n     */\\n    function transferAssetFrom(Asset memory asset, address source, address dest) internal {\\n        _transferAssetFrom(asset, source, dest, false);\\n    }\\n\\n    /**\\n     * safeTransferAssetFrom\\n     * @dev Wrapping function for `safeTransferFrom` calls on various token interfaces.\\n     *      If `source` is `address(this)`, function `transfer` is called instead of `transferFrom` for ERC20 category.\\n     * @param asset Struct defining all necessary context of a token.\\n     * @param source Account/address that provided the allowance.\\n     * @param dest Destination address.\\n     */\\n    function safeTransferAssetFrom(Asset memory asset, address source, address dest) internal {\\n        _transferAssetFrom(asset, source, dest, true);\\n    }\\n\\n    function _transferAssetFrom(Asset memory asset, address source, address dest, bool isSafe) private {\\n        if (asset.category == Category.ERC20) {\\n            if (source == address(this))\\n                IERC20(asset.assetAddress).safeTransfer(dest, asset.amount);\\n            else\\n                IERC20(asset.assetAddress).safeTransferFrom(source, dest, asset.amount);\\n\\n        } else if (asset.category == Category.ERC721) {\\n            if (!isSafe)\\n                IERC721(asset.assetAddress).transferFrom(source, dest, asset.id);\\n            else\\n                IERC721(asset.assetAddress).safeTransferFrom(source, dest, asset.id, \\\"\\\");\\n\\n        } else if (asset.category == Category.ERC1155) {\\n            IERC1155(asset.assetAddress).safeTransferFrom(source, dest, asset.id, asset.amount == 0 ? 1 : asset.amount, \\\"\\\");\\n\\n        } else if (asset.category == Category.CryptoKitties) {\\n            if (source == address(this))\\n                ICryptoKitties(asset.assetAddress).transfer(dest, asset.id);\\n            else\\n                ICryptoKitties(asset.assetAddress).transferFrom(source, dest, asset.id);\\n\\n        } else {\\n            revert(\\\"MultiToken: Unsupported category\\\");\\n        }\\n    }\\n\\n    /**\\n     * getTransferAmount\\n     * @dev Get amount of asset that would be transferred.\\n     *      NFTs (ERC721, CryptoKitties & ERC1155 with amount 0) with return 1.\\n     *      Fungible tokens will return its amount (ERC20 with 0 amount is valid state).\\n     *      In combination with `MultiToken.balanceOf`, `getTransferAmount` can be used to check successful asset transfer.\\n     * @param asset Struct defining all necessary context of a token.\\n     * @return Number of tokens that would be transferred of the asset.\\n     */\\n    function getTransferAmount(Asset memory asset) internal pure returns (uint256) {\\n        if (asset.category == Category.ERC20)\\n            return asset.amount;\\n        else if (asset.category == Category.ERC1155 && asset.amount > 0)\\n            return asset.amount;\\n        else // Return 1 for ERC721, CryptoKitties and ERC1155 used as NFTs (amount = 0)\\n            return 1;\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # TRANSFER ASSET CALLDATA                               *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * transferAssetFromCalldata\\n     * @dev Wrapping function for `transferFrom` calladata on various token interfaces.\\n     *      If `fromSender` is true, function `transfer` is returned instead of `transferFrom` for ERC20 category.\\n     * @param asset Struct defining all necessary context of a token.\\n     * @param source Account/address that provided the allowance.\\n     * @param dest Destination address.\\n     */\\n    function transferAssetFromCalldata(Asset memory asset, address source, address dest, bool fromSender) pure internal returns (bytes memory) {\\n        return _transferAssetFromCalldata(asset, source, dest, fromSender, false);\\n    }\\n\\n    /**\\n     * safeTransferAssetFromCalldata\\n     * @dev Wrapping function for `safeTransferFrom` calladata on various token interfaces.\\n     *      If `fromSender` is true, function `transfer` is returned instead of `transferFrom` for ERC20 category.\\n     * @param asset Struct defining all necessary context of a token.\\n     * @param source Account/address that provided the allowance.\\n     * @param dest Destination address.\\n     */\\n    function safeTransferAssetFromCalldata(Asset memory asset, address source, address dest, bool fromSender) pure internal returns (bytes memory) {\\n        return _transferAssetFromCalldata(asset, source, dest, fromSender, true);\\n    }\\n\\n    function _transferAssetFromCalldata(Asset memory asset, address source, address dest, bool fromSender, bool isSafe) pure private returns (bytes memory) {\\n        if (asset.category == Category.ERC20) {\\n            if (fromSender) {\\n                return abi.encodeWithSignature(\\n                    \\\"transfer(address,uint256)\\\", dest, asset.amount\\n                );\\n            } else {\\n                return abi.encodeWithSignature(\\n                    \\\"transferFrom(address,address,uint256)\\\", source, dest, asset.amount\\n                );\\n            }\\n        } else if (asset.category == Category.ERC721) {\\n            if (!isSafe) {\\n                return abi.encodeWithSignature(\\n                    \\\"transferFrom(address,address,uint256)\\\", source, dest, asset.id\\n                );\\n            } else {\\n                return abi.encodeWithSignature(\\n                    \\\"safeTransferFrom(address,address,uint256,bytes)\\\", source, dest, asset.id, \\\"\\\"\\n                );\\n            }\\n\\n        } else if (asset.category == Category.ERC1155) {\\n            return abi.encodeWithSignature(\\n                \\\"safeTransferFrom(address,address,uint256,uint256,bytes)\\\", source, dest, asset.id, asset.amount == 0 ? 1 : asset.amount, \\\"\\\"\\n            );\\n\\n        } else if (asset.category == Category.CryptoKitties) {\\n            if (fromSender) {\\n                return abi.encodeWithSignature(\\n                    \\\"transfer(address,uint256)\\\", dest, asset.id\\n                );\\n            } else {\\n                return abi.encodeWithSignature(\\n                    \\\"transferFrom(address,address,uint256)\\\", source, dest, asset.id\\n                );\\n            }\\n\\n        } else {\\n            revert(\\\"MultiToken: Unsupported category\\\");\\n        }\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # PERMIT                                                *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * permit\\n     * @dev Wrapping function for granting approval via permit signature.\\n     * @param asset Struct defining all necessary context of a token.\\n     * @param owner Account/address that signed the permit.\\n     * @param spender Account/address that would be granted approval to `asset`.\\n     * @param permitData Data about permit deadline (uint256) and permit signature (64/65 bytes).\\n     *                   Deadline and signature should be pack encoded together.\\n     *                   Signature can be standard (65 bytes) or compact (64 bytes) defined in EIP-2098.\\n     */\\n    function permit(Asset memory asset, address owner, address spender, bytes memory permitData) internal {\\n        if (asset.category == Category.ERC20) {\\n\\n            // Parse deadline and permit signature parameters\\n            uint256 deadline;\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n\\n            // Parsing signature parameters used from OpenZeppelins ECDSA library\\n            // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/83277ff916ac4f58fec072b8f28a252c1245c2f1/contracts/utils/cryptography/ECDSA.sol\\n\\n            // Deadline (32 bytes) + standard signature data (65 bytes) -> 97 bytes\\n            if (permitData.length == 97) {\\n                assembly {\\n                    deadline := mload(add(permitData, 0x20))\\n                    r := mload(add(permitData, 0x40))\\n                    s := mload(add(permitData, 0x60))\\n                    v := byte(0, mload(add(permitData, 0x80)))\\n                }\\n            }\\n            // Deadline (32 bytes) + compact signature data (64 bytes) -> 96 bytes\\n            else if (permitData.length == 96) {\\n                bytes32 vs;\\n\\n                assembly {\\n                    deadline := mload(add(permitData, 0x20))\\n                    r := mload(add(permitData, 0x40))\\n                    vs := mload(add(permitData, 0x60))\\n                }\\n\\n                s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n                v = uint8((uint256(vs) >> 255) + 27);\\n            } else {\\n                revert(\\\"MultiToken::Permit: Invalid permit length\\\");\\n            }\\n\\n            // Call permit with parsed parameters\\n            IERC20Permit(asset.assetAddress).permit(owner, spender, asset.amount, deadline, v, r, s);\\n\\n        } else {\\n            // Currently supporting only ERC20 signed approvals via ERC2612\\n            revert(\\\"MultiToken::Permit: Unsupported category\\\");\\n        }\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # BALANCE OF                                            *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * balanceOf\\n     * @dev Wrapping function for checking balances on various token interfaces.\\n     * @param asset Struct defining all necessary context of a token.\\n     * @param target Target address to be checked.\\n     */\\n    function balanceOf(Asset memory asset, address target) internal view returns (uint256) {\\n        if (asset.category == Category.ERC20) {\\n            return IERC20(asset.assetAddress).balanceOf(target);\\n\\n        } else if (asset.category == Category.ERC721) {\\n            return IERC721(asset.assetAddress).ownerOf(asset.id) == target ? 1 : 0;\\n\\n        } else if (asset.category == Category.ERC1155) {\\n            return IERC1155(asset.assetAddress).balanceOf(target, asset.id);\\n\\n        } else if (asset.category == Category.CryptoKitties) {\\n            return ICryptoKitties(asset.assetAddress).ownerOf(asset.id) == target ? 1 : 0;\\n\\n        } else {\\n            revert(\\\"MultiToken: Unsupported category\\\");\\n        }\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # APPROVE ASSET                                         *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * approveAsset\\n     * @dev Wrapping function for `approve` calls on various token interfaces.\\n     *      By using `safeApprove` for ERC20, caller can set allowance to 0 or from 0.\\n     *      Cannot set non-zero value if allowance is also non-zero.\\n     * @param asset Struct defining all necessary context of a token.\\n     * @param target Account/address that would be granted approval to `asset`.\\n     */\\n    function approveAsset(Asset memory asset, address target) internal {\\n        if (asset.category == Category.ERC20) {\\n            IERC20(asset.assetAddress).safeApprove(target, asset.amount);\\n\\n        } else if (asset.category == Category.ERC721) {\\n            IERC721(asset.assetAddress).approve(target, asset.id);\\n\\n        } else if (asset.category == Category.ERC1155) {\\n            IERC1155(asset.assetAddress).setApprovalForAll(target, true);\\n\\n        } else if (asset.category == Category.CryptoKitties) {\\n            ICryptoKitties(asset.assetAddress).approve(target, asset.id);\\n\\n        } else {\\n            revert(\\\"MultiToken: Unsupported category\\\");\\n        }\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # ASSET CHECKS                                          *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * isValid\\n     * @dev Checks that provided asset is contract, has correct format and stated category.\\n     *      Fungible tokens (ERC20) have to have id = 0.\\n     *      NFT (ERC721, CryptoKitties) tokens have to have amount = 0.\\n     *      Correct asset category is determined via ERC165.\\n     *      The check assumes, that asset contract implements only one token standard at a time.\\n     * @param asset Asset that is examined.\\n     * @return True if assets amount and id is valid in stated category.\\n     */\\n    function isValid(Asset memory asset) internal view returns (bool) {\\n        if (asset.category == Category.ERC20) {\\n            // Check format\\n            if (asset.id != 0)\\n                return false;\\n\\n            // ERC20 has optional ERC165 implementation\\n            if (asset.assetAddress.supportsERC165()) {\\n                // If ERC20 implements ERC165, it has to return true for its interface id\\n                return asset.assetAddress.supportsERC165InterfaceUnchecked(ERC20_INTERFACE_ID);\\n\\n            } else {\\n                // In case token doesn't implement ERC165, its safe to assume that provided category is correct,\\n                // because any other category have to implement ERC165.\\n\\n                // Check that asset address is contract\\n                // Tip: asset address will return code length 0, if this code is called from the asset constructor\\n                return asset.assetAddress.code.length > 0;\\n            }\\n\\n        } else if (asset.category == Category.ERC721) {\\n            // Check format\\n            if (asset.amount != 0)\\n                return false;\\n\\n            // Check it's ERC721 via ERC165\\n            return asset.assetAddress.supportsInterface(ERC721_INTERFACE_ID);\\n\\n        } else if (asset.category == Category.ERC1155) {\\n            // Check it's ERC1155 via ERC165\\n            return asset.assetAddress.supportsInterface(ERC1155_INTERFACE_ID);\\n\\n        } else if (asset.category == Category.CryptoKitties) {\\n            // Check format\\n            if (asset.amount != 0)\\n                return false;\\n\\n            // Check it's CryptoKitties via ERC165\\n            return asset.assetAddress.supportsInterface(CRYPTO_KITTIES_INTERFACE_ID);\\n\\n        } else {\\n            revert(\\\"MultiToken: Unsupported category\\\");\\n        }\\n    }\\n\\n    /**\\n     * isSameAs\\n     * @dev Compare two assets, ignoring their amounts.\\n     * @param asset First asset to examine.\\n     * @param otherAsset Second asset to examine.\\n     * @return True if both structs represents the same asset.\\n     */\\n    function isSameAs(Asset memory asset, Asset memory otherAsset) internal pure returns (bool) {\\n        return\\n            asset.category == otherAsset.category &&\\n            asset.assetAddress == otherAsset.assetAddress &&\\n            asset.id == otherAsset.id;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/loan/lib/PWNSignatureChecker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.16;\\n\\nimport \\\"openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/interfaces/IERC1271.sol\\\";\\n\\nimport \\\"@pwn/PWNErrors.sol\\\";\\n\\n\\n/**\\n * @title PWN Signature Checker\\n * @notice Library to check if a given signature is valid for EOAs or contract accounts.\\n * @dev This library is a modification of an Open-Zeppelin `SignatureChecker` library extended by a support for EIP-2098 compact signatures.\\n */\\nlibrary PWNSignatureChecker {\\n\\n    string internal constant VERSION = \\\"1.0\\\";\\n\\n    /**\\n     * @dev Function will try to recover a signer of a given signature and check if is the same as given signer address.\\n     *      For a contract account signer address, function will check signature validity by calling `isValidSignature` function defined by EIP-1271.\\n     * @param signer Address that should be a `hash` signer or a signature validator, in case of a contract account.\\n     * @param hash Hash of a signed message that should validated.\\n     * @param signature Signature of a signed `hash`. Could be empty for a contract account signature validation.\\n     *                  Signature can be standard (65 bytes) or compact (64 bytes) defined by EIP-2098.\\n     * @return True if a signature is valid.\\n     */\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        // Check that signature is valid for contract account\\n        if (signer.code.length > 0) {\\n            (bool success, bytes memory result) = signer.staticcall(\\n                abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n            );\\n            return\\n                success &&\\n                result.length == 32 &&\\n                abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector);\\n        }\\n        // Check that signature is valid for EOA\\n        else {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n\\n            // Standard signature data (65 bytes)\\n            if (signature.length == 65) {\\n                assembly {\\n                    r := mload(add(signature, 0x20))\\n                    s := mload(add(signature, 0x40))\\n                    v := byte(0, mload(add(signature, 0x60)))\\n                }\\n            }\\n            // Compact signature data (64 bytes) - see EIP-2098\\n            else if (signature.length == 64) {\\n                bytes32 vs;\\n\\n                assembly {\\n                    r := mload(add(signature, 0x20))\\n                    vs := mload(add(signature, 0x40))\\n                }\\n\\n                s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n                v = uint8((uint256(vs) >> 255) + 27);\\n            } else {\\n                revert InvalidSignatureLength(signature.length);\\n            }\\n\\n            return signer == ECDSA.recover(hash, v, r, s);\\n        }\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"src/loan/terms/simple/factory/offer/base/PWNSimpleLoanOffer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.16;\\n\\nimport \\\"@pwn/hub/PWNHubAccessControl.sol\\\";\\nimport \\\"@pwn/loan/terms/simple/factory/PWNSimpleLoanTermsFactory.sol\\\";\\nimport \\\"@pwn/nonce/PWNRevokedNonce.sol\\\";\\nimport \\\"@pwn/PWNErrors.sol\\\";\\n\\n\\nabstract contract PWNSimpleLoanOffer is PWNSimpleLoanTermsFactory, PWNHubAccessControl {\\n\\n    /*----------------------------------------------------------*|\\n    |*  # VARIABLES & CONSTANTS DEFINITIONS                     *|\\n    |*----------------------------------------------------------*/\\n\\n    PWNRevokedNonce internal immutable revokedOfferNonce;\\n\\n    /**\\n     * @dev Mapping of offers made via on-chain transactions.\\n     *      Could be used by contract wallets instead of EIP-1271.\\n     *      (offer hash => is made)\\n     */\\n    mapping (bytes32 => bool) public offersMade;\\n\\n    /*----------------------------------------------------------*|\\n    |*  # EVENTS & ERRORS DEFINITIONS                           *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @dev Emitted when an offer is made via an on-chain transaction.\\n     */\\n    event OfferMade(bytes32 indexed offerHash, address indexed lender);\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # CONSTRUCTOR                                           *|\\n    |*----------------------------------------------------------*/\\n\\n    constructor(address hub, address _revokedOfferNonce) PWNHubAccessControl(hub) {\\n        revokedOfferNonce = PWNRevokedNonce(_revokedOfferNonce);\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # OFFER MANAGEMENT                                      *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @notice Make an on-chain offer.\\n     * @dev Function will mark an offer hash as proposed. Offer will become acceptable by a borrower without an offer signature.\\n     * @param offerStructHash Hash of a proposed offer.\\n     * @param lender Address of an offer proposer (lender).\\n     */\\n    function _makeOffer(bytes32 offerStructHash, address lender) internal {\\n        // Check that caller is a lender\\n        if (msg.sender != lender)\\n            revert CallerIsNotStatedLender(lender);\\n\\n        // Mark offer as made\\n        offersMade[offerStructHash] = true;\\n\\n        emit OfferMade(offerStructHash, lender);\\n    }\\n\\n    /**\\n     * @notice Helper function for revoking an offer nonce on behalf of a caller.\\n     * @param offerNonce Offer nonce to be revoked.\\n     */\\n    function revokeOfferNonce(uint256 offerNonce) external {\\n        revokedOfferNonce.revokeNonce(msg.sender, offerNonce);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"src/loan/terms/PWNLOANTerms.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.16;\\n\\nimport \\\"MultiToken/MultiToken.sol\\\";\\n\\n\\nlibrary PWNLOANTerms {\\n\\n    /**\\n     * @notice Struct defining a simple loan terms.\\n     * @dev This struct is created by loan factories and never stored.\\n     * @param lender Address of a lender.\\n     * @param borrower Address of a borrower.\\n     * @param expiration Unix timestamp (in seconds) setting up a default date.\\n     * @param collateral Asset used as a loan collateral. For a definition see { MultiToken dependency lib }.\\n     * @param asset Asset used as a loan credit. For a definition see { MultiToken dependency lib }.\\n     * @param loanRepayAmount Amount of a loan asset to be paid back.\\n     */\\n    struct Simple {\\n        address lender;\\n        address borrower;\\n        uint40 expiration;\\n        MultiToken.Asset collateral;\\n        MultiToken.Asset asset;\\n        uint256 loanRepayAmount;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"src/PWNErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.16;\\n\\n\\n// Access control\\nerror CallerMissingHubTag(bytes32);\\n\\n// Loan contract\\nerror LoanDefaulted(uint40);\\nerror InvalidLoanStatus(uint256);\\nerror NonExistingLoan();\\nerror CallerNotLOANTokenHolder();\\nerror InvalidExtendedExpirationDate();\\n\\n// Invalid asset\\nerror InvalidLoanAsset();\\nerror InvalidCollateralAsset();\\n\\n// LOAN token\\nerror InvalidLoanContractCaller();\\n\\n// Vault\\nerror UnsupportedTransferFunction();\\nerror IncompleteTransfer();\\n\\n// Nonce\\nerror NonceAlreadyRevoked();\\nerror InvalidMinNonce();\\n\\n// Signature checks\\nerror InvalidSignatureLength(uint256);\\nerror InvalidSignature();\\n\\n// Offer\\nerror CallerIsNotStatedBorrower(address);\\nerror OfferExpired();\\nerror CollateralIdIsNotWhitelisted();\\n\\n// Request\\nerror CallerIsNotStatedLender(address);\\nerror RequestExpired();\\n\\n// Request & Offer\\nerror InvalidDuration();\\n\\n// Input data\\nerror InvalidInputData();\\n\\n// Config\\nerror InvalidFeeValue();\\nerror InvalidFeeCollector();\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC1155/IERC1155.sol\\\";\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165Checker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/MultiToken/src/interfaces/ICryptoKitties.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICryptoKitties {\\n    // Required methods\\n    function totalSupply() external view returns (uint256 total);\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\\n    function approve(address _to, uint256 _tokenId) external;\\n    function transfer(address _to, uint256 _tokenId) external;\\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\\n\\n    // Optional\\n    function name() external view returns (string memory name);\\n    function symbol() external view returns (string memory symbol);\\n    function tokensOfOwner(address _owner) external view returns (uint256[] memory tokenIds);\\n    function tokenMetadata(uint256 _tokenId, string memory _preferredTransport) external view returns (string memory infoUrl);\\n\\n    // Events\\n    event Transfer(address from, address to, uint256 tokenId);\\n    event Approval(address owner, address approved, uint256 tokenId);\\n\\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\\n    // Is not part of the interface id\\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC1271.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\"\r\n    },\r\n    \"src/hub/PWNHubAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.16;\\n\\nimport \\\"@pwn/hub/PWNHub.sol\\\";\\nimport \\\"@pwn/hub/PWNHubTags.sol\\\";\\nimport \\\"@pwn/PWNErrors.sol\\\";\\n\\n\\n/**\\n * @title PWN Hub Access Control\\n * @notice Implement modifiers for PWN Hub access control.\\n */\\nabstract contract PWNHubAccessControl {\\n\\n    /*----------------------------------------------------------*|\\n    |*  # VARIABLES & CONSTANTS DEFINITIONS                     *|\\n    |*----------------------------------------------------------*/\\n\\n    PWNHub immutable internal hub;\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # MODIFIERS                                             *|\\n    |*----------------------------------------------------------*/\\n\\n    modifier onlyActiveLoan() {\\n        if (hub.hasTag(msg.sender, PWNHubTags.ACTIVE_LOAN) == false)\\n            revert CallerMissingHubTag(PWNHubTags.ACTIVE_LOAN);\\n        _;\\n    }\\n\\n    modifier onlyWithTag(bytes32 tag) {\\n        if (hub.hasTag(msg.sender, tag) == false)\\n            revert CallerMissingHubTag(tag);\\n        _;\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # CONSTRUCTOR                                           *|\\n    |*----------------------------------------------------------*/\\n\\n    constructor(address pwnHub) {\\n        hub = PWNHub(pwnHub);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"src/loan/terms/simple/factory/PWNSimpleLoanTermsFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.16;\\n\\nimport \\\"@pwn/loan/terms/PWNLOANTerms.sol\\\";\\n\\n\\n/**\\n * @title PWN Simple Loan Terms Factory Interface\\n * @notice Interface of a loan factory contract that builds a simple loan terms.\\n */\\nabstract contract PWNSimpleLoanTermsFactory {\\n\\n    uint32 public constant MIN_LOAN_DURATION = 600; // 10 min\\n\\n    /**\\n     * @notice Build a simple loan terms from given data.\\n     * @dev This function should be called only by contracts working with simple loan terms.\\n     * @param caller Caller of a create loan function on a loan contract.\\n     * @param factoryData Encoded data for a loan terms factory.\\n     * @param signature Signed loan factory data.\\n     * @return loanTerms Simple loan terms struct created from a loan factory data.\\n     * @return factoryDataHash Hash of a loan offer / request that is signed by a lender / borrower. Used to uniquely identify a loan offer / request.\\n     */\\n    function createLOANTerms(\\n        address caller,\\n        bytes calldata factoryData,\\n        bytes calldata signature\\n    ) external virtual returns (PWNLOANTerms.Simple memory loanTerms, bytes32 factoryDataHash);\\n\\n}\\n\"\r\n    },\r\n    \"src/nonce/PWNRevokedNonce.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.16;\\n\\nimport \\\"@pwn/hub/PWNHubAccessControl.sol\\\";\\nimport \\\"@pwn/PWNErrors.sol\\\";\\n\\n\\n/**\\n * @title PWN Revoked Nonce\\n * @notice Contract holding revoked nonces.\\n */\\ncontract PWNRevokedNonce is PWNHubAccessControl {\\n\\n    /*----------------------------------------------------------*|\\n    |*  # VARIABLES & CONSTANTS DEFINITIONS                     *|\\n    |*----------------------------------------------------------*/\\n\\n    bytes32 immutable internal accessTag;\\n\\n    /**\\n     * @dev Mapping of revoked nonces by an address.\\n     *      Every address has its own nonce space.\\n     *      (owner => nonce => is revoked)\\n     */\\n    mapping (address => mapping (uint256 => bool)) private revokedNonces;\\n\\n    /**\\n     * @dev Mapping of minimal nonce value per address.\\n     *      (owner => minimal nonce value)\\n     */\\n    mapping (address => uint256) private minNonces;\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # EVENTS DEFINITIONS                                    *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @dev Emitted when a nonce is revoked.\\n     */\\n    event NonceRevoked(address indexed owner, uint256 indexed nonce);\\n\\n\\n    /**\\n     * @dev Emitted when a new min nonce value is set.\\n     */\\n    event MinNonceSet(address indexed owner, uint256 indexed minNonce);\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # CONSTRUCTOR                                           *|\\n    |*----------------------------------------------------------*/\\n\\n    constructor(address hub, bytes32 _accessTag) PWNHubAccessControl(hub) {\\n        accessTag = _accessTag;\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # REVOKE NONCE                                          *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @notice Revoke a nonce.\\n     * @dev Caller is used as a nonce owner.\\n     * @param nonce Nonce to be revoked.\\n     */\\n    function revokeNonce(uint256 nonce) external {\\n        _revokeNonce(msg.sender, nonce);\\n    }\\n\\n    /**\\n     * @notice Revoke a nonce on behalf of an owner.\\n     * @dev Only an address with associated access tag in PWN Hub can call this function.\\n     * @param owner Owner address of a revoking nonce.\\n     * @param nonce Nonce to be revoked.\\n     */\\n    function revokeNonce(address owner, uint256 nonce) external onlyWithTag(accessTag) {\\n        _revokeNonce(owner, nonce);\\n    }\\n\\n    function _revokeNonce(address owner, uint256 nonce) private {\\n        // Revoke nonce\\n        revokedNonces[owner][nonce] = true;\\n\\n        // Emit event\\n        emit NonceRevoked(owner, nonce);\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # SET MIN NONCE                                         *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @notice Set a minimal nonce.\\n     * @dev Nonce is considered revoked when smaller than minimal nonce.\\n     * @param minNonce New value of a minimal nonce.\\n     */\\n    function setMinNonce(uint256 minNonce) external {\\n        // Check that nonce is greater than current min nonce\\n        uint256 currentMinNonce = minNonces[msg.sender];\\n        if (currentMinNonce >= minNonce)\\n            revert InvalidMinNonce();\\n\\n        // Set new min nonce value\\n        minNonces[msg.sender] = minNonce;\\n\\n        // Emit event\\n        emit MinNonceSet(msg.sender, minNonce);\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # IS NONCE REVOKED                                      *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @notice Get information if owners nonce is revoked or not.\\n     * @dev Nonce is considered revoked if is smaller than owners min nonce value or if is explicitly revoked.\\n     * @param owner Address of a nonce owner.\\n     * @param nonce Nonce in question.\\n     * @return True if owners nonce is revoked.\\n     */\\n    function isNonceRevoked(address owner, uint256 nonce) external view returns (bool) {\\n        if (nonce < minNonces[owner])\\n            return true;\\n\\n        return revokedNonces[owner][nonce];\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/hub/PWNHub.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.16;\\n\\nimport \\\"openzeppelin-contracts/contracts/access/Ownable2Step.sol\\\";\\n\\nimport \\\"@pwn/PWNErrors.sol\\\";\\n\\n\\n/**\\n * @title PWN Hub\\n * @notice Connects PWN contracts together into protocol via tags.\\n */\\ncontract PWNHub is Ownable2Step {\\n\\n    /*----------------------------------------------------------*|\\n    |*  # VARIABLES & CONSTANTS DEFINITIONS                     *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @dev Mapping of address tags. (contract address => tag => is tagged)\\n     */\\n    mapping (address => mapping (bytes32 => bool)) private tags;\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # EVENTS & ERRORS DEFINITIONS                           *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @dev Emitted when tag is set for an address.\\n     */\\n    event TagSet(address indexed _address, bytes32 indexed tag, bool hasTag);\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # CONSTRUCTOR                                           *|\\n    |*----------------------------------------------------------*/\\n\\n    constructor() Ownable2Step() {\\n\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # TAG MANAGEMENT                                        *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @notice Set tag to an address.\\n     * @dev Tag can be added or removed via this functions. Only callable by contract owner.\\n     * @param _address Address to which a tag is set.\\n     * @param tag Tag that is set to an `_address`.\\n     * @param _hasTag Bool value if tag is added or removed.\\n     */\\n    function setTag(address _address, bytes32 tag, bool _hasTag) public onlyOwner {\\n        tags[_address][tag] = _hasTag;\\n        emit TagSet(_address, tag, _hasTag);\\n    }\\n\\n    /**\\n     * @notice Set list of tags to an address.\\n     * @dev Tags can be added or removed via this functions. Only callable by contract owner.\\n     * @param _addresses List of addresses to which tags are set.\\n     * @param _tags List of tags that are set to an `_address`.\\n     * @param _hasTag Bool value if tags are added or removed.\\n     */\\n    function setTags(address[] memory _addresses, bytes32[] memory _tags, bool _hasTag) external onlyOwner {\\n        if (_addresses.length != _tags.length)\\n            revert InvalidInputData();\\n\\n        uint256 length = _tags.length;\\n        for (uint256 i; i < length;) {\\n            setTag(_addresses[i], _tags[i], _hasTag);\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # TAG GETTER                                            *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * @dev Return if an address is associated with a tag.\\n     * @param _address Address that is examined for a `tag`.\\n     * @param tag Tag that should an `_address` be associated with.\\n     * @return True if given address has a tag.\\n     */\\n    function hasTag(address _address, bytes32 tag) external view returns (bool) {\\n        return tags[_address][tag];\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"src/hub/PWNHubTags.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.16;\\n\\nlibrary PWNHubTags {\\n\\n    string internal constant VERSION = \\\"1.0\\\";\\n\\n    /// @dev Address can mint LOAN tokens and create LOANs via loan factory contracts.\\n    bytes32 internal constant ACTIVE_LOAN = keccak256(\\\"PWN_ACTIVE_LOAN\\\");\\n\\n    /// @dev Address can be used as a loan terms factory for creating simple loans.\\n    bytes32 internal constant SIMPLE_LOAN_TERMS_FACTORY = keccak256(\\\"PWN_SIMPLE_LOAN_TERMS_FACTORY\\\");\\n\\n    /// @dev Address can revoke loan request nonces.\\n    bytes32 internal constant LOAN_REQUEST = keccak256(\\\"PWN_LOAN_REQUEST\\\");\\n    /// @dev Address can revoke loan offer nonces.\\n    bytes32 internal constant LOAN_OFFER = keccak256(\\\"PWN_LOAN_OFFER\\\");\\n\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@MT/=lib/MultiToken/src/\",\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@pwn-test/=test/\",\r\n      \"@pwn/=src/\",\r\n      \"MultiToken/=lib/MultiToken/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hub\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"revokedOfferNonce\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"CallerIsNotStatedBorrower\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"CallerIsNotStatedLender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"CallerMissingHubTag\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"InvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonceAlreadyRevoked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OfferExpired\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"offerHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"OfferMade\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_LOAN_DURATION\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"factoryData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"createLOANTerms\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"expiration\",\"type\":\"uint40\"},{\"components\":[{\"internalType\":\"enum MultiToken.Category\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct MultiToken.Asset\",\"name\":\"collateral\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum MultiToken.Category\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct MultiToken.Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"loanRepayAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct PWNLOANTerms.Simple\",\"name\":\"loanTerms\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"offerHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum MultiToken.Category\",\"name\":\"collateralCategory\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"collateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"loanAssetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanYield\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint40\",\"name\":\"expiration\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPersistent\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct PWNSimpleLoanSimpleOffer.Offer\",\"name\":\"offer\",\"type\":\"tuple\"}],\"name\":\"encodeLoanTermsFactoryData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum MultiToken.Category\",\"name\":\"collateralCategory\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"collateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"loanAssetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanYield\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint40\",\"name\":\"expiration\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPersistent\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct PWNSimpleLoanSimpleOffer.Offer\",\"name\":\"offer\",\"type\":\"tuple\"}],\"name\":\"getOfferHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum MultiToken.Category\",\"name\":\"collateralCategory\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"collateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"loanAssetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanYield\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint40\",\"name\":\"expiration\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPersistent\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct PWNSimpleLoanSimpleOffer.Offer\",\"name\":\"offer\",\"type\":\"tuple\"}],\"name\":\"makeOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"offersMade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerNonce\",\"type\":\"uint256\"}],\"name\":\"revokeOfferNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PWNSimpleLoanSimpleOffer", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000037807a2f031b3b44081f4b21500e5d70ebadadd5000000000000000000000000ffa73eacce930bbd92a1ef218400cbd1036c437e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}