{"SourceCode": "/**\r\n *  SourceUnit: cypherdog/contracts/Vesting.sol\r\n */\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n    Ownership contract\r\n    Modified https://eips.ethereum.org/EIPS/eip-173\r\n    A confirmation of ownership transfer has been added\r\n     to prevent ownership from being transferred to the wrong address\r\n */\r\ncontract Ownable {\r\n    /// Current contract owner\r\n    address public owner;\r\n    /// New contract owner to be confirmed\r\n    address public newOwner;\r\n    /// Emit on every owner change\r\n    event OwnershipChanged(address indexed from, address indexed to);\r\n\r\n    /**\r\n        Set default owner as contract deployer\r\n     */\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n        Use this modifier to limit function to contract owner\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only for Owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n        Prepare to change ownersip. New owner need to confirm it.\r\n        @param user address delegated to be new contract owner\r\n     */\r\n    function giveOwnership(address user) external onlyOwner {\r\n        require(user != address(0x0), \"renounceOwnership() instead\");\r\n        newOwner = user;\r\n    }\r\n\r\n    /**\r\n        Accept contract ownership by new owner.\r\n     */\r\n    function acceptOwnership() external {\r\n        require(\r\n            newOwner != address(0x0) && msg.sender == newOwner,\r\n            \"Only newOwner can accept\"\r\n        );\r\n        emit OwnershipChanged(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0x0);\r\n    }\r\n\r\n    /**\r\n        Renounce ownership of the contract.\r\n        Any function uses \"onlyOwner\" modifier will be inaccessible.\r\n     */\r\n    function renounceOwnership() external onlyOwner {\r\n        emit OwnershipChanged(owner, address(0x0));\r\n        owner = address(0x0);\r\n    }\r\n}\r\n\r\n/**\r\n *  SourceUnit: cypherdog/contracts/Vesting.sol\r\n */\r\n\r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n    Full ERC20 interface\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * ////////IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/**\r\n *  SourceUnit: cypherdog/contracts/Vesting.sol\r\n */\r\n\r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n////import \"./IERC20.sol\";\r\n////import \"./Ownable.sol\";\r\n\r\n/**\r\n    ERC20 token and native coin recovery functions\r\n */\r\nabstract contract Recoverable is Ownable {\r\n    error NothingToRecover();\r\n\r\n    /// Recover native coin from contract\r\n    function recoverETH() external onlyOwner {\r\n        uint256 amt = address(this).balance;\r\n        if (amt == 0) revert NothingToRecover();\r\n        payable(owner).transfer(amt);\r\n    }\r\n\r\n    /// Recover ERC20 token from contract\r\n    function recoverERC20(address token) external virtual onlyOwner {\r\n        uint256 amt = IERC20(token).balanceOf(address(this));\r\n        if (amt == 0) revert NothingToRecover();\r\n        IERC20(token).transfer(owner, amt);\r\n    }\r\n}\r\n\r\n/**\r\n *  SourceUnit: cypherdog/contracts/Vesting.sol\r\n */\r\n\r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n    Minimal interface for future Stake contract\r\n    Functions needed by Vesting contract\r\n */\r\ninterface IStake {\r\n    /// Vesting contract address\r\n    function vestingAddress() external view returns (address);\r\n\r\n    /// Function to call by vesting contract\r\n    function claim2stake(address user, uint256 amount) external returns (bool);\r\n\r\n    /// Event emited on successfull stake\r\n    event Staked(address indexed user, uint256 amount);\r\n}\r\n\r\n/**\r\n *  SourceUnit: cypherdog/contracts/Vesting.sol\r\n */\r\n\r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: MIT\r\n\r\npragma solidity ^0.8.10;\r\n\r\n////import \"./Ownable.sol\";\r\n////import \"./IERC20.sol\";\r\n////import \"./IStake.sol\";\r\n////import \"./Recovery.sol\";\r\n\r\n/**\r\n    Vesting contract for Cypherdog\r\n    Contract need to be excluded from fees/rewards\r\n */\r\ncontract CypherdogVesting is Ownable, Recoverable {\r\n    /// address of cypher.dog token\r\n    address public immutable tokenAddress;\r\n\r\n    /// amount of vested tokens\r\n    uint256 public vested;\r\n\r\n    // Vest struct\r\n    struct Vest {\r\n        uint256 startAmount; // tokens that can be claimed at start date\r\n        uint256 totalAmount; // total tokens to be released\r\n        uint256 startDate; // date from which startAmount can be taken\r\n        uint256 endDate; // date to which all totalAmount will be released\r\n        uint256 claimed; // tokens already claimed from this vesting\r\n    }\r\n\r\n    // vesting list per user, can be multiple per user\r\n    mapping(address => Vest[]) private _vestings;\r\n\r\n    /// Event on creating vesting\r\n    event VestingAdded(\r\n        address indexed user,\r\n        uint256 startAmount,\r\n        uint256 totalAmount,\r\n        uint256 startDate,\r\n        uint256 endDate\r\n    );\r\n\r\n    /// event on caliming coins from vesting\r\n    event Claimed(address indexed user, uint256 amount);\r\n\r\n    //\r\n    // Error messages\r\n    error ZeroAddress();\r\n    error ZeroAmount();\r\n    error TransferFailed();\r\n    error TimestampsMissconfigured();\r\n    error StartDateBelowCurrentTime();\r\n    error NoLocksForUser();\r\n    error NothingToClaim();\r\n    error IndexOutOfRange();\r\n\r\n    //\r\n    // constructor\r\n    //\r\n    /**\r\n        Contract constructor\r\n        @param token address to be used in contract\r\n     */\r\n    constructor(address token) {\r\n        tokenAddress = token;\r\n    }\r\n\r\n    /**\r\n        Create vesting for user.\r\n        Owner need to approve contract earlier and have tokens on address.\r\n        @param user address of user that can claim from lock\r\n        @param totalAmount total number of coins to be released\r\n        @param startDate timestamp when user can start caliming and get startAmount\r\n        @param endDate timestamp after which totalAmount can be claimed\r\n     */\r\n    function addLock(\r\n        address user,\r\n        uint256 startAmount,\r\n        uint256 totalAmount,\r\n        uint256 startDate,\r\n        uint256 endDate\r\n    ) external {\r\n        if (\r\n            !IERC20(tokenAddress).transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                totalAmount\r\n            )\r\n        ) revert TransferFailed(); // will fail in token code on error\r\n        if (user == address(0x0)) revert ZeroAddress();\r\n        if (totalAmount == 0) revert ZeroAmount();\r\n        if (startDate > endDate) revert TimestampsMissconfigured();\r\n        if (block.timestamp > startDate) revert StartDateBelowCurrentTime();\r\n        Vest memory c = Vest(startAmount, totalAmount, startDate, endDate, 0);\r\n        _vestings[user].push(c);\r\n        vested += totalAmount;\r\n        emit VestingAdded(user, startAmount, totalAmount, startDate, endDate);\r\n    }\r\n\r\n    /**\r\n        Check how much tokens can be claimed at given moment\r\n        @param user address to calculate\r\n        @return sum number of tokens to claim (with 18 decimals)\r\n    */\r\n    function claimable(address user) external view returns (uint256 sum) {\r\n        uint256 len = _vestings[user].length;\r\n        if (len > 0) {\r\n            uint256 i;\r\n            for (i; i < len; i++) {\r\n                sum += _claimable(_vestings[user][i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n        Count number of tokens claimable form given vesting\r\n        @param c Vesting struct data\r\n        @return amt number of tokens possible to claim\r\n     */\r\n    function _claimable(Vest memory c) internal view returns (uint256 amt) {\r\n        uint256 time = block.timestamp;\r\n        if (time > c.startDate) {\r\n            if (time > c.endDate) {\r\n                // all coins can be released\r\n                amt = c.totalAmount;\r\n            } else {\r\n                // we need calculate how much can be released\r\n                uint256 pct = ((time - c.startDate) * 1 ether) /\r\n                    (c.endDate - c.startDate);\r\n                amt =\r\n                    c.startAmount +\r\n                    ((c.totalAmount - c.startAmount) * pct) /\r\n                    1 ether;\r\n            }\r\n            amt -= c.claimed; // some may be already claimed\r\n        }\r\n    }\r\n\r\n    /**\r\n       Claim all possible tokens\r\n    */\r\n    function claim() external {\r\n        uint256 sum = _claim(msg.sender);\r\n        if (!IERC20(tokenAddress).transfer(msg.sender, sum))\r\n            revert TransferFailed(); // will revert in token on error\r\n    }\r\n\r\n    /**\r\n        Internal claim function\r\n        @param user address to calculate\r\n        @return sum number of tokens claimed\r\n     */\r\n    function _claim(address user) internal returns (uint256 sum) {\r\n        uint256 len = _vestings[user].length;\r\n        if (len == 0) revert NoLocksForUser();\r\n\r\n        uint256 i;\r\n        for (i; i < len; i++) {\r\n            Vest storage c = _vestings[user][i];\r\n            uint256 amt = _claimable(c);\r\n            c.claimed += amt;\r\n            sum += amt;\r\n        }\r\n        if (sum == 0) revert NothingToClaim();\r\n\r\n        vested -= sum;\r\n        emit Claimed(user, sum);\r\n    }\r\n\r\n    /**\r\n        All vestings of given address in one call\r\n        @param user address to check\r\n        @return tuple of all locks\r\n     */\r\n    function vestingsOfUser(address user) public view returns (Vest[] memory) {\r\n        return _vestings[user];\r\n    }\r\n\r\n    /**\r\n        Check number of vestings for given user\r\n        @param user address to check\r\n        @return number of vestings for user\r\n     */\r\n    function getVestingsCount(address user) external view returns (uint256) {\r\n        return _vestings[user].length;\r\n    }\r\n\r\n    /**\r\n        Return single vesting info\r\n        @param user address to check\r\n        @param index of vesting to show\r\n     */\r\n    function getVesting(address user, uint256 index)\r\n        external\r\n        view\r\n        returns (Vest memory)\r\n    {\r\n        if (index >= _vestings[user].length) revert IndexOutOfRange();\r\n        return _vestings[user][index];\r\n    }\r\n\r\n    //\r\n    // Stake/Claim2stake\r\n    //\r\n    /// Address of stake contract\r\n    address public stakeAddress;\r\n\r\n    error StakeAlreadyConfigured();\r\n    error WrongStakeAddress();\r\n    error TokenApprovalfailed();\r\n\r\n    /**\r\n        Set address of stake contract (once, only owner)\r\n        @param stake contract address\r\n     */\r\n    function setStakeAddress(address stake) external onlyOwner {\r\n        if (stakeAddress != address(0)) revert StakeAlreadyConfigured();\r\n        stakeAddress = stake;\r\n        if (IStake(stakeAddress).vestingAddress() != address(this))\r\n            revert WrongStakeAddress();\r\n\r\n        if (!IERC20(tokenAddress).approve(stakeAddress, type(uint256).max))\r\n            revert TokenApprovalfailed(); // on error should throw in token\r\n    }\r\n\r\n    error StakeContractNotConfigured();\r\n    error Claim2StakeCallFailed();\r\n\r\n    /**\r\n        Claim possible tokens and stake directly to contract\r\n     */\r\n    function claim2stake() external {\r\n        if (stakeAddress == address(0)) revert StakeContractNotConfigured();\r\n\r\n        uint256 sum = _claim(msg.sender);\r\n        if (!IStake(stakeAddress).claim2stake(msg.sender, sum))\r\n            revert Claim2StakeCallFailed(); // on error should throw in stake contract\r\n    }\r\n\r\n    //\r\n    // Token recovery override, disallow vested tokens withdrawal\r\n    //\r\n    function recoverERC20(address token) external override onlyOwner {\r\n        uint256 amt = IERC20(token).balanceOf(address(this));\r\n\r\n        if (token == tokenAddress) {\r\n            amt -= vested;\r\n        }\r\n        if (amt == 0) revert ZeroAmount();\r\n        IERC20(token).transfer(owner, amt);\r\n    }\r\n\r\n    //\r\n    // Imitate ERC20 token, show unclaimed tokens\r\n    //\r\n\r\n    string public constant name = \"vested CYPHER.DOG\";\r\n    string public constant symbol = \"vCDOG\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    /**\r\n        Read total unclaimed balance for given user\r\n        @param user address to check\r\n        @return amount of unclaimed tokens locked in contract\r\n     */\r\n    function balanceOf(address user) external view returns (uint256 amount) {\r\n        uint256 len = _vestings[user].length;\r\n        if (len > 0) {\r\n            uint256 i;\r\n            for (i; i < len; i++) {\r\n                Vest memory v = _vestings[user][i];\r\n                amount += (v.totalAmount - v.claimed);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n        Imitation of ERC20 transfer() function to claim from wallet.\r\n        Ignoring parameters, returns true if claim succeed.\r\n     */\r\n    function transfer(address, uint256) external returns (bool) {\r\n        uint256 sum = _claim(msg.sender);\r\n        if (!IERC20(tokenAddress).transfer(msg.sender, sum))\r\n            revert TransferFailed(); // on tranfer error will throw in token\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Claim2StakeCallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IndexOutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoLocksForUser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToRecover\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeAlreadyConfigured\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeContractNotConfigured\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StartDateBelowCurrentTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TimestampsMissconfigured\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenApprovalfailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongStakeAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"}],\"name\":\"VestingAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"}],\"name\":\"addLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim2stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getVesting\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"internalType\":\"struct CypherdogVesting.Vest\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getVestingsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"giveOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stake\",\"type\":\"address\"}],\"name\":\"setStakeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"vestingsOfUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"internalType\":\"struct CypherdogVesting.Vest[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CypherdogVesting", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000990a524ebc0a54fd2a7ebc02a1ce54d309fb5cd3", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8b2f901b86523c52f2a624673c339ebe7fe0622aba2410eefcb42177d6d986ea"}