{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC1967.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is IERC1822Proxiable, ERC1967Upgrade {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777Recipient.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Recipient {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Create2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \u2193 ptr ...  \u2193 ptr + 0x0B (start) ...  \u2193 ptr + 0x20 ...  \u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/eip/4337/core/BaseAccount.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\n/* solhint-disable avoid-low-level-calls */\\r\\n/* solhint-disable no-empty-blocks */\\r\\n\\r\\nimport \\\"../interfaces/IAccount.sol\\\";\\r\\nimport \\\"../interfaces/IEntryPoint.sol\\\";\\r\\nimport \\\"./Helpers.sol\\\";\\r\\n\\r\\n/**\\r\\n * Basic account implementation.\\r\\n * this contract provides the basic logic for implementing the IAccount interface  - validateUserOp\\r\\n * specific account implementation should inherit it and provide the account-specific logic\\r\\n */\\r\\nabstract contract BaseAccount is IAccount {\\r\\n    using UserOperationLib for UserOperation;\\r\\n\\r\\n    //return value in case of signature failure, with no time-range.\\r\\n    // equivalent to _packValidationData(true,0,0);\\r\\n    uint256 constant internal SIG_VALIDATION_FAILED = 1;\\r\\n\\r\\n    /**\\r\\n     * Return the account nonce.\\r\\n     * This method returns the next sequential nonce.\\r\\n     * For a nonce of a specific key, use `entrypoint.getNonce(account, key)`\\r\\n     */\\r\\n    function getNonce() public view virtual returns (uint256) {\\r\\n        return entryPoint().getNonce(address(this), 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * return the entryPoint used by this account.\\r\\n     * subclass should return the current entryPoint used by this account.\\r\\n     */\\r\\n    function entryPoint() public view virtual returns (IEntryPoint);\\r\\n\\r\\n    /**\\r\\n     * Validate user's signature and nonce.\\r\\n     * subclass doesn't need to override this method. Instead, it should override the specific internal validation methods.\\r\\n     */\\r\\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds)\\r\\n    external override virtual returns (uint256 validationData) {\\r\\n        _requireFromEntryPoint();\\r\\n        validationData = _validateSignature(userOp, userOpHash);\\r\\n        _validateNonce(userOp.nonce);\\r\\n        _payPrefund(missingAccountFunds);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * ensure the request comes from the known entrypoint.\\r\\n     */\\r\\n    function _requireFromEntryPoint() internal virtual view {\\r\\n        require(msg.sender == address(entryPoint()), \\\"account: not from EntryPoint\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * validate the signature is valid for this message.\\r\\n     * @param userOp validate the userOp.signature field\\r\\n     * @param userOpHash convenient field: the hash of the request, to check the signature against\\r\\n     *          (also hashes the entrypoint and chain id)\\r\\n     * @return validationData signature and time-range of this operation\\r\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\r\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\r\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\r\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\r\\n     *      If the account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\\r\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\r\\n     */\\r\\n    function _validateSignature(UserOperation calldata userOp, bytes32 userOpHash)\\r\\n    internal virtual returns (uint256 validationData);\\r\\n\\r\\n    /**\\r\\n     * Validate the nonce of the UserOperation.\\r\\n     * This method may validate the nonce requirement of this account.\\r\\n     * e.g.\\r\\n     * To limit the nonce to use sequenced UserOps only (no \\\"out of order\\\" UserOps):\\r\\n     *      `require(nonce < type(uint64).max)`\\r\\n     * For a hypothetical account that *requires* the nonce to be out-of-order:\\r\\n     *      `require(nonce & type(uint64).max == 0)`\\r\\n     *\\r\\n     * The actual nonce uniqueness is managed by the EntryPoint, and thus no other\\r\\n     * action is needed by the account itself.\\r\\n     *\\r\\n     * @param nonce to validate\\r\\n     *\\r\\n     * solhint-disable-next-line no-empty-blocks\\r\\n     */\\r\\n    function _validateNonce(uint256 nonce) internal view virtual {\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * sends to the entrypoint (msg.sender) the missing funds for this transaction.\\r\\n     * subclass MAY override this method for better funds management\\r\\n     * (e.g. send to the entryPoint more than the minimum required, so that in future transactions\\r\\n     * it will not be required to send again)\\r\\n     * @param missingAccountFunds the minimum value this method should send the entrypoint.\\r\\n     *  this value MAY be zero, in case there is enough deposit, or the userOp has a paymaster.\\r\\n     */\\r\\n    function _payPrefund(uint256 missingAccountFunds) internal virtual {\\r\\n        if (missingAccountFunds != 0) {\\r\\n            (bool success,) = payable(msg.sender).call{value : missingAccountFunds, gas : type(uint256).max}(\\\"\\\");\\r\\n            (success);\\r\\n            //ignore failure (its EntryPoint's job to verify, not account.)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/eip/4337/core/Helpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\n/* solhint-disable no-inline-assembly */\\r\\n\\r\\n/**\\r\\n * returned data from validateUserOp.\\r\\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\\r\\n * @param aggregator - address(0) - the account validated the signature by itself.\\r\\n *              address(1) - the account failed to validate the signature.\\r\\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\\r\\n * @param validAfter - this UserOp is valid only after this timestamp.\\r\\n * @param validaUntil - this UserOp is valid only up to this timestamp.\\r\\n */\\r\\n    struct ValidationData {\\r\\n        address aggregator;\\r\\n        uint48 validAfter;\\r\\n        uint48 validUntil;\\r\\n    }\\r\\n\\r\\n//extract sigFailed, validAfter, validUntil.\\r\\n// also convert zero validUntil to type(uint48).max\\r\\n    function _parseValidationData(uint validationData) pure returns (ValidationData memory data) {\\r\\n        address aggregator = address(uint160(validationData));\\r\\n        uint48 validUntil = uint48(validationData >> 160);\\r\\n        if (validUntil == 0) {\\r\\n            validUntil = type(uint48).max;\\r\\n        }\\r\\n        uint48 validAfter = uint48(validationData >> (48 + 160));\\r\\n        return ValidationData(aggregator, validAfter, validUntil);\\r\\n    }\\r\\n\\r\\n// intersect account and paymaster ranges.\\r\\n    function _intersectTimeRange(uint256 validationData, uint256 paymasterValidationData) pure returns (ValidationData memory) {\\r\\n        ValidationData memory accountValidationData = _parseValidationData(validationData);\\r\\n        ValidationData memory pmValidationData = _parseValidationData(paymasterValidationData);\\r\\n        address aggregator = accountValidationData.aggregator;\\r\\n        if (aggregator == address(0)) {\\r\\n            aggregator = pmValidationData.aggregator;\\r\\n        }\\r\\n        uint48 validAfter = accountValidationData.validAfter;\\r\\n        uint48 validUntil = accountValidationData.validUntil;\\r\\n        uint48 pmValidAfter = pmValidationData.validAfter;\\r\\n        uint48 pmValidUntil = pmValidationData.validUntil;\\r\\n\\r\\n        if (validAfter < pmValidAfter) validAfter = pmValidAfter;\\r\\n        if (validUntil > pmValidUntil) validUntil = pmValidUntil;\\r\\n        return ValidationData(aggregator, validAfter, validUntil);\\r\\n    }\\r\\n\\r\\n/**\\r\\n * helper to pack the return value for validateUserOp\\r\\n * @param data - the ValidationData to pack\\r\\n */\\r\\n    function _packValidationData(ValidationData memory data) pure returns (uint256) {\\r\\n        return uint160(data.aggregator) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\\r\\n    }\\r\\n\\r\\n/**\\r\\n * helper to pack the return value for validateUserOp, when not using an aggregator\\r\\n * @param sigFailed - true for signature failure, false for success\\r\\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\\r\\n * @param validAfter first timestamp this UserOperation is valid\\r\\n */\\r\\n    function _packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) pure returns (uint256) {\\r\\n        return (sigFailed ? 1 : 0) | (uint256(validUntil) << 160) | (uint256(validAfter) << (160 + 48));\\r\\n    }\\r\\n\\r\\n/**\\r\\n * keccak function over calldata.\\r\\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\\r\\n */\\r\\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\\r\\n        assembly {\\r\\n            let mem := mload(0x40)\\r\\n            let len := data.length\\r\\n            calldatacopy(mem, data.offset, len)\\r\\n            ret := keccak256(mem, len)\\r\\n        }\\r\\n    }\\r\\n\\r\\n\"\r\n    },\r\n    \"contracts/eip/4337/interfaces/IAccount.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport \\\"./UserOperation.sol\\\";\\r\\n\\r\\ninterface IAccount {\\r\\n\\r\\n    /**\\r\\n     * Validate user's signature and nonce\\r\\n     * the entryPoint will make the call to the recipient only if this validation call returns successfully.\\r\\n     * signature failure should be reported by returning SIG_VALIDATION_FAILED (1).\\r\\n     * This allows making a \\\"simulation call\\\" without a valid signature\\r\\n     * Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\\r\\n     *\\r\\n     * @dev Must validate caller is the entryPoint.\\r\\n     *      Must validate the signature and nonce\\r\\n     * @param userOp the operation that is about to be executed.\\r\\n     * @param userOpHash hash of the user's request data. can be used as the basis for signature.\\r\\n     * @param missingAccountFunds missing funds on the account's deposit in the entrypoint.\\r\\n     *      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.\\r\\n     *      The excess is left as a deposit in the entrypoint, for future calls.\\r\\n     *      can be withdrawn anytime using \\\"entryPoint.withdrawTo()\\\"\\r\\n     *      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\\r\\n     * @return validationData packaged ValidationData structure. use `_packValidationData` and `_unpackValidationData` to encode and decode\\r\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\r\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\r\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\r\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\r\\n     *      If an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\\r\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\r\\n     */\\r\\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds)\\r\\n    external returns (uint256 validationData);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/eip/4337/interfaces/IAggregator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport \\\"./UserOperation.sol\\\";\\r\\n\\r\\n/**\\r\\n * Aggregated Signatures validator.\\r\\n */\\r\\ninterface IAggregator {\\r\\n\\r\\n    /**\\r\\n     * validate aggregated signature.\\r\\n     * revert if the aggregated signature does not match the given list of operations.\\r\\n     */\\r\\n    function validateSignatures(UserOperation[] calldata userOps, bytes calldata signature) external view;\\r\\n\\r\\n    /**\\r\\n     * validate signature of a single userOp\\r\\n     * This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation\\r\\n     * First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\\r\\n     * @param userOp the userOperation received from the user.\\r\\n     * @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\\r\\n     *    (usually empty, unless account and aggregator support some kind of \\\"multisig\\\"\\r\\n     */\\r\\n    function validateUserOpSignature(UserOperation calldata userOp)\\r\\n    external view returns (bytes memory sigForUserOp);\\r\\n\\r\\n    /**\\r\\n     * aggregate multiple signatures into a single value.\\r\\n     * This method is called off-chain to calculate the signature to pass with handleOps()\\r\\n     * bundler MAY use optimized custom code perform this aggregation\\r\\n     * @param userOps array of UserOperations to collect the signatures from.\\r\\n     * @return aggregatedSignature the aggregated signature\\r\\n     */\\r\\n    function aggregateSignatures(UserOperation[] calldata userOps) external view returns (bytes memory aggregatedSignature);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/eip/4337/interfaces/IEntryPoint.sol\": {\r\n      \"content\": \"/**\\r\\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\\r\\n ** Only one instance required on each chain.\\r\\n **/\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\n/* solhint-disable avoid-low-level-calls */\\r\\n/* solhint-disable no-inline-assembly */\\r\\n/* solhint-disable reason-string */\\r\\n\\r\\nimport \\\"./UserOperation.sol\\\";\\r\\nimport \\\"./IStakeManager.sol\\\";\\r\\nimport \\\"./IAggregator.sol\\\";\\r\\nimport \\\"./INonceManager.sol\\\";\\r\\n\\r\\ninterface IEntryPoint is IStakeManager, INonceManager {\\r\\n\\r\\n    /***\\r\\n     * An event emitted after each successful request\\r\\n     * @param userOpHash - unique identifier for the request (hash its entire content, except signature).\\r\\n     * @param sender - the account that generates this request.\\r\\n     * @param paymaster - if non-null, the paymaster that pays for this request.\\r\\n     * @param nonce - the nonce value from the request.\\r\\n     * @param success - true if the sender transaction succeeded, false if reverted.\\r\\n     * @param actualGasCost - actual amount paid (by account or paymaster) for this UserOperation.\\r\\n     * @param actualGasUsed - total gas used by this UserOperation (including preVerification, creation, validation and execution).\\r\\n     */\\r\\n    event UserOperationEvent(bytes32 indexed userOpHash, address indexed sender, address indexed paymaster, uint256 nonce, bool success, uint256 actualGasCost, uint256 actualGasUsed);\\r\\n\\r\\n    /**\\r\\n     * account \\\"sender\\\" was deployed.\\r\\n     * @param userOpHash the userOp that deployed this account. UserOperationEvent will follow.\\r\\n     * @param sender the account that is deployed\\r\\n     * @param factory the factory used to deploy this account (in the initCode)\\r\\n     * @param paymaster the paymaster used by this UserOp\\r\\n     */\\r\\n    event AccountDeployed(bytes32 indexed userOpHash, address indexed sender, address factory, address paymaster);\\r\\n\\r\\n    /**\\r\\n     * An event emitted if the UserOperation \\\"callData\\\" reverted with non-zero length\\r\\n     * @param userOpHash the request unique identifier.\\r\\n     * @param sender the sender of this request\\r\\n     * @param nonce the nonce used in the request\\r\\n     * @param revertReason - the return bytes from the (reverted) call to \\\"callData\\\".\\r\\n     */\\r\\n    event UserOperationRevertReason(bytes32 indexed userOpHash, address indexed sender, uint256 nonce, bytes revertReason);\\r\\n\\r\\n    /**\\r\\n     * an event emitted by handleOps(), before starting the execution loop.\\r\\n     * any event emitted before this event, is part of the validation.\\r\\n     */\\r\\n    event BeforeExecution();\\r\\n\\r\\n    /**\\r\\n     * signature aggregator used by the following UserOperationEvents within this bundle.\\r\\n     */\\r\\n    event SignatureAggregatorChanged(address indexed aggregator);\\r\\n\\r\\n    /**\\r\\n     * a custom revert error of handleOps, to identify the offending op.\\r\\n     *  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\\r\\n     *  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\\r\\n     *  @param reason - revert reason\\r\\n     *      The string starts with a unique code \\\"AAmn\\\", where \\\"m\\\" is \\\"1\\\" for factory, \\\"2\\\" for account and \\\"3\\\" for paymaster issues,\\r\\n     *      so a failure can be attributed to the correct entity.\\r\\n     *   Should be caught in off-chain handleOps simulation and not happen on-chain.\\r\\n     *   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\\r\\n     */\\r\\n    error FailedOp(uint256 opIndex, string reason);\\r\\n\\r\\n    /**\\r\\n     * error case when a signature aggregator fails to verify the aggregated signature it had created.\\r\\n     */\\r\\n    error SignatureValidationFailed(address aggregator);\\r\\n\\r\\n    /**\\r\\n     * Successful result from simulateValidation.\\r\\n     * @param returnInfo gas and time-range returned values\\r\\n     * @param senderInfo stake information about the sender\\r\\n     * @param factoryInfo stake information about the factory (if any)\\r\\n     * @param paymasterInfo stake information about the paymaster (if any)\\r\\n     */\\r\\n    error ValidationResult(ReturnInfo returnInfo,\\r\\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo);\\r\\n\\r\\n    /**\\r\\n     * Successful result from simulateValidation, if the account returns a signature aggregator\\r\\n     * @param returnInfo gas and time-range returned values\\r\\n     * @param senderInfo stake information about the sender\\r\\n     * @param factoryInfo stake information about the factory (if any)\\r\\n     * @param paymasterInfo stake information about the paymaster (if any)\\r\\n     * @param aggregatorInfo signature aggregation info (if the account requires signature aggregator)\\r\\n     *      bundler MUST use it to verify the signature, or reject the UserOperation\\r\\n     */\\r\\n    error ValidationResultWithAggregation(ReturnInfo returnInfo,\\r\\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo,\\r\\n        AggregatorStakeInfo aggregatorInfo);\\r\\n\\r\\n    /**\\r\\n     * return value of getSenderAddress\\r\\n     */\\r\\n    error SenderAddressResult(address sender);\\r\\n\\r\\n    /**\\r\\n     * return value of simulateHandleOp\\r\\n     */\\r\\n    error ExecutionResult(uint256 preOpGas, uint256 paid, uint48 validAfter, uint48 validUntil, bool targetSuccess, bytes targetResult);\\r\\n\\r\\n    //UserOps handled, per aggregator\\r\\n    struct UserOpsPerAggregator {\\r\\n        UserOperation[] userOps;\\r\\n\\r\\n        // aggregator address\\r\\n        IAggregator aggregator;\\r\\n        // aggregated signature\\r\\n        bytes signature;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Execute a batch of UserOperation.\\r\\n     * no signature aggregator is used.\\r\\n     * if any account requires an aggregator (that is, it returned an aggregator when\\r\\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\\r\\n     * @param ops the operations to execute\\r\\n     * @param beneficiary the address to receive the fees\\r\\n     */\\r\\n    function handleOps(UserOperation[] calldata ops, address payable beneficiary) external;\\r\\n\\r\\n    /**\\r\\n     * Execute a batch of UserOperation with Aggregators\\r\\n     * @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\\r\\n     * @param beneficiary the address to receive the fees\\r\\n     */\\r\\n    function handleAggregatedOps(\\r\\n        UserOpsPerAggregator[] calldata opsPerAggregator,\\r\\n        address payable beneficiary\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * generate a request Id - unique identifier for this request.\\r\\n     * the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\\r\\n     */\\r\\n    function getUserOpHash(UserOperation calldata userOp) external view returns (bytes32);\\r\\n\\r\\n    /**\\r\\n     * Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\\r\\n     * @dev this method always revert. Successful result is ValidationResult error. other errors are failures.\\r\\n     * @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\\r\\n     * @param userOp the user operation to validate.\\r\\n     */\\r\\n    function simulateValidation(UserOperation calldata userOp) external;\\r\\n\\r\\n    /**\\r\\n     * gas and return values during simulation\\r\\n     * @param preOpGas the gas used for validation (including preValidationGas)\\r\\n     * @param prefund the required prefund for this operation\\r\\n     * @param sigFailed validateUserOp's (or paymaster's) signature check failed\\r\\n     * @param validAfter - first timestamp this UserOp is valid (merging account and paymaster time-range)\\r\\n     * @param validUntil - last timestamp this UserOp is valid (merging account and paymaster time-range)\\r\\n     * @param paymasterContext returned by validatePaymasterUserOp (to be passed into postOp)\\r\\n     */\\r\\n    struct ReturnInfo {\\r\\n        uint256 preOpGas;\\r\\n        uint256 prefund;\\r\\n        bool sigFailed;\\r\\n        uint48 validAfter;\\r\\n        uint48 validUntil;\\r\\n        bytes paymasterContext;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * returned aggregated signature info.\\r\\n     * the aggregator returned by the account, and its current stake.\\r\\n     */\\r\\n    struct AggregatorStakeInfo {\\r\\n        address aggregator;\\r\\n        StakeInfo stakeInfo;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get counterfactual sender address.\\r\\n     *  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\\r\\n     * this method always revert, and returns the address in SenderAddressResult error\\r\\n     * @param initCode the constructor code to be passed into the UserOperation.\\r\\n     */\\r\\n    function getSenderAddress(bytes memory initCode) external;\\r\\n\\r\\n\\r\\n    /**\\r\\n     * simulate full execution of a UserOperation (including both validation and target execution)\\r\\n     * this method will always revert with \\\"ExecutionResult\\\".\\r\\n     * it performs full validation of the UserOperation, but ignores signature error.\\r\\n     * an optional target address is called after the userop succeeds, and its value is returned\\r\\n     * (before the entire call is reverted)\\r\\n     * Note that in order to collect the the success/failure of the target call, it must be executed\\r\\n     * with trace enabled to track the emitted events.\\r\\n     * @param op the UserOperation to simulate\\r\\n     * @param target if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult\\r\\n     *        are set to the return from that call.\\r\\n     * @param targetCallData callData to pass to target address\\r\\n     */\\r\\n    function simulateHandleOp(UserOperation calldata op, address target, bytes calldata targetCallData) external;\\r\\n}\\r\\n\\r\\n\"\r\n    },\r\n    \"contracts/eip/4337/interfaces/INonceManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\ninterface INonceManager {\\r\\n\\r\\n    /**\\r\\n     * Return the next nonce for this sender.\\r\\n     * Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop)\\r\\n     * But UserOp with different keys can come with arbitrary order.\\r\\n     *\\r\\n     * @param sender the account address\\r\\n     * @param key the high 192 bit of the nonce\\r\\n     * @return nonce a full nonce to pass for next UserOp with this sender.\\r\\n     */\\r\\n    function getNonce(address sender, uint192 key)\\r\\n    external view returns (uint256 nonce);\\r\\n\\r\\n    /**\\r\\n     * Manually increment the nonce of the sender.\\r\\n     * This method is exposed just for completeness..\\r\\n     * Account does NOT need to call it, neither during validation, nor elsewhere,\\r\\n     * as the EntryPoint will update the nonce regardless.\\r\\n     * Possible use-case is call it with various keys to \\\"initialize\\\" their nonces to one, so that future\\r\\n     * UserOperations will not pay extra for the first transaction with a given key.\\r\\n     */\\r\\n    function incrementNonce(uint192 key) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/eip/4337/interfaces/IStakeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT-only\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\n/**\\r\\n * manage deposits and stakes.\\r\\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\\r\\n * stake is value locked for at least \\\"unstakeDelay\\\" by the staked entity.\\r\\n */\\r\\ninterface IStakeManager {\\r\\n\\r\\n    event Deposited(\\r\\n        address indexed account,\\r\\n        uint256 totalDeposit\\r\\n    );\\r\\n\\r\\n    event Withdrawn(\\r\\n        address indexed account,\\r\\n        address withdrawAddress,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    /// Emitted when stake or unstake delay are modified\\r\\n    event StakeLocked(\\r\\n        address indexed account,\\r\\n        uint256 totalStaked,\\r\\n        uint256 unstakeDelaySec\\r\\n    );\\r\\n\\r\\n    /// Emitted once a stake is scheduled for withdrawal\\r\\n    event StakeUnlocked(\\r\\n        address indexed account,\\r\\n        uint256 withdrawTime\\r\\n    );\\r\\n\\r\\n    event StakeWithdrawn(\\r\\n        address indexed account,\\r\\n        address withdrawAddress,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @param deposit the entity's deposit\\r\\n     * @param staked true if this entity is staked.\\r\\n     * @param stake actual amount of ether staked for this entity.\\r\\n     * @param unstakeDelaySec minimum delay to withdraw the stake.\\r\\n     * @param withdrawTime - first block timestamp where 'withdrawStake' will be callable, or zero if already locked\\r\\n     * @dev sizes were chosen so that (deposit,staked, stake) fit into one cell (used during handleOps)\\r\\n     *    and the rest fit into a 2nd cell.\\r\\n     *    112 bit allows for 10^15 eth\\r\\n     *    48 bit for full timestamp\\r\\n     *    32 bit allows 150 years for unstake delay\\r\\n     */\\r\\n    struct DepositInfo {\\r\\n        uint112 deposit;\\r\\n        bool staked;\\r\\n        uint112 stake;\\r\\n        uint32 unstakeDelaySec;\\r\\n        uint48 withdrawTime;\\r\\n    }\\r\\n\\r\\n    //API struct used by getStakeInfo and simulateValidation\\r\\n    struct StakeInfo {\\r\\n        uint256 stake;\\r\\n        uint256 unstakeDelaySec;\\r\\n    }\\r\\n\\r\\n    /// @return info - full deposit information of given account\\r\\n    function getDepositInfo(address account) external view returns (DepositInfo memory info);\\r\\n\\r\\n    /// @return the deposit (for gas payment) of the account\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * add to the deposit of the given account\\r\\n     */\\r\\n    function depositTo(address account) external payable;\\r\\n\\r\\n    /**\\r\\n     * add to the account's stake - amount and delay\\r\\n     * any pending unstake is first cancelled.\\r\\n     * @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn.\\r\\n     */\\r\\n    function addStake(uint32 _unstakeDelaySec) external payable;\\r\\n\\r\\n    /**\\r\\n     * attempt to unlock the stake.\\r\\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\\r\\n     */\\r\\n    function unlockStake() external;\\r\\n\\r\\n    /**\\r\\n     * withdraw from the (unlocked) stake.\\r\\n     * must first call unlockStake and wait for the unstakeDelay to pass\\r\\n     * @param withdrawAddress the address to send withdrawn value.\\r\\n     */\\r\\n    function withdrawStake(address payable withdrawAddress) external;\\r\\n\\r\\n    /**\\r\\n     * withdraw from the deposit.\\r\\n     * @param withdrawAddress the address to send withdrawn value.\\r\\n     * @param withdrawAmount the amount to withdraw.\\r\\n     */\\r\\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/eip/4337/interfaces/UserOperation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\n/* solhint-disable no-inline-assembly */\\r\\n\\r\\nimport {calldataKeccak} from \\\"../core/Helpers.sol\\\";\\r\\n\\r\\n/**\\r\\n * User Operation struct\\r\\n * @param sender the sender account of this request.\\r\\n     * @param nonce unique value the sender uses to verify it is not a replay.\\r\\n     * @param initCode if set, the account contract will be created by this constructor/\\r\\n     * @param callData the method call to execute on this account.\\r\\n     * @param callGasLimit the gas limit passed to the callData method call.\\r\\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\\r\\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\r\\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\\r\\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\\r\\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\\r\\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\r\\n     */\\r\\n    struct UserOperation {\\r\\n\\r\\n        address sender;\\r\\n        uint256 nonce;\\r\\n        bytes initCode;\\r\\n        bytes callData;\\r\\n        uint256 callGasLimit;\\r\\n        uint256 verificationGasLimit;\\r\\n        uint256 preVerificationGas;\\r\\n        uint256 maxFeePerGas;\\r\\n        uint256 maxPriorityFeePerGas;\\r\\n        bytes paymasterAndData;\\r\\n        bytes signature;\\r\\n    }\\r\\n\\r\\n/**\\r\\n * Utility functions helpful when working with UserOperation structs.\\r\\n */\\r\\nlibrary UserOperationLib {\\r\\n\\r\\n    function setSender(UserOperation calldata userOp) internal pure returns (address) {\\r\\n        address data;\\r\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\r\\n        assembly {data := calldataload(userOp)}\\r\\n        return address(uint160(data));\\r\\n    }\\r\\n\\r\\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\\r\\n    // pay above what he signed for.\\r\\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\\r\\n    unchecked {\\r\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\r\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\r\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\r\\n            //legacy mode (for networks that don't support basefee opcode)\\r\\n            return maxFeePerGas;\\r\\n        }\\r\\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\r\\n    }\\r\\n    }\\r\\n\\r\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\r\\n        address sender = setSender(userOp);\\r\\n        uint256 nonce = userOp.nonce;\\r\\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\\r\\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\\r\\n        uint256 callGasLimit = userOp.callGasLimit;\\r\\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\\r\\n        uint256 preVerificationGas = userOp.preVerificationGas;\\r\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\r\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\r\\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\\r\\n\\r\\n        return abi.encode(\\r\\n            sender, nonce,\\r\\n            hashInitCode, hashCallData,\\r\\n            callGasLimit, verificationGasLimit, preVerificationGas,\\r\\n            maxFeePerGas, maxPriorityFeePerGas,\\r\\n            hashPaymasterAndData\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\r\\n        return keccak256(pack(userOp));\\r\\n    }\\r\\n\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/eip/4337/utils/TokenCallbackHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\n/* solhint-disable no-empty-blocks */\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\r\\n\\r\\n/**\\r\\n * Token callback handler.\\r\\n *   Handles supported tokens' callbacks, allowing account receiving these tokens.\\r\\n */\\r\\ncontract TokenCallbackHandler is IERC777Recipient, IERC721Receiver, IERC1155Receiver {\\r\\n    function tokensReceived(\\r\\n        address,\\r\\n        address,\\r\\n        address,\\r\\n        uint256,\\r\\n        bytes calldata,\\r\\n        bytes calldata\\r\\n    ) external pure override {\\r\\n    }\\r\\n\\r\\n    function onERC721Received(\\r\\n        address,\\r\\n        address,\\r\\n        uint256,\\r\\n        bytes calldata\\r\\n    ) external pure override returns (bytes4) {\\r\\n        return IERC721Receiver.onERC721Received.selector;\\r\\n    }\\r\\n\\r\\n    function onERC1155Received(\\r\\n        address,\\r\\n        address,\\r\\n        uint256,\\r\\n        uint256,\\r\\n        bytes calldata\\r\\n    ) external pure override returns (bytes4) {\\r\\n        return IERC1155Receiver.onERC1155Received.selector;\\r\\n    }\\r\\n\\r\\n    function onERC1155BatchReceived(\\r\\n        address,\\r\\n        address,\\r\\n        uint256[] calldata,\\r\\n        uint256[] calldata,\\r\\n        bytes calldata\\r\\n    ) external pure override returns (bytes4) {\\r\\n        return IERC1155Receiver.onERC1155BatchReceived.selector;\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\\r\\n        return\\r\\n            interfaceId == type(IERC721Receiver).interfaceId ||\\r\\n            interfaceId == type(IERC1155Receiver).interfaceId ||\\r\\n            interfaceId == type(IERC165).interfaceId;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/internal/IOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\ninterface IOwnable{\\r\\n    function owner() external view returns(address);\\r\\n    function transferOwnership(address _newOwner) external;\\r\\n    function setDBControlWhitelist(address[] memory _modules,bool[] memory _status)  external;\\r\\n    function getDBControlWhitelist(address _module) external view returns(bool);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/internal/IPlatformFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\ninterface IPlatformFacet{\\r\\n    struct ProtocolAndA{\\r\\n        address addr;\\r\\n        address module;\\r\\n        string  protocol;      \\r\\n    }\\r\\n    event SetModules(address[]  _modules,bool[]  _status);\\r\\n    event SetProtocols(address _module,string[]  _protocols,address[]  _protocolAddrs);\\r\\n    event SetTokens(address[]  _tokens,uint256[]  _tokenTypes);\\r\\n    event AddWalletToVault(address _wallet,address _vault,uint256 _salt);\\r\\n    event RemoveWalletToVault(address _wallet,address[]  _vaults);\\r\\n    event SetWeth(address _weth);\\r\\n    event SetEth(address _eth);\\r\\n    event SetVaultImplementation(address _implementation);\\r\\n    event SetProxyCodeHash(address _proxy,bool _option);\\r\\n\\r\\n    function setModules(address[] memory _modules,bool[] memory _status)  external;\\r\\n    function getAllModules()  external view returns(address[] memory);\\r\\n    function getModuleStatus(address _module) external view returns(bool);   \\r\\n\\r\\n\\r\\n    function setProtocols(address _module,string[] memory _protocols,address[] memory _protocolAddrs) external;\\r\\n    function getProtocols()  external view returns(ProtocolAndA[] memory);\\r\\n    function getModuleToProtocolA(address _module,string memory _protocol) external view returns(address);\\r\\n\\r\\n\\r\\n    function setTokens(address[] memory _tokens,uint256[] memory _tokenTypes)  external;\\r\\n    function getTokens()  external view returns(address[] memory);  \\r\\n    function getTokenType(address _token) external view returns(uint256);\\r\\n\\r\\n\\r\\n    function addWalletToVault(address _wallet,address _vault,uint256 _salt) external;\\r\\n    function removeWalletToVault(address _wallet,address[] memory _vaults) external;\\r\\n    function getAllVaultByWallet(address _wallet) external view returns(address[] memory);\\r\\n    function getVaultToSalt(address _vault) external view returns(uint256);\\r\\n    function getIsVault(address _vault) external view returns(bool);\\r\\n\\r\\n    function setWeth(address _weth) external;\\r\\n    function getWeth() external view returns(address);\\r\\n\\r\\n    function setEth(address _eth) external;\\r\\n    function getEth() external view returns(address);\\r\\n\\r\\n    function getVaultImplementation() external view returns(address);\\r\\n    function setVaultImplementation(address _implementation) external; \\r\\n    function setProxyCodeHash(address _proxy,bool _option) external;  \\r\\n    function getProxyCodeHash(address _proxy) external view returns(bool);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/internal/IVaultFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\ninterface IVaultFacet{\\r\\n      struct Position{  \\r\\n           uint16  positionType;  //1 normal 2 aave asset 3 compound asset 4gmx  asset\\r\\n           uint16  debtType;   // 0 normal    1  debt           \\r\\n           uint16 ableUse;   // 0 unused   1 used\\r\\n           address component; \\r\\n           uint256 balance;\\r\\n           bytes data; \\r\\n      }\\r\\n     event SetVaultType(address _vault,uint256 _vaultType);\\r\\n     event SetSourceType(address _vault,uint256 _sourceType);\\r\\n     event SetVaultMasterToken(address _vault,address _masterToken);\\r\\n     event SetVaultLock(address _vault,bool _lock);\\r\\n     event SetVaultTime(address _vault,uint256 _time);\\r\\n     event SetVaultModules(address _vault,address[]  _modules,bool[]  _status);\\r\\n     event SetVaultTokens(address _vault,address[] _tokens,uint256[]  _types);\\r\\n     event SetVaultProtocol(address _vault,address[]  _protocols,bool[]  _status);\\r\\n     event SetVaultPosition(address _vault,address _component,uint16[3]  _append);\\r\\n     event SetVaultPositionData(address _vault,address _component,uint256 _positionType,bytes  _data);\\r\\n     event SetVaultPositionBalance(address _vault,address _component,uint256 _positionType,uint256 _balance);  \\r\\n    \\r\\n     event SetFuncWhiteList(address _vault,bytes4 _func,bool _type);\\r\\n     event SetFuncBlackList(address _vault,bytes4 _func,bool _type);\\r\\n\\r\\n\\r\\n\\r\\n     function setVaultType(address _vault,uint256 _vaultType) external;\\r\\n     function getVaultType(address _vault) external view returns(uint256);\\r\\n     function setSourceType(address _vault,uint256 _sourceType) external;\\r\\n     function getSourceType(address _vault) external view returns(uint256);\\r\\n     \\r\\n     function setVaultMasterToken(address _vault,address _masterToken) external;\\r\\n     function getVaultMasterToken(address _vault) external view returns(address);\\r\\n     \\r\\n     function setVaultLock(address _vault,bool _lock) external;\\r\\n     function getVaultLock(address _vault) external view returns(bool);\\r\\n     function setVaultTime(address _vault,uint256 _time) external;\\r\\n     function getVaulTime(address _vault) external view returns(uint256);\\r\\n\\r\\n\\r\\n     function setVaultModules(address _vault,address[] memory _modules,bool[] memory _status) external; \\r\\n     function getVaultAllModules(address _vault) external view returns(address[] memory);\\r\\n     function getVaultModuleStatus(address _vault,address _module) external view returns(bool);\\r\\n\\r\\n     function setVaultTokens(address _vault,address[] memory _tokens,uint256[] memory _status) external;\\r\\n     function getVaultAllTokens(address _vault) external view returns(address[] memory);\\r\\n     function getVaultTokenType(address _vault,address _token) external view returns(uint256);\\r\\n\\r\\n     function setVaultProtocol(address _vault,address[] memory _protocols,bool[] memory _status) external;\\r\\n     function getVaultAllProtocol(address _vault) external view returns(address[] memory);\\r\\n     function getVaultProtocolStatus(address _vault,address  _protocol) external view returns(bool);\\r\\n\\r\\n     function setVaultPosition(address _vault,address _component,uint16[3] memory _append) external;\\r\\n     function setVaultPositionData(address _vault,address _component,uint256 _positionType,bytes memory _data) external;\\r\\n     function getVaultAllPosition(address _vault,uint16[] memory _positionTypes) external view returns(Position[] memory positions);\\r\\n     function getVaultProtocolPosition(address _vault,uint16 _positionType) external view returns(Position[] memory positions);\\r\\n     function getVaultPosition(address _vault,address _component, uint256 _positionType) external view returns(Position memory position);\\r\\n    \\r\\n     function setFuncWhiteList(address _vault,bytes4 _func,bool _type) external;\\r\\n     function getFuncWhiteList(address _vault,bytes4 _func) external view returns(bool);\\r\\n     function setFuncBlackList(address _vault,bytes4 _func,bool _type) external;\\r\\n     function getFuncBlackList(address _vault,bytes4 _func) external view returns(bool);\\r\\n}\"\r\n    },\r\n    \"contracts/Vault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\n\\r\\n\\r\\nimport \\\"./eip/4337/core/BaseAccount.sol\\\";\\r\\nimport \\\"./eip/4337/utils/TokenCallbackHandler.sol\\\";\\r\\n\\r\\ninterface IVaultVaild{\\r\\n    function validVaultModule(address _module,uint256 _value,bytes memory func)  external view;\\r\\n    function removeVault(address _vault) external;\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\ncontract Vault is BaseAccount,TokenCallbackHandler, UUPSUpgradeable, Initializable{\\r\\n    using ECDSA for bytes32;\\r\\n\\r\\n    address public owner;\\r\\n\\r\\n    IEntryPoint private immutable _entryPoint;\\r\\n\\r\\n    function vaultVaild() internal pure returns(IVaultVaild){\\r\\n          return IVaultVaild(0xE53a40106eB2d255f989f122B6389D94797DbA15);\\r\\n           \\r\\n    }\\r\\n    function _validModule(address module,uint256 _value,bytes memory func)  internal view{        \\r\\n           vaultVaild().validVaultModule(module,_value,func);\\r\\n    }\\r\\n\\r\\n    event VaultInitialized(IEntryPoint indexed entryPoint, address indexed owner);\\r\\n    modifier onlyOwner() {\\r\\n        _onlyOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc BaseAccount\\r\\n    function entryPoint() public view virtual override returns (IEntryPoint) {\\r\\n        return _entryPoint;\\r\\n    }\\r\\n\\r\\n\\r\\n    // solhint-disable-next-line no-empty-blocks\\r\\n    receive() external payable {}\\r\\n\\r\\n    constructor(IEntryPoint anEntryPoint) {\\r\\n        _entryPoint = anEntryPoint;\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    function _onlyOwner() internal view {\\r\\n        //directly from EOA owner, or through the account itself (which gets redirected through execute())\\r\\n        require(msg.sender == owner || msg.sender == address(this), \\\"only owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * execute a transaction (called directly from owner, or by entryPoint)\\r\\n     */\\r\\n    function execute(address dest, uint256 value, bytes calldata func) external returns(bytes memory result){\\r\\n        address[] memory _dest=new address[](1);\\r\\n        _dest[0]=dest;\\r\\n        _requireFromEntryPointOrOwner(dest,value,func);\\r\\n        result=_call(dest, value, func);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * execute a sequence of transactions\\r\\n     */\\r\\n    function executeBatch(address[] calldata dest,uint256[] calldata value, bytes[] calldata func) external returns(bytes[] memory results){\\r\\n        require(dest.length == func.length, \\\"vault:wrong array lengths\\\");\\r\\n        results=new bytes[](dest.length);\\r\\n        for (uint256 i = 0; i < dest.length; i++) {\\r\\n            _requireFromEntryPointOrOwner(dest[i],value[i],func[i]);\\r\\n            results[i]=_call(dest[i], value[i], func[i]);\\r\\n        }\\r\\n    }\\r\\n    /**\\r\\n     * @dev The _entryPoint member is immutable, to reduce gas consumption.  To upgrade EntryPoint,\\r\\n     * a new implementation of Vault must be deployed with the new EntryPoint address, then upgrading\\r\\n      * the implementation by calling `upgradeTo()`\\r\\n     */\\r\\n    function initialize(address anOwner) public virtual initializer {\\r\\n        _initialize(anOwner);\\r\\n    }\\r\\n    function _initialize(address anOwner) internal virtual {\\r\\n        owner = anOwner;\\r\\n        emit VaultInitialized(_entryPoint, owner);\\r\\n    }\\r\\n    // Require the function call went through EntryPoint or owner\\r\\n    function _requireFromEntryPointOrOwner(address dest,uint256 value,bytes calldata func) internal view {\\r\\n        if(msg.sender == address(entryPoint()) || msg.sender == owner){\\r\\n            _validModule(dest,value,func);\\r\\n        }else{\\r\\n            _validModule(msg.sender,value,func);\\r\\n        }     \\r\\n    }\\r\\n\\r\\n    /// implement template method of BaseAccount\\r\\n    function _validateSignature(UserOperation calldata userOp, bytes32 userOpHash)\\r\\n    internal override virtual returns (uint256 validationData) {\\r\\n        bytes32 hash = userOpHash.toEthSignedMessageHash();\\r\\n        if (owner != hash.recover(userOp.signature))\\r\\n            return SIG_VALIDATION_FAILED;\\r\\n        return 0;\\r\\n    }\\r\\n    function _call(address target, uint256 value, bytes memory data) internal returns(bytes memory){\\r\\n        (bool success, bytes memory result) = target.call{value : value}(data);\\r\\n        if (!success) {\\r\\n            assembly {\\r\\n                revert(add(result, 32), mload(result))\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n    /**\\r\\n     * check current account deposit in the entryPoint\\r\\n     */\\r\\n    function getDeposit() public view returns (uint256) {\\r\\n        return entryPoint().balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * deposit more funds for this account in the entryPoint\\r\\n     */\\r\\n    function addDeposit() public payable {\\r\\n        entryPoint().depositTo{value : msg.value}(address(this));\\r\\n    }\\r\\n    /**\\r\\n     * withdraw value from the account's deposit\\r\\n     * @param withdrawAddress target to send to\\r\\n     * @param amount to withdraw\\r\\n     */\\r\\n    function withdrawDepositTo(address payable withdrawAddress, uint256 amount) public onlyOwner {\\r\\n        entryPoint().withdrawTo(withdrawAddress, amount);\\r\\n    }\\r\\n\\r\\n    function _authorizeUpgrade(address newImplementation) internal view override {\\r\\n        (newImplementation);\\r\\n        _onlyOwner();\\r\\n    }\\r\\n    /**\\r\\n      Override the upgrade method\\r\\n     */\\r\\n     function upgradeTo(address newImplementation) public override onlyProxy{\\r\\n        _validModule(msg.sender,0,abi.encodePacked(this.upgradeTo.selector));\\r\\n        vaultVaild().removeVault(address(this));\\r\\n        _authorizeUpgrade(newImplementation);\\r\\n        _upgradeToAndCallUUPS(newImplementation,new bytes(0), false);\\r\\n     }\\r\\n     function upgradeToAndCall(address newImplementation, bytes memory data) public payable override onlyProxy{\\r\\n        _validModule(msg.sender,0,abi.encodePacked(this.upgradeToAndCall.selector));\\r\\n         vaultVaild().removeVault(address(this));\\r\\n        _authorizeUpgrade(newImplementation);\\r\\n        _upgradeToAndCallUUPS(newImplementation,data, false);\\r\\n     }\\r\\n\\r\\n     /**Implementation  address*/\\r\\n     function getImplementation() public view returns(address){\\r\\n        return  ERC1967Upgrade._getImplementation();\\r\\n     }\\r\\n}\"\r\n    },\r\n    \"contracts/VaultFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\r\\nimport \\\"./eip/4337/interfaces/IEntryPoint.sol\\\";\\r\\nimport \\\"./Vault.sol\\\";\\r\\nimport {IOwnable} from \\\"./interfaces/internal/IOwnable.sol\\\";\\r\\nimport {IPlatformFacet} from \\\"./interfaces/internal/IPlatformFacet.sol\\\";\\r\\nimport {IVaultFacet} from \\\"./interfaces/internal/IVaultFacet.sol\\\";\\r\\n/**\\r\\n * A sample factory contract for Vault\\r\\n * A UserOperations \\\"initCode\\\" holds the address of the factory, and a method call (to createAccount, in this sample factory).\\r\\n * The factory's createAccount returns the target account address even if it is already installed.\\r\\n * This way, the entryPoint.getSenderAddress() can be called either before or after the account is created.\\r\\n */\\r\\ncontract VaultFactory is Initializable,UUPSUpgradeable {\\r\\n    IEntryPoint public entryPoint;\\r\\n    address public diamond;\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == IOwnable(diamond).owner(), \\\"only owner\\\");\\r\\n        _;\\r\\n    }\\r\\n    event CreateVault(address _wallet,uint256 _salt,address _vault);\\r\\n\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() {\\r\\n      _disableInitializers();\\r\\n    }\\r\\n\\r\\n    function initialize(IEntryPoint _entryPoint,address _diamond) initializer public {    \\r\\n        entryPoint=_entryPoint;\\r\\n        diamond=_diamond; \\r\\n    }\\r\\n    function _authorizeUpgrade(address newImplementation)\\r\\n        internal\\r\\n        onlyOwner\\r\\n        override\\r\\n    {}\\r\\n    function addStake(uint32 unstakeDelaySec) external payable onlyOwner {\\r\\n        entryPoint.addStake{value : msg.value}(unstakeDelaySec);\\r\\n    }\\r\\n    function setVaultImplementation() public onlyOwner{\\r\\n          Vault accountImplementation = new Vault(entryPoint); \\r\\n          IPlatformFacet(diamond).setVaultImplementation(address(accountImplementation));  \\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * create an account, and return its address.\\r\\n     * returns the address even if the account is already deployed.\\r\\n     * Note that during UserOperation execution, this method is called only if the account is not deployed.\\r\\n     * This method returns an existing account address so that entryPoint.getSenderAddress() would work even after account creation\\r\\n     */\\r\\n    function createAccount(address wallet,uint256 salt) public returns (Vault ret) {\\r\\n        address addr = getAddress(wallet, salt);\\r\\n        uint codeSize = addr.code.length;\\r\\n        if (codeSize > 0) {\\r\\n            return Vault(payable(addr));\\r\\n        }\\r\\n        IPlatformFacet platformFact= IPlatformFacet(diamond);\\r\\n        address accountImplementation =platformFact.getVaultImplementation();\\r\\n        ret = Vault(payable(new ERC1967Proxy{salt : bytes32(salt)}(\\r\\n                accountImplementation,\\r\\n                abi.encodeCall(Vault.initialize, (wallet))\\r\\n            )));\\r\\n        //add to PlatformFacet\\r\\n        platformFact.addWalletToVault(wallet,address(ret),salt);  \\r\\n        //\\r\\n        IVaultFacet(diamond).setSourceType(address(ret),1);\\r\\n        // salt ==0   vault == mainVault\\r\\n        if(salt==0){\\r\\n            IVaultFacet(diamond).setVaultType(address(ret),1);\\r\\n        }\\r\\n        emit CreateVault(wallet,salt,address(ret)); \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * calculate the counterfactual address of this account as it would be returned by createAccount()\\r\\n     */\\r\\n    function getAddress(address wallet,uint256 salt) public view returns (address) {\\r\\n        address accountImplementation=IPlatformFacet(diamond).getVaultImplementation();\\r\\n        return Create2.computeAddress(bytes32(salt), keccak256(abi.encodePacked(\\r\\n                type(ERC1967Proxy).creationCode,\\r\\n                abi.encode(\\r\\n                    accountImplementation,\\r\\n                    abi.encodeCall(Vault.initialize, (wallet))\\r\\n                )\\r\\n            )));\\r\\n    }\\r\\n    function getWalletToVault(address wallet) public view returns(address[] memory){\\r\\n        return IPlatformFacet(diamond).getAllVaultByWallet(wallet);\\r\\n    }\\r\\n\\r\\n    function getVaultToSalt(address vault) external view returns(uint256) {\\r\\n        return IPlatformFacet(diamond).getVaultToSalt(vault);\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"CreateVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"unstakeDelaySec\",\"type\":\"uint32\"}],\"name\":\"addStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"createAccount\",\"outputs\":[{\"internalType\":\"contract Vault\",\"name\":\"ret\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"diamond\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entryPoint\",\"outputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"getVaultToSalt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getWalletToVault\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"_entryPoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_diamond\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setVaultImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "VaultFactory", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}