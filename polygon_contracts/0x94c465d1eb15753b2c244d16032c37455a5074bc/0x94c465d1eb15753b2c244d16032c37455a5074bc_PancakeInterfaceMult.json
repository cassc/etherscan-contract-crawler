{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.6;\r\npragma abicoder v2;\r\n\r\n/// @notice A fork of MultiCall with gas limit\r\ncontract PancakeInterfaceMulticallV2 {\r\n    struct Call {\r\n        address target;\r\n        uint256 gasLimit;\r\n        bytes callData;\r\n    }\r\n\r\n    struct Result {\r\n        bool success;\r\n        uint256 gasUsed;\r\n        bytes returnData;\r\n    }\r\n\r\n    function multicall(Call[] memory calls) public returns (uint256 blockNumber, Result[] memory returnData) {\r\n        blockNumber = block.number;\r\n        returnData = new Result[](calls.length);\r\n\r\n        for (uint256 i = 0; i < calls.length; i++) {\r\n            (address target, uint256 gasLimit, bytes memory callData) = (\r\n                calls[i].target,\r\n                calls[i].gasLimit,\r\n                calls[i].callData\r\n            );\r\n\r\n            uint256 gasLeftBefore = gasleft();\r\n            (bool success, bytes memory ret) = target.call{gas: gasLimit}(callData);\r\n            uint256 gasUsed = gasLeftBefore - gasleft();\r\n            returnData[i] = Result(success, gasUsed, ret);\r\n        }\r\n    }\r\n\r\n    function multicallWithGasLimitation(\r\n        Call[] memory calls,\r\n        uint256 gasBuffer\r\n    ) public returns (uint256 blockNumber, Result[] memory returnData, uint256 lastSuccessIndex) {\r\n        blockNumber = block.number;\r\n        returnData = new Result[](calls.length);\r\n\r\n        for (uint256 i = 0; i < calls.length; i++) {\r\n            (address target, uint256 gasLimit, bytes memory callData) = (\r\n                calls[i].target,\r\n                calls[i].gasLimit,\r\n                calls[i].callData\r\n            );\r\n\r\n            uint256 gasLeftBefore = gasleft();\r\n            (bool success, bytes memory ret) = target.call{gas: gasLimit}(callData);\r\n            uint256 gasUsed = gasLeftBefore - gasleft();\r\n            returnData[i] = Result(success, gasUsed, ret);\r\n\r\n            if (gasleft() < gasBuffer) {\r\n                return (blockNumber, returnData, i);\r\n            }\r\n        }\r\n\r\n        return (blockNumber, returnData, calls.length - 1);\r\n    }\r\n\r\n    function gaslimit() external view returns (uint256) {\r\n        return block.gaslimit;\r\n    }\r\n\r\n    function gasLeft() external view returns (uint256) {\r\n        return gasleft();\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"name\":\"gasLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaslimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct PancakeInterfaceMulticallV2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct PancakeInterfaceMulticallV2.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct PancakeInterfaceMulticallV2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"gasBuffer\",\"type\":\"uint256\"}],\"name\":\"multicallWithGasLimitation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct PancakeInterfaceMulticallV2.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"lastSuccessIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PancakeInterfaceMulticallV2", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://20b2f8299c340d66cc310c7f32e073c1870eaab156578069fda8b4520ffe4b62"}