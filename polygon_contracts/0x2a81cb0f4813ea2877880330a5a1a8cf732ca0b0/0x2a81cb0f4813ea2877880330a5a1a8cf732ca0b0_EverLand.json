{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.9;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n  /**\r\n   * @dev Returns true if this contract implements the interface defined by\r\n   * `interfaceId`. See the corresponding\r\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n   * to learn more about how these ids are created.\r\n   *\r\n   * This function call must use less than 30 000 gas.\r\n   */\r\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\npragma solidity 0.8.9;\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n  /**\r\n   * @dev See {IERC165-supportsInterface}.\r\n   */\r\n  function supportsInterface(bytes4 interfaceId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (bool)\r\n  {\r\n    return interfaceId == type(IERC165).interfaceId;\r\n  }\r\n}\r\n\r\npragma solidity 0.8.9;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n  bytes16 private constant _HEX_SYMBOLS = '0123456789abcdef';\r\n\r\n  /**\r\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n   */\r\n  function toString(uint256 value) internal pure returns (string memory) {\r\n    // Inspired by OraclizeAPI's implementation - MIT licence\r\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n    if (value == 0) {\r\n      return '0';\r\n    }\r\n    uint256 temp = value;\r\n    uint256 digits;\r\n    while (temp != 0) {\r\n      digits++;\r\n      temp /= 10;\r\n    }\r\n    bytes memory buffer = new bytes(digits);\r\n    while (value != 0) {\r\n      digits -= 1;\r\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n      value /= 10;\r\n    }\r\n    return string(buffer);\r\n  }\r\n\r\n  /**\r\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n   */\r\n  function toHexString(uint256 value) internal pure returns (string memory) {\r\n    if (value == 0) {\r\n      return '0x00';\r\n    }\r\n    uint256 temp = value;\r\n    uint256 length = 0;\r\n    while (temp != 0) {\r\n      length++;\r\n      temp >>= 8;\r\n    }\r\n    return toHexString(value, length);\r\n  }\r\n\r\n  /**\r\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n   */\r\n  function toHexString(uint256 value, uint256 length)\r\n    internal\r\n    pure\r\n    returns (string memory)\r\n  {\r\n    bytes memory buffer = new bytes(2 * length + 2);\r\n    buffer[0] = '0';\r\n    buffer[1] = 'x';\r\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n      buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n      value >>= 4;\r\n    }\r\n    require(value == 0, 'Strings: hex length insufficient');\r\n    return string(buffer);\r\n  }\r\n}\r\n\r\npragma solidity 0.8.9;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n  /**\r\n   * @dev Returns true if `account` is a contract.\r\n   *\r\n   * [IMPORTANT]\r\n   * ====\r\n   * It is unsafe to assume that an address for which this function returns\r\n   * false is an externally-owned account (EOA) and not a contract.\r\n   *\r\n   * Among others, `isContract` will return false for the following\r\n   * types of addresses:\r\n   *\r\n   *  - an externally-owned account\r\n   *  - a contract in construction\r\n   *  - an address where a contract will be created\r\n   *  - an address where a contract lived, but was destroyed\r\n   * ====\r\n   */\r\n  function isContract(address account) internal view returns (bool) {\r\n    // This method relies on extcodesize, which returns 0 for contracts in\r\n    // construction, since the code is only stored at the end of the\r\n    // constructor execution.\r\n\r\n    uint256 size;\r\n    assembly {\r\n      size := extcodesize(account)\r\n    }\r\n    return size > 0;\r\n  }\r\n\r\n  /**\r\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n   * `recipient`, forwarding all available gas and reverting on errors.\r\n   *\r\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n   * imposed by `transfer`, making them unable to receive funds via\r\n   * `transfer`. {sendValue} removes this limitation.\r\n   *\r\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n   *\r\n   * IMPORTANT: because control is transferred to `recipient`, care must be\r\n   * taken to not create reentrancy vulnerabilities. Consider using\r\n   * {ReentrancyGuard} or the\r\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n   */\r\n  function sendValue(address payable recipient, uint256 amount) internal {\r\n    require(address(this).balance >= amount, 'Address: insufficient balance');\r\n\r\n    (bool success, ) = recipient.call{value: amount}('');\r\n    require(\r\n      success,\r\n      'Address: unable to send value, recipient may have reverted'\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Performs a Solidity function call using a low level `call`. A\r\n   * plain `call` is an unsafe replacement for a function call: use this\r\n   * function instead.\r\n   *\r\n   * If `target` reverts with a revert reason, it is bubbled up by this\r\n   * function (like regular Solidity function calls).\r\n   *\r\n   * Returns the raw returned data. To convert to the expected return value,\r\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `target` must be a contract.\r\n   * - calling `target` with `data` must not revert.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCall(address target, bytes memory data)\r\n    internal\r\n    returns (bytes memory)\r\n  {\r\n    return functionCall(target, data, 'Address: low-level call failed');\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n   * `errorMessage` as a fallback revert reason when `target` reverts.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    return functionCallWithValue(target, data, 0, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n   * but also transferring `value` wei to `target`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - the calling contract must have an ETH balance of at least `value`.\r\n   * - the called Solidity function must be `payable`.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCallWithValue(\r\n    address target,\r\n    bytes memory data,\r\n    uint256 value\r\n  ) internal returns (bytes memory) {\r\n    return\r\n      functionCallWithValue(\r\n        target,\r\n        data,\r\n        value,\r\n        'Address: low-level call with value failed'\r\n      );\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCallWithValue(\r\n    address target,\r\n    bytes memory data,\r\n    uint256 value,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    require(\r\n      address(this).balance >= value,\r\n      'Address: insufficient balance for call'\r\n    );\r\n    require(isContract(target), 'Address: call to non-contract');\r\n\r\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n    return verifyCallResult(success, returndata, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n   * but performing a static call.\r\n   *\r\n   * _Available since v3.3._\r\n   */\r\n  function functionStaticCall(address target, bytes memory data)\r\n    internal\r\n    view\r\n    returns (bytes memory)\r\n  {\r\n    return\r\n      functionStaticCall(target, data, 'Address: low-level static call failed');\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n   * but performing a static call.\r\n   *\r\n   * _Available since v3.3._\r\n   */\r\n  function functionStaticCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal view returns (bytes memory) {\r\n    require(isContract(target), 'Address: static call to non-contract');\r\n\r\n    (bool success, bytes memory returndata) = target.staticcall(data);\r\n    return verifyCallResult(success, returndata, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n   * but performing a delegate call.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function functionDelegateCall(address target, bytes memory data)\r\n    internal\r\n    returns (bytes memory)\r\n  {\r\n    return\r\n      functionDelegateCall(\r\n        target,\r\n        data,\r\n        'Address: low-level delegate call failed'\r\n      );\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n   * but performing a delegate call.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function functionDelegateCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    require(isContract(target), 'Address: delegate call to non-contract');\r\n\r\n    (bool success, bytes memory returndata) = target.delegatecall(data);\r\n    return verifyCallResult(success, returndata, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n   * revert reason using the provided one.\r\n   *\r\n   * _Available since v4.3._\r\n   */\r\n  function verifyCallResult(\r\n    bool success,\r\n    bytes memory returndata,\r\n    string memory errorMessage\r\n  ) internal pure returns (bytes memory) {\r\n    if (success) {\r\n      return returndata;\r\n    } else {\r\n      // Look for revert reason and bubble it up if present\r\n      if (returndata.length > 0) {\r\n        // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n        assembly {\r\n          let returndata_size := mload(returndata)\r\n          revert(add(32, returndata), returndata_size)\r\n        }\r\n      } else {\r\n        revert(errorMessage);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\npragma solidity 0.8.9;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n  /**\r\n   * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n   */\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 indexed tokenId\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n   */\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed approved,\r\n    uint256 indexed tokenId\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n   */\r\n  event ApprovalForAll(\r\n    address indexed owner,\r\n    address indexed operator,\r\n    bool approved\r\n  );\r\n\r\n  /**\r\n   * @dev Returns the number of tokens in ``owner``'s account.\r\n   */\r\n  function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n  /**\r\n   * @dev Returns the owner of the `tokenId` token.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `tokenId` must exist.\r\n   */\r\n  function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n  /**\r\n   * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n   * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `from` cannot be the zero address.\r\n   * - `to` cannot be the zero address.\r\n   * - `tokenId` token must exist and be owned by `from`.\r\n   * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Transfers `tokenId` token from `from` to `to`.\r\n   *\r\n   * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `from` cannot be the zero address.\r\n   * - `to` cannot be the zero address.\r\n   * - `tokenId` token must be owned by `from`.\r\n   * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n   * The approval is cleared when the token is transferred.\r\n   *\r\n   * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The caller must own the token or be an approved operator.\r\n   * - `tokenId` must exist.\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address to, uint256 tokenId) external;\r\n\r\n  /**\r\n   * @dev Returns the account approved for `tokenId` token.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `tokenId` must exist.\r\n   */\r\n  function getApproved(uint256 tokenId)\r\n    external\r\n    view\r\n    returns (address operator);\r\n\r\n  /**\r\n   * @dev Approve or remove `operator` as an operator for the caller.\r\n   * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The `operator` cannot be the caller.\r\n   *\r\n   * Emits an {ApprovalForAll} event.\r\n   */\r\n  function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n  /**\r\n   * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n   *\r\n   * See {setApprovalForAll}\r\n   */\r\n  function isApprovedForAll(address owner, address operator)\r\n    external\r\n    view\r\n    returns (bool);\r\n\r\n  /**\r\n   * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `from` cannot be the zero address.\r\n   * - `to` cannot be the zero address.\r\n   * - `tokenId` token must exist and be owned by `from`.\r\n   * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes calldata data\r\n  ) external;\r\n}\r\n\r\npragma solidity 0.8.9;\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n  /**\r\n   * @dev Returns the token collection name.\r\n   */\r\n  function name() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the token collection symbol.\r\n   */\r\n  function symbol() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n   */\r\n  function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\npragma solidity 0.8.9;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n  /**\r\n   * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n   * by `operator` from `from`, this function is called.\r\n   *\r\n   * It must return its Solidity selector to confirm the token transfer.\r\n   * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n   *\r\n   * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n   */\r\n  function onERC721Received(\r\n    address operator,\r\n    address from,\r\n    uint256 tokenId,\r\n    bytes calldata data\r\n  ) external returns (bytes4);\r\n}\r\n\r\npragma solidity 0.8.9;\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n  /**\r\n   * @dev Returns the total amount of tokens stored by the contract.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n   * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n   */\r\n  function tokenOfOwnerByIndex(address owner, uint256 index)\r\n    external\r\n    view\r\n    returns (uint256 tokenId);\r\n\r\n  /**\r\n   * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n   * Use along with {totalSupply} to enumerate all tokens.\r\n   */\r\n  function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\npragma solidity 0.8.9;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n  function _msgSender() internal view virtual returns (address) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view virtual returns (bytes calldata) {\r\n    return msg.data;\r\n  }\r\n}\r\n\r\npragma solidity 0.8.9;\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n  using Address for address;\r\n  using Strings for uint256;\r\n\r\n  // Token name\r\n  string private _name;\r\n\r\n  // Token symbol\r\n  string private _symbol;\r\n\r\n  // Mapping from token ID to owner address\r\n  mapping(uint256 => address) private _owners;\r\n\r\n  // Mapping owner address to token count\r\n  mapping(address => uint256) private _balances;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping(uint256 => address) private _tokenApprovals;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n  /**\r\n   * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n   */\r\n  constructor(string memory name_, string memory symbol_) {\r\n    _name = name_;\r\n    _symbol = symbol_;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC165-supportsInterface}.\r\n   */\r\n  function supportsInterface(bytes4 interfaceId)\r\n    public\r\n    view\r\n    virtual\r\n    override(ERC165, IERC165)\r\n    returns (bool)\r\n  {\r\n    return\r\n      interfaceId == type(IERC721).interfaceId ||\r\n      interfaceId == type(IERC721Metadata).interfaceId ||\r\n      super.supportsInterface(interfaceId);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-balanceOf}.\r\n   */\r\n  function balanceOf(address owner)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n  {\r\n    require(owner != address(0), 'ERC721: balance query for the zero address');\r\n    return _balances[owner];\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-ownerOf}.\r\n   */\r\n  function ownerOf(uint256 tokenId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (address)\r\n  {\r\n    address owner = _owners[tokenId];\r\n    require(owner != address(0), 'ERC721: owner query for nonexistent token');\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721Metadata-name}.\r\n   */\r\n  function name() public view virtual override returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721Metadata-symbol}.\r\n   */\r\n  function symbol() public view virtual override returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721Metadata-tokenURI}.\r\n   */\r\n  function tokenURI(uint256 tokenId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (string memory)\r\n  {\r\n    require(\r\n      _exists(tokenId),\r\n      'ERC721Metadata: URI query for nonexistent token'\r\n    );\r\n\r\n    string memory baseURI = _baseURI();\r\n    return\r\n      bytes(baseURI).length > 0\r\n        ? string(abi.encodePacked(baseURI, tokenId.toString()))\r\n        : '';\r\n  }\r\n\r\n  /**\r\n   * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n   * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n   * by default, can be overriden in child contracts.\r\n   */\r\n  function _baseURI() internal view virtual returns (string memory) {\r\n    return '';\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-approve}.\r\n   */\r\n  function approve(address to, uint256 tokenId) public virtual override {\r\n    address owner = ERC721.ownerOf(tokenId);\r\n    require(to != owner, 'ERC721: approval to current owner');\r\n\r\n    require(\r\n      _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n      'ERC721: approve caller is not owner nor approved for all'\r\n    );\r\n\r\n    _approve(to, tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-getApproved}.\r\n   */\r\n  function getApproved(uint256 tokenId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (address)\r\n  {\r\n    require(_exists(tokenId), 'ERC721: approved query for nonexistent token');\r\n\r\n    return _tokenApprovals[tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-setApprovalForAll}.\r\n   */\r\n  function setApprovalForAll(address operator, bool approved)\r\n    public\r\n    virtual\r\n    override\r\n  {\r\n    require(operator != _msgSender(), 'ERC721: approve to caller');\r\n\r\n    _operatorApprovals[_msgSender()][operator] = approved;\r\n    emit ApprovalForAll(_msgSender(), operator, approved);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-isApprovedForAll}.\r\n   */\r\n  function isApprovedForAll(address owner, address operator)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (bool)\r\n  {\r\n    return _operatorApprovals[owner][operator];\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-transferFrom}.\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) public virtual override {\r\n    //solhint-disable-next-line max-line-length\r\n    require(\r\n      _isApprovedOrOwner(_msgSender(), tokenId),\r\n      'ERC721: transfer caller is not owner nor approved'\r\n    );\r\n\r\n    _transfer(from, to, tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-safeTransferFrom}.\r\n   */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) public virtual override {\r\n    safeTransferFrom(from, to, tokenId, '');\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-safeTransferFrom}.\r\n   */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes memory _data\r\n  ) public virtual override {\r\n    require(\r\n      _isApprovedOrOwner(_msgSender(), tokenId),\r\n      'ERC721: transfer caller is not owner nor approved'\r\n    );\r\n    _safeTransfer(from, to, tokenId, _data);\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n   * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n   *\r\n   * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n   *\r\n   * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n   * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `from` cannot be the zero address.\r\n   * - `to` cannot be the zero address.\r\n   * - `tokenId` token must exist and be owned by `from`.\r\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function _safeTransfer(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes memory _data\r\n  ) internal virtual {\r\n    _transfer(from, to, tokenId);\r\n    require(\r\n      _checkOnERC721Received(from, to, tokenId, _data),\r\n      'ERC721: transfer to non ERC721Receiver implementer'\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether `tokenId` exists.\r\n   *\r\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n   *\r\n   * Tokens start existing when they are minted (`_mint`),\r\n   * and stop existing when they are burned (`_burn`).\r\n   */\r\n  function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n    return _owners[tokenId] != address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `tokenId` must exist.\r\n   */\r\n  function _isApprovedOrOwner(address spender, uint256 tokenId)\r\n    internal\r\n    view\r\n    virtual\r\n    returns (bool)\r\n  {\r\n    require(_exists(tokenId), 'ERC721: operator query for nonexistent token');\r\n    address owner = ERC721.ownerOf(tokenId);\r\n    return (spender == owner ||\r\n      getApproved(tokenId) == spender ||\r\n      isApprovedForAll(owner, spender));\r\n  }\r\n\r\n  /**\r\n   * @dev Safely mints `tokenId` and transfers it to `to`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `tokenId` must not exist.\r\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function _safeMint(address to, uint256 tokenId) internal virtual {\r\n    _safeMint(to, tokenId, '');\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n   * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n   */\r\n  function _safeMint(\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes memory _data\r\n  ) internal virtual {\r\n    _mint(to, tokenId);\r\n    require(\r\n      _checkOnERC721Received(address(0), to, tokenId, _data),\r\n      'ERC721: transfer to non ERC721Receiver implementer'\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Mints `tokenId` and transfers it to `to`.\r\n   *\r\n   * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `tokenId` must not exist.\r\n   * - `to` cannot be the zero address.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function _mint(address to, uint256 tokenId) internal virtual {\r\n    require(to != address(0), 'ERC721: mint to the zero address');\r\n    require(!_exists(tokenId), 'ERC721: token already minted');\r\n\r\n    _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n    _balances[to] += 1;\r\n    _owners[tokenId] = to;\r\n\r\n    emit Transfer(address(0), to, tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Destroys `tokenId`.\r\n   * The approval is cleared when the token is burned.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `tokenId` must exist.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function _burn(uint256 tokenId) internal virtual {\r\n    address owner = ERC721.ownerOf(tokenId);\r\n\r\n    _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n    // Clear approvals\r\n    _approve(address(0), tokenId);\r\n\r\n    _balances[owner] -= 1;\r\n    delete _owners[tokenId];\r\n\r\n    emit Transfer(owner, address(0), tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers `tokenId` from `from` to `to`.\r\n   *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `to` cannot be the zero address.\r\n   * - `tokenId` token must be owned by `from`.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function _transfer(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) internal virtual {\r\n    require(\r\n      ERC721.ownerOf(tokenId) == from,\r\n      'ERC721: transfer of token that is not own'\r\n    );\r\n    require(to != address(0), 'ERC721: transfer to the zero address');\r\n\r\n    _beforeTokenTransfer(from, to, tokenId);\r\n\r\n    // Clear approvals from the previous owner\r\n    _approve(address(0), tokenId);\r\n\r\n    _balances[from] -= 1;\r\n    _balances[to] += 1;\r\n    _owners[tokenId] = to;\r\n\r\n    emit Transfer(from, to, tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Approve `to` to operate on `tokenId`\r\n   *\r\n   * Emits a {Approval} event.\r\n   */\r\n  function _approve(address to, uint256 tokenId) internal virtual {\r\n    _tokenApprovals[tokenId] = to;\r\n    emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n   * The call is not executed if the target address is not a contract.\r\n   *\r\n   * @param from address representing the previous owner of the given token ID\r\n   * @param to target address that will receive the tokens\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return bool whether the call correctly returned the expected magic value\r\n   */\r\n  function _checkOnERC721Received(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes memory _data\r\n  ) private returns (bool) {\r\n    if (to.isContract()) {\r\n      try\r\n        IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)\r\n      returns (bytes4 retval) {\r\n        return retval == IERC721Receiver.onERC721Received.selector;\r\n      } catch (bytes memory reason) {\r\n        if (reason.length == 0) {\r\n          revert('ERC721: transfer to non ERC721Receiver implementer');\r\n        } else {\r\n          assembly {\r\n            revert(add(32, reason), mload(reason))\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Hook that is called before any token transfer. This includes minting\r\n   * and burning.\r\n   *\r\n   * Calling conditions:\r\n   *\r\n   * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n   * transferred to `to`.\r\n   * - When `from` is zero, `tokenId` will be minted for `to`.\r\n   * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n   * - `from` and `to` are never both zero.\r\n   *\r\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n   */\r\n  function _beforeTokenTransfer(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) internal virtual {}\r\n}\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IUniswapV2Pair {\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  function name() external pure returns (string memory);\r\n\r\n  function symbol() external pure returns (string memory);\r\n\r\n  function decimals() external pure returns (uint8);\r\n\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address owner) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) external returns (bool);\r\n\r\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n  function nonces(address owner) external view returns (uint256);\r\n\r\n  function permit(\r\n    address owner,\r\n    address spender,\r\n    uint256 value,\r\n    uint256 deadline,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external;\r\n\r\n  event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n  event Burn(\r\n    address indexed sender,\r\n    uint256 amount0,\r\n    uint256 amount1,\r\n    address indexed to\r\n  );\r\n  event Swap(\r\n    address indexed sender,\r\n    uint256 amount0In,\r\n    uint256 amount1In,\r\n    uint256 amount0Out,\r\n    uint256 amount1Out,\r\n    address indexed to\r\n  );\r\n  event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n  function factory() external view returns (address);\r\n\r\n  function token0() external view returns (address);\r\n\r\n  function token1() external view returns (address);\r\n\r\n  function getReserves()\r\n    external\r\n    view\r\n    returns (\r\n      uint112 reserve0,\r\n      uint112 reserve1,\r\n      uint32 blockTimestampLast\r\n    );\r\n\r\n  function price0CumulativeLast() external view returns (uint256);\r\n\r\n  function price1CumulativeLast() external view returns (uint256);\r\n\r\n  function kLast() external view returns (uint256);\r\n\r\n  function mint(address to) external returns (uint256 liquidity);\r\n\r\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\r\n\r\n  function swap(\r\n    uint256 amount0Out,\r\n    uint256 amount1Out,\r\n    address to,\r\n    bytes calldata data\r\n  ) external;\r\n\r\n  function skim(address to) external;\r\n\r\n  function sync() external;\r\n\r\n  function initialize(address, address) external;\r\n}\r\n\r\npragma solidity 0.8.9;\r\n\r\n/**\r\n * @dev These functions deal with verification of Merkle Trees proofs.\r\n *\r\n * The proofs can be generated using the JavaScript library\r\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\r\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\r\n *\r\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\r\n */\r\nlibrary MerkleProof {\r\n  /**\r\n   * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\r\n   * defined by `root`. For this, a `proof` must be provided, containing\r\n   * sibling hashes on the branch from the leaf to the root of the tree. Each\r\n   * pair of leaves and each pair of pre-images are assumed to be sorted.\r\n   */\r\n  function verify(\r\n    bytes32[] memory proof,\r\n    bytes32 root,\r\n    bytes32 leaf\r\n  ) internal pure returns (bool) {\r\n    bytes32 computedHash = leaf;\r\n\r\n    for (uint256 i = 0; i < proof.length; i++) {\r\n      bytes32 proofElement = proof[i];\r\n\r\n      if (computedHash <= proofElement) {\r\n        // Hash(current computed hash + current element of the proof)\r\n        computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\r\n      } else {\r\n        // Hash(current element of the proof + current computed hash)\r\n        computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\r\n      }\r\n    }\r\n\r\n    // Check if the computed hash (root) is equal to the provided root\r\n    return computedHash == root;\r\n  }\r\n}\r\n\r\npragma solidity 0.8.9;\r\n\r\n/**\r\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\r\n * enumerability of all the token ids in the contract as well as all token ids owned by each\r\n * account.\r\n */\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] private _allTokens;\r\n\r\n  // Mapping from token id to position in the allTokens array\r\n  mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n  /**\r\n   * @dev See {IERC165-supportsInterface}.\r\n   */\r\n  function supportsInterface(bytes4 interfaceId)\r\n    public\r\n    view\r\n    virtual\r\n    override(IERC165, ERC721)\r\n    returns (bool)\r\n  {\r\n    return\r\n      interfaceId == type(IERC721Enumerable).interfaceId ||\r\n      super.supportsInterface(interfaceId);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n   */\r\n  function tokenOfOwnerByIndex(address owner, uint256 index)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n  {\r\n    require(\r\n      index < ERC721.balanceOf(owner),\r\n      'ERC721Enumerable: owner index out of bounds'\r\n    );\r\n    return _ownedTokens[owner][index];\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721Enumerable-totalSupply}.\r\n   */\r\n  function totalSupply() public view virtual override returns (uint256) {\r\n    return _allTokens.length;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721Enumerable-tokenByIndex}.\r\n   */\r\n  function tokenByIndex(uint256 index)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n  {\r\n    require(\r\n      index < ERC721Enumerable.totalSupply(),\r\n      'ERC721Enumerable: global index out of bounds'\r\n    );\r\n    return _allTokens[index];\r\n  }\r\n\r\n  /**\r\n   * @dev Hook that is called before any token transfer. This includes minting\r\n   * and burning.\r\n   *\r\n   * Calling conditions:\r\n   *\r\n   * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n   * transferred to `to`.\r\n   * - When `from` is zero, `tokenId` will be minted for `to`.\r\n   * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n   * - `from` cannot be the zero address.\r\n   * - `to` cannot be the zero address.\r\n   *\r\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n   */\r\n  function _beforeTokenTransfer(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) internal virtual override {\r\n    super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n    if (from == address(0)) {\r\n      _addTokenToAllTokensEnumeration(tokenId);\r\n    } else if (from != to) {\r\n      _removeTokenFromOwnerEnumeration(from, tokenId);\r\n    }\r\n    if (to == address(0)) {\r\n      _removeTokenFromAllTokensEnumeration(tokenId);\r\n    } else if (to != from) {\r\n      _addTokenToOwnerEnumeration(to, tokenId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n   * @param to address representing the new owner of the given token ID\r\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n    uint256 length = ERC721.balanceOf(to);\r\n    _ownedTokens[to][length] = tokenId;\r\n    _ownedTokensIndex[tokenId] = length;\r\n  }\r\n\r\n  /**\r\n   * @dev Private function to add a token to this extension's token tracking data structures.\r\n   * @param tokenId uint256 ID of the token to be added to the tokens list\r\n   */\r\n  function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n    _allTokensIndex[tokenId] = _allTokens.length;\r\n    _allTokens.push(tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n   * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n   * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n   * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n   * @param from address representing the previous owner of the given token ID\r\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId)\r\n    private\r\n  {\r\n    // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n    // then delete the last slot (swap and pop).\r\n\r\n    uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n    uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n    // When the token to delete is the last token, the swap operation is unnecessary\r\n    if (tokenIndex != lastTokenIndex) {\r\n      uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n      _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n      _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n    }\r\n\r\n    // This also deletes the contents at the last position of the array\r\n    delete _ownedTokensIndex[tokenId];\r\n    delete _ownedTokens[from][lastTokenIndex];\r\n  }\r\n\r\n  /**\r\n   * @dev Private function to remove a token from this extension's token tracking data structures.\r\n   * This has O(1) time complexity, but alters the order of the _allTokens array.\r\n   * @param tokenId uint256 ID of the token to be removed from the tokens list\r\n   */\r\n  function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n    // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n    // then delete the last slot (swap and pop).\r\n\r\n    uint256 lastTokenIndex = _allTokens.length - 1;\r\n    uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n    // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n    // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n    // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n    uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n    _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n    _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n    // This also deletes the contents at the last position of the array\r\n    delete _allTokensIndex[tokenId];\r\n    _allTokens.pop();\r\n  }\r\n}\r\n\r\npragma solidity 0.8.9;\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary Counters {\r\n  struct Counter {\r\n    // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n    // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n    // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n    uint256 _value; // default: 0\r\n  }\r\n\r\n  function current(Counter storage counter) internal view returns (uint256) {\r\n    return counter._value;\r\n  }\r\n\r\n  function increment(Counter storage counter) internal {\r\n    unchecked {\r\n      counter._value += 1;\r\n    }\r\n  }\r\n\r\n  function decrement(Counter storage counter) internal {\r\n    uint256 value = counter._value;\r\n    require(value > 0, 'Counter: decrement overflow');\r\n    unchecked {\r\n      counter._value = value - 1;\r\n    }\r\n  }\r\n\r\n  function reset(Counter storage counter) internal {\r\n    counter._value = 0;\r\n  }\r\n}\r\n\r\npragma solidity 0.8.9;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n      uint256 c = a + b;\r\n      if (c < a) return (false, 0);\r\n      return (true, c);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n      if (b > a) return (false, 0);\r\n      return (true, a - b);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n      // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n      // benefit is lost if 'b' is also tested.\r\n      // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n      if (a == 0) return (true, 0);\r\n      uint256 c = a * b;\r\n      if (c / a != b) return (false, 0);\r\n      return (true, c);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n      if (b == 0) return (false, 0);\r\n      return (true, a / b);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n      if (b == 0) return (false, 0);\r\n      return (true, a % b);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `+` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Addition cannot overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a + b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `*` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Multiplication cannot overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a * b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers, reverting on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * reverting when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a % b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n   * message unnecessarily. For custom revert reasons use {trySub}.\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    unchecked {\r\n      require(b <= a, errorMessage);\r\n      return a - b;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    unchecked {\r\n      require(b > 0, errorMessage);\r\n      return a / b;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * reverting with custom message when dividing by zero.\r\n   *\r\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n   * message unnecessarily. For custom revert reasons use {tryMod}.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    unchecked {\r\n      require(b > 0, errorMessage);\r\n      return a % b;\r\n    }\r\n  }\r\n}\r\n\r\npragma solidity 0.8.9;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor() {\r\n    _setOwner(_msgSender());\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view virtual returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(owner() == _msgSender(), 'Ownable: caller is not the owner');\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public virtual onlyOwner {\r\n    _setOwner(address(0));\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    require(newOwner != address(0), 'Ownable: new owner is the zero address');\r\n    _setOwner(newOwner);\r\n  }\r\n\r\n  function _setOwner(address newOwner) private {\r\n    address oldOwner = _owner;\r\n    _owner = newOwner;\r\n    emit OwnershipTransferred(oldOwner, newOwner);\r\n  }\r\n}\r\n\r\npragma solidity 0.8.9;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\npragma solidity 0.8.9;\r\n\r\ncontract EverLand is ERC721Enumerable, Ownable {\r\n  using SafeMath for uint256;\r\n  using Counters for Counters.Counter;\r\n\r\n  Counters.Counter[] private m_LandCounter;\r\n\r\n  uint256 private constant MAX_SUPPLY = 124884;\r\n  uint256 private constant MAX_PURCHASE = 200;\r\n\r\n  address private PGAIAA = 0x723B17718289A91AF252D616DE2C77944962d122;\r\n\r\n  uint256 private m_EpicPrice = 350;\r\n  uint256 private m_RegularPrice = 175;\r\n\r\n  bytes32 private m_MerkleRoot;\r\n\r\n  uint256 private m_Reserve = 50000;\r\n\r\n  bool private m_IsMintable;\r\n  bool private m_IsPublic;\r\n  bool private m_IsActive;\r\n  uint256 private m_SaleDate = 1648756800;\r\n\r\n  string private m_baseURI;\r\n\r\n  uint256 private m_MarketingCommission = 25;\r\n\r\n  struct Auction {\r\n    uint256 price;\r\n    uint256 unit;\r\n    uint32 id;\r\n    address creator;\r\n  }\r\n\r\n  struct WhiteListAmounts {\r\n    uint256 epic;\r\n    uint256 regular;\r\n  }\r\n\r\n  struct validateLand {\r\n    uint256 landType;\r\n    uint256 landSize;\r\n  }\r\n\r\n  mapping(uint256 => Auction) private m_Auctions;\r\n  mapping(address => WhiteListAmounts) public m_WhiteListAmounts;\r\n\r\n  Auction[] private m_AuctionsData;\r\n\r\n  constructor() ERC721('Eever', 'EEVER') {\r\n    for (uint256 i = 0; i < 10; i++) {\r\n      Counters.Counter memory temp;\r\n      m_LandCounter.push(temp);\r\n    }\r\n  }\r\n\r\n  function _beforeTokenTransfer(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) internal override {\r\n    super._beforeTokenTransfer(from, to, tokenId);\r\n    if (from != address(0) && m_Auctions[tokenId].creator == from) {\r\n      delete m_Auctions[tokenId];\r\n      uint256 flag = 0;\r\n      uint256 length = m_AuctionsData.length;\r\n      while (length > 0) {\r\n        if (m_AuctionsData[length - 1].id == tokenId) {\r\n          m_AuctionsData[length - 1] = m_AuctionsData[\r\n            m_AuctionsData.length - 1\r\n          ];\r\n          flag = 1;\r\n          break;\r\n        }\r\n        length = length - 1;\r\n      }\r\n      if (flag == 1) m_AuctionsData.pop();\r\n    }\r\n  }\r\n\r\n  function renounceOwnership() public override onlyOwner {}\r\n\r\n  function withdraw() public onlyOwner {\r\n    uint256 balance = address(this).balance;\r\n    payable(msg.sender).transfer(balance);\r\n  }\r\n\r\n  function withdrawGaia() public onlyOwner {\r\n    uint256 gaiaBalance = IERC20(PGAIAA).balanceOf(address(this));\r\n    require(\r\n      IERC20(PGAIAA).transfer(msg.sender, gaiaBalance),\r\n      'Failed Withdraw'\r\n    );\r\n  }\r\n\r\n  function _safeMintMultiple(\r\n    address _address,\r\n    uint256 _countOfLands,\r\n    uint256 _landSize,\r\n    uint256 _landType\r\n  ) private {\r\n    while (_countOfLands > 0) {\r\n      m_LandCounter[_landSize * 2 + _landType].increment();\r\n      uint256 tokenId = generateTokenId(\r\n        m_LandCounter[_landSize * 2 + _landType].current(),\r\n        _landSize,\r\n        _landType\r\n      );\r\n\r\n      require(_validateIdOfLand(tokenId), 'No Land Id');\r\n      if (_exists(tokenId)) continue;\r\n\r\n      _safeMint(_address, tokenId);\r\n      _countOfLands = _countOfLands.sub(1);\r\n    }\r\n  }\r\n\r\n  function randomReserve(\r\n    address _address,\r\n    uint256 _countOfLands,\r\n    uint256 _landSize,\r\n    uint256 _landType\r\n  ) external onlyOwner {\r\n    require(_address != address(0));\r\n    require(_landType == 1 || _landType == 0);\r\n    require(_landSize >= 0 && _landSize < 5);\r\n    _safeMintMultiple(_address, _countOfLands, _landSize, _landType);\r\n  }\r\n\r\n  function mint(\r\n    uint256 _countOfLands,\r\n    uint256 _landSize,\r\n    uint256 _landType,\r\n    uint256 epicPrice,\r\n    uint256 regularPrice\r\n  ) external {\r\n    require(!isContract(msg.sender), 'This user is a contract');\r\n    require(m_IsPublic, 'Sale must be active to mint Lands');\r\n    require(m_SaleDate < block.timestamp, 'You can not mint yet');\r\n    require(\r\n      _countOfLands > 0 && _countOfLands <= MAX_PURCHASE,\r\n      'Can only mint 200 tokens at a time'\r\n    );\r\n    require(epicPrice == m_EpicPrice && regularPrice == m_RegularPrice);\r\n    require(_landType == 1 || _landType == 0);\r\n    require(_landSize >= 0 && _landSize < 5);\r\n    uint256 gaiaUSDC = getTokenPrice();\r\n    uint8[5] memory _prices = [1, 3, 6, 12, 24];\r\n    uint256 price = _landType == 1\r\n      ? ((m_EpicPrice *\r\n        _countOfLands *\r\n        _prices[_landSize] *\r\n        _prices[_landSize]) * (10**36)) / gaiaUSDC\r\n      : ((m_RegularPrice *\r\n        _countOfLands *\r\n        _prices[_landSize] *\r\n        _prices[_landSize]) * (10**36)) / gaiaUSDC;\r\n    require(IERC20(PGAIAA).transferFrom(msg.sender, address(this), price));\r\n    _safeMintMultiple(msg.sender, _countOfLands, _landSize, _landType);\r\n  }\r\n\r\n  function selectedMint(\r\n    uint256[] memory _ids,\r\n    uint256 _index,\r\n    uint256 _amount,\r\n    bytes32[] memory _merkleProof\r\n  ) external {\r\n    require(m_IsMintable, 'Sale must be active to mint Lands');\r\n    require(\r\n      _ids.length > 0 && _ids.length <= MAX_PURCHASE,\r\n      'Can only mint 200 tokens at a time'\r\n    );\r\n    for (uint256 i = 0; i < _ids.length; i++) {\r\n      for (uint256 j = i + 1; j < _ids.length; j++) {\r\n        require(_ids[i] != _ids[j], 'ids must be not same each other');\r\n      }\r\n    }\r\n    for (uint256 i = 0; i < _ids.length; i++) {\r\n      require(_validateIdOfLand(_ids[i]), 'No Land Id');\r\n      require(_exists(_ids[i]) == false, 'Lands were already minted');\r\n    }\r\n    uint256 epicLands = 0;\r\n    uint256 regularLands = 0;\r\n    for (uint256 i = 0; i < _ids.length; i++) {\r\n      validateLand memory data = _validateTypeOfLand(_ids[i]);\r\n      if (data.landType == 1) {\r\n        epicLands = epicLands + data.landSize * data.landSize;\r\n      } else {\r\n        regularLands = regularLands + data.landSize * data.landSize;\r\n      }\r\n    }\r\n    require(\r\n      m_WhiteListAmounts[msg.sender].regular + regularLands <= _amount / 2 &&\r\n        m_WhiteListAmounts[msg.sender].epic + epicLands <=\r\n        _amount - _amount / 2,\r\n      'WhiteList OverAmount'\r\n    );\r\n\r\n    require(\r\n      _verifyMerkleRoot(_index, _amount, msg.sender, _merkleProof),\r\n      'Invalid proof.'\r\n    );\r\n\r\n    m_WhiteListAmounts[msg.sender].epic =\r\n      m_WhiteListAmounts[msg.sender].epic +\r\n      epicLands;\r\n    m_WhiteListAmounts[msg.sender].regular =\r\n      m_WhiteListAmounts[msg.sender].regular +\r\n      regularLands;\r\n\r\n    for (uint256 i = 0; i < _ids.length; i++) {\r\n      _safeMint(msg.sender, _ids[i]);\r\n    }\r\n  }\r\n\r\n  function _verifyMerkleRoot(\r\n    uint256 _index,\r\n    uint256 _amount,\r\n    address _address,\r\n    bytes32[] memory _merkleProof\r\n  ) private view returns (bool) {\r\n    bytes32 node = keccak256(abi.encodePacked(_index, _address, _amount));\r\n    return MerkleProof.verify(_merkleProof, m_MerkleRoot, node);\r\n  }\r\n\r\n  function generateTokenId(\r\n    uint256 _id,\r\n    uint256 _landSize,\r\n    uint256 _landType\r\n  ) private pure returns (uint256) {\r\n    return (_landSize * 2 + _landType) * 100000 + _id;\r\n  }\r\n\r\n  function isWhiteListVerify(\r\n    uint256 _index,\r\n    address _account,\r\n    uint256 _amount,\r\n    bytes32[] calldata _merkleProof\r\n  ) public view returns (bool) {\r\n    bytes32 node = keccak256(abi.encodePacked(_index, _account, _amount));\r\n    return MerkleProof.verify(_merkleProof, m_MerkleRoot, node);\r\n  }\r\n\r\n  function getTokenPrice() public view returns (uint256) {\r\n    address pairAddress1 = address(0x885eb7D605143f454B4345aea37ee8bc457EC730);\r\n    IUniswapV2Pair pair1 = IUniswapV2Pair(pairAddress1);\r\n    (uint256 Res0, uint256 Res1, ) = pair1.getReserves();\r\n    uint256 price1 = (Res1 * (10**18)) / Res0;\r\n\r\n    address pairAddress2 = address(0xCD578F016888B57F1b1e3f887f392F0159E26747);\r\n    IUniswapV2Pair pair2 = IUniswapV2Pair(pairAddress2);\r\n    (uint256 Re0, uint256 Re1, ) = pair2.getReserves();\r\n    uint256 price2 = (Re0 * (10**30)) / Re1;\r\n    return (price1 * price2) / (10**18);\r\n  }\r\n\r\n  function isContract(address _addr) public view returns (bool) {\r\n    uint32 size;\r\n    assembly {\r\n      size := extcodesize(_addr)\r\n    }\r\n    return (size > 0);\r\n  }\r\n\r\n  function _validateTypeOfLand(uint256 _id)\r\n    private\r\n    pure\r\n    returns (validateLand memory)\r\n  {\r\n    validateLand memory data;\r\n    if (_id > 900000 && _id <= 900020) {\r\n      data.landType = 1;\r\n      data.landSize = 24;\r\n    } else if (_id > 800000 && _id <= 800032) {\r\n      data.landType = 0;\r\n      data.landSize = 24;\r\n    } else if (_id > 700000 && _id <= 700070) {\r\n      data.landType = 1;\r\n      data.landSize = 12;\r\n    } else if (_id > 600000 && _id <= 600130) {\r\n      data.landType = 0;\r\n      data.landSize = 12;\r\n    } else if (_id > 500000 && _id <= 500270) {\r\n      data.landType = 1;\r\n      data.landSize = 6;\r\n    } else if (_id > 400000 && _id <= 400540) {\r\n      data.landType = 0;\r\n      data.landSize = 6;\r\n    } else if (_id > 300000 && _id <= 301080) {\r\n      data.landType = 1;\r\n      data.landSize = 3;\r\n    } else if (_id > 200000 && _id <= 202170) {\r\n      data.landType = 0;\r\n      data.landSize = 3;\r\n    } else if (_id > 100000 && _id <= 138960) {\r\n      data.landType = 1;\r\n      data.landSize = 1;\r\n    } else if (_id > 0 && _id <= 81612) {\r\n      data.landType = 0;\r\n      data.landSize = 1;\r\n    }\r\n    return data;\r\n  }\r\n\r\n  function _validateIdOfLand(uint256 _id) private pure returns (bool) {\r\n    return\r\n      (_id > 900000 && _id <= 900020) ||\r\n      (_id > 800000 && _id <= 800032) ||\r\n      (_id > 700000 && _id <= 700070) ||\r\n      (_id > 600000 && _id <= 600130) ||\r\n      (_id > 500000 && _id <= 500270) ||\r\n      (_id > 400000 && _id <= 400540) ||\r\n      (_id > 300000 && _id <= 301080) ||\r\n      (_id > 200000 && _id <= 202170) ||\r\n      (_id > 100000 && _id <= 138960) ||\r\n      (_id > 0 && _id <= 81612);\r\n  }\r\n\r\n  function openTrade(\r\n    uint32 _id,\r\n    uint256 _price,\r\n    uint256 _unit\r\n  ) external {\r\n    require(m_IsActive, 'Sale must be active to mint GaiaLand');\r\n    require(ownerOf(_id) == msg.sender, 'sender is not owner');\r\n    require(m_Auctions[_id].id != _id, 'Already opened');\r\n    require(_price.mul(m_MarketingCommission).div(1000) >= 1, 'Min Price');\r\n    require(_unit == 1 || _unit == 2);\r\n    m_Auctions[_id] = Auction({\r\n      price: _price,\r\n      unit: _unit,\r\n      creator: msg.sender,\r\n      id: _id\r\n    });\r\n    Auction memory temp = Auction({\r\n      price: _price,\r\n      unit: _unit,\r\n      creator: msg.sender,\r\n      id: _id\r\n    });\r\n    m_AuctionsData.push(temp);\r\n  }\r\n\r\n  function closeTrade(uint256 _id) external {\r\n    require(m_IsActive, 'Sale must be active to mint GaiaLand');\r\n    require(ownerOf(_id) == msg.sender, 'sender is not owner');\r\n    require(m_Auctions[_id].id == _id, 'Already closed');\r\n    delete m_Auctions[_id];\r\n    uint256 length = m_AuctionsData.length;\r\n    while (length > 0) {\r\n      if (m_AuctionsData[length - 1].id == _id) {\r\n        m_AuctionsData[length - 1] = m_AuctionsData[m_AuctionsData.length - 1];\r\n        break;\r\n      }\r\n      length = length - 1;\r\n    }\r\n    m_AuctionsData.pop();\r\n  }\r\n\r\n  function buy(uint256 _id) external payable {\r\n    require(m_IsActive, 'Sale must be active to mint GaiaLand');\r\n    require(ownerOf(_id) != msg.sender, 'Can not buy what you own');\r\n    require(m_Auctions[_id].id == _id, 'Item not listed currently');\r\n    require(msg.value.mul(m_MarketingCommission).div(1000) >= 1, 'Min Price');\r\n    require(m_Auctions[_id].price == msg.value, 'Error, price is not match');\r\n    require(m_Auctions[_id].unit == 2, 'Error, unit is not match');\r\n    address _previousOwner = m_Auctions[_id].creator;\r\n    address _newOwner = msg.sender;\r\n\r\n    uint256 _commissionValue = msg.value.mul(m_MarketingCommission).div(1000);\r\n    uint256 _sellerValue = msg.value.sub(_commissionValue);\r\n    payable(_previousOwner).transfer(_sellerValue);\r\n    _transfer(_previousOwner, _newOwner, _id);\r\n    delete m_Auctions[_id];\r\n  }\r\n\r\n  function buyToken(uint256 _id, uint256 _price) external {\r\n    require(m_IsActive, 'Sale must be active to mint GaiaLand');\r\n    require(ownerOf(_id) != msg.sender, 'Can not buy what you own');\r\n    require(m_Auctions[_id].id == _id, 'Item not listed currently');\r\n    require(m_Auctions[_id].price == _price, 'Error, price is not match');\r\n    require(_price.mul(m_MarketingCommission).div(1000) >= 1, 'Min Price');\r\n    require(m_Auctions[_id].unit == 1, 'Error, unit is not match');\r\n    address _previousOwner = m_Auctions[_id].creator;\r\n    address _newOwner = msg.sender;\r\n\r\n    uint256 _commissionValue = _price.mul(m_MarketingCommission).div(1000);\r\n    uint256 _sellerValue = _price.sub(_commissionValue);\r\n\r\n    require(\r\n      IERC20(PGAIAA).transferFrom(msg.sender, address(this), _commissionValue)\r\n    );\r\n    require(\r\n      IERC20(PGAIAA).transferFrom(msg.sender, _previousOwner, _sellerValue)\r\n    );\r\n\r\n    _transfer(_previousOwner, _newOwner, _id);\r\n    delete m_Auctions[_id];\r\n  }\r\n\r\n  function customReserve(address _address, uint256[] memory _ids)\r\n    external\r\n    onlyOwner\r\n  {\r\n    require(_address != address(0));\r\n    for (uint256 i = 0; i < _ids.length; i++) {\r\n      require(!_exists(_ids[i]), 'Token id exists.');\r\n      require(_validateIdOfLand(_ids[i]), 'No Land Id');\r\n\r\n      _safeMint(_address, _ids[i]);\r\n    }\r\n  }\r\n\r\n  function getMaxSupply() external pure returns (uint256) {\r\n    return MAX_SUPPLY;\r\n  }\r\n\r\n  function getMaxPurchase() external pure returns (uint256) {\r\n    return MAX_PURCHASE;\r\n  }\r\n\r\n  function getTokenTypeBalance(uint256 _landSize, uint256 _landType)\r\n    external\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return m_LandCounter[_landSize * 2 + _landType].current();\r\n  }\r\n\r\n  function setEpicPrice(uint256 _epicPrice) external onlyOwner {\r\n    m_EpicPrice = _epicPrice;\r\n  }\r\n\r\n  function getEpicPrice() external view returns (uint256) {\r\n    return m_EpicPrice;\r\n  }\r\n\r\n  function setRegularPrice(uint256 _regularPrice) external onlyOwner {\r\n    m_RegularPrice = _regularPrice;\r\n  }\r\n\r\n  function getRegularPrice() external view returns (uint256) {\r\n    return m_RegularPrice;\r\n  }\r\n\r\n  function setMintEnabled(bool _enabled) external onlyOwner {\r\n    m_IsMintable = _enabled;\r\n    if (_enabled) m_IsActive = _enabled;\r\n  }\r\n\r\n  function getMintEnabled() external view returns (bool) {\r\n    return m_IsMintable;\r\n  }\r\n\r\n  function setPublicMintEnabled(bool _enabled) external onlyOwner {\r\n    m_IsPublic = _enabled;\r\n    if (_enabled) m_IsActive = _enabled;\r\n  }\r\n\r\n  function getPublicMintEnabled() external view returns (bool) {\r\n    return m_IsPublic;\r\n  }\r\n\r\n  function setActiveEnabled(bool _enabled) external onlyOwner {\r\n    m_IsActive = _enabled;\r\n  }\r\n\r\n  function getActiveEnabled() external view returns (bool) {\r\n    return m_IsActive;\r\n  }\r\n\r\n  function setSaleDate(uint256 _date) external onlyOwner {\r\n    require(_date > block.timestamp);\r\n    m_SaleDate = _date;\r\n  }\r\n\r\n  function getSaleDate() external view returns (uint256) {\r\n    return m_SaleDate;\r\n  }\r\n\r\n  function setMerkleRoot(bytes32 _merkleRoot) external onlyOwner {\r\n    m_MerkleRoot = _merkleRoot;\r\n  }\r\n\r\n  function getMerkleRoot() external view returns (bytes32) {\r\n    return m_MerkleRoot;\r\n  }\r\n\r\n  function setReserve(uint256 _reserve) external onlyOwner {\r\n    m_Reserve = _reserve;\r\n  }\r\n\r\n  function getReserve() external view returns (uint256) {\r\n    return m_Reserve;\r\n  }\r\n\r\n  function setPGAIAContract(address _address) external onlyOwner {\r\n    require(_address != address(0));\r\n    PGAIAA = _address;\r\n  }\r\n\r\n  function getPGAIAContract() external view returns (address) {\r\n    return PGAIAA;\r\n  }\r\n\r\n  function getMarketingCommission() external view returns (uint256) {\r\n    return m_MarketingCommission;\r\n  }\r\n\r\n  function setBaseURI(string memory _newBaseURI) external onlyOwner {\r\n    m_baseURI = _newBaseURI;\r\n  }\r\n\r\n  function getAuctionsData() external view returns (Auction[] memory) {\r\n    return m_AuctionsData;\r\n  }\r\n\r\n  function _baseURI() internal view override returns (string memory) {\r\n    return m_baseURI;\r\n  }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"closeTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"customReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionsData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"internalType\":\"struct EverLand.Auction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpicPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketingCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxPurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPGAIAContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPublicMintEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegularPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSaleDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_landSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_landType\",\"type\":\"uint256\"}],\"name\":\"getTokenTypeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"isWhiteListVerify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"m_WhiteListAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"epic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"regular\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_countOfLands\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_landSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_landType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epicPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"regularPrice\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_id\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unit\",\"type\":\"uint256\"}],\"name\":\"openTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_countOfLands\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_landSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_landType\",\"type\":\"uint256\"}],\"name\":\"randomReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"selectedMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setActiveEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epicPrice\",\"type\":\"uint256\"}],\"name\":\"setEpicPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setMintEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setPGAIAContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setPublicMintEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_regularPrice\",\"type\":\"uint256\"}],\"name\":\"setRegularPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reserve\",\"type\":\"uint256\"}],\"name\":\"setReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"setSaleDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawGaia\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EverLand", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e7718cdecbaf7903541931d223d6f28d2b47bc652d846836be59352bd4147d22"}