{"SourceCode": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity ^0.8.0;\r\n\r\ncontract ECHeartBeat {\r\n    struct Call {\r\n        uint256 timestamp;\r\n        string metadata;\r\n    }\r\n\r\n    address private owner;\r\n\r\n    event OwnerChanged(address indexed previousOwner, address indexed newOwner);\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    mapping(address => Call[]) private callHistory;\r\n    mapping(address => mapping(uint256 => bool)) private callExists;\r\n\r\n    mapping(address => mapping(uint256 => uint256[])) private activeDays;\r\n    mapping(address => uint256) private firstCallDay;\r\n    address[] private nodeAddresses;\r\n\r\n    event CallLogged(address indexed caller, uint256 timestamp, string metadata);\r\n\r\n    function logCall(string calldata metadata) public {\r\n        Call memory newCall = Call(block.timestamp, metadata);\r\n        callHistory[msg.sender].push(newCall);\r\n\r\n        if (!callExists[msg.sender][newCall.timestamp / 1 days]) {\r\n            callExists[msg.sender][newCall.timestamp / 1 days] = true;\r\n            activeDays[msg.sender][newCall.timestamp / 1 days].push(callHistory[msg.sender].length - 1);\r\n\r\n            if (firstCallDay[msg.sender] == 0) {\r\n                firstCallDay[msg.sender] = newCall.timestamp / 1 days;\r\n                nodeAddresses.push(msg.sender);\r\n            }\r\n        }\r\n        else {\r\n            activeDays[msg.sender][newCall.timestamp / 1 days].push(callHistory[msg.sender].length - 1);\r\n        }\r\n\r\n        emit CallLogged(msg.sender, newCall.timestamp, metadata);\r\n    }\r\n\r\n    function getCurrentDay() public view returns (uint256){\r\n        return block.timestamp / 1 days;\r\n    }\r\n\r\n    function getCallCount(address caller, uint256 day) public view returns (uint256) {\r\n        return activeDays[caller][day].length;\r\n    }\r\n\r\n    function getTotalCalls(address caller) public view returns (uint256) {\r\n        return callHistory[caller].length;\r\n    }\r\n\r\n    function getActiveDays(address caller) public view returns (uint256) {\r\n        uint256 count = 0;\r\n        for (uint256 day = firstCallDay[caller]; day <= block.timestamp / 1 days; day++) {\r\n            if (callExists[caller][day]) {\r\n                count++;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    function getFirstCallDay(address caller) public view returns (uint256) {\r\n        return firstCallDay[caller];\r\n    }\r\n\r\n    function getCallMetadata(address caller, uint256 index) public view returns (string memory) {\r\n        require(index < callHistory[caller].length, \"Invalid index\");\r\n        return callHistory[caller][index].metadata;\r\n    }\r\n\r\n    function getCallsforday(address caller, uint256 day) public view returns (uint256[] memory){\r\n        return activeDays[caller][day];\r\n    }\r\n\r\n    function getNodesCount() public view returns (uint256){\r\n        return nodeAddresses.length;\r\n    }\r\n\r\n    function getNodeAddress(uint256 index) public view returns (address){\r\n        return nodeAddresses[index];\r\n    }\r\n\r\n    function getCallHistoryCount(address nodeAddress) public view returns (uint256){\r\n        return callHistory[nodeAddress].length;\r\n    }\r\n\r\n    function getCallHistoryLog(address nodeAddress, uint256 index) public view returns (Call memory){\r\n        return callHistory[nodeAddress][index];\r\n    }\r\n\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Invalid address\");\r\n        emit OwnerChanged(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"CallLogged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"getActiveDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"getCallCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"getCallHistoryCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getCallHistoryLog\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct ECHeartBeat.Call\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getCallMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"getCallsforday\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"getFirstCallDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getNodeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNodesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"getTotalCalls\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"logCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ECHeartBeat", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://50b5310b48dac9a9e2b8ed0b4e79885dab85f18c8360e40e5d2c9bdea6d32161"}