{"SourceCode": "// Sources flattened with hardhat v2.4.0 https://hardhat.org\r\n\r\n// File contracts/helpers/interface/IWhitelist.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n/**\r\n * @title IWhitelist\r\n * @notice Interface for Whitelist contract\r\n */\r\ncontract IWhitelist {\r\n    function isWhitelisted(address _account) external view returns (bool);\r\n\r\n    function toggleWhitelist(address _account, bool _toggled) external;\r\n}\r\n\r\n\r\n// File contracts/role/interface/IBaseOperators.sol\r\n\r\n/**\r\n * @title IBaseOperators\r\n * @notice Interface for BaseOperators contract\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\ninterface IBaseOperators {\r\n    function isOperator(address _account) external view returns (bool);\r\n\r\n    function isAdmin(address _account) external view returns (bool);\r\n\r\n    function isSystem(address _account) external view returns (bool);\r\n\r\n    function isRelay(address _account) external view returns (bool);\r\n\r\n    function isMultisig(address _contract) external view returns (bool);\r\n\r\n    function confirmFor(address _address) external;\r\n\r\n    function addOperator(address _account) external;\r\n\r\n    function removeOperator(address _account) external;\r\n\r\n    function addAdmin(address _account) external;\r\n\r\n    function removeAdmin(address _account) external;\r\n\r\n    function addSystem(address _account) external;\r\n\r\n    function removeSystem(address _account) external;\r\n\r\n    function addRelay(address _account) external;\r\n\r\n    function removeRelay(address _account) external;\r\n\r\n    function addOperatorAndAdmin(address _account) external;\r\n\r\n    function removeOperatorAndAdmin(address _account) external;\r\n}\r\n\r\n\r\n// File contracts/helpers/Initializable.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private initializing;\r\n\r\n    /**\r\n     * @dev Modifier to use in the initializer function of a contract.\r\n     */\r\n    modifier initializer() {\r\n        require(\r\n            initializing || isConstructor() || !initialized,\r\n            \"Initializable: Contract instance has already been initialized\"\r\n        );\r\n\r\n        bool isTopLevelCall = !initializing;\r\n        if (isTopLevelCall) {\r\n            initializing = true;\r\n            initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        uint256 cs;\r\n        // solhint-disable-next-line\r\n        assembly {\r\n            cs := extcodesize(address)\r\n        }\r\n        return cs == 0;\r\n    }\r\n\r\n    function isInitialized() public view returns (bool) {\r\n        return initialized;\r\n    }\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\n// File contracts/role/base/Operatorable.sol\r\n\r\n/**\r\n * @title Operatorable\r\n * @author Team 3301 <team3301@sygnum.com>\r\n * @dev Operatorable contract stores the BaseOperators contract address, and modifiers for\r\n *       contracts.\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\ncontract Operatorable is Initializable {\r\n    IBaseOperators internal operatorsInst;\r\n    address private operatorsPending;\r\n\r\n    event OperatorsContractChanged(address indexed caller, address indexed operatorsAddress);\r\n    event OperatorsContractPending(address indexed caller, address indexed operatorsAddress);\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have operator role associated.\r\n     */\r\n    modifier onlyOperator() {\r\n        require(isOperator(msg.sender), \"Operatorable: caller does not have the operator role\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have admin role associated.\r\n     */\r\n    modifier onlyAdmin() {\r\n        require(isAdmin(msg.sender), \"Operatorable: caller does not have the admin role\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have system role associated.\r\n     */\r\n    modifier onlySystem() {\r\n        require(isSystem(msg.sender), \"Operatorable: caller does not have the system role\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have multisig privileges.\r\n     */\r\n    modifier onlyMultisig() {\r\n        require(isMultisig(msg.sender), \"Operatorable: caller does not have multisig role\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have admin or system role associated.\r\n     */\r\n    modifier onlyAdminOrSystem() {\r\n        require(isAdminOrSystem(msg.sender), \"Operatorable: caller does not have the admin role nor system\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have operator or system role associated.\r\n     */\r\n    modifier onlyOperatorOrSystem() {\r\n        require(isOperatorOrSystem(msg.sender), \"Operatorable: caller does not have the operator role nor system\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have the relay role associated.\r\n     */\r\n    modifier onlyRelay() {\r\n        require(isRelay(msg.sender), \"Operatorable: caller does not have relay role associated\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have relay or operator role associated.\r\n     */\r\n    modifier onlyOperatorOrRelay() {\r\n        require(\r\n            isOperator(msg.sender) || isRelay(msg.sender),\r\n            \"Operatorable: caller does not have the operator role nor relay\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have relay or admin role associated.\r\n     */\r\n    modifier onlyAdminOrRelay() {\r\n        require(\r\n            isAdmin(msg.sender) || isRelay(msg.sender),\r\n            \"Operatorable: caller does not have the admin role nor relay\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have the operator, or system, or relay role associated.\r\n     */\r\n    modifier onlyOperatorOrSystemOrRelay() {\r\n        require(\r\n            isOperator(msg.sender) || isSystem(msg.sender) || isRelay(msg.sender),\r\n            \"Operatorable: caller does not have the operator role nor system nor relay\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have the operator, or admin, or relay role associated.\r\n     */\r\n    modifier onlyOperatorOrAdminOrRelay() {\r\n        require(\r\n            isOperator(msg.sender) || isAdmin(msg.sender) || isRelay(msg.sender),\r\n            \"Operatorable: caller does not have the operator role nor admin nor relay\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initialization instead of constructor, called once. The setOperatorsContract function can be called only by Admin role with\r\n     *       confirmation through the operators contract.\r\n     * @param _baseOperators BaseOperators contract address.\r\n     */\r\n    function initialize(address _baseOperators) public initializer {\r\n        _setOperatorsContract(_baseOperators);\r\n    }\r\n\r\n    /**\r\n     * @dev Set the new the address of Operators contract, should be confirmed from operators contract by calling confirmFor(addr)\r\n     *       where addr is the address of current contract instance. This is done to prevent the case when the new contract address is\r\n     *       broken and control of the contract can be lost in such case\r\n     * @param _baseOperators BaseOperators contract address.\r\n     */\r\n    function setOperatorsContract(address _baseOperators) public onlyAdmin {\r\n        require(_baseOperators != address(0), \"Operatorable: address of new operators contract can not be zero\");\r\n        operatorsPending = _baseOperators;\r\n        emit OperatorsContractPending(msg.sender, _baseOperators);\r\n    }\r\n\r\n    /**\r\n     * @dev The function should be called from new operators contract by admin to ensure that operatorsPending address\r\n     *       is the real contract address.\r\n     */\r\n    function confirmOperatorsContract() public {\r\n        require(operatorsPending != address(0), \"Operatorable: address of new operators contract can not be zero\");\r\n        require(msg.sender == operatorsPending, \"Operatorable: should be called from new operators contract\");\r\n        _setOperatorsContract(operatorsPending);\r\n    }\r\n\r\n    /**\r\n     * @return The address of the BaseOperators contract.\r\n     */\r\n    function getOperatorsContract() public view returns (address) {\r\n        return address(operatorsInst);\r\n    }\r\n\r\n    /**\r\n     * @return The pending address of the BaseOperators contract.\r\n     */\r\n    function getOperatorsPending() public view returns (address) {\r\n        return operatorsPending;\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has operator privileges.\r\n     */\r\n    function isOperator(address _account) public view returns (bool) {\r\n        return operatorsInst.isOperator(_account);\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has admin privileges.\r\n     */\r\n    function isAdmin(address _account) public view returns (bool) {\r\n        return operatorsInst.isAdmin(_account);\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has system privileges.\r\n     */\r\n    function isSystem(address _account) public view returns (bool) {\r\n        return operatorsInst.isSystem(_account);\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has relay privileges.\r\n     */\r\n    function isRelay(address _account) public view returns (bool) {\r\n        return operatorsInst.isRelay(_account);\r\n    }\r\n\r\n    /**\r\n     * @return If '_contract' has multisig privileges.\r\n     */\r\n    function isMultisig(address _contract) public view returns (bool) {\r\n        return operatorsInst.isMultisig(_contract);\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has admin or system privileges.\r\n     */\r\n    function isAdminOrSystem(address _account) public view returns (bool) {\r\n        return (operatorsInst.isAdmin(_account) || operatorsInst.isSystem(_account));\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has operator or system privileges.\r\n     */\r\n    function isOperatorOrSystem(address _account) public view returns (bool) {\r\n        return (operatorsInst.isOperator(_account) || operatorsInst.isSystem(_account));\r\n    }\r\n\r\n    /** INTERNAL FUNCTIONS */\r\n    function _setOperatorsContract(address _baseOperators) internal {\r\n        require(_baseOperators != address(0), \"Operatorable: address of new operators contract cannot be zero\");\r\n        operatorsInst = IBaseOperators(_baseOperators);\r\n        emit OperatorsContractChanged(msg.sender, _baseOperators);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/role/interface/IRaiseOperators.sol\r\n\r\n/**\r\n * @title IRaiseOperators\r\n * @notice Interface for RaiseOperators contract\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\ncontract IRaiseOperators {\r\n    function isInvestor(address _account) external view returns (bool);\r\n\r\n    function isIssuer(address _account) external view returns (bool);\r\n\r\n    function addInvestor(address _account) external;\r\n\r\n    function removeInvestor(address _account) external;\r\n\r\n    function addIssuer(address _account) external;\r\n\r\n    function removeIssuer(address _account) external;\r\n}\r\n\r\n\r\n// File contracts/role/interface/ITraderOperators.sol\r\n\r\n/**\r\n * @title ITraderOperators\r\n * @notice Interface for TraderOperators contract\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\ncontract ITraderOperators {\r\n    function isTrader(address _account) external view returns (bool);\r\n\r\n    function addTrader(address _account) external;\r\n\r\n    function removeTrader(address _account) external;\r\n}\r\n\r\n\r\n// File contracts/role/interface/IBlockerOperators.sol\r\n\r\n/**\r\n * @title IBlockerOperators\r\n * @notice Interface for BlockerOperators contract\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\ncontract IBlockerOperators {\r\n    function isBlocker(address _account) external view returns (bool);\r\n\r\n    function addBlocker(address _account) external;\r\n\r\n    function removeBlocker(address _account) external;\r\n}\r\n\r\n\r\n// File contracts/routers/OnboardRouter.sol\r\n\r\n/**\r\n * @title OnboardRouter\r\n * @author Team 3301 <team3301@sygnum.com>\r\n * @dev OnboardRouter contract, that allows one individual transaction to onboard a particular subset of users onto\r\n *      the Sygnum platform, instead of having to initiate X amount of transactions.\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract OnboardRouter is Operatorable {\r\n    IWhitelist internal whitelistInst;\r\n    IRaiseOperators internal raiseOperatorsInst;\r\n    ITraderOperators internal traderOperatorsInst;\r\n    IBlockerOperators internal blockerOperatorsInst;\r\n\r\n    event WhitelistContractChanged(address indexed caller, address indexed whitelistAddress);\r\n    event BaseOperatorsContractChanged(address indexed caller, address indexed baseOperatorsAddress);\r\n    event RaiseOperatorsContractChanged(address indexed caller, address indexed raiseOperatorsAddress);\r\n    event TraderOperatorsContractChanged(address indexed caller, address indexed traderOperatorsAddress);\r\n    event BlockerOperatorsContractChanged(address indexed caller, address indexed blockerOperatorsAddress);\r\n\r\n    /**\r\n     * @dev Initialization instead of constructor, called once. The setOperatorsContract function can be called only by Admin role with\r\n     *       confirmation through the operators contract.\r\n     * @param _baseOperators BaseOperators contract address.\r\n     * @param _raiseOperators RaiseOperators contract address.\r\n     * @param _traderOperators TraderOperators contract address.\r\n     * @param _blockerOperators BlockerOperators contract address.\r\n     */\r\n    function initialize(\r\n        address _whitelist,\r\n        address _baseOperators,\r\n        address _raiseOperators,\r\n        address _traderOperators,\r\n        address _blockerOperators\r\n    ) public initializer {\r\n        _setWhitelistContract(_whitelist);\r\n        _setBaseOperatorsContract(_baseOperators);\r\n        _setRaiseOperatorsContract(_raiseOperators);\r\n        _setTraderOperatorsContract(_traderOperators);\r\n        _setBlockerOperatorsContract(_blockerOperators);\r\n    }\r\n\r\n    /**\r\n     * @dev Admin can give '_account' address system privileges, whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.\r\n     * @param _account address that should be given system privileges.\r\n     * @param _whitelist Whitelist contract address.\r\n     */\r\n    function onboardSystem(address _account, address _whitelist) public onlyAdmin {\r\n        _toggleWhitelist(_account, _whitelist, true);\r\n        operatorsInst.addSystem(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Admin can revoke '_account' address system privileges, de-whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.\r\n     * @param _account address that should be revoked system privileges.\r\n     * @param _whitelist Whitelist contract address.\r\n     */\r\n    function deboardSystem(address _account, address _whitelist) public onlyAdmin {\r\n        _toggleWhitelist(_account, _whitelist, false);\r\n        operatorsInst.removeSystem(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Admin can give '_account' address super admin privileges, whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.\r\n     * @param _account address that should be given super admin privileges.\r\n     * @param _whitelist Whitelist contract address.\r\n     */\r\n    function onboardSuperAdmin(address _account, address _whitelist) public onlyAdmin {\r\n        _toggleWhitelist(_account, _whitelist, true);\r\n        operatorsInst.addOperatorAndAdmin(_account);\r\n        traderOperatorsInst.addTrader(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Admin can revoke '_account' address super admin privileges, de-whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.\r\n     * @param _account address that should be revoked super admin privileges.\r\n     * @param _whitelist Whitelist contract address.\r\n     */\r\n    function deboardSuperAdmin(address _account, address _whitelist) public onlyAdmin {\r\n        _toggleWhitelist(_account, _whitelist, false);\r\n        operatorsInst.removeOperatorAndAdmin(_account);\r\n        traderOperatorsInst.removeTrader(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Operator or System can give '_account' address investor privileges, whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.\r\n     * @param _account address that should be given investor privileges.\r\n     * @param _whitelist Whitelist contract address.\r\n     */\r\n    function onboardInvestor(address _account, address _whitelist) public onlyOperatorOrSystem {\r\n        _toggleWhitelist(_account, _whitelist, true);\r\n        raiseOperatorsInst.addInvestor(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Operator or System can revoke '_account' address investor privileges, de-whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.\r\n     * @param _account address that should be revoked investor privileges.\r\n     * @param _whitelist Whitelist contract address.\r\n     */\r\n    function deboardInvestor(address _account, address _whitelist) public onlyOperatorOrSystem {\r\n        _toggleWhitelist(_account, _whitelist, false);\r\n        raiseOperatorsInst.removeInvestor(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Admin can give '_account' address trader privileges, whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.\r\n     * @param _account address that should be given trader privileges.\r\n     * @param _whitelist Whitelist contract address.\r\n     */\r\n    function onboardTrader(address _account, address _whitelist) public onlyAdmin {\r\n        _toggleWhitelist(_account, _whitelist, true);\r\n        traderOperatorsInst.addTrader(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Admin can revoke '_account' address trader privileges, de-whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.\r\n     * @param _account address that should be revoked trader privileges.\r\n     * @param _whitelist Whitelist contract address.\r\n     */\r\n    function deboardTrader(address _account, address _whitelist) public onlyAdmin {\r\n        _toggleWhitelist(_account, _whitelist, false);\r\n        traderOperatorsInst.removeTrader(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Admin can give '_account' address blocker privileges, whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.\r\n     * @param _account address that should be given blocker privileges.\r\n     * @param _whitelist Whitelist contract address.\r\n     */\r\n    function onboardBlocker(address _account, address _whitelist) public onlyAdmin {\r\n        _toggleWhitelist(_account, _whitelist, true);\r\n        blockerOperatorsInst.addBlocker(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Admin can revoke '_account' address blocker privileges, de-whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.\r\n     * @param _account address that should be revoked blocker privileges.\r\n     * @param _whitelist Whitelist contract address.\r\n     */\r\n    function deboardBlocker(address _account, address _whitelist) public onlyAdmin {\r\n        _toggleWhitelist(_account, _whitelist, false);\r\n        blockerOperatorsInst.removeBlocker(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Admin can change admin '_account' address to only trader privileges, whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.\r\n     * @param _account address that should be given trader privileges.\r\n     * @param _whitelist Whitelist contract address.\r\n     */\r\n    function changeAdminToTrader(address _account, address _whitelist) public onlyAdmin {\r\n        _toggleWhitelist(_account, _whitelist, true);\r\n        operatorsInst.removeAdmin(_account);\r\n        traderOperatorsInst.addTrader(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Admin can change admin '_account' address to superAdmin privileges, whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.\r\n     * @param _account address that should be given trader privileges.\r\n     * @param _whitelist Whitelist contract address.\r\n     */\r\n    function changeAdminToSuperAdmin(address _account, address _whitelist) public onlyAdmin {\r\n        require(isAdmin(_account), \"OnboardRouter: selected account does not have admin privileges\");\r\n\r\n        _toggleWhitelist(_account, _whitelist, true);\r\n        operatorsInst.addOperator(_account);\r\n        traderOperatorsInst.addTrader(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Admin can change operator '_account' address to trader privileges, whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.\r\n     * @param _account address that should be given trader privileges.\r\n     * @param _whitelist Whitelist contract address.\r\n     */\r\n    function changeOperatorToTrader(address _account, address _whitelist) public onlyAdmin {\r\n        _toggleWhitelist(_account, _whitelist, true);\r\n        operatorsInst.removeOperator(_account);\r\n        traderOperatorsInst.addTrader(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Admin can change operator '_account' address to superAdmin privileges, whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.\r\n     * @param _account address that should be given trader privileges.\r\n     * @param _whitelist Whitelist contract address.\r\n     */\r\n    function changeOperatorToSuperAdmin(address _account, address _whitelist) public onlyAdmin {\r\n        require(isOperator(_account), \"OnboardRouter: selected account does not have operator privileges\");\r\n\r\n        _toggleWhitelist(_account, _whitelist, true);\r\n        operatorsInst.addAdmin(_account);\r\n        traderOperatorsInst.addTrader(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Admin can change trader '_account' address to admin privileges, de-whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.\r\n     * @param _account address that should be given trader privileges.\r\n     * @param _whitelist Whitelist contract address.\r\n     */\r\n    function changeTraderToAdmin(address _account, address _whitelist) public onlyAdmin {\r\n        _toggleWhitelist(_account, _whitelist, false);\r\n        operatorsInst.addAdmin(_account);\r\n        traderOperatorsInst.removeTrader(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Admin can change trader '_account' address to operator privileges, whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.\r\n     * @param _account address that should be given trader privileges.\r\n     * @param _whitelist Whitelist contract address.\r\n     */\r\n    function changeTraderToOperator(address _account, address _whitelist) public onlyAdmin {\r\n        _toggleWhitelist(_account, _whitelist, false);\r\n        operatorsInst.addOperator(_account);\r\n        traderOperatorsInst.removeTrader(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Admin can change superadmin '_account' address to admin privileges, de-whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.\r\n     * @param _account address that should be given trader privileges.\r\n     * @param _whitelist Whitelist contract address.\r\n     */\r\n    function changeSuperAdminToAdmin(address _account, address _whitelist) public onlyAdmin {\r\n        require(isAdmin(_account), \"OnboardRouter: account is not admin\");\r\n        _toggleWhitelist(_account, _whitelist, false);\r\n        operatorsInst.removeOperator(_account);\r\n        traderOperatorsInst.removeTrader(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Admin can change superadmin '_account' address to operator privileges, de-whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.\r\n     * @param _account address that should be given trader privileges.\r\n     * @param _whitelist Whitelist contract address.\r\n     */\r\n    function changeSuperAdminToOperator(address _account, address _whitelist) public onlyAdmin {\r\n        require(isAdmin(_account), \"OnboardRouter: account is not admin\");\r\n        _toggleWhitelist(_account, _whitelist, false);\r\n        operatorsInst.removeAdmin(_account);\r\n        traderOperatorsInst.removeTrader(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Change address of Whitelist contract.\r\n     * @param _whitelist Whitelist contract address.\r\n     */\r\n    function changeWhitelistContract(address _whitelist) public onlyAdmin {\r\n        _setWhitelistContract(_whitelist);\r\n    }\r\n\r\n    /**\r\n     * @dev Change address of BaseOperators contract.\r\n     * @param _baseOperators BaseOperators contract address.\r\n     */\r\n    function changeBaseOperatorsContract(address _baseOperators) public onlyAdmin {\r\n        _setBaseOperatorsContract(_baseOperators);\r\n    }\r\n\r\n    /**\r\n     * @dev Change address of RaiseOperators contract.\r\n     * @param _raiseOperators RaiseOperators contract address.\r\n     */\r\n    function changeRaiseOperatorsContract(address _raiseOperators) public onlyAdmin {\r\n        _setRaiseOperatorsContract(_raiseOperators);\r\n    }\r\n\r\n    /**\r\n     * @dev Change address of TraderOperators contract.\r\n     * @param _traderOperators TraderOperators contract address.\r\n     */\r\n    function changeTraderOperatorsContract(address _traderOperators) public onlyAdmin {\r\n        _setTraderOperatorsContract(_traderOperators);\r\n    }\r\n\r\n    /**\r\n     * @dev Change address of BlockerOperators contract.\r\n     * @param _blockerOperators BlockerOperators contract address.\r\n     */\r\n    function changeBlockerOperatorsContract(address _blockerOperators) public onlyAdmin {\r\n        _setBlockerOperatorsContract(_blockerOperators);\r\n    }\r\n\r\n    /**\r\n     * @return Stored address of the Whitelist contract.\r\n     */\r\n    function getWhitelistContract() public view returns (address) {\r\n        return address(whitelistInst);\r\n    }\r\n\r\n    /**\r\n     * @return Stored address of the BaseOperators contract.\r\n     */\r\n    function getBaseOperatorsContract() public view returns (address) {\r\n        return address(operatorsInst);\r\n    }\r\n\r\n    /**\r\n     * @return Stored address of the RaiseOperators contract.\r\n     */\r\n    function getRaiseOperatorsContract() public view returns (address) {\r\n        return address(raiseOperatorsInst);\r\n    }\r\n\r\n    /**\r\n     * @return Stored address of the TraderOperators contract.\r\n     */\r\n    function getTraderOperatorsContract() public view returns (address) {\r\n        return address(traderOperatorsInst);\r\n    }\r\n\r\n    /**\r\n     * @return Stored address of the BlockerOperators contract.\r\n     */\r\n    function getBlockerOperatorsContract() public view returns (address) {\r\n        return address(blockerOperatorsInst);\r\n    }\r\n\r\n    /** INTERNAL FUNCTIONS */\r\n    function _toggleWhitelist(\r\n        address _account,\r\n        address _whitelist,\r\n        bool _toggle\r\n    ) internal {\r\n        whitelistInst.toggleWhitelist(_account, _toggle);\r\n        if (_whitelist != address(0)) {\r\n            _toggleSecondaryWhitelist(_account, _whitelist, _toggle); // non-default\r\n        }\r\n    }\r\n\r\n    function _toggleSecondaryWhitelist(\r\n        address _account,\r\n        address _whitelist,\r\n        bool _toggle\r\n    ) internal {\r\n        IWhitelist(_whitelist).toggleWhitelist(_account, _toggle);\r\n    }\r\n\r\n    function _setWhitelistContract(address _whitelist) internal {\r\n        require(_whitelist != address(0), \"OnboardRouter: address of new whitelist contract cannot be zero\");\r\n        whitelistInst = IWhitelist(_whitelist);\r\n        emit WhitelistContractChanged(msg.sender, _whitelist);\r\n    }\r\n\r\n    function _setBaseOperatorsContract(address _baseOperators) internal {\r\n        require(_baseOperators != address(0), \"OnboardRouter: address of new baseOperators contract cannot be zero\");\r\n        operatorsInst = IBaseOperators(_baseOperators);\r\n        emit BaseOperatorsContractChanged(msg.sender, _baseOperators);\r\n    }\r\n\r\n    function _setRaiseOperatorsContract(address _raiseOperators) internal {\r\n        require(_raiseOperators != address(0), \"OnboardRouter: address of new raiseOperators contract cannot be zero\");\r\n        raiseOperatorsInst = IRaiseOperators(_raiseOperators);\r\n        emit RaiseOperatorsContractChanged(msg.sender, _raiseOperators);\r\n    }\r\n\r\n    function _setTraderOperatorsContract(address _traderOperators) internal {\r\n        require(\r\n            _traderOperators != address(0),\r\n            \"OnboardRouter: address of new traderOperators contract cannot be zero\"\r\n        );\r\n        traderOperatorsInst = ITraderOperators(_traderOperators);\r\n        emit TraderOperatorsContractChanged(msg.sender, _traderOperators);\r\n    }\r\n\r\n    function _setBlockerOperatorsContract(address _blockerOperators) internal {\r\n        require(\r\n            _blockerOperators != address(0),\r\n            \"OnboardRouter: address of new blockerOperators contract cannot be zero\"\r\n        );\r\n        blockerOperatorsInst = IBlockerOperators(_blockerOperators);\r\n        emit BlockerOperatorsContractChanged(msg.sender, _blockerOperators);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"baseOperatorsAddress\",\"type\":\"address\"}],\"name\":\"BaseOperatorsContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"blockerOperatorsAddress\",\"type\":\"address\"}],\"name\":\"BlockerOperatorsContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operatorsAddress\",\"type\":\"address\"}],\"name\":\"OperatorsContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operatorsAddress\",\"type\":\"address\"}],\"name\":\"OperatorsContractPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"raiseOperatorsAddress\",\"type\":\"address\"}],\"name\":\"RaiseOperatorsContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"traderOperatorsAddress\",\"type\":\"address\"}],\"name\":\"TraderOperatorsContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whitelistAddress\",\"type\":\"address\"}],\"name\":\"WhitelistContractChanged\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"changeAdminToSuperAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"changeAdminToTrader\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseOperators\",\"type\":\"address\"}],\"name\":\"changeBaseOperatorsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blockerOperators\",\"type\":\"address\"}],\"name\":\"changeBlockerOperatorsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"changeOperatorToSuperAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"changeOperatorToTrader\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_raiseOperators\",\"type\":\"address\"}],\"name\":\"changeRaiseOperatorsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"changeSuperAdminToAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"changeSuperAdminToOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_traderOperators\",\"type\":\"address\"}],\"name\":\"changeTraderOperatorsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"changeTraderToAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"changeTraderToOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"changeWhitelistContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOperatorsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"deboardBlocker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"deboardInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"deboardSuperAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"deboardSystem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"deboardTrader\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBaseOperatorsContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlockerOperatorsContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOperatorsContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOperatorsPending\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRaiseOperatorsContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTraderOperatorsContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWhitelistContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_baseOperators\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_raiseOperators\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_traderOperators\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_blockerOperators\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseOperators\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAdminOrSystem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"isMultisig\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isOperatorOrSystem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isRelay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isSystem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"onboardBlocker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"onboardInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"onboardSuperAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"onboardSystem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"onboardTrader\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseOperators\",\"type\":\"address\"}],\"name\":\"setOperatorsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OnboardRouter", "CompilerVersion": "v0.5.12+commit.7709ece9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://30d5d241fb16092890a718282855f5673330df425751e425880fe6b5628418b6"}