{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface HodlerBridgeClaim {\r\n    function updateState(uint256 blockNumber, bytes32 roothash) external;\r\n}\r\n\r\n/// @title A heavily modified version of a multisignature wallet. Credit goes to https://github.com/gnosis/MultiSigWallet\r\n/// @author Daniel Hazlewood - <twitter: @alphasoups>\r\ncontract HodlerBridgeMerkleSubmitter {\r\n\r\n    /*\r\n     *  Events\r\n     */\r\n    event Confirmation(address indexed sender, bytes32 indexed hash, bytes32 indexed epochKey);\r\n    event Revocation(address indexed sender,  bytes32 indexed hash, bytes32 indexed epochKey);\r\n    event Submission(bytes32 indexed epochKey);\r\n    event Execution(bytes32 indexed epochKey);\r\n    event ExecutionFailure(bytes32 indexed epochKey);\r\n    event DelegateAddition(address indexed delegate);\r\n    event DelegateRemoval(address indexed delegate);\r\n    event RequirementChange(uint256 required);\r\n\r\n    /*\r\n     *  Constants\r\n     */\r\n    uint256 constant public MAX_DELEGATE_COUNT = 25;\r\n\r\n    /*\r\n     *  Storage\r\n     */\r\n    mapping (bytes32 => bool) public epochs;\r\n    mapping (bytes32 => mapping(address => bool)) public confirmations;\r\n    \r\n    mapping (address => bool) public isDelegate;\r\n    address[] public delegates;\r\n\r\n    address public delegator;\r\n    uint256 public required;\r\n    uint256 public epochCount;\r\n    uint256 public lastBlockSubmitted;\r\n\r\n    HodlerBridgeClaim public claimContract;\r\n\r\n    /*\r\n     *  Modifiers\r\n     */\r\n    modifier onlyDelegator() {\r\n        require(msg.sender == delegator, \"Delegators only\");\r\n        _;\r\n    }\r\n\r\n    modifier delegateDoesNotExist(address delegate) {\r\n        require(!isDelegate[delegate], \"Delegate exists\");\r\n        _;\r\n    }\r\n\r\n    modifier delegateExists(address delegate) {\r\n        require(isDelegate[delegate], \"Delegate does not exist\");\r\n        _;\r\n    }\r\n\r\n    modifier confirmed(bytes32 epochKey, address delegate) {\r\n        require(confirmations[epochKey][delegate]);\r\n        _;\r\n    }\r\n\r\n    modifier notConfirmed(bytes32 epochKey, address delegate) {\r\n        require(!confirmations[epochKey][delegate]);\r\n        _;\r\n    }\r\n\r\n    modifier notNull(address _address) {\r\n        require(_address != address(0));\r\n        _;\r\n    }\r\n\r\n    modifier validRequirement(uint256 delegateCount, uint256 _required) {\r\n        require(delegateCount <= MAX_DELEGATE_COUNT\r\n            && _required <= delegateCount\r\n            && _required != 0\r\n            && delegateCount != 0);\r\n        _;\r\n    }\r\n\r\n    /// @dev This contract doesn't accept ether\r\n    fallback() external payable\r\n    {\r\n        revert(\"\");\r\n    }\r\n\r\n    // Function to receive Ether. msg.data must be empty\r\n    receive() external payable {\r\n        revert(\"\");\r\n    }\r\n    /*\r\n     * Public functions\r\n     */\r\n    /// @dev Contract constructor sets initial delegates and required number of confirmations.\r\n    /// @param _delegates List of initial delegates.\r\n    /// @param _required Number of required confirmations.\r\n    constructor(address claimContractAddress, address _delegator, uint256 _required, address[] memory _delegates)\r\n        validRequirement(_delegates.length, _required)\r\n    {\r\n        for (uint256 i=0; i<_delegates.length; i++) {\r\n            require(!isDelegate[_delegates[i]] && _delegates[i] != address(0), \"Delegate already exists\");\r\n            isDelegate[_delegates[i]] = true;\r\n        }\r\n        claimContract = HodlerBridgeClaim(claimContractAddress);\r\n        delegates = _delegates;\r\n        required = _required;\r\n        delegator = _delegator;\r\n    }\r\n    /// @dev Allows to add a new delegate\r\n    /// @param delegate Address of new delegate.\r\n    function setDelegator(address delegate)\r\n        external\r\n        onlyDelegator\r\n        notNull(delegate)\r\n    {\r\n        delegator = delegate;\r\n    }\r\n    \r\n    /// @dev Allows to add a new delegate\r\n    /// @param delegate Address of new delegate.\r\n    function addDelegate(address delegate)\r\n        external\r\n        onlyDelegator\r\n        delegateDoesNotExist(delegate)\r\n        notNull(delegate)\r\n        validRequirement(delegates.length + 1, required)\r\n    {\r\n        isDelegate[delegate] = true;\r\n        delegates.push(delegate);\r\n        emit DelegateAddition(delegate);\r\n    }\r\n\r\n    /// @dev Allows to remove an delegate.\r\n    /// @param delegate Address of delegate.\r\n    function removeDelegate(address delegate)\r\n        external\r\n        onlyDelegator\r\n        delegateExists(delegate)\r\n    {\r\n        isDelegate[delegate] = false;\r\n        for (uint256 i=0; i<delegates.length - 1; i++) {\r\n            if (delegates[i] == delegate) {\r\n                delegates[i] = delegates[delegates.length - 1];\r\n                break;\r\n            }\r\n        }\r\n        if (required > delegates.length)\r\n            changeRequirement(delegates.length);\r\n        emit DelegateRemoval(delegate);\r\n    }\r\n\r\n    /// @dev Allows to change the number of required confirmations.\r\n    /// @param _required Number of required confirmations.\r\n    function changeRequirement(uint256 _required)\r\n        public\r\n        onlyDelegator\r\n        validRequirement(delegates.length, _required)\r\n    {\r\n        required = _required;\r\n        emit  RequirementChange(_required);\r\n    }\r\n\r\n    /// @dev Allows an delegate to submit and confirm a epoch.\r\n    /// @param blockNumber Block number this merkle root submission is for\r\n    /// @param hash The root hash for this merkle root\r\n    function submitEpoch(uint256 blockNumber, bytes32 hash)\r\n        external\r\n        returns (bytes32 epochKey)\r\n    {\r\n        epochKey = getKey(blockNumber, hash);\r\n        _submitEpoch(blockNumber, hash, epochKey);\r\n    }\r\n\r\n    /// @dev Allows an delegate to submit and confirm a epoch.\r\n    /// @param blockNumber Block number this merkle root submission is for\r\n    /// @param hash The root hash for this merkle root\r\n    function _submitEpoch(uint256 blockNumber, bytes32 hash, bytes32 epochKey)\r\n        internal\r\n    {\r\n        require(blockNumber > lastBlockSubmitted, \"Block number is not within the range\");\r\n        require(hash != 0, \"Merkle root hash should exist\");\r\n        if(confirmations[epochKey][msg.sender] == false) {\r\n            emit Confirmation(msg.sender, hash, epochKey);\r\n        }\r\n        confirmations[epochKey][msg.sender] = true;\r\n        _executeEpoch(blockNumber, hash, epochKey);\r\n    }\r\n\r\n    /// @dev Allows anyone to execute a confirmed epoch.\r\n    function _executeEpoch(uint256 blockNumber, bytes32 hash, bytes32 epochKey)\r\n        internal\r\n        delegateExists(msg.sender)\r\n    {\r\n        if (isConfirmed(epochKey) && epochs[epochKey] == false) {\r\n            epochs[epochKey] = true;\r\n            try claimContract.updateState(blockNumber, hash) {\r\n                lastBlockSubmitted = blockNumber;\r\n                emit Execution(epochKey);\r\n            } catch {\r\n                emit ExecutionFailure(epochKey);\r\n                epochs[epochKey] = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the confirmation status of a epoch.\r\n    /// @param epochKey The hash (blocknumber and merkle hash)\r\n    /// @return txConfirmed Confirmation status.\r\n    function isConfirmed(bytes32 epochKey)\r\n        public\r\n        view\r\n        returns (bool txConfirmed)\r\n    {\r\n        uint256 count = 0;\r\n        for (uint256 i=0; i<delegates.length; i++) {\r\n            if (confirmations[epochKey][delegates[i]])\r\n                count += 1;\r\n            if (count == required)\r\n                txConfirmed = true;\r\n        }\r\n    }\r\n    \r\n    /*\r\n     * Web3 call functions\r\n     */\r\n\r\n    /// @dev Returns number of confirmations of a epoch.\r\n    /// @return count Number of confirmations.\r\n    function getConfirmationCount(bytes32 epochKey)\r\n        public\r\n        view\r\n        returns (uint256 count)\r\n    {\r\n        for (uint256 i=0; i<delegates.length; i++)\r\n            if (confirmations[epochKey][delegates[i]])\r\n                count += 1;\r\n    }\r\n\r\n    /// @dev Returns list of delegates.\r\n    /// @return delegatelist List of delegate addresses.\r\n    // This is external, we don't want anyone else calling it from within as it's not gas optimized.\r\n    function getdelegates()\r\n        external\r\n        view\r\n        returns (address[] memory delegatelist)\r\n    {\r\n        return delegates;\r\n    }\r\n\r\n    /// @dev Returns array with delegate addresses, which confirmed epoch.\r\n    /// @param epochKey Epoch ID.\r\n    /// @return _confirmations Returns array of delegate addresses.\r\n    function getConfirmations(bytes32 epochKey)\r\n        public\r\n        view\r\n        returns (address[] memory _confirmations)\r\n    {\r\n        address[] memory confirmationsTemp = new address[](delegates.length);\r\n        uint256 count = 0;\r\n        uint256 i;\r\n        for (i=0; i<delegates.length; i++)\r\n            if (confirmations[epochKey][delegates[i]]) {\r\n                confirmationsTemp[count] = delegates[i];\r\n                count += 1;\r\n            }\r\n        _confirmations = new address[](count);\r\n        for (i=0; i<count; i++)\r\n            _confirmations[i] = confirmationsTemp[i];\r\n    }\r\n\r\n    function getKey(uint256 blockNumber, bytes32 hash) public pure returns(bytes32 epochKey)\r\n    {\r\n        return keccak256(abi.encode(blockNumber, hash));\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_delegates\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"epochKey\",\"type\":\"bytes32\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"DelegateAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"DelegateRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"epochKey\",\"type\":\"bytes32\"}],\"name\":\"Execution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"epochKey\",\"type\":\"bytes32\"}],\"name\":\"ExecutionFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"RequirementChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"epochKey\",\"type\":\"bytes32\"}],\"name\":\"Revocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"epochKey\",\"type\":\"bytes32\"}],\"name\":\"Submission\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MAX_DELEGATE_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"addDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimContract\",\"outputs\":[{\"internalType\":\"contract HodlerBridgeClaim\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"epochs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochKey\",\"type\":\"bytes32\"}],\"name\":\"getConfirmationCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochKey\",\"type\":\"bytes32\"}],\"name\":\"getConfirmations\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_confirmations\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochKey\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getdelegates\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"delegatelist\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochKey\",\"type\":\"bytes32\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"txConfirmed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDelegate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBlockSubmitted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"removeDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"setDelegator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"submitEpoch\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochKey\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HodlerBridgeMerkleSubmitter", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000001c28da3f19f4ffd84218d374dba0ee42a52ec52e000000000000000000000000f06e47c8804ebd50e4f9433cf66f4b0e8b875212000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000002000000000000000000000000f06e47c8804ebd50e4f9433cf66f4b0e8b8752120000000000000000000000001c28da3f19f4ffd84218d374dba0ee42a52ec52e", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ec35f43505e9fe388116029901e6784f4a560d134127ea4f3e451a78aff3c9b6"}