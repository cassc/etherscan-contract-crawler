{"SourceCode": "pragma solidity ^0.7.6;\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts may inherit from this and call {_registerInterface} to declare\r\n * their support of an interface.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /*\r\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    /**\r\n     * @dev Mapping of interface ids to whether or not it's supported.\r\n     */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor () internal {\r\n        // Derived contracts need only register support for their own interfaces,\r\n        // we register support for ERC165 itself here\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     *\r\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev Registers the contract as an implementer of the interface defined by\r\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\r\n     * registering its interface id is not required.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal virtual {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n\r\n    /**\r\n        @dev Handles the receipt of a single ERC1155 token type. This function is\r\n        called at the end of a `safeTransferFrom` after the balance has been updated.\r\n        To accept the transfer, this must return\r\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n        (i.e. 0xf23a6e61, or its own function selector).\r\n        @param operator The address which initiated the transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param id The ID of the token being transferred\r\n        @param value The amount of tokens being transferred\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n\r\n    /**\r\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n        is called at the end of a `safeBatchTransferFrom` after the balances have\r\n        been updated. To accept the transfer(s), this must return\r\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n        (i.e. 0xbc197c81, or its own function selector).\r\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n}\r\n\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\r\n    constructor() internal {\r\n        _registerInterface(\r\n            ERC1155Receiver(address(0)).onERC1155Received.selector ^\r\n            ERC1155Receiver(address(0)).onERC1155BatchReceived.selector\r\n        );\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\ncontract ERC1155Holder is ERC1155Receiver {\r\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n}\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// interface of momiji token.\r\ninterface IMomijiToken {\r\n    function tokenQuantityWithId(uint256 tokenId) view external returns(uint256);\r\n    function tokenMaxQuantityWithId(uint256 tokenId) view external returns(uint256);\r\n    function mintManuallyQuantityWithId(uint256 tokenId) view external returns(uint256);\r\n    function creators(uint256 tokenId) view external returns(address);\r\n    function removeMintManuallyQuantity(uint256 tokenId, uint256 amount) external;\r\n    function addMintManuallyQuantity(uint256 tokenId, uint256 amount) external;\r\n    function mint(uint256 tokenId, address to, uint256 quantity, bytes memory data) external;\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes memory data) external;\r\n}\r\n\r\ncontract ChainbindersMelt is Ownable, ERC1155Holder {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Level enum of chainbinders NFTs total 7\r\n    enum NftLevel {\r\n        Legendary,\r\n        Ethereal,\r\n        Mythic,\r\n        Rare,\r\n        Common,\r\n        Secret,\r\n        Failed\r\n    }\r\n\r\n    // What rate of ETH does each level have.\r\n    mapping(NftLevel => uint256) public nftRatio;\r\n    // How many cards does each level of NFT have.\r\n    mapping(NftLevel => uint256) public nftCardAmountOfLevel;\r\n    // How much ETH does each level NFT levl have.\r\n    mapping(NftLevel => uint256) public ethAmountOfLevel;\r\n    // Which cards exist\r\n    mapping(uint256 => bool) public cardExists;\r\n    // Which level the current card belongs to\r\n    mapping(uint256 => NftLevel) public cardLevelWithId;\r\n    // Supply of current card with a specify tokenId\r\n    mapping(uint256 => uint256) public cardAmounWithId;\r\n    // How much azuki need to burn fo per token.\r\n    mapping(NftLevel => uint256) public azukiBurnAmountOfLevel;\r\n\r\n    IERC20 public immutable weth;\r\n    IERC20 public immutable azuki;\r\n    IMomijiToken public immutable momiji;\r\n    bool public isStarted;\r\n    address public dokiBuybackAccount;\r\n    address public auzkiBurnAccount;\r\n\r\n    event Melt(address indexed burner, uint256 indexed cardId, uint256 count, uint256 azukiBurned, uint256 forUserAmount, uint256 forDokibuybackAmount);\r\n    event ChangeAzukiPriceForMelt(uint256 forLegendary, uint256 forEthereal, uint256 forMythic, uint256 forRare, uint256 forCommon, uint256 forSecret);\r\n    event CardAdded(uint256 indexed cardId, uint256 additionalSupply, NftLevel indexed nftLevel);\r\n    event CardRemoved(uint256 indexed cardId, uint256 removedAmount);\r\n    event SetupRarityLevel(NftLevel indexed nftLevel, uint256 ethAmountOfLevel, uint256 poolRatio, uint256 azukiRequiredForMelt);\r\n\r\n    constructor(IERC20 _weth, IERC20 _azuki, IMomijiToken _momiji) {\r\n        isStarted = false;\r\n        weth = _weth;\r\n        azuki = _azuki;\r\n        momiji = _momiji;\r\n        dokiBuybackAccount = 0xc91ca8DC020F0135Df86c1D88d4CDC9caF9982Da;\r\n        auzkiBurnAccount = 0x6dC9950905BAcA54Ccc97e4A0D0F24D9611B46ef;\r\n        _setupRarityLevel();\r\n        _setupAzukiBurnAmountOfLevel();\r\n    }\r\n\r\n    // set the percentage of ETH in the pool of every level.\r\n    function _setupRarityLevel() private {\r\n        nftRatio[NftLevel.Legendary] = 28; // 28% ETH in the pool\r\n        nftRatio[NftLevel.Ethereal] = 26; // 26% ETH in the pool\r\n        nftRatio[NftLevel.Mythic] = 20; // 20% ETH in the pool\r\n        nftRatio[NftLevel.Rare] = 15; // 15% ETH in the pool\r\n        nftRatio[NftLevel.Common] = 10; // 10% ETH in the pool\r\n        nftRatio[NftLevel.Secret] = 1; // 1% ETH in the pool\r\n        nftRatio[NftLevel.Failed] = 0;\r\n    }\r\n\r\n    // set the burn amount if AZUKI when unbind NFTs\r\n    function _setupAzukiBurnAmountOfLevel() private {\r\n        uint256 forLegendary = 100; // For Legendary it should burn 100 AZUKI\r\n        azukiBurnAmountOfLevel[NftLevel.Legendary] = forLegendary.mul(1e18);\r\n        uint256 forEthereal = 25; // For Ethereal it should burn 25 AZUKI\r\n        azukiBurnAmountOfLevel[NftLevel.Ethereal] = forEthereal.mul(1e18);\r\n        uint256 forMythic = 6; // For Mythic it should burn 6 AZUKI\r\n        azukiBurnAmountOfLevel[NftLevel.Mythic] = forMythic.mul(1e18);\r\n        uint256 forRare = 3; // For Rare it should burn 3 AZUKI\r\n        azukiBurnAmountOfLevel[NftLevel.Rare] = forRare.mul(1e18);\r\n        uint256 forCommon = 1; // For Common it should burn 1 AZUKI\r\n        azukiBurnAmountOfLevel[NftLevel.Common] = forCommon.mul(1e18);\r\n        uint256 forSecret = 500; // For Secret it should burn 500 AZUKI\r\n        azukiBurnAmountOfLevel[NftLevel.Secret] = forSecret.mul(1e18);\r\n        azukiBurnAmountOfLevel[NftLevel.Failed] = 0;\r\n    }\r\n\r\n    // Add card into pool, this function is for setting up pool.\r\n    function addCard(uint256 cardId, uint256 additionalSupply, NftLevel nftLevel) external onlyOwner {\r\n        require(!cardExists[cardId] || cardLevelWithId[cardId] == nftLevel, \"Card lvl different than ones added\");\r\n        cardExists[cardId] = true;\r\n        cardAmounWithId[cardId] = cardAmounWithId[cardId].add(additionalSupply); // card of ID\r\n        nftCardAmountOfLevel[nftLevel] = nftCardAmountOfLevel[nftLevel].add(additionalSupply); // card of Level.\r\n        cardLevelWithId[cardId] = nftLevel; // setup card of level\r\n        emit CardAdded(cardId, additionalSupply, nftLevel);\r\n    }\r\n\r\n    // Remove card from this pool. for sometime do a mistake\r\n    function removeCard(uint256 cardId) external onlyOwner {\r\n        require(cardExists[cardId], \"Card with ID doesn't exist\");\r\n        NftLevel nftLevel = cardLevelWithId[cardId];\r\n        uint256 removedAmount = cardAmounWithId[cardId];\r\n        nftCardAmountOfLevel[nftLevel] = nftCardAmountOfLevel[nftLevel].sub(removedAmount);\r\n        delete cardExists[cardId];\r\n        delete cardAmounWithId[cardId];\r\n        cardLevelWithId[cardId] = NftLevel.Failed; // set this cardId be failed level\r\n        emit CardRemoved(cardId, removedAmount);\r\n    }\r\n\r\n    // Setup ETH amount for every Level.\r\n    function updateETHAmountOfLevel() public onlyOwner {\r\n        uint256 balance = weth.balanceOf(address(this));\r\n        // We need to account for the leftover dust amount\r\n        uint256 balanceLeftover = balance;\r\n\r\n        for (int256 i = 6; i >= 0; i--) {\r\n            NftLevel level = NftLevel(i);\r\n            if (i != 0) {\r\n                uint256 amountForLevel = balance.mul(nftRatio[level]).div(100);\r\n                ethAmountOfLevel[level] = amountForLevel;\r\n                balanceLeftover = balanceLeftover.sub(amountForLevel);\r\n            } else {\r\n                // Add leftover balance (amountForLevel[0] + dust) to the highest level NFT\r\n                ethAmountOfLevel[level] = balanceLeftover;\r\n            }\r\n            emit SetupRarityLevel(level, ethAmountOfLevel[level], nftRatio[level], azukiBurnAmountOfLevel[level]);\r\n        }\r\n    }\r\n\r\n    // Get rarity of every card.\r\n    function rarity(uint256 cardId) view public returns(uint256) {\r\n        NftLevel nftLevel = cardLevelWithId[cardId];\r\n        uint256 cardAmountOfLevel = nftCardAmountOfLevel[nftLevel];\r\n        if (cardAmountOfLevel == 0) {\r\n            return 0;\r\n        }\r\n        return ethAmountOfLevel[nftLevel].div(cardAmountOfLevel);\r\n    }\r\n\r\n    // unbind cards.\r\n    function melt(uint256 cardId, uint256 count) external onlyHuman returns(bool) {\r\n        require(isStarted, \"Not started\");\r\n        require(count <= 10, \"Melting too many cards\");\r\n        require(cardAmounWithId[cardId] >= count, \"Not enough cards available\");\r\n\r\n        // 1. first transfer cards to this pool.\r\n        momiji.safeTransferFrom(msg.sender, address(this), cardId, count, \"nfts melt\");\r\n\r\n        // 2. Get level of this cardId\r\n        NftLevel level = cardLevelWithId[cardId];\r\n        if (level == NftLevel.Failed) {\r\n            // (1) update card amounf of this Level.\r\n            nftCardAmountOfLevel[level] = nftCardAmountOfLevel[level].sub(count);\r\n            // (2) update card amounf of this tokenId.\r\n            cardAmounWithId[cardId] = cardAmounWithId[cardId].sub(count);\r\n            emit Melt(msg.sender, cardId, count, azukiBurnAmountOfLevel[NftLevel.Failed], 0, 0);\r\n            return false;\r\n        }\r\n\r\n        // 3.Get azuki total burn amount of these cards\r\n        uint256 azukiBurnAmountOfPerToken = azukiBurnAmountOfLevel[level];\r\n        uint256 totalAmountOfAzukiNeedToBurn = count.mul(azukiBurnAmountOfPerToken);\r\n        // 4. transfer AZUKI token to azuki burn account.\r\n        azuki.safeTransferFrom(msg.sender, auzkiBurnAccount, totalAmountOfAzukiNeedToBurn);\r\n\r\n        uint256 forUserAmount = 0;\r\n        uint256 forDokibuybackAmount = 0;\r\n\r\n        // 4. Start to calculate the amount of ETH which user can get.\r\n        for (uint256 i = 0; i < count; i ++) {\r\n            // (1) get rarity of this card. after every round the rarity will be changed\r\n            uint256 rarityOfThisCard = rarity(cardId);\r\n            // (2) update eth amount of this level.\r\n            ethAmountOfLevel[level] = ethAmountOfLevel[level].sub(rarityOfThisCard);\r\n            // (3) update card amounf of this Level.\r\n            nftCardAmountOfLevel[level] = nftCardAmountOfLevel[level].sub(1);\r\n            // (4) update card amounf of this tokenId.\r\n            cardAmounWithId[cardId] = cardAmounWithId[cardId].sub(1);\r\n\r\n            // 85% of rarity of this card will go to User.\r\n            uint256 forUserAmountRound = rarityOfThisCard.mul(85).div(100);\r\n            forUserAmount = forUserAmount.add(forUserAmountRound);\r\n            // 5% will go to doki buyback account.\r\n            uint256 forDokibuybackAmountRound = rarityOfThisCard.mul(5).div(100);\r\n            forDokibuybackAmount = forDokibuybackAmount.add(forDokibuybackAmountRound);\r\n            // 10% (+ dust) will go back to this pool.\r\n            uint256 backAmount = rarityOfThisCard.sub(forUserAmountRound).sub(forDokibuybackAmountRound);\r\n            // (5) update the rarity of cards in this pool.\r\n            _updateETHAmountOfLevel(backAmount);\r\n        }\r\n\r\n        weth.safeTransfer(msg.sender, forUserAmount);\r\n        weth.safeTransfer(dokiBuybackAccount, forDokibuybackAmount);\r\n        emit Melt(msg.sender, cardId, count, totalAmountOfAzukiNeedToBurn, forUserAmount, forDokibuybackAmount);\r\n        return true;\r\n    }\r\n\r\n    //  update the rarity of cards in this pool with back amount\r\n    function _updateETHAmountOfLevel(uint256 amount) private {\r\n        // All ETH needs to be accounted for.\r\n        uint256 recycleETHAmount = amount;\r\n        // check if there is cardAmount = 0 of every level.\r\n        uint256 cardAmountNotEqual0LevelCount = 6;\r\n        // round 6 times and we don't need to update Failed level.\r\n        for (uint256 i = 0; i < 6; i++) {\r\n            NftLevel level = NftLevel(i);\r\n            // Re-add ETH to each level in Ratio\r\n            uint256 amountForLevel = amount.mul(nftRatio[level]).div(100);\r\n            // Check if any amount left\r\n            if (nftCardAmountOfLevel[level] == 0) {\r\n                // recycle any leftover ETH\r\n                recycleETHAmount = recycleETHAmount.add(ethAmountOfLevel[level]);\r\n                // set the eth amounf of this level to be 0.\r\n                ethAmountOfLevel[level] = 0;\r\n                // cardAmountNotEqual0LevelCount - 1\r\n                cardAmountNotEqual0LevelCount = cardAmountNotEqual0LevelCount.sub(1);\r\n            } else {\r\n                 recycleETHAmount = recycleETHAmount.sub(amountForLevel);\r\n                 ethAmountOfLevel[level] = ethAmountOfLevel[level].add(amountForLevel);\r\n            }\r\n        }\r\n\r\n        // Exit if we don't need to recycle\r\n        if (recycleETHAmount == 0) {\r\n            return;\r\n        }\r\n\r\n        // if card amount of every level is 0. send all of ETH to user.\r\n        if (cardAmountNotEqual0LevelCount == 0) {\r\n            weth.safeTransfer(msg.sender, recycleETHAmount);\r\n        } else {\r\n            // if there is some levels with 0 card. re-add the recycle ETH amount to other levels.\r\n            uint256 averageETHAmount = recycleETHAmount.div(cardAmountNotEqual0LevelCount);\r\n            // This dust ETH needs to be accounted for.\r\n            uint256 recycleETHAmountDust = recycleETHAmount.sub(averageETHAmount.mul(cardAmountNotEqual0LevelCount));\r\n            for (uint256 i = 0; i < 6; i++) {\r\n                NftLevel level = NftLevel(i);\r\n                if (nftCardAmountOfLevel[level] != 0) {\r\n                    ethAmountOfLevel[level] = ethAmountOfLevel[level].add(averageETHAmount);\r\n                    // We recycle the dustETHAmount to the first applicable level\r\n                    if (recycleETHAmountDust > 0) {\r\n                        ethAmountOfLevel[level] = ethAmountOfLevel[level].add(recycleETHAmountDust);\r\n                        recycleETHAmountDust = 0;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function emergencyWithdraw() external onlyOwner {\r\n        uint256 balance = weth.balanceOf(address(this));\r\n        weth.safeTransfer(owner(), balance);\r\n        updateETHAmountOfLevel();\r\n    }\r\n\r\n    function changeBuybackAccount(address account) external onlyOwner {\r\n        require(account != address(0), \"Account is zero address\");\r\n        dokiBuybackAccount = account;\r\n    }\r\n\r\n    function changeAzukiBurnAccount(address account) external onlyOwner {\r\n        require(account != address(0), \"Account is zero address\");\r\n        auzkiBurnAccount = account;\r\n    }\r\n\r\n    // change the ratio of every Level. maybe we don't need to call this function.\r\n    function changeAzukiBurnAmountOfLevel(\r\n        uint256 _forLegendary,\r\n        uint256 _forEthereal,\r\n        uint256 _forMythic,\r\n        uint256 _forRare,\r\n        uint256 _forCommon,\r\n        uint256 _forSecret\r\n        ) external onlyOwner {\r\n        azukiBurnAmountOfLevel[NftLevel.Legendary] = _forLegendary;\r\n        azukiBurnAmountOfLevel[NftLevel.Ethereal] = _forEthereal;\r\n        azukiBurnAmountOfLevel[NftLevel.Mythic] = _forMythic;\r\n        azukiBurnAmountOfLevel[NftLevel.Rare] = _forRare;\r\n        azukiBurnAmountOfLevel[NftLevel.Common] = _forCommon;\r\n        azukiBurnAmountOfLevel[NftLevel.Secret] = _forSecret;\r\n        emit ChangeAzukiPriceForMelt(_forLegendary, _forEthereal, _forMythic, _forRare, _forCommon, _forSecret);\r\n    }\r\n\r\n    function start() external onlyOwner {\r\n        require(!isStarted, \"Already started\");\r\n        isStarted = true;\r\n    }\r\n\r\n    function emergencyStop() external onlyOwner {\r\n        require(isStarted, \"Not started\");\r\n        isStarted = false;\r\n    }\r\n\r\n    modifier onlyHuman() {\r\n        require(tx.origin == msg.sender, \"Sender not human\");\r\n        _;\r\n    }\r\n}\r\n", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_azuki\",\"type\":\"address\"},{\"internalType\":\"contract IMomijiToken\",\"name\":\"_momiji\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"additionalSupply\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum ChainbindersMelt.NftLevel\",\"name\":\"nftLevel\",\"type\":\"uint8\"}],\"name\":\"CardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"removedAmount\",\"type\":\"uint256\"}],\"name\":\"CardRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"forLegendary\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"forEthereal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"forMythic\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"forRare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"forCommon\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"forSecret\",\"type\":\"uint256\"}],\"name\":\"ChangeAzukiPriceForMelt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"azukiBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"forUserAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"forDokibuybackAmount\",\"type\":\"uint256\"}],\"name\":\"Melt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum ChainbindersMelt.NftLevel\",\"name\":\"nftLevel\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmountOfLevel\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"azukiRequiredForMelt\",\"type\":\"uint256\"}],\"name\":\"SetupRarityLevel\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"additionalSupply\",\"type\":\"uint256\"},{\"internalType\":\"enum ChainbindersMelt.NftLevel\",\"name\":\"nftLevel\",\"type\":\"uint8\"}],\"name\":\"addCard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auzkiBurnAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"azuki\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ChainbindersMelt.NftLevel\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"azukiBurnAmountOfLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardAmounWithId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardLevelWithId\",\"outputs\":[{\"internalType\":\"enum ChainbindersMelt.NftLevel\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"changeAzukiBurnAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_forLegendary\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_forEthereal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_forMythic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_forRare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_forCommon\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_forSecret\",\"type\":\"uint256\"}],\"name\":\"changeAzukiBurnAmountOfLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"changeBuybackAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dokiBuybackAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyStop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ChainbindersMelt.NftLevel\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"ethAmountOfLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"melt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"momiji\",\"outputs\":[{\"internalType\":\"contract IMomijiToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ChainbindersMelt.NftLevel\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"nftCardAmountOfLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ChainbindersMelt.NftLevel\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"nftRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"rarity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"removeCard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateETHAmountOfLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ChainbindersMelt", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000007cdc0421469398e0f3aa8890693d86c840ac89310000000000000000000000002d0d9b4075e231bff33141d69df49ffcf3be7642", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}