{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IGameControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IGameControl {\\n    function getDay() external view returns (uint);\\n\\n    function dayRecordMintPool(uint) external view returns (uint);\\n    function dayWeightTotal(uint) external view returns (uint);\\n    function dayUserWeightTotal(uint, address) external view returns (uint);\\n\\n    function userJoinedMark(address _addr) external view returns (bool);\\n    /**\\n        only caller\\n     */\\n    function poolOutcome(uint _uid, uint _poolId, uint _bonus) external returns (uint);\\n\\n    function poolOutmint(uint _poolId, uint _amount) external;\\n\\n    function poolOutTxFee(uint _poolId, uint _amount) external;\\n\\n    function recordMintWeight(uint _uid, uint _weight) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IPMC.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IPMC is IERC20 {\\n\\n    function maxSupply() external view returns (uint);\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    function currentInnerSwapPrice() external view returns (uint);\\n\\n    function mintForSwap() external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IPMCSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IPMCSwap {\\n    function getDay() external view returns (uint);\\n    function recordDay() external view returns (uint);\\n    function dayRecordMintPool(uint _theDay) external view returns (uint);\\n\\n    function balanceOfPool() external view returns (uint);\\n\\n    function collectUserBal(address _user) external;\\n\\n    /**\\n        Only coin call\\n     */\\n    function setDayMintTotal(uint _day, uint _acutal) external;\\n    function addRecordPoolAmount(uint _bal) external;\\n    function updateRecordDay(uint _day) external;\\n}\"\r\n    },\r\n    \"contracts/PMCSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./interfaces/IPMC.sol\\\";\\nimport \\\"./interfaces/IPMCSwap.sol\\\";\\nimport \\\"./interfaces/IGameControl.sol\\\";\\n\\ncontract PMCSwap is IPMCSwap, Ownable {\\n\\n    IGameControl public gameControl;\\n    IPMC public pmc;\\n    uint256 public recordPoolAmount;\\n    uint public recordDay;\\n    \\n    mapping(address => uint) public lastWithdrawnDay;\\n    mapping(address => uint256) public userBalances;\\n    mapping(address => uint256) public recordWithdrawn;\\n    mapping(uint => uint256) public dayMintTotal;\\n    \\n    constructor(address _pmc) {\\n        pmc = IPMC(_pmc);\\n    }\\n    \\n    receive() external payable {}\\n\\n    modifier onlyCoin() {\\n        require(msg.sender == address(pmc) || msg.sender == owner(), \\\"PMCSwap: Invalid PMC Coin caller\\\");\\n        _;\\n    }\\n    \\n    function setControl(address _control) external onlyOwner{\\n        gameControl = IGameControl(_control);\\n    }\\n    \\n    function setPmcCoin(address _coin) external onlyOwner{\\n        pmc = IPMC(_coin);\\n    }\\n    \\n    function balanceOfPool() public view returns (uint256) {\\n        return recordPoolAmount;\\n    }\\n\\n    function getDay() public view returns (uint256) {\\n        return gameControl.getDay();\\n    }\\n\\n    function dayRecordMintPool(uint _theDay) public view returns (uint256){\\n        return gameControl.dayRecordMintPool(_theDay);\\n    }\\n    \\n    function preAmount(uint256 tokenAmt, uint256 price) public pure returns (uint256){\\n        uint256 couldGet = tokenAmt * price / 1e18;\\n        uint256 fee = couldGet * 10 / 100;\\n        return couldGet - fee;\\n    }\\n    \\n    event EventSwapSell(address indexed addr, uint256 _amount);\\n    \\n    function swapSell(uint256 tokenAmount) external {\\n        uint256 price = pmc.currentInnerSwapPrice();\\n        require(price > 0, \\\"Swap inner is unsupport\\\");\\n        require(tokenAmount > 0 && tokenAmount <= pmc.balanceOf(msg.sender), \\\"Insufficient swap amount\\\");\\n        uint256 getAmt = preAmount(tokenAmount, price);\\n        require(recordPoolAmount > getAmt && recordPoolAmount - getAmt > 0, \\\"Insufficient pool\\\");\\n        require(address(this).balance >= getAmt, \\\"Insufficient pool balance\\\");\\n        pmc.burnFrom(msg.sender, tokenAmount);\\n        unchecked {\\n            recordPoolAmount -= getAmt;\\n        }\\n        payable(msg.sender).transfer(getAmt);\\n        emit EventSwapSell(msg.sender, tokenAmount);\\n    }\\n    \\n\\n    function setDayMintTotal(uint _day, uint _acutal) external onlyCoin {\\n        dayMintTotal[_day] = _acutal;\\n    }\\n\\n    function addRecordPoolAmount(uint _bal) external onlyCoin {\\n        unchecked {\\n            recordPoolAmount += _bal;\\n        }\\n    }\\n\\n    function updateRecordDay(uint _day) external onlyCoin {\\n        recordDay = _day;\\n    }\\n    \\n    function lastDayOfUserInvested(address user, uint theDay) public view returns (uint256 userAmount, uint256 totalAmount) {\\n        userAmount = gameControl.dayUserWeightTotal(theDay, user);\\n        totalAmount = gameControl.dayWeightTotal(theDay);\\n    }\\n    \\n    function userTokenRate(address user, uint _theDay) public view returns (uint256) {\\n        (uint256 userAmt, uint256 totalAmt) = lastDayOfUserInvested(user, _theDay);\\n        if (userAmt == 0 || totalAmt == 0) {\\n            return 0;\\n        }\\n        return dayMintTotal[_theDay] * userAmt / totalAmt;\\n    }\\n    \\n    function userWithdrawal(address user) public view returns (uint256){\\n        uint256 userAvaAmt = userBalances[user];\\n        if( userAvaAmt > 0 ){\\n            return userAvaAmt > recordWithdrawn[user] ? userAvaAmt - recordWithdrawn[user] : 0;\\n        } else {\\n            return 0;\\n        }\\n    }\\n    \\n    event EventMintCoin(address indexed addr, uint indexed day, uint256 amount);\\n    \\n    function publicMintCoin(address _addr) public {\\n        pmc.mintForSwap();\\n        uint256 userNum = userWithdrawal(_addr);\\n        require(userNum > 0, \\\"Insufficient withdrawal\\\");\\n        require(pmc.balanceOf(address(this)) >= userNum, \\\"Insufficient this token\\\");\\n        unchecked {\\n            recordWithdrawn[_addr] += userNum;\\n        }\\n        pmc.transfer(_addr, userNum);\\n        emit EventMintCoin(_addr, recordDay, userNum);\\n    }\\n    \\n    event EventCollectUserBal(address indexed addr, uint indexed day, uint256 amount);\\n    \\n    function collectUserBal(address _addr) external {\\n        pmc.mintForSwap();\\n        uint userLastDay = lastWithdrawnDay[_addr];\\n        if (userLastDay < recordDay) {\\n            uint256 _userAmount = userTokenRate(_addr, userLastDay);\\n            unchecked {\\n                userBalances[_addr] += _userAmount;\\n            }\\n            lastWithdrawnDay[_addr] = recordDay;\\n            emit EventCollectUserBal(_addr, recordDay, _userAmount);\\n        }\\n    }\\n    \\n    /**\\n        Mint PMC\\n    */\\n    function mintCoin() external payable {\\n        publicMintCoin(msg.sender);\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pmc\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EventCollectUserBal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EventMintCoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"EventSwapSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bal\",\"type\":\"uint256\"}],\"name\":\"addRecordPoolAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"collectUserBal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dayMintTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_theDay\",\"type\":\"uint256\"}],\"name\":\"dayRecordMintPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameControl\",\"outputs\":[{\"internalType\":\"contract IGameControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"theDay\",\"type\":\"uint256\"}],\"name\":\"lastDayOfUserInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastWithdrawnDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintCoin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pmc\",\"outputs\":[{\"internalType\":\"contract IPMC\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"preAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"publicMintCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recordDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recordPoolAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"recordWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_control\",\"type\":\"address\"}],\"name\":\"setControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_acutal\",\"type\":\"uint256\"}],\"name\":\"setDayMintTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coin\",\"type\":\"address\"}],\"name\":\"setPmcCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"swapSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"updateRecordDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_theDay\",\"type\":\"uint256\"}],\"name\":\"userTokenRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PMCSwap", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000e44db3d3a184988e381e0cce5f941eb25ade4f60", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}