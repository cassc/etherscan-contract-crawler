{"SourceCode": "// SPDX-License-Identifier: MIT\r\n    pragma solidity ^0.8.0;\r\n\r\n    /*\r\n    * @dev Provides information about the current execution context, including the\r\n    * sender of the transaction and its data. While these are generally available\r\n    * via msg.sender and msg.data, they should not be accessed in such a direct\r\n    * manner, since when dealing with GSN meta-transactions the account sending and\r\n    * paying for execution may not be the actual sender (as far as an application\r\n    * is concerned).\r\n    *\r\n    * This contract is only required for intermediate, library-like contracts.\r\n    */\r\n    contract Context {\r\n        // Empty internal constructor, to prevent people from mistakenly deploying\r\n        // an instance of this contract, which should be used via inheritance.\r\n        constructor () { }\r\n        // solhint-disable-previous-line no-empty-blocks\r\n\r\n        function _msgSender() internal view returns (address )  {\r\n            return msg.sender;\r\n        }\r\n\r\n        function _msgData() internal view returns (bytes memory) {\r\n            this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n            return msg.data;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /**\r\n    * @dev Contract module which provides a basic access control mechanism, where\r\n    * there is an account (an owner) that can be granted exclusive access to\r\n    * specific functions.\r\n    *\r\n    * This module is used through inheritance. It will make available the modifier\r\n    * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n    * the owner.\r\n    */\r\n    contract Ownable is Context {\r\n        address private _owner;\r\n\r\n        event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n        /**\r\n        * @dev Initializes the contract setting the deployer as the initial owner.\r\n        */\r\n        constructor () {\r\n            address msgSender = _msgSender();\r\n            _owner = msgSender;\r\n            emit OwnershipTransferred(address(0), msgSender);\r\n        }\r\n\r\n        /**\r\n        * @dev Returns the address of the current owner.\r\n        */\r\n        function owner() public view returns (address) {\r\n            return _owner;\r\n        }\r\n\r\n        /**\r\n        * @dev Throws if called by any account other than the owner.\r\n        */\r\n        modifier onlyOwner() {\r\n            require(isOwner(), \"Ownable: caller is not the owner\");\r\n            _;\r\n        }\r\n\r\n        /**\r\n        * @dev Returns true if the caller is the current owner.\r\n        */\r\n        function isOwner() public view returns (bool) {\r\n            return _msgSender() == _owner;\r\n        }\r\n\r\n\r\n        /**\r\n        * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n        * Can only be called by the current owner.\r\n        */\r\n        function transferOwnership(address newOwner) public onlyOwner {\r\n            _transferOwnership(newOwner);\r\n        }\r\n\r\n        /**\r\n        * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n        */\r\n        function _transferOwnership(address newOwner) internal {\r\n            require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n            emit OwnershipTransferred(_owner, newOwner);\r\n            _owner = newOwner;\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    /**\r\n    * @title TRUE Original version 2.0\r\n    * @notice Contract is not payable.\r\n    * Owner can add document tokens.\r\n    * This contact belongs to:\r\n    *\r\n    * ::  TRUE  ::\r\n    * :: VERIFY ::\r\n    * \r\n    *\r\n    */\r\n    contract TrueOriginal is Ownable {\r\n        \r\n        //Token struct\r\n        struct Token {\r\n            uint256     tokenId; \r\n            bytes32     tokenHash;\r\n            uint64      tokenExpires; \r\n            uint64      issuedOn;\r\n            string      tokenURI;\r\n        }\r\n        \r\n        //Array containing all token\r\n        mapping (uint256 => Token) tokens;\r\n    \r\n        //Holds the mapping for token ids\r\n        mapping (uint256 => bool) tokenIds;\r\n    \r\n        //Emit Event for new tokens\r\n        event NewToken(uint256 tokenId);\r\n        event TokenExists(uint256 tokenId);\r\n        \r\n        function _baseURI() internal view virtual returns (string memory) {\r\n            return 'https://meta.trueoriginal.com/';\r\n        }\r\n        \r\n    \r\n        function addToken(uint256 _tokenId, bytes32  _tokenHash, uint64 _tokenExpires, uint64 _issuedOn, string memory _tokenURI)  onlyOwner  public{ \r\n            if(!tokenIds[_tokenId]){\r\n                tokenIds[_tokenId] = true;\r\n                tokens[_tokenId] = Token(_tokenId,_tokenHash,_tokenExpires,_issuedOn,_tokenURI);\r\n                emit NewToken(_tokenId);\r\n            }else{\r\n                emit TokenExists(_tokenId);\r\n            }\r\n        }\r\n        \r\n    \r\n        function addManyTokens(uint256[] memory _tokenId, bytes32[] memory _tokenHash, uint64[] memory _tokenExpires, uint64[] memory _issuedOn, string[] memory _tokenURI)  onlyOwner  public{ \r\n            for (uint256 i = 0; i < _tokenId.length; i++) {\r\n            addToken(_tokenId[i],_tokenHash[i],_tokenExpires[i],_issuedOn[i],_tokenURI[i]);\r\n            } \r\n        }\r\n\r\n        \r\n        function getToken(uint256 _tokenId) public view returns (bytes32,uint64,uint64,string memory) {\r\n            require(tokenIds[_tokenId], \"getToken: _tokenId is not found\");\r\n            return (tokenHash(_tokenId),tokenExpires(_tokenId),tokenIssuedOn(_tokenId),tokenURI(_tokenId));\r\n        }\r\n        \r\n\r\n        function tokenURI(uint256 _tokenId) public view returns (string memory) {\r\n            require(tokenIds[_tokenId], \"getTokenURI: _tokenId is not found\");\r\n\r\n            string memory URI   = tokens[_tokenId].tokenURI;\r\n            string memory base  = _baseURI();\r\n\r\n            // If there is no base URI, return the token URI.\r\n            if (bytes(base).length == 0) {\r\n                return URI;\r\n            }\r\n            // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\r\n            if (bytes(URI).length > 0) {\r\n                return string(abi.encodePacked(base, URI));\r\n            }\r\n\r\n            return tokens[_tokenId].tokenURI;\r\n        }\r\n\r\n\r\n        \r\n        \r\n        function tokenHash(uint256 _tokenId) public view returns (bytes32) {\r\n            require(tokenIds[_tokenId], \"getTokenHash: _tokenId is not found\");\r\n            return tokens[_tokenId].tokenHash;\r\n        }\r\n        \r\n        function tokenExpires(uint256 _tokenId) public view returns (uint64) {\r\n            require(tokenIds[_tokenId], \"getTokenExpires: _tokenId is not found\");\r\n            return tokens[_tokenId].tokenExpires;\r\n        }\r\n        \r\n        function tokenIssuedOn(uint256 _tokenId) public view returns (uint64) {\r\n            require(tokenIds[_tokenId], \"getTokenIssuedOn: _tokenId is not found\");\r\n            return tokens[_tokenId].issuedOn;\r\n        }    \r\n    }", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NewToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenExists\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_tokenHash\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_tokenExpires\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_issuedOn\",\"type\":\"uint64[]\"},{\"internalType\":\"string[]\",\"name\":\"_tokenURI\",\"type\":\"string[]\"}],\"name\":\"addManyTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_tokenHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_tokenExpires\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_issuedOn\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenExpires\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenIssuedOn\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TrueOriginal", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ff98128a0ed717ab360868154efab5caab27e58ab3d89656c5ed4bbfc5696cdc"}