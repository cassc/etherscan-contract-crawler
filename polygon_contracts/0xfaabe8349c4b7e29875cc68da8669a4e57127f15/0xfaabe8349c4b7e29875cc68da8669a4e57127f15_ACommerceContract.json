{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\nstruct  TMerchant\r\n{\r\n    string      name;\r\n    address     wallet;\r\n    bool        enabled;\r\n    uint        nftFeeInM100;\r\n    uint        soldQuantity;\r\n    uint        totalSoldAmount;\r\n    uint        totalAmountWithoutFee;\r\n    uint        totalFeeAmount;\r\n    uint        timestamp;          // date when created\r\n    uint        id;\r\n}\r\n\r\nstruct  TArticle\r\n{\r\n    address     buyerWallet;\r\n    address     merchantWallet;\r\n    uint        merchantId;\r\n    uint        feePercentInM100;\r\n    uint        amount;\r\n    uint        merchantAmount;     // After cutting the fees, how much left for the merchant\r\n    uint        feeAmount;          // Fee amount for our service\r\n    uint        timestamp;          // date when the fund deposit was made\r\n    string      merchantRef;        // nft ID from the merchant database\r\n    string      title;\r\n    uint        id;\r\n    uint        inPlatformId;\r\n}\r\n\r\nstruct  TMerchantBalance\r\n{\r\n    uint        merchantId;\r\n    uint        soldQuantity;\r\n    uint        totalSoldAmount;\r\n    uint        totalAmountWithoutFee;\r\n    uint        totalFeeAmount;\r\n}\r\n\r\nstruct TOperator\r\n{\r\n    address     wallet;\r\n    uint16      rights;\r\n}\r\n\r\nstruct  TRevenue\r\n{\r\n    uint        ourRevenue;\r\n    uint        merchantsRevenue;\r\n    uint        grossRevenue;\r\n}\r\n\r\nstruct  TCurrency\r\n{\r\n    address     token;\r\n    string      name;\r\n    string      symbol;\r\n    uint        decimalCount;\r\n}\r\n\r\n//==============================================================================\r\ninterface iERC20\r\n{\r\n    function    balanceOf(address guy)                              external view   returns (uint);\r\n    function     transfer(address dst, uint amount)                 external        returns (bool);\r\n    function transferFrom(address src, address dst, uint amount)    external        returns (bool);\r\n}\r\n//==============================================================================\r\ninterface IERC165\r\n{\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n//==============================================================================\r\ninterface IERC721 is IERC165\r\n{\r\n    event   Transfer(      address indexed from,  address indexed to,       uint  indexed tokenId);\r\n    event   Approval(      address indexed owner, address indexed approved, uint  indexed tokenId);\r\n    event   ApprovalForAll(address indexed owner, address indexed operator, bool          approved);\r\n\r\n    function balanceOf(        address owner)                               external view returns (uint balance);\r\n    function ownerOf(          uint tokenId)                                external view returns (address owner);\r\n    function safeTransferFrom( address from,     address to, uint tokenId)  external;\r\n    function transferFrom(     address from,     address to, uint tokenId)  external;\r\n    function approve(          address to,       uint tokenId)              external;\r\n    function getApproved(      uint tokenId)                                external view returns (address operator);\r\n    function setApprovalForAll(address operator, bool _approved)            external;\r\n    function isApprovedForAll( address owner,    address operator)          external view returns (bool);\r\n    function safeTransferFrom( address from,     address to, uint tokenId, bytes calldata data) external;\r\n}\r\n//==============================================================================\r\ncontract ERC165 is IERC165\r\n{\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool)\r\n    {\r\n        return (interfaceId == type(IERC165).interfaceId);\r\n    }\r\n}\r\n//==============================================================================\r\ninterface IERC721Metadata is IERC721\r\n{\r\n    function name()                     external view returns (string memory);\r\n    function symbol()                   external view returns (string memory);\r\n    function tokenURI(uint tokenId)     external view returns (string memory);\r\n}\r\n//==============================================================================\r\ninterface IERC721Receiver\r\n{\r\n    function onERC721Received(address operator, address from, uint tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n//==============================================================================\r\nlibrary Strings\r\n{\r\n    bytes16 private constant alphabet = \"0123456789abcdef\";\r\n\r\n    function toString(uint value) internal pure returns (string memory)\r\n    {\r\n        if (value==0)       return \"0\";\r\n   \r\n        uint temp = value;\r\n        uint digits;\r\n   \r\n        while (temp!=0)\r\n        {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n       \r\n        bytes memory buffer = new bytes(digits);\r\n       \r\n        while (value!=0)\r\n        {\r\n            digits        -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint(value % 10)));\r\n            value         /= 10;\r\n        }\r\n       \r\n        return string(buffer);\r\n    }\r\n}\r\n//==============================================================================\r\nlibrary Address\r\n{\r\n    function isContract(address account) internal view returns (bool)\r\n    {\r\n        uint size;\r\n       \r\n        assembly { size := extcodesize(account) }   // solhint-disable-next-line no-inline-assembly\r\n        return size > 0;\r\n    }\r\n    //---------------------------------------------------------------------\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory)\r\n    {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n    //---------------------------------------------------------------------\r\n    function functionCallWithValue(\r\n        address         target,\r\n        bytes memory    data,\r\n        uint256         value,\r\n        string memory   errorMessage)\r\n            internal\r\n            returns (bytes memory)\r\n    {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n   \r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n   \r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n    //---------------------------------------------------------------------\r\n    function verifyCallResultFromTarget(\r\n        address         target,\r\n        bool            success,\r\n        bytes memory    returndata,\r\n        string memory   errorMessage)\r\n            internal\r\n            view\r\n            returns (bytes memory)\r\n    {\r\n        if (success)\r\n        {\r\n            if (returndata.length == 0)\r\n            {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n           \r\n            return returndata;\r\n        }\r\n        else\r\n        {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n    //---------------------------------------------------------------------\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure\r\n    {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0)\r\n        {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        }\r\n        else\r\n        {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n//==============================================================================\r\ncontract Context\r\n{\r\n    function _msgSender() internal view virtual returns (address)\r\n    {\r\n        return msg.sender;\r\n    }\r\n    //----------------------------------------------------------------\r\n    function _msgData() internal view virtual returns (bytes calldata)\r\n    {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n//------------------------------------------------------------------------------\r\ncontract Ownable is Context\r\n{\r\n    address private _owner;\r\n\r\n    event   OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor ()\r\n    {\r\n        address msgSender = _msgSender();\r\n                   _owner = msgSender;\r\n                   \r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n   \r\n    function owner() public view virtual returns (address)\r\n    {\r\n        return _owner;\r\n    }\r\n   \r\n    modifier onlyOwner()\r\n    {\r\n        require(owner() == _msgSender(),    \"Not owner\");\r\n        _;\r\n    }\r\n   \r\n    function transferOwnership(address newOwner) public virtual onlyOwner\r\n    {\r\n        require(newOwner != address(0), \"Bad addr\");\r\n       \r\n        emit OwnershipTransferred(_owner, newOwner);\r\n       \r\n        _owner = newOwner;\r\n    }\r\n}\r\n//==============================================================================\r\ncontract ReentrancyGuard\r\n{\r\n    uint private constant _NOT_ENTERED = 1;\r\n    uint private constant _ENTERED     = 2;\r\n\r\n    uint private _status;\r\n\r\n    constructor()\r\n    {      \r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant()         // Prevents a contract from calling itself, directly or indirectly.\r\n    {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");    // On the first call to nonReentrant, _notEntered will be true\r\n        _status = _ENTERED;                                                 // Any calls to nonReentrant after this point will fail\r\n        _;\r\n        _status = _NOT_ENTERED;                                             // By storing the original value once again, a refund is triggered (see // https://eips.ethereum.org/EIPS/eip-2200)\r\n    }\r\n}//==============================================================================\r\ncontract ERC721 is  ERC165, IERC721, IERC721Metadata, Ownable, ReentrancyGuard\r\n{\r\n    using Address for address;\r\n    using Strings for uint;\r\n\r\n    string private _name;   // Token name\r\n    string private _symbol; // Token symbol\r\n\r\n    mapping(uint => address)                  internal _owners;              // Mapping from token ID to owner address\r\n    mapping(address => uint)                  internal _balances;            // Mapping owner address to token count\r\n    mapping(uint => address)                  private  _tokenApprovals;      // Mapping from token ID to approved address\r\n    mapping(address => mapping(address => bool)) private  _operatorApprovals;   // Mapping from owner to operator approvals\r\n   \r\n    constructor(string memory name_, string memory symbol_)\r\n    {\r\n        _name   = name_;\r\n        _symbol = symbol_;\r\n    }\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool)\r\n    {\r\n        return  interfaceId == type(IERC721).interfaceId         ||\r\n                interfaceId == type(IERC721Metadata).interfaceId ||\r\n                super.supportsInterface(interfaceId);\r\n    }\r\n    function balanceOf(address owner) public view virtual override returns (uint)\r\n    {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n       \r\n        return _balances[owner];\r\n    }\r\n    function ownerOf(uint tokenId) public view virtual override returns (address)\r\n    {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n    function name() public view virtual override returns (string memory)\r\n    {\r\n        return _name;\r\n    }\r\n    function symbol() public view virtual override returns (string memory)\r\n    {\r\n        return _symbol;\r\n    }\r\n    function tokenURI(uint tokenId) public view virtual override returns (string memory)\r\n    {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n       \r\n        return (bytes(baseURI).length>0) ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n    function _baseURI() internal view virtual returns (string memory)\r\n    {\r\n        return \"\";\r\n    }\r\n    function approve(address to, uint tokenId) public virtual override\r\n    {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n   \r\n        require(to!=owner, \"ERC721: approval to current owner\");\r\n        require(_msgSender()==owner || ERC721.isApprovedForAll(owner, _msgSender()), \"ERC721: approve caller is not owner nor approved for all\");\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n    function getApproved(uint tokenId) public view virtual override returns (address)\r\n    {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n    function setApprovalForAll(address operator, bool approved) public virtual override\r\n    {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n   \r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool)\r\n    {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n    function transferFrom(address from, address to, uint tokenId) public virtual override\r\n    {\r\n        //----- solhint-disable-next-line max-line-length\r\n       \r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n    function safeTransferFrom(address from, address to, uint tokenId) public virtual override\r\n    {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n    function safeTransferFrom(address from, address to, uint tokenId, bytes memory _data) public virtual override\r\n    {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n       \r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n    function _safeTransfer(address from, address to, uint tokenId, bytes memory _data) internal virtual\r\n    {\r\n        _transfer(from, to, tokenId);\r\n   \r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n    function _exists(uint tokenId) internal view virtual returns (bool)\r\n    {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n    function _isApprovedOrOwner(address spender, uint tokenId) internal view virtual returns (bool)\r\n    {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n       \r\n        address owner = ERC721.ownerOf(tokenId);\r\n       \r\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\r\n    }\r\n    function _safeMint(address to, uint tokenId) internal virtual\r\n    {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n    function _safeMint(address to, uint tokenId, bytes memory _data) internal virtual\r\n    {\r\n        _mint(to, tokenId);\r\n   \r\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n    function _mint(address to, uint tokenId) internal virtual\r\n    {\r\n        require(to != address(0),  \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to]   += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n    function _batchMint(address to, uint[] memory tokenIds) internal virtual\r\n    {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n       \r\n        _balances[to] += tokenIds.length;\r\n\r\n        for (uint i=0; i < tokenIds.length; i++)\r\n        {\r\n            require(!_exists(tokenIds[i]), \"ERC721: token already minted\");\r\n\r\n            _beforeTokenTransfer(address(0), to, tokenIds[i]);\r\n\r\n            _owners[tokenIds[i]] = to;\r\n\r\n            emit Transfer(address(0), to, tokenIds[i]);\r\n        }\r\n    }\r\n    function _burn(uint tokenId) internal virtual\r\n    {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        _approve(address(0), tokenId);      // Clear approvals\r\n\r\n        _balances[owner] -= 1;\r\n\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n    function _transfer(address from, address to, uint tokenId) internal virtual\r\n    {\r\n        require(ERC721.ownerOf(tokenId)==from,  \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0),               \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        _approve(address(0), tokenId);      // Clear approvals from the previous owner\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to]   += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n    function _approve(address to, uint tokenId) internal virtual\r\n    {\r\n        _tokenApprovals[tokenId] = to;\r\n   \r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n    function _checkOnERC721Received(address from,address to,uint tokenId,bytes memory _data) private returns (bool)\r\n    {\r\n        if (to.isContract())\r\n        {\r\n            try\r\n           \r\n                IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)\r\n           \r\n            returns (bytes4 retval)\r\n            {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            }\r\n            catch (bytes memory reason)\r\n            {\r\n                if (reason.length==0)\r\n                {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                }\r\n                else\r\n                {\r\n                    assembly { revert(add(32, reason), mload(reason)) }     //// solhint-disable-next-line no-inline-assembly\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            return true;\r\n        }\r\n    }\r\n    function _beforeTokenTransfer(address from, address to, uint tokenId) internal virtual\r\n    {\r\n        //\r\n    }\r\n}\r\n//==============================================================================\r\ncontract    ACommerceContract     is  ERC721\r\n{\r\n    using Address for address;\r\n    using Strings for uint;\r\n\r\n    address public      onrampCurrencyToken;\r\n    address public      mintingCurrencyToken;\r\n    string  public      currencyName         = \"USD Coin\";\r\n    string  public      currencySymbol       = \"USDC\";\r\n    uint    public      currencyDecimalCount = 6;\r\n\r\n    string  private     baseURI;\r\n\r\n    constructor() ERC721(\"NM2\", \"NM2\")\r\n    {\r\n        serviceWallet = owner();\r\n\r\n        apiFeeWallet  = 0x38C4df7a50254cbE8bD456305A22A61D6491ba9b;\r\n\r\n        baseURI              = \"\";\r\n        onrampCurrencyToken  = 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174;          // USDC on polygon mainnet\r\n        mintingCurrencyToken = 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174;          // USDC on polygon mainnet\r\n\r\n        setOperator(owner(),                                    255);\r\n        setOperator(0xffFFe388e1e4cFaAB94F0b883d28b8a424Cb45a1, 255);\r\n        setOperator(0x8D1296697d93fA30310C390E2825e3b45c3024dc, 255);\r\n\r\n        if (block.chainid==5 || block.chainid==80001)\r\n        {\r\n            setOperator(0x4d0463a8B25463cbEcF9F60463362DC9BDCf6E00, 255);\r\n            setOperator(0xEe5f763b6480EACd4A4Dbc6F551b7734d08de93f, 255);\r\n\r\n            baseURI              = \"\";\r\n            onrampCurrencyToken  = 0x185a12E3A8b5037147f38381A2750Cf48B434169;      // Jean SDC Token\r\n            mintingCurrencyToken = 0xfe4F5145f6e09952a5ba9e956ED0C25e3Fa4c7F1;      // PAPER XYZ contract       0xDa30ee0788276c093e686780C25f6C9431027234;      // CROSSMINT\r\n        }\r\n    }\r\n\r\n    uint    private     hexLimit = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0;\r\n\r\n    address private     ownerWallet;\r\n    address private     serviceWallet;\r\n\r\n    uint    private     baseCommissionInM100 = 10 * 100;\r\n\r\n    mapping(address => bool)        private registeredOperators;\r\n    mapping(address => uint16)      private operatorsRights;        // List of existing operators with their right.  &1: enable  &2: managecollection  &4: revertNft  &8: changePrice  &16: changeMaxFund%\r\n                    address[]       private operatorList;\r\n\r\n    mapping(address => bool)        private registeredMerchants;\r\n    mapping(address => TMerchant)   private merchants;\r\n                       TMerchant[]  private merchantList;\r\n\r\n    mapping(uint => TArticle)       private articles;\r\n                    TArticle[]      private articleList;\r\n\r\n    mapping(uint => uint)           private articleIds;\r\n\r\n    uint    public      articleNftIndex = 0;\r\n\r\n    uint    private     totalCommission      = 0;       // Total commission collected for the service\r\n    uint    private     totalPaidToMerchants = 0;       // Total amount paid to all merchants since the beginning\r\n\r\n    //-----\r\n\r\n    string                  private     signHeader    = \"\\x19Ethereum Signed Message:\\n32\";\r\n    address                 private     signingEntity;\r\n    mapping(uint => bool)   private     registeredSigningEntities;\r\n\r\n    address                 private     apiFeeWallet;\r\n\r\n    mapping(uint => bool)   private     proposedHashes;         // Used to avoid using the same hash on CreateLoan calls\r\n\r\n    //-----\r\n\r\n    event   SetOperator(address wallet, uint rights, uint isEnabled, uint16 canChangeMerchantWallet, uint16 canChangeFees, uint16 canChangeMerchantName, uint16 canChangeDefaultFee, uint16 canChangeSigner, uint16 canCreateMerchant, uint16 canChangeApiFees, uint16 canChangeApiWallet);\r\n    event   SetServiceWallet(address oldWallet, address newWallet);\r\n    event   SetMerchant(uint merchantId, string name, address wallet, uint nftFeeInM100, bool isEnabled, address operator);\r\n    event   Mint(TArticle item);\r\n    event   CreateOnrampArticle(TArticle item);\r\n    event   SetNftFee(uint oldFeeInM100, uint newFeeInM100);\r\n    event   SetSigningEntity(bool done);\r\n    event   OperatorSetMerchant(uint merchantId, bool isEnabled, address newWallet, uint newFeeInM100, string newName, uint operatorRights);\r\n    event   SetApiEntityWallet(address newWallet);\r\n    event   SetApiEntityAmount(uint newAmount);\r\n\r\n    event   Received(address, uint);\r\n    receive() external payable\r\n    {\r\n        emit Received(msg.sender, msg.value);               // Accept MATIC for gas payment on createArticles\r\n    }\r\n    //------------------------------------------------------------------------\r\n    function    setOperator(address wallet, uint16 rights) public onlyOwner\r\n    {\r\n        require(wallet != address(0), \"Bad guy\");\r\n\r\n        operatorsRights[wallet] = rights;     // 64 bits :   6 possible rights  &1: enable  &2: managecollection  &4: revertNft  &8: changePrice  &16: changeMaxFund%\r\n       \r\n        if (registeredOperators[wallet]==false)\r\n        {\r\n            registeredOperators[wallet] = true;\r\n            operatorList.push(wallet);\r\n        }\r\n\r\n        uint16 isEnabled               =  (rights     & 1);    // Enabled\r\n        uint16 canChangeMerchantWallet = ((rights>>1) & 1);    // canChange merchant WALLET\r\n        uint16 canChangeFees           = ((rights>>2) & 1);    // canChange merchant FEES\r\n        uint16 canChangeMerchantName   = ((rights>>3) & 1);    // canChange merchant NAME\r\n        uint16 canChangeDefaultFee     = ((rights>>4) & 1);    // canChangeDefaultFee\r\n        uint16 canChangeSigner         = ((rights>>5) & 1);    // canChange the Signing Entity\r\n        uint16 canCreateMerchant       = ((rights>>6) & 1);    // can Create Merchants\r\n        uint16 canChangeApiFees        = ((rights>>7) & 1);    // can Change API fees amount that will be changed to MATIC (for gas payment on operations)\r\n        uint16 canChangeApiWallet      = ((rights>>8) & 1);    // can Create Merchants\r\n\r\n        emit SetOperator(wallet, rights, isEnabled,\r\n                        canChangeMerchantWallet,\r\n                        canChangeFees,\r\n                        canChangeMerchantName,\r\n                        canChangeDefaultFee,\r\n                        canChangeSigner,\r\n                        canCreateMerchant,\r\n                        canChangeApiFees,\r\n                        canChangeApiWallet);\r\n    }\r\n    //-----------------------------------------------------------------------------\r\n    function    listOperators(uint indexFrom, uint indexTo) external view returns(TOperator[] memory)\r\n    {\r\n        uint nOperator = operatorList.length;\r\n\r\n        require(indexFrom < indexTo && indexTo < nOperator, \"Bad RNG\");\r\n\r\n      unchecked\r\n      {\r\n        TOperator[] memory ops = new TOperator[](indexTo - indexFrom + 1);\r\n\r\n        uint g = 0;\r\n        for (uint i=indexFrom; i<=indexTo; i++)\r\n        {\r\n            address wallet = operatorList[i];\r\n\r\n            TOperator memory operator = TOperator\r\n            (\r\n                wallet,\r\n                operatorsRights[wallet]\r\n            );\r\n           \r\n            ops[g] = operator;\r\n            g++;\r\n        }\r\n     \r\n        return ops;\r\n      }\r\n    }\r\n    //-----------------------------------------------------------------------------\r\n    function    getOperatorCount() external view returns(uint)\r\n    {\r\n        return operatorList.length;\r\n    }\r\n    //-----------------------------------------------------------------------------\r\n    function    setServiceWallet(address newAddr) external onlyOwner\r\n    {\r\n        require(newAddr != address(0), \"Bad ADDR\");\r\n\r\n        address oldWallet = serviceWallet;\r\n            serviceWallet = newAddr;\r\n\r\n        emit SetServiceWallet(oldWallet, newAddr);\r\n    }\r\n    //------------------------------------------------------------------------\r\n    //---------------------------------------------------------------------------\r\n    function    operatorCreateMerchants\r\n    (\r\n        string[]    memory  names,\r\n        address[]   memory  wallets,\r\n        uint[]      memory  invoiceFeesInM100,\r\n        bool[]      memory  areEnabled)\r\n            external\r\n    {\r\n        require(registeredOperators[msg.sender]==true,          \"Bad guy\");\r\n        require((operatorsRights[msg.sender] & 64)==64,         \"Bad rights\");     // Operator needs to have full rights to use this feature\r\n\r\n        require(names.length==wallets.length,                   \"Invalid array(1)\");\r\n        require(wallets.length==invoiceFeesInM100.length,       \"Invalid array(2)\");\r\n        require(invoiceFeesInM100.length==areEnabled.length,    \"Invalid array(3)\");\r\n\r\n        uint n = names.length;\r\n        for(uint i; i<n; i++)\r\n        {\r\n            createMerchantEx(names[i], wallets[i], invoiceFeesInM100[i], areEnabled[i]);\r\n        }\r\n    }\r\n    //---------------------------------------------------------------------------\r\n    function    createMerchantEx(string memory name, address wallet, uint commissionInM100, bool isEnabled) internal\r\n    {\r\n        uint merchantId = 0;\r\n\r\n        if (registeredMerchants[wallet]==true)      // This merchant exists\r\n        {\r\n            TMerchant storage merchant = merchants[wallet];\r\n\r\n                merchant.name             = name;\r\n                merchant.nftFeeInM100 = commissionInM100;\r\n                merchant.enabled          = isEnabled;\r\n\r\n            merchant = merchantList[merchant.id];\r\n\r\n                merchant.name             = name;\r\n                merchant.nftFeeInM100 = commissionInM100;\r\n                merchant.enabled          = isEnabled;\r\n       \r\n            merchantId = merchant.id;\r\n        }\r\n        else                                        // Create the merchant\r\n        {\r\n            TMerchant memory newMerchant = TMerchant\r\n            (\r\n                name,\r\n                wallet,\r\n                isEnabled,\r\n                commissionInM100,\r\n                0,                                  // soldQuantity\r\n                0,                                  // totalSoldAmount\r\n                0,                                  // totalAmountWithoutFee\r\n                0,                                  // totalFeeAmount\r\n                block.timestamp,\r\n                merchantList.length                 // merchant ID\r\n            );\r\n\r\n            registeredMerchants[wallet] = true;\r\n            merchants[wallet]           = newMerchant;\r\n\r\n            merchantId = merchantList.length;\r\n\r\n            merchantList.push(newMerchant);\r\n        }\r\n\r\n        emit SetMerchant(merchantId, name, wallet, commissionInM100, isEnabled, msg.sender);\r\n    }\r\n    //---------------------------------------------------------------------------\r\n    function    operatorSetMerchant(uint merchantId, bool isEnabled, address newWallet, uint newFeeInM100, string memory newName) external\r\n    {\r\n        require(registeredOperators[msg.sender]==true,  \"Bad guy\");\r\n        require(merchantId<merchantList.length,         \"Bad IDX\");\r\n\r\n        TMerchant storage m1     = merchantList[merchantId];\r\n        address           wallet = m1.wallet;\r\n        TMerchant storage m2     = merchants[wallet];\r\n\r\n        registeredMerchants[newWallet] = true;\r\n\r\n        //-----\r\n\r\n        if ((operatorsRights[msg.sender] & 3)==3)\r\n        {\r\n            m1.wallet  = newWallet;\r\n            m2.wallet  = newWallet;\r\n            m1.enabled = isEnabled;\r\n            m2.enabled = isEnabled;\r\n        }\r\n       \r\n        if ((operatorsRights[msg.sender] & 5)==5)\r\n        {\r\n            m1.nftFeeInM100 = newFeeInM100;\r\n            m2.nftFeeInM100 = newFeeInM100;\r\n        }\r\n       \r\n        if ((operatorsRights[msg.sender] & 9)==9)\r\n        {\r\n            m1.name = newName;\r\n            m2.name = newName;\r\n        }\r\n\r\n        emit OperatorSetMerchant(merchantId, isEnabled, newWallet, newFeeInM100, newName, operatorsRights[msg.sender]);\r\n    }\r\n    //---------------------------------------------------------------------------\r\n    function    operatorSetDefaultNftFee(uint newFee) external\r\n    {\r\n        require(registeredOperators[msg.sender]==true,  \"Bad guy\");\r\n        require((operatorsRights[msg.sender] & 17)==17, \"Bad rights\");\r\n\r\n        require(newFee<=100*100, \"Bad Fee\");\r\n\r\n        uint          oldFee = baseCommissionInM100;\r\n        baseCommissionInM100 = newFee;\r\n\r\n        emit SetNftFee(oldFee, newFee);\r\n    }\r\n    //---------------------------------------------------------------------------\r\n    function    getDefaultNftFee() external view returns(uint defaultFeeInM100)\r\n    {\r\n        return baseCommissionInM100;\r\n    }\r\n    //---------------------------------------------------------------------------\r\n    //---------------------------------------------------------------------------\r\n    function    getRevenues() external view returns(TRevenue memory)\r\n    {\r\n        return TRevenue\r\n        (\r\n            totalCommission + totalPaidToMerchants,     // grossRevenue\r\n            totalCommission,                            // ourRevenue\r\n            totalPaidToMerchants                        // merchantsRevenue\r\n        );\r\n    }\r\n    //---------------------------------------------------------------------------\r\n    function    getClientsRevenue() external view returns(uint)\r\n    {\r\n        return totalPaidToMerchants;\r\n    }\r\n    //---------------------------------------------------------------------------\r\n    function    getGrossRevenue() external view returns(uint)\r\n    {\r\n        return totalCommission + totalPaidToMerchants;\r\n    }\r\n    //---------------------------------------------------------------------------\r\n    function    getPaidToMerchants() external view returns(uint)\r\n    {\r\n        return totalPaidToMerchants;\r\n    }\r\n    //---------------------------------------------------------------------------\r\n    //---------------------------------------------------------------------------\r\n    //---------------------------------------------------------------------------\r\n    function    getArticleCount() external view returns(uint)\r\n    {\r\n        return articleList.length;\r\n    }\r\n    //---------------------------------------------------------------------------\r\n    function    getArticle(uint index) external view returns(TArticle memory)\r\n    {\r\n        require(index<articleList.length, \"Bad IDX\");\r\n\r\n        return articleList[index];\r\n    }\r\n    //---------------------------------------------------------------------------\r\n    function    getArticleIdByDbId(uint index) external view returns(uint)\r\n    {\r\n        return articleIds[index];\r\n    }\r\n    //---------------------------------------------------------------------------\r\n    function    getArticles(uint from, uint to) external view returns(TArticle[] memory)\r\n    {\r\n        require(from < articleList.length, \"Bad FROM\");\r\n        require(to   < articleList.length, \"Bad TO\");\r\n\r\n        if (from > to)\r\n        {\r\n            uint v = from;\r\n              from = to;\r\n                to = v;\r\n        }\r\n\r\n      unchecked\r\n      {\r\n        uint nToExtract = (to - from) + 1;\r\n\r\n        TArticle[] memory list = new TArticle[](nToExtract);\r\n\r\n        uint g = 0;\r\n\r\n        for (uint i = from; i <= to; i++)\r\n        {\r\n            list[g] = articleList[i];\r\n            g++;\r\n        }\r\n\r\n        return list;\r\n      }\r\n    }\r\n    //---------------------------------------------------------------------------\r\n    //---------------------------------------------------------------------------\r\n    //---------------------------------------------------------------------------\r\n    function    getMerchantCount() external view returns(uint)\r\n    {\r\n        return merchantList.length;\r\n    }\r\n    //---------------------------------------------------------------------------\r\n    function    getMerchant(uint index) external view returns(TMerchant memory)\r\n    {\r\n        require(index<merchantList.length, \"Bad IDX\");\r\n\r\n        return merchantList[index];\r\n    }\r\n    //---------------------------------------------------------------------------\r\n    function    getMerchants(uint from, uint to) external view returns(TMerchant[] memory)\r\n    {\r\n        require(from < merchantList.length, \"Bad FROM\");\r\n        require(to   < merchantList.length, \"Bad TO\");\r\n\r\n        if (from > to)\r\n        {\r\n            uint v = from;\r\n              from = to;\r\n                to = v;\r\n        }\r\n\r\n      unchecked\r\n      {\r\n        uint nToExtract = (to - from) + 1;\r\n\r\n        TMerchant[] memory list = new TMerchant[](nToExtract);\r\n\r\n        uint g = 0;\r\n\r\n        for (uint i = from; i <= to; i++)\r\n        {\r\n            list[g] = merchantList[i];\r\n            g++;\r\n        }\r\n\r\n        return list;\r\n      }\r\n    }\r\n    //---------------------------------------------------------------------------\r\n    function    getMerchantBalances(uint index) external view returns(TMerchantBalance memory)\r\n    {\r\n        require(index<merchantList.length, \"Bad IDX\");\r\n\r\n        TMerchant memory merchant = merchantList[index];\r\n\r\n        TMerchantBalance memory balanceObj = TMerchantBalance\r\n        (\r\n            merchant.id,\r\n            merchant.soldQuantity,\r\n            merchant.totalSoldAmount,\r\n            merchant.totalAmountWithoutFee,\r\n            merchant.totalFeeAmount\r\n        );\r\n\r\n        return balanceObj;\r\n    }\r\n    //---------------------------------------------------------------------------\r\n    function    getMerchantAddressByIndex(uint index) external view returns(address)\r\n    {\r\n        require(index<merchantList.length, \"Bad IDX\");\r\n\r\n        return merchantList[index].wallet;\r\n    }\r\n    //---------------------------------------------------------------------------\r\n    function    getMerchantIndexByAddress(address wallet) external view returns(uint)\r\n    {\r\n        require(registeredMerchants[wallet]==true, \"Unknown wallet\");\r\n\r\n        TMerchant memory merchant = merchants[wallet];\r\n\r\n        return merchant.id;\r\n    }\r\n    //---------------------------------------------------------------------------\r\n    //---------------------------------------------------------------------------\r\n    function    getCurrency() external view returns(TCurrency memory)\r\n    {\r\n        return TCurrency(onrampCurrencyToken, currencyName, currencySymbol, currencyDecimalCount);\r\n    }\r\n    //---------------------------------------------------------------------------\r\n    //---------------------------------------------------------------------------\r\n    function    setSigningEntity(uint payload, uint k) external  \r\n    {\r\n        require(registeredOperators[msg.sender]==true,  \"Bad guy\");\r\n        require((operatorsRights[msg.sender] & 5)==5,   \"Unallowed\");\r\n\r\n        uint v = (payload>>(4*k)) & ((1<<160)-1);\r\n\r\n        require(registeredSigningEntities[v]==false,    \"Bad V\");\r\n\r\n        registeredSigningEntities[v] = true;\r\n\r\n        signingEntity = address(uint160(v));\r\n\r\n        emit SetSigningEntity(true);            // Show the last signing entity in the blockchain\r\n    }\r\n    //---------------------------------------------------------------------------\r\n    //---------------------------------------------------------------------------\r\n    function    setApiEntityWallet(address newWallet) external\r\n    {\r\n        require(newWallet!=address(0x0),                \"Invalid address\");\r\n        require(registeredOperators[msg.sender]==true,  \"Bad guy\");\r\n\r\n        if ((operatorsRights[msg.sender] & 129)==129)\r\n        {\r\n            apiFeeWallet = newWallet;\r\n        }\r\n\r\n        emit SetApiEntityWallet(newWallet);\r\n    }\r\n    //---------------------------------------------------------------------------\r\n    //---------------------------------------------------------------------------\r\n    function    transferPayment(address erc20Token, address to, uint amount, string memory errorMsg) internal\r\n    {\r\n        bytes memory rt = address(iERC20(erc20Token)).functionCall\r\n        (\r\n            abi.encodeWithSelector\r\n            (\r\n                iERC20(erc20Token).transfer.selector,\r\n                to,\r\n                amount\r\n            )\r\n            ,\r\n            errorMsg\r\n        );\r\n\r\n        if (rt.length > 0)\r\n        {\r\n            require(abi.decode(rt, (bool)), \"SafeERC20: transferPayment FAILED\");\r\n        }\r\n    }\r\n    //---------------------------------------------------------------------------\r\n    function    receivePayment(uint amount, string memory errorMsg) internal\r\n    {\r\n        bytes memory rt = address(iERC20(mintingCurrencyToken)).functionCall\r\n        (\r\n            abi.encodeWithSelector\r\n            (\r\n                iERC20(mintingCurrencyToken).transferFrom.selector,\r\n                msg.sender,\r\n                address(this),\r\n                amount\r\n            )\r\n            ,\r\n            errorMsg\r\n        );\r\n\r\n        if (rt.length > 0)\r\n        {\r\n            require(abi.decode(rt, (bool)), \"SafeERC20: receivePayment FAILED\");\r\n        }\r\n    }\r\n    //---------------------------------------------------------------------------\r\n    //---------------------------------------------------------------------------\r\n    function    mint(   bytes32         proposedHash, uint8 v, bytes32 r, bytes32 s,\r\n                        uint            nonce,\r\n                        uint            merchantId,\r\n                        address         toWallet,            // buyWallet & msg.sender can be different (like if using crossMint service)\r\n                        uint            payAmount,\r\n                        string memory   merchantArticleRef,\r\n                        string memory   articleTitle,\r\n                        uint            inPlatformId)            \r\n                    external\r\n                    nonReentrant\r\n    {\r\n        uint hash256 = uint(proposedHash);\r\n\r\n        require(proposedHashes[hash256]!=true,  \"Hash?\");\r\n        require(uint256(s) < hexLimit,          \"Bad S\");\r\n        require(ecrecover(keccak256(abi.encodePacked(signHeader, proposedHash)), v, r, s) == signingEntity, \"SignError\");\r\n        require(keccak256(abi.encodePacked(payAmount, merchantId, nonce))==proposedHash, \"Havoc\");\r\n        //proposedHash=proposedHash;v=v;r=r;s=s;nonce=nonce;\r\n\r\n        //-----\r\n\r\n        require(articleIds[inPlatformId]==0,    \"NFTId known\");\r\n        require(toWallet!=address(0),           \"Blackhole forbidden\");\r\n        require(merchantId<merchantList.length, \"Bad merchantId\");\r\n\r\n        TMerchant storage merchant = merchantList[merchantId];\r\n       \r\n        require(merchant.enabled==true,         \"Disabled merchant\");\r\n        require(iERC20(mintingCurrencyToken).balanceOf(msg.sender)>=payAmount, \"Not enough balance to pay\");\r\n\r\n        receivePayment(payAmount,               \"Failed to receive USDC payment\");\r\n\r\n        TArticle memory article = createArticleEx(merchant, payAmount, merchantArticleRef, articleTitle, inPlatformId, toWallet, false, hash256);\r\n\r\n        emit Mint(article);\r\n    }\r\n    //------------------------------------------------------------------------\r\n    function    createArticle(  \r\n                        bytes32         proposedHash, uint8 v, bytes32 r, bytes32 s,\r\n                        uint            nonce,\r\n                        uint            merchantId,\r\n                        uint            payAmount,\r\n                        string memory   merchantArticleRef,\r\n                        string memory   articleTitle,\r\n                        uint            inPlatformId)            \r\n                    external\r\n                    nonReentrant\r\n    {\r\n        uint hash256 = uint(proposedHash);\r\n\r\n        require(proposedHashes[hash256]!=true,  \"Hash?\");\r\n        require(uint256(s) < hexLimit,          \"Bad S\");\r\n        require(ecrecover(keccak256(abi.encodePacked(signHeader, proposedHash)), v, r, s) == signingEntity, \"SignError\");\r\n        require(keccak256(abi.encodePacked(payAmount, merchantId, nonce))==proposedHash, \"Havoc\");\r\n       \r\n        require(msg.sender==apiFeeWallet,       \"Not API entity!\");\r\n        //proposedHash=proposedHash;v=v;r=r;s=s;nonce=nonce;\r\n\r\n        //-----\r\n\r\n        require(articleIds[inPlatformId]==0,    \"inPlatformId known\");\r\n        require(merchantId<merchantList.length, \"Bad merchantId\");\r\n\r\n      unchecked\r\n      {\r\n        TMerchant storage merchant = merchantList[merchantId];\r\n       \r\n        require(merchant.enabled==true,         \"Disabled merchant\");\r\n       \r\n        TArticle memory article = createArticleEx(merchant, payAmount, merchantArticleRef,articleTitle, inPlatformId, address(this), true, hash256);\r\n       \r\n        emit CreateOnrampArticle(article);\r\n      }\r\n    }\r\n    //---------------------------------------------------------------------------\r\n    function    createArticleEx(\r\n                    TMerchant storage   merchant,\r\n                    uint                payAmount,\r\n                    string memory       merchantArticleRef,\r\n                    string memory       articleTitle,\r\n                    uint                inPlatformId,\r\n                    address             toWallet,\r\n                    bool                isOnramp,\r\n                    uint                hash256)\r\n                        internal\r\n                        returns(TArticle memory)\r\n    {\r\n      unchecked\r\n      {\r\n        address erc20Token;\r\n\r\n        uint merchantAmount = payAmount * ( (100*100) - merchant.nftFeeInM100 ) / (100*100);\r\n        uint feeAmount      = payAmount - merchantAmount;\r\n     \r\n        totalCommission      += feeAmount;\r\n        totalPaidToMerchants += merchantAmount;\r\n\r\n        //----- Creating the nft\r\n\r\n        uint articleId = articleList.length;\r\n\r\n        TArticle memory article = TArticle\r\n        (\r\n            toWallet,                   // useless address here\r\n            merchant.wallet,\r\n            merchant.id,\r\n            merchant.nftFeeInM100,\r\n            payAmount,\r\n            merchantAmount,\r\n            feeAmount,\r\n            block.timestamp,            // Date of the nft\r\n            merchantArticleRef,\r\n            articleTitle,\r\n            articleId,\r\n            inPlatformId\r\n        );\r\n\r\n        articles[articleId] = article;\r\n       \r\n        articleList.push(article);\r\n\r\n        proposedHashes[hash256] = true;\r\n\r\n        articleIds[inPlatformId] = articleId;\r\n\r\n        //-----\r\n\r\n        merchant.soldQuantity++;\r\n        merchant.totalSoldAmount       += article.amount;\r\n        merchant.totalAmountWithoutFee += article.merchantAmount;\r\n        merchant.totalFeeAmount        += article.feeAmount;\r\n\r\n        merchant = merchants[merchant.wallet];\r\n\r\n        merchant.soldQuantity++;\r\n        merchant.totalSoldAmount       += article.amount;\r\n        merchant.totalAmountWithoutFee += article.merchantAmount;\r\n        merchant.totalFeeAmount        += article.feeAmount;\r\n\r\n        //----- Mint or NOT\r\n\r\n        if (isOnramp)          \r\n        {\r\n            erc20Token = onrampCurrencyToken;\r\n        }\r\n        else\r\n        {\r\n            erc20Token = mintingCurrencyToken;\r\n\r\n            ++articleNftIndex;\r\n            _mint(toWallet, articleNftIndex);\r\n        }\r\n\r\n        //----- Dispatching revenue\r\n\r\n        transferPayment(erc20Token, merchant.wallet, merchantAmount, \"Failed sending merchant payment\");\r\n        transferPayment(erc20Token, serviceWallet,   feeAmount,      \"Failed sending Commission payment\");\r\n\r\n        return article;\r\n      }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"buyerWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"merchantWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"merchantId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feePercentInM100\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"merchantAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"merchantRef\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inPlatformId\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct TArticle\",\"name\":\"item\",\"type\":\"tuple\"}],\"name\":\"CreateOnrampArticle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"buyerWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"merchantWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"merchantId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feePercentInM100\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"merchantAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"merchantRef\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inPlatformId\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct TArticle\",\"name\":\"item\",\"type\":\"tuple\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"merchantId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFeeInM100\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operatorRights\",\"type\":\"uint256\"}],\"name\":\"OperatorSetMerchant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"SetApiEntityAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"SetApiEntityWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"merchantId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftFeeInM100\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"SetMerchant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFeeInM100\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFeeInM100\",\"type\":\"uint256\"}],\"name\":\"SetNftFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rights\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"isEnabled\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"canChangeMerchantWallet\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"canChangeFees\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"canChangeMerchantName\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"canChangeDefaultFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"canChangeSigner\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"canCreateMerchant\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"canChangeApiFees\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"canChangeApiWallet\",\"type\":\"uint16\"}],\"name\":\"SetOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"SetServiceWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"done\",\"type\":\"bool\"}],\"name\":\"SetSigningEntity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"articleNftIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposedHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"merchantId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"merchantArticleRef\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"articleTitle\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"inPlatformId\",\"type\":\"uint256\"}],\"name\":\"createArticle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currencyDecimalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currencyName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currencySymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getArticle\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"buyerWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"merchantWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"merchantId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feePercentInM100\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"merchantAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"merchantRef\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inPlatformId\",\"type\":\"uint256\"}],\"internalType\":\"struct TArticle\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getArticleCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getArticleIdByDbId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"getArticles\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"buyerWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"merchantWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"merchantId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feePercentInM100\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"merchantAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"merchantRef\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inPlatformId\",\"type\":\"uint256\"}],\"internalType\":\"struct TArticle[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClientsRevenue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrency\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimalCount\",\"type\":\"uint256\"}],\"internalType\":\"struct TCurrency\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultNftFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"defaultFeeInM100\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGrossRevenue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getMerchant\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nftFeeInM100\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"soldQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSoldAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountWithoutFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct TMerchant\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getMerchantAddressByIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getMerchantBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"merchantId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"soldQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSoldAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountWithoutFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFeeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct TMerchantBalance\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMerchantCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getMerchantIndexByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"getMerchants\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nftFeeInM100\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"soldQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSoldAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountWithoutFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct TMerchant[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaidToMerchants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRevenues\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ourRevenue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"merchantsRevenue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"grossRevenue\",\"type\":\"uint256\"}],\"internalType\":\"struct TRevenue\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"indexFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexTo\",\"type\":\"uint256\"}],\"name\":\"listOperators\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"rights\",\"type\":\"uint16\"}],\"internalType\":\"struct TOperator[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposedHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"merchantId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"merchantArticleRef\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"articleTitle\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"inPlatformId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingCurrencyToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onrampCurrencyToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"invoiceFeesInM100\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"areEnabled\",\"type\":\"bool[]\"}],\"name\":\"operatorCreateMerchants\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"operatorSetDefaultNftFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"merchantId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newFeeInM100\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"operatorSetMerchant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setApiEntityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"rights\",\"type\":\"uint16\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"setServiceWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"payload\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"k\",\"type\":\"uint256\"}],\"name\":\"setSigningEntity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ACommerceContract", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ccf52b8bde3639074633f1f490257c612104324e21e0c244700fc6929d9751b9"}