{"SourceCode": "//SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.8.9;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract FundsRecovery is Ownable {\r\n    address payable internal fundsDestination;\r\n    IERC20 public token;\r\n\r\n    event DestinationChanged(\r\n        address indexed previousDestination,\r\n        address indexed newDestination\r\n    );\r\n\r\n    /**\r\n     * Setting new destination of funds recovery.\r\n     */\r\n    function setFundsDestination(address payable _newDestination)\r\n        public\r\n        virtual\r\n        onlyOwner\r\n    {\r\n        require(_newDestination != address(0), \"address is 0x0\");\r\n        emit DestinationChanged(fundsDestination, _newDestination);\r\n        fundsDestination = _newDestination;\r\n    }\r\n\r\n    /**\r\n     * Getting funds destination address.\r\n     */\r\n    function getFundsDestination() public view onlyOwner returns (address) {\r\n        return fundsDestination;\r\n    }\r\n\r\n    /**\r\n     * Possibility to recover funds in case they were sent to this address before smart contract deployment\r\n     */\r\n    function claimNative() public {\r\n        require(fundsDestination != address(0), \"address is 0x0\");\r\n        fundsDestination.transfer(address(this).balance);\r\n    }\r\n\r\n    /**\r\n       Transfers selected tokens into owner address.\r\n    */\r\n    function claimTokens(address _token) public {\r\n        require(fundsDestination != address(0), \"address is 0x0\");\r\n        require(\r\n            _token != address(token),\r\n            \"native token funds can't be recovered\"\r\n        );\r\n        uint256 _amount = IERC20(_token).balanceOf(address(this));\r\n        IERC20(_token).transfer(fundsDestination, _amount);\r\n    }\r\n}\r\n\r\ncontract TopperUpper is FundsRecovery {\r\n    struct Limit {\r\n        uint256 native;\r\n        uint256 token;\r\n        uint256 blocksWindow;\r\n    }\r\n\r\n    struct CurrentLimit {\r\n        uint256 amount;\r\n        uint256 validTill;\r\n    }\r\n\r\n    mapping(address => bool) public managers;\r\n    mapping(address => Limit) public approvedAddresses;\r\n    mapping(address => CurrentLimit) public tokenLimits; // Current period token limits\r\n    mapping(address => CurrentLimit) public nativeLimits; // Current period native currency limits\r\n\r\n    modifier onlyManager() {\r\n        require(managers[_msgSender()], \"Caller is not a manager\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _token) {\r\n        token = IERC20(_token);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function setManagers(address[] memory _managers) public onlyOwner {\r\n        require(_managers.length > 0, \"Please pass at least one manager\");\r\n        for (uint256 i = 0; i < _managers.length; i++) {\r\n            managers[_managers[i]] = true;\r\n        }\r\n    }\r\n\r\n    function removeManagers(address[] memory _managers) public onlyOwner {\r\n        require(_managers.length > 0, \"Invalid array length\");\r\n        for (uint256 i = 0; i < _managers.length; i++) {\r\n            delete managers[_managers[i]];\r\n        }\r\n    }\r\n\r\n    function approveAddresses(\r\n        address[] memory _addrs,\r\n        uint256[] memory _limitsNative,\r\n        uint256[] memory _limitsToken,\r\n        uint256[] memory _blocksWindow\r\n    ) public onlyOwner {\r\n        require(\r\n            _addrs.length == _limitsNative.length &&\r\n                _limitsNative.length == _limitsToken.length &&\r\n                _blocksWindow.length == _limitsToken.length,\r\n            \"Invalid array length\"\r\n        );\r\n        for (uint256 i = 0; i < _addrs.length; i++) {\r\n            Limit memory limit = Limit(\r\n                _limitsNative[i],\r\n                _limitsToken[i],\r\n                _blocksWindow[i]\r\n            );\r\n            approvedAddresses[_addrs[i]] = limit;\r\n        }\r\n    }\r\n\r\n    function disapproveAddresses(address[] memory _addrs) public onlyOwner {\r\n        require(_addrs.length > 0, \"Invalid array length\");\r\n        for (uint256 i = 0; i < _addrs.length; i++) {\r\n            delete approvedAddresses[_addrs[i]];\r\n            delete nativeLimits[_addrs[i]];\r\n            delete tokenLimits[_addrs[i]];\r\n        }\r\n    }\r\n\r\n    function _topupNative(address payable _to, uint256 _amount) internal {\r\n        if (block.number > nativeLimits[_to].validTill) {\r\n            require(\r\n                approvedAddresses[_to].native >= _amount,\r\n                \"Payout limits exceeded\"\r\n            );\r\n            nativeLimits[_to].validTill =\r\n                block.number +\r\n                approvedAddresses[_to].blocksWindow;\r\n            nativeLimits[_to].amount = approvedAddresses[_to].native - _amount;\r\n        } else {\r\n            require(\r\n                nativeLimits[_to].amount >= _amount,\r\n                \"Payout limits exceeded\"\r\n            );\r\n            nativeLimits[_to].amount -= _amount;\r\n        }\r\n\r\n        _to.transfer(_amount);\r\n    }\r\n\r\n    function topupNative(address payable _to, uint256 _amounts)\r\n        public\r\n        onlyManager\r\n    {\r\n        _topupNative(_to, _amounts);\r\n    }\r\n\r\n    function topupNatives(\r\n        address payable[] memory _to,\r\n        uint256[] memory _amounts\r\n    ) public onlyManager {\r\n        require(_amounts.length == _to.length, \"Invalid array length\");\r\n        for (uint256 i = 0; i < _to.length; i++) {\r\n            topupNative(_to[i], _amounts[i]);\r\n        }\r\n    }\r\n\r\n    function _topupToken(address _to, uint256 _amount) internal {\r\n        if (block.number > tokenLimits[_to].validTill) {\r\n            require(\r\n                approvedAddresses[_to].token >= _amount,\r\n                \"Payout limits exceeded\"\r\n            );\r\n            tokenLimits[_to].validTill =\r\n                block.number +\r\n                approvedAddresses[_to].blocksWindow;\r\n            tokenLimits[_to].amount = approvedAddresses[_to].token - _amount;\r\n        } else {\r\n            require(\r\n                tokenLimits[_to].amount >= _amount,\r\n                \"Payout limits exceeded\"\r\n            );\r\n            tokenLimits[_to].amount -= _amount;\r\n        }\r\n\r\n        token.transfer(_to, _amount);\r\n    }\r\n\r\n    function topupToken(address _to, uint256 _amounts) public onlyManager {\r\n        _topupToken(_to, _amounts);\r\n    }\r\n\r\n    function topupTokens(address[] memory _to, uint256[] memory _amounts)\r\n        public\r\n        onlyManager\r\n    {\r\n        require(_amounts.length == _to.length, \"Invalid array length\");\r\n        for (uint256 i = 0; i < _amounts.length; i++) {\r\n            _topupToken(_to[i], _amounts[i]);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousDestination\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDestination\",\"type\":\"address\"}],\"name\":\"DestinationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_limitsNative\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_limitsToken\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_blocksWindow\",\"type\":\"uint256[]\"}],\"name\":\"approveAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedAddresses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"native\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blocksWindow\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addrs\",\"type\":\"address[]\"}],\"name\":\"disapproveAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundsDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"managers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nativeLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validTill\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_managers\",\"type\":\"address[]\"}],\"name\":\"removeManagers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newDestination\",\"type\":\"address\"}],\"name\":\"setFundsDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_managers\",\"type\":\"address[]\"}],\"name\":\"setManagers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validTill\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amounts\",\"type\":\"uint256\"}],\"name\":\"topupNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"topupNatives\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amounts\",\"type\":\"uint256\"}],\"name\":\"topupToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"topupTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TopperUpper", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001379e8886a944d2d9d440b3d88df536aea08d9f3", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e357cc6e6438e06e90be12d4ebcc070f26141d587ff1450ff1e58322b133491d"}