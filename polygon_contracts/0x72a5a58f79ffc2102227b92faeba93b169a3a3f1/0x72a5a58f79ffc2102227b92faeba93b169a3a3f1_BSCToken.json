{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2021-03-08\r\n*/\r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\n\r\npragma solidity 0.7.4;\r\n\r\n\r\nlibrary SafeMathLib {\r\n  function times(uint a, uint b) public pure returns (uint) {\r\n    uint c = a * b;\r\n    require(a == 0 || c / a == b, 'Overflow detected');\r\n    return c;\r\n  }\r\n\r\n  function minus(uint a, uint b) public pure returns (uint) {\r\n    require(b <= a, 'Underflow detected');\r\n    return a - b;\r\n  }\r\n\r\n  function plus(uint a, uint b) public pure returns (uint) {\r\n    uint c = a + b;\r\n    require(c>=a && c>=b, 'Overflow detected');\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract BSCToken {\r\n    using SafeMathLib for uint;\r\n\r\n    mapping (address => uint) balances;\r\n    mapping (address => mapping (address => uint)) allowed;\r\n    mapping (uint => FrozenTokens) public frozenTokensMap;\r\n\r\n    event Transfer(address indexed sender, address indexed receiver, uint value);\r\n    event Approval(address approver, address spender, uint value);\r\n    event TokensFrozen(address indexed freezer, uint amount, uint id, uint lengthFreezeDays);\r\n    event TokensUnfrozen(address indexed unfreezer, uint amount, uint id);\r\n    event TokensBurned(address burner, uint amount);\r\n    event TokensMinted(address recipient, uint amount);\r\n    event BankUpdated(address oldBank, address newBank);\r\n\r\n    uint8 constant public _decimals = 18;\r\n    string constant public _symbol = \"FVT\";\r\n    string constant public _name = \"finance.vote Token\";\r\n    uint public _totalSupply;\r\n    uint numFrozenStructs;\r\n    address public bank;\r\n\r\n    struct FrozenTokens {\r\n        uint id;\r\n        uint dateFrozen;\r\n        uint lengthFreezeDays;\r\n        uint amount;\r\n        bool frozen;\r\n        address owner;\r\n    }\r\n\r\n    // simple initialization, giving complete token supply to one address\r\n    constructor(address _bank) {\r\n        bank = _bank;\r\n        require(bank != address(0), 'Must initialize with nonzero address');\r\n        uint totalInitialBalance = 0;\r\n        balances[bank] = totalInitialBalance;\r\n        _totalSupply = totalInitialBalance;\r\n        emit Transfer(address(0), bank, totalInitialBalance);\r\n    }\r\n\r\n    modifier bankOnly() {\r\n        require (msg.sender == bank, 'Only bank address may call this');\r\n        _;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return bank;\r\n    }\r\n\r\n    function setBank(address newBank) public bankOnly {\r\n        address oldBank = bank;\r\n        bank = newBank;\r\n        emit BankUpdated(oldBank, newBank);\r\n    }\r\n\r\n    // freeze tokens for a certain number of days\r\n    function freeze(uint amount, uint freezeDays) public {\r\n        require(amount > 0, 'Cannot freeze 0 tokens');\r\n        // move tokens into this contract's address from sender\r\n        balances[msg.sender] = balances[msg.sender].minus(amount);\r\n        balances[address(this)] = balances[address(this)].plus(amount);\r\n        numFrozenStructs = numFrozenStructs.plus(1);\r\n        frozenTokensMap[numFrozenStructs] = FrozenTokens(numFrozenStructs, block.timestamp, freezeDays, amount, true, msg.sender);\r\n        emit Transfer(msg.sender, address(this), amount);\r\n        emit TokensFrozen(msg.sender, amount, numFrozenStructs, freezeDays);\r\n    }\r\n\r\n    // unfreeze frozen tokens\r\n    function unFreeze(uint id) public {\r\n        FrozenTokens storage f = frozenTokensMap[id];\r\n        require(f.dateFrozen + (f.lengthFreezeDays * 1 days) < block.timestamp, 'May not unfreeze until freeze time is up');\r\n        require(f.frozen, 'Can only unfreeze frozen tokens');\r\n        f.frozen = false;\r\n        // move tokens back into owner's address from this contract's address\r\n        balances[f.owner] = balances[f.owner].plus(f.amount);\r\n        balances[address(this)] = balances[address(this)].minus(f.amount);\r\n        emit Transfer(address(this), msg.sender, f.amount);\r\n        emit TokensUnfrozen(f.owner, f.amount, id);\r\n    }\r\n\r\n    // burn tokens, taking them out of supply\r\n    function burn(uint amount) public {\r\n        balances[msg.sender] = balances[msg.sender].minus(amount);\r\n        _totalSupply = _totalSupply.minus(amount);\r\n        emit Transfer(msg.sender, address(0), amount);\r\n        emit TokensBurned(msg.sender, amount);\r\n    }\r\n\r\n    function mint(address recipient, uint amount) public bankOnly {\r\n        balances[recipient] = balances[recipient].plus(amount);\r\n        _totalSupply = _totalSupply.plus(amount);\r\n        emit Transfer(address(0), recipient, amount);\r\n        emit TokensMinted(recipient, amount);\r\n    }\r\n\r\n    // burn tokens for someone else, subject to approval\r\n    function burnFrom(address burned, uint amount) public {\r\n        uint currentAllowance = allowed[burned][msg.sender];\r\n\r\n        // deduct\r\n        balances[burned] = balances[burned].minus(amount);\r\n\r\n        // adjust allowance\r\n        allowed[burned][msg.sender] = currentAllowance.minus(amount);\r\n\r\n        _totalSupply = _totalSupply.minus(amount);\r\n\r\n        emit Transfer(burned, address(0), amount);\r\n        emit TokensBurned(burned, amount);\r\n    }\r\n\r\n    // transfer tokens\r\n    function transfer(address to, uint value) public returns (bool success)\r\n    {\r\n        if (to == address(0)) {\r\n            burn(value);\r\n        } else {\r\n            // deduct\r\n            balances[msg.sender] = balances[msg.sender].minus(value);\r\n            // add\r\n            balances[to] = balances[to].plus(value);\r\n\r\n            emit Transfer(msg.sender, to, value);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // transfer someone else's tokens, subject to approval\r\n    function transferFrom(address from, address to, uint value) public returns (bool success)\r\n    {\r\n        if (to == address(0)) {\r\n            burnFrom(from, value);\r\n        } else {\r\n            uint currentAllowance = allowed[from][msg.sender];\r\n\r\n            // deduct\r\n            balances[from] = balances[from].minus(value);\r\n\r\n            // add\r\n            balances[to] = balances[to].plus(value);\r\n\r\n            // adjust allowance\r\n            allowed[from][msg.sender] = currentAllowance.minus(value);\r\n\r\n            emit Transfer(from, to, value);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // retrieve the balance of address\r\n    function balanceOf(address owner) public view returns (uint balance) {\r\n        return balances[owner];\r\n    }\r\n\r\n    // approve another address to transfer a specific amount of tokens\r\n    function approve(address spender, uint value) public returns (bool success) {\r\n        allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    // incrementally increase approval, see https://github.com/ethereum/EIPs/issues/738\r\n    function increaseApproval(address spender, uint value) public returns (bool success) {\r\n        allowed[msg.sender][spender] = allowed[msg.sender][spender].plus(value);\r\n        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    // incrementally decrease approval, see https://github.com/ethereum/EIPs/issues/738\r\n    function decreaseApproval(address spender, uint decreaseValue) public returns (bool success) {\r\n        uint oldValue = allowed[msg.sender][spender];\r\n        // allow decreasing too much, to prevent griefing via front-running\r\n        if (decreaseValue >= oldValue) {\r\n            allowed[msg.sender][spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][spender] = oldValue.minus(decreaseValue);\r\n        }\r\n        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    // retrieve allowance for a given owner, spender pair of addresses\r\n    function allowance(address owner, address spender) public view returns (uint remaining) {\r\n        return allowed[owner][spender];\r\n    }\r\n\r\n    function numCoinsFrozen() public view returns (uint) {\r\n        return balances[address(this)];\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bank\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldBank\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBank\",\"type\":\"address\"}],\"name\":\"BankUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"freezer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lengthFreezeDays\",\"type\":\"uint256\"}],\"name\":\"TokensFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"unfreezer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"TokensUnfrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bank\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"burned\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decreaseValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freezeDays\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"frozenTokensMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dateFrozen\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lengthFreezeDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numCoinsFrozen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBank\",\"type\":\"address\"}],\"name\":\"setBank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"unFreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BSCToken", "CompilerVersion": "v0.7.4+commit.3f05b770", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000785cfc6c2afcb058e8dd6dda49537c5a819d3625", "EVMVersion": "Default", "Library": "SafeMathLib:86b43bf8ba2b61ea3c3f5a3c4c07517077fa043d", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bef49185f691c40a103800aeab28ff9302cb2793bd58e4df93a04c8a4935a1cf"}