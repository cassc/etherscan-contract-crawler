{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facades/LengthStorageFacade.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.4;\\n// SPDX-License-Identifier: GPL-3.0-or-later\\nimport \\\"../storage/IStorage.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract LengthStorageFacade is Ownable{\\n    struct Range {\\n        // rename this\\n        address storageContract;\\n        uint256 start;\\n        uint256 end;\\n    }\\n    // Mapping of current state of the contracts\\n    // LengthStorage1 = 1 - 369\\n    // LengthStorage2 = 370 - 726\\n\\n    // Mapping of current state of the contracts ( should be finalized )\\n    // LengthStorage1 = 1 - 369\\n    // LengthStorage2 = 370 - 739\\n\\n    Range[] ranges;\\n\\n    constructor(address[] memory lengthStorage, uint256[] memory startRange, uint256[] memory endRange){\\n        for (uint256 i = 0; i < lengthStorage.length; i++) \\n        {\\n            Range memory lengthStorageRange = Range({storageContract:lengthStorage[i], start:startRange[i], end: endRange[i] });\\n            ranges.push(lengthStorageRange);\\n        }\\n    }\\n    function updateRange(uint256 index, address newStorageContract, uint256 newStart, uint256 newEnd) public onlyOwner {\\n        require(index < ranges.length, \\\"Invalid index\\\");\\n\\n        ranges[index].storageContract = newStorageContract;\\n        ranges[index].start = newStart;\\n        ranges[index].end = newEnd;\\n    }\\n    function _getBasedOnId(uint256 id) public view returns (address storageAddress, uint256 storageInterpolatedId){\\n    \\n\\n    // only if it's 2nd, 3rd or nth contract - there is no need for idInterpolation for the first contract\\n    if(id > ranges[0].end){\\n        for(uint256 i = 0; i < ranges.length; i++){\\n            if(id >= ranges[i].start && id <= ranges[i].end){\\n                // return the address\\n                storageAddress = ranges[i].storageContract;\\n                storageInterpolatedId = id - ranges[i].start;\\n            }\\n        }\\n        // Add a return statement here to handle the case when id doesn't match any range\\n        return (storageAddress, storageInterpolatedId);\\n    } else {\\n        return (ranges[0].storageContract, id);\\n    }\\n    }\\n\\n    function getUnitBasedOnId(uint256 id) public returns (string memory){\\n        (address storageAddress, uint256 storageInterpolatedId) = _getBasedOnId(id);\\n        IStorage unit = IStorage(storageAddress);\\n        return unit.getById(storageInterpolatedId);\\n    }\\n\\n\\n}\"\r\n    },\r\n    \"contracts/storage/IStorage.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.4;\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// https://soliditytips.com/articles/solidity-interface-interact-with-other-contracts/\\ninterface IStorage {\\n    function getById(uint256 id) external returns (string memory unit);\\n    // Add more function signatures as needed.\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"lengthStorage\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"startRange\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"endRange\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"_getBasedOnId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"storageAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"storageInterpolatedId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getUnitBasedOnId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newStorageContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newEnd\",\"type\":\"uint256\"}],\"name\":\"updateRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LengthStorageFacade", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000bccdad9ec5e2c1a64dcfc89d47b27c2136fa5997000000000000000000000000e07bc23a39d038fc39d92c946d33b1307c6ae3050000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000001720000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000017100000000000000000000000000000000000000000000000000000000000002e3", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}