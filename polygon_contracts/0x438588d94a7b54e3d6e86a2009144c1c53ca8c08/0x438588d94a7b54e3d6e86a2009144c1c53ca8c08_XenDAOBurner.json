{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.0;\r\ninterface IXEN {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function burn(address user, uint256 amount) external;\r\n}\r\n\r\ninterface IXD {\r\n\tfunction mintNoExpectation() external;\r\n\tfunction transfer(address to, uint256 amount) external returns (bool);\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n    function setFee(uint256 _newFee, uint256 _againFee, uint256 _sendFee) external;\r\n\tfunction stake(uint256 _amount) external;\r\n\tfunction setSendingReward(uint256 _new) external;\r\n\tfunction withdraw() external;\r\n    function harvest() external;\r\n    function wchangeAddress(address _noExpect) external;\r\n    function mint(address _to, uint256 _amount) external;\r\n}\r\n\r\ninterface IXVMC {\r\n\tfunction governor() external view returns (address);\r\n}\r\n\r\ninterface IBurnRedeemable {\r\n    event Redeemed(\r\n        address indexed user,\r\n        address indexed xenContract,\r\n        address indexed tokenContract,\r\n        uint256 xenAmount,\r\n        uint256 tokenAmount\r\n    );\r\n\r\n    function onTokenBurned(address user, uint256 amount) external;\r\n}\r\n\r\n\r\ncontract XenDAOBurner {\r\n    IXEN public immutable XEN;\r\n    IXD public immutable XD;\r\n    IXVMC public immutable XVMC = IXVMC(0x970ccEe657Dd831e9C37511Aa3eb5302C1Eb5EEe);\r\n    uint256 public immutable burnPerBatch = 1e6 * 1e18;\r\n    uint256 public rewardPerBatch = 1e7 * 1e18;\r\n    uint256 public immutable protocolFee; //roughly 20% of XEN value burned\r\n\r\n    uint256 public lastRewardUpdate;\r\n\r\n    address public payoutAddress = 0xA2e4728c89D6dCFc93dF4b2b438E49da823Fe181; //XVMC buyback contract\r\n\r\n    constructor(IXEN _xen, IXD _xd, uint256 _fee) {\r\n        XEN = _xen;\r\n        XD = _xd;\r\n        protocolFee = _fee;\r\n        lastRewardUpdate = block.timestamp + 3 days;\r\n    }\r\n\r\n    // Function to receive Ether. msg.data must be empty\r\n    receive() external payable {}\r\n\r\n    // Fallback function is called when msg.data is not empty\r\n    fallback() external payable {}\r\n\r\n    function burnXEN(uint256 _batches) external payable {\r\n        uint256 _fee = _batches * protocolFee;\r\n        require(msg.value == _fee, \"insufficient fee\");\r\n        payFee(_fee);\r\n\r\n        uint256 _burnAmount = _batches * burnPerBatch;\r\n        require(XEN.balanceOf(msg.sender) >= _burnAmount, \"XenDAOBurner: Insufficient XEN tokens for burn\");\r\n\r\n        XEN.burn(msg.sender, _burnAmount);\r\n        XD.mint(msg.sender, _batches * rewardPerBatch);\r\n    }\r\n\r\n    function burnXENref(uint256 _batches, address _ref) external payable {\r\n        require(msg.sender != _ref, \"XenDAOBurner: cant refer self\");\r\n\r\n        uint256 _fee = _batches * protocolFee;\r\n        require(msg.value == _fee, \"insufficient fee\");\r\n        payFee(_fee);\r\n\r\n        uint256 _burnAmount = _batches * burnPerBatch;\r\n        require(XEN.balanceOf(msg.sender) >= _burnAmount, \"XenDAOBurner: Insufficient XEN tokens for burn\");\r\n\r\n        XEN.burn(msg.sender, _burnAmount);\r\n        XD.mint(msg.sender, _batches * rewardPerBatch * 115 / 100);\r\n        XD.mint(_ref, _batches * rewardPerBatch * 15 / 100);\r\n    }\r\n\r\n    function mintXDreserves() external {\r\n        XD.mintNoExpectation();\r\n    }\r\n\r\n    function doAction() external {\r\n        XD.mintNoExpectation();\r\n        XD.stake(XD.balanceOf(address(this)));\r\n        XD.harvest();\r\n        payable(payoutAddress).transfer(address(this).balance);\r\n    }\r\n\r\n    function harvest() external {\r\n        XD.harvest();\r\n        payable(payoutAddress).transfer(address(this).balance);\r\n    }\r\n\r\n    function reduceRewards() external {\r\n        require(block.timestamp > lastRewardUpdate + 1 days, \"XenDAOBurner: Must wait atleast 24hours\");\r\n        rewardPerBatch = rewardPerBatch * 99 / 100;\r\n        lastRewardUpdate = block.timestamp;\r\n    }\r\n\r\n    function changePayoutAddress(address _new) external {\r\n        require(msg.sender == XVMC.governor(), \"decentralized voting only\");\r\n        payoutAddress = _new;\r\n    }\r\n\r\n    function transferXD(address _to) external {\r\n        require(msg.sender == XVMC.governor(), \"decentralized voting only\");\r\n        XD.transfer(_to, XD.balanceOf(address(this)));\r\n    }\r\n    \r\n    /**\r\n        @dev confirms support for IBurnRedeemable interfaces\r\n    */\r\n    function supportsInterface(bytes4 interfaceId) public pure returns (bool) {\r\n        return\r\n            interfaceId == type(IBurnRedeemable).interfaceId;\r\n    }\r\n\r\n    function payFee(uint256 amount) internal {\r\n        (bool sent, ) = payable(address(XD)).call{value: amount}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IXEN\",\"name\":\"_xen\",\"type\":\"address\"},{\"internalType\":\"contract IXD\",\"name\":\"_xd\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"XD\",\"outputs\":[{\"internalType\":\"contract IXD\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"XEN\",\"outputs\":[{\"internalType\":\"contract IXEN\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"XVMC\",\"outputs\":[{\"internalType\":\"contract IXVMC\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnPerBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batches\",\"type\":\"uint256\"}],\"name\":\"burnXEN\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batches\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"burnXENref\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"changePayoutAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintXDreserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reduceRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferXD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "XenDAOBurner", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000002ab0e9e4ee70fff1fb9d67031e44f6410170d00e0000000000000000000000000d0c85605b4e3ac7dc37b85eaadc2d5aadb4b7b10000000000000000000000000000000000000000000000000023e1e5803b4000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1ad7d516ef4c2784c7c765e5b5cb47cc8eb41e352c9102b57b946c2e6729a3d0"}