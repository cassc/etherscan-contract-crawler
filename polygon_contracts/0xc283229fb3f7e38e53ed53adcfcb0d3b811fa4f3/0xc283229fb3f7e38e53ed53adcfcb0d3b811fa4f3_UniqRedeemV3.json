{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 15\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/v1/UniqOperator/IUniqOperator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\ninterface IUniqOperator {\\n    function isOperator(uint256 operatorType, address operatorAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    function uniqAddresses(uint256 index) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/v1/UniqRedeem/UniqRedeemV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"../UniqOperator/IUniqOperator.sol\\\";\\n\\ncontract UniqRedeemV3 is Ownable {\\n    modifier ownerOrOperator() {\\n        require(\\n            owner() == msg.sender ||\\n                operator.isOperator(accessLevel, msg.sender),\\n            \\\"Only owner or proxy allowed\\\"\\n        );\\n        _;\\n    }\\n\\n    event Redeemed(\\n        address indexed _contractAddress,\\n        uint256 indexed _tokenId,\\n        address indexed _redeemerAddress,\\n        uint256 _networkId,\\n        string _redeemerName,\\n        uint256[] _purposes\\n    );\\n\\n    /// ----- VARIABLES ----- ///\\n    IUniqOperator public operator;\\n    uint256 public accessLevel;\\n    uint256 private immutable _networkId;\\n\\n    /// @dev Returns true if token was redeemed\\n    mapping(uint256 => mapping(address => mapping(uint256 => mapping(uint256 => bool))))\\n        internal _isTokenRedeemedForPurpose;\\n\\n    /// ----- VIEWS ----- ///\\n    /// @notice Returns true if token was claimed\\n    function isTokenRedeemedForPurpose(\\n        address _address,\\n        uint256 _tokenId,\\n        uint256 _purpose,\\n        uint256 _network\\n    ) external view returns (bool) {\\n        return\\n            _isTokenRedeemedForPurpose[_network][_address][_tokenId][_purpose];\\n    }\\n\\n    /// ----- OWNER METHODS ----- ///\\n    constructor(IUniqOperator operatorAddress, uint256 networkId) {\\n        operator = operatorAddress;\\n        accessLevel = 1;\\n        _networkId = networkId;\\n    }\\n\\n    function redeemTokensAsAdmin(\\n        address[] memory _tokenContracts,\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _purposes,\\n        string[] memory _redeemerName\\n    ) external ownerOrOperator {\\n        uint256[] memory networks = new uint256[](_tokenContracts.length);\\n        address[] memory owners = new address[](_tokenContracts.length);\\n        for (uint256 i = 0; i < _tokenContracts.length; i++) {\\n            networks[i] = _networkId;\\n            owners[i] = IERC721(_tokenContracts[i]).ownerOf(_tokenIds[i]);\\n        }\\n        redeemTokensAsAdmin(\\n            _tokenContracts,\\n            _tokenIds,\\n            _purposes,\\n            owners,\\n            _redeemerName,\\n            networks\\n        );\\n    }\\n\\n    function redeemTokensAsAdmin(\\n        address[] memory _tokenContracts,\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _purposes,\\n        address[] memory _owners,\\n        string[] memory _redeemerName,\\n        uint256[] memory _networks\\n    ) public ownerOrOperator {\\n        require(\\n            _tokenContracts.length == _tokenIds.length &&\\n                _tokenIds.length == _purposes.length,\\n            \\\"Array length mismatch\\\"\\n        );\\n        uint256 len = _tokenContracts.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            require(\\n                !_isTokenRedeemedForPurpose[_networks[i]][_tokenContracts[i]][\\n                    _tokenIds[i]\\n                ][_purposes[i]],\\n                \\\"Can't be redeemed again\\\"\\n            );\\n            _isTokenRedeemedForPurpose[_networks[i]][_tokenContracts[i]][\\n                _tokenIds[i]\\n            ][_purposes[i]] = true;\\n            uint256[] memory purpose = new uint256[](1);\\n            purpose[0] = _purposes[i];\\n            emit Redeemed(\\n                _tokenContracts[i],\\n                _tokenIds[i],\\n                _owners[i],\\n                _networks[i],\\n                _redeemerName[i],\\n                purpose\\n            );\\n        }\\n    }\\n\\n    function redeemTokenForPurposesAsAdmin(\\n        address _tokenContract,\\n        uint256 _tokenId,\\n        uint256 _network,\\n        uint256[] memory _purposes,\\n        address _tokenOwner,\\n        string memory _redeemerName\\n    ) external ownerOrOperator {\\n        uint256 len = _purposes.length;\\n        address[] memory _tokenContracts = new address[](len);\\n        uint256[] memory _tokenIds = new uint256[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            _tokenContracts[i] = _tokenContract;\\n            _tokenIds[i] = _tokenId;\\n            require(\\n                !_isTokenRedeemedForPurpose[_network][_tokenContract][_tokenId][\\n                    _purposes[i]\\n                ],\\n                \\\"Can't be claimed again\\\"\\n            );\\n            _isTokenRedeemedForPurpose[_network][_tokenContract][_tokenId][\\n                _purposes[i]\\n            ] = true;\\n        }\\n        emit Redeemed(\\n            _tokenContract,\\n            _tokenId,\\n            _tokenOwner,\\n            _network,\\n            _redeemerName,\\n            _purposes\\n        );\\n    }\\n\\n    function setStatusesForTokens(\\n        address[] memory _tokenAddresses,\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _purposes,\\n        uint256[] memory _networks,\\n        bool[] memory isRedeemed\\n    ) external ownerOrOperator {\\n        uint256 len = _tokenAddresses.length;\\n        require(\\n            len == _tokenIds.length &&\\n                len == _purposes.length &&\\n                len == isRedeemed.length,\\n            \\\"Arrays lengths mismatch\\\"\\n        );\\n        for (uint256 i = 0; i < len; i++) {\\n            _isTokenRedeemedForPurpose[_networks[i]][_tokenAddresses[i]][\\n                _tokenIds[i]\\n            ][_purposes[i]] = isRedeemed[i];\\n        }\\n    }\\n\\n    function editOperatorAddress(IUniqOperator newAddress) external onlyOwner {\\n        operator = newAddress;\\n    }\\n\\n    function editAccessLevel(uint256 newLevel) external onlyOwner {\\n        accessLevel = newLevel;\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IUniqOperator\",\"name\":\"operatorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"networkId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_redeemerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_networkId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_redeemerName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_purposes\",\"type\":\"uint256[]\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accessLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLevel\",\"type\":\"uint256\"}],\"name\":\"editAccessLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniqOperator\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"editOperatorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_purpose\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_network\",\"type\":\"uint256\"}],\"name\":\"isTokenRedeemedForPurpose\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"contract IUniqOperator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_network\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_purposes\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_redeemerName\",\"type\":\"string\"}],\"name\":\"redeemTokenForPurposesAsAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokenContracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_purposes\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"_redeemerName\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_networks\",\"type\":\"uint256[]\"}],\"name\":\"redeemTokensAsAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokenContracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_purposes\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_redeemerName\",\"type\":\"string[]\"}],\"name\":\"redeemTokensAsAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_purposes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_networks\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"isRedeemed\",\"type\":\"bool[]\"}],\"name\":\"setStatusesForTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UniqRedeemV3", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "15", "ConstructorArguments": "00000000000000000000000050e46bb61b2e45c65176990e2c71dadcf5b5f42e0000000000000000000000000000000000000000000000000000000000000089", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}