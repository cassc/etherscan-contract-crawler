{"SourceCode": "// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: contracts/IbexToken.sol\r\n\r\n\r\n\r\n\r\n\r\npragma solidity 0.8.10;\r\n\r\n\r\n\r\n\r\n\r\ninterface IBorrowable {\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n\tfunction transfer(address to, uint value) external returns (bool);\r\n\r\n\tfunction approve(address spender, uint value) external returns (bool);\r\n\r\n\tfunction totalBorrows() external view returns (uint);\r\n\r\n\tfunction totalSupply() external view returns (uint);\r\n\r\n\tfunction totalBalance() external view returns (uint);\r\n\r\n\tfunction exchangeRateLast() external view returns (uint);\r\n\r\n\tfunction borrowRate() external view returns (uint);\r\n\r\n\tfunction reserveFactor() external view returns (uint);\r\n\r\n}\r\n\r\n\r\n\r\ninterface IRouter {\r\n\r\n\tfunction getUniswapV2Pair(address lpToken) external returns(address);\r\n\r\n    function mint(address poolToken, uint amount, address to, uint deadline) external returns (uint tokens);\r\n\r\n    function redeem(address poolToken, uint tokens, address to, uint deadline, bytes calldata permitData) external returns (uint amount);\r\n\r\n}\r\n\r\n\r\n\r\ncontract IbexToken is ERC20 {\r\n\r\n    using SafeERC20 for IERC20;\r\n\r\n\r\n\r\n    uint8 public s_idmax;\r\n\r\n\tuint24 public s_sumWeights;\r\n\r\n\r\n\r\n    // token asset\r\n\r\n    address public immutable s_token;\r\n\r\n\t\r\n\r\n\t// Can add/remove borrowables\r\n\r\n\taddress public Owner;\r\n\r\n\t\r\n\r\n\tIRouter s_router;\r\n\r\n\r\n\r\n\tstruct Borrowable {\r\n\r\n\t\tIERC20 erc20;\r\n\r\n\t\taddress imxAddress;\r\n\r\n\t\tbool seen;\r\n\r\n\t\tbool used;\r\n\r\n\t\tuint8 id;\r\n\r\n\t\tuint24 weight;\r\n\r\n\t}\r\n\r\n\r\n\r\n\tmapping (address => Borrowable) public borrowables;\r\n\r\n\tmapping (uint => address) public idLookup;\r\n\r\n\t\r\n\r\n\tconstructor(\r\n\r\n\t\taddress _token,\r\n\r\n        string memory _name,\r\n\r\n        string memory _symbol\r\n\r\n    ) ERC20(_name, _symbol) {\r\n\r\n\t\ts_token = _token;\r\n\r\n\t\tOwner = msg.sender;\r\n\r\n        IERC20(_token).safeApprove(0x4e69Cf49FF3aF82eFe304a3C723556efB7434736, 0xffffffffffffffffffffffffffffffffffff);\r\n\r\n\t\ts_router = IRouter(0x4e69Cf49FF3aF82eFe304a3C723556efB7434736);\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction decimals() public view virtual override returns (uint8) {\r\n\r\n        return 6;\r\n\r\n    }\r\n\r\n\t// readContract\r\n\r\n\r\n\r\n\tfunction _allBorrowables() public view returns (Borrowable[] memory) {\r\n\r\n\t\tuint idmax = uint(s_idmax);\r\n\r\n\t\tBorrowable[] memory allBorrowables = new Borrowable[](idmax);\r\n\r\n\t\tfor (uint i; i < idmax; ++i) {\r\n\r\n\t\t\tallBorrowables[i] = borrowables[idLookup[i]];\r\n\r\n\t\t}\r\n\r\n\t\treturn allBorrowables;\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction _usedBorrowables() public view returns (Borrowable[] memory) {\r\n\r\n\t\tuint idmax = uint(s_idmax);\r\n\r\n\t\tuint tmp_id;\r\n\r\n\t\tBorrowable[] memory usedBorrowables = new Borrowable[](idmax);\r\n\r\n\t\tfor (uint i; i < idmax; ++i) {\r\n\r\n\t\t\tif (borrowables[idLookup[i]].used) {\r\n\r\n\t\t\t\tusedBorrowables[tmp_id] = borrowables[idLookup[i]];\r\n\r\n\t\t\t\t++tmp_id;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tuint null_id = idmax - tmp_id;\r\n\r\n\t\tassembly { mstore(usedBorrowables, sub(mload(usedBorrowables), null_id)) }\r\n\r\n\t\treturn usedBorrowables;\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction lastUnderlyingValue() public view returns (uint) {\r\n\r\n\t\tuint tmp;\r\n\r\n\t\tIBorrowable borrowable;\r\n\r\n\t\tBorrowable[] memory usedBorrowables = _usedBorrowables();\r\n\r\n\t\tfor (uint i; i < usedBorrowables.length; ++i) {\r\n\r\n\t\t\tborrowable = IBorrowable(usedBorrowables[i].imxAddress);\r\n\r\n\t\t\ttmp += borrowable.balanceOf(address(this)) * borrowable.exchangeRateLast();\r\n\r\n\t\t}\r\n\r\n\t\treturn tmp / 1e18;\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction lastAPR() public view returns (uint) {\r\n\r\n\t\tuint tmpAPR;\r\n\r\n\t\tuint tmpExchRate;\r\n\r\n\t\tIBorrowable borrowable;\r\n\r\n\t\tBorrowable[] memory usedBorrowables = _usedBorrowables();\r\n\r\n\t\tfor (uint i; i < usedBorrowables.length; ++i) {\r\n\r\n\t\t\tborrowable = IBorrowable(usedBorrowables[i].imxAddress);\r\n\r\n\t\t\ttmpExchRate = borrowable.exchangeRateLast();\r\n\r\n            tmpAPR += borrowable.borrowRate() * 365 * 24 * 60 * 60 * (1e18 - borrowable.reserveFactor()) * borrowable.totalBorrows() / (borrowable.totalSupply() * tmpExchRate) * usedBorrowables[i].weight;\r\n\r\n\t\t}\r\n\r\n\t\treturn tmpAPR / s_sumWeights;\r\n\r\n\t}\r\n\r\n\r\n\r\n\t// writeContract\r\n\r\n\t\r\n\r\n\tfunction _addBorrowable(address _borrowable, uint _weight) internal {\r\n\r\n\t\tuint idmax = uint(s_idmax);\r\n\r\n\t\trequire(idmax < 254, \"max borrowables\");\r\n\r\n\t\trequire(!borrowables[_borrowable].seen, \"borrowable already added\");\r\n\r\n\t\trequire(s_router.getUniswapV2Pair(_borrowable) == s_token, \"borrowable invalid\");\r\n\r\n\t\tIERC20(_borrowable).safeApprove(address(s_router), 0xffffffffffffffffffffffffffffffffffff);\r\n\r\n\r\n\r\n\t\tborrowables[_borrowable].imxAddress = _borrowable;\r\n\r\n\t\tborrowables[_borrowable].seen = true;\r\n\r\n\t\tborrowables[_borrowable].used = _weight != 0;\r\n\r\n\t\tborrowables[_borrowable].id = uint8(idmax);\r\n\r\n\t\tborrowables[_borrowable].weight = uint24(_weight);\r\n\r\n\t\tborrowables[_borrowable].erc20 = IERC20(_borrowable);\r\n\r\n\r\n\r\n\t\tidLookup[idmax] = _borrowable;\r\n\r\n\t\ts_idmax = uint8(idmax + 1);\r\n\r\n\t\ts_sumWeights += uint24(_weight);\r\n\r\n\t\t}\r\n\r\n\tfunction addBorrowable(address _borrowable, uint _weight) external onlyOwner() {\r\n\r\n\t\t_addBorrowable(_borrowable, _weight);\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction incrBorrowable(address _borrowable, uint _weight) public onlyOwner() {\r\n\r\n\t\trequire(borrowables[_borrowable].seen, \"borrowable not added\");\r\n\r\n\t\tuint prevWeight = uint(borrowables[_borrowable].weight);\r\n\r\n\t\trequire(prevWeight < _weight, \"weight too small\");\r\n\r\n\t\tuint amount;\r\n\r\n\t\tuint borrowableBal;\r\n\r\n\t\tuint tokenBal;\r\n\r\n\t\tuint local_sumWeights = uint(s_sumWeights);\r\n\r\n\t\t\r\n\r\n\t\tbytes memory nothing;\r\n\r\n\t\tBorrowable memory borrowable;\r\n\r\n\t\tBorrowable[] memory usedBorrowables = _usedBorrowables();\r\n\r\n\r\n\r\n\t\tfor (uint i; i < usedBorrowables.length; ++i) {\r\n\r\n\t\t\tborrowable = usedBorrowables[i];\r\n\r\n\t\t\tif (borrowable.imxAddress != _borrowable) {\r\n\r\n\t\t\t\tborrowableBal = borrowable.erc20.balanceOf(address(this));\r\n\r\n\t\t\t\tamount = s_router.redeem(borrowable.imxAddress, borrowableBal - local_sumWeights * borrowableBal / (local_sumWeights + _weight - prevWeight), address(this), block.timestamp + 3600, nothing);\r\n\r\n\t\t\t\ttokenBal += amount;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\r\n\t\ts_router.mint(_borrowable, tokenBal, address(this), block.timestamp + 3600);\r\n\r\n\t\ts_sumWeights = uint24(local_sumWeights + _weight - prevWeight);\r\n\r\n\t\tborrowables[_borrowable].weight = uint24(_weight);\r\n\r\n\t\tborrowables[_borrowable].used = _weight != 0;\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction decrBorrowable(address _borrowable, uint _weight) public onlyOwner() {\r\n\r\n\t\trequire(borrowables[_borrowable].seen, \"borrowable not added\");\r\n\r\n\t\trequire(uint(borrowables[_borrowable].weight) > _weight, \"weight too large\");\r\n\r\n\t\tuint amount;\r\n\r\n\t\tuint borrowableBal;\r\n\r\n\t\tuint local_sumWeights = uint(s_sumWeights);\r\n\r\n\t\tuint prevWeight = uint(borrowables[_borrowable].weight);\r\n\r\n\t\tbytes memory nothing;\r\n\r\n\t\tBorrowable memory borrowable;\r\n\r\n\t\tBorrowable[] memory usedBorrowables = _usedBorrowables();\r\n\r\n\t\t\r\n\r\n\t\tborrowableBal = borrowables[_borrowable].erc20.balanceOf(address(this));\r\n\r\n\t\tamount = s_router.redeem(_borrowable, borrowableBal - _weight * borrowableBal * local_sumWeights / (local_sumWeights + _weight - prevWeight) / prevWeight, address(this), block.timestamp + 3600, nothing);\r\n\r\n\r\n\r\n\t\tfor (uint i; i < usedBorrowables.length; ++i) {\r\n\r\n\t\t\tborrowable = usedBorrowables[i];\r\n\r\n\t\t\tif (borrowable.imxAddress != _borrowable) {\r\n\r\n\t\t\t\ts_router.mint(borrowable.imxAddress, amount * uint(borrowable.weight) / (local_sumWeights - prevWeight), address(this), block.timestamp + 3600);\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\r\n\t\ts_sumWeights = uint24(local_sumWeights + _weight - prevWeight);\r\n\r\n\t\tborrowables[_borrowable].weight = uint24(_weight);\r\n\r\n\t\tborrowables[_borrowable].used = _weight != 0;\r\n\r\n\t}\r\n\r\n\t\r\n\r\n\tfunction swap(address _from, address _to, uint256 _percent) external onlyOwner() {\r\n\r\n\t\t// Swap two individual imxB. Can add new borroable.\r\n\r\n\t\trequire(borrowables[_from].used, \"borrowable not added\");\r\n\r\n\t\trequire(_percent <= 10000, \"100.00 max percent\");\r\n\r\n\t\trequire(_percent != 0, \"must be > 0\");\r\n\r\n\t\tbytes memory nothing;\r\n\r\n\t\tuint fromBorrowableAmount;\r\n\r\n\t\tuint newWeight;\r\n\r\n\t\tuint redeemed;\r\n\r\n\t\t\r\n\r\n\t\tnewWeight = uint(borrowables[_from].weight) * _percent / 10000;\r\n\r\n\r\n\r\n        if (!borrowables[_to].seen) {\r\n\r\n\t\t\t_addBorrowable(_to, 0);\r\n\r\n\t\t\tborrowables[_to].used = true;\r\n\r\n\t\t}\r\n\r\n\r\n\r\n\t\tfromBorrowableAmount = borrowables[_from].erc20.balanceOf(address(this));\r\n\r\n\t\t\r\n\r\n\t\tredeemed = s_router.redeem(_from, fromBorrowableAmount * _percent / 10000, address(this), block.timestamp + 3600, nothing);\r\n\r\n\t\ts_router.mint(_to, redeemed, address(this), block.timestamp + 3600);\r\n\r\n\t\tborrowables[_from].weight -= uint24(newWeight);\r\n\r\n\t\tborrowables[_from].used = borrowables[_from].weight != 0;\r\n\r\n\t\tborrowables[_to].weight += uint24(newWeight);\r\n\r\n\t}\r\n\r\n\t\t\r\n\r\n\tfunction withdraw() external onlyOwner() {\r\n\r\n\t\tIERC20 token = IERC20(s_token);\r\n\r\n\t\ttoken.safeTransfer(Owner, token.balanceOf(address(this)));\r\n\r\n\t}\r\n\r\n\t\r\n\r\n\tfunction updateRouter(address _router) external onlyOwner() {\r\n\r\n\t\tuint idmax = uint(s_idmax);\r\n\r\n\t\tIERC20 token = IERC20(s_token);\r\n\r\n\t\ttoken.safeApprove(address(s_router), 0);\r\n\r\n\t\ttoken.safeApprove(_router, 0xffffffffffffffffffffffffffffffffffff);\r\n\r\n\t\tfor (uint i; i < idmax; i++) {\r\n\r\n\t\t\tborrowables[idLookup[i]].erc20.safeApprove(address(s_router), 0);\r\n\r\n\t\t\tborrowables[idLookup[i]].erc20.safeApprove(_router, 0xffffffffffffffffffffffffffffffffffff);\r\n\r\n\t\t}\r\n\r\n\t\ts_router = IRouter(_router);\r\n\r\n\t}\r\n\r\n\tfunction updateOwner(address _owner) external onlyOwner() {\r\n\r\n\t\tOwner = _owner;\r\n\r\n\t}\r\n\r\n\r\n\r\n\tmodifier onlyOwner() {\r\n\r\n\t\trequire(msg.sender == Owner, \"only Owner\");\r\n\r\n\t\t_;\r\n\r\n\t}\r\n\r\n\r\n\r\n    function enter(uint256 _amount) external {\r\n\r\n\t\tuint tokenBal;\r\n\r\n\t\tIERC20 token = IERC20(s_token);\r\n\r\n\t\ttokenBal = token.balanceOf(address(this));\r\n\r\n\t\t\r\n\r\n        // Transfer token to contract\r\n\r\n        token.safeTransferFrom(msg.sender, address(this), _amount);\r\n\r\n        \r\n\r\n        uint amountToMint;\r\n\r\n        uint denominator;\r\n\r\n        uint local_sumWeights = uint(s_sumWeights);\r\n\r\n        uint mintBorrowable;\r\n\r\n\t\tuint oldBorrowableBal;\r\n\r\n        uint tokenAmount;\r\n\r\n\t\tuint offset;\r\n\r\n        Borrowable memory borrowable;\r\n\r\n\t\tBorrowable[] memory usedBorrowables = _usedBorrowables();\r\n\r\n\r\n\r\n        for (uint i; i < usedBorrowables.length; ++i) {\r\n\r\n\t\t\tborrowable = usedBorrowables[i];\r\n\r\n\r\n\r\n\t\t\toldBorrowableBal = borrowable.erc20.balanceOf(address(this));\r\n\r\n\t\t\t\r\n\r\n\t\t\t// Fraction of underlying (token) for borrowables[i]\r\n\r\n\t\t\ttokenAmount = (_amount * uint(borrowable.weight)) / local_sumWeights;\r\n\r\n\t\t\t// Spend all remaining underlying on last borrowable\r\n\r\n\t\t\tif (i == (usedBorrowables.length - 1)) {\r\n\r\n\t\t\t\ttokenAmount = _amount - offset;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmintBorrowable = s_router.mint(borrowable.imxAddress, tokenAmount, address(this), block.timestamp + 3600);\r\n\r\n\t\t\t\r\n\r\n\t\t\t// Running total of existing implied token value of all borrowables \r\n\r\n\t\t\tdenominator = denominator + ((oldBorrowableBal * tokenAmount * 1e18) / mintBorrowable);\r\n\r\n\t\t\toffset += tokenAmount;\r\n\r\n\t\t}\r\n\r\n\t\t_amount = _amount;\r\n\r\n        if (totalSupply() == 0) {\r\n\r\n            _mint(msg.sender, _amount);\r\n\r\n        } else {\r\n\r\n\t\t\t// sharesToMint = tokenDeposited * existingSharePertoken\r\n\r\n\t\t\t// subtract leftover token from _amount to adjust for refund\r\n\r\n            amountToMint = (_amount * totalSupply() * 1e18) / denominator;\r\n\r\n\t\t\t_mint(msg.sender, amountToMint);\r\n\r\n\t\t\t\r\n\r\n        }\r\n\r\n    }\r\n\r\n    \r\n\r\n    function exit(uint256 _ibex) external {\r\n\r\n        require(balanceOf(msg.sender) >= _ibex, \"can't burn more than balance\");\r\n\r\n\t\taddress local_token = s_token;\r\n\r\n        uint oldBorrowableBal;\r\n\r\n        uint partAmount;\r\n\r\n        \r\n\r\n        uint tokenBal;\r\n\r\n        bytes memory nothing;\r\n\r\n\t\t\r\n\r\n        tokenBal = IERC20(local_token).balanceOf(address(this));\r\n\r\n\r\n\r\n\t\tBorrowable[] memory usedBorrowables = _usedBorrowables();\r\n\r\n        for (uint i; i < usedBorrowables.length; ++i) {\r\n\r\n            oldBorrowableBal = usedBorrowables[i].erc20.balanceOf(address(this));\r\n\r\n\t\t\tpartAmount = _ibex * oldBorrowableBal / totalSupply();\r\n\r\n\t\t\tpartAmount = s_router.redeem(usedBorrowables[i].imxAddress, partAmount, address(this), block.timestamp + 3600, nothing);\r\n\r\n        }\r\n\r\n        \r\n\r\n        _burn(msg.sender, _ibex);\r\n\r\n        IERC20(local_token).safeTransfer(msg.sender, IERC20(local_token).balanceOf(address(this)) - tokenBal);\r\n\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_allBorrowables\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"imxAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"seen\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"used\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"weight\",\"type\":\"uint24\"}],\"internalType\":\"struct IbexToken.Borrowable[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usedBorrowables\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"imxAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"seen\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"used\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"weight\",\"type\":\"uint24\"}],\"internalType\":\"struct IbexToken.Borrowable[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrowable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"}],\"name\":\"addBorrowable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowables\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"imxAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"seen\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"used\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"weight\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrowable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"}],\"name\":\"decrBorrowable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"enter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ibex\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idLookup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrowable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"}],\"name\":\"incrBorrowable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUnderlyingValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_idmax\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_sumWeights\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"updateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"updateRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "IbexToken", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "0000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000009496265782055534443000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000086962657855534443000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d93de0754159715163cbc4a675b19636ccb4fcaedae9c85848a543ef620089eb"}