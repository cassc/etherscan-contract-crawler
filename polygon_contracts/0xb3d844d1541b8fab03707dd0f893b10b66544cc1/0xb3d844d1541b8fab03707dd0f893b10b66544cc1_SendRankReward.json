{"SourceCode": "// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Admin/data/rank/RankStruct.sol\r\n\r\n\r\npragma solidity ^0.8.18;\r\n\r\n    enum RankRewardType {\r\n        RankTier,\r\n        Badge\r\n    }\r\n\r\n    enum RankTier {\r\n        NONE,\r\n        IRON,\r\n        BRONZE,\r\n        SILVER,\r\n        GOLD,\r\n        PLATINUM\r\n    }\r\n\r\n    enum BadgeType {\r\n        NONE,\r\n        RED,\r\n        TITANIUM\r\n    }\r\n\r\n    enum TokenType {\r\n        NONE,\r\n        ERC20,\r\n        ERC721,\r\n        ERC1155\r\n    }\r\n\r\n    enum RankRewardReceiveType {\r\n        DAILY,\r\n        WEEKLY,\r\n        MONTHLY\r\n    }\r\n\r\n    struct Reward {\r\n        uint256 rewardType;\r\n        uint256 reward;\r\n        uint256 rewardAmount;\r\n    }\r\n\r\n    struct RankRewardCalender {\r\n        uint256 id;\r\n        uint256 season;\r\n        uint256 rewardType;\r\n        uint256 receiveType;\r\n        RewardId rewardIds;\r\n        // mapping(uint256 => RewardIds) rewardIds;\r\n        uint256 startAt;\r\n        uint256 endAt;\r\n        // mapping(uint256 => RewardIds) rewardIds;\r\n        // RewardIds rewardIds;\r\n        //    uint256[] rewardId; // tier => rewardId\r\n        bool isValid;\r\n    }\r\n\r\n    struct RewardId {\r\n        uint256[][] rewardId;\r\n    }\r\n\r\n    struct RankReward {\r\n        uint256 id;\r\n        uint256 season;\r\n        uint256 tier;\r\n        uint256 receiveType;\r\n        uint256 rewardType;\r\n        uint256 reward;\r\n        uint256 rewardAmount;\r\n        bool isValid;\r\n    }\r\n\r\n    struct RankBadgeReward {\r\n        uint256 id;\r\n        uint256 season;\r\n        uint256 badgeType;\r\n        uint256 receiveType;\r\n        uint256 rewardType;\r\n        uint256 reward;\r\n        uint256 rewardAmount;\r\n        bool isValid;\r\n    }\r\n\r\n    struct RewardInfo {\r\n        uint256 goodsType;\r\n        uint256 tokenType;\r\n        address tokenAddress;\r\n        bool isValid;\r\n    }\r\n\r\n    struct UserRank {\r\n        uint256 tier;\r\n        uint256 badge;\r\n    }\r\n\r\n    struct SetUserRank {\r\n        address userAddress;\r\n        uint256 season;\r\n        uint256 tier;\r\n        uint256 badge;\r\n    }\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/Admin/LuxOnAdmin.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\ncontract LuxOnAdmin is Ownable {\r\n\r\n    mapping(string => mapping(address => bool)) private _superOperators;\r\n\r\n    event SuperOperator(string operator, address superOperator, bool enabled);\r\n\r\n    function setSuperOperator(string memory operator, address[] memory _operatorAddress, bool enabled) external onlyOwner {\r\n        for (uint256 i = 0; i < _operatorAddress.length; i++) {\r\n            _superOperators[operator][_operatorAddress[i]] = enabled;\r\n            emit SuperOperator(operator, _operatorAddress[i], enabled);\r\n        }\r\n    }\r\n\r\n    function isSuperOperator(string memory operator, address who) public view returns (bool) {\r\n        return _superOperators[operator][who];\r\n    }\r\n}\r\n// File: contracts/LUXON/utils/LuxOnSuperOperators.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\n\r\ncontract LuxOnSuperOperators is Ownable {\r\n\r\n    event SetLuxOnAdmin(address indexed luxOnAdminAddress);\r\n    event SetOperator(string indexed operator);\r\n\r\n    address private luxOnAdminAddress;\r\n    string private operator;\r\n\r\n    constructor(\r\n        string memory _operator,\r\n        address _luxOnAdminAddress\r\n    ) {\r\n        operator = _operator;\r\n        luxOnAdminAddress = _luxOnAdminAddress;\r\n    }\r\n\r\n    modifier onlySuperOperator() {\r\n        require(LuxOnAdmin(luxOnAdminAddress).isSuperOperator(operator, msg.sender), \"LuxOnSuperOperators: not super operator\");\r\n        _;\r\n    }\r\n\r\n    function getLuxOnAdmin() public view returns (address) {\r\n        return luxOnAdminAddress;\r\n    }\r\n\r\n    function getOperator() public view returns (string memory) {\r\n        return operator;\r\n    }\r\n\r\n    function setLuxOnAdmin(address _luxOnAdminAddress) external onlyOwner {\r\n        luxOnAdminAddress = _luxOnAdminAddress;\r\n        emit SetLuxOnAdmin(_luxOnAdminAddress);\r\n    }\r\n\r\n    function setOperator(string memory _operator) external onlyOwner {\r\n        operator = _operator;\r\n        emit SetOperator(_operator);\r\n    }\r\n\r\n    function isSuperOperator(address spender) public view returns (bool) {\r\n        return LuxOnAdmin(luxOnAdminAddress).isSuperOperator(operator, spender);\r\n    }\r\n}\r\n// File: contracts/Admin/LuxOnService.sol\r\n\r\n\r\npragma solidity ^0.8.15;\r\n\r\n\r\ncontract LuxOnService is Ownable {\r\n    mapping(address => bool) isInspection;\r\n\r\n    event Inspection(address contractAddress, uint256 timestamp, bool live);\r\n\r\n    function isLive(address contractAddress) public view returns (bool) {\r\n        return !isInspection[contractAddress];\r\n    }\r\n\r\n    function setInspection(address[] memory contractAddresses, bool _isInspection) external onlyOwner {\r\n        for (uint256 i = 0; i < contractAddresses.length; i++) {\r\n            isInspection[contractAddresses[i]] = _isInspection;\r\n            emit Inspection(contractAddresses[i], block.timestamp, _isInspection);\r\n        }\r\n    }\r\n}\r\n// File: contracts/LUXON/utils/LuxOnLive.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\n\r\ncontract LuxOnLive is Ownable {\r\n    address private luxOnService;\r\n\r\n    event SetLuxOnService(address indexed luxOnService);\r\n\r\n    constructor(\r\n        address _luxOnService\r\n    ) {\r\n        luxOnService = _luxOnService;\r\n    }\r\n\r\n    function getLuxOnService() public view returns (address) {\r\n        return luxOnService;\r\n    }\r\n\r\n    function setLuxOnService(address _luxOnService) external onlyOwner {\r\n        luxOnService = _luxOnService;\r\n        emit SetLuxOnService(_luxOnService);\r\n    }\r\n\r\n    modifier isLive() {\r\n        require(LuxOnService(luxOnService).isLive(address(this)), \"LuxOnLive: not live\");\r\n        _;\r\n    }\r\n}\r\n// File: contracts/Admin/data/rank/UserRankData.sol\r\n\r\n\r\npragma solidity ^0.8.18;\r\n\r\n\r\n\r\ncontract UserRankData is Ownable {\r\n\r\n    // address => season => userRank(tier And badge)\r\n    mapping(address => mapping(uint256 => UserRank)) public userRank;\r\n\r\n    function getTier(address _address, uint256 season) public view returns (uint256) {\r\n        return userRank[_address][season].tier;\r\n    }\r\n\r\n    function getBadge(address _address, uint256 season) public view returns (uint256) {\r\n        return userRank[_address][season].badge;\r\n    }\r\n\r\n    // function getUserRank(address _address, uint256 season) public view returns (UserRank) {\r\n    //     return userRank[_address][season];\r\n    // }\r\n\r\n    function getUserRankInfo(address user, uint256 season ) public view returns (uint256, uint256) {\r\n        return (\r\n        getTier(user, season),\r\n        getBadge(user, season)\r\n        );\r\n    }\r\n\r\n    function setUserRankDataMany(SetUserRank[] memory _setUserRank) external onlyOwner {\r\n        for (uint i = 0; i < _setUserRank.length; i++) {\r\n            address userAddress = _setUserRank[i].userAddress;\r\n            uint256 season = _setUserRank[i].season;\r\n            delete userRank[userAddress][season];\r\n            UserRank storage userRank_ = userRank[userAddress][season];\r\n\r\n            userRank_.tier = _setUserRank[i].tier;\r\n            userRank_.badge = _setUserRank[i].badge;\r\n        }\r\n    }\r\n\r\n    function setUserRankData(SetUserRank memory _setUserRank) external onlyOwner {\r\n        delete userRank[_setUserRank.userAddress][_setUserRank.season];\r\n        UserRank storage userRank_ = userRank[_setUserRank.userAddress][_setUserRank.season];\r\n\r\n        userRank_.tier = _setUserRank.tier;\r\n        userRank_.badge = _setUserRank.badge;\r\n    }\r\n}\r\n// File: contracts/Admin/data/rank/RankRewardCalenderData.sol\r\n\r\n\r\npragma solidity ^0.8.18;\r\n\r\n\r\n\r\ncontract RankRewardCalenderData is Ownable {\r\n    uint256 public lastId = 0;\r\n    // id => type\r\n    mapping(uint256 => RankRewardCalender) public calendars;\r\n    function getLsatId() public view returns (uint256) {\r\n        return lastId;\r\n    }\r\n\r\n    function getRankRewardCalendar(uint256 id) public view returns (RankRewardCalender memory) {\r\n        return calendars[id];\r\n    }\r\n\r\n    function getRankRewardCalendars(uint256[] memory ids) public view returns (RankRewardCalender[] memory) {\r\n        RankRewardCalender[] memory _calendars = new RankRewardCalender[](ids.length);\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            _calendars[i] = calendars[ids[i]];\r\n        }\r\n        return _calendars;\r\n    }\r\n\r\n    function setRankRewardCalendars(RankRewardCalender[] memory rankRewardCalenders) external onlyOwner {\r\n        for (uint256 i = 0; i < rankRewardCalenders.length; i++) {\r\n            calendars[rankRewardCalenders[i].id] = rankRewardCalenders[i];\r\n            if (lastId < rankRewardCalenders[i].id) {\r\n                lastId = rankRewardCalenders[i].id;\r\n            }\r\n        }\r\n    }\r\n\r\n    function setRankRewardCalendar(RankRewardCalender memory rankRewardCalender) external onlyOwner {\r\n        calendars[rankRewardCalender.id] = rankRewardCalender;\r\n        if (lastId < rankRewardCalender.id) {\r\n            lastId = rankRewardCalender.id;\r\n        }\r\n    }\r\n}\r\n// File: contracts/Admin/data/rank/RankRewardData.sol\r\n\r\n\r\npragma solidity ^0.8.18;\r\n\r\n\r\n\r\ncontract RankRewardData is Ownable {\r\n\r\n    mapping(uint256 => RankReward) rankRewardMap;\r\n    mapping(uint256 => RankBadgeReward) rankBadgeRewardMap;\r\n\r\n    function getRankReward(uint256 id) public view returns (RankReward memory) {\r\n        return rankRewardMap[id];\r\n    }\r\n\r\n    function getRankRewards(uint256[] memory id) public view returns (RankReward[] memory) {\r\n        RankReward[] memory rankRewards = new RankReward[](id.length);\r\n        for (uint256 i = 0; i < id.length; i++) {\r\n            rankRewards[i] = rankRewardMap[id[i]];\r\n        }\r\n        return rankRewards;\r\n    }\r\n\r\n    function getRankBadgeReward(uint256 id) public view returns (RankBadgeReward memory) {\r\n        return rankBadgeRewardMap[id];\r\n    }\r\n\r\n    function getRankBadgeRewards(uint256[] memory id) public view returns (RankBadgeReward[] memory) {\r\n        RankBadgeReward[] memory rankBadgeRewards = new RankBadgeReward[](id.length);\r\n        for (uint256 i = 0; i < id.length; i++) {\r\n            rankBadgeRewards[i] = rankBadgeRewardMap[id[i]];\r\n        }\r\n        return rankBadgeRewards;\r\n    }\r\n\r\n    function setRankRewardDataMany(RankReward[] memory _rankRewardData) external onlyOwner {\r\n        for (uint i = 0; i < _rankRewardData.length; i++) {\r\n            uint id = _rankRewardData[i].id;\r\n            delete rankRewardMap[id];\r\n            RankReward storage rankReward_ = rankRewardMap[id];\r\n\r\n            rankReward_.id = id;\r\n            rankReward_.season = _rankRewardData[i].season;\r\n            rankReward_.tier = _rankRewardData[i].tier;\r\n            rankReward_.receiveType = _rankRewardData[i].receiveType;\r\n            rankReward_.rewardType = _rankRewardData[i].rewardType;\r\n            rankReward_.reward = _rankRewardData[i].reward;\r\n            rankReward_.rewardAmount = _rankRewardData[i].rewardAmount;\r\n            rankReward_.isValid = _rankRewardData[i].isValid;\r\n        }\r\n    }\r\n\r\n    function setRankRewardData(RankReward memory _rankRewardData) external onlyOwner {\r\n        delete rankRewardMap[_rankRewardData.id];\r\n        RankReward storage rankReward_ = rankRewardMap[_rankRewardData.id];\r\n\r\n        rankReward_.id = _rankRewardData.id;\r\n        rankReward_.season = _rankRewardData.season;\r\n        rankReward_.tier = _rankRewardData.tier;\r\n        rankReward_.receiveType = _rankRewardData.receiveType;\r\n        rankReward_.rewardType = _rankRewardData.rewardType;\r\n        rankReward_.reward = _rankRewardData.reward;\r\n        rankReward_.rewardAmount = _rankRewardData.rewardAmount;\r\n        rankReward_.isValid = _rankRewardData.isValid;\r\n    }\r\n\r\n    function setRankBadgeRewardDataMany(RankBadgeReward[] memory _rankBadgeRewardData) external onlyOwner {\r\n        for (uint i = 0; i < _rankBadgeRewardData.length; i++) {\r\n            uint id = _rankBadgeRewardData[i].id;\r\n            delete rankBadgeRewardMap[id];\r\n            RankBadgeReward storage rankBadgeReward_ = rankBadgeRewardMap[id];\r\n\r\n            rankBadgeReward_.id = id;\r\n            rankBadgeReward_.season = _rankBadgeRewardData[i].season;\r\n            rankBadgeReward_.badgeType = _rankBadgeRewardData[i].badgeType;\r\n            rankBadgeReward_.receiveType = _rankBadgeRewardData[i].receiveType;\r\n            rankBadgeReward_.rewardType = _rankBadgeRewardData[i].rewardType;\r\n            rankBadgeReward_.reward = _rankBadgeRewardData[i].reward;\r\n            rankBadgeReward_.rewardAmount = _rankBadgeRewardData[i].rewardAmount;\r\n            rankBadgeReward_.isValid = _rankBadgeRewardData[i].isValid;\r\n        }\r\n    }\r\n\r\n    function setRankBadgeRewardData(RankBadgeReward memory _rankBadgeRewardData) external onlyOwner {\r\n        delete rankBadgeRewardMap[_rankBadgeRewardData.id];\r\n        RankBadgeReward storage rankBadgeReward_ = rankBadgeRewardMap[_rankBadgeRewardData.id];\r\n\r\n        rankBadgeReward_.id = _rankBadgeRewardData.id;\r\n        rankBadgeReward_.season = _rankBadgeRewardData.season;\r\n        rankBadgeReward_.badgeType = _rankBadgeRewardData.badgeType;\r\n        rankBadgeReward_.receiveType = _rankBadgeRewardData.receiveType;\r\n        rankBadgeReward_.rewardType = _rankBadgeRewardData.rewardType;\r\n        rankBadgeReward_.reward = _rankBadgeRewardData.reward;\r\n        rankBadgeReward_.rewardAmount = _rankBadgeRewardData.rewardAmount;\r\n        rankBadgeReward_.isValid = _rankBadgeRewardData.isValid;\r\n    }\r\n}\r\n// File: contracts/Admin/LuxOnAuthority.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\ncontract LuxOnAuthority is Ownable {\r\n    mapping (address => bool) blacklist;\r\n\r\n    event Blacklist(address userAddress, uint256 timestamp, bool live);\r\n\r\n    function isBlacklist(address user) public view returns (bool){\r\n        return blacklist[user];\r\n    }\r\n\r\n    function setBlacklist(address[] memory userAddresses, bool _isBlacklist) external onlyOwner {\r\n        for (uint256 i = 0; i < userAddresses.length; i++) {\r\n            blacklist[userAddresses[i]] = _isBlacklist;\r\n            emit Blacklist(userAddresses[i], block.timestamp, _isBlacklist);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File: contracts/LUXON/utils/LuxOnBlacklist.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\n\r\n\r\ncontract LuxOnBlacklist is Ownable {\r\n    address private luxOnAuthority;\r\n\r\n    event SetLuxOnAuthority (address indexed luxOnAuthority);\r\n\r\n    constructor(\r\n        address _luxOnAuthority\r\n    ){\r\n        luxOnAuthority = _luxOnAuthority;\r\n    }\r\n\r\n    function getLuxOnAuthority() external view returns(address) {\r\n        return luxOnAuthority;\r\n    }\r\n\r\n    function setLuxOnAuthority(address _luxOnAuthority) external onlyOwner{\r\n        luxOnAuthority = _luxOnAuthority;\r\n    }\r\n\r\n    function getIsInBlacklist(address _userAddress) external view returns(bool) {\r\n        return LuxOnAuthority(luxOnAuthority).isBlacklist(_userAddress);\r\n    }\r\n\r\n    modifier isBlacklist(address _userAddress) {\r\n        // blacklist\uc5d0 \ub4f1\ub85d\ub41c \uc720\uc800 => true / \ub4f1\ub85d\ub418\uc9c0 \uc54a\uc740 \uc720\uc800 => false ---> !\ub97c \ubd99\uc5ec\uc11c \ubc18\ub300 \uac12\uc73c\ub85c \uc5d0\ub7ec \ubc1c\uc0dd (true\uba74 \uc5d0\ub7ec \ubc1c\uc0dd)\r\n        require(LuxOnAuthority(luxOnAuthority).isBlacklist(_userAddress) == false, \"LuxOnBlacklist: This user is on the blacklist\");\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n\r\n// File: contracts/Admin/data/DataAddress.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\ncontract DspDataAddress is Ownable {\r\n\r\n    event SetDataAddress(string indexed name, address indexed dataAddress, bool indexed isValid);\r\n\r\n    struct DataAddressInfo {\r\n        string name;\r\n        address dataAddress;\r\n        bool isValid;\r\n    }\r\n\r\n    mapping(string => DataAddressInfo) private dataAddresses;\r\n\r\n    function getDataAddress(string memory _name) public view returns (address) {\r\n        require(dataAddresses[_name].isValid, \"this data address is not valid\");\r\n        return dataAddresses[_name].dataAddress;\r\n    }\r\n\r\n    function setDataAddress(DataAddressInfo memory _dataAddressInfo) external onlyOwner {\r\n        dataAddresses[_dataAddressInfo.name] = _dataAddressInfo;\r\n        emit SetDataAddress(_dataAddressInfo.name, _dataAddressInfo.dataAddress, _dataAddressInfo.isValid);\r\n    }\r\n\r\n    function setDataAddresses(DataAddressInfo[] memory _dataAddressInfos) external onlyOwner {\r\n        for (uint256 i = 0; i < _dataAddressInfos.length; i++) {\r\n            dataAddresses[_dataAddressInfos[i].name] = _dataAddressInfos[i];\r\n            emit SetDataAddress(_dataAddressInfos[i].name, _dataAddressInfos[i].dataAddress, _dataAddressInfos[i].isValid);\r\n        }\r\n    }\r\n}\r\n// File: contracts/LUXON/utils/LuxOnData.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\n\r\ncontract LuxOnData is Ownable {\r\n    address private luxonData;\r\n    event SetLuxonData(address indexed luxonData);\r\n\r\n    constructor(\r\n        address _luxonData\r\n    ) {\r\n        luxonData = _luxonData;\r\n    }\r\n\r\n    function getLuxOnData() public view returns (address) {\r\n        return luxonData;\r\n    }\r\n\r\n    function setLuxOnData(address _luxonData) external onlyOwner {\r\n        luxonData = _luxonData;\r\n        emit SetLuxonData(_luxonData);\r\n    }\r\n\r\n    function getDataAddress(string memory _name) public view returns (address) {\r\n        return DspDataAddress(luxonData).getDataAddress(_name);\r\n    }\r\n}\r\n// File: contracts/LUXON/rank/RankStorage.sol\r\n\r\n\r\npragma solidity ^0.8.18;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract RankStorage is LuxOnSuperOperators, LuxOnData {\r\n    event SetReceive(address indexed userAddress, uint256 indexed rewardType, uint256 indexed receiveType);\r\n\r\n    using SafeMath for uint256;\r\n\r\n    // address => type(tier or badge) => receiveType => isReceive\r\n    mapping(address => mapping(uint256 => mapping(uint256 => bool) )) public userReceiveState;\r\n    //    // address => season => tier\r\n    //    mapping(address => mapping(uint256 => uint256)) public userTier;\r\n    //    // address => season => badgeType\r\n    //    mapping(address => mapping(uint256 => uint256)) public userBadgeType;\r\n    // address => type => receiveType => time\r\n    mapping(address => mapping(uint256 => mapping(uint256 => uint256) )) public userReceiveTime;\r\n\r\n    constructor(\r\n        address dataAddress,\r\n        string memory operator,\r\n        address luxOnAdmin\r\n    ) LuxOnData(dataAddress) LuxOnSuperOperators(operator, luxOnAdmin) {}\r\n\r\n    function getReceiveState(address _address, uint256 rewardType, uint256 receiveType) public view returns (bool) {\r\n        return userReceiveState[_address][rewardType][receiveType];\r\n    }\r\n\r\n    //    function getTier(address _address, uint256 season) public view returns (uint256) {\r\n    //        return userTier[_address][season];\r\n    //    }\r\n    //\r\n    //    function getBadgeType(address _address, uint256 season) public view returns (uint256) {\r\n    //        return userBadgeType[_address][season];\r\n    //    }\r\n\r\n    function getReceiveTime(address _address, uint256 rewardType, uint256 receiveType) public view returns(uint256) {\r\n        return userReceiveTime[_address][rewardType][receiveType];\r\n    }\r\n\r\n    function getUserRankInfo(address user, uint256 rewardType, uint256 receiveType ) public view returns (bool, uint256) {\r\n        return (\r\n        getReceiveState(user, rewardType, receiveType),\r\n        getReceiveTime(user, rewardType, receiveType)\r\n        );\r\n    }\r\n\r\n    function resetReceiveState(address _address, uint256 rewardType, uint256 receiveType) external onlySuperOperator {\r\n        userReceiveState[_address][rewardType][receiveType] = false;\r\n        userReceiveTime[_address][rewardType][receiveType] = 0;\r\n    }\r\n\r\n    function setReceive(address _address, uint256 rewardType, uint256 receiveType) external onlySuperOperator {\r\n        userReceiveState[_address][rewardType][receiveType] = true;\r\n        userReceiveTime[_address][rewardType][receiveType] = block.timestamp;\r\n        emit SetReceive(_address, rewardType, receiveType);\r\n    }\r\n}\r\n\r\n// File: contracts/LUXON/utils/IERC20LUXON.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.16;\r\n\r\ninterface IERC20LUXON {\r\n    function paybackFrom() external view returns (address);\r\n\r\n    function addAllowanceIfNeeded(address owner, address spender, uint256 amountNeeded) external returns (bool success);\r\n    function approveFor(address owner, address spender, uint256 amount) external returns (bool success);\r\n\r\n    function paybackByMint(address to, uint256 amount) external;\r\n    function paybackByTransfer(address to, uint256 amount) external;\r\n    function burnFor(address owner, uint256 amount) external returns (bool);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/LUXON/utils/IERC1155LUXON.sol\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\ninterface IERC1155LUXON {\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, uint256 amount, bytes memory data) external;\r\n    function getValueChipType() external view returns(uint32);\r\n    function mint(address account, uint256 id, uint256 amount, bytes memory data) external;\r\n}\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n    /**\r\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\r\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\r\n     *\r\n     * NOTE: To accept the transfer, this must return\r\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n     * (i.e. 0xf23a6e61, or its own function selector).\r\n     *\r\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\r\n     * @param from The address which previously owned the token\r\n     * @param id The ID of the token being transferred\r\n     * @param value The amount of tokens being transferred\r\n     * @param data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n     */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n\r\n    /**\r\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\r\n     * been updated.\r\n     *\r\n     * NOTE: To accept the transfer(s), this must return\r\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n     * (i.e. 0xbc197c81, or its own function selector).\r\n     *\r\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n     * @param from The address which previously owned the token\r\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n     * @param data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n     */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\r\n *\r\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\r\n * stuck.\r\n *\r\n * @dev _Available since v3.1._\r\n */\r\ncontract ERC1155Holder is ERC1155Receiver {\r\n    function onERC1155Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(\r\n        address,\r\n        address,\r\n        uint256[] memory,\r\n        uint256[] memory,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/LUXON/rank/SendRankReward.sol\r\n\r\n\r\npragma solidity ^0.8.18;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import \"./IRankStorage.sol\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract SendRankReward is ReentrancyGuard, LuxOnData, ERC1155Holder, LuxOnLive, LuxOnBlacklist {\r\n    event ReceiveRankReward(address indexed user, uint256 indexed id, uint256 receiveType);\r\n    event SendReward(address indexed user, address indexed to, address indexed tokenAddress, uint256 tokenType, uint256 reward, uint256 rewardAmount);\r\n\r\n    address constant burnAddress = 0x000000000000000000000000000000000000dEaD;\r\n    uint256 constant errorNo = 9999;\r\n\r\n    RankStorage public rankStorage;\r\n    // goods type => address\r\n    mapping(uint256 => RewardInfo) public rewardAddresses;\r\n\r\n    constructor(\r\n        address dataAddress,\r\n        address luxonService,\r\n        address _rankStorage,\r\n        address luxonAuthority\r\n    ) LuxOnData(dataAddress) LuxOnLive(luxonService) LuxOnBlacklist(luxonAuthority){\r\n        rankStorage = RankStorage(_rankStorage);\r\n    }\r\n\r\n    function setRewardAddress(RewardInfo[] memory rewardInfos) external onlyOwner {\r\n        for (uint256 i = 0; i < rewardInfos.length; i++) {\r\n            rewardAddresses[rewardInfos[i].goodsType] = rewardInfos[i];\r\n        }\r\n    }\r\n\r\n    function setRankStorageAddress(address _rankStorage) external onlyOwner {\r\n        rankStorage = RankStorage(_rankStorage);\r\n    }\r\n\r\n    function withdraw() external onlyOwner nonReentrant isBlacklist(msg.sender){\r\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\"\");\r\n        require(success, \"Transfer failed.\");\r\n    }\r\n\r\n    function receiveRankReward(uint256 id) public nonReentrant isBlacklist(msg.sender){\r\n        RankRewardCalender memory rankRewardCalender = RankRewardCalenderData(getDataAddress(\"RankRewardCalenderData\")).getRankRewardCalendar(id);\r\n\r\n        checkRewardReceiveValid(rankRewardCalender);\r\n\r\n        (bool receiveState, uint256 receiveTime) = rankStorage.getUserRankInfo(msg.sender, uint256(rankRewardCalender.rewardType), uint256(rankRewardCalender.receiveType));\r\n        require(receiveTime < rankRewardCalender.startAt, \"already receive reward\");\r\n\r\n        if (uint256(RankRewardType.RankTier) == rankRewardCalender.rewardType) {\r\n            // tier check\r\n            uint256 tier = UserRankData(getDataAddress(\"UserRankData\")).getTier(msg.sender, rankRewardCalender.season);\r\n            require(uint256(RankTier.NONE) != tier, \"user tier is none\");\r\n\r\n            uint256[] memory rewardIds = rankRewardCalender.rewardIds.rewardId[tier];\r\n            RankReward[] memory rankRewards = RankRewardData(getDataAddress(\"RankRewardData\")).getRankRewards(rewardIds);\r\n\r\n            Reward[] memory rewards = new Reward[](rankRewards.length);\r\n            for (uint256 i = 0; i < rankRewards.length; i++) {\r\n\r\n                require(rankRewardCalender.receiveType == rankRewards[i].receiveType, \"Invalid Data: RewardCalender receiveType Not Match RewardData Receive Type\");\r\n                require(tier == rankRewards[i].tier, \"Invalid Data: RewardData tier Not Match user tier\");\r\n                Reward memory reward = rewards[i];\r\n                reward.rewardType = rankRewards[i].rewardType;\r\n                reward.reward = rankRewards[i].reward;\r\n                reward.rewardAmount = rankRewards[i].rewardAmount;\r\n            }\r\n            require(0 != rewards.length, \"not exist reward data\");\r\n            sendReward(msg.sender, rewards);\r\n        } else if (uint256(RankRewardType.Badge) == rankRewardCalender.rewardType) {\r\n            uint256 badge = UserRankData(getDataAddress(\"UserRankData\")).getBadge(msg.sender, rankRewardCalender.season);\r\n            require(uint256(BadgeType.NONE) != badge, \"user badge is none\");\r\n\r\n            for (uint i = 1; i <= badge; i++) {\r\n                uint256[] memory rewardIds = rankRewardCalender.rewardIds.rewardId[i];\r\n                RankBadgeReward[] memory rankBadgeRewards = RankRewardData(getDataAddress(\"RankRewardData\")).getRankBadgeRewards(rewardIds);\r\n                Reward[] memory rewards = new Reward[](rankBadgeRewards.length);\r\n\r\n                for(uint j = 0; j < rankBadgeRewards.length; j++) {\r\n                    require(rankRewardCalender.receiveType == rankBadgeRewards[j].receiveType, \"Invalid Data: RewardCalender receiveType Not Match RewardData Receive Type\");\r\n                    require(rankBadgeRewards[j].badgeType <= badge, \"Invalid Data: RewardData badge Not Match user badge\");\r\n                    Reward memory reward = rewards[j];\r\n                    reward.rewardType = rankBadgeRewards[j].rewardType;\r\n                    reward.reward = rankBadgeRewards[j].reward;\r\n                    reward.rewardAmount = rankBadgeRewards[j].rewardAmount;\r\n                }\r\n                require(0 != rewards.length, \"not exist reward data\");\r\n                sendReward(msg.sender, rewards);\r\n            }\r\n        }\r\n\r\n        rankStorage.setReceive(msg.sender, rankRewardCalender.rewardType, rankRewardCalender.receiveType);\r\n        emit ReceiveRankReward(msg.sender, id, rankRewardCalender.receiveType);\r\n    }\r\n\r\n    function checkRewardReceiveValid(RankRewardCalender memory rankRewardCalender) private view {\r\n        require(rankRewardCalender.isValid, \"rank reward not valid\");\r\n        require(rankRewardCalender.startAt <= block.timestamp && block.timestamp < rankRewardCalender.endAt, \"rank reward not open\");\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    function sendReward(address _to, Reward[] memory _rewards) private {\r\n        for (uint256 i = 0; i < _rewards.length; i++) {\r\n            RewardInfo memory rewardInfo = rewardAddresses[_rewards[i].rewardType];\r\n            require(rewardInfo.isValid, \"reward not valid\");\r\n            if (uint256(TokenType.ERC1155) == rewardInfo.tokenType) {\r\n                IERC1155LUXON(rewardInfo.tokenAddress).mint(_to, _rewards[i].reward, _rewards[i].rewardAmount,\"\");\r\n            } else if (uint256(TokenType.ERC20) == rewardInfo.tokenType) {\r\n                IERC20LUXON(rewardInfo.tokenAddress).transfer(_to, _rewards[i].rewardAmount);\r\n            } else if (uint256(TokenType.ERC721) == rewardInfo.tokenType) {\r\n                IERC721(rewardInfo.tokenAddress).transferFrom(address(this), _to, _rewards[i].reward);\r\n            } else {\r\n                revert(\"INVALID Reward type\");\r\n            }\r\n            emit SendReward(msg.sender, _to, rewardInfo.tokenAddress, uint256(rewardInfo.tokenType), _rewards[i].reward, _rewards[i].rewardAmount);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dataAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"luxonService\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rankStorage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"luxonAuthority\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receiveType\",\"type\":\"uint256\"}],\"name\":\"ReceiveRankReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"SendReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"luxOnAuthority\",\"type\":\"address\"}],\"name\":\"SetLuxOnAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"luxOnService\",\"type\":\"address\"}],\"name\":\"SetLuxOnService\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"luxonData\",\"type\":\"address\"}],\"name\":\"SetLuxonData\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getDataAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getIsInBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLuxOnAuthority\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLuxOnData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLuxOnService\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rankStorage\",\"outputs\":[{\"internalType\":\"contract RankStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"receiveRankReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardAddresses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"goodsType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_luxOnAuthority\",\"type\":\"address\"}],\"name\":\"setLuxOnAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_luxonData\",\"type\":\"address\"}],\"name\":\"setLuxOnData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_luxOnService\",\"type\":\"address\"}],\"name\":\"setLuxOnService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rankStorage\",\"type\":\"address\"}],\"name\":\"setRankStorageAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"goodsType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"internalType\":\"struct RewardInfo[]\",\"name\":\"rewardInfos\",\"type\":\"tuple[]\"}],\"name\":\"setRewardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SendRankReward", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000047e02786b3aefe45f4db89d296b5b9c5d7ed6c530000000000000000000000008186780f64aa472c16874464d21485f60826c60d0000000000000000000000004e317def8e65ad2bb544c0a5e2e922cdc66933ef00000000000000000000000017cb56b0825a80402a52a67672cb0cfd50b0d483", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c9af80468f1f13a3073fa7f4576c20e44af8bbbd66f59645e49498cccc7007b2"}