{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\ninterface IERC20Token {\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ncontract Staking {\r\n    IERC20Token private stakingToken;\r\n\r\n    uint256 public interestPerSecond = 4756468798; //formula (10^18 * interestInPercents / 100) / 365 / 24 / 60 / 60\r\n    address public owner;\r\n    address[] private stakers;\r\n    uint256 public totalValueLocked;\r\n\r\n    struct StakingInfo {\r\n        address owner;\r\n        uint256 stakingBalance;\r\n        uint256 holdStart;\r\n        uint256 accruedRewards;\r\n        uint256 paidOutRewards;\r\n        bool hasStaked;\r\n        bool isStaking;\r\n    }\r\n\r\n    mapping(address => StakingInfo) public stakingInfo;\r\n\r\n    bool public stopped = false;\r\n\r\n    modifier runIn() {\r\n        require(!stopped);\r\n        _;\r\n    }\r\n    modifier stopIn() {\r\n        require(stopped);\r\n        _;\r\n    }\r\n\r\n    event Deposit(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 timestamp,\r\n        uint256 TVL\r\n    );\r\n    event Withdraw(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 timestamp,\r\n        uint256 TVL\r\n    );\r\n\r\n    constructor(address _token) {\r\n        stakingToken = IERC20Token(_token);\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function updateStoped(bool _stopped) external {\r\n        require(msg.sender == owner, \"You are not the owner of the contract\");\r\n        stopped = _stopped;\r\n    }\r\n\r\n    function setInterest(uint256 _newInterest) public returns (bool) {\r\n        require(msg.sender == owner, \"You are not the owner of the contract\");\r\n        require(_newInterest > 0, \"Interset should be more than 0\");\r\n        // for (uint8 i = 0; i < stakers.length; i++) {\r\n        //     if (stakingInfo[stakers[i]].isStaking) {\r\n        //         uint256 holdPeriod = block.timestamp -\r\n        //             stakingInfo[stakers[i]].holdStart;\r\n        //         uint256 reward = (holdPeriod * interestPerSecond) *\r\n        //             (stakingInfo[stakers[i]].stakingBalance / 1e18);\r\n        //         stakingInfo[stakers[i]].accruedRewards =\r\n        //             stakingInfo[stakers[i]].accruedRewards +\r\n        //             reward;\r\n        //         stakingInfo[stakers[i]].holdStart = block.timestamp;\r\n        //     }\r\n        // }\r\n        interestPerSecond = _newInterest;\r\n        return true;\r\n    }\r\n\r\n    function stakeTokens(uint256 _amount) public runIn {\r\n        require(_amount > 0, \"You cannot stake nothing\");\r\n        uint256 _senderBalance = stakingToken.balanceOf(msg.sender);\r\n        require(_senderBalance >= _amount, \"You do not have enough tokens\");\r\n\r\n        if (stakingInfo[msg.sender].owner == address(0)) {\r\n            stakingInfo[msg.sender] = StakingInfo(\r\n                msg.sender,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                false,\r\n                false\r\n            );\r\n        }\r\n\r\n        StakingInfo storage _stakingInfo = stakingInfo[msg.sender];\r\n        if (_stakingInfo.isStaking) {\r\n            uint256 holdPeriod = block.timestamp - _stakingInfo.holdStart;\r\n            uint256 reward = (holdPeriod * interestPerSecond) *\r\n                (_stakingInfo.stakingBalance / 1e18);\r\n            _stakingInfo.accruedRewards = _stakingInfo.accruedRewards + reward;\r\n        }\r\n        bool success = stakingToken.transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            _amount\r\n        );\r\n        require(\r\n            success == true,\r\n            \"You could not statke token. Failed to transfer token.\"\r\n        );\r\n\r\n        _stakingInfo.stakingBalance = _stakingInfo.stakingBalance + _amount;\r\n        _stakingInfo.holdStart = block.timestamp;\r\n        if (!_stakingInfo.hasStaked) {\r\n            stakers.push(msg.sender);\r\n        }\r\n        _stakingInfo.isStaking = true;\r\n        _stakingInfo.hasStaked = true;\r\n        totalValueLocked = totalValueLocked + _amount;\r\n\r\n        emit Deposit(msg.sender, _amount, block.timestamp, totalValueLocked);\r\n    }\r\n\r\n    function claimableRewards() public view returns (uint256) {\r\n        StakingInfo storage _stakingInfo = stakingInfo[msg.sender];\r\n        if (_stakingInfo.holdStart == 0) return _stakingInfo.accruedRewards;\r\n\r\n        if (_stakingInfo.stakingBalance == 0)\r\n            return _stakingInfo.accruedRewards;\r\n        if (_stakingInfo.isStaking) {\r\n            uint256 holdPeriod = block.timestamp - _stakingInfo.holdStart;\r\n            uint256 reward = interestPerSecond *\r\n                (_stakingInfo.stakingBalance / 1e18) *\r\n                holdPeriod;\r\n            return _stakingInfo.accruedRewards + reward;\r\n        } else {\r\n            return _stakingInfo.accruedRewards;\r\n        }\r\n    }\r\n\r\n    function claimRewards() public {\r\n        StakingInfo storage _stakingInfo = stakingInfo[msg.sender];\r\n\r\n        if (_stakingInfo.isStaking) {\r\n            uint256 holdPeriod = block.timestamp - _stakingInfo.holdStart;\r\n            uint256 reward = interestPerSecond *\r\n                (_stakingInfo.stakingBalance / 1e18) *\r\n                holdPeriod;\r\n            _stakingInfo.accruedRewards = _stakingInfo.accruedRewards + reward;\r\n            _stakingInfo.paidOutRewards =\r\n                _stakingInfo.paidOutRewards +\r\n                _stakingInfo.accruedRewards;\r\n\r\n            if (_stakingInfo.accruedRewards > 0) {\r\n                bool success = stakingToken.transferFrom(\r\n                    owner,\r\n                    msg.sender,\r\n                    _stakingInfo.accruedRewards\r\n                );\r\n                require(\r\n                    success == true,\r\n                    \"You could not receive reward. Failed to transfer token.\"\r\n                );\r\n                _stakingInfo.accruedRewards = 0;\r\n            }\r\n            _stakingInfo.holdStart = block.timestamp;\r\n        } else {\r\n            if (_stakingInfo.accruedRewards > 0) {\r\n                bool success = stakingToken.transferFrom(\r\n                    owner,\r\n                    msg.sender,\r\n                    _stakingInfo.accruedRewards\r\n                );\r\n                require(\r\n                    success == true,\r\n                    \"You could not receive reward. Failed to transfer token.\"\r\n                );\r\n                _stakingInfo.paidOutRewards =\r\n                    _stakingInfo.paidOutRewards +\r\n                    _stakingInfo.accruedRewards;\r\n                _stakingInfo.accruedRewards = 0;\r\n            }\r\n            _stakingInfo.holdStart = 0;\r\n        }\r\n    }\r\n\r\n    function unstakeTokens(uint256 _amount) public {\r\n        StakingInfo storage _stakingInfo = stakingInfo[msg.sender];\r\n\r\n        require(\r\n            _stakingInfo.stakingBalance >= _amount,\r\n            \"Cannot unstake more than you staked\"\r\n        );\r\n        uint256 holdPeriod = block.timestamp - _stakingInfo.holdStart;\r\n        uint256 reward = interestPerSecond *\r\n            (_stakingInfo.stakingBalance / 1e18) *\r\n            holdPeriod;\r\n        _stakingInfo.accruedRewards = _stakingInfo.accruedRewards + reward;\r\n        bool success = stakingToken.transfer(msg.sender, _amount);\r\n        require(success == true, \"Something went wrong\");\r\n        _stakingInfo.stakingBalance = _stakingInfo.stakingBalance - _amount;\r\n        totalValueLocked = totalValueLocked - _amount;\r\n        if (_stakingInfo.stakingBalance > 0) {\r\n            _stakingInfo.isStaking = true;\r\n            _stakingInfo.holdStart = block.timestamp;\r\n        } else if (_stakingInfo.stakingBalance == 0) {\r\n            _stakingInfo.isStaking = false;\r\n            _stakingInfo.holdStart = 0;\r\n        }\r\n        emit Withdraw(msg.sender, _amount, block.timestamp, totalValueLocked);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TVL\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TVL\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newInterest\",\"type\":\"uint256\"}],\"name\":\"setInterest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakingBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holdStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accruedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidOutRewards\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasStaked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isStaking\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValueLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_stopped\",\"type\":\"bool\"}],\"name\":\"updateStoped\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Staking", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d247c2163d39263a1ab2391ad106c534aa3d2a48", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://da4392b682c3493fc8935c1633a84a0ca068d01654f6fcd7d2f28c9102ec2f6b"}