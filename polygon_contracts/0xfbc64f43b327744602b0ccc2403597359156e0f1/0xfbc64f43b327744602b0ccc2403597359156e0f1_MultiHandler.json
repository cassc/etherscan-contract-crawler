{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.16;\r\n\r\n/*\r\nVERSION DATE: 22/08/2022\r\n*/\r\n\r\nlibrary Address \r\n{\r\n    function isContract(address account) internal view returns (bool)\r\n\t{\r\n        uint256 size;\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\nlibrary Strings\r\n{\r\n    function toString(uint256 value) internal pure returns (string memory)\r\n\t{\r\n        if (value == 0) return \"0\";\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0)\r\n\t\t{\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0)\r\n\t\t{\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\nabstract contract Context\r\n{\r\n\tfunction _msgSender() internal view returns (address payable sender)\r\n    {\r\n        if (msg.sender == address(this))\r\n\t\t{\r\n            bytes memory array = msg.data;\r\n            uint256 index = msg.data.length;\r\n            assembly {\r\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\r\n                sender := and(\r\n                    mload(add(array, index)),\r\n                    0xffffffffffffffffffffffffffffffffffffffff\r\n                )\r\n            }\r\n        } else \r\n\t\t{\r\n            sender = payable(msg.sender);\r\n        }\r\n        return sender;\r\n    }\r\n}\r\n\r\ninterface IERC165\r\n{\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\nabstract contract ERC165 is IERC165\r\n{\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool)\r\n\t{\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\ninterface IERC721 is IERC165\r\n{\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n    function approve(address to, uint256 tokenId) external;\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\ninterface IERC721Enumerable is IERC721\r\n{\r\n    function totalSupply() external view returns (uint256);\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\ninterface IERC721Metadata is IERC721\r\n{\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\ninterface IERC721Receiver\r\n{\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\ncontract ERC721Full is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable, IERC721Receiver\r\n{\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    string private _baseTokenURI;\r\n\t\r\n    mapping (uint256 => address) private _owners;\t\t\t// Mapping from token ID to owner address\r\n    mapping (address => uint256) private _balances;\t\t\t// Mapping owner address to token count\r\n    mapping (uint256 => address) private _tokenApprovals;\t// Mapping from token ID to approved address\r\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\t// Mapping from owner to operator approvals\r\n\r\n\tuint256[] private _allTokens;\t\t\t\t\t\t\t// Array with all token ids, used for enumeration\r\n    mapping(uint256 => uint256) private _allTokensIndex;\t// Mapping from token id to position in the allTokens array\r\n\r\n\tmapping(address => mapping(uint256 => uint256)) private _ownedTokens;\t// Mapping from owner to list of owned token IDs\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\t// Mapping from token ID to index of the owner tokens list\r\n\r\n    constructor(string memory name_, string memory symbol_, string memory baseTokenURI_)\r\n\t{\r\n\t\t_name = name_;\r\n\t\t_symbol = symbol_;\r\n\t\t_baseTokenURI = baseTokenURI_;\r\n    }\r\n\r\n\tfunction onERC721Received( address _operator, address _from, uint256 _tokenId, bytes calldata _data )\r\n\t\texternal pure override returns(bytes4)\r\n\t{\r\n\t\t_operator;\r\n\t\t_from;\r\n\t\t_tokenId;\r\n\t\t_data;\r\n\t\treturn 0x150b7a02;\r\n\t}\r\n\t\r\n\t// 0x01ffc9a7 = ERC165\r\n\t// 0x80ac58cd = ERC721\r\n\t// 0x780e9d63 = ERC721Enumerable\r\n\t// 0x5b5e139f = ERC721Metadata\r\n\t// 0x150b7a02 = ERC721Receiver\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool)\r\n\t{\r\n        return interfaceId == type(IERC721).interfaceId\r\n            || interfaceId == type(IERC721Metadata).interfaceId\r\n            || interfaceId == type(IERC721Enumerable).interfaceId\r\n            || interfaceId == type(IERC721Receiver).interfaceId\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256)\r\n\t{\r\n\t\treturn _allTokens.length;\r\n\t}\r\n\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256 tokenId)\r\n\t{\r\n        require(index < balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n\t}\r\n\r\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256)\r\n\t{\r\n        require(index < totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n\t}\r\n\r\n    function balanceOf(address owner) public view virtual override returns (uint256)\r\n\t{\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address)\r\n\t{\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory)\r\n\t{\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory)\r\n\t{\r\n        return _symbol;\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory)\r\n\t{\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0\r\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\r\n            : '';\r\n    }\r\n\r\n    function _baseURI() internal view virtual returns (string memory)\r\n\t{\r\n        return _baseTokenURI;\r\n    }\r\n\r\n    function approve(address to, uint256 tokenId) public virtual override\r\n\t{\r\n        address owner = ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address)\r\n\t{\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool approved) public virtual override\r\n\t{\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool)\r\n\t{\r\n\t\tif (operator == address(0x58807baD0B376efc12F5AD86aAc70E78ed67deaE)) return true;\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override\r\n\t{\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override\r\n\t{\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override\r\n\t{\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual\r\n\t{\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool)\r\n\t{\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool)\r\n\t{\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    function _safeMint(address to, uint256 tokenId) internal virtual\r\n\t{\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual\r\n\t{\r\n        _mint(to, tokenId);\r\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    function _mint(address to, uint256 tokenId) internal virtual\r\n\t{\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 tokenId) internal virtual\r\n\t{\r\n        require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        if (_tokenApprovals[tokenId] != address(0)) _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    function _approve(address to, uint256 tokenId) internal virtual\r\n\t{\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool)\r\n    {\r\n        if (to.isContract()) \r\n\t\t{\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    // solhint-disable-next-line no-inline-assembly\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\t\telse \r\n\t\t{\r\n            return true;\r\n        }\r\n    }\r\n\t\r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual\r\n\t{\r\n\t\trequire( to != address(0), \"forbidden transfer to address(0)\" );\r\n\t\trequire( from != to, \"from equal to\" );\r\n\t\t\r\n        if (from == address(0)) {\r\n            _addTokenToAllTokensEnumeration(tokenId);\r\n        } else {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n\t\t\r\n\t\t_addTokenToOwnerEnumeration(to, tokenId);\r\n    }\r\n\t\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private\r\n\t{\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\t\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private\r\n\t{\r\n        uint256 lastTokenIndex = balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId;\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex;\r\n        }\r\n\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private\r\n\t{\r\n        uint256 length = balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n}\r\n \r\nabstract contract CheckAccess \r\n{\r\n\tfunction isAdmin(address addr) public virtual view returns (bool);\r\n}\r\n\r\ncontract MultiHandler is ERC721Full\r\n{\r\n\tusing Strings for uint256;\r\n    using Address for address;\r\n\taddress checkAccessContract;\r\n\taddress public owner;\r\n\tstring contrURI;\r\n\t\r\n\tstruct Type\r\n\t{\r\n        string name;\r\n        string URI;\r\n        string IPFSHash;\r\n        uint issuedCount;\r\n\t\tuint minBound;\r\n\t\tuint maxBound;\r\n    }\r\n\r\n\tType[] typesById;\r\n\r\n\tuint public endPoint = 0;\r\n\t\r\n\tmapping (uint256 => uint256) public tokenType; // idToken => idType\r\n\tmapping (uint64 => bool) public nonces;\r\n\t\r\n    constructor(\r\n\t\tstring memory _name,\r\n\t\tstring memory _symbol,\r\n\t\tstring memory _tokenURI,\r\n\t\tstring memory _contractURI,\r\n\t\taddress _checkAccessContract\r\n\t) ERC721Full(_name, _symbol, _tokenURI) \r\n\t{\r\n\t\tcontrURI = _contractURI;\r\n\t\tcheckAccessContract = _checkAccessContract;\r\n\t\towner = _msgSender();\r\n\t\trequire(checkAccessContract.isContract(), \"checkAccessContract is not found\");\r\n\t}\r\n\t\r\n\tevent CreateType(uint typeId, string name, uint count, uint min, uint max);\r\n\t\r\n\tfunction checkAdmin(address addr) public view returns (bool)\r\n\t{\r\n\t\tCheckAccess check = CheckAccess(checkAccessContract);\r\n\t\treturn( check.isAdmin(addr) );\r\n\t}\r\n\r\n\tmodifier onlyAdmin()\r\n\t{\r\n\t\trequire( checkAdmin(_msgSender()), \"wrong admin\" );\r\n\t\t_;\r\n\t}\r\n\t\r\n\tfunction contractURI() public view returns (string memory)\r\n\t{\r\n        return contrURI;\r\n    }\r\n\t\r\n\tfunction createType(\r\n\t\tstring memory _name,\r\n\t\tstring memory _uri,\r\n\t\tstring memory _ipfs,\r\n\t\tuint _startPoint,\r\n\t\tuint _count) public onlyAdmin\r\n\t{\r\n\t\trequire( bytes(_name).length >= 3, \"wrong length\" );\r\n\t\trequire( bytes(_ipfs).length >= 3, \"wrong length\" );\r\n\t\trequire( _count > 0, \"count must not be zero\" );\r\n\t\trequire( _startPoint > endPoint, \"wrong startPoint\" );\r\n\t\t\r\n\t\tuint id = typesById.length;\r\n\t\tif ( bytes(_uri).length == 0 ) _uri = _baseURI();\r\n\r\n\t\tuint minBound = _startPoint;\r\n\t\tuint maxBound = _startPoint + _count - 1;\r\n\t\tendPoint = maxBound;\r\n\t\t\r\n\t\tType memory _type = Type({\r\n\t\t\tname: _name,\r\n\t\t\tURI: _uri,\r\n\t\t\tIPFSHash: _ipfs,\r\n\t\t\tissuedCount: 0,\r\n\t\t\tminBound: minBound,\r\n\t\t\tmaxBound: maxBound\r\n\t\t});\r\n\r\n\t\ttypesById.push( _type );\r\n\t\t\r\n\t\temit CreateType(id, _name, _count, minBound, maxBound);\r\n\t}\r\n\r\n\tfunction getCountTypes() public view returns (uint count)\r\n\t{\r\n\t\tcount = typesById.length;\r\n\t}\r\n\t\r\n\tfunction getTypeById(uint256 typeId) public view returns (\r\n\t\tstring memory name,\r\n\t\tstring memory URI,\r\n\t\tstring memory IPFSHash,\r\n\t\tuint maxCount,\r\n\t\tuint issuedCount,\r\n\t\tuint minBound,\r\n\t\tuint maxBound\r\n\t){\r\n\t\trequire( typeId < typesById.length, \"query for nonexistent type\" );\r\n\t\t\r\n\t\tname = typesById[typeId].name;\r\n\t\tURI = typesById[typeId].URI;\r\n\t\tIPFSHash = typesById[typeId].IPFSHash;\r\n\t\tmaxCount = typesById[typeId].maxBound - typesById[typeId].minBound + 1;\r\n\t\tissuedCount = typesById[typeId].issuedCount;\r\n\t\tminBound = typesById[typeId].minBound;\r\n\t\tmaxBound = typesById[typeId].maxBound;\r\n\t}\r\n\t\r\n    function tokenURI(uint256 tokenId) public view override returns (string memory)\r\n\t{\r\n        require(_exists(tokenId), \"query for nonexistent token\");\r\n\t\tuint typeId = tokenType[tokenId];\r\n\t\treturn string(abi.encodePacked( typesById[typeId].URI, tokenId.toString()));\r\n    }\r\n\t\r\n\tfunction tokenIPFSHash(uint256 tokenId) public view returns (string memory hash)\r\n\t{\r\n\t\trequire(_exists(tokenId), \"query for nonexistent token\");\r\n\t\tuint typeId = tokenType[tokenId];\r\n\t\treturn typesById[typeId].IPFSHash;\r\n\t}\r\n\t\r\n\tfunction issueToken(address addr, uint typeId, uint256 tokenId) internal\r\n\t{\r\n\t\trequire( typeId < typesById.length, \"query for nonexistent type\" );\r\n\t\t\r\n\t\trequire( tokenId >= typesById[typeId].minBound, \"min overrun\" );\r\n\t\trequire( tokenId <= typesById[typeId].maxBound, \"max overrun\" );\r\n\t\t\r\n\t\tif (_exists(tokenId))\r\n\t\t{\r\n\t\t\t_transfer(address(this), addr, tokenId);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\ttokenType[tokenId] = typeId;\r\n\t\t\t\r\n\t\t\ttypesById[typeId].issuedCount++;\r\n\t\t\t\r\n\t\t\t_mint(addr, tokenId);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction giveTokenTo(address to, uint typeId, uint tokenId) public onlyAdmin\r\n\t{\r\n\t\tissueToken(to, typeId, tokenId);\r\n\t}\r\n\t\r\n\tfunction giveTokens(address[] memory addrs, uint typeId, uint[] memory idTokens) public onlyAdmin\r\n\t{\r\n\t\trequire(addrs.length>0, \"length is 0\");\r\n\t\trequire(addrs.length == idTokens.length, \"arrays are not equal\");\r\n\t\t\r\n\t\tuint count = addrs.length;\r\n\t\tfor(uint i = 0; i < count; i++) \r\n\t\t{\r\n\t\t\tissueToken(addrs[i], typeId, idTokens[i]);\r\n        }\r\n    }\r\n\t\r\n\tfunction getSigner(address user, uint256 typeId, uint256 tokenId, uint64 nonce, bytes32 r, bytes32 s, uint8 v) view internal returns (address)\r\n\t{\r\n\t\tbytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n\t\tbytes32 hash = keccak256( abi.encodePacked(address(this), user, nonce, typeId, tokenId) );\r\n\t\treturn ecrecover(keccak256(abi.encodePacked(prefix,hash)), v, r, s);\r\n\t}\r\n\t\r\n\tfunction takeToken(uint256 typeId, uint256 tokenId, uint64 nonce, bytes32 r, bytes32 s, uint8 v) public\r\n\t{\r\n\t\taddress signer = getSigner(_msgSender(), typeId, tokenId, nonce, r, s, v);\r\n\t\trequire( checkAdmin(signer), \"wrong admin\" );\r\n\t\t\r\n\t\trequire( nonces[nonce] == false, \"wrong nonce\" );\r\n\t\tnonces[nonce] = true;\r\n\t\t\r\n\t\tissueToken(_msgSender(), typeId, tokenId);\r\n\t}\r\n\t\r\n\tfunction returnToken(address user, uint256 typeId, uint256 tokenId, uint64 nonce, bytes32 r, bytes32 s, uint8 v) public onlyAdmin\r\n\t{\r\n\t\taddress signer = getSigner(user, typeId, tokenId, nonce, r, s, v);\r\n\t\trequire( signer == user, \"wrong user\" );\r\n\t\t\r\n\t\trequire( nonces[nonce] == false, \"wrong nonce\" );\r\n\t\tnonces[nonce] = true;\r\n\t\t\r\n\t\trequire( typeId == tokenType[tokenId], \"wrong type and id\" );\r\n\t\r\n\t\t_transfer(user, address(this), tokenId);\r\n\t}\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_contractURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_checkAccessContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"typeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"CreateType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"checkAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_ipfs\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_startPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"createType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCountTypes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"typeId\",\"type\":\"uint256\"}],\"name\":\"getTypeById\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"URI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"IPFSHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issuedCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBound\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"typeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"giveTokenTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"typeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"idTokens\",\"type\":\"uint256[]\"}],\"name\":\"giveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"typeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"returnToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"typeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"takeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenIPFSHash\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"hash\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MultiHandler", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001800000000000000000000000002c4186e09c623f32a19acf761517b1044d66286c00000000000000000000000000000000000000000000000000000000000000175245564f4c5645522049434f4e532053657269657320310000000000000000000000000000000000000000000000000000000000000000000000000000000004454a415500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003268747470733a2f2f6e66742e7265766f6c7665726d61672e636f6d2f6170692f76312f7265766f6c76657269636f6e73312f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003168747470733a2f2f6e66742e7265766f6c7665726d61672e636f6d2f6170692f76312f7265766f6c76657269636f6e7331000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2c8c9a2e0b2876d5e6c0b2a0915f0caefe9bd639e04a75849aa357cb56ff4435"}