{"SourceCode": "# @version 0.2.15\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\ninterface CurveCryptoSwap:\r\n    def token() -> address: view\r\n    def coins(i: uint256) -> address: view\r\n    def get_dy(i: uint256, j: uint256, dx: uint256) -> uint256: view\r\n    def calc_token_amount(amounts: uint256[N_COINS], is_deposit: bool) -> uint256: view\r\n    def calc_withdraw_one_coin(token_amount: uint256, i: uint256) -> uint256: view\r\n    def add_liquidity(amounts: uint256[N_COINS], min_mint_amount: uint256): nonpayable\r\n    def exchange(i: uint256, j: uint256, dx: uint256, min_dy: uint256): nonpayable\r\n    def remove_liquidity(amount: uint256, min_amounts: uint256[N_COINS]): nonpayable\r\n    def remove_liquidity_one_coin(token_amount: uint256, i: uint256, min_amount: uint256): nonpayable\r\n\r\ninterface StableSwap:\r\n    def underlying_coins(i: uint256) -> address: view\r\n    def get_dy(i: int128, j: int128, dx: uint256) -> uint256: view\r\n    def calc_token_amount(amounts: uint256[N_COINS], is_deposit: bool) -> uint256: view\r\n    def calc_withdraw_one_coin(token_amount: uint256, i: int128) -> uint256: view\r\n    def add_liquidity(amounts: uint256[N_COINS], min_mint_amount: uint256, use_underlying: bool) -> uint256: nonpayable\r\n    def remove_liquidity_one_coin(token_amount: uint256, i: int128, min_amount: uint256, use_underlying: bool) -> uint256: nonpayable\r\n    def remove_liquidity(amount: uint256, min_amounts: uint256[N_COINS], use_underlying: bool) -> uint256[N_COINS]: nonpayable\r\n\r\n\r\ninterface LendingPool:\r\n    def withdraw(underlying_asset: address, amount: uint256, receiver: address): nonpayable\r\n\r\ninterface aToken:\r\n    def UNDERLYING_ASSET_ADDRESS() -> address: view\r\n\r\n\r\nN_COINS: constant(int128) = 3\r\nN_STABLECOINS: constant(int128) = 3\r\nN_UL_COINS: constant(int128) = N_COINS + N_STABLECOINS - 1\r\nAAVE_LENDING_POOL: constant(address) = 0x8dFf5E27EA6b7AC08EbFdf9eB090F32ee9a30fcf\r\n\r\naave_referral: uint256\r\ncoins: public(address[N_COINS])\r\nunderlying_coins: public(address[N_UL_COINS])\r\n\r\npool: public(address)\r\nbase_pool: public(address)\r\ntoken: public(address)\r\n\r\n\r\n@external\r\ndef __init__(_pool: address, _base_pool: address):\r\n    self.pool = _pool\r\n    self.base_pool = _base_pool\r\n    self.token = CurveCryptoSwap(_pool).token()\r\n\r\n    for i in range(N_STABLECOINS):\r\n        coin: address = StableSwap(_base_pool).underlying_coins(i)\r\n        self.underlying_coins[i] = coin\r\n        # approve transfer of underlying coin to base pool\r\n        response: Bytes[32] = raw_call(\r\n            coin,\r\n            concat(\r\n                method_id(\"approve(address,uint256)\"),\r\n                convert(_base_pool, bytes32),\r\n                convert(MAX_UINT256, bytes32)\r\n            ),\r\n            max_outsize=32\r\n        )\r\n        if len(response) != 0:\r\n            assert convert(response, bool)\r\n\r\n    for i in range(N_COINS):\r\n        coin: address = CurveCryptoSwap(_pool).coins(i)\r\n        self.coins[i] = coin\r\n        # approve transfer of coin to main pool\r\n        response: Bytes[32] = raw_call(\r\n            coin,\r\n            concat(\r\n                method_id(\"approve(address,uint256)\"),\r\n                convert(_pool, bytes32),\r\n                convert(MAX_UINT256, bytes32)\r\n            ),\r\n            max_outsize=32\r\n        )\r\n        if len(response) != 0:\r\n            assert convert(response, bool)\r\n\r\n        if i != 0:\r\n            # coins >= 1 are aTokens, we must get the underlying asset address\r\n            # and approve transfer into the aave lending pool\r\n            coin = aToken(coin).UNDERLYING_ASSET_ADDRESS()\r\n            self.underlying_coins[i+(N_STABLECOINS-1)] = coin\r\n            response = raw_call(\r\n                coin,\r\n                concat(\r\n                    method_id(\"approve(address,uint256)\"),\r\n                    convert(AAVE_LENDING_POOL, bytes32),\r\n                    convert(MAX_UINT256, bytes32)\r\n                ),\r\n                max_outsize=32\r\n            )\r\n            if len(response) != 0:\r\n                assert convert(response, bool)\r\n\r\n\r\n@external\r\ndef add_liquidity(_amounts: uint256[N_UL_COINS], _min_mint_amount: uint256, _receiver: address = msg.sender):\r\n    base_deposit_amounts: uint256[N_STABLECOINS] = empty(uint256[N_STABLECOINS])\r\n    deposit_amounts: uint256[N_COINS] = empty(uint256[N_COINS])\r\n    is_base_deposit: bool = False\r\n\r\n    # transfer base pool coins from caller and deposit to get LP tokens\r\n    for i in range(N_STABLECOINS):\r\n        amount: uint256 = _amounts[i]\r\n        if amount != 0:\r\n            coin: address = self.underlying_coins[i]\r\n            # transfer underlying coin from msg.sender to self\r\n            _response: Bytes[32] = raw_call(\r\n                coin,\r\n                concat(\r\n                    method_id(\"transferFrom(address,address,uint256)\"),\r\n                    convert(msg.sender, bytes32),\r\n                    convert(self, bytes32),\r\n                    convert(amount, bytes32)\r\n                ),\r\n                max_outsize=32\r\n            )\r\n            if len(_response) != 0:\r\n                assert convert(_response, bool)\r\n            base_deposit_amounts[i] = ERC20(coin).balanceOf(self)\r\n            is_base_deposit = True\r\n\r\n    if is_base_deposit:\r\n        deposit_amounts[0] = StableSwap(self.base_pool).add_liquidity(base_deposit_amounts, 0, True)\r\n\r\n    # transfer remaining underlying coins and deposit into aave\r\n    aave_referral: bytes32 = convert(self.aave_referral, bytes32)\r\n    for i in range(N_STABLECOINS, N_UL_COINS):\r\n        amount: uint256 = _amounts[i]\r\n        if amount != 0:\r\n            coin: address = self.underlying_coins[i]\r\n            # transfer underlying coin from msg.sender to self\r\n            _response: Bytes[32] = raw_call(\r\n                coin,\r\n                concat(\r\n                    method_id(\"transferFrom(address,address,uint256)\"),\r\n                    convert(msg.sender, bytes32),\r\n                    convert(self, bytes32),\r\n                    convert(amount, bytes32)\r\n                ),\r\n                max_outsize=32\r\n            )\r\n            if len(_response) != 0:\r\n                assert convert(_response, bool)\r\n\r\n            # deposit to aave lending pool\r\n            raw_call(\r\n                AAVE_LENDING_POOL,\r\n                concat(\r\n                    method_id(\"deposit(address,uint256,address,uint16)\"),\r\n                    convert(coin, bytes32),\r\n                    convert(amount, bytes32),\r\n                    convert(self, bytes32),\r\n                    aave_referral,\r\n                )\r\n            )\r\n            deposit_amounts[i-(N_STABLECOINS-1)] = amount\r\n\r\n    CurveCryptoSwap(self.pool).add_liquidity(deposit_amounts, _min_mint_amount)\r\n    token: address = self.token\r\n    amount: uint256 = ERC20(token).balanceOf(self)\r\n    ERC20(token).transfer(_receiver, amount)\r\n\r\n\r\n@external\r\ndef exchange_underlying(i: uint256, j: uint256, _dx: uint256, _min_dy: uint256, _receiver: address = msg.sender):\r\n    # transfer `i` from caller into the zap\r\n    response: Bytes[32] = raw_call(\r\n        self.underlying_coins[i],\r\n        concat(\r\n            method_id(\"transferFrom(address,address,uint256)\"),\r\n            convert(msg.sender, bytes32),\r\n            convert(self, bytes32),\r\n            convert(_dx, bytes32)\r\n        ),\r\n        max_outsize=32\r\n    )\r\n    if len(response) != 0:\r\n        assert convert(response, bool)\r\n\r\n    dx: uint256 = _dx\r\n    base_i: uint256 = 0\r\n    base_j: uint256 = 0\r\n    if j >= N_STABLECOINS:\r\n        base_j = j - (N_STABLECOINS - 1)\r\n\r\n    if i < N_STABLECOINS:\r\n        # if `i` is in the base pool, deposit to get LP tokens\r\n        base_deposit_amounts: uint256[N_STABLECOINS] = empty(uint256[N_STABLECOINS])\r\n        base_deposit_amounts[i] = dx\r\n        dx = StableSwap(self.base_pool).add_liquidity(base_deposit_amounts, 0, True)\r\n    else:\r\n        # if `i` is an aToken, deposit to the aave lending pool\r\n        base_i = i - (N_STABLECOINS - 1)\r\n        raw_call(\r\n            AAVE_LENDING_POOL,\r\n            concat(\r\n                method_id(\"deposit(address,uint256,address,uint16)\"),\r\n                convert(self.underlying_coins[i], bytes32),\r\n                convert(dx, bytes32),\r\n                convert(self, bytes32),\r\n                convert(self.aave_referral, bytes32),\r\n            )\r\n        )\r\n\r\n    # perform the exchange\r\n    if max(base_i, base_j) > 0:\r\n        CurveCryptoSwap(self.pool).exchange(base_i, base_j, dx, 0)\r\n    amount: uint256 = ERC20(self.coins[base_j]).balanceOf(self)\r\n\r\n    if base_j == 0:\r\n        # if `j` is in the base pool, withdraw the desired underlying asset and transfer to caller\r\n        amount = StableSwap(self.base_pool).remove_liquidity_one_coin(amount, convert(j, int128), _min_dy, True)\r\n        response = raw_call(\r\n            self.underlying_coins[j],\r\n            concat(\r\n                method_id(\"transfer(address,uint256)\"),\r\n                convert(_receiver, bytes32),\r\n                convert(amount, bytes32)\r\n            ),\r\n            max_outsize=32\r\n        )\r\n        if len(response) != 0:\r\n            assert convert(response, bool)\r\n    else:\r\n        # withdraw `j` underlying from lending pool and transfer to caller\r\n        assert amount >= _min_dy\r\n        LendingPool(AAVE_LENDING_POOL).withdraw(self.underlying_coins[j], amount, _receiver)\r\n\r\n\r\n@external\r\ndef remove_liquidity(_amount: uint256, _min_amounts: uint256[N_UL_COINS], _receiver: address = msg.sender):\r\n    # transfer LP token from caller and remove liquidity\r\n    ERC20(self.token).transferFrom(msg.sender, self, _amount)\r\n    min_amounts: uint256[N_COINS] = [0, _min_amounts[3], _min_amounts[4]]\r\n    CurveCryptoSwap(self.pool).remove_liquidity(_amount, min_amounts)\r\n\r\n    # withdraw from base pool and transfer underlying assets to receiver\r\n    value: uint256 = ERC20(self.coins[0]).balanceOf(self)\r\n    base_min_amounts: uint256[N_STABLECOINS] = [_min_amounts[0], _min_amounts[1], _min_amounts[2]]\r\n    received: uint256[N_STABLECOINS] = StableSwap(self.base_pool).remove_liquidity(value, base_min_amounts, True)\r\n    for i in range(N_STABLECOINS):\r\n        response: Bytes[32] = raw_call(\r\n            self.underlying_coins[i],\r\n            concat(\r\n                method_id(\"transfer(address,uint256)\"),\r\n                convert(_receiver, bytes32),\r\n                convert(received[i], bytes32)\r\n            ),\r\n            max_outsize=32\r\n        )\r\n        if len(response) != 0:\r\n            assert convert(response, bool)\r\n\r\n    # withdraw from aave lending pool and transfer to receiver\r\n    for i in range(N_STABLECOINS, N_UL_COINS):\r\n        value = ERC20(self.coins[i-(N_STABLECOINS-1)]).balanceOf(self)\r\n        LendingPool(AAVE_LENDING_POOL).withdraw(self.underlying_coins[i], value, _receiver)\r\n\r\n\r\n@external\r\ndef remove_liquidity_one_coin(_token_amount: uint256, i: uint256, _min_amount: uint256, _receiver: address = msg.sender):\r\n    ERC20(self.token).transferFrom(msg.sender, self, _token_amount)\r\n    base_i: uint256 = 0\r\n    if i >= N_STABLECOINS:\r\n        base_i = i - (N_STABLECOINS-1)\r\n    CurveCryptoSwap(self.pool).remove_liquidity_one_coin(_token_amount, base_i, 0)\r\n\r\n    value: uint256 = ERC20(self.coins[base_i]).balanceOf(self)\r\n    if base_i == 0:\r\n        value = StableSwap(self.base_pool).remove_liquidity_one_coin(value, convert(i, int128), _min_amount, True)\r\n        response: Bytes[32] = raw_call(\r\n            self.underlying_coins[i],\r\n            concat(\r\n                method_id(\"transfer(address,uint256)\"),\r\n                convert(_receiver, bytes32),\r\n                convert(value, bytes32)\r\n            ),\r\n            max_outsize=32\r\n        )\r\n        if len(response) != 0:\r\n            assert convert(response, bool)\r\n    else:\r\n        assert value >= _min_amount\r\n        LendingPool(AAVE_LENDING_POOL).withdraw(self.underlying_coins[i], value, _receiver)\r\n\r\n\r\n@view\r\n@external\r\ndef get_dy_underlying(i: uint256, j: uint256, _dx: uint256) -> uint256:\r\n    if max(i, j) < N_STABLECOINS:\r\n        return StableSwap(self.base_pool).get_dy(convert(i, int128), convert(j, int128), _dx)\r\n\r\n    dx: uint256 = _dx\r\n    base_i: uint256 = 0\r\n    base_j: uint256 = 0\r\n    if j >= N_STABLECOINS:\r\n        base_j = j - (N_STABLECOINS - 1)\r\n\r\n    if i < N_STABLECOINS:\r\n        amounts: uint256[N_STABLECOINS] = empty(uint256[N_STABLECOINS])\r\n        amounts[i] = dx\r\n        dx = StableSwap(self.base_pool).calc_token_amount(amounts, True)\r\n    else:\r\n        base_i = i - (N_STABLECOINS - 1)\r\n\r\n    dy: uint256 = CurveCryptoSwap(self.pool).get_dy(base_i, base_j, dx)\r\n    if base_j == 0:\r\n        return StableSwap(self.base_pool).calc_withdraw_one_coin(dy, convert(j, int128))\r\n    else:\r\n        return dy\r\n\r\n\r\n@view\r\n@external\r\ndef calc_token_amount(_amounts: uint256[N_UL_COINS], _is_deposit: bool) -> uint256:\r\n    base_amounts: uint256[N_COINS] = [_amounts[0], _amounts[1], _amounts[2]]\r\n    base_lp: uint256 = StableSwap(self.base_pool).calc_token_amount(base_amounts, _is_deposit)\r\n    amounts: uint256[N_COINS] = [base_lp, _amounts[3], _amounts[4]]\r\n    return CurveCryptoSwap(self.pool).calc_token_amount(amounts, _is_deposit)\r\n\r\n\r\n@view\r\n@external\r\ndef calc_withdraw_one_coin(token_amount: uint256, i: uint256) -> uint256:\r\n    if i >= N_STABLECOINS:\r\n        return CurveCryptoSwap(self.pool).calc_withdraw_one_coin(token_amount, i - (N_STABLECOINS - 1))\r\n\r\n    base_amount: uint256 = CurveCryptoSwap(self.pool).calc_withdraw_one_coin(token_amount, 0)\r\n    return StableSwap(self.base_pool).calc_withdraw_one_coin(base_amount, convert(i, int128))", "ABI": "[{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_pool\",\"type\":\"address\"},{\"name\":\"_base_pool\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"add_liquidity\",\"inputs\":[{\"name\":\"_amounts\",\"type\":\"uint256[5]\"},{\"name\":\"_min_mint_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"add_liquidity\",\"inputs\":[{\"name\":\"_amounts\",\"type\":\"uint256[5]\"},{\"name\":\"_min_mint_amount\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"exchange_underlying\",\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"},{\"name\":\"j\",\"type\":\"uint256\"},{\"name\":\"_dx\",\"type\":\"uint256\"},{\"name\":\"_min_dy\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"exchange_underlying\",\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"},{\"name\":\"j\",\"type\":\"uint256\"},{\"name\":\"_dx\",\"type\":\"uint256\"},{\"name\":\"_min_dy\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_min_amounts\",\"type\":\"uint256[5]\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_min_amounts\",\"type\":\"uint256[5]\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity_one_coin\",\"inputs\":[{\"name\":\"_token_amount\",\"type\":\"uint256\"},{\"name\":\"i\",\"type\":\"uint256\"},{\"name\":\"_min_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity_one_coin\",\"inputs\":[{\"name\":\"_token_amount\",\"type\":\"uint256\"},{\"name\":\"i\",\"type\":\"uint256\"},{\"name\":\"_min_amount\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_dy_underlying\",\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"},{\"name\":\"j\",\"type\":\"uint256\"},{\"name\":\"_dx\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":19203},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"calc_token_amount\",\"inputs\":[{\"name\":\"_amounts\",\"type\":\"uint256[5]\"},{\"name\":\"_is_deposit\",\"type\":\"bool\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":9705},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"calc_withdraw_one_coin\",\"inputs\":[{\"name\":\"token_amount\",\"type\":\"uint256\"},{\"name\":\"i\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":14299},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"coins\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2643},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"underlying_coins\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2673},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"pool\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2658},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"base_pool\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2688},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"token\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2718}]", "ContractName": "Vyper_contract", "CompilerVersion": "vyper:0.2.15", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "00000000000000000000000092577943c7ac4accb35288ab2cc84d75fec330af000000000000000000000000445fe580ef8d70ff569ab36e80c647af338db351", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}