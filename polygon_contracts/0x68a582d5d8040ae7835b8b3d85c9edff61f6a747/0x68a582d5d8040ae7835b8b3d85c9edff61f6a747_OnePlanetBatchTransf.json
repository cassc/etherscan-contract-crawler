{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/batchTransfer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport { ERC721Interface, ERC1155Interface } from \\\"./interfaces/AbridgedTokenInterfaces.sol\\\";\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ncontract OnePlanetBatchTransfer {\\n    error UnAuthorized();\\n\\n    error InvalidContract(address contractAddress);\\n\\n    struct NftTransfer {\\n        address to;\\n        address nftContract;\\n        uint256 tokenId;\\n        uint256 amount;\\n    }\\n\\n    function batchTransfer(\\n        NftTransfer[] calldata transfers\\n    ) external {\\n        uint256 length = transfers.length;\\n        address owner = msg.sender;\\n\\n        unchecked {\\n            for(uint256 i; i< length; ) {\\n                NftTransfer memory transfer = transfers[i];\\n\\n                bool isERC721 = _checkInterface(transfer.nftContract);\\n                if (isERC721) {\\n                    ERC721Interface(transfer.nftContract).safeTransferFrom(owner, transfer.to, transfer.tokenId);\\n                } else {\\n                    ERC1155Interface(transfer.nftContract).safeTransferFrom(owner, transfer.to, transfer.tokenId, transfer.amount, \\\"\\\");\\n                }\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks if the specified contract implements the ERC-721 token standard.\\n     *\\n     * @param addr The address of the contract to check.\\n     *\\n     * @return isERC721 True if the contract implements the ERC-721 token standard, false if ERC-1155.\\n     */\\n    function _checkInterface(address addr) internal view returns (bool isERC721) {\\n        isERC721 = IERC165(addr).supportsInterface(0x80ac58cd);\\n\\n        if(!isERC721) {\\n            bool isERC1155 = IERC165(addr).supportsInterface(0xd9b67a26);\\n\\n            if (!isERC1155) {\\n                revert InvalidContract(addr);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/AbridgedTokenInterfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface ERC20Interface {\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function transfer(\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function balanceOf(\\n        address\\n    ) external view returns (uint256);\\n}\\n\\ninterface ERC721Interface {\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function safeTransferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n\\n\\n    function mint(\\n        address,\\n        uint256\\n    ) external;\\n\\n    function burn(\\n        uint256\\n    ) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n}\\n\\ninterface ERC1155Interface {\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n\\n    function mint(\\n        address,\\n        uint256,\\n        uint256\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"InvalidContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnAuthorized\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct OnePlanetBatchTransfer.NftTransfer[]\",\"name\":\"transfers\",\"type\":\"tuple[]\"}],\"name\":\"batchTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OnePlanetBatchTransfer", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}