{"SourceCode": "pragma solidity ^0.8.4;\r\n\r\ncontract DeflationaryTaxToken {\r\n    mapping(address => uint) private balances;\r\n    mapping(address => mapping(address => uint)) private allowed;\r\n    uint public totalSupply;\r\n    string public name;\r\n    string public symbol;\r\n    uint public decimals;\r\n    uint public tax1;\r\n    uint public tax2;\r\n    address public addressTax1;\r\n    address public addressTax2;\r\n    uint public deflation;\r\n    uint public minSupply;\r\n    uint public initialSupply;\r\n    uint public totalTax1;\r\n    uint public totalTax2;\r\n    uint public burnt;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    \r\n    constructor(string memory _name, string memory _symbol, uint _dec, uint _supply, uint _tax1, address _address1, uint _tax2, address _address2, uint _deflation, uint _minSupply, address _owner) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _dec;\r\n        totalSupply = _supply * 10 ** decimals;\r\n        initialSupply = _supply * 10 ** decimals;\r\n        tax1 = _tax1;\r\n        tax2 = _tax2;\r\n        addressTax1 = _address1;\r\n        addressTax2 = _address2;\r\n        deflation = _deflation;\r\n        minSupply = _minSupply * 10 ** decimals;\r\n        totalTax1 = 0;\r\n        totalTax2 = 0;\r\n        burnt = 0;\r\n        balances[_owner] = totalSupply;\r\n        emit Transfer(address(0), _owner, totalSupply);\r\n    }\r\n    \r\n    function balanceOf(address owner) public view returns(uint) {\r\n        return balances[owner];\r\n    }\r\n    \r\n    function transfer(address to, uint value) public returns(bool) {\r\n        require(balances[msg.sender] >= value, 'balance too low');\r\n        \r\n        balances[msg.sender] -= value;\r\n        \r\n        uint deduct = 0;\r\n        \r\n        if (tax1 > 0) {\r\n            uint tax1Amount = value * tax1 / 1000;\r\n            \r\n            if (tax1Amount > 0) {\r\n                \r\n                deduct = deduct + tax1Amount;\r\n                totalTax1 += tax1Amount;\r\n                balances[addressTax1] += tax1Amount;\r\n                emit Transfer(msg.sender, addressTax1, tax1Amount);\r\n            }\r\n        }\r\n        \r\n        if (tax2 > 0) {\r\n            uint tax2Amount = value * tax2 / 1000;\r\n            \r\n            if (tax2Amount > 0) {\r\n                \r\n                deduct = deduct + tax2Amount;\r\n                totalTax2 += tax2Amount;\r\n                balances[addressTax2] += tax2Amount;\r\n                emit Transfer(msg.sender, addressTax2, tax2Amount);\r\n            }\r\n        }\r\n        \r\n        if (deflation > 0 && totalSupply > minSupply) {\r\n            uint defAmount = value * deflation / 1000;\r\n            \r\n            if (defAmount > 0) {\r\n                \r\n                if (totalSupply - defAmount < minSupply) {\r\n                    defAmount = totalSupply - minSupply;\r\n                }\r\n                deduct = deduct + defAmount;\r\n                totalSupply -= defAmount;\r\n                burnt += defAmount;\r\n                emit Transfer(msg.sender, address(0), defAmount);\r\n            }\r\n        }\r\n        \r\n        value = value - deduct;\r\n        \r\n        balances[to] += value;\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint value) public returns(bool) {\r\n        require(balances[from] >= value, 'balance too low');\r\n        require(allowed[from][msg.sender] >= value, 'allowance too low');\r\n        \r\n        balances[from] -= value;\r\n        allowed[from][msg.sender] -=value;\r\n        \r\n        uint deduct = 0;\r\n        \r\n        if (tax1 > 0) {\r\n            uint tax1Amount = value * tax1 / 1000;\r\n            \r\n            if (tax1Amount > 0) {\r\n                \r\n                deduct = deduct + tax1Amount;\r\n                totalTax1 += tax1Amount;\r\n                balances[addressTax1] += tax1Amount;\r\n                emit Transfer(from, addressTax1, tax1Amount);\r\n            }\r\n        }\r\n        \r\n        if (tax2 > 0) {\r\n            uint tax2Amount = value * tax2 / 1000;\r\n            \r\n            if (tax2Amount > 0) {\r\n                \r\n                deduct = deduct + tax2Amount;\r\n                totalTax2 += tax2Amount;\r\n                balances[addressTax2] += tax2Amount;\r\n                emit Transfer(from, addressTax2, tax2Amount);\r\n            }\r\n        }\r\n        \r\n        if (deflation > 0 && totalSupply > minSupply) {\r\n            uint defAmount = value * deflation / 1000;\r\n            \r\n            if (defAmount > 0) {\r\n                \r\n                if (totalSupply - defAmount < minSupply) {\r\n                    defAmount = totalSupply - minSupply;\r\n                }\r\n                deduct = deduct + defAmount;\r\n                totalSupply -= defAmount;\r\n                burnt += defAmount;\r\n                emit Transfer(from, address(0), defAmount);\r\n            }\r\n        }\r\n        \r\n        value = value - deduct;\r\n        \r\n        balances[to] += value;\r\n        emit Transfer(from, to, value);\r\n        return true;   \r\n    }\r\n    \r\n    function approve(address spender, uint value) public returns (bool) {\r\n        allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;   \r\n    }\r\n    \r\n    function allowance(address owner, address spender) public view returns (uint) {\r\n        return allowed[owner][spender];\r\n    }\r\n    \r\n}\r\n\r\n contract DeflationaryTaxTokenBuilder {\r\n    \r\n    address public owner;\r\n    address public beneficiary;\r\n    uint public cost;\r\n    uint public totalBuilt;\r\n    \r\n    mapping (address => address[]) public mytokens;\r\n\r\n    event TokenCreated(address indexed tokenCreator, address indexed tokenAddress, string name, string symbol, uint decimals, uint totalSupply, uint tax1, address address1, uint tax2, address address2, uint deflation, uint minSupply);\r\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\r\n    event BeneficiarySet(address indexed oldBeneficiary, address indexed newBeneficiary);\r\n    event Cost(uint newCost);\r\n    \r\n    modifier isOwner() {\r\n        require(msg.sender == owner, \"Only owner can do this!\");\r\n        _;\r\n    }\r\n    \r\n    constructor(uint _cost) {\r\n        owner = msg.sender;\r\n        beneficiary = msg.sender;\r\n        cost = _cost;\r\n        totalBuilt = 0;\r\n    }\r\n\r\n    function createToken(string memory name, string memory symbol, uint decimals, uint totalSupply, uint tax1, address address1, uint tax2, address address2, uint deflation, uint minSupply, address to) public payable returns(address tokenAddress) { \r\n        require(minSupply <= totalSupply, \"min supply more than initial supply\");\r\n        require(tax1 + tax2 + deflation <= 1000, \"taxes are more than 100 percent\");\r\n        require(msg.value >= cost, \"not enough ETH\");\r\n        if (msg.value > cost) {\r\n            payable(msg.sender).transfer(msg.value - cost);\r\n        }\r\n        DeflationaryTaxToken newtoken = new DeflationaryTaxToken(name, symbol, decimals, totalSupply, tax1, address1, tax2, address2, deflation, minSupply, to);\r\n        mytokens[msg.sender].push(address(newtoken));\r\n        \r\n        totalBuilt++;\r\n\r\n        emit TokenCreated(msg.sender, address(newtoken), name, symbol, decimals, totalSupply, tax1, address1, tax2, address2, deflation, minSupply);\r\n\r\n        return(address(newtoken));\r\n    } \r\n\r\n    function myTokens() public view returns (address[] memory) {\r\n        return mytokens[msg.sender];\r\n    }\r\n    \r\n    function changeCost(uint _newcost) public isOwner {\r\n        cost = _newcost;\r\n        emit Cost(_newcost);\r\n    }\r\n    \r\n    function withdraw() public isOwner {\r\n        uint amount = address(this).balance;\r\n        payable(beneficiary).transfer(amount);\r\n    }\r\n    \r\n    function changeOwner(address newOwner) public isOwner {\r\n        emit OwnerSet(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n    \r\n    function changeBeneficiary(address newBeneficiary) public isOwner {\r\n        beneficiary = newBeneficiary;\r\n        emit BeneficiarySet(beneficiary, newBeneficiary);\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_dec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tax1\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tax2\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deflation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addressTax1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressTax2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deflation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tax1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tax2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTax1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTax2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DeflationaryTaxToken", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000012a05f20000000000000000000000000000000000000000000000000000000000000000140000000000000000000000007305af6b8313dc6962304ef3232b2d3f4f12512c00000000000000000000000000000000000000000000000000000000000000140000000000000000000000005203bdb428a962ae956b681dfa1355ca6d06d14f0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000005dc3d58eaf5bbce56b13c86ed9f285ea2316219b0000000000000000000000000000000000000000000000000000000000000008506f6c794c65676f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004504c594700000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://20cc0f3fcfd245cdc4d8acc55c3829e284b42fa1c471fd2095f0252063c4f319"}